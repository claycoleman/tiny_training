
TTE_demo_mcunet.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00027910  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00088238  08027ae0  08027ae0  00028ae0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    000000dc  080afd18  080afd18  000b0d18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          00000198  080afdf4  080afdf4  000b0df4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .init_array   00000014  080aff8c  080aff8c  000b0f8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .fini_array   00000008  080affa0  080affa0  000b0fa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .data         00008ae0  20000000  080affa8  000b1000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          00034510  20008ae0  080b8a88  000b9ae0  2**3
                  ALLOC
  9 ._user_heap_stack 00000a00  2003cff0  080b8a88  000b9ff0  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  000b9ae0  2**0
                  CONTENTS, READONLY
 11 .debug_info   000c6119  00000000  00000000  000b9b10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 0000843f  00000000  00000000  0017fc29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_loclists 00032dcc  00000000  00000000  00188068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d30  00000000  00000000  001bae38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000024bb  00000000  00000000  001bcb68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0003e983  00000000  00000000  001bf023  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0000c889  00000000  00000000  001fd9a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  0020a22f  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000083a4  00000000  00000000  0020a274  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 00000081  00000000  00000000  00212618  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20008ae0 	.word	0x20008ae0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08027ac8 	.word	0x08027ac8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20008ae4 	.word	0x20008ae4
 800020c:	08027ac8 	.word	0x08027ac8

08000210 <d_make_comp>:
 8000210:	2931      	cmp	r1, #49	@ 0x31
 8000212:	b570      	push	{r4, r5, r6, lr}
 8000214:	4686      	mov	lr, r0
 8000216:	d845      	bhi.n	80002a4 <d_make_comp+0x94>
 8000218:	2928      	cmp	r1, #40	@ 0x28
 800021a:	d82a      	bhi.n	8000272 <d_make_comp+0x62>
 800021c:	290a      	cmp	r1, #10
 800021e:	d920      	bls.n	8000262 <d_make_comp+0x52>
 8000220:	f1a1 0c0b 	sub.w	ip, r1, #11
 8000224:	4c32      	ldr	r4, [pc, #200]	@ (80002f0 <d_make_comp+0xe0>)
 8000226:	fa5f fc8c 	uxtb.w	ip, ip
 800022a:	2001      	movs	r0, #1
 800022c:	fa00 f00c 	lsl.w	r0, r0, ip
 8000230:	4004      	ands	r4, r0
 8000232:	2c00      	cmp	r4, #0
 8000234:	d04d      	beq.n	80002d2 <d_make_comp+0xc2>
 8000236:	b1d2      	cbz	r2, 800026e <d_make_comp+0x5e>
 8000238:	e9de 4005 	ldrd	r4, r0, [lr, #20]
 800023c:	4284      	cmp	r4, r0
 800023e:	da16      	bge.n	800026e <d_make_comp+0x5e>
 8000240:	f8de 5010 	ldr.w	r5, [lr, #16]
 8000244:	eb04 0c84 	add.w	ip, r4, r4, lsl #2
 8000248:	eb05 008c 	add.w	r0, r5, ip, lsl #2
 800024c:	3401      	adds	r4, #1
 800024e:	2600      	movs	r6, #0
 8000250:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8000254:	f8ce 4014 	str.w	r4, [lr, #20]
 8000258:	f805 102c 	strb.w	r1, [r5, ip, lsl #2]
 800025c:	e9c0 2303 	strd	r2, r3, [r0, #12]
 8000260:	bd70      	pop	{r4, r5, r6, pc}
 8000262:	2904      	cmp	r1, #4
 8000264:	d930      	bls.n	80002c8 <d_make_comp+0xb8>
 8000266:	f1a1 0009 	sub.w	r0, r1, #9
 800026a:	2801      	cmp	r0, #1
 800026c:	d9e3      	bls.n	8000236 <d_make_comp+0x26>
 800026e:	2000      	movs	r0, #0
 8000270:	bd70      	pop	{r4, r5, r6, pc}
 8000272:	f1a1 0029 	sub.w	r0, r1, #41	@ 0x29
 8000276:	2808      	cmp	r0, #8
 8000278:	d8f9      	bhi.n	800026e <d_make_comp+0x5e>
 800027a:	a401      	add	r4, pc, #4	@ (adr r4, 8000280 <d_make_comp+0x70>)
 800027c:	f854 f020 	ldr.w	pc, [r4, r0, lsl #2]
 8000280:	08000239 	.word	0x08000239
 8000284:	080002cd 	.word	0x080002cd
 8000288:	080002c9 	.word	0x080002c9
 800028c:	0800026f 	.word	0x0800026f
 8000290:	080002c9 	.word	0x080002c9
 8000294:	08000239 	.word	0x08000239
 8000298:	08000239 	.word	0x08000239
 800029c:	08000237 	.word	0x08000237
 80002a0:	080002cd 	.word	0x080002cd
 80002a4:	f1a1 0034 	sub.w	r0, r1, #52	@ 0x34
 80002a8:	b2c0      	uxtb	r0, r0
 80002aa:	281d      	cmp	r0, #29
 80002ac:	d8df      	bhi.n	800026e <d_make_comp+0x5e>
 80002ae:	4c11      	ldr	r4, [pc, #68]	@ (80002f4 <d_make_comp+0xe4>)
 80002b0:	f04f 0c01 	mov.w	ip, #1
 80002b4:	fa0c fc00 	lsl.w	ip, ip, r0
 80002b8:	ea0c 0404 	and.w	r4, ip, r4
 80002bc:	2c00      	cmp	r4, #0
 80002be:	d1ba      	bne.n	8000236 <d_make_comp+0x26>
 80002c0:	480d      	ldr	r0, [pc, #52]	@ (80002f8 <d_make_comp+0xe8>)
 80002c2:	ea0c 0000 	and.w	r0, ip, r0
 80002c6:	b170      	cbz	r0, 80002e6 <d_make_comp+0xd6>
 80002c8:	2a00      	cmp	r2, #0
 80002ca:	d0d0      	beq.n	800026e <d_make_comp+0x5e>
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d1b3      	bne.n	8000238 <d_make_comp+0x28>
 80002d0:	e7cd      	b.n	800026e <d_make_comp+0x5e>
 80002d2:	f410 1f7f 	tst.w	r0, #4177920	@ 0x3fc000
 80002d6:	d1af      	bne.n	8000238 <d_make_comp+0x28>
 80002d8:	4c08      	ldr	r4, [pc, #32]	@ (80002fc <d_make_comp+0xec>)
 80002da:	4004      	ands	r4, r0
 80002dc:	2c00      	cmp	r4, #0
 80002de:	d0c6      	beq.n	800026e <d_make_comp+0x5e>
 80002e0:	2a00      	cmp	r2, #0
 80002e2:	d1f3      	bne.n	80002cc <d_make_comp+0xbc>
 80002e4:	e7c3      	b.n	800026e <d_make_comp+0x5e>
 80002e6:	f01c 5c50 	ands.w	ip, ip, #872415232	@ 0x34000000
 80002ea:	d0c0      	beq.n	800026e <d_make_comp+0x5e>
 80002ec:	e7a4      	b.n	8000238 <d_make_comp+0x28>
 80002ee:	bf00      	nop
 80002f0:	2f801ffe 	.word	0x2f801ffe
 80002f4:	01c71107 	.word	0x01c71107
 80002f8:	0a002ef8 	.word	0x0a002ef8
 80002fc:	00400001 	.word	0x00400001

08000300 <d_number>:
 8000300:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000302:	68c2      	ldr	r2, [r0, #12]
 8000304:	7811      	ldrb	r1, [r2, #0]
 8000306:	296e      	cmp	r1, #110	@ 0x6e
 8000308:	4686      	mov	lr, r0
 800030a:	d025      	beq.n	8000358 <d_number+0x58>
 800030c:	3930      	subs	r1, #48	@ 0x30
 800030e:	b2cb      	uxtb	r3, r1
 8000310:	2b09      	cmp	r3, #9
 8000312:	d82b      	bhi.n	800036c <d_number+0x6c>
 8000314:	2600      	movs	r6, #0
 8000316:	4d16      	ldr	r5, [pc, #88]	@ (8000370 <d_number+0x70>)
 8000318:	2000      	movs	r0, #0
 800031a:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 800031e:	e002      	b.n	8000326 <d_number+0x26>
 8000320:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
 8000324:	dc15      	bgt.n	8000352 <d_number+0x52>
 8000326:	3201      	adds	r2, #1
 8000328:	f8ce 200c 	str.w	r2, [lr, #12]
 800032c:	7813      	ldrb	r3, [r2, #0]
 800032e:	3b30      	subs	r3, #48	@ 0x30
 8000330:	fa5f fc83 	uxtb.w	ip, r3
 8000334:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8000338:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 800033c:	f1bc 0f09 	cmp.w	ip, #9
 8000340:	4619      	mov	r1, r3
 8000342:	eba4 0303 	sub.w	r3, r4, r3
 8000346:	fba5 7303 	umull	r7, r3, r5, r3
 800034a:	d9e9      	bls.n	8000320 <d_number+0x20>
 800034c:	b106      	cbz	r6, 8000350 <d_number+0x50>
 800034e:	4240      	negs	r0, r0
 8000350:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000352:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000356:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000358:	1c53      	adds	r3, r2, #1
 800035a:	60c3      	str	r3, [r0, #12]
 800035c:	7851      	ldrb	r1, [r2, #1]
 800035e:	3930      	subs	r1, #48	@ 0x30
 8000360:	b2ca      	uxtb	r2, r1
 8000362:	2a09      	cmp	r2, #9
 8000364:	d802      	bhi.n	800036c <d_number+0x6c>
 8000366:	461a      	mov	r2, r3
 8000368:	2601      	movs	r6, #1
 800036a:	e7d4      	b.n	8000316 <d_number+0x16>
 800036c:	2000      	movs	r0, #0
 800036e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000370:	cccccccd 	.word	0xcccccccd

08000374 <d_call_offset>:
 8000374:	b510      	push	{r4, lr}
 8000376:	4604      	mov	r4, r0
 8000378:	b929      	cbnz	r1, 8000386 <d_call_offset+0x12>
 800037a:	68c3      	ldr	r3, [r0, #12]
 800037c:	781a      	ldrb	r2, [r3, #0]
 800037e:	b16a      	cbz	r2, 800039c <d_call_offset+0x28>
 8000380:	1c5a      	adds	r2, r3, #1
 8000382:	60c2      	str	r2, [r0, #12]
 8000384:	7819      	ldrb	r1, [r3, #0]
 8000386:	2968      	cmp	r1, #104	@ 0x68
 8000388:	d00c      	beq.n	80003a4 <d_call_offset+0x30>
 800038a:	2976      	cmp	r1, #118	@ 0x76
 800038c:	d106      	bne.n	800039c <d_call_offset+0x28>
 800038e:	4620      	mov	r0, r4
 8000390:	f7ff ffb6 	bl	8000300 <d_number>
 8000394:	68e3      	ldr	r3, [r4, #12]
 8000396:	781a      	ldrb	r2, [r3, #0]
 8000398:	2a5f      	cmp	r2, #95	@ 0x5f
 800039a:	d001      	beq.n	80003a0 <d_call_offset+0x2c>
 800039c:	2000      	movs	r0, #0
 800039e:	bd10      	pop	{r4, pc}
 80003a0:	3301      	adds	r3, #1
 80003a2:	60e3      	str	r3, [r4, #12]
 80003a4:	4620      	mov	r0, r4
 80003a6:	f7ff ffab 	bl	8000300 <d_number>
 80003aa:	68e3      	ldr	r3, [r4, #12]
 80003ac:	781a      	ldrb	r2, [r3, #0]
 80003ae:	2a5f      	cmp	r2, #95	@ 0x5f
 80003b0:	d1f4      	bne.n	800039c <d_call_offset+0x28>
 80003b2:	3301      	adds	r3, #1
 80003b4:	60e3      	str	r3, [r4, #12]
 80003b6:	2001      	movs	r0, #1
 80003b8:	bd10      	pop	{r4, pc}
 80003ba:	bf00      	nop

080003bc <d_discriminator>:
 80003bc:	68c3      	ldr	r3, [r0, #12]
 80003be:	781a      	ldrb	r2, [r3, #0]
 80003c0:	2a5f      	cmp	r2, #95	@ 0x5f
 80003c2:	d001      	beq.n	80003c8 <d_discriminator+0xc>
 80003c4:	2001      	movs	r0, #1
 80003c6:	4770      	bx	lr
 80003c8:	b510      	push	{r4, lr}
 80003ca:	1c5a      	adds	r2, r3, #1
 80003cc:	60c2      	str	r2, [r0, #12]
 80003ce:	785a      	ldrb	r2, [r3, #1]
 80003d0:	2a5f      	cmp	r2, #95	@ 0x5f
 80003d2:	4604      	mov	r4, r0
 80003d4:	d004      	beq.n	80003e0 <d_discriminator+0x24>
 80003d6:	f7ff ff93 	bl	8000300 <d_number>
 80003da:	43c0      	mvns	r0, r0
 80003dc:	0fc0      	lsrs	r0, r0, #31
 80003de:	bd10      	pop	{r4, pc}
 80003e0:	3302      	adds	r3, #2
 80003e2:	60c3      	str	r3, [r0, #12]
 80003e4:	f7ff ff8c 	bl	8000300 <d_number>
 80003e8:	2800      	cmp	r0, #0
 80003ea:	db07      	blt.n	80003fc <d_discriminator+0x40>
 80003ec:	2809      	cmp	r0, #9
 80003ee:	dc01      	bgt.n	80003f4 <d_discriminator+0x38>
 80003f0:	2001      	movs	r0, #1
 80003f2:	bd10      	pop	{r4, pc}
 80003f4:	68e3      	ldr	r3, [r4, #12]
 80003f6:	781a      	ldrb	r2, [r3, #0]
 80003f8:	2a5f      	cmp	r2, #95	@ 0x5f
 80003fa:	d001      	beq.n	8000400 <d_discriminator+0x44>
 80003fc:	2000      	movs	r0, #0
 80003fe:	bd10      	pop	{r4, pc}
 8000400:	3301      	adds	r3, #1
 8000402:	60e3      	str	r3, [r4, #12]
 8000404:	e7f4      	b.n	80003f0 <d_discriminator+0x34>
 8000406:	bf00      	nop

08000408 <d_count_templates_scopes>:
 8000408:	2900      	cmp	r1, #0
 800040a:	d066      	beq.n	80004da <d_count_templates_scopes+0xd2>
 800040c:	b538      	push	{r3, r4, r5, lr}
 800040e:	4605      	mov	r5, r0
 8000410:	460c      	mov	r4, r1
 8000412:	68a3      	ldr	r3, [r4, #8]
 8000414:	2b01      	cmp	r3, #1
 8000416:	dc39      	bgt.n	800048c <d_count_templates_scopes+0x84>
 8000418:	f8d5 011c 	ldr.w	r0, [r5, #284]	@ 0x11c
 800041c:	f5b0 6f80 	cmp.w	r0, #1024	@ 0x400
 8000420:	f103 0301 	add.w	r3, r3, #1
 8000424:	dc32      	bgt.n	800048c <d_count_templates_scopes+0x84>
 8000426:	7822      	ldrb	r2, [r4, #0]
 8000428:	60a3      	str	r3, [r4, #8]
 800042a:	1e53      	subs	r3, r2, #1
 800042c:	2b50      	cmp	r3, #80	@ 0x50
 800042e:	d82d      	bhi.n	800048c <d_count_templates_scopes+0x84>
 8000430:	e8df f003 	tbb	[pc, r3]
 8000434:	4c313131 	.word	0x4c313131
 8000438:	2d2d2c2c 	.word	0x2d2d2c2c
 800043c:	31313131 	.word	0x31313131
 8000440:	31313131 	.word	0x31313131
 8000444:	31313131 	.word	0x31313131
 8000448:	2c313131 	.word	0x2c313131
 800044c:	31313131 	.word	0x31313131
 8000450:	31313131 	.word	0x31313131
 8000454:	42423131 	.word	0x42423131
 8000458:	312c3131 	.word	0x312c3131
 800045c:	29313131 	.word	0x29313131
 8000460:	31313131 	.word	0x31313131
 8000464:	312d2c31 	.word	0x312d2c31
 8000468:	31313131 	.word	0x31313131
 800046c:	31313131 	.word	0x31313131
 8000470:	31313131 	.word	0x31313131
 8000474:	312c2c31 	.word	0x312c2c31
 8000478:	29292929 	.word	0x29292929
 800047c:	3131312c 	.word	0x3131312c
 8000480:	31313131 	.word	0x31313131
 8000484:	31          	.byte	0x31
 8000485:	00          	.byte	0x00
 8000486:	68e4      	ldr	r4, [r4, #12]
 8000488:	2c00      	cmp	r4, #0
 800048a:	d1c2      	bne.n	8000412 <d_count_templates_scopes+0xa>
 800048c:	bd38      	pop	{r3, r4, r5, pc}
 800048e:	6924      	ldr	r4, [r4, #16]
 8000490:	2c00      	cmp	r4, #0
 8000492:	d1be      	bne.n	8000412 <d_count_templates_scopes+0xa>
 8000494:	e7fa      	b.n	800048c <d_count_templates_scopes+0x84>
 8000496:	68e1      	ldr	r1, [r4, #12]
 8000498:	1c43      	adds	r3, r0, #1
 800049a:	f8c5 311c 	str.w	r3, [r5, #284]	@ 0x11c
 800049e:	4628      	mov	r0, r5
 80004a0:	f7ff ffb2 	bl	8000408 <d_count_templates_scopes>
 80004a4:	6921      	ldr	r1, [r4, #16]
 80004a6:	4628      	mov	r0, r5
 80004a8:	f7ff ffae 	bl	8000408 <d_count_templates_scopes>
 80004ac:	f8d5 311c 	ldr.w	r3, [r5, #284]	@ 0x11c
 80004b0:	3b01      	subs	r3, #1
 80004b2:	f8c5 311c 	str.w	r3, [r5, #284]	@ 0x11c
 80004b6:	bd38      	pop	{r3, r4, r5, pc}
 80004b8:	68e1      	ldr	r1, [r4, #12]
 80004ba:	780b      	ldrb	r3, [r1, #0]
 80004bc:	2b05      	cmp	r3, #5
 80004be:	d1eb      	bne.n	8000498 <d_count_templates_scopes+0x90>
 80004c0:	f8d5 3138 	ldr.w	r3, [r5, #312]	@ 0x138
 80004c4:	3301      	adds	r3, #1
 80004c6:	f8c5 3138 	str.w	r3, [r5, #312]	@ 0x138
 80004ca:	e7e5      	b.n	8000498 <d_count_templates_scopes+0x90>
 80004cc:	f8d5 3144 	ldr.w	r3, [r5, #324]	@ 0x144
 80004d0:	68e1      	ldr	r1, [r4, #12]
 80004d2:	3301      	adds	r3, #1
 80004d4:	f8c5 3144 	str.w	r3, [r5, #324]	@ 0x144
 80004d8:	e7de      	b.n	8000498 <d_count_templates_scopes+0x90>
 80004da:	4770      	bx	lr

080004dc <d_pack_length>:
 80004dc:	4603      	mov	r3, r0
 80004de:	2000      	movs	r0, #0
 80004e0:	b92b      	cbnz	r3, 80004ee <d_pack_length+0x12>
 80004e2:	e009      	b.n	80004f8 <d_pack_length+0x1c>
 80004e4:	68da      	ldr	r2, [r3, #12]
 80004e6:	b12a      	cbz	r2, 80004f4 <d_pack_length+0x18>
 80004e8:	691b      	ldr	r3, [r3, #16]
 80004ea:	3001      	adds	r0, #1
 80004ec:	b11b      	cbz	r3, 80004f6 <d_pack_length+0x1a>
 80004ee:	781a      	ldrb	r2, [r3, #0]
 80004f0:	2a2f      	cmp	r2, #47	@ 0x2f
 80004f2:	d0f7      	beq.n	80004e4 <d_pack_length+0x8>
 80004f4:	4770      	bx	lr
 80004f6:	4770      	bx	lr
 80004f8:	4618      	mov	r0, r3
 80004fa:	4770      	bx	lr

080004fc <d_index_template_argument.part.0>:
 80004fc:	b920      	cbnz	r0, 8000508 <d_index_template_argument.part.0+0xc>
 80004fe:	e009      	b.n	8000514 <d_index_template_argument.part.0+0x18>
 8000500:	b139      	cbz	r1, 8000512 <d_index_template_argument.part.0+0x16>
 8000502:	6900      	ldr	r0, [r0, #16]
 8000504:	3901      	subs	r1, #1
 8000506:	b130      	cbz	r0, 8000516 <d_index_template_argument.part.0+0x1a>
 8000508:	7803      	ldrb	r3, [r0, #0]
 800050a:	2b2f      	cmp	r3, #47	@ 0x2f
 800050c:	d0f8      	beq.n	8000500 <d_index_template_argument.part.0+0x4>
 800050e:	2000      	movs	r0, #0
 8000510:	4770      	bx	lr
 8000512:	68c0      	ldr	r0, [r0, #12]
 8000514:	4770      	bx	lr
 8000516:	4770      	bx	lr

08000518 <d_growable_string_callback_adapter>:
 8000518:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800051c:	4614      	mov	r4, r2
 800051e:	6852      	ldr	r2, [r2, #4]
 8000520:	68a5      	ldr	r5, [r4, #8]
 8000522:	f8d4 800c 	ldr.w	r8, [r4, #12]
 8000526:	1c4b      	adds	r3, r1, #1
 8000528:	4413      	add	r3, r2
 800052a:	42ab      	cmp	r3, r5
 800052c:	b082      	sub	sp, #8
 800052e:	460e      	mov	r6, r1
 8000530:	4607      	mov	r7, r0
 8000532:	d814      	bhi.n	800055e <d_growable_string_callback_adapter+0x46>
 8000534:	f1b8 0f00 	cmp.w	r8, #0
 8000538:	d10e      	bne.n	8000558 <d_growable_string_callback_adapter+0x40>
 800053a:	6863      	ldr	r3, [r4, #4]
 800053c:	6820      	ldr	r0, [r4, #0]
 800053e:	4632      	mov	r2, r6
 8000540:	4418      	add	r0, r3
 8000542:	4639      	mov	r1, r7
 8000544:	f023 fc6a 	bl	8023e1c <memcpy>
 8000548:	e9d4 3200 	ldrd	r3, r2, [r4]
 800054c:	4433      	add	r3, r6
 800054e:	f803 8002 	strb.w	r8, [r3, r2]
 8000552:	6863      	ldr	r3, [r4, #4]
 8000554:	4433      	add	r3, r6
 8000556:	6063      	str	r3, [r4, #4]
 8000558:	b002      	add	sp, #8
 800055a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800055e:	f1b8 0f00 	cmp.w	r8, #0
 8000562:	d1f9      	bne.n	8000558 <d_growable_string_callback_adapter+0x40>
 8000564:	b17d      	cbz	r5, 8000586 <d_growable_string_callback_adapter+0x6e>
 8000566:	006d      	lsls	r5, r5, #1
 8000568:	42ab      	cmp	r3, r5
 800056a:	d8fc      	bhi.n	8000566 <d_growable_string_callback_adapter+0x4e>
 800056c:	6820      	ldr	r0, [r4, #0]
 800056e:	4629      	mov	r1, r5
 8000570:	f022 fe4c 	bl	802320c <realloc>
 8000574:	b160      	cbz	r0, 8000590 <d_growable_string_callback_adapter+0x78>
 8000576:	f8d4 800c 	ldr.w	r8, [r4, #12]
 800057a:	6020      	str	r0, [r4, #0]
 800057c:	60a5      	str	r5, [r4, #8]
 800057e:	f1b8 0f00 	cmp.w	r8, #0
 8000582:	d0da      	beq.n	800053a <d_growable_string_callback_adapter+0x22>
 8000584:	e7e8      	b.n	8000558 <d_growable_string_callback_adapter+0x40>
 8000586:	2b02      	cmp	r3, #2
 8000588:	f04f 0502 	mov.w	r5, #2
 800058c:	d8eb      	bhi.n	8000566 <d_growable_string_callback_adapter+0x4e>
 800058e:	e7ed      	b.n	800056c <d_growable_string_callback_adapter+0x54>
 8000590:	9001      	str	r0, [sp, #4]
 8000592:	6820      	ldr	r0, [r4, #0]
 8000594:	f022 fbec 	bl	8022d70 <free>
 8000598:	9b01      	ldr	r3, [sp, #4]
 800059a:	2201      	movs	r2, #1
 800059c:	e9c4 3300 	strd	r3, r3, [r4]
 80005a0:	e9c4 3202 	strd	r3, r2, [r4, #8]
 80005a4:	e7d8      	b.n	8000558 <d_growable_string_callback_adapter+0x40>
 80005a6:	bf00      	nop

080005a8 <next_is_type_qual.isra.0>:
 80005a8:	7803      	ldrb	r3, [r0, #0]
 80005aa:	2b72      	cmp	r3, #114	@ 0x72
 80005ac:	d007      	beq.n	80005be <next_is_type_qual.isra.0+0x16>
 80005ae:	2b56      	cmp	r3, #86	@ 0x56
 80005b0:	d005      	beq.n	80005be <next_is_type_qual.isra.0+0x16>
 80005b2:	2b4b      	cmp	r3, #75	@ 0x4b
 80005b4:	d003      	beq.n	80005be <next_is_type_qual.isra.0+0x16>
 80005b6:	2b44      	cmp	r3, #68	@ 0x44
 80005b8:	d003      	beq.n	80005c2 <next_is_type_qual.isra.0+0x1a>
 80005ba:	2000      	movs	r0, #0
 80005bc:	4770      	bx	lr
 80005be:	2001      	movs	r0, #1
 80005c0:	4770      	bx	lr
 80005c2:	7840      	ldrb	r0, [r0, #1]
 80005c4:	f1a0 0377 	sub.w	r3, r0, #119	@ 0x77
 80005c8:	2b01      	cmp	r3, #1
 80005ca:	d9f8      	bls.n	80005be <next_is_type_qual.isra.0+0x16>
 80005cc:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 80005d0:	f1a0 004f 	sub.w	r0, r0, #79	@ 0x4f
 80005d4:	fab0 f080 	clz	r0, r0
 80005d8:	0940      	lsrs	r0, r0, #5
 80005da:	4770      	bx	lr

080005dc <d_append_char>:
 80005dc:	f8d0 3100 	ldr.w	r3, [r0, #256]	@ 0x100
 80005e0:	2bff      	cmp	r3, #255	@ 0xff
 80005e2:	b570      	push	{r4, r5, r6, lr}
 80005e4:	4604      	mov	r4, r0
 80005e6:	460d      	mov	r5, r1
 80005e8:	d006      	beq.n	80005f8 <d_append_char+0x1c>
 80005ea:	1c5a      	adds	r2, r3, #1
 80005ec:	f8c4 2100 	str.w	r2, [r4, #256]	@ 0x100
 80005f0:	54e5      	strb	r5, [r4, r3]
 80005f2:	f884 5104 	strb.w	r5, [r4, #260]	@ 0x104
 80005f6:	bd70      	pop	{r4, r5, r6, pc}
 80005f8:	2600      	movs	r6, #0
 80005fa:	4619      	mov	r1, r3
 80005fc:	f880 60ff 	strb.w	r6, [r0, #255]	@ 0xff
 8000600:	e9d0 3242 	ldrd	r3, r2, [r0, #264]	@ 0x108
 8000604:	4798      	blx	r3
 8000606:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
 800060a:	2201      	movs	r2, #1
 800060c:	4413      	add	r3, r2
 800060e:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
 8000612:	4633      	mov	r3, r6
 8000614:	f8c4 2100 	str.w	r2, [r4, #256]	@ 0x100
 8000618:	54e5      	strb	r5, [r4, r3]
 800061a:	f884 5104 	strb.w	r5, [r4, #260]	@ 0x104
 800061e:	bd70      	pop	{r4, r5, r6, pc}

08000620 <d_lookup_template_argument>:
 8000620:	f8d0 3110 	ldr.w	r3, [r0, #272]	@ 0x110
 8000624:	b18b      	cbz	r3, 800064a <d_lookup_template_argument+0x2a>
 8000626:	685a      	ldr	r2, [r3, #4]
 8000628:	68cb      	ldr	r3, [r1, #12]
 800062a:	6910      	ldr	r0, [r2, #16]
 800062c:	2b00      	cmp	r3, #0
 800062e:	db0b      	blt.n	8000648 <d_lookup_template_argument+0x28>
 8000630:	b920      	cbnz	r0, 800063c <d_lookup_template_argument+0x1c>
 8000632:	e006      	b.n	8000642 <d_lookup_template_argument+0x22>
 8000634:	b13b      	cbz	r3, 8000646 <d_lookup_template_argument+0x26>
 8000636:	6900      	ldr	r0, [r0, #16]
 8000638:	3b01      	subs	r3, #1
 800063a:	b110      	cbz	r0, 8000642 <d_lookup_template_argument+0x22>
 800063c:	7802      	ldrb	r2, [r0, #0]
 800063e:	2a2f      	cmp	r2, #47	@ 0x2f
 8000640:	d0f8      	beq.n	8000634 <d_lookup_template_argument+0x14>
 8000642:	2000      	movs	r0, #0
 8000644:	4770      	bx	lr
 8000646:	68c0      	ldr	r0, [r0, #12]
 8000648:	4770      	bx	lr
 800064a:	2301      	movs	r3, #1
 800064c:	f8c0 3118 	str.w	r3, [r0, #280]	@ 0x118
 8000650:	e7f7      	b.n	8000642 <d_lookup_template_argument+0x22>
 8000652:	bf00      	nop

08000654 <d_find_pack>:
 8000654:	2900      	cmp	r1, #0
 8000656:	d040      	beq.n	80006da <d_find_pack+0x86>
 8000658:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800065c:	f8df 8084 	ldr.w	r8, [pc, #132]	@ 80006e4 <d_find_pack+0x90>
 8000660:	4f1f      	ldr	r7, [pc, #124]	@ (80006e0 <d_find_pack+0x8c>)
 8000662:	4605      	mov	r5, r0
 8000664:	460c      	mov	r4, r1
 8000666:	2601      	movs	r6, #1
 8000668:	7823      	ldrb	r3, [r4, #0]
 800066a:	2b08      	cmp	r3, #8
 800066c:	d808      	bhi.n	8000680 <d_find_pack+0x2c>
 800066e:	2b08      	cmp	r3, #8
 8000670:	d813      	bhi.n	800069a <d_find_pack+0x46>
 8000672:	e8df f003 	tbb	[pc, r3]
 8000676:	121a      	.short	0x121a
 8000678:	27121212 	.word	0x27121212
 800067c:	171a      	.short	0x171a
 800067e:	17          	.byte	0x17
 800067f:	00          	.byte	0x00
 8000680:	2b2c      	cmp	r3, #44	@ 0x2c
 8000682:	d915      	bls.n	80006b0 <d_find_pack+0x5c>
 8000684:	3b32      	subs	r3, #50	@ 0x32
 8000686:	b2db      	uxtb	r3, r3
 8000688:	2b1b      	cmp	r3, #27
 800068a:	d806      	bhi.n	800069a <d_find_pack+0x46>
 800068c:	fa06 f203 	lsl.w	r2, r6, r3
 8000690:	ea12 0f08 	tst.w	r2, r8
 8000694:	d109      	bne.n	80006aa <d_find_pack+0x56>
 8000696:	2b01      	cmp	r3, #1
 8000698:	d004      	beq.n	80006a4 <d_find_pack+0x50>
 800069a:	68e1      	ldr	r1, [r4, #12]
 800069c:	4628      	mov	r0, r5
 800069e:	f7ff ffd9 	bl	8000654 <d_find_pack>
 80006a2:	b918      	cbnz	r0, 80006ac <d_find_pack+0x58>
 80006a4:	6924      	ldr	r4, [r4, #16]
 80006a6:	2c00      	cmp	r4, #0
 80006a8:	d1de      	bne.n	8000668 <d_find_pack+0x14>
 80006aa:	2000      	movs	r0, #0
 80006ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80006b0:	2b17      	cmp	r3, #23
 80006b2:	d9f2      	bls.n	800069a <d_find_pack+0x46>
 80006b4:	3b18      	subs	r3, #24
 80006b6:	b2db      	uxtb	r3, r3
 80006b8:	fa27 f303 	lsr.w	r3, r7, r3
 80006bc:	07db      	lsls	r3, r3, #31
 80006be:	d5ec      	bpl.n	800069a <d_find_pack+0x46>
 80006c0:	2000      	movs	r0, #0
 80006c2:	e7f3      	b.n	80006ac <d_find_pack+0x58>
 80006c4:	4621      	mov	r1, r4
 80006c6:	4628      	mov	r0, r5
 80006c8:	f7ff ffaa 	bl	8000620 <d_lookup_template_argument>
 80006cc:	2800      	cmp	r0, #0
 80006ce:	d0ec      	beq.n	80006aa <d_find_pack+0x56>
 80006d0:	7803      	ldrb	r3, [r0, #0]
 80006d2:	2b2f      	cmp	r3, #47	@ 0x2f
 80006d4:	d0ea      	beq.n	80006ac <d_find_pack+0x58>
 80006d6:	2000      	movs	r0, #0
 80006d8:	e7e8      	b.n	80006ac <d_find_pack+0x58>
 80006da:	2000      	movs	r0, #0
 80006dc:	4770      	bx	lr
 80006de:	bf00      	nop
 80006e0:	00108001 	.word	0x00108001
 80006e4:	0ce30001 	.word	0x0ce30001

080006e8 <d_append_string>:
 80006e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80006ec:	4604      	mov	r4, r0
 80006ee:	4608      	mov	r0, r1
 80006f0:	460d      	mov	r5, r1
 80006f2:	f005 fdd5 	bl	80062a0 <strlen>
 80006f6:	b340      	cbz	r0, 800074a <d_append_string+0x62>
 80006f8:	3d01      	subs	r5, #1
 80006fa:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
 80006fe:	182f      	adds	r7, r5, r0
 8000700:	f04f 0800 	mov.w	r8, #0
 8000704:	e009      	b.n	800071a <d_append_string+0x32>
 8000706:	460b      	mov	r3, r1
 8000708:	42bd      	cmp	r5, r7
 800070a:	f101 0101 	add.w	r1, r1, #1
 800070e:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
 8000712:	54e6      	strb	r6, [r4, r3]
 8000714:	f884 6104 	strb.w	r6, [r4, #260]	@ 0x104
 8000718:	d017      	beq.n	800074a <d_append_string+0x62>
 800071a:	29ff      	cmp	r1, #255	@ 0xff
 800071c:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8000720:	d1f1      	bne.n	8000706 <d_append_string+0x1e>
 8000722:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	@ 0x108
 8000726:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
 800072a:	4620      	mov	r0, r4
 800072c:	4798      	blx	r3
 800072e:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
 8000732:	2101      	movs	r1, #1
 8000734:	440b      	add	r3, r1
 8000736:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
 800073a:	2300      	movs	r3, #0
 800073c:	42bd      	cmp	r5, r7
 800073e:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
 8000742:	54e6      	strb	r6, [r4, r3]
 8000744:	f884 6104 	strb.w	r6, [r4, #260]	@ 0x104
 8000748:	d1e7      	bne.n	800071a <d_append_string+0x32>
 800074a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800074e:	bf00      	nop

08000750 <d_template_param>:
 8000750:	b538      	push	{r3, r4, r5, lr}
 8000752:	68c2      	ldr	r2, [r0, #12]
 8000754:	7813      	ldrb	r3, [r2, #0]
 8000756:	2b54      	cmp	r3, #84	@ 0x54
 8000758:	d124      	bne.n	80007a4 <d_template_param+0x54>
 800075a:	1c53      	adds	r3, r2, #1
 800075c:	60c3      	str	r3, [r0, #12]
 800075e:	7852      	ldrb	r2, [r2, #1]
 8000760:	2a5f      	cmp	r2, #95	@ 0x5f
 8000762:	4604      	mov	r4, r0
 8000764:	d020      	beq.n	80007a8 <d_template_param+0x58>
 8000766:	2a6e      	cmp	r2, #110	@ 0x6e
 8000768:	d01c      	beq.n	80007a4 <d_template_param+0x54>
 800076a:	f7ff fdc9 	bl	8000300 <d_number>
 800076e:	1c41      	adds	r1, r0, #1
 8000770:	d418      	bmi.n	80007a4 <d_template_param+0x54>
 8000772:	68e3      	ldr	r3, [r4, #12]
 8000774:	781a      	ldrb	r2, [r3, #0]
 8000776:	2a5f      	cmp	r2, #95	@ 0x5f
 8000778:	d114      	bne.n	80007a4 <d_template_param+0x54>
 800077a:	e9d4 2005 	ldrd	r2, r0, [r4, #20]
 800077e:	3301      	adds	r3, #1
 8000780:	4282      	cmp	r2, r0
 8000782:	60e3      	str	r3, [r4, #12]
 8000784:	da0e      	bge.n	80007a4 <d_template_param+0x54>
 8000786:	6923      	ldr	r3, [r4, #16]
 8000788:	eb02 0c82 	add.w	ip, r2, r2, lsl #2
 800078c:	eb03 008c 	add.w	r0, r3, ip, lsl #2
 8000790:	3201      	adds	r2, #1
 8000792:	2500      	movs	r5, #0
 8000794:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8000798:	6162      	str	r2, [r4, #20]
 800079a:	2205      	movs	r2, #5
 800079c:	f803 202c 	strb.w	r2, [r3, ip, lsl #2]
 80007a0:	60c1      	str	r1, [r0, #12]
 80007a2:	bd38      	pop	{r3, r4, r5, pc}
 80007a4:	2000      	movs	r0, #0
 80007a6:	bd38      	pop	{r3, r4, r5, pc}
 80007a8:	2100      	movs	r1, #0
 80007aa:	e7e6      	b.n	800077a <d_template_param+0x2a>

080007ac <d_append_num>:
 80007ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80007b0:	b088      	sub	sp, #32
 80007b2:	460a      	mov	r2, r1
 80007b4:	4604      	mov	r4, r0
 80007b6:	491a      	ldr	r1, [pc, #104]	@ (8000820 <d_append_num+0x74>)
 80007b8:	a801      	add	r0, sp, #4
 80007ba:	f022 ff0b 	bl	80235d4 <sprintf>
 80007be:	a801      	add	r0, sp, #4
 80007c0:	f005 fd6e 	bl	80062a0 <strlen>
 80007c4:	b340      	cbz	r0, 8000818 <d_append_num+0x6c>
 80007c6:	ad01      	add	r5, sp, #4
 80007c8:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
 80007cc:	182f      	adds	r7, r5, r0
 80007ce:	f04f 0800 	mov.w	r8, #0
 80007d2:	e009      	b.n	80007e8 <d_append_num+0x3c>
 80007d4:	460b      	mov	r3, r1
 80007d6:	42af      	cmp	r7, r5
 80007d8:	f101 0101 	add.w	r1, r1, #1
 80007dc:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
 80007e0:	54e6      	strb	r6, [r4, r3]
 80007e2:	f884 6104 	strb.w	r6, [r4, #260]	@ 0x104
 80007e6:	d017      	beq.n	8000818 <d_append_num+0x6c>
 80007e8:	29ff      	cmp	r1, #255	@ 0xff
 80007ea:	f815 6b01 	ldrb.w	r6, [r5], #1
 80007ee:	d1f1      	bne.n	80007d4 <d_append_num+0x28>
 80007f0:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	@ 0x108
 80007f4:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
 80007f8:	4620      	mov	r0, r4
 80007fa:	4798      	blx	r3
 80007fc:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
 8000800:	2101      	movs	r1, #1
 8000802:	440b      	add	r3, r1
 8000804:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
 8000808:	2300      	movs	r3, #0
 800080a:	42af      	cmp	r7, r5
 800080c:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
 8000810:	54e6      	strb	r6, [r4, r3]
 8000812:	f884 6104 	strb.w	r6, [r4, #260]	@ 0x104
 8000816:	d1e7      	bne.n	80007e8 <d_append_num+0x3c>
 8000818:	b008      	add	sp, #32
 800081a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800081e:	bf00      	nop
 8000820:	080af0a8 	.word	0x080af0a8

08000824 <d_source_name>:
 8000824:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000828:	4604      	mov	r4, r0
 800082a:	f7ff fd69 	bl	8000300 <d_number>
 800082e:	1e05      	subs	r5, r0, #0
 8000830:	dd44      	ble.n	80008bc <d_source_name+0x98>
 8000832:	68e6      	ldr	r6, [r4, #12]
 8000834:	6863      	ldr	r3, [r4, #4]
 8000836:	1b9b      	subs	r3, r3, r6
 8000838:	429d      	cmp	r5, r3
 800083a:	dc3b      	bgt.n	80008b4 <d_source_name+0x90>
 800083c:	68a2      	ldr	r2, [r4, #8]
 800083e:	1973      	adds	r3, r6, r5
 8000840:	0752      	lsls	r2, r2, #29
 8000842:	60e3      	str	r3, [r4, #12]
 8000844:	d504      	bpl.n	8000850 <d_source_name+0x2c>
 8000846:	5d72      	ldrb	r2, [r6, r5]
 8000848:	2a24      	cmp	r2, #36	@ 0x24
 800084a:	bf04      	itt	eq
 800084c:	3301      	addeq	r3, #1
 800084e:	60e3      	streq	r3, [r4, #12]
 8000850:	2d09      	cmp	r5, #9
 8000852:	e9d4 7805 	ldrd	r7, r8, [r4, #20]
 8000856:	dd1f      	ble.n	8000898 <d_source_name+0x74>
 8000858:	4927      	ldr	r1, [pc, #156]	@ (80008f8 <d_source_name+0xd4>)
 800085a:	2208      	movs	r2, #8
 800085c:	4630      	mov	r0, r6
 800085e:	f023 fa03 	bl	8023c68 <memcmp>
 8000862:	b930      	cbnz	r0, 8000872 <d_source_name+0x4e>
 8000864:	7a33      	ldrb	r3, [r6, #8]
 8000866:	2b2e      	cmp	r3, #46	@ 0x2e
 8000868:	d02b      	beq.n	80008c2 <d_source_name+0x9e>
 800086a:	2b5f      	cmp	r3, #95	@ 0x5f
 800086c:	d029      	beq.n	80008c2 <d_source_name+0x9e>
 800086e:	2b24      	cmp	r3, #36	@ 0x24
 8000870:	d027      	beq.n	80008c2 <d_source_name+0x9e>
 8000872:	45b8      	cmp	r8, r7
 8000874:	dd1e      	ble.n	80008b4 <d_source_name+0x90>
 8000876:	6920      	ldr	r0, [r4, #16]
 8000878:	eb07 0387 	add.w	r3, r7, r7, lsl #2
 800087c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8000880:	3701      	adds	r7, #1
 8000882:	2300      	movs	r3, #0
 8000884:	e9c0 3301 	strd	r3, r3, [r0, #4]
 8000888:	6167      	str	r7, [r4, #20]
 800088a:	2300      	movs	r3, #0
 800088c:	e9c0 3301 	strd	r3, r3, [r0, #4]
 8000890:	e9c0 6503 	strd	r6, r5, [r0, #12]
 8000894:	7003      	strb	r3, [r0, #0]
 8000896:	e00e      	b.n	80008b6 <d_source_name+0x92>
 8000898:	45b8      	cmp	r8, r7
 800089a:	dd0b      	ble.n	80008b4 <d_source_name+0x90>
 800089c:	6920      	ldr	r0, [r4, #16]
 800089e:	eb07 0387 	add.w	r3, r7, r7, lsl #2
 80008a2:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 80008a6:	3701      	adds	r7, #1
 80008a8:	2300      	movs	r3, #0
 80008aa:	e9c0 3301 	strd	r3, r3, [r0, #4]
 80008ae:	6167      	str	r7, [r4, #20]
 80008b0:	2e00      	cmp	r6, #0
 80008b2:	d1ea      	bne.n	800088a <d_source_name+0x66>
 80008b4:	2000      	movs	r0, #0
 80008b6:	62a0      	str	r0, [r4, #40]	@ 0x28
 80008b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80008bc:	2000      	movs	r0, #0
 80008be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80008c2:	7a73      	ldrb	r3, [r6, #9]
 80008c4:	2b4e      	cmp	r3, #78	@ 0x4e
 80008c6:	d1d4      	bne.n	8000872 <d_source_name+0x4e>
 80008c8:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80008ca:	3316      	adds	r3, #22
 80008cc:	1b5b      	subs	r3, r3, r5
 80008ce:	45b8      	cmp	r8, r7
 80008d0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80008d2:	ddef      	ble.n	80008b4 <d_source_name+0x90>
 80008d4:	6921      	ldr	r1, [r4, #16]
 80008d6:	4a09      	ldr	r2, [pc, #36]	@ (80008fc <d_source_name+0xd8>)
 80008d8:	eb07 0087 	add.w	r0, r7, r7, lsl #2
 80008dc:	0085      	lsls	r5, r0, #2
 80008de:	2300      	movs	r3, #0
 80008e0:	eb01 0080 	add.w	r0, r1, r0, lsl #2
 80008e4:	3701      	adds	r7, #1
 80008e6:	6167      	str	r7, [r4, #20]
 80008e8:	e9c0 3301 	strd	r3, r3, [r0, #4]
 80008ec:	554b      	strb	r3, [r1, r5]
 80008ee:	2315      	movs	r3, #21
 80008f0:	e9c0 2303 	strd	r2, r3, [r0, #12]
 80008f4:	e7df      	b.n	80008b6 <d_source_name+0x92>
 80008f6:	bf00      	nop
 80008f8:	080af0ac 	.word	0x080af0ac
 80008fc:	080af0b8 	.word	0x080af0b8

08000900 <d_substitution>:
 8000900:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000904:	68c3      	ldr	r3, [r0, #12]
 8000906:	781a      	ldrb	r2, [r3, #0]
 8000908:	2a53      	cmp	r2, #83	@ 0x53
 800090a:	d126      	bne.n	800095a <d_substitution+0x5a>
 800090c:	1c5a      	adds	r2, r3, #1
 800090e:	60c2      	str	r2, [r0, #12]
 8000910:	4604      	mov	r4, r0
 8000912:	7858      	ldrb	r0, [r3, #1]
 8000914:	b348      	cbz	r0, 800096a <d_substitution+0x6a>
 8000916:	1c9a      	adds	r2, r3, #2
 8000918:	60e2      	str	r2, [r4, #12]
 800091a:	7858      	ldrb	r0, [r3, #1]
 800091c:	285f      	cmp	r0, #95	@ 0x5f
 800091e:	d049      	beq.n	80009b4 <d_substitution+0xb4>
 8000920:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8000924:	b2da      	uxtb	r2, r3
 8000926:	2a09      	cmp	r2, #9
 8000928:	d81b      	bhi.n	8000962 <d_substitution+0x62>
 800092a:	2200      	movs	r2, #0
 800092c:	e005      	b.n	800093a <d_substitution+0x3a>
 800092e:	60e5      	str	r5, [r4, #12]
 8000930:	7808      	ldrb	r0, [r1, #0]
 8000932:	285f      	cmp	r0, #95	@ 0x5f
 8000934:	d034      	beq.n	80009a0 <d_substitution+0xa0>
 8000936:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800093a:	b2d9      	uxtb	r1, r3
 800093c:	2909      	cmp	r1, #9
 800093e:	eb02 03c2 	add.w	r3, r2, r2, lsl #3
 8000942:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8000946:	d821      	bhi.n	800098c <d_substitution+0x8c>
 8000948:	3b30      	subs	r3, #48	@ 0x30
 800094a:	429a      	cmp	r2, r3
 800094c:	d805      	bhi.n	800095a <d_substitution+0x5a>
 800094e:	68e1      	ldr	r1, [r4, #12]
 8000950:	7808      	ldrb	r0, [r1, #0]
 8000952:	461a      	mov	r2, r3
 8000954:	1c4d      	adds	r5, r1, #1
 8000956:	2800      	cmp	r0, #0
 8000958:	d1e9      	bne.n	800092e <d_substitution+0x2e>
 800095a:	2500      	movs	r5, #0
 800095c:	4628      	mov	r0, r5
 800095e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000962:	f1a0 0241 	sub.w	r2, r0, #65	@ 0x41
 8000966:	2a19      	cmp	r2, #25
 8000968:	d9df      	bls.n	800092a <d_substitution+0x2a>
 800096a:	68a3      	ldr	r3, [r4, #8]
 800096c:	f013 0308 	ands.w	r3, r3, #8
 8000970:	d022      	beq.n	80009b8 <d_substitution+0xb8>
 8000972:	1e19      	subs	r1, r3, #0
 8000974:	bf18      	it	ne
 8000976:	2101      	movne	r1, #1
 8000978:	4b42      	ldr	r3, [pc, #264]	@ (8000a84 <d_substitution+0x184>)
 800097a:	f103 05c4 	add.w	r5, r3, #196	@ 0xc4
 800097e:	781a      	ldrb	r2, [r3, #0]
 8000980:	4282      	cmp	r2, r0
 8000982:	d021      	beq.n	80009c8 <d_substitution+0xc8>
 8000984:	331c      	adds	r3, #28
 8000986:	42ab      	cmp	r3, r5
 8000988:	d1f9      	bne.n	800097e <d_substitution+0x7e>
 800098a:	e7e6      	b.n	800095a <d_substitution+0x5a>
 800098c:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8000990:	2b19      	cmp	r3, #25
 8000992:	d8e2      	bhi.n	800095a <d_substitution+0x5a>
 8000994:	eb02 03c2 	add.w	r3, r2, r2, lsl #3
 8000998:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800099c:	3b37      	subs	r3, #55	@ 0x37
 800099e:	e7d4      	b.n	800094a <d_substitution+0x4a>
 80009a0:	3301      	adds	r3, #1
 80009a2:	6a22      	ldr	r2, [r4, #32]
 80009a4:	429a      	cmp	r2, r3
 80009a6:	d9d8      	bls.n	800095a <d_substitution+0x5a>
 80009a8:	69e2      	ldr	r2, [r4, #28]
 80009aa:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 80009ae:	4628      	mov	r0, r5
 80009b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80009b4:	2300      	movs	r3, #0
 80009b6:	e7f4      	b.n	80009a2 <d_substitution+0xa2>
 80009b8:	2900      	cmp	r1, #0
 80009ba:	d0da      	beq.n	8000972 <d_substitution+0x72>
 80009bc:	68e2      	ldr	r2, [r4, #12]
 80009be:	7812      	ldrb	r2, [r2, #0]
 80009c0:	3a43      	subs	r2, #67	@ 0x43
 80009c2:	2a01      	cmp	r2, #1
 80009c4:	d8d5      	bhi.n	8000972 <d_substitution+0x72>
 80009c6:	e7d7      	b.n	8000978 <d_substitution+0x78>
 80009c8:	695e      	ldr	r6, [r3, #20]
 80009ca:	e9d4 2005 	ldrd	r2, r0, [r4, #20]
 80009ce:	b1ae      	cbz	r6, 80009fc <d_substitution+0xfc>
 80009d0:	4290      	cmp	r0, r2
 80009d2:	f8d3 8018 	ldr.w	r8, [r3, #24]
 80009d6:	dd52      	ble.n	8000a7e <d_substitution+0x17e>
 80009d8:	6927      	ldr	r7, [r4, #16]
 80009da:	eb02 0c82 	add.w	ip, r2, r2, lsl #2
 80009de:	eb07 058c 	add.w	r5, r7, ip, lsl #2
 80009e2:	f04f 0e00 	mov.w	lr, #0
 80009e6:	e9c5 ee01 	strd	lr, lr, [r5, #4]
 80009ea:	3201      	adds	r2, #1
 80009ec:	f04f 0e18 	mov.w	lr, #24
 80009f0:	6162      	str	r2, [r4, #20]
 80009f2:	f807 e02c 	strb.w	lr, [r7, ip, lsl #2]
 80009f6:	e9c5 6803 	strd	r6, r8, [r5, #12]
 80009fa:	62a5      	str	r5, [r4, #40]	@ 0x28
 80009fc:	2900      	cmp	r1, #0
 80009fe:	d039      	beq.n	8000a74 <d_substitution+0x174>
 8000a00:	e9d3 7103 	ldrd	r7, r1, [r3, #12]
 8000a04:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8000a06:	4282      	cmp	r2, r0
 8000a08:	440b      	add	r3, r1
 8000a0a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8000a0c:	da35      	bge.n	8000a7a <d_substitution+0x17a>
 8000a0e:	6923      	ldr	r3, [r4, #16]
 8000a10:	eb02 0082 	add.w	r0, r2, r2, lsl #2
 8000a14:	eb03 0580 	add.w	r5, r3, r0, lsl #2
 8000a18:	3201      	adds	r2, #1
 8000a1a:	2600      	movs	r6, #0
 8000a1c:	e9c5 6601 	strd	r6, r6, [r5, #4]
 8000a20:	6162      	str	r2, [r4, #20]
 8000a22:	2218      	movs	r2, #24
 8000a24:	f803 2020 	strb.w	r2, [r3, r0, lsl #2]
 8000a28:	e9c5 7103 	strd	r7, r1, [r5, #12]
 8000a2c:	68e3      	ldr	r3, [r4, #12]
 8000a2e:	781a      	ldrb	r2, [r3, #0]
 8000a30:	2a42      	cmp	r2, #66	@ 0x42
 8000a32:	d193      	bne.n	800095c <d_substitution+0x5c>
 8000a34:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8000a36:	3301      	adds	r3, #1
 8000a38:	60e3      	str	r3, [r4, #12]
 8000a3a:	4620      	mov	r0, r4
 8000a3c:	f7ff fef2 	bl	8000824 <d_source_name>
 8000a40:	462a      	mov	r2, r5
 8000a42:	4603      	mov	r3, r0
 8000a44:	214d      	movs	r1, #77	@ 0x4d
 8000a46:	4620      	mov	r0, r4
 8000a48:	f7ff fbe2 	bl	8000210 <d_make_comp>
 8000a4c:	68e3      	ldr	r3, [r4, #12]
 8000a4e:	781a      	ldrb	r2, [r3, #0]
 8000a50:	2a42      	cmp	r2, #66	@ 0x42
 8000a52:	4605      	mov	r5, r0
 8000a54:	d0ef      	beq.n	8000a36 <d_substitution+0x136>
 8000a56:	62a6      	str	r6, [r4, #40]	@ 0x28
 8000a58:	2800      	cmp	r0, #0
 8000a5a:	f43f af7e 	beq.w	800095a <d_substitution+0x5a>
 8000a5e:	e9d4 3208 	ldrd	r3, r2, [r4, #32]
 8000a62:	4293      	cmp	r3, r2
 8000a64:	f6bf af79 	bge.w	800095a <d_substitution+0x5a>
 8000a68:	69e1      	ldr	r1, [r4, #28]
 8000a6a:	1c5a      	adds	r2, r3, #1
 8000a6c:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 8000a70:	6222      	str	r2, [r4, #32]
 8000a72:	e773      	b.n	800095c <d_substitution+0x5c>
 8000a74:	e9d3 7101 	ldrd	r7, r1, [r3, #4]
 8000a78:	e7c4      	b.n	8000a04 <d_substitution+0x104>
 8000a7a:	2500      	movs	r5, #0
 8000a7c:	e7d6      	b.n	8000a2c <d_substitution+0x12c>
 8000a7e:	2500      	movs	r5, #0
 8000a80:	e7bb      	b.n	80009fa <d_substitution+0xfa>
 8000a82:	bf00      	nop
 8000a84:	0802cc00 	.word	0x0802cc00

08000a88 <d_type>:
 8000a88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000a8c:	68c2      	ldr	r2, [r0, #12]
 8000a8e:	b083      	sub	sp, #12
 8000a90:	4604      	mov	r4, r0
 8000a92:	4610      	mov	r0, r2
 8000a94:	f7ff fd88 	bl	80005a8 <next_is_type_qual.isra.0>
 8000a98:	2800      	cmp	r0, #0
 8000a9a:	d161      	bne.n	8000b60 <d_type+0xd8>
 8000a9c:	7813      	ldrb	r3, [r2, #0]
 8000a9e:	2b5a      	cmp	r3, #90	@ 0x5a
 8000aa0:	d833      	bhi.n	8000b0a <d_type+0x82>
 8000aa2:	2b2f      	cmp	r3, #47	@ 0x2f
 8000aa4:	f240 808c 	bls.w	8000bc0 <d_type+0x138>
 8000aa8:	3b30      	subs	r3, #48	@ 0x30
 8000aaa:	2b2a      	cmp	r3, #42	@ 0x2a
 8000aac:	f200 8088 	bhi.w	8000bc0 <d_type+0x138>
 8000ab0:	e8df f013 	tbh	[pc, r3, lsl #1]
 8000ab4:	00880088 	.word	0x00880088
 8000ab8:	00880088 	.word	0x00880088
 8000abc:	00880088 	.word	0x00880088
 8000ac0:	00880088 	.word	0x00880088
 8000ac4:	00880088 	.word	0x00880088
 8000ac8:	00860086 	.word	0x00860086
 8000acc:	00860086 	.word	0x00860086
 8000ad0:	00860086 	.word	0x00860086
 8000ad4:	01c20086 	.word	0x01c20086
 8000ad8:	01490086 	.word	0x01490086
 8000adc:	008600b1 	.word	0x008600b1
 8000ae0:	009d00ab 	.word	0x009d00ab
 8000ae4:	00860086 	.word	0x00860086
 8000ae8:	00860086 	.word	0x00860086
 8000aec:	02040086 	.word	0x02040086
 8000af0:	01970088 	.word	0x01970088
 8000af4:	00860189 	.word	0x00860189
 8000af8:	0157017b 	.word	0x0157017b
 8000afc:	01aa0122 	.word	0x01aa0122
 8000b00:	00860086 	.word	0x00860086
 8000b04:	00860086 	.word	0x00860086
 8000b08:	0088      	.short	0x0088
 8000b0a:	3b61      	subs	r3, #97	@ 0x61
 8000b0c:	fa5f fc83 	uxtb.w	ip, r3
 8000b10:	f1bc 0f19 	cmp.w	ip, #25
 8000b14:	d854      	bhi.n	8000bc0 <d_type+0x138>
 8000b16:	4dba      	ldr	r5, [pc, #744]	@ (8000e00 <d_type+0x378>)
 8000b18:	2101      	movs	r1, #1
 8000b1a:	fa01 f10c 	lsl.w	r1, r1, ip
 8000b1e:	400d      	ands	r5, r1
 8000b20:	2d00      	cmp	r5, #0
 8000b22:	d049      	beq.n	8000bb8 <d_type+0x130>
 8000b24:	49b7      	ldr	r1, [pc, #732]	@ (8000e04 <d_type+0x37c>)
 8000b26:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000b2a:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8000b2e:	e9d4 3505 	ldrd	r3, r5, [r4, #20]
 8000b32:	42ab      	cmp	r3, r5
 8000b34:	f280 83d5 	bge.w	80012e2 <d_type+0x85a>
 8000b38:	6926      	ldr	r6, [r4, #16]
 8000b3a:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 8000b3e:	eb06 058c 	add.w	r5, r6, ip, lsl #2
 8000b42:	3301      	adds	r3, #1
 8000b44:	e9c5 0001 	strd	r0, r0, [r5, #4]
 8000b48:	6163      	str	r3, [r4, #20]
 8000b4a:	2327      	movs	r3, #39	@ 0x27
 8000b4c:	f806 302c 	strb.w	r3, [r6, ip, lsl #2]
 8000b50:	60e9      	str	r1, [r5, #12]
 8000b52:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8000b54:	6849      	ldr	r1, [r1, #4]
 8000b56:	3201      	adds	r2, #1
 8000b58:	440b      	add	r3, r1
 8000b5a:	60e2      	str	r2, [r4, #12]
 8000b5c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8000b5e:	e024      	b.n	8000baa <d_type+0x122>
 8000b60:	2200      	movs	r2, #0
 8000b62:	a901      	add	r1, sp, #4
 8000b64:	4620      	mov	r0, r4
 8000b66:	f001 fad3 	bl	8002110 <d_cv_qualifiers>
 8000b6a:	4605      	mov	r5, r0
 8000b6c:	b340      	cbz	r0, 8000bc0 <d_type+0x138>
 8000b6e:	68e3      	ldr	r3, [r4, #12]
 8000b70:	781b      	ldrb	r3, [r3, #0]
 8000b72:	2b46      	cmp	r3, #70	@ 0x46
 8000b74:	4620      	mov	r0, r4
 8000b76:	d01c      	beq.n	8000bb2 <d_type+0x12a>
 8000b78:	f7ff ff86 	bl	8000a88 <d_type>
 8000b7c:	6028      	str	r0, [r5, #0]
 8000b7e:	b1f8      	cbz	r0, 8000bc0 <d_type+0x138>
 8000b80:	7803      	ldrb	r3, [r0, #0]
 8000b82:	3b1f      	subs	r3, #31
 8000b84:	2b01      	cmp	r3, #1
 8000b86:	d805      	bhi.n	8000b94 <d_type+0x10c>
 8000b88:	9a01      	ldr	r2, [sp, #4]
 8000b8a:	68c3      	ldr	r3, [r0, #12]
 8000b8c:	60c2      	str	r2, [r0, #12]
 8000b8e:	682a      	ldr	r2, [r5, #0]
 8000b90:	9201      	str	r2, [sp, #4]
 8000b92:	602b      	str	r3, [r5, #0]
 8000b94:	9d01      	ldr	r5, [sp, #4]
 8000b96:	b19d      	cbz	r5, 8000bc0 <d_type+0x138>
 8000b98:	e9d4 3208 	ldrd	r3, r2, [r4, #32]
 8000b9c:	4293      	cmp	r3, r2
 8000b9e:	da0f      	bge.n	8000bc0 <d_type+0x138>
 8000ba0:	69e1      	ldr	r1, [r4, #28]
 8000ba2:	1c5a      	adds	r2, r3, #1
 8000ba4:	f841 5023 	str.w	r5, [r1, r3, lsl #2]
 8000ba8:	6222      	str	r2, [r4, #32]
 8000baa:	4628      	mov	r0, r5
 8000bac:	b003      	add	sp, #12
 8000bae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000bb2:	f000 fbff 	bl	80013b4 <d_function_type>
 8000bb6:	e7e1      	b.n	8000b7c <d_type+0xf4>
 8000bb8:	f1bc 0f14 	cmp.w	ip, #20
 8000bbc:	f000 830f 	beq.w	80011de <d_type+0x756>
 8000bc0:	2500      	movs	r5, #0
 8000bc2:	e7f2      	b.n	8000baa <d_type+0x122>
 8000bc4:	4620      	mov	r0, r4
 8000bc6:	f001 fdd9 	bl	800277c <d_name>
 8000bca:	4605      	mov	r5, r0
 8000bcc:	9001      	str	r0, [sp, #4]
 8000bce:	2d00      	cmp	r5, #0
 8000bd0:	d0f6      	beq.n	8000bc0 <d_type+0x138>
 8000bd2:	e9d4 3208 	ldrd	r3, r2, [r4, #32]
 8000bd6:	4293      	cmp	r3, r2
 8000bd8:	daf2      	bge.n	8000bc0 <d_type+0x138>
 8000bda:	69e1      	ldr	r1, [r4, #28]
 8000bdc:	f841 5023 	str.w	r5, [r1, r3, lsl #2]
 8000be0:	9d01      	ldr	r5, [sp, #4]
 8000be2:	1c5a      	adds	r2, r3, #1
 8000be4:	4628      	mov	r0, r5
 8000be6:	6222      	str	r2, [r4, #32]
 8000be8:	b003      	add	sp, #12
 8000bea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000bee:	3201      	adds	r2, #1
 8000bf0:	60e2      	str	r2, [r4, #12]
 8000bf2:	4620      	mov	r0, r4
 8000bf4:	f7ff ff48 	bl	8000a88 <d_type>
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	4602      	mov	r2, r0
 8000bfc:	2126      	movs	r1, #38	@ 0x26
 8000bfe:	4620      	mov	r0, r4
 8000c00:	f7ff fb06 	bl	8000210 <d_make_comp>
 8000c04:	4605      	mov	r5, r0
 8000c06:	9001      	str	r0, [sp, #4]
 8000c08:	e7e1      	b.n	8000bce <d_type+0x146>
 8000c0a:	4620      	mov	r0, r4
 8000c0c:	f000 fbd2 	bl	80013b4 <d_function_type>
 8000c10:	4605      	mov	r5, r0
 8000c12:	9001      	str	r0, [sp, #4]
 8000c14:	e7db      	b.n	8000bce <d_type+0x146>
 8000c16:	1c53      	adds	r3, r2, #1
 8000c18:	60e3      	str	r3, [r4, #12]
 8000c1a:	7853      	ldrb	r3, [r2, #1]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d0cf      	beq.n	8000bc0 <d_type+0x138>
 8000c20:	1c93      	adds	r3, r2, #2
 8000c22:	60e3      	str	r3, [r4, #12]
 8000c24:	7853      	ldrb	r3, [r2, #1]
 8000c26:	3b46      	subs	r3, #70	@ 0x46
 8000c28:	2b30      	cmp	r3, #48	@ 0x30
 8000c2a:	d8c9      	bhi.n	8000bc0 <d_type+0x138>
 8000c2c:	a101      	add	r1, pc, #4	@ (adr r1, 8000c34 <d_type+0x1ac>)
 8000c2e:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000c32:	bf00      	nop
 8000c34:	08000f29 	.word	0x08000f29
 8000c38:	08000bc1 	.word	0x08000bc1
 8000c3c:	08000bc1 	.word	0x08000bc1
 8000c40:	08000bc1 	.word	0x08000bc1
 8000c44:	08000bc1 	.word	0x08000bc1
 8000c48:	08000bc1 	.word	0x08000bc1
 8000c4c:	08000bc1 	.word	0x08000bc1
 8000c50:	08000bc1 	.word	0x08000bc1
 8000c54:	08000bc1 	.word	0x08000bc1
 8000c58:	08000bc1 	.word	0x08000bc1
 8000c5c:	08000bc1 	.word	0x08000bc1
 8000c60:	08000bc1 	.word	0x08000bc1
 8000c64:	08000bc1 	.word	0x08000bc1
 8000c68:	08000bc1 	.word	0x08000bc1
 8000c6c:	08000eed 	.word	0x08000eed
 8000c70:	08000bc1 	.word	0x08000bc1
 8000c74:	08000bc1 	.word	0x08000bc1
 8000c78:	08000bc1 	.word	0x08000bc1
 8000c7c:	08000bc1 	.word	0x08000bc1
 8000c80:	08000bc1 	.word	0x08000bc1
 8000c84:	08000bc1 	.word	0x08000bc1
 8000c88:	08000bc1 	.word	0x08000bc1
 8000c8c:	08000bc1 	.word	0x08000bc1
 8000c90:	08000bc1 	.word	0x08000bc1
 8000c94:	08000bc1 	.word	0x08000bc1
 8000c98:	08000bc1 	.word	0x08000bc1
 8000c9c:	08000bc1 	.word	0x08000bc1
 8000ca0:	08000fc1 	.word	0x08000fc1
 8000ca4:	08000bc1 	.word	0x08000bc1
 8000ca8:	08000f95 	.word	0x08000f95
 8000cac:	0800107d 	.word	0x0800107d
 8000cb0:	0800104d 	.word	0x0800104d
 8000cb4:	0800101d 	.word	0x0800101d
 8000cb8:	08000bc1 	.word	0x08000bc1
 8000cbc:	08000fed 	.word	0x08000fed
 8000cc0:	080011af 	.word	0x080011af
 8000cc4:	08000bc1 	.word	0x08000bc1
 8000cc8:	08000bc1 	.word	0x08000bc1
 8000ccc:	08000bc1 	.word	0x08000bc1
 8000cd0:	08000bc1 	.word	0x08000bc1
 8000cd4:	0800117f 	.word	0x0800117f
 8000cd8:	08000bc1 	.word	0x08000bc1
 8000cdc:	08001167 	.word	0x08001167
 8000ce0:	08000bc1 	.word	0x08000bc1
 8000ce4:	08000bc1 	.word	0x08000bc1
 8000ce8:	08001137 	.word	0x08001137
 8000cec:	08000eed 	.word	0x08000eed
 8000cf0:	08001107 	.word	0x08001107
 8000cf4:	080010ad 	.word	0x080010ad
 8000cf8:	4620      	mov	r0, r4
 8000cfa:	f7ff fd29 	bl	8000750 <d_template_param>
 8000cfe:	68e6      	ldr	r6, [r4, #12]
 8000d00:	9001      	str	r0, [sp, #4]
 8000d02:	7833      	ldrb	r3, [r6, #0]
 8000d04:	2b49      	cmp	r3, #73	@ 0x49
 8000d06:	4605      	mov	r5, r0
 8000d08:	f47f af61 	bne.w	8000bce <d_type+0x146>
 8000d0c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	f040 829d 	bne.w	800124e <d_type+0x7c6>
 8000d14:	2800      	cmp	r0, #0
 8000d16:	f43f af53 	beq.w	8000bc0 <d_type+0x138>
 8000d1a:	e9d4 2108 	ldrd	r2, r1, [r4, #32]
 8000d1e:	428a      	cmp	r2, r1
 8000d20:	f6bf af4e 	bge.w	8000bc0 <d_type+0x138>
 8000d24:	69e1      	ldr	r1, [r4, #28]
 8000d26:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
 8000d2a:	3201      	adds	r2, #1
 8000d2c:	6222      	str	r2, [r4, #32]
 8000d2e:	7832      	ldrb	r2, [r6, #0]
 8000d30:	3a49      	subs	r2, #73	@ 0x49
 8000d32:	2a01      	cmp	r2, #1
 8000d34:	d805      	bhi.n	8000d42 <d_type+0x2ba>
 8000d36:	3601      	adds	r6, #1
 8000d38:	60e6      	str	r6, [r4, #12]
 8000d3a:	4620      	mov	r0, r4
 8000d3c:	f000 fe5c 	bl	80019f8 <d_template_args_1>
 8000d40:	4603      	mov	r3, r0
 8000d42:	462a      	mov	r2, r5
 8000d44:	e02a      	b.n	8000d9c <d_type+0x314>
 8000d46:	3201      	adds	r2, #1
 8000d48:	60e2      	str	r2, [r4, #12]
 8000d4a:	4620      	mov	r0, r4
 8000d4c:	f7ff fe9c 	bl	8000a88 <d_type>
 8000d50:	2300      	movs	r3, #0
 8000d52:	4602      	mov	r2, r0
 8000d54:	2125      	movs	r1, #37	@ 0x25
 8000d56:	4620      	mov	r0, r4
 8000d58:	f7ff fa5a 	bl	8000210 <d_make_comp>
 8000d5c:	4605      	mov	r5, r0
 8000d5e:	9001      	str	r0, [sp, #4]
 8000d60:	e735      	b.n	8000bce <d_type+0x146>
 8000d62:	7853      	ldrb	r3, [r2, #1]
 8000d64:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 8000d68:	2a09      	cmp	r2, #9
 8000d6a:	d905      	bls.n	8000d78 <d_type+0x2f0>
 8000d6c:	2b5f      	cmp	r3, #95	@ 0x5f
 8000d6e:	d003      	beq.n	8000d78 <d_type+0x2f0>
 8000d70:	3b41      	subs	r3, #65	@ 0x41
 8000d72:	2b19      	cmp	r3, #25
 8000d74:	f200 825e 	bhi.w	8001234 <d_type+0x7ac>
 8000d78:	2100      	movs	r1, #0
 8000d7a:	4620      	mov	r0, r4
 8000d7c:	f7ff fdc0 	bl	8000900 <d_substitution>
 8000d80:	68e3      	ldr	r3, [r4, #12]
 8000d82:	9001      	str	r0, [sp, #4]
 8000d84:	781a      	ldrb	r2, [r3, #0]
 8000d86:	2a49      	cmp	r2, #73	@ 0x49
 8000d88:	4605      	mov	r5, r0
 8000d8a:	f47f af0e 	bne.w	8000baa <d_type+0x122>
 8000d8e:	3301      	adds	r3, #1
 8000d90:	60e3      	str	r3, [r4, #12]
 8000d92:	4620      	mov	r0, r4
 8000d94:	f000 fe30 	bl	80019f8 <d_template_args_1>
 8000d98:	462a      	mov	r2, r5
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2104      	movs	r1, #4
 8000d9e:	4620      	mov	r0, r4
 8000da0:	f7ff fa36 	bl	8000210 <d_make_comp>
 8000da4:	4605      	mov	r5, r0
 8000da6:	9001      	str	r0, [sp, #4]
 8000da8:	e711      	b.n	8000bce <d_type+0x146>
 8000daa:	3201      	adds	r2, #1
 8000dac:	60e2      	str	r2, [r4, #12]
 8000dae:	4620      	mov	r0, r4
 8000db0:	f7ff fe6a 	bl	8000a88 <d_type>
 8000db4:	2300      	movs	r3, #0
 8000db6:	4602      	mov	r2, r0
 8000db8:	2123      	movs	r1, #35	@ 0x23
 8000dba:	4620      	mov	r0, r4
 8000dbc:	f7ff fa28 	bl	8000210 <d_make_comp>
 8000dc0:	4605      	mov	r5, r0
 8000dc2:	9001      	str	r0, [sp, #4]
 8000dc4:	e703      	b.n	8000bce <d_type+0x146>
 8000dc6:	3201      	adds	r2, #1
 8000dc8:	60e2      	str	r2, [r4, #12]
 8000dca:	4620      	mov	r0, r4
 8000dcc:	f7ff fe5c 	bl	8000a88 <d_type>
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	4602      	mov	r2, r0
 8000dd4:	2122      	movs	r1, #34	@ 0x22
 8000dd6:	4620      	mov	r0, r4
 8000dd8:	f7ff fa1a 	bl	8000210 <d_make_comp>
 8000ddc:	4605      	mov	r5, r0
 8000dde:	9001      	str	r0, [sp, #4]
 8000de0:	e6f5      	b.n	8000bce <d_type+0x146>
 8000de2:	3201      	adds	r2, #1
 8000de4:	60e2      	str	r2, [r4, #12]
 8000de6:	4620      	mov	r0, r4
 8000de8:	f7ff fe4e 	bl	8000a88 <d_type>
 8000dec:	2300      	movs	r3, #0
 8000dee:	4602      	mov	r2, r0
 8000df0:	2124      	movs	r1, #36	@ 0x24
 8000df2:	4620      	mov	r0, r4
 8000df4:	f7ff fa0c 	bl	8000210 <d_make_comp>
 8000df8:	4605      	mov	r5, r0
 8000dfa:	9001      	str	r0, [sp, #4]
 8000dfc:	e6e7      	b.n	8000bce <d_type+0x146>
 8000dfe:	bf00      	nop
 8000e00:	03ec7bff 	.word	0x03ec7bff
 8000e04:	0802ccc4 	.word	0x0802ccc4
 8000e08:	3201      	adds	r2, #1
 8000e0a:	60e2      	str	r2, [r4, #12]
 8000e0c:	4620      	mov	r0, r4
 8000e0e:	f7ff fd09 	bl	8000824 <d_source_name>
 8000e12:	68e3      	ldr	r3, [r4, #12]
 8000e14:	9001      	str	r0, [sp, #4]
 8000e16:	781a      	ldrb	r2, [r3, #0]
 8000e18:	2a49      	cmp	r2, #73	@ 0x49
 8000e1a:	4605      	mov	r5, r0
 8000e1c:	f000 81ef 	beq.w	80011fe <d_type+0x776>
 8000e20:	4620      	mov	r0, r4
 8000e22:	f7ff fe31 	bl	8000a88 <d_type>
 8000e26:	462b      	mov	r3, r5
 8000e28:	4602      	mov	r2, r0
 8000e2a:	2121      	movs	r1, #33	@ 0x21
 8000e2c:	4620      	mov	r0, r4
 8000e2e:	f7ff f9ef 	bl	8000210 <d_make_comp>
 8000e32:	4605      	mov	r5, r0
 8000e34:	9001      	str	r0, [sp, #4]
 8000e36:	e6ca      	b.n	8000bce <d_type+0x146>
 8000e38:	1c55      	adds	r5, r2, #1
 8000e3a:	60e5      	str	r5, [r4, #12]
 8000e3c:	7853      	ldrb	r3, [r2, #1]
 8000e3e:	2b5f      	cmp	r3, #95	@ 0x5f
 8000e40:	f000 81db 	beq.w	80011fa <d_type+0x772>
 8000e44:	3b30      	subs	r3, #48	@ 0x30
 8000e46:	2b09      	cmp	r3, #9
 8000e48:	f200 81e6 	bhi.w	8001218 <d_type+0x790>
 8000e4c:	462b      	mov	r3, r5
 8000e4e:	469c      	mov	ip, r3
 8000e50:	3301      	adds	r3, #1
 8000e52:	60e3      	str	r3, [r4, #12]
 8000e54:	7819      	ldrb	r1, [r3, #0]
 8000e56:	3930      	subs	r1, #48	@ 0x30
 8000e58:	2909      	cmp	r1, #9
 8000e5a:	d9f8      	bls.n	8000e4e <d_type+0x3c6>
 8000e5c:	e9d4 1005 	ldrd	r1, r0, [r4, #20]
 8000e60:	4281      	cmp	r1, r0
 8000e62:	ebac 0202 	sub.w	r2, ip, r2
 8000e66:	f6bf aeab 	bge.w	8000bc0 <d_type+0x138>
 8000e6a:	6927      	ldr	r7, [r4, #16]
 8000e6c:	eb01 0081 	add.w	r0, r1, r1, lsl #2
 8000e70:	eb07 0680 	add.w	r6, r7, r0, lsl #2
 8000e74:	ea4f 0e80 	mov.w	lr, r0, lsl #2
 8000e78:	2000      	movs	r0, #0
 8000e7a:	3101      	adds	r1, #1
 8000e7c:	4282      	cmp	r2, r0
 8000e7e:	e9c6 0001 	strd	r0, r0, [r6, #4]
 8000e82:	6161      	str	r1, [r4, #20]
 8000e84:	f77f ae9c 	ble.w	8000bc0 <d_type+0x138>
 8000e88:	e9c6 0001 	strd	r0, r0, [r6, #4]
 8000e8c:	f807 000e 	strb.w	r0, [r7, lr]
 8000e90:	e9c6 5203 	strd	r5, r2, [r6, #12]
 8000e94:	f89c 2001 	ldrb.w	r2, [ip, #1]
 8000e98:	461d      	mov	r5, r3
 8000e9a:	2a5f      	cmp	r2, #95	@ 0x5f
 8000e9c:	f47f ae90 	bne.w	8000bc0 <d_type+0x138>
 8000ea0:	3501      	adds	r5, #1
 8000ea2:	60e5      	str	r5, [r4, #12]
 8000ea4:	4620      	mov	r0, r4
 8000ea6:	f7ff fdef 	bl	8000a88 <d_type>
 8000eaa:	4632      	mov	r2, r6
 8000eac:	4603      	mov	r3, r0
 8000eae:	212a      	movs	r1, #42	@ 0x2a
 8000eb0:	4620      	mov	r0, r4
 8000eb2:	f7ff f9ad 	bl	8000210 <d_make_comp>
 8000eb6:	4605      	mov	r5, r0
 8000eb8:	9001      	str	r0, [sp, #4]
 8000eba:	e688      	b.n	8000bce <d_type+0x146>
 8000ebc:	3201      	adds	r2, #1
 8000ebe:	60e2      	str	r2, [r4, #12]
 8000ec0:	4620      	mov	r0, r4
 8000ec2:	f7ff fde1 	bl	8000a88 <d_type>
 8000ec6:	4605      	mov	r5, r0
 8000ec8:	2800      	cmp	r0, #0
 8000eca:	f43f ae79 	beq.w	8000bc0 <d_type+0x138>
 8000ece:	4620      	mov	r0, r4
 8000ed0:	f7ff fdda 	bl	8000a88 <d_type>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2800      	cmp	r0, #0
 8000ed8:	f43f ae72 	beq.w	8000bc0 <d_type+0x138>
 8000edc:	462a      	mov	r2, r5
 8000ede:	212b      	movs	r1, #43	@ 0x2b
 8000ee0:	4620      	mov	r0, r4
 8000ee2:	f7ff f995 	bl	8000210 <d_make_comp>
 8000ee6:	4605      	mov	r5, r0
 8000ee8:	9001      	str	r0, [sp, #4]
 8000eea:	e670      	b.n	8000bce <d_type+0x146>
 8000eec:	2301      	movs	r3, #1
 8000eee:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8000ef0:	6323      	str	r3, [r4, #48]	@ 0x30
 8000ef2:	4620      	mov	r0, r4
 8000ef4:	f000 fe50 	bl	8001b98 <d_expression_1>
 8000ef8:	6325      	str	r5, [r4, #48]	@ 0x30
 8000efa:	4602      	mov	r2, r0
 8000efc:	2300      	movs	r3, #0
 8000efe:	2144      	movs	r1, #68	@ 0x44
 8000f00:	4620      	mov	r0, r4
 8000f02:	f7ff f985 	bl	8000210 <d_make_comp>
 8000f06:	4605      	mov	r5, r0
 8000f08:	9001      	str	r0, [sp, #4]
 8000f0a:	2800      	cmp	r0, #0
 8000f0c:	f43f ae58 	beq.w	8000bc0 <d_type+0x138>
 8000f10:	68e3      	ldr	r3, [r4, #12]
 8000f12:	781a      	ldrb	r2, [r3, #0]
 8000f14:	2a00      	cmp	r2, #0
 8000f16:	f43f ae53 	beq.w	8000bc0 <d_type+0x138>
 8000f1a:	1c5a      	adds	r2, r3, #1
 8000f1c:	60e2      	str	r2, [r4, #12]
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	2b45      	cmp	r3, #69	@ 0x45
 8000f22:	f47f ae4d 	bne.w	8000bc0 <d_type+0x138>
 8000f26:	e654      	b.n	8000bd2 <d_type+0x14a>
 8000f28:	e9d4 3105 	ldrd	r3, r1, [r4, #20]
 8000f2c:	428b      	cmp	r3, r1
 8000f2e:	f280 81da 	bge.w	80012e6 <d_type+0x85e>
 8000f32:	6921      	ldr	r1, [r4, #16]
 8000f34:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 8000f38:	eb01 0580 	add.w	r5, r1, r0, lsl #2
 8000f3c:	3301      	adds	r3, #1
 8000f3e:	2600      	movs	r6, #0
 8000f40:	e9c5 6601 	strd	r6, r6, [r5, #4]
 8000f44:	6163      	str	r3, [r4, #20]
 8000f46:	232c      	movs	r3, #44	@ 0x2c
 8000f48:	f801 3020 	strb.w	r3, [r1, r0, lsl #2]
 8000f4c:	7893      	ldrb	r3, [r2, #2]
 8000f4e:	9501      	str	r5, [sp, #4]
 8000f50:	3b30      	subs	r3, #48	@ 0x30
 8000f52:	b2db      	uxtb	r3, r3
 8000f54:	2b09      	cmp	r3, #9
 8000f56:	bf94      	ite	ls
 8000f58:	2301      	movls	r3, #1
 8000f5a:	4633      	movhi	r3, r6
 8000f5c:	822b      	strh	r3, [r5, #16]
 8000f5e:	d802      	bhi.n	8000f66 <d_type+0x4de>
 8000f60:	4620      	mov	r0, r4
 8000f62:	f7ff f9cd 	bl	8000300 <d_number>
 8000f66:	4620      	mov	r0, r4
 8000f68:	f7ff fd8e 	bl	8000a88 <d_type>
 8000f6c:	60e8      	str	r0, [r5, #12]
 8000f6e:	2800      	cmp	r0, #0
 8000f70:	f43f ae26 	beq.w	8000bc0 <d_type+0x138>
 8000f74:	4620      	mov	r0, r4
 8000f76:	f7ff f9c3 	bl	8000300 <d_number>
 8000f7a:	68e2      	ldr	r2, [r4, #12]
 8000f7c:	7813      	ldrb	r3, [r2, #0]
 8000f7e:	b113      	cbz	r3, 8000f86 <d_type+0x4fe>
 8000f80:	1c53      	adds	r3, r2, #1
 8000f82:	60e3      	str	r3, [r4, #12]
 8000f84:	7813      	ldrb	r3, [r2, #0]
 8000f86:	f1a3 0373 	sub.w	r3, r3, #115	@ 0x73
 8000f8a:	fab3 f383 	clz	r3, r3
 8000f8e:	095b      	lsrs	r3, r3, #5
 8000f90:	826b      	strh	r3, [r5, #18]
 8000f92:	e60a      	b.n	8000baa <d_type+0x122>
 8000f94:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
 8000f98:	4293      	cmp	r3, r2
 8000f9a:	f6bf ae11 	bge.w	8000bc0 <d_type+0x138>
 8000f9e:	6922      	ldr	r2, [r4, #16]
 8000fa0:	49bd      	ldr	r1, [pc, #756]	@ (8001298 <d_type+0x810>)
 8000fa2:	eb03 0583 	add.w	r5, r3, r3, lsl #2
 8000fa6:	00a8      	lsls	r0, r5, #2
 8000fa8:	3301      	adds	r3, #1
 8000faa:	6163      	str	r3, [r4, #20]
 8000fac:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	e9c5 3301 	strd	r3, r3, [r5, #4]
 8000fb6:	5413      	strb	r3, [r2, r0]
 8000fb8:	230e      	movs	r3, #14
 8000fba:	e9c5 1303 	strd	r1, r3, [r5, #12]
 8000fbe:	e5f4      	b.n	8000baa <d_type+0x122>
 8000fc0:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
 8000fc4:	4293      	cmp	r3, r2
 8000fc6:	f6bf adfb 	bge.w	8000bc0 <d_type+0x138>
 8000fca:	6922      	ldr	r2, [r4, #16]
 8000fcc:	49b3      	ldr	r1, [pc, #716]	@ (800129c <d_type+0x814>)
 8000fce:	eb03 0583 	add.w	r5, r3, r3, lsl #2
 8000fd2:	00a8      	lsls	r0, r5, #2
 8000fd4:	3301      	adds	r3, #1
 8000fd6:	6163      	str	r3, [r4, #20]
 8000fd8:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8000fdc:	2300      	movs	r3, #0
 8000fde:	e9c5 3301 	strd	r3, r3, [r5, #4]
 8000fe2:	5413      	strb	r3, [r2, r0]
 8000fe4:	2304      	movs	r3, #4
 8000fe6:	e9c5 1303 	strd	r1, r3, [r5, #12]
 8000fea:	e5de      	b.n	8000baa <d_type+0x122>
 8000fec:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
 8000ff0:	4293      	cmp	r3, r2
 8000ff2:	f280 8173 	bge.w	80012dc <d_type+0x854>
 8000ff6:	6922      	ldr	r2, [r4, #16]
 8000ff8:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8000ffc:	eb02 0581 	add.w	r5, r2, r1, lsl #2
 8001000:	3301      	adds	r3, #1
 8001002:	2000      	movs	r0, #0
 8001004:	e9c5 0001 	strd	r0, r0, [r5, #4]
 8001008:	6163      	str	r3, [r4, #20]
 800100a:	2327      	movs	r3, #39	@ 0x27
 800100c:	f802 3021 	strb.w	r3, [r2, r1, lsl #2]
 8001010:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8001012:	4aa3      	ldr	r2, [pc, #652]	@ (80012a0 <d_type+0x818>)
 8001014:	60ea      	str	r2, [r5, #12]
 8001016:	3304      	adds	r3, #4
 8001018:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800101a:	e5c6      	b.n	8000baa <d_type+0x122>
 800101c:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
 8001020:	4293      	cmp	r3, r2
 8001022:	f280 815b 	bge.w	80012dc <d_type+0x854>
 8001026:	6922      	ldr	r2, [r4, #16]
 8001028:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 800102c:	eb02 0581 	add.w	r5, r2, r1, lsl #2
 8001030:	3301      	adds	r3, #1
 8001032:	2000      	movs	r0, #0
 8001034:	e9c5 0001 	strd	r0, r0, [r5, #4]
 8001038:	6163      	str	r3, [r4, #20]
 800103a:	2327      	movs	r3, #39	@ 0x27
 800103c:	f802 3021 	strb.w	r3, [r2, r1, lsl #2]
 8001040:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8001042:	4a98      	ldr	r2, [pc, #608]	@ (80012a4 <d_type+0x81c>)
 8001044:	60ea      	str	r2, [r5, #12]
 8001046:	3309      	adds	r3, #9
 8001048:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800104a:	e5ae      	b.n	8000baa <d_type+0x122>
 800104c:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
 8001050:	4293      	cmp	r3, r2
 8001052:	f280 8143 	bge.w	80012dc <d_type+0x854>
 8001056:	6922      	ldr	r2, [r4, #16]
 8001058:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 800105c:	eb02 0581 	add.w	r5, r2, r1, lsl #2
 8001060:	3301      	adds	r3, #1
 8001062:	2000      	movs	r0, #0
 8001064:	e9c5 0001 	strd	r0, r0, [r5, #4]
 8001068:	6163      	str	r3, [r4, #20]
 800106a:	2327      	movs	r3, #39	@ 0x27
 800106c:	f802 3021 	strb.w	r3, [r2, r1, lsl #2]
 8001070:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8001072:	4a8d      	ldr	r2, [pc, #564]	@ (80012a8 <d_type+0x820>)
 8001074:	60ea      	str	r2, [r5, #12]
 8001076:	330a      	adds	r3, #10
 8001078:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800107a:	e596      	b.n	8000baa <d_type+0x122>
 800107c:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
 8001080:	4293      	cmp	r3, r2
 8001082:	f280 812b 	bge.w	80012dc <d_type+0x854>
 8001086:	6922      	ldr	r2, [r4, #16]
 8001088:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 800108c:	eb02 0581 	add.w	r5, r2, r1, lsl #2
 8001090:	3301      	adds	r3, #1
 8001092:	2000      	movs	r0, #0
 8001094:	e9c5 0001 	strd	r0, r0, [r5, #4]
 8001098:	6163      	str	r3, [r4, #20]
 800109a:	2327      	movs	r3, #39	@ 0x27
 800109c:	f802 3021 	strb.w	r3, [r2, r1, lsl #2]
 80010a0:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80010a2:	4a82      	ldr	r2, [pc, #520]	@ (80012ac <d_type+0x824>)
 80010a4:	60ea      	str	r2, [r5, #12]
 80010a6:	3309      	adds	r3, #9
 80010a8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80010aa:	e57e      	b.n	8000baa <d_type+0x122>
 80010ac:	7893      	ldrb	r3, [r2, #2]
 80010ae:	2b5f      	cmp	r3, #95	@ 0x5f
 80010b0:	f000 8106 	beq.w	80012c0 <d_type+0x838>
 80010b4:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
 80010b8:	4293      	cmp	r3, r2
 80010ba:	f6bf ad81 	bge.w	8000bc0 <d_type+0x138>
 80010be:	6922      	ldr	r2, [r4, #16]
 80010c0:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 80010c4:	eb02 0581 	add.w	r5, r2, r1, lsl #2
 80010c8:	3301      	adds	r3, #1
 80010ca:	2000      	movs	r0, #0
 80010cc:	e9c5 0001 	strd	r0, r0, [r5, #4]
 80010d0:	6163      	str	r3, [r4, #20]
 80010d2:	2343      	movs	r3, #67	@ 0x43
 80010d4:	f802 3021 	strb.w	r3, [r2, r1, lsl #2]
 80010d8:	4620      	mov	r0, r4
 80010da:	f7ff f911 	bl	8000300 <d_number>
 80010de:	60e8      	str	r0, [r5, #12]
 80010e0:	68e3      	ldr	r3, [r4, #12]
 80010e2:	781a      	ldrb	r2, [r3, #0]
 80010e4:	2a5f      	cmp	r2, #95	@ 0x5f
 80010e6:	f47f ad6b 	bne.w	8000bc0 <d_type+0x138>
 80010ea:	3301      	adds	r3, #1
 80010ec:	60e3      	str	r3, [r4, #12]
 80010ee:	4620      	mov	r0, r4
 80010f0:	f7ff fcca 	bl	8000a88 <d_type>
 80010f4:	462a      	mov	r2, r5
 80010f6:	4603      	mov	r3, r0
 80010f8:	212d      	movs	r1, #45	@ 0x2d
 80010fa:	4620      	mov	r0, r4
 80010fc:	f7ff f888 	bl	8000210 <d_make_comp>
 8001100:	4605      	mov	r5, r0
 8001102:	9001      	str	r0, [sp, #4]
 8001104:	e563      	b.n	8000bce <d_type+0x146>
 8001106:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
 800110a:	4293      	cmp	r3, r2
 800110c:	f280 80e6 	bge.w	80012dc <d_type+0x854>
 8001110:	6922      	ldr	r2, [r4, #16]
 8001112:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8001116:	eb02 0581 	add.w	r5, r2, r1, lsl #2
 800111a:	3301      	adds	r3, #1
 800111c:	2000      	movs	r0, #0
 800111e:	e9c5 0001 	strd	r0, r0, [r5, #4]
 8001122:	6163      	str	r3, [r4, #20]
 8001124:	2327      	movs	r3, #39	@ 0x27
 8001126:	f802 3021 	strb.w	r3, [r2, r1, lsl #2]
 800112a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800112c:	4a60      	ldr	r2, [pc, #384]	@ (80012b0 <d_type+0x828>)
 800112e:	60ea      	str	r2, [r5, #12]
 8001130:	3307      	adds	r3, #7
 8001132:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8001134:	e539      	b.n	8000baa <d_type+0x122>
 8001136:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
 800113a:	4293      	cmp	r3, r2
 800113c:	f280 80ce 	bge.w	80012dc <d_type+0x854>
 8001140:	6922      	ldr	r2, [r4, #16]
 8001142:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8001146:	eb02 0581 	add.w	r5, r2, r1, lsl #2
 800114a:	3301      	adds	r3, #1
 800114c:	2000      	movs	r0, #0
 800114e:	e9c5 0001 	strd	r0, r0, [r5, #4]
 8001152:	6163      	str	r3, [r4, #20]
 8001154:	2327      	movs	r3, #39	@ 0x27
 8001156:	f802 3021 	strb.w	r3, [r2, r1, lsl #2]
 800115a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800115c:	4a55      	ldr	r2, [pc, #340]	@ (80012b4 <d_type+0x82c>)
 800115e:	60ea      	str	r2, [r5, #12]
 8001160:	3308      	adds	r3, #8
 8001162:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8001164:	e521      	b.n	8000baa <d_type+0x122>
 8001166:	4620      	mov	r0, r4
 8001168:	f7ff fc8e 	bl	8000a88 <d_type>
 800116c:	2300      	movs	r3, #0
 800116e:	4602      	mov	r2, r0
 8001170:	214c      	movs	r1, #76	@ 0x4c
 8001172:	4620      	mov	r0, r4
 8001174:	f7ff f84c 	bl	8000210 <d_make_comp>
 8001178:	4605      	mov	r5, r0
 800117a:	9001      	str	r0, [sp, #4]
 800117c:	e527      	b.n	8000bce <d_type+0x146>
 800117e:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
 8001182:	4293      	cmp	r3, r2
 8001184:	f280 80aa 	bge.w	80012dc <d_type+0x854>
 8001188:	6922      	ldr	r2, [r4, #16]
 800118a:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 800118e:	eb02 0581 	add.w	r5, r2, r1, lsl #2
 8001192:	3301      	adds	r3, #1
 8001194:	2000      	movs	r0, #0
 8001196:	e9c5 0001 	strd	r0, r0, [r5, #4]
 800119a:	6163      	str	r3, [r4, #20]
 800119c:	2327      	movs	r3, #39	@ 0x27
 800119e:	f802 3021 	strb.w	r3, [r2, r1, lsl #2]
 80011a2:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80011a4:	4a44      	ldr	r2, [pc, #272]	@ (80012b8 <d_type+0x830>)
 80011a6:	60ea      	str	r2, [r5, #12]
 80011a8:	3311      	adds	r3, #17
 80011aa:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80011ac:	e4fd      	b.n	8000baa <d_type+0x122>
 80011ae:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
 80011b2:	4293      	cmp	r3, r2
 80011b4:	f280 8092 	bge.w	80012dc <d_type+0x854>
 80011b8:	6922      	ldr	r2, [r4, #16]
 80011ba:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 80011be:	eb02 0581 	add.w	r5, r2, r1, lsl #2
 80011c2:	3301      	adds	r3, #1
 80011c4:	2000      	movs	r0, #0
 80011c6:	e9c5 0001 	strd	r0, r0, [r5, #4]
 80011ca:	6163      	str	r3, [r4, #20]
 80011cc:	2327      	movs	r3, #39	@ 0x27
 80011ce:	f802 3021 	strb.w	r3, [r2, r1, lsl #2]
 80011d2:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80011d4:	4a39      	ldr	r2, [pc, #228]	@ (80012bc <d_type+0x834>)
 80011d6:	60ea      	str	r2, [r5, #12]
 80011d8:	3308      	adds	r3, #8
 80011da:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80011dc:	e4e5      	b.n	8000baa <d_type+0x122>
 80011de:	3201      	adds	r2, #1
 80011e0:	60e2      	str	r2, [r4, #12]
 80011e2:	4620      	mov	r0, r4
 80011e4:	f7ff fb1e 	bl	8000824 <d_source_name>
 80011e8:	462b      	mov	r3, r5
 80011ea:	4602      	mov	r2, r0
 80011ec:	2128      	movs	r1, #40	@ 0x28
 80011ee:	4620      	mov	r0, r4
 80011f0:	f7ff f80e 	bl	8000210 <d_make_comp>
 80011f4:	4605      	mov	r5, r0
 80011f6:	9001      	str	r0, [sp, #4]
 80011f8:	e4e9      	b.n	8000bce <d_type+0x146>
 80011fa:	2600      	movs	r6, #0
 80011fc:	e650      	b.n	8000ea0 <d_type+0x418>
 80011fe:	3301      	adds	r3, #1
 8001200:	60e3      	str	r3, [r4, #12]
 8001202:	4620      	mov	r0, r4
 8001204:	f000 fbf8 	bl	80019f8 <d_template_args_1>
 8001208:	462a      	mov	r2, r5
 800120a:	4603      	mov	r3, r0
 800120c:	2104      	movs	r1, #4
 800120e:	4620      	mov	r0, r4
 8001210:	f7fe fffe 	bl	8000210 <d_make_comp>
 8001214:	4605      	mov	r5, r0
 8001216:	e603      	b.n	8000e20 <d_type+0x398>
 8001218:	2301      	movs	r3, #1
 800121a:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 800121c:	6323      	str	r3, [r4, #48]	@ 0x30
 800121e:	4620      	mov	r0, r4
 8001220:	f000 fcba 	bl	8001b98 <d_expression_1>
 8001224:	6325      	str	r5, [r4, #48]	@ 0x30
 8001226:	4606      	mov	r6, r0
 8001228:	2800      	cmp	r0, #0
 800122a:	f43f acc9 	beq.w	8000bc0 <d_type+0x138>
 800122e:	68e5      	ldr	r5, [r4, #12]
 8001230:	782a      	ldrb	r2, [r5, #0]
 8001232:	e632      	b.n	8000e9a <d_type+0x412>
 8001234:	4620      	mov	r0, r4
 8001236:	f001 faa1 	bl	800277c <d_name>
 800123a:	4605      	mov	r5, r0
 800123c:	9001      	str	r0, [sp, #4]
 800123e:	2800      	cmp	r0, #0
 8001240:	f43f acbe 	beq.w	8000bc0 <d_type+0x138>
 8001244:	7803      	ldrb	r3, [r0, #0]
 8001246:	2b18      	cmp	r3, #24
 8001248:	f47f acc3 	bne.w	8000bd2 <d_type+0x14a>
 800124c:	e4ad      	b.n	8000baa <d_type+0x122>
 800124e:	1c73      	adds	r3, r6, #1
 8001250:	60e3      	str	r3, [r4, #12]
 8001252:	4620      	mov	r0, r4
 8001254:	f8d4 9014 	ldr.w	r9, [r4, #20]
 8001258:	f8d4 8020 	ldr.w	r8, [r4, #32]
 800125c:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800125e:	f000 fbcb 	bl	80019f8 <d_template_args_1>
 8001262:	68e3      	ldr	r3, [r4, #12]
 8001264:	781b      	ldrb	r3, [r3, #0]
 8001266:	2b49      	cmp	r3, #73	@ 0x49
 8001268:	d006      	beq.n	8001278 <d_type+0x7f0>
 800126a:	60e6      	str	r6, [r4, #12]
 800126c:	f8c4 9014 	str.w	r9, [r4, #20]
 8001270:	f8c4 8020 	str.w	r8, [r4, #32]
 8001274:	62e7      	str	r7, [r4, #44]	@ 0x2c
 8001276:	e4aa      	b.n	8000bce <d_type+0x146>
 8001278:	2d00      	cmp	r5, #0
 800127a:	f43f aca1 	beq.w	8000bc0 <d_type+0x138>
 800127e:	e9d4 1308 	ldrd	r1, r3, [r4, #32]
 8001282:	4299      	cmp	r1, r3
 8001284:	f6bf ac9c 	bge.w	8000bc0 <d_type+0x138>
 8001288:	69e2      	ldr	r2, [r4, #28]
 800128a:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
 800128e:	3101      	adds	r1, #1
 8001290:	4603      	mov	r3, r0
 8001292:	462a      	mov	r2, r5
 8001294:	6221      	str	r1, [r4, #32]
 8001296:	e581      	b.n	8000d9c <d_type+0x314>
 8001298:	080af0d8 	.word	0x080af0d8
 800129c:	080af0d0 	.word	0x080af0d0
 80012a0:	0802cf08 	.word	0x0802cf08
 80012a4:	0802cecc 	.word	0x0802cecc
 80012a8:	0802cef4 	.word	0x0802cef4
 80012ac:	0802cee0 	.word	0x0802cee0
 80012b0:	0802cf1c 	.word	0x0802cf1c
 80012b4:	0802cf30 	.word	0x0802cf30
 80012b8:	0802cf58 	.word	0x0802cf58
 80012bc:	0802cf44 	.word	0x0802cf44
 80012c0:	3203      	adds	r2, #3
 80012c2:	2301      	movs	r3, #1
 80012c4:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80012c6:	60e2      	str	r2, [r4, #12]
 80012c8:	6323      	str	r3, [r4, #48]	@ 0x30
 80012ca:	4620      	mov	r0, r4
 80012cc:	f000 fc64 	bl	8001b98 <d_expression_1>
 80012d0:	6325      	str	r5, [r4, #48]	@ 0x30
 80012d2:	4605      	mov	r5, r0
 80012d4:	2800      	cmp	r0, #0
 80012d6:	f47f af03 	bne.w	80010e0 <d_type+0x658>
 80012da:	e471      	b.n	8000bc0 <d_type+0x138>
 80012dc:	2300      	movs	r3, #0
 80012de:	68db      	ldr	r3, [r3, #12]
 80012e0:	deff      	udf	#255	@ 0xff
 80012e2:	68c3      	ldr	r3, [r0, #12]
 80012e4:	deff      	udf	#255	@ 0xff
 80012e6:	2300      	movs	r3, #0
 80012e8:	701b      	strb	r3, [r3, #0]
 80012ea:	deff      	udf	#255	@ 0xff

080012ec <d_parmlist>:
 80012ec:	b530      	push	{r4, r5, lr}
 80012ee:	68c2      	ldr	r2, [r0, #12]
 80012f0:	b083      	sub	sp, #12
 80012f2:	2300      	movs	r3, #0
 80012f4:	9301      	str	r3, [sp, #4]
 80012f6:	7813      	ldrb	r3, [r2, #0]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d034      	beq.n	8001366 <d_parmlist+0x7a>
 80012fc:	4604      	mov	r4, r0
 80012fe:	ad01      	add	r5, sp, #4
 8001300:	2b4f      	cmp	r3, #79	@ 0x4f
 8001302:	d00c      	beq.n	800131e <d_parmlist+0x32>
 8001304:	d809      	bhi.n	800131a <d_parmlist+0x2e>
 8001306:	2b2e      	cmp	r3, #46	@ 0x2e
 8001308:	d001      	beq.n	800130e <d_parmlist+0x22>
 800130a:	2b45      	cmp	r3, #69	@ 0x45
 800130c:	d10a      	bne.n	8001324 <d_parmlist+0x38>
 800130e:	9801      	ldr	r0, [sp, #4]
 8001310:	b348      	cbz	r0, 8001366 <d_parmlist+0x7a>
 8001312:	6903      	ldr	r3, [r0, #16]
 8001314:	b1cb      	cbz	r3, 800134a <d_parmlist+0x5e>
 8001316:	b003      	add	sp, #12
 8001318:	bd30      	pop	{r4, r5, pc}
 800131a:	2b52      	cmp	r3, #82	@ 0x52
 800131c:	d102      	bne.n	8001324 <d_parmlist+0x38>
 800131e:	7853      	ldrb	r3, [r2, #1]
 8001320:	2b45      	cmp	r3, #69	@ 0x45
 8001322:	d0f4      	beq.n	800130e <d_parmlist+0x22>
 8001324:	4620      	mov	r0, r4
 8001326:	f7ff fbaf 	bl	8000a88 <d_type>
 800132a:	4602      	mov	r2, r0
 800132c:	2300      	movs	r3, #0
 800132e:	212e      	movs	r1, #46	@ 0x2e
 8001330:	4620      	mov	r0, r4
 8001332:	b1c2      	cbz	r2, 8001366 <d_parmlist+0x7a>
 8001334:	f7fe ff6c 	bl	8000210 <d_make_comp>
 8001338:	6028      	str	r0, [r5, #0]
 800133a:	b1a0      	cbz	r0, 8001366 <d_parmlist+0x7a>
 800133c:	68e2      	ldr	r2, [r4, #12]
 800133e:	7813      	ldrb	r3, [r2, #0]
 8001340:	f100 0510 	add.w	r5, r0, #16
 8001344:	2b00      	cmp	r3, #0
 8001346:	d1db      	bne.n	8001300 <d_parmlist+0x14>
 8001348:	e7e1      	b.n	800130e <d_parmlist+0x22>
 800134a:	68c2      	ldr	r2, [r0, #12]
 800134c:	7811      	ldrb	r1, [r2, #0]
 800134e:	2927      	cmp	r1, #39	@ 0x27
 8001350:	d1e1      	bne.n	8001316 <d_parmlist+0x2a>
 8001352:	68d2      	ldr	r2, [r2, #12]
 8001354:	7c11      	ldrb	r1, [r2, #16]
 8001356:	2909      	cmp	r1, #9
 8001358:	d1dd      	bne.n	8001316 <d_parmlist+0x2a>
 800135a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800135c:	6852      	ldr	r2, [r2, #4]
 800135e:	1a89      	subs	r1, r1, r2
 8001360:	62e1      	str	r1, [r4, #44]	@ 0x2c
 8001362:	60c3      	str	r3, [r0, #12]
 8001364:	e7d7      	b.n	8001316 <d_parmlist+0x2a>
 8001366:	2000      	movs	r0, #0
 8001368:	b003      	add	sp, #12
 800136a:	bd30      	pop	{r4, r5, pc}

0800136c <d_bare_function_type>:
 800136c:	b570      	push	{r4, r5, r6, lr}
 800136e:	68c3      	ldr	r3, [r0, #12]
 8001370:	781a      	ldrb	r2, [r3, #0]
 8001372:	2a4a      	cmp	r2, #74	@ 0x4a
 8001374:	4605      	mov	r5, r0
 8001376:	d01a      	beq.n	80013ae <d_bare_function_type+0x42>
 8001378:	b181      	cbz	r1, 800139c <d_bare_function_type+0x30>
 800137a:	4628      	mov	r0, r5
 800137c:	f7ff fb84 	bl	8000a88 <d_type>
 8001380:	4604      	mov	r4, r0
 8001382:	b190      	cbz	r0, 80013aa <d_bare_function_type+0x3e>
 8001384:	4628      	mov	r0, r5
 8001386:	f7ff ffb1 	bl	80012ec <d_parmlist>
 800138a:	4603      	mov	r3, r0
 800138c:	b168      	cbz	r0, 80013aa <d_bare_function_type+0x3e>
 800138e:	4622      	mov	r2, r4
 8001390:	4628      	mov	r0, r5
 8001392:	2129      	movs	r1, #41	@ 0x29
 8001394:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8001398:	f7fe bf3a 	b.w	8000210 <d_make_comp>
 800139c:	4628      	mov	r0, r5
 800139e:	460c      	mov	r4, r1
 80013a0:	f7ff ffa4 	bl	80012ec <d_parmlist>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2800      	cmp	r0, #0
 80013a8:	d1f1      	bne.n	800138e <d_bare_function_type+0x22>
 80013aa:	2000      	movs	r0, #0
 80013ac:	bd70      	pop	{r4, r5, r6, pc}
 80013ae:	3301      	adds	r3, #1
 80013b0:	60c3      	str	r3, [r0, #12]
 80013b2:	e7e2      	b.n	800137a <d_bare_function_type+0xe>

080013b4 <d_function_type>:
 80013b4:	b570      	push	{r4, r5, r6, lr}
 80013b6:	4604      	mov	r4, r0
 80013b8:	6880      	ldr	r0, [r0, #8]
 80013ba:	f410 2080 	ands.w	r0, r0, #262144	@ 0x40000
 80013be:	d10b      	bne.n	80013d8 <d_function_type+0x24>
 80013c0:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 80013c2:	f5b2 6f00 	cmp.w	r2, #2048	@ 0x800
 80013c6:	d806      	bhi.n	80013d6 <d_function_type+0x22>
 80013c8:	1c51      	adds	r1, r2, #1
 80013ca:	68e3      	ldr	r3, [r4, #12]
 80013cc:	63e1      	str	r1, [r4, #60]	@ 0x3c
 80013ce:	7819      	ldrb	r1, [r3, #0]
 80013d0:	2946      	cmp	r1, #70	@ 0x46
 80013d2:	d007      	beq.n	80013e4 <d_function_type+0x30>
 80013d4:	63e2      	str	r2, [r4, #60]	@ 0x3c
 80013d6:	bd70      	pop	{r4, r5, r6, pc}
 80013d8:	68e3      	ldr	r3, [r4, #12]
 80013da:	781a      	ldrb	r2, [r3, #0]
 80013dc:	2a46      	cmp	r2, #70	@ 0x46
 80013de:	d001      	beq.n	80013e4 <d_function_type+0x30>
 80013e0:	2000      	movs	r0, #0
 80013e2:	bd70      	pop	{r4, r5, r6, pc}
 80013e4:	1c5a      	adds	r2, r3, #1
 80013e6:	60e2      	str	r2, [r4, #12]
 80013e8:	785a      	ldrb	r2, [r3, #1]
 80013ea:	2a59      	cmp	r2, #89	@ 0x59
 80013ec:	bf04      	itt	eq
 80013ee:	3302      	addeq	r3, #2
 80013f0:	60e3      	streq	r3, [r4, #12]
 80013f2:	2101      	movs	r1, #1
 80013f4:	4620      	mov	r0, r4
 80013f6:	f7ff ffb9 	bl	800136c <d_bare_function_type>
 80013fa:	68e5      	ldr	r5, [r4, #12]
 80013fc:	782b      	ldrb	r3, [r5, #0]
 80013fe:	2b52      	cmp	r3, #82	@ 0x52
 8001400:	d01a      	beq.n	8001438 <d_function_type+0x84>
 8001402:	2b4f      	cmp	r3, #79	@ 0x4f
 8001404:	d00a      	beq.n	800141c <d_function_type+0x68>
 8001406:	2b45      	cmp	r3, #69	@ 0x45
 8001408:	68a3      	ldr	r3, [r4, #8]
 800140a:	bf06      	itte	eq
 800140c:	3501      	addeq	r5, #1
 800140e:	60e5      	streq	r5, [r4, #12]
 8001410:	2000      	movne	r0, #0
 8001412:	035b      	lsls	r3, r3, #13
 8001414:	d4df      	bmi.n	80013d6 <d_function_type+0x22>
 8001416:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8001418:	3a01      	subs	r2, #1
 800141a:	e7db      	b.n	80013d4 <d_function_type+0x20>
 800141c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800141e:	2120      	movs	r1, #32
 8001420:	3303      	adds	r3, #3
 8001422:	1c6e      	adds	r6, r5, #1
 8001424:	4602      	mov	r2, r0
 8001426:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8001428:	60e6      	str	r6, [r4, #12]
 800142a:	2300      	movs	r3, #0
 800142c:	4620      	mov	r0, r4
 800142e:	f7fe feef 	bl	8000210 <d_make_comp>
 8001432:	786b      	ldrb	r3, [r5, #1]
 8001434:	4635      	mov	r5, r6
 8001436:	e7e6      	b.n	8001406 <d_function_type+0x52>
 8001438:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800143a:	211f      	movs	r1, #31
 800143c:	3302      	adds	r3, #2
 800143e:	e7f0      	b.n	8001422 <d_function_type+0x6e>

08001440 <d_operator_name>:
 8001440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001442:	68c3      	ldr	r3, [r0, #12]
 8001444:	781f      	ldrb	r7, [r3, #0]
 8001446:	4606      	mov	r6, r0
 8001448:	b3a7      	cbz	r7, 80014b4 <d_operator_name+0x74>
 800144a:	1c5a      	adds	r2, r3, #1
 800144c:	60c2      	str	r2, [r0, #12]
 800144e:	f893 e001 	ldrb.w	lr, [r3, #1]
 8001452:	781f      	ldrb	r7, [r3, #0]
 8001454:	f1be 0f00 	cmp.w	lr, #0
 8001458:	d12e      	bne.n	80014b8 <d_operator_name+0x78>
 800145a:	4d38      	ldr	r5, [pc, #224]	@ (800153c <d_operator_name+0xfc>)
 800145c:	2148      	movs	r1, #72	@ 0x48
 800145e:	2200      	movs	r2, #0
 8001460:	1a8b      	subs	r3, r1, r2
 8001462:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8001466:	eb02 0363 	add.w	r3, r2, r3, asr #1
 800146a:	0118      	lsls	r0, r3, #4
 800146c:	eb05 1c03 	add.w	ip, r5, r3, lsl #4
 8001470:	582c      	ldr	r4, [r5, r0]
 8001472:	7820      	ldrb	r0, [r4, #0]
 8001474:	42b8      	cmp	r0, r7
 8001476:	d006      	beq.n	8001486 <d_operator_name+0x46>
 8001478:	bf94      	ite	ls
 800147a:	1c5a      	addls	r2, r3, #1
 800147c:	4619      	movhi	r1, r3
 800147e:	428a      	cmp	r2, r1
 8001480:	d1ee      	bne.n	8001460 <d_operator_name+0x20>
 8001482:	2000      	movs	r0, #0
 8001484:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001486:	7860      	ldrb	r0, [r4, #1]
 8001488:	4570      	cmp	r0, lr
 800148a:	d1f5      	bne.n	8001478 <d_operator_name+0x38>
 800148c:	e9d6 3205 	ldrd	r3, r2, [r6, #20]
 8001490:	4293      	cmp	r3, r2
 8001492:	daf6      	bge.n	8001482 <d_operator_name+0x42>
 8001494:	6932      	ldr	r2, [r6, #16]
 8001496:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 800149a:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 800149e:	3301      	adds	r3, #1
 80014a0:	2400      	movs	r4, #0
 80014a2:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80014a6:	6173      	str	r3, [r6, #20]
 80014a8:	2332      	movs	r3, #50	@ 0x32
 80014aa:	f802 3021 	strb.w	r3, [r2, r1, lsl #2]
 80014ae:	f8c0 c00c 	str.w	ip, [r0, #12]
 80014b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80014b4:	46be      	mov	lr, r7
 80014b6:	e7d0      	b.n	800145a <d_operator_name+0x1a>
 80014b8:	1c9a      	adds	r2, r3, #2
 80014ba:	60c2      	str	r2, [r0, #12]
 80014bc:	2f76      	cmp	r7, #118	@ 0x76
 80014be:	f893 e001 	ldrb.w	lr, [r3, #1]
 80014c2:	d11f      	bne.n	8001504 <d_operator_name+0xc4>
 80014c4:	f1ae 0430 	sub.w	r4, lr, #48	@ 0x30
 80014c8:	b2e3      	uxtb	r3, r4
 80014ca:	2b09      	cmp	r3, #9
 80014cc:	d8c5      	bhi.n	800145a <d_operator_name+0x1a>
 80014ce:	f7ff f9a9 	bl	8000824 <d_source_name>
 80014d2:	e9d6 3105 	ldrd	r3, r1, [r6, #20]
 80014d6:	428b      	cmp	r3, r1
 80014d8:	4602      	mov	r2, r0
 80014da:	dad2      	bge.n	8001482 <d_operator_name+0x42>
 80014dc:	6937      	ldr	r7, [r6, #16]
 80014de:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 80014e2:	eb07 0081 	add.w	r0, r7, r1, lsl #2
 80014e6:	3301      	adds	r3, #1
 80014e8:	2500      	movs	r5, #0
 80014ea:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80014ee:	0089      	lsls	r1, r1, #2
 80014f0:	6173      	str	r3, [r6, #20]
 80014f2:	2a00      	cmp	r2, #0
 80014f4:	d0c5      	beq.n	8001482 <d_operator_name+0x42>
 80014f6:	2333      	movs	r3, #51	@ 0x33
 80014f8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80014fc:	547b      	strb	r3, [r7, r1]
 80014fe:	e9c0 4203 	strd	r4, r2, [r0, #12]
 8001502:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001504:	2f63      	cmp	r7, #99	@ 0x63
 8001506:	d1a8      	bne.n	800145a <d_operator_name+0x1a>
 8001508:	f1be 0f76 	cmp.w	lr, #118	@ 0x76
 800150c:	d1a5      	bne.n	800145a <d_operator_name+0x1a>
 800150e:	e9d0 340c 	ldrd	r3, r4, [r0, #48]	@ 0x30
 8001512:	fab3 f383 	clz	r3, r3
 8001516:	095b      	lsrs	r3, r3, #5
 8001518:	6343      	str	r3, [r0, #52]	@ 0x34
 800151a:	f7ff fab5 	bl	8000a88 <d_type>
 800151e:	6b73      	ldr	r3, [r6, #52]	@ 0x34
 8001520:	4602      	mov	r2, r0
 8001522:	b133      	cbz	r3, 8001532 <d_operator_name+0xf2>
 8001524:	2300      	movs	r3, #0
 8001526:	2135      	movs	r1, #53	@ 0x35
 8001528:	4630      	mov	r0, r6
 800152a:	f7fe fe71 	bl	8000210 <d_make_comp>
 800152e:	6374      	str	r4, [r6, #52]	@ 0x34
 8001530:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001532:	2134      	movs	r1, #52	@ 0x34
 8001534:	4630      	mov	r0, r6
 8001536:	f7fe fe6b 	bl	8000210 <d_make_comp>
 800153a:	e7f8      	b.n	800152e <d_operator_name+0xee>
 800153c:	0802cf6c 	.word	0x0802cf6c

08001540 <d_unqualified_name>:
 8001540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001542:	68c3      	ldr	r3, [r0, #12]
 8001544:	781a      	ldrb	r2, [r3, #0]
 8001546:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800154a:	2909      	cmp	r1, #9
 800154c:	4604      	mov	r4, r0
 800154e:	d94f      	bls.n	80015f0 <d_unqualified_name+0xb0>
 8001550:	2a55      	cmp	r2, #85	@ 0x55
 8001552:	d056      	beq.n	8001602 <d_unqualified_name+0xc2>
 8001554:	d80f      	bhi.n	8001576 <d_unqualified_name+0x36>
 8001556:	2a44      	cmp	r2, #68	@ 0x44
 8001558:	d937      	bls.n	80015ca <d_unqualified_name+0x8a>
 800155a:	2a4c      	cmp	r2, #76	@ 0x4c
 800155c:	d109      	bne.n	8001572 <d_unqualified_name+0x32>
 800155e:	3301      	adds	r3, #1
 8001560:	60c3      	str	r3, [r0, #12]
 8001562:	f7ff f95f 	bl	8000824 <d_source_name>
 8001566:	4605      	mov	r5, r0
 8001568:	b118      	cbz	r0, 8001572 <d_unqualified_name+0x32>
 800156a:	4620      	mov	r0, r4
 800156c:	f7fe ff26 	bl	80003bc <d_discriminator>
 8001570:	b998      	cbnz	r0, 800159a <d_unqualified_name+0x5a>
 8001572:	2500      	movs	r5, #0
 8001574:	e043      	b.n	80015fe <d_unqualified_name+0xbe>
 8001576:	f1a2 0161 	sub.w	r1, r2, #97	@ 0x61
 800157a:	2919      	cmp	r1, #25
 800157c:	d8f9      	bhi.n	8001572 <d_unqualified_name+0x32>
 800157e:	2a6f      	cmp	r2, #111	@ 0x6f
 8001580:	6b05      	ldr	r5, [r0, #48]	@ 0x30
 8001582:	f000 80ee 	beq.w	8001762 <d_unqualified_name+0x222>
 8001586:	4620      	mov	r0, r4
 8001588:	f7ff ff5a 	bl	8001440 <d_operator_name>
 800158c:	6325      	str	r5, [r4, #48]	@ 0x30
 800158e:	4605      	mov	r5, r0
 8001590:	b118      	cbz	r0, 800159a <d_unqualified_name+0x5a>
 8001592:	7803      	ldrb	r3, [r0, #0]
 8001594:	2b32      	cmp	r3, #50	@ 0x32
 8001596:	f000 80ed 	beq.w	8001774 <d_unqualified_name+0x234>
 800159a:	68e3      	ldr	r3, [r4, #12]
 800159c:	781a      	ldrb	r2, [r3, #0]
 800159e:	2a42      	cmp	r2, #66	@ 0x42
 80015a0:	d12d      	bne.n	80015fe <d_unqualified_name+0xbe>
 80015a2:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80015a4:	3301      	adds	r3, #1
 80015a6:	60e3      	str	r3, [r4, #12]
 80015a8:	4620      	mov	r0, r4
 80015aa:	f7ff f93b 	bl	8000824 <d_source_name>
 80015ae:	462a      	mov	r2, r5
 80015b0:	4603      	mov	r3, r0
 80015b2:	214d      	movs	r1, #77	@ 0x4d
 80015b4:	4620      	mov	r0, r4
 80015b6:	f7fe fe2b 	bl	8000210 <d_make_comp>
 80015ba:	68e3      	ldr	r3, [r4, #12]
 80015bc:	781a      	ldrb	r2, [r3, #0]
 80015be:	2a42      	cmp	r2, #66	@ 0x42
 80015c0:	4605      	mov	r5, r0
 80015c2:	d0ef      	beq.n	80015a4 <d_unqualified_name+0x64>
 80015c4:	62a6      	str	r6, [r4, #40]	@ 0x28
 80015c6:	4628      	mov	r0, r5
 80015c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80015ca:	2a42      	cmp	r2, #66	@ 0x42
 80015cc:	d9d1      	bls.n	8001572 <d_unqualified_name+0x32>
 80015ce:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 80015d0:	2900      	cmp	r1, #0
 80015d2:	d055      	beq.n	8001680 <d_unqualified_name+0x140>
 80015d4:	7808      	ldrb	r0, [r1, #0]
 80015d6:	2800      	cmp	r0, #0
 80015d8:	d150      	bne.n	800167c <d_unqualified_name+0x13c>
 80015da:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80015dc:	6908      	ldr	r0, [r1, #16]
 80015de:	4402      	add	r2, r0
 80015e0:	62e2      	str	r2, [r4, #44]	@ 0x2c
 80015e2:	781a      	ldrb	r2, [r3, #0]
 80015e4:	2a43      	cmp	r2, #67	@ 0x43
 80015e6:	d061      	beq.n	80016ac <d_unqualified_name+0x16c>
 80015e8:	2a44      	cmp	r2, #68	@ 0x44
 80015ea:	d04b      	beq.n	8001684 <d_unqualified_name+0x144>
 80015ec:	2500      	movs	r5, #0
 80015ee:	e004      	b.n	80015fa <d_unqualified_name+0xba>
 80015f0:	f7ff f918 	bl	8000824 <d_source_name>
 80015f4:	68e3      	ldr	r3, [r4, #12]
 80015f6:	781a      	ldrb	r2, [r3, #0]
 80015f8:	4605      	mov	r5, r0
 80015fa:	2a42      	cmp	r2, #66	@ 0x42
 80015fc:	d0d1      	beq.n	80015a2 <d_unqualified_name+0x62>
 80015fe:	4628      	mov	r0, r5
 8001600:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001602:	785a      	ldrb	r2, [r3, #1]
 8001604:	2a6c      	cmp	r2, #108	@ 0x6c
 8001606:	f000 80d5 	beq.w	80017b4 <d_unqualified_name+0x274>
 800160a:	2a74      	cmp	r2, #116	@ 0x74
 800160c:	d1b1      	bne.n	8001572 <d_unqualified_name+0x32>
 800160e:	1c59      	adds	r1, r3, #1
 8001610:	60c1      	str	r1, [r0, #12]
 8001612:	785a      	ldrb	r2, [r3, #1]
 8001614:	2a74      	cmp	r2, #116	@ 0x74
 8001616:	d173      	bne.n	8001700 <d_unqualified_name+0x1c0>
 8001618:	1c99      	adds	r1, r3, #2
 800161a:	60c1      	str	r1, [r0, #12]
 800161c:	789b      	ldrb	r3, [r3, #2]
 800161e:	2b5f      	cmp	r3, #95	@ 0x5f
 8001620:	f000 8117 	beq.w	8001852 <d_unqualified_name+0x312>
 8001624:	2b6e      	cmp	r3, #110	@ 0x6e
 8001626:	d0a4      	beq.n	8001572 <d_unqualified_name+0x32>
 8001628:	f7fe fe6a 	bl	8000300 <d_number>
 800162c:	3001      	adds	r0, #1
 800162e:	f100 8124 	bmi.w	800187a <d_unqualified_name+0x33a>
 8001632:	68e1      	ldr	r1, [r4, #12]
 8001634:	780a      	ldrb	r2, [r1, #0]
 8001636:	2a5f      	cmp	r2, #95	@ 0x5f
 8001638:	d162      	bne.n	8001700 <d_unqualified_name+0x1c0>
 800163a:	e9d4 2505 	ldrd	r2, r5, [r4, #20]
 800163e:	1c4b      	adds	r3, r1, #1
 8001640:	42aa      	cmp	r2, r5
 8001642:	60e3      	str	r3, [r4, #12]
 8001644:	f280 8114 	bge.w	8001870 <d_unqualified_name+0x330>
 8001648:	6927      	ldr	r7, [r4, #16]
 800164a:	eb02 0c82 	add.w	ip, r2, r2, lsl #2
 800164e:	eb07 058c 	add.w	r5, r7, ip, lsl #2
 8001652:	3201      	adds	r2, #1
 8001654:	2600      	movs	r6, #0
 8001656:	e9c5 6601 	strd	r6, r6, [r5, #4]
 800165a:	6162      	str	r2, [r4, #20]
 800165c:	2249      	movs	r2, #73	@ 0x49
 800165e:	f807 202c 	strb.w	r2, [r7, ip, lsl #2]
 8001662:	60e8      	str	r0, [r5, #12]
 8001664:	e9d4 2008 	ldrd	r2, r0, [r4, #32]
 8001668:	4282      	cmp	r2, r0
 800166a:	f280 80fe 	bge.w	800186a <d_unqualified_name+0x32a>
 800166e:	69e0      	ldr	r0, [r4, #28]
 8001670:	f840 5022 	str.w	r5, [r0, r2, lsl #2]
 8001674:	3201      	adds	r2, #1
 8001676:	6222      	str	r2, [r4, #32]
 8001678:	784a      	ldrb	r2, [r1, #1]
 800167a:	e7be      	b.n	80015fa <d_unqualified_name+0xba>
 800167c:	2818      	cmp	r0, #24
 800167e:	d0ac      	beq.n	80015da <d_unqualified_name+0x9a>
 8001680:	2a43      	cmp	r2, #67	@ 0x43
 8001682:	d013      	beq.n	80016ac <d_unqualified_name+0x16c>
 8001684:	785a      	ldrb	r2, [r3, #1]
 8001686:	3a30      	subs	r2, #48	@ 0x30
 8001688:	2a05      	cmp	r2, #5
 800168a:	f63f af72 	bhi.w	8001572 <d_unqualified_name+0x32>
 800168e:	a001      	add	r0, pc, #4	@ (adr r0, 8001694 <d_unqualified_name+0x154>)
 8001690:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 8001694:	0800175d 	.word	0x0800175d
 8001698:	08001757 	.word	0x08001757
 800169c:	08001705 	.word	0x08001705
 80016a0:	08001573 	.word	0x08001573
 80016a4:	08001751 	.word	0x08001751
 80016a8:	0800174b 	.word	0x0800174b
 80016ac:	785a      	ldrb	r2, [r3, #1]
 80016ae:	2a49      	cmp	r2, #73	@ 0x49
 80016b0:	f000 80ba 	beq.w	8001828 <d_unqualified_name+0x2e8>
 80016b4:	f1a2 0031 	sub.w	r0, r2, #49	@ 0x31
 80016b8:	2804      	cmp	r0, #4
 80016ba:	f63f af5a 	bhi.w	8001572 <d_unqualified_name+0x32>
 80016be:	3a30      	subs	r2, #48	@ 0x30
 80016c0:	3302      	adds	r3, #2
 80016c2:	b2d6      	uxtb	r6, r2
 80016c4:	60e3      	str	r3, [r4, #12]
 80016c6:	e9d4 2005 	ldrd	r2, r0, [r4, #20]
 80016ca:	4282      	cmp	r2, r0
 80016cc:	f280 80c3 	bge.w	8001856 <d_unqualified_name+0x316>
 80016d0:	f8d4 c010 	ldr.w	ip, [r4, #16]
 80016d4:	eb02 0082 	add.w	r0, r2, r2, lsl #2
 80016d8:	eb0c 0580 	add.w	r5, ip, r0, lsl #2
 80016dc:	3201      	adds	r2, #1
 80016de:	2700      	movs	r7, #0
 80016e0:	e9c5 7701 	strd	r7, r7, [r5, #4]
 80016e4:	0080      	lsls	r0, r0, #2
 80016e6:	6162      	str	r2, [r4, #20]
 80016e8:	2900      	cmp	r1, #0
 80016ea:	f000 80b7 	beq.w	800185c <d_unqualified_name+0x31c>
 80016ee:	e9c5 7701 	strd	r7, r7, [r5, #4]
 80016f2:	2207      	movs	r2, #7
 80016f4:	f80c 2000 	strb.w	r2, [ip, r0]
 80016f8:	732e      	strb	r6, [r5, #12]
 80016fa:	6129      	str	r1, [r5, #16]
 80016fc:	781a      	ldrb	r2, [r3, #0]
 80016fe:	e77c      	b.n	80015fa <d_unqualified_name+0xba>
 8001700:	460b      	mov	r3, r1
 8001702:	e773      	b.n	80015ec <d_unqualified_name+0xac>
 8001704:	f04f 0e03 	mov.w	lr, #3
 8001708:	e9d4 2005 	ldrd	r2, r0, [r4, #20]
 800170c:	1c9f      	adds	r7, r3, #2
 800170e:	4282      	cmp	r2, r0
 8001710:	60e7      	str	r7, [r4, #12]
 8001712:	f280 809a 	bge.w	800184a <d_unqualified_name+0x30a>
 8001716:	f8d4 c010 	ldr.w	ip, [r4, #16]
 800171a:	eb02 0082 	add.w	r0, r2, r2, lsl #2
 800171e:	eb0c 0580 	add.w	r5, ip, r0, lsl #2
 8001722:	3201      	adds	r2, #1
 8001724:	2600      	movs	r6, #0
 8001726:	e9c5 6601 	strd	r6, r6, [r5, #4]
 800172a:	0080      	lsls	r0, r0, #2
 800172c:	6162      	str	r2, [r4, #20]
 800172e:	2900      	cmp	r1, #0
 8001730:	f000 808b 	beq.w	800184a <d_unqualified_name+0x30a>
 8001734:	e9c5 6601 	strd	r6, r6, [r5, #4]
 8001738:	2208      	movs	r2, #8
 800173a:	f80c 2000 	strb.w	r2, [ip, r0]
 800173e:	f885 e00c 	strb.w	lr, [r5, #12]
 8001742:	6129      	str	r1, [r5, #16]
 8001744:	789a      	ldrb	r2, [r3, #2]
 8001746:	463b      	mov	r3, r7
 8001748:	e757      	b.n	80015fa <d_unqualified_name+0xba>
 800174a:	f04f 0e05 	mov.w	lr, #5
 800174e:	e7db      	b.n	8001708 <d_unqualified_name+0x1c8>
 8001750:	f04f 0e04 	mov.w	lr, #4
 8001754:	e7d8      	b.n	8001708 <d_unqualified_name+0x1c8>
 8001756:	f04f 0e02 	mov.w	lr, #2
 800175a:	e7d5      	b.n	8001708 <d_unqualified_name+0x1c8>
 800175c:	f04f 0e01 	mov.w	lr, #1
 8001760:	e7d2      	b.n	8001708 <d_unqualified_name+0x1c8>
 8001762:	785a      	ldrb	r2, [r3, #1]
 8001764:	2a6e      	cmp	r2, #110	@ 0x6e
 8001766:	f47f af0e 	bne.w	8001586 <d_unqualified_name+0x46>
 800176a:	3302      	adds	r3, #2
 800176c:	2200      	movs	r2, #0
 800176e:	60c3      	str	r3, [r0, #12]
 8001770:	6302      	str	r2, [r0, #48]	@ 0x30
 8001772:	e708      	b.n	8001586 <d_unqualified_name+0x46>
 8001774:	68c2      	ldr	r2, [r0, #12]
 8001776:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8001778:	6891      	ldr	r1, [r2, #8]
 800177a:	6812      	ldr	r2, [r2, #0]
 800177c:	3307      	adds	r3, #7
 800177e:	440b      	add	r3, r1
 8001780:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8001782:	7813      	ldrb	r3, [r2, #0]
 8001784:	2b6c      	cmp	r3, #108	@ 0x6c
 8001786:	f47f af08 	bne.w	800159a <d_unqualified_name+0x5a>
 800178a:	7853      	ldrb	r3, [r2, #1]
 800178c:	2b69      	cmp	r3, #105	@ 0x69
 800178e:	f47f af04 	bne.w	800159a <d_unqualified_name+0x5a>
 8001792:	7893      	ldrb	r3, [r2, #2]
 8001794:	2b00      	cmp	r3, #0
 8001796:	f47f af00 	bne.w	800159a <d_unqualified_name+0x5a>
 800179a:	4620      	mov	r0, r4
 800179c:	f7ff f842 	bl	8000824 <d_source_name>
 80017a0:	462a      	mov	r2, r5
 80017a2:	4603      	mov	r3, r0
 80017a4:	2137      	movs	r1, #55	@ 0x37
 80017a6:	4620      	mov	r0, r4
 80017a8:	f7fe fd32 	bl	8000210 <d_make_comp>
 80017ac:	68e3      	ldr	r3, [r4, #12]
 80017ae:	4605      	mov	r5, r0
 80017b0:	781a      	ldrb	r2, [r3, #0]
 80017b2:	e722      	b.n	80015fa <d_unqualified_name+0xba>
 80017b4:	1c59      	adds	r1, r3, #1
 80017b6:	60c1      	str	r1, [r0, #12]
 80017b8:	785a      	ldrb	r2, [r3, #1]
 80017ba:	2a6c      	cmp	r2, #108	@ 0x6c
 80017bc:	d1a0      	bne.n	8001700 <d_unqualified_name+0x1c0>
 80017be:	3302      	adds	r3, #2
 80017c0:	60c3      	str	r3, [r0, #12]
 80017c2:	f7ff fd93 	bl	80012ec <d_parmlist>
 80017c6:	68e3      	ldr	r3, [r4, #12]
 80017c8:	4606      	mov	r6, r0
 80017ca:	2800      	cmp	r0, #0
 80017cc:	d056      	beq.n	800187c <d_unqualified_name+0x33c>
 80017ce:	781a      	ldrb	r2, [r3, #0]
 80017d0:	2a45      	cmp	r2, #69	@ 0x45
 80017d2:	f47f af0b 	bne.w	80015ec <d_unqualified_name+0xac>
 80017d6:	1c59      	adds	r1, r3, #1
 80017d8:	60e1      	str	r1, [r4, #12]
 80017da:	785b      	ldrb	r3, [r3, #1]
 80017dc:	2b5f      	cmp	r3, #95	@ 0x5f
 80017de:	d04a      	beq.n	8001876 <d_unqualified_name+0x336>
 80017e0:	2b6e      	cmp	r3, #110	@ 0x6e
 80017e2:	f43f aec6 	beq.w	8001572 <d_unqualified_name+0x32>
 80017e6:	4620      	mov	r0, r4
 80017e8:	f7fe fd8a 	bl	8000300 <d_number>
 80017ec:	3001      	adds	r0, #1
 80017ee:	d444      	bmi.n	800187a <d_unqualified_name+0x33a>
 80017f0:	68e1      	ldr	r1, [r4, #12]
 80017f2:	780a      	ldrb	r2, [r1, #0]
 80017f4:	2a5f      	cmp	r2, #95	@ 0x5f
 80017f6:	d183      	bne.n	8001700 <d_unqualified_name+0x1c0>
 80017f8:	e9d4 2505 	ldrd	r2, r5, [r4, #20]
 80017fc:	1c4b      	adds	r3, r1, #1
 80017fe:	42aa      	cmp	r2, r5
 8001800:	60e3      	str	r3, [r4, #12]
 8001802:	da35      	bge.n	8001870 <d_unqualified_name+0x330>
 8001804:	6927      	ldr	r7, [r4, #16]
 8001806:	eb02 0c82 	add.w	ip, r2, r2, lsl #2
 800180a:	eb07 058c 	add.w	r5, r7, ip, lsl #2
 800180e:	3201      	adds	r2, #1
 8001810:	f04f 0e00 	mov.w	lr, #0
 8001814:	e9c5 ee01 	strd	lr, lr, [r5, #4]
 8001818:	6162      	str	r2, [r4, #20]
 800181a:	2247      	movs	r2, #71	@ 0x47
 800181c:	f807 202c 	strb.w	r2, [r7, ip, lsl #2]
 8001820:	e9c5 6003 	strd	r6, r0, [r5, #12]
 8001824:	784a      	ldrb	r2, [r1, #1]
 8001826:	e6e8      	b.n	80015fa <d_unqualified_name+0xba>
 8001828:	1c59      	adds	r1, r3, #1
 800182a:	60e1      	str	r1, [r4, #12]
 800182c:	789a      	ldrb	r2, [r3, #2]
 800182e:	f1a2 0031 	sub.w	r0, r2, #49	@ 0x31
 8001832:	2804      	cmp	r0, #4
 8001834:	d815      	bhi.n	8001862 <d_unqualified_name+0x322>
 8001836:	3303      	adds	r3, #3
 8001838:	3a30      	subs	r2, #48	@ 0x30
 800183a:	60e3      	str	r3, [r4, #12]
 800183c:	4620      	mov	r0, r4
 800183e:	b2d6      	uxtb	r6, r2
 8001840:	f7ff f922 	bl	8000a88 <d_type>
 8001844:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8001846:	68e3      	ldr	r3, [r4, #12]
 8001848:	e73d      	b.n	80016c6 <d_unqualified_name+0x186>
 800184a:	789a      	ldrb	r2, [r3, #2]
 800184c:	2500      	movs	r5, #0
 800184e:	463b      	mov	r3, r7
 8001850:	e6d3      	b.n	80015fa <d_unqualified_name+0xba>
 8001852:	2000      	movs	r0, #0
 8001854:	e6f1      	b.n	800163a <d_unqualified_name+0xfa>
 8001856:	781a      	ldrb	r2, [r3, #0]
 8001858:	2500      	movs	r5, #0
 800185a:	e6ce      	b.n	80015fa <d_unqualified_name+0xba>
 800185c:	781a      	ldrb	r2, [r3, #0]
 800185e:	460d      	mov	r5, r1
 8001860:	e6cb      	b.n	80015fa <d_unqualified_name+0xba>
 8001862:	785a      	ldrb	r2, [r3, #1]
 8001864:	2500      	movs	r5, #0
 8001866:	460b      	mov	r3, r1
 8001868:	e6c7      	b.n	80015fa <d_unqualified_name+0xba>
 800186a:	784a      	ldrb	r2, [r1, #1]
 800186c:	4635      	mov	r5, r6
 800186e:	e6c4      	b.n	80015fa <d_unqualified_name+0xba>
 8001870:	784a      	ldrb	r2, [r1, #1]
 8001872:	2500      	movs	r5, #0
 8001874:	e6c1      	b.n	80015fa <d_unqualified_name+0xba>
 8001876:	2000      	movs	r0, #0
 8001878:	e7be      	b.n	80017f8 <d_unqualified_name+0x2b8>
 800187a:	68e3      	ldr	r3, [r4, #12]
 800187c:	781a      	ldrb	r2, [r3, #0]
 800187e:	2500      	movs	r5, #0
 8001880:	e6bb      	b.n	80015fa <d_unqualified_name+0xba>
 8001882:	bf00      	nop

08001884 <d_expr_primary>:
 8001884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001886:	68c2      	ldr	r2, [r0, #12]
 8001888:	7813      	ldrb	r3, [r2, #0]
 800188a:	2b4c      	cmp	r3, #76	@ 0x4c
 800188c:	d132      	bne.n	80018f4 <d_expr_primary+0x70>
 800188e:	1c53      	adds	r3, r2, #1
 8001890:	60c3      	str	r3, [r0, #12]
 8001892:	7851      	ldrb	r1, [r2, #1]
 8001894:	295f      	cmp	r1, #95	@ 0x5f
 8001896:	4604      	mov	r4, r0
 8001898:	d04a      	beq.n	8001930 <d_expr_primary+0xac>
 800189a:	295a      	cmp	r1, #90	@ 0x5a
 800189c:	d113      	bne.n	80018c6 <d_expr_primary+0x42>
 800189e:	1c5a      	adds	r2, r3, #1
 80018a0:	60e2      	str	r2, [r4, #12]
 80018a2:	785b      	ldrb	r3, [r3, #1]
 80018a4:	2b47      	cmp	r3, #71	@ 0x47
 80018a6:	d03c      	beq.n	8001922 <d_expr_primary+0x9e>
 80018a8:	2b54      	cmp	r3, #84	@ 0x54
 80018aa:	d03a      	beq.n	8001922 <d_expr_primary+0x9e>
 80018ac:	2100      	movs	r1, #0
 80018ae:	4620      	mov	r0, r4
 80018b0:	f001 f8c6 	bl	8002a40 <d_encoding.part.0>
 80018b4:	68e3      	ldr	r3, [r4, #12]
 80018b6:	781a      	ldrb	r2, [r3, #0]
 80018b8:	4606      	mov	r6, r0
 80018ba:	2a45      	cmp	r2, #69	@ 0x45
 80018bc:	d11a      	bne.n	80018f4 <d_expr_primary+0x70>
 80018be:	3301      	adds	r3, #1
 80018c0:	60e3      	str	r3, [r4, #12]
 80018c2:	4630      	mov	r0, r6
 80018c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80018c6:	f7ff f8df 	bl	8000a88 <d_type>
 80018ca:	4606      	mov	r6, r0
 80018cc:	b190      	cbz	r0, 80018f4 <d_expr_primary+0x70>
 80018ce:	7803      	ldrb	r3, [r0, #0]
 80018d0:	68e7      	ldr	r7, [r4, #12]
 80018d2:	2b27      	cmp	r3, #39	@ 0x27
 80018d4:	d011      	beq.n	80018fa <d_expr_primary+0x76>
 80018d6:	783d      	ldrb	r5, [r7, #0]
 80018d8:	2d6e      	cmp	r5, #110	@ 0x6e
 80018da:	d053      	beq.n	8001984 <d_expr_primary+0x100>
 80018dc:	213d      	movs	r1, #61	@ 0x3d
 80018de:	2d45      	cmp	r5, #69	@ 0x45
 80018e0:	d058      	beq.n	8001994 <d_expr_primary+0x110>
 80018e2:	463b      	mov	r3, r7
 80018e4:	e003      	b.n	80018ee <d_expr_primary+0x6a>
 80018e6:	60e3      	str	r3, [r4, #12]
 80018e8:	781d      	ldrb	r5, [r3, #0]
 80018ea:	2d45      	cmp	r5, #69	@ 0x45
 80018ec:	d027      	beq.n	800193e <d_expr_primary+0xba>
 80018ee:	3301      	adds	r3, #1
 80018f0:	2d00      	cmp	r5, #0
 80018f2:	d1f8      	bne.n	80018e6 <d_expr_primary+0x62>
 80018f4:	2600      	movs	r6, #0
 80018f6:	4630      	mov	r0, r6
 80018f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80018fa:	68c3      	ldr	r3, [r0, #12]
 80018fc:	7c1a      	ldrb	r2, [r3, #16]
 80018fe:	b11a      	cbz	r2, 8001908 <d_expr_primary+0x84>
 8001900:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8001902:	6859      	ldr	r1, [r3, #4]
 8001904:	1a52      	subs	r2, r2, r1
 8001906:	62e2      	str	r2, [r4, #44]	@ 0x2c
 8001908:	4925      	ldr	r1, [pc, #148]	@ (80019a0 <d_expr_primary+0x11c>)
 800190a:	6818      	ldr	r0, [r3, #0]
 800190c:	f004 fc68 	bl	80061e0 <strcmp>
 8001910:	783d      	ldrb	r5, [r7, #0]
 8001912:	2800      	cmp	r0, #0
 8001914:	d1e0      	bne.n	80018d8 <d_expr_primary+0x54>
 8001916:	2d45      	cmp	r5, #69	@ 0x45
 8001918:	d03e      	beq.n	8001998 <d_expr_primary+0x114>
 800191a:	2d6e      	cmp	r5, #110	@ 0x6e
 800191c:	d032      	beq.n	8001984 <d_expr_primary+0x100>
 800191e:	213d      	movs	r1, #61	@ 0x3d
 8001920:	e7df      	b.n	80018e2 <d_expr_primary+0x5e>
 8001922:	4620      	mov	r0, r4
 8001924:	f000 fc9c 	bl	8002260 <d_special_name>
 8001928:	68e3      	ldr	r3, [r4, #12]
 800192a:	4606      	mov	r6, r0
 800192c:	781a      	ldrb	r2, [r3, #0]
 800192e:	e7c4      	b.n	80018ba <d_expr_primary+0x36>
 8001930:	1c93      	adds	r3, r2, #2
 8001932:	60c3      	str	r3, [r0, #12]
 8001934:	7892      	ldrb	r2, [r2, #2]
 8001936:	2a5a      	cmp	r2, #90	@ 0x5a
 8001938:	d0b1      	beq.n	800189e <d_expr_primary+0x1a>
 800193a:	2600      	movs	r6, #0
 800193c:	e7bd      	b.n	80018ba <d_expr_primary+0x36>
 800193e:	1bdd      	subs	r5, r3, r7
 8001940:	e9d4 2305 	ldrd	r2, r3, [r4, #20]
 8001944:	429a      	cmp	r2, r3
 8001946:	da23      	bge.n	8001990 <d_expr_primary+0x10c>
 8001948:	f8d4 e010 	ldr.w	lr, [r4, #16]
 800194c:	eb02 0082 	add.w	r0, r2, r2, lsl #2
 8001950:	eb0e 0380 	add.w	r3, lr, r0, lsl #2
 8001954:	3201      	adds	r2, #1
 8001956:	ea4f 0c80 	mov.w	ip, r0, lsl #2
 800195a:	2000      	movs	r0, #0
 800195c:	e9c3 0001 	strd	r0, r0, [r3, #4]
 8001960:	6162      	str	r2, [r4, #20]
 8001962:	b1af      	cbz	r7, 8001990 <d_expr_primary+0x10c>
 8001964:	4285      	cmp	r5, r0
 8001966:	dd13      	ble.n	8001990 <d_expr_primary+0x10c>
 8001968:	e9c3 0001 	strd	r0, r0, [r3, #4]
 800196c:	f80e 000c 	strb.w	r0, [lr, ip]
 8001970:	e9c3 7503 	strd	r7, r5, [r3, #12]
 8001974:	4632      	mov	r2, r6
 8001976:	4620      	mov	r0, r4
 8001978:	f7fe fc4a 	bl	8000210 <d_make_comp>
 800197c:	68e3      	ldr	r3, [r4, #12]
 800197e:	4606      	mov	r6, r0
 8001980:	781a      	ldrb	r2, [r3, #0]
 8001982:	e79a      	b.n	80018ba <d_expr_primary+0x36>
 8001984:	1c7b      	adds	r3, r7, #1
 8001986:	60e3      	str	r3, [r4, #12]
 8001988:	787d      	ldrb	r5, [r7, #1]
 800198a:	213e      	movs	r1, #62	@ 0x3e
 800198c:	461f      	mov	r7, r3
 800198e:	e7a6      	b.n	80018de <d_expr_primary+0x5a>
 8001990:	2300      	movs	r3, #0
 8001992:	e7ef      	b.n	8001974 <d_expr_primary+0xf0>
 8001994:	2500      	movs	r5, #0
 8001996:	e7d3      	b.n	8001940 <d_expr_primary+0xbc>
 8001998:	3701      	adds	r7, #1
 800199a:	60e7      	str	r7, [r4, #12]
 800199c:	e7ab      	b.n	80018f6 <d_expr_primary+0x72>
 800199e:	bf00      	nop
 80019a0:	080af0e8 	.word	0x080af0e8

080019a4 <d_template_arg>:
 80019a4:	b538      	push	{r3, r4, r5, lr}
 80019a6:	68c2      	ldr	r2, [r0, #12]
 80019a8:	7813      	ldrb	r3, [r2, #0]
 80019aa:	2b4c      	cmp	r3, #76	@ 0x4c
 80019ac:	d01f      	beq.n	80019ee <d_template_arg+0x4a>
 80019ae:	4604      	mov	r4, r0
 80019b0:	d807      	bhi.n	80019c2 <d_template_arg+0x1e>
 80019b2:	3b49      	subs	r3, #73	@ 0x49
 80019b4:	2b01      	cmp	r3, #1
 80019b6:	d815      	bhi.n	80019e4 <d_template_arg+0x40>
 80019b8:	3201      	adds	r2, #1
 80019ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80019be:	60c2      	str	r2, [r0, #12]
 80019c0:	e01a      	b.n	80019f8 <d_template_args_1>
 80019c2:	2b58      	cmp	r3, #88	@ 0x58
 80019c4:	d10e      	bne.n	80019e4 <d_template_arg+0x40>
 80019c6:	3201      	adds	r2, #1
 80019c8:	2301      	movs	r3, #1
 80019ca:	6b05      	ldr	r5, [r0, #48]	@ 0x30
 80019cc:	60c2      	str	r2, [r0, #12]
 80019ce:	6303      	str	r3, [r0, #48]	@ 0x30
 80019d0:	f000 f8e2 	bl	8001b98 <d_expression_1>
 80019d4:	68e3      	ldr	r3, [r4, #12]
 80019d6:	6325      	str	r5, [r4, #48]	@ 0x30
 80019d8:	781a      	ldrb	r2, [r3, #0]
 80019da:	2a45      	cmp	r2, #69	@ 0x45
 80019dc:	d10a      	bne.n	80019f4 <d_template_arg+0x50>
 80019de:	3301      	adds	r3, #1
 80019e0:	60e3      	str	r3, [r4, #12]
 80019e2:	bd38      	pop	{r3, r4, r5, pc}
 80019e4:	4620      	mov	r0, r4
 80019e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80019ea:	f7ff b84d 	b.w	8000a88 <d_type>
 80019ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80019f2:	e747      	b.n	8001884 <d_expr_primary>
 80019f4:	2000      	movs	r0, #0
 80019f6:	bd38      	pop	{r3, r4, r5, pc}

080019f8 <d_template_args_1>:
 80019f8:	b570      	push	{r4, r5, r6, lr}
 80019fa:	68c3      	ldr	r3, [r0, #12]
 80019fc:	6a86      	ldr	r6, [r0, #40]	@ 0x28
 80019fe:	781a      	ldrb	r2, [r3, #0]
 8001a00:	2a45      	cmp	r2, #69	@ 0x45
 8001a02:	b082      	sub	sp, #8
 8001a04:	4604      	mov	r4, r0
 8001a06:	d01f      	beq.n	8001a48 <d_template_args_1+0x50>
 8001a08:	2300      	movs	r3, #0
 8001a0a:	9301      	str	r3, [sp, #4]
 8001a0c:	ad01      	add	r5, sp, #4
 8001a0e:	e009      	b.n	8001a24 <d_template_args_1+0x2c>
 8001a10:	f7fe fbfe 	bl	8000210 <d_make_comp>
 8001a14:	6028      	str	r0, [r5, #0]
 8001a16:	f100 0510 	add.w	r5, r0, #16
 8001a1a:	b160      	cbz	r0, 8001a36 <d_template_args_1+0x3e>
 8001a1c:	68e3      	ldr	r3, [r4, #12]
 8001a1e:	781a      	ldrb	r2, [r3, #0]
 8001a20:	2a45      	cmp	r2, #69	@ 0x45
 8001a22:	d00b      	beq.n	8001a3c <d_template_args_1+0x44>
 8001a24:	4620      	mov	r0, r4
 8001a26:	f7ff ffbd 	bl	80019a4 <d_template_arg>
 8001a2a:	4602      	mov	r2, r0
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	212f      	movs	r1, #47	@ 0x2f
 8001a30:	4620      	mov	r0, r4
 8001a32:	2a00      	cmp	r2, #0
 8001a34:	d1ec      	bne.n	8001a10 <d_template_args_1+0x18>
 8001a36:	2000      	movs	r0, #0
 8001a38:	b002      	add	sp, #8
 8001a3a:	bd70      	pop	{r4, r5, r6, pc}
 8001a3c:	9801      	ldr	r0, [sp, #4]
 8001a3e:	62a6      	str	r6, [r4, #40]	@ 0x28
 8001a40:	3301      	adds	r3, #1
 8001a42:	60e3      	str	r3, [r4, #12]
 8001a44:	b002      	add	sp, #8
 8001a46:	bd70      	pop	{r4, r5, r6, pc}
 8001a48:	1c5a      	adds	r2, r3, #1
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	60c2      	str	r2, [r0, #12]
 8001a4e:	212f      	movs	r1, #47	@ 0x2f
 8001a50:	461a      	mov	r2, r3
 8001a52:	b002      	add	sp, #8
 8001a54:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8001a58:	f7fe bbda 	b.w	8000210 <d_make_comp>

08001a5c <d_prefix>:
 8001a5c:	b570      	push	{r4, r5, r6, lr}
 8001a5e:	68c2      	ldr	r2, [r0, #12]
 8001a60:	7813      	ldrb	r3, [r2, #0]
 8001a62:	b3a3      	cbz	r3, 8001ace <d_prefix+0x72>
 8001a64:	4604      	mov	r4, r0
 8001a66:	460e      	mov	r6, r1
 8001a68:	2500      	movs	r5, #0
 8001a6a:	3b30      	subs	r3, #48	@ 0x30
 8001a6c:	2b4a      	cmp	r3, #74	@ 0x4a
 8001a6e:	d82e      	bhi.n	8001ace <d_prefix+0x72>
 8001a70:	e8df f003 	tbb	[pc, r3]
 8001a74:	30303030 	.word	0x30303030
 8001a78:	30303030 	.word	0x30303030
 8001a7c:	2d2d3030 	.word	0x2d2d3030
 8001a80:	2d2d2d2d 	.word	0x2d2d2d2d
 8001a84:	302d2d2d 	.word	0x302d2d2d
 8001a88:	2d2d2e7e 	.word	0x2d2d2e7e
 8001a8c:	2d2d742d 	.word	0x2d2d742d
 8001a90:	2d2d2630 	.word	0x2d2d2630
 8001a94:	632d2d2d 	.word	0x632d2d2d
 8001a98:	2d2d303c 	.word	0x2d2d303c
 8001a9c:	2d2d2d2d 	.word	0x2d2d2d2d
 8001aa0:	2d2d2d2d 	.word	0x2d2d2d2d
 8001aa4:	3030302d 	.word	0x3030302d
 8001aa8:	30303030 	.word	0x30303030
 8001aac:	30303030 	.word	0x30303030
 8001ab0:	30303030 	.word	0x30303030
 8001ab4:	30303030 	.word	0x30303030
 8001ab8:	30303030 	.word	0x30303030
 8001abc:	3030      	.short	0x3030
 8001abe:	30          	.byte	0x30
 8001abf:	00          	.byte	0x00
 8001ac0:	b12d      	cbz	r5, 8001ace <d_prefix+0x72>
 8001ac2:	1c51      	adds	r1, r2, #1
 8001ac4:	60e1      	str	r1, [r4, #12]
 8001ac6:	7853      	ldrb	r3, [r2, #1]
 8001ac8:	460a      	mov	r2, r1
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d1cd      	bne.n	8001a6a <d_prefix+0xe>
 8001ace:	2500      	movs	r5, #0
 8001ad0:	4628      	mov	r0, r5
 8001ad2:	bd70      	pop	{r4, r5, r6, pc}
 8001ad4:	4620      	mov	r0, r4
 8001ad6:	f7ff fd33 	bl	8001540 <d_unqualified_name>
 8001ada:	4603      	mov	r3, r0
 8001adc:	b15d      	cbz	r5, 8001af6 <d_prefix+0x9a>
 8001ade:	462a      	mov	r2, r5
 8001ae0:	2101      	movs	r1, #1
 8001ae2:	4620      	mov	r0, r4
 8001ae4:	f7fe fb94 	bl	8000210 <d_make_comp>
 8001ae8:	4605      	mov	r5, r0
 8001aea:	e005      	b.n	8001af8 <d_prefix+0x9c>
 8001aec:	4620      	mov	r0, r4
 8001aee:	f7fe fe2f 	bl	8000750 <d_template_param>
 8001af2:	4603      	mov	r3, r0
 8001af4:	b9d5      	cbnz	r5, 8001b2c <d_prefix+0xd0>
 8001af6:	461d      	mov	r5, r3
 8001af8:	68e2      	ldr	r2, [r4, #12]
 8001afa:	7813      	ldrb	r3, [r2, #0]
 8001afc:	2b45      	cmp	r3, #69	@ 0x45
 8001afe:	d0e7      	beq.n	8001ad0 <d_prefix+0x74>
 8001b00:	2e00      	cmp	r6, #0
 8001b02:	d0e2      	beq.n	8001aca <d_prefix+0x6e>
 8001b04:	2d00      	cmp	r5, #0
 8001b06:	d0e2      	beq.n	8001ace <d_prefix+0x72>
 8001b08:	e9d4 3108 	ldrd	r3, r1, [r4, #32]
 8001b0c:	428b      	cmp	r3, r1
 8001b0e:	dade      	bge.n	8001ace <d_prefix+0x72>
 8001b10:	69e1      	ldr	r1, [r4, #28]
 8001b12:	f841 5023 	str.w	r5, [r1, r3, lsl #2]
 8001b16:	3301      	adds	r3, #1
 8001b18:	6223      	str	r3, [r4, #32]
 8001b1a:	7813      	ldrb	r3, [r2, #0]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d1a4      	bne.n	8001a6a <d_prefix+0xe>
 8001b20:	e7d5      	b.n	8001ace <d_prefix+0x72>
 8001b22:	f7fe ffb1 	bl	8000a88 <d_type>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2d00      	cmp	r5, #0
 8001b2a:	d0e4      	beq.n	8001af6 <d_prefix+0x9a>
 8001b2c:	2101      	movs	r1, #1
 8001b2e:	462a      	mov	r2, r5
 8001b30:	4620      	mov	r0, r4
 8001b32:	f7fe fb6d 	bl	8000210 <d_make_comp>
 8001b36:	4605      	mov	r5, r0
 8001b38:	e7de      	b.n	8001af8 <d_prefix+0x9c>
 8001b3a:	2101      	movs	r1, #1
 8001b3c:	4620      	mov	r0, r4
 8001b3e:	f7fe fedf 	bl	8000900 <d_substitution>
 8001b42:	4603      	mov	r3, r0
 8001b44:	b305      	cbz	r5, 8001b88 <d_prefix+0x12c>
 8001b46:	462a      	mov	r2, r5
 8001b48:	2101      	movs	r1, #1
 8001b4a:	4620      	mov	r0, r4
 8001b4c:	f7fe fb60 	bl	8000210 <d_make_comp>
 8001b50:	68e2      	ldr	r2, [r4, #12]
 8001b52:	7813      	ldrb	r3, [r2, #0]
 8001b54:	4605      	mov	r5, r0
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d187      	bne.n	8001a6a <d_prefix+0xe>
 8001b5a:	e7b8      	b.n	8001ace <d_prefix+0x72>
 8001b5c:	2d00      	cmp	r5, #0
 8001b5e:	d0b6      	beq.n	8001ace <d_prefix+0x72>
 8001b60:	3201      	adds	r2, #1
 8001b62:	60e2      	str	r2, [r4, #12]
 8001b64:	4620      	mov	r0, r4
 8001b66:	f7ff ff47 	bl	80019f8 <d_template_args_1>
 8001b6a:	2104      	movs	r1, #4
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	e7de      	b.n	8001b2e <d_prefix+0xd2>
 8001b70:	7853      	ldrb	r3, [r2, #1]
 8001b72:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8001b76:	2b54      	cmp	r3, #84	@ 0x54
 8001b78:	4620      	mov	r0, r4
 8001b7a:	d0d2      	beq.n	8001b22 <d_prefix+0xc6>
 8001b7c:	f7ff fce0 	bl	8001540 <d_unqualified_name>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2d00      	cmp	r5, #0
 8001b84:	d1d2      	bne.n	8001b2c <d_prefix+0xd0>
 8001b86:	e7b6      	b.n	8001af6 <d_prefix+0x9a>
 8001b88:	68e2      	ldr	r2, [r4, #12]
 8001b8a:	461d      	mov	r5, r3
 8001b8c:	7813      	ldrb	r3, [r2, #0]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	f47f af6b 	bne.w	8001a6a <d_prefix+0xe>
 8001b94:	e79b      	b.n	8001ace <d_prefix+0x72>
 8001b96:	bf00      	nop

08001b98 <d_expression_1>:
 8001b98:	68c2      	ldr	r2, [r0, #12]
 8001b9a:	7813      	ldrb	r3, [r2, #0]
 8001b9c:	2b4c      	cmp	r3, #76	@ 0x4c
 8001b9e:	f000 80cd 	beq.w	8001d3c <d_expression_1+0x1a4>
 8001ba2:	2b54      	cmp	r3, #84	@ 0x54
 8001ba4:	f000 80cb 	beq.w	8001d3e <d_expression_1+0x1a6>
 8001ba8:	2b73      	cmp	r3, #115	@ 0x73
 8001baa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001bae:	4604      	mov	r4, r0
 8001bb0:	d024      	beq.n	8001bfc <d_expression_1+0x64>
 8001bb2:	2b66      	cmp	r3, #102	@ 0x66
 8001bb4:	d055      	beq.n	8001c62 <d_expression_1+0xca>
 8001bb6:	f1a3 0130 	sub.w	r1, r3, #48	@ 0x30
 8001bba:	2909      	cmp	r1, #9
 8001bbc:	d944      	bls.n	8001c48 <d_expression_1+0xb0>
 8001bbe:	2b6f      	cmp	r3, #111	@ 0x6f
 8001bc0:	d03d      	beq.n	8001c3e <d_expression_1+0xa6>
 8001bc2:	2b69      	cmp	r3, #105	@ 0x69
 8001bc4:	f040 8248 	bne.w	8002058 <d_expression_1+0x4c0>
 8001bc8:	7853      	ldrb	r3, [r2, #1]
 8001bca:	2b6c      	cmp	r3, #108	@ 0x6c
 8001bcc:	d11d      	bne.n	8001c0a <d_expression_1+0x72>
 8001bce:	1c93      	adds	r3, r2, #2
 8001bd0:	60c3      	str	r3, [r0, #12]
 8001bd2:	2500      	movs	r5, #0
 8001bd4:	781a      	ldrb	r2, [r3, #0]
 8001bd6:	2a00      	cmp	r2, #0
 8001bd8:	f000 80ba 	beq.w	8001d50 <d_expression_1+0x1b8>
 8001bdc:	785b      	ldrb	r3, [r3, #1]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	f000 80b6 	beq.w	8001d50 <d_expression_1+0x1b8>
 8001be4:	2145      	movs	r1, #69	@ 0x45
 8001be6:	4620      	mov	r0, r4
 8001be8:	f000 fa58 	bl	800209c <d_exprlist>
 8001bec:	462a      	mov	r2, r5
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2131      	movs	r1, #49	@ 0x31
 8001bf2:	4620      	mov	r0, r4
 8001bf4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001bf8:	f7fe bb0a 	b.w	8000210 <d_make_comp>
 8001bfc:	7853      	ldrb	r3, [r2, #1]
 8001bfe:	2b72      	cmp	r3, #114	@ 0x72
 8001c00:	f000 8138 	beq.w	8001e74 <d_expression_1+0x2dc>
 8001c04:	2b70      	cmp	r3, #112	@ 0x70
 8001c06:	f000 815f 	beq.w	8001ec8 <d_expression_1+0x330>
 8001c0a:	4620      	mov	r0, r4
 8001c0c:	f7ff fc18 	bl	8001440 <d_operator_name>
 8001c10:	4605      	mov	r5, r0
 8001c12:	2800      	cmp	r0, #0
 8001c14:	f000 809c 	beq.w	8001d50 <d_expression_1+0x1b8>
 8001c18:	7803      	ldrb	r3, [r0, #0]
 8001c1a:	2b32      	cmp	r3, #50	@ 0x32
 8001c1c:	d050      	beq.n	8001cc0 <d_expression_1+0x128>
 8001c1e:	2b33      	cmp	r3, #51	@ 0x33
 8001c20:	f000 808f 	beq.w	8001d42 <d_expression_1+0x1aa>
 8001c24:	2b34      	cmp	r3, #52	@ 0x34
 8001c26:	f040 8093 	bne.w	8001d50 <d_expression_1+0x1b8>
 8001c2a:	68e3      	ldr	r3, [r4, #12]
 8001c2c:	781a      	ldrb	r2, [r3, #0]
 8001c2e:	2a5f      	cmp	r2, #95	@ 0x5f
 8001c30:	f000 8118 	beq.w	8001e64 <d_expression_1+0x2cc>
 8001c34:	4620      	mov	r0, r4
 8001c36:	f7ff ffaf 	bl	8001b98 <d_expression_1>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	e053      	b.n	8001ce6 <d_expression_1+0x14e>
 8001c3e:	7853      	ldrb	r3, [r2, #1]
 8001c40:	2b6e      	cmp	r3, #110	@ 0x6e
 8001c42:	d1e2      	bne.n	8001c0a <d_expression_1+0x72>
 8001c44:	3202      	adds	r2, #2
 8001c46:	60c2      	str	r2, [r0, #12]
 8001c48:	4620      	mov	r0, r4
 8001c4a:	f7ff fc79 	bl	8001540 <d_unqualified_name>
 8001c4e:	4605      	mov	r5, r0
 8001c50:	2800      	cmp	r0, #0
 8001c52:	d07d      	beq.n	8001d50 <d_expression_1+0x1b8>
 8001c54:	68e3      	ldr	r3, [r4, #12]
 8001c56:	781a      	ldrb	r2, [r3, #0]
 8001c58:	2a49      	cmp	r2, #73	@ 0x49
 8001c5a:	d07b      	beq.n	8001d54 <d_expression_1+0x1bc>
 8001c5c:	4628      	mov	r0, r5
 8001c5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001c62:	7853      	ldrb	r3, [r2, #1]
 8001c64:	2b70      	cmp	r3, #112	@ 0x70
 8001c66:	d1d0      	bne.n	8001c0a <d_expression_1+0x72>
 8001c68:	1c93      	adds	r3, r2, #2
 8001c6a:	60c3      	str	r3, [r0, #12]
 8001c6c:	7893      	ldrb	r3, [r2, #2]
 8001c6e:	2b54      	cmp	r3, #84	@ 0x54
 8001c70:	f000 8121 	beq.w	8001eb6 <d_expression_1+0x31e>
 8001c74:	2b5f      	cmp	r3, #95	@ 0x5f
 8001c76:	d07a      	beq.n	8001d6e <d_expression_1+0x1d6>
 8001c78:	2b6e      	cmp	r3, #110	@ 0x6e
 8001c7a:	d069      	beq.n	8001d50 <d_expression_1+0x1b8>
 8001c7c:	f7fe fb40 	bl	8000300 <d_number>
 8001c80:	1c41      	adds	r1, r0, #1
 8001c82:	d465      	bmi.n	8001d50 <d_expression_1+0x1b8>
 8001c84:	68e3      	ldr	r3, [r4, #12]
 8001c86:	781a      	ldrb	r2, [r3, #0]
 8001c88:	2a5f      	cmp	r2, #95	@ 0x5f
 8001c8a:	d161      	bne.n	8001d50 <d_expression_1+0x1b8>
 8001c8c:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8001c90:	3301      	adds	r3, #1
 8001c92:	4291      	cmp	r1, r2
 8001c94:	60e3      	str	r3, [r4, #12]
 8001c96:	d05b      	beq.n	8001d50 <d_expression_1+0x1b8>
 8001c98:	3002      	adds	r0, #2
 8001c9a:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	da56      	bge.n	8001d50 <d_expression_1+0x1b8>
 8001ca2:	6922      	ldr	r2, [r4, #16]
 8001ca4:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8001ca8:	eb02 0581 	add.w	r5, r2, r1, lsl #2
 8001cac:	3301      	adds	r3, #1
 8001cae:	2600      	movs	r6, #0
 8001cb0:	e9c5 6601 	strd	r6, r6, [r5, #4]
 8001cb4:	6163      	str	r3, [r4, #20]
 8001cb6:	2306      	movs	r3, #6
 8001cb8:	f802 3021 	strb.w	r3, [r2, r1, lsl #2]
 8001cbc:	60e8      	str	r0, [r5, #12]
 8001cbe:	e7cd      	b.n	8001c5c <d_expression_1+0xc4>
 8001cc0:	68c1      	ldr	r1, [r0, #12]
 8001cc2:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8001cc4:	688a      	ldr	r2, [r1, #8]
 8001cc6:	680e      	ldr	r6, [r1, #0]
 8001cc8:	3a02      	subs	r2, #2
 8001cca:	4413      	add	r3, r2
 8001ccc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8001cce:	7833      	ldrb	r3, [r6, #0]
 8001cd0:	2b73      	cmp	r3, #115	@ 0x73
 8001cd2:	d10f      	bne.n	8001cf4 <d_expression_1+0x15c>
 8001cd4:	7872      	ldrb	r2, [r6, #1]
 8001cd6:	2a74      	cmp	r2, #116	@ 0x74
 8001cd8:	d10c      	bne.n	8001cf4 <d_expression_1+0x15c>
 8001cda:	78b2      	ldrb	r2, [r6, #2]
 8001cdc:	b952      	cbnz	r2, 8001cf4 <d_expression_1+0x15c>
 8001cde:	4620      	mov	r0, r4
 8001ce0:	f7fe fed2 	bl	8000a88 <d_type>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	462a      	mov	r2, r5
 8001ce8:	4620      	mov	r0, r4
 8001cea:	2137      	movs	r1, #55	@ 0x37
 8001cec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001cf0:	f7fe ba8e 	b.w	8000210 <d_make_comp>
 8001cf4:	68cf      	ldr	r7, [r1, #12]
 8001cf6:	2f03      	cmp	r7, #3
 8001cf8:	d82a      	bhi.n	8001d50 <d_expression_1+0x1b8>
 8001cfa:	e8df f007 	tbb	[pc, r7]
 8001cfe:	0247      	.short	0x0247
 8001d00:	4f7b      	.short	0x4f7b
 8001d02:	7832      	ldrb	r2, [r6, #0]
 8001d04:	2a70      	cmp	r2, #112	@ 0x70
 8001d06:	d036      	beq.n	8001d76 <d_expression_1+0x1de>
 8001d08:	2a6d      	cmp	r2, #109	@ 0x6d
 8001d0a:	d034      	beq.n	8001d76 <d_expression_1+0x1de>
 8001d0c:	2700      	movs	r7, #0
 8001d0e:	2b73      	cmp	r3, #115	@ 0x73
 8001d10:	f040 80d5 	bne.w	8001ebe <d_expression_1+0x326>
 8001d14:	7873      	ldrb	r3, [r6, #1]
 8001d16:	2b50      	cmp	r3, #80	@ 0x50
 8001d18:	f040 80d1 	bne.w	8001ebe <d_expression_1+0x326>
 8001d1c:	78b3      	ldrb	r3, [r6, #2]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	f040 80cd 	bne.w	8001ebe <d_expression_1+0x326>
 8001d24:	4620      	mov	r0, r4
 8001d26:	f7ff fe67 	bl	80019f8 <d_template_args_1>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	2f00      	cmp	r7, #0
 8001d2e:	d0da      	beq.n	8001ce6 <d_expression_1+0x14e>
 8001d30:	461a      	mov	r2, r3
 8001d32:	2139      	movs	r1, #57	@ 0x39
 8001d34:	4620      	mov	r0, r4
 8001d36:	f7fe fa6b 	bl	8000210 <d_make_comp>
 8001d3a:	e7d3      	b.n	8001ce4 <d_expression_1+0x14c>
 8001d3c:	e5a2      	b.n	8001884 <d_expr_primary>
 8001d3e:	f7fe bd07 	b.w	8000750 <d_template_param>
 8001d42:	68c3      	ldr	r3, [r0, #12]
 8001d44:	2b01      	cmp	r3, #1
 8001d46:	f43f af75 	beq.w	8001c34 <d_expression_1+0x9c>
 8001d4a:	2b02      	cmp	r3, #2
 8001d4c:	d000      	beq.n	8001d50 <d_expression_1+0x1b8>
 8001d4e:	b1eb      	cbz	r3, 8001d8c <d_expression_1+0x1f4>
 8001d50:	2500      	movs	r5, #0
 8001d52:	e783      	b.n	8001c5c <d_expression_1+0xc4>
 8001d54:	3301      	adds	r3, #1
 8001d56:	60e3      	str	r3, [r4, #12]
 8001d58:	4620      	mov	r0, r4
 8001d5a:	f7ff fe4d 	bl	80019f8 <d_template_args_1>
 8001d5e:	462a      	mov	r2, r5
 8001d60:	4603      	mov	r3, r0
 8001d62:	2104      	movs	r1, #4
 8001d64:	4620      	mov	r0, r4
 8001d66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001d6a:	f7fe ba51 	b.w	8000210 <d_make_comp>
 8001d6e:	3203      	adds	r2, #3
 8001d70:	60c2      	str	r2, [r0, #12]
 8001d72:	2001      	movs	r0, #1
 8001d74:	e791      	b.n	8001c9a <d_expression_1+0x102>
 8001d76:	7871      	ldrb	r1, [r6, #1]
 8001d78:	4291      	cmp	r1, r2
 8001d7a:	d1c7      	bne.n	8001d0c <d_expression_1+0x174>
 8001d7c:	68e2      	ldr	r2, [r4, #12]
 8001d7e:	7811      	ldrb	r1, [r2, #0]
 8001d80:	295f      	cmp	r1, #95	@ 0x5f
 8001d82:	d1c4      	bne.n	8001d0e <d_expression_1+0x176>
 8001d84:	3201      	adds	r2, #1
 8001d86:	60e2      	str	r2, [r4, #12]
 8001d88:	7833      	ldrb	r3, [r6, #0]
 8001d8a:	e7bf      	b.n	8001d0c <d_expression_1+0x174>
 8001d8c:	462a      	mov	r2, r5
 8001d8e:	4620      	mov	r0, r4
 8001d90:	2300      	movs	r3, #0
 8001d92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001d96:	2136      	movs	r1, #54	@ 0x36
 8001d98:	f7fe ba3a 	b.w	8000210 <d_make_comp>
 8001d9c:	2b71      	cmp	r3, #113	@ 0x71
 8001d9e:	f040 80b9 	bne.w	8001f14 <d_expression_1+0x37c>
 8001da2:	7872      	ldrb	r2, [r6, #1]
 8001da4:	2a75      	cmp	r2, #117	@ 0x75
 8001da6:	f040 80b5 	bne.w	8001f14 <d_expression_1+0x37c>
 8001daa:	78b2      	ldrb	r2, [r6, #2]
 8001dac:	2a00      	cmp	r2, #0
 8001dae:	f040 80b1 	bne.w	8001f14 <d_expression_1+0x37c>
 8001db2:	4620      	mov	r0, r4
 8001db4:	f7ff fef0 	bl	8001b98 <d_expression_1>
 8001db8:	4606      	mov	r6, r0
 8001dba:	4620      	mov	r0, r4
 8001dbc:	f7ff feec 	bl	8001b98 <d_expression_1>
 8001dc0:	4607      	mov	r7, r0
 8001dc2:	4620      	mov	r0, r4
 8001dc4:	f7ff fee8 	bl	8001b98 <d_expression_1>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	2800      	cmp	r0, #0
 8001dcc:	d0c0      	beq.n	8001d50 <d_expression_1+0x1b8>
 8001dce:	463a      	mov	r2, r7
 8001dd0:	213c      	movs	r1, #60	@ 0x3c
 8001dd2:	4620      	mov	r0, r4
 8001dd4:	f7fe fa1c 	bl	8000210 <d_make_comp>
 8001dd8:	4632      	mov	r2, r6
 8001dda:	4603      	mov	r3, r0
 8001ddc:	213b      	movs	r1, #59	@ 0x3b
 8001dde:	4620      	mov	r0, r4
 8001de0:	f7fe fa16 	bl	8000210 <d_make_comp>
 8001de4:	462a      	mov	r2, r5
 8001de6:	4603      	mov	r3, r0
 8001de8:	213a      	movs	r1, #58	@ 0x3a
 8001dea:	4620      	mov	r0, r4
 8001dec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001df0:	f7fe ba0e 	b.w	8000210 <d_make_comp>
 8001df4:	68eb      	ldr	r3, [r5, #12]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	785a      	ldrb	r2, [r3, #1]
 8001dfa:	2a63      	cmp	r2, #99	@ 0x63
 8001dfc:	f000 80ef 	beq.w	8001fde <d_expression_1+0x446>
 8001e00:	7833      	ldrb	r3, [r6, #0]
 8001e02:	2b66      	cmp	r3, #102	@ 0x66
 8001e04:	f000 810f 	beq.w	8002026 <d_expression_1+0x48e>
 8001e08:	2b64      	cmp	r3, #100	@ 0x64
 8001e0a:	f040 8103 	bne.w	8002014 <d_expression_1+0x47c>
 8001e0e:	7873      	ldrb	r3, [r6, #1]
 8001e10:	2b69      	cmp	r3, #105	@ 0x69
 8001e12:	f040 80ff 	bne.w	8002014 <d_expression_1+0x47c>
 8001e16:	78b3      	ldrb	r3, [r6, #2]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	f040 80fb 	bne.w	8002014 <d_expression_1+0x47c>
 8001e1e:	4620      	mov	r0, r4
 8001e20:	f7ff fb8e 	bl	8001540 <d_unqualified_name>
 8001e24:	4607      	mov	r7, r0
 8001e26:	7833      	ldrb	r3, [r6, #0]
 8001e28:	2b63      	cmp	r3, #99	@ 0x63
 8001e2a:	f040 80a4 	bne.w	8001f76 <d_expression_1+0x3de>
 8001e2e:	7872      	ldrb	r2, [r6, #1]
 8001e30:	2a6c      	cmp	r2, #108	@ 0x6c
 8001e32:	f040 80a0 	bne.w	8001f76 <d_expression_1+0x3de>
 8001e36:	78b2      	ldrb	r2, [r6, #2]
 8001e38:	2a00      	cmp	r2, #0
 8001e3a:	f040 809c 	bne.w	8001f76 <d_expression_1+0x3de>
 8001e3e:	2145      	movs	r1, #69	@ 0x45
 8001e40:	4620      	mov	r0, r4
 8001e42:	f000 f92b 	bl	800209c <d_exprlist>
 8001e46:	4606      	mov	r6, r0
 8001e48:	4633      	mov	r3, r6
 8001e4a:	463a      	mov	r2, r7
 8001e4c:	2139      	movs	r1, #57	@ 0x39
 8001e4e:	4620      	mov	r0, r4
 8001e50:	f7fe f9de 	bl	8000210 <d_make_comp>
 8001e54:	462a      	mov	r2, r5
 8001e56:	4603      	mov	r3, r0
 8001e58:	2138      	movs	r1, #56	@ 0x38
 8001e5a:	4620      	mov	r0, r4
 8001e5c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001e60:	f7fe b9d6 	b.w	8000210 <d_make_comp>
 8001e64:	3301      	adds	r3, #1
 8001e66:	60e3      	str	r3, [r4, #12]
 8001e68:	2145      	movs	r1, #69	@ 0x45
 8001e6a:	4620      	mov	r0, r4
 8001e6c:	f000 f916 	bl	800209c <d_exprlist>
 8001e70:	4603      	mov	r3, r0
 8001e72:	e738      	b.n	8001ce6 <d_expression_1+0x14e>
 8001e74:	1c93      	adds	r3, r2, #2
 8001e76:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 8001e78:	60c3      	str	r3, [r0, #12]
 8001e7a:	7893      	ldrb	r3, [r2, #2]
 8001e7c:	b131      	cbz	r1, 8001e8c <d_expression_1+0x2f4>
 8001e7e:	2b55      	cmp	r3, #85	@ 0x55
 8001e80:	d844      	bhi.n	8001f0c <d_expression_1+0x374>
 8001e82:	2b42      	cmp	r3, #66	@ 0x42
 8001e84:	d82c      	bhi.n	8001ee0 <d_expression_1+0x348>
 8001e86:	3b30      	subs	r3, #48	@ 0x30
 8001e88:	2b09      	cmp	r3, #9
 8001e8a:	d930      	bls.n	8001eee <d_expression_1+0x356>
 8001e8c:	4620      	mov	r0, r4
 8001e8e:	f7fe fdfb 	bl	8000a88 <d_type>
 8001e92:	4606      	mov	r6, r0
 8001e94:	4620      	mov	r0, r4
 8001e96:	f7ff fb53 	bl	8001540 <d_unqualified_name>
 8001e9a:	68e3      	ldr	r3, [r4, #12]
 8001e9c:	781a      	ldrb	r2, [r3, #0]
 8001e9e:	2a49      	cmp	r2, #73	@ 0x49
 8001ea0:	4605      	mov	r5, r0
 8001ea2:	f000 808f 	beq.w	8001fc4 <d_expression_1+0x42c>
 8001ea6:	462b      	mov	r3, r5
 8001ea8:	4632      	mov	r2, r6
 8001eaa:	4620      	mov	r0, r4
 8001eac:	2101      	movs	r1, #1
 8001eae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001eb2:	f7fe b9ad 	b.w	8000210 <d_make_comp>
 8001eb6:	3203      	adds	r2, #3
 8001eb8:	60c2      	str	r2, [r0, #12]
 8001eba:	2000      	movs	r0, #0
 8001ebc:	e6ed      	b.n	8001c9a <d_expression_1+0x102>
 8001ebe:	4620      	mov	r0, r4
 8001ec0:	f7ff fe6a 	bl	8001b98 <d_expression_1>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	e731      	b.n	8001d2c <d_expression_1+0x194>
 8001ec8:	3202      	adds	r2, #2
 8001eca:	60c2      	str	r2, [r0, #12]
 8001ecc:	f7ff fe64 	bl	8001b98 <d_expression_1>
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	4602      	mov	r2, r0
 8001ed4:	214c      	movs	r1, #76	@ 0x4c
 8001ed6:	4620      	mov	r0, r4
 8001ed8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001edc:	f7fe b998 	b.w	8000210 <d_make_comp>
 8001ee0:	4a6d      	ldr	r2, [pc, #436]	@ (8002098 <d_expression_1+0x500>)
 8001ee2:	3b43      	subs	r3, #67	@ 0x43
 8001ee4:	b2db      	uxtb	r3, r3
 8001ee6:	fa22 f303 	lsr.w	r3, r2, r3
 8001eea:	07db      	lsls	r3, r3, #31
 8001eec:	d5ce      	bpl.n	8001e8c <d_expression_1+0x2f4>
 8001eee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001ef2:	63a3      	str	r3, [r4, #56]	@ 0x38
 8001ef4:	2100      	movs	r1, #0
 8001ef6:	4620      	mov	r0, r4
 8001ef8:	f7ff fdb0 	bl	8001a5c <d_prefix>
 8001efc:	68e3      	ldr	r3, [r4, #12]
 8001efe:	781a      	ldrb	r2, [r3, #0]
 8001f00:	2a45      	cmp	r2, #69	@ 0x45
 8001f02:	4606      	mov	r6, r0
 8001f04:	d1c6      	bne.n	8001e94 <d_expression_1+0x2fc>
 8001f06:	3301      	adds	r3, #1
 8001f08:	60e3      	str	r3, [r4, #12]
 8001f0a:	e7c3      	b.n	8001e94 <d_expression_1+0x2fc>
 8001f0c:	3b61      	subs	r3, #97	@ 0x61
 8001f0e:	2b19      	cmp	r3, #25
 8001f10:	d8bc      	bhi.n	8001e8c <d_expression_1+0x2f4>
 8001f12:	e7ec      	b.n	8001eee <d_expression_1+0x356>
 8001f14:	2b64      	cmp	r3, #100	@ 0x64
 8001f16:	d106      	bne.n	8001f26 <d_expression_1+0x38e>
 8001f18:	7873      	ldrb	r3, [r6, #1]
 8001f1a:	2b58      	cmp	r3, #88	@ 0x58
 8001f1c:	d103      	bne.n	8001f26 <d_expression_1+0x38e>
 8001f1e:	78b3      	ldrb	r3, [r6, #2]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	f43f af46 	beq.w	8001db2 <d_expression_1+0x21a>
 8001f26:	7833      	ldrb	r3, [r6, #0]
 8001f28:	2b66      	cmp	r3, #102	@ 0x66
 8001f2a:	f000 8081 	beq.w	8002030 <d_expression_1+0x498>
 8001f2e:	2b6e      	cmp	r3, #110	@ 0x6e
 8001f30:	f47f af0e 	bne.w	8001d50 <d_expression_1+0x1b8>
 8001f34:	7873      	ldrb	r3, [r6, #1]
 8001f36:	2b77      	cmp	r3, #119	@ 0x77
 8001f38:	d002      	beq.n	8001f40 <d_expression_1+0x3a8>
 8001f3a:	2b61      	cmp	r3, #97	@ 0x61
 8001f3c:	f47f af08 	bne.w	8001d50 <d_expression_1+0x1b8>
 8001f40:	215f      	movs	r1, #95	@ 0x5f
 8001f42:	4620      	mov	r0, r4
 8001f44:	f000 f8aa 	bl	800209c <d_exprlist>
 8001f48:	4606      	mov	r6, r0
 8001f4a:	4620      	mov	r0, r4
 8001f4c:	f7fe fd9c 	bl	8000a88 <d_type>
 8001f50:	68e3      	ldr	r3, [r4, #12]
 8001f52:	781a      	ldrb	r2, [r3, #0]
 8001f54:	2a45      	cmp	r2, #69	@ 0x45
 8001f56:	4607      	mov	r7, r0
 8001f58:	d07a      	beq.n	8002050 <d_expression_1+0x4b8>
 8001f5a:	2a70      	cmp	r2, #112	@ 0x70
 8001f5c:	d06c      	beq.n	8002038 <d_expression_1+0x4a0>
 8001f5e:	2a69      	cmp	r2, #105	@ 0x69
 8001f60:	f47f aef6 	bne.w	8001d50 <d_expression_1+0x1b8>
 8001f64:	785b      	ldrb	r3, [r3, #1]
 8001f66:	2b6c      	cmp	r3, #108	@ 0x6c
 8001f68:	f47f aef2 	bne.w	8001d50 <d_expression_1+0x1b8>
 8001f6c:	4620      	mov	r0, r4
 8001f6e:	f7ff fe13 	bl	8001b98 <d_expression_1>
 8001f72:	4603      	mov	r3, r0
 8001f74:	e72b      	b.n	8001dce <d_expression_1+0x236>
 8001f76:	2b64      	cmp	r3, #100	@ 0x64
 8001f78:	d13f      	bne.n	8001ffa <d_expression_1+0x462>
 8001f7a:	7872      	ldrb	r2, [r6, #1]
 8001f7c:	2a74      	cmp	r2, #116	@ 0x74
 8001f7e:	d13c      	bne.n	8001ffa <d_expression_1+0x462>
 8001f80:	78b2      	ldrb	r2, [r6, #2]
 8001f82:	2a00      	cmp	r2, #0
 8001f84:	d139      	bne.n	8001ffa <d_expression_1+0x462>
 8001f86:	68e3      	ldr	r3, [r4, #12]
 8001f88:	781a      	ldrb	r2, [r3, #0]
 8001f8a:	2a67      	cmp	r2, #103	@ 0x67
 8001f8c:	d047      	beq.n	800201e <d_expression_1+0x486>
 8001f8e:	2a73      	cmp	r2, #115	@ 0x73
 8001f90:	d102      	bne.n	8001f98 <d_expression_1+0x400>
 8001f92:	785b      	ldrb	r3, [r3, #1]
 8001f94:	2b72      	cmp	r3, #114	@ 0x72
 8001f96:	d038      	beq.n	800200a <d_expression_1+0x472>
 8001f98:	4620      	mov	r0, r4
 8001f9a:	f7ff fad1 	bl	8001540 <d_unqualified_name>
 8001f9e:	68e3      	ldr	r3, [r4, #12]
 8001fa0:	781a      	ldrb	r2, [r3, #0]
 8001fa2:	2a49      	cmp	r2, #73	@ 0x49
 8001fa4:	4606      	mov	r6, r0
 8001fa6:	f47f af4f 	bne.w	8001e48 <d_expression_1+0x2b0>
 8001faa:	3301      	adds	r3, #1
 8001fac:	60e3      	str	r3, [r4, #12]
 8001fae:	4620      	mov	r0, r4
 8001fb0:	f7ff fd22 	bl	80019f8 <d_template_args_1>
 8001fb4:	4632      	mov	r2, r6
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	2104      	movs	r1, #4
 8001fba:	4620      	mov	r0, r4
 8001fbc:	f7fe f928 	bl	8000210 <d_make_comp>
 8001fc0:	4606      	mov	r6, r0
 8001fc2:	e741      	b.n	8001e48 <d_expression_1+0x2b0>
 8001fc4:	3301      	adds	r3, #1
 8001fc6:	60e3      	str	r3, [r4, #12]
 8001fc8:	4620      	mov	r0, r4
 8001fca:	f7ff fd15 	bl	80019f8 <d_template_args_1>
 8001fce:	462a      	mov	r2, r5
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	2104      	movs	r1, #4
 8001fd4:	4620      	mov	r0, r4
 8001fd6:	f7fe f91b 	bl	8000210 <d_make_comp>
 8001fda:	4605      	mov	r5, r0
 8001fdc:	e763      	b.n	8001ea6 <d_expression_1+0x30e>
 8001fde:	781b      	ldrb	r3, [r3, #0]
 8001fe0:	f1a3 0272 	sub.w	r2, r3, #114	@ 0x72
 8001fe4:	2a01      	cmp	r2, #1
 8001fe6:	d903      	bls.n	8001ff0 <d_expression_1+0x458>
 8001fe8:	3b63      	subs	r3, #99	@ 0x63
 8001fea:	2b01      	cmp	r3, #1
 8001fec:	f63f af08 	bhi.w	8001e00 <d_expression_1+0x268>
 8001ff0:	4620      	mov	r0, r4
 8001ff2:	f7fe fd49 	bl	8000a88 <d_type>
 8001ff6:	4607      	mov	r7, r0
 8001ff8:	e715      	b.n	8001e26 <d_expression_1+0x28e>
 8001ffa:	2b70      	cmp	r3, #112	@ 0x70
 8001ffc:	d105      	bne.n	800200a <d_expression_1+0x472>
 8001ffe:	7873      	ldrb	r3, [r6, #1]
 8002000:	2b74      	cmp	r3, #116	@ 0x74
 8002002:	d102      	bne.n	800200a <d_expression_1+0x472>
 8002004:	78b3      	ldrb	r3, [r6, #2]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d0bd      	beq.n	8001f86 <d_expression_1+0x3ee>
 800200a:	4620      	mov	r0, r4
 800200c:	f7ff fdc4 	bl	8001b98 <d_expression_1>
 8002010:	4606      	mov	r6, r0
 8002012:	e719      	b.n	8001e48 <d_expression_1+0x2b0>
 8002014:	4620      	mov	r0, r4
 8002016:	f7ff fdbf 	bl	8001b98 <d_expression_1>
 800201a:	4607      	mov	r7, r0
 800201c:	e703      	b.n	8001e26 <d_expression_1+0x28e>
 800201e:	785b      	ldrb	r3, [r3, #1]
 8002020:	2b73      	cmp	r3, #115	@ 0x73
 8002022:	d1b9      	bne.n	8001f98 <d_expression_1+0x400>
 8002024:	e7f1      	b.n	800200a <d_expression_1+0x472>
 8002026:	4620      	mov	r0, r4
 8002028:	f7ff fa0a 	bl	8001440 <d_operator_name>
 800202c:	4607      	mov	r7, r0
 800202e:	e6fa      	b.n	8001e26 <d_expression_1+0x28e>
 8002030:	4620      	mov	r0, r4
 8002032:	f7ff fa05 	bl	8001440 <d_operator_name>
 8002036:	e6bf      	b.n	8001db8 <d_expression_1+0x220>
 8002038:	785a      	ldrb	r2, [r3, #1]
 800203a:	2a69      	cmp	r2, #105	@ 0x69
 800203c:	f47f ae88 	bne.w	8001d50 <d_expression_1+0x1b8>
 8002040:	3302      	adds	r3, #2
 8002042:	60e3      	str	r3, [r4, #12]
 8002044:	2145      	movs	r1, #69	@ 0x45
 8002046:	4620      	mov	r0, r4
 8002048:	f000 f828 	bl	800209c <d_exprlist>
 800204c:	4603      	mov	r3, r0
 800204e:	e6be      	b.n	8001dce <d_expression_1+0x236>
 8002050:	3301      	adds	r3, #1
 8002052:	60e3      	str	r3, [r4, #12]
 8002054:	2300      	movs	r3, #0
 8002056:	e6ba      	b.n	8001dce <d_expression_1+0x236>
 8002058:	2b74      	cmp	r3, #116	@ 0x74
 800205a:	d012      	beq.n	8002082 <d_expression_1+0x4ea>
 800205c:	2b75      	cmp	r3, #117	@ 0x75
 800205e:	f47f add4 	bne.w	8001c0a <d_expression_1+0x72>
 8002062:	3201      	adds	r2, #1
 8002064:	60c2      	str	r2, [r0, #12]
 8002066:	f7fe fbdd 	bl	8000824 <d_source_name>
 800206a:	4605      	mov	r5, r0
 800206c:	4620      	mov	r0, r4
 800206e:	f7ff fcc3 	bl	80019f8 <d_template_args_1>
 8002072:	462a      	mov	r2, r5
 8002074:	4603      	mov	r3, r0
 8002076:	213f      	movs	r1, #63	@ 0x3f
 8002078:	4620      	mov	r0, r4
 800207a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800207e:	f7fe b8c7 	b.w	8000210 <d_make_comp>
 8002082:	7853      	ldrb	r3, [r2, #1]
 8002084:	2b6c      	cmp	r3, #108	@ 0x6c
 8002086:	f47f adc0 	bne.w	8001c0a <d_expression_1+0x72>
 800208a:	3202      	adds	r2, #2
 800208c:	60c2      	str	r2, [r0, #12]
 800208e:	f7fe fcfb 	bl	8000a88 <d_type>
 8002092:	68e3      	ldr	r3, [r4, #12]
 8002094:	4605      	mov	r5, r0
 8002096:	e59d      	b.n	8001bd4 <d_expression_1+0x3c>
 8002098:	00040201 	.word	0x00040201

0800209c <d_exprlist>:
 800209c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80020a0:	68c2      	ldr	r2, [r0, #12]
 80020a2:	460e      	mov	r6, r1
 80020a4:	7811      	ldrb	r1, [r2, #0]
 80020a6:	b082      	sub	sp, #8
 80020a8:	2300      	movs	r3, #0
 80020aa:	42b1      	cmp	r1, r6
 80020ac:	4604      	mov	r4, r0
 80020ae:	9301      	str	r3, [sp, #4]
 80020b0:	d024      	beq.n	80020fc <d_exprlist+0x60>
 80020b2:	ad01      	add	r5, sp, #4
 80020b4:	2701      	movs	r7, #1
 80020b6:	e009      	b.n	80020cc <d_exprlist+0x30>
 80020b8:	f7fe f8aa 	bl	8000210 <d_make_comp>
 80020bc:	6028      	str	r0, [r5, #0]
 80020be:	f100 0510 	add.w	r5, r0, #16
 80020c2:	b188      	cbz	r0, 80020e8 <d_exprlist+0x4c>
 80020c4:	68e3      	ldr	r3, [r4, #12]
 80020c6:	781a      	ldrb	r2, [r3, #0]
 80020c8:	42b2      	cmp	r2, r6
 80020ca:	d011      	beq.n	80020f0 <d_exprlist+0x54>
 80020cc:	f8d4 8030 	ldr.w	r8, [r4, #48]	@ 0x30
 80020d0:	6327      	str	r7, [r4, #48]	@ 0x30
 80020d2:	4620      	mov	r0, r4
 80020d4:	f7ff fd60 	bl	8001b98 <d_expression_1>
 80020d8:	4602      	mov	r2, r0
 80020da:	2300      	movs	r3, #0
 80020dc:	212e      	movs	r1, #46	@ 0x2e
 80020de:	4620      	mov	r0, r4
 80020e0:	f8c4 8030 	str.w	r8, [r4, #48]	@ 0x30
 80020e4:	2a00      	cmp	r2, #0
 80020e6:	d1e7      	bne.n	80020b8 <d_exprlist+0x1c>
 80020e8:	2000      	movs	r0, #0
 80020ea:	b002      	add	sp, #8
 80020ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80020f0:	9801      	ldr	r0, [sp, #4]
 80020f2:	3301      	adds	r3, #1
 80020f4:	60e3      	str	r3, [r4, #12]
 80020f6:	b002      	add	sp, #8
 80020f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80020fc:	3201      	adds	r2, #1
 80020fe:	60c2      	str	r2, [r0, #12]
 8002100:	212e      	movs	r1, #46	@ 0x2e
 8002102:	461a      	mov	r2, r3
 8002104:	b002      	add	sp, #8
 8002106:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800210a:	f7fe b881 	b.w	8000210 <d_make_comp>
 800210e:	bf00      	nop

08002110 <d_cv_qualifiers>:
 8002110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002114:	460f      	mov	r7, r1
 8002116:	b083      	sub	sp, #12
 8002118:	68c1      	ldr	r1, [r0, #12]
 800211a:	1e13      	subs	r3, r2, #0
 800211c:	4604      	mov	r4, r0
 800211e:	780a      	ldrb	r2, [r1, #0]
 8002120:	9301      	str	r3, [sp, #4]
 8002122:	bf15      	itete	ne
 8002124:	f04f 0a1e 	movne.w	sl, #30
 8002128:	f04f 0a1b 	moveq.w	sl, #27
 800212c:	f04f 081d 	movne.w	r8, #29
 8002130:	f04f 081a 	moveq.w	r8, #26
 8002134:	bf14      	ite	ne
 8002136:	261c      	movne	r6, #28
 8002138:	2619      	moveq	r6, #25
 800213a:	463d      	mov	r5, r7
 800213c:	f04f 0b01 	mov.w	fp, #1
 8002140:	e01b      	b.n	800217a <d_cv_qualifiers+0x6a>
 8002142:	2a56      	cmp	r2, #86	@ 0x56
 8002144:	d032      	beq.n	80021ac <d_cv_qualifiers+0x9c>
 8002146:	2a4b      	cmp	r2, #75	@ 0x4b
 8002148:	d036      	beq.n	80021b8 <d_cv_qualifiers+0xa8>
 800214a:	784b      	ldrb	r3, [r1, #1]
 800214c:	b34b      	cbz	r3, 80021a2 <d_cv_qualifiers+0x92>
 800214e:	1c8b      	adds	r3, r1, #2
 8002150:	60e3      	str	r3, [r4, #12]
 8002152:	784b      	ldrb	r3, [r1, #1]
 8002154:	2b78      	cmp	r3, #120	@ 0x78
 8002156:	d035      	beq.n	80021c4 <d_cv_qualifiers+0xb4>
 8002158:	2b6f      	cmp	r3, #111	@ 0x6f
 800215a:	d151      	bne.n	8002200 <d_cv_qualifiers+0xf0>
 800215c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800215e:	3309      	adds	r3, #9
 8002160:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002162:	2150      	movs	r1, #80	@ 0x50
 8002164:	2300      	movs	r3, #0
 8002166:	2200      	movs	r2, #0
 8002168:	4620      	mov	r0, r4
 800216a:	f7fe f851 	bl	8000210 <d_make_comp>
 800216e:	6028      	str	r0, [r5, #0]
 8002170:	b1b8      	cbz	r0, 80021a2 <d_cv_qualifiers+0x92>
 8002172:	68e1      	ldr	r1, [r4, #12]
 8002174:	780a      	ldrb	r2, [r1, #0]
 8002176:	f100 050c 	add.w	r5, r0, #12
 800217a:	4608      	mov	r0, r1
 800217c:	f7fe fa14 	bl	80005a8 <next_is_type_qual.isra.0>
 8002180:	b330      	cbz	r0, 80021d0 <d_cv_qualifiers+0xc0>
 8002182:	1c4b      	adds	r3, r1, #1
 8002184:	2a72      	cmp	r2, #114	@ 0x72
 8002186:	60e3      	str	r3, [r4, #12]
 8002188:	d1db      	bne.n	8002142 <d_cv_qualifiers+0x32>
 800218a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800218c:	3309      	adds	r3, #9
 800218e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002190:	4631      	mov	r1, r6
 8002192:	2300      	movs	r3, #0
 8002194:	2200      	movs	r2, #0
 8002196:	4620      	mov	r0, r4
 8002198:	f7fe f83a 	bl	8000210 <d_make_comp>
 800219c:	6028      	str	r0, [r5, #0]
 800219e:	2800      	cmp	r0, #0
 80021a0:	d1e7      	bne.n	8002172 <d_cv_qualifiers+0x62>
 80021a2:	2500      	movs	r5, #0
 80021a4:	4628      	mov	r0, r5
 80021a6:	b003      	add	sp, #12
 80021a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80021ac:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80021ae:	3309      	adds	r3, #9
 80021b0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80021b2:	4641      	mov	r1, r8
 80021b4:	2300      	movs	r3, #0
 80021b6:	e7d6      	b.n	8002166 <d_cv_qualifiers+0x56>
 80021b8:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80021ba:	3306      	adds	r3, #6
 80021bc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80021be:	4651      	mov	r1, sl
 80021c0:	2300      	movs	r3, #0
 80021c2:	e7d0      	b.n	8002166 <d_cv_qualifiers+0x56>
 80021c4:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80021c6:	3311      	adds	r3, #17
 80021c8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80021ca:	214e      	movs	r1, #78	@ 0x4e
 80021cc:	2300      	movs	r3, #0
 80021ce:	e7ca      	b.n	8002166 <d_cv_qualifiers+0x56>
 80021d0:	9b01      	ldr	r3, [sp, #4]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d1e6      	bne.n	80021a4 <d_cv_qualifiers+0x94>
 80021d6:	2a46      	cmp	r2, #70	@ 0x46
 80021d8:	d1e4      	bne.n	80021a4 <d_cv_qualifiers+0x94>
 80021da:	42bd      	cmp	r5, r7
 80021dc:	d0e2      	beq.n	80021a4 <d_cv_qualifiers+0x94>
 80021de:	201d      	movs	r0, #29
 80021e0:	211e      	movs	r1, #30
 80021e2:	221c      	movs	r2, #28
 80021e4:	e004      	b.n	80021f0 <d_cv_qualifiers+0xe0>
 80021e6:	2b19      	cmp	r3, #25
 80021e8:	d038      	beq.n	800225c <d_cv_qualifiers+0x14c>
 80021ea:	370c      	adds	r7, #12
 80021ec:	42bd      	cmp	r5, r7
 80021ee:	d0d9      	beq.n	80021a4 <d_cv_qualifiers+0x94>
 80021f0:	683f      	ldr	r7, [r7, #0]
 80021f2:	783b      	ldrb	r3, [r7, #0]
 80021f4:	2b1a      	cmp	r3, #26
 80021f6:	d02f      	beq.n	8002258 <d_cv_qualifiers+0x148>
 80021f8:	2b1b      	cmp	r3, #27
 80021fa:	d1f4      	bne.n	80021e6 <d_cv_qualifiers+0xd6>
 80021fc:	7039      	strb	r1, [r7, #0]
 80021fe:	e7f4      	b.n	80021ea <d_cv_qualifiers+0xda>
 8002200:	2b4f      	cmp	r3, #79	@ 0x4f
 8002202:	d116      	bne.n	8002232 <d_cv_qualifiers+0x122>
 8002204:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8002206:	f8d4 9030 	ldr.w	r9, [r4, #48]	@ 0x30
 800220a:	f8c4 b030 	str.w	fp, [r4, #48]	@ 0x30
 800220e:	3309      	adds	r3, #9
 8002210:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002212:	4620      	mov	r0, r4
 8002214:	f7ff fcc0 	bl	8001b98 <d_expression_1>
 8002218:	f8c4 9030 	str.w	r9, [r4, #48]	@ 0x30
 800221c:	4603      	mov	r3, r0
 800221e:	2800      	cmp	r0, #0
 8002220:	d0bf      	beq.n	80021a2 <d_cv_qualifiers+0x92>
 8002222:	68e2      	ldr	r2, [r4, #12]
 8002224:	7811      	ldrb	r1, [r2, #0]
 8002226:	2945      	cmp	r1, #69	@ 0x45
 8002228:	d1bb      	bne.n	80021a2 <d_cv_qualifiers+0x92>
 800222a:	3201      	adds	r2, #1
 800222c:	60e2      	str	r2, [r4, #12]
 800222e:	2150      	movs	r1, #80	@ 0x50
 8002230:	e799      	b.n	8002166 <d_cv_qualifiers+0x56>
 8002232:	2b77      	cmp	r3, #119	@ 0x77
 8002234:	d1b5      	bne.n	80021a2 <d_cv_qualifiers+0x92>
 8002236:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8002238:	3306      	adds	r3, #6
 800223a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800223c:	4620      	mov	r0, r4
 800223e:	f7ff f855 	bl	80012ec <d_parmlist>
 8002242:	4603      	mov	r3, r0
 8002244:	2800      	cmp	r0, #0
 8002246:	d0ac      	beq.n	80021a2 <d_cv_qualifiers+0x92>
 8002248:	68e2      	ldr	r2, [r4, #12]
 800224a:	7811      	ldrb	r1, [r2, #0]
 800224c:	2945      	cmp	r1, #69	@ 0x45
 800224e:	d1a8      	bne.n	80021a2 <d_cv_qualifiers+0x92>
 8002250:	3201      	adds	r2, #1
 8002252:	60e2      	str	r2, [r4, #12]
 8002254:	2151      	movs	r1, #81	@ 0x51
 8002256:	e786      	b.n	8002166 <d_cv_qualifiers+0x56>
 8002258:	7038      	strb	r0, [r7, #0]
 800225a:	e7c6      	b.n	80021ea <d_cv_qualifiers+0xda>
 800225c:	703a      	strb	r2, [r7, #0]
 800225e:	e7c4      	b.n	80021ea <d_cv_qualifiers+0xda>

08002260 <d_special_name>:
 8002260:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002264:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8002266:	68c3      	ldr	r3, [r0, #12]
 8002268:	f101 0214 	add.w	r2, r1, #20
 800226c:	62c2      	str	r2, [r0, #44]	@ 0x2c
 800226e:	781a      	ldrb	r2, [r3, #0]
 8002270:	2a54      	cmp	r2, #84	@ 0x54
 8002272:	4604      	mov	r4, r0
 8002274:	d074      	beq.n	8002360 <d_special_name+0x100>
 8002276:	2a47      	cmp	r2, #71	@ 0x47
 8002278:	d126      	bne.n	80022c8 <d_special_name+0x68>
 800227a:	1c5a      	adds	r2, r3, #1
 800227c:	60c2      	str	r2, [r0, #12]
 800227e:	785a      	ldrb	r2, [r3, #1]
 8002280:	b312      	cbz	r2, 80022c8 <d_special_name+0x68>
 8002282:	1c9a      	adds	r2, r3, #2
 8002284:	60c2      	str	r2, [r0, #12]
 8002286:	785a      	ldrb	r2, [r3, #1]
 8002288:	2a56      	cmp	r2, #86	@ 0x56
 800228a:	d820      	bhi.n	80022ce <d_special_name+0x6e>
 800228c:	2a40      	cmp	r2, #64	@ 0x40
 800228e:	d91b      	bls.n	80022c8 <d_special_name+0x68>
 8002290:	3a41      	subs	r2, #65	@ 0x41
 8002292:	2a15      	cmp	r2, #21
 8002294:	d818      	bhi.n	80022c8 <d_special_name+0x68>
 8002296:	e8df f012 	tbh	[pc, r2, lsl #1]
 800229a:	0122      	.short	0x0122
 800229c:	00170017 	.word	0x00170017
 80022a0:	00170017 	.word	0x00170017
 80022a4:	00170017 	.word	0x00170017
 80022a8:	00170017 	.word	0x00170017
 80022ac:	00170017 	.word	0x00170017
 80022b0:	00170017 	.word	0x00170017
 80022b4:	00170017 	.word	0x00170017
 80022b8:	00170017 	.word	0x00170017
 80022bc:	00170101 	.word	0x00170101
 80022c0:	001700e7 	.word	0x001700e7
 80022c4:	00dd      	.short	0x00dd
 80022c6:	60e6      	str	r6, [r4, #12]
 80022c8:	2000      	movs	r0, #0
 80022ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80022ce:	2a72      	cmp	r2, #114	@ 0x72
 80022d0:	d1fa      	bne.n	80022c8 <d_special_name+0x68>
 80022d2:	f7fe f815 	bl	8000300 <d_number>
 80022d6:	2801      	cmp	r0, #1
 80022d8:	ddf6      	ble.n	80022c8 <d_special_name+0x68>
 80022da:	68e3      	ldr	r3, [r4, #12]
 80022dc:	781a      	ldrb	r2, [r3, #0]
 80022de:	2a00      	cmp	r2, #0
 80022e0:	d0f2      	beq.n	80022c8 <d_special_name+0x68>
 80022e2:	1c5e      	adds	r6, r3, #1
 80022e4:	60e6      	str	r6, [r4, #12]
 80022e6:	781a      	ldrb	r2, [r3, #0]
 80022e8:	2a5f      	cmp	r2, #95	@ 0x5f
 80022ea:	d1ed      	bne.n	80022c8 <d_special_name+0x68>
 80022ec:	785b      	ldrb	r3, [r3, #1]
 80022ee:	1e45      	subs	r5, r0, #1
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d0e9      	beq.n	80022c8 <d_special_name+0x68>
 80022f4:	2000      	movs	r0, #0
 80022f6:	2b24      	cmp	r3, #36	@ 0x24
 80022f8:	f040 81e6 	bne.w	80026c8 <d_special_name+0x468>
 80022fc:	7873      	ldrb	r3, [r6, #1]
 80022fe:	2b53      	cmp	r3, #83	@ 0x53
 8002300:	f000 8212 	beq.w	8002728 <d_special_name+0x4c8>
 8002304:	2b5f      	cmp	r3, #95	@ 0x5f
 8002306:	f000 820d 	beq.w	8002724 <d_special_name+0x4c4>
 800230a:	2b24      	cmp	r3, #36	@ 0x24
 800230c:	d1dc      	bne.n	80022c8 <d_special_name+0x68>
 800230e:	4619      	mov	r1, r3
 8002310:	6963      	ldr	r3, [r4, #20]
 8002312:	69a2      	ldr	r2, [r4, #24]
 8002314:	68e6      	ldr	r6, [r4, #12]
 8002316:	4293      	cmp	r3, r2
 8002318:	f106 0602 	add.w	r6, r6, #2
 800231c:	dad3      	bge.n	80022c6 <d_special_name+0x66>
 800231e:	6927      	ldr	r7, [r4, #16]
 8002320:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 8002324:	4602      	mov	r2, r0
 8002326:	3301      	adds	r3, #1
 8002328:	eb07 008c 	add.w	r0, r7, ip, lsl #2
 800232c:	f04f 0e00 	mov.w	lr, #0
 8002330:	e9c0 ee01 	strd	lr, lr, [r0, #4]
 8002334:	6163      	str	r3, [r4, #20]
 8002336:	2342      	movs	r3, #66	@ 0x42
 8002338:	f807 302c 	strb.w	r3, [r7, ip, lsl #2]
 800233c:	3d02      	subs	r5, #2
 800233e:	60c1      	str	r1, [r0, #12]
 8002340:	60e6      	str	r6, [r4, #12]
 8002342:	b132      	cbz	r2, 8002352 <d_special_name+0xf2>
 8002344:	4603      	mov	r3, r0
 8002346:	2141      	movs	r1, #65	@ 0x41
 8002348:	4620      	mov	r0, r4
 800234a:	f7fd ff61 	bl	8000210 <d_make_comp>
 800234e:	2800      	cmp	r0, #0
 8002350:	d0ba      	beq.n	80022c8 <d_special_name+0x68>
 8002352:	2d00      	cmp	r5, #0
 8002354:	f340 820a 	ble.w	800276c <d_special_name+0x50c>
 8002358:	7833      	ldrb	r3, [r6, #0]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d1cb      	bne.n	80022f6 <d_special_name+0x96>
 800235e:	e7b3      	b.n	80022c8 <d_special_name+0x68>
 8002360:	1c5a      	adds	r2, r3, #1
 8002362:	60c2      	str	r2, [r0, #12]
 8002364:	785a      	ldrb	r2, [r3, #1]
 8002366:	2a00      	cmp	r2, #0
 8002368:	d0ae      	beq.n	80022c8 <d_special_name+0x68>
 800236a:	1c9a      	adds	r2, r3, #2
 800236c:	60c2      	str	r2, [r0, #12]
 800236e:	785b      	ldrb	r3, [r3, #1]
 8002370:	3b41      	subs	r3, #65	@ 0x41
 8002372:	2b35      	cmp	r3, #53	@ 0x35
 8002374:	d8a8      	bhi.n	80022c8 <d_special_name+0x68>
 8002376:	a201      	add	r2, pc, #4	@ (adr r2, 800237c <d_special_name+0x11c>)
 8002378:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800237c:	0800252b 	.word	0x0800252b
 8002380:	080022c9 	.word	0x080022c9
 8002384:	0800253f 	.word	0x0800253f
 8002388:	080022c9 	.word	0x080022c9
 800238c:	080022c9 	.word	0x080022c9
 8002390:	0800257b 	.word	0x0800257b
 8002394:	080022c9 	.word	0x080022c9
 8002398:	080025f7 	.word	0x080025f7
 800239c:	080026a1 	.word	0x080026a1
 80023a0:	0800268d 	.word	0x0800268d
 80023a4:	080022c9 	.word	0x080022c9
 80023a8:	080022c9 	.word	0x080022c9
 80023ac:	080022c9 	.word	0x080022c9
 80023b0:	080022c9 	.word	0x080022c9
 80023b4:	080022c9 	.word	0x080022c9
 80023b8:	080022c9 	.word	0x080022c9
 80023bc:	080022c9 	.word	0x080022c9
 80023c0:	080022c9 	.word	0x080022c9
 80023c4:	080026b5 	.word	0x080026b5
 80023c8:	0800260b 	.word	0x0800260b
 80023cc:	080022c9 	.word	0x080022c9
 80023d0:	08002623 	.word	0x08002623
 80023d4:	0800263b 	.word	0x0800263b
 80023d8:	080022c9 	.word	0x080022c9
 80023dc:	080022c9 	.word	0x080022c9
 80023e0:	080022c9 	.word	0x080022c9
 80023e4:	080022c9 	.word	0x080022c9
 80023e8:	080022c9 	.word	0x080022c9
 80023ec:	080022c9 	.word	0x080022c9
 80023f0:	080022c9 	.word	0x080022c9
 80023f4:	080022c9 	.word	0x080022c9
 80023f8:	080022c9 	.word	0x080022c9
 80023fc:	080022c9 	.word	0x080022c9
 8002400:	080022c9 	.word	0x080022c9
 8002404:	0800264f 	.word	0x0800264f
 8002408:	080022c9 	.word	0x080022c9
 800240c:	080022c9 	.word	0x080022c9
 8002410:	080022c9 	.word	0x080022c9
 8002414:	080022c9 	.word	0x080022c9
 8002418:	0800258f 	.word	0x0800258f
 800241c:	080022c9 	.word	0x080022c9
 8002420:	080022c9 	.word	0x080022c9
 8002424:	080022c9 	.word	0x080022c9
 8002428:	080022c9 	.word	0x080022c9
 800242c:	080022c9 	.word	0x080022c9
 8002430:	080022c9 	.word	0x080022c9
 8002434:	080022c9 	.word	0x080022c9
 8002438:	080022c9 	.word	0x080022c9
 800243c:	080022c9 	.word	0x080022c9
 8002440:	080022c9 	.word	0x080022c9
 8002444:	080022c9 	.word	0x080022c9
 8002448:	080022c9 	.word	0x080022c9
 800244c:	080022c9 	.word	0x080022c9
 8002450:	080025c3 	.word	0x080025c3
 8002454:	f000 f992 	bl	800277c <d_name>
 8002458:	2300      	movs	r3, #0
 800245a:	4602      	mov	r2, r0
 800245c:	2113      	movs	r1, #19
 800245e:	4620      	mov	r0, r4
 8002460:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002464:	f7fd bed4 	b.w	8000210 <d_make_comp>
 8002468:	789a      	ldrb	r2, [r3, #2]
 800246a:	2a00      	cmp	r2, #0
 800246c:	f000 815e 	beq.w	800272c <d_special_name+0x4cc>
 8002470:	1cda      	adds	r2, r3, #3
 8002472:	60c2      	str	r2, [r0, #12]
 8002474:	789a      	ldrb	r2, [r3, #2]
 8002476:	78db      	ldrb	r3, [r3, #3]
 8002478:	2a6e      	cmp	r2, #110	@ 0x6e
 800247a:	d045      	beq.n	8002508 <d_special_name+0x2a8>
 800247c:	2b47      	cmp	r3, #71	@ 0x47
 800247e:	d002      	beq.n	8002486 <d_special_name+0x226>
 8002480:	2b54      	cmp	r3, #84	@ 0x54
 8002482:	f040 8153 	bne.w	800272c <d_special_name+0x4cc>
 8002486:	4620      	mov	r0, r4
 8002488:	f7ff feea 	bl	8002260 <d_special_name>
 800248c:	4602      	mov	r2, r0
 800248e:	4620      	mov	r0, r4
 8002490:	2300      	movs	r3, #0
 8002492:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002496:	214a      	movs	r1, #74	@ 0x4a
 8002498:	f7fd beba 	b.w	8000210 <d_make_comp>
 800249c:	f000 f96e 	bl	800277c <d_name>
 80024a0:	e9d4 1205 	ldrd	r1, r2, [r4, #20]
 80024a4:	4291      	cmp	r1, r2
 80024a6:	4606      	mov	r6, r0
 80024a8:	f280 814a 	bge.w	8002740 <d_special_name+0x4e0>
 80024ac:	6922      	ldr	r2, [r4, #16]
 80024ae:	eb01 0081 	add.w	r0, r1, r1, lsl #2
 80024b2:	eb02 0580 	add.w	r5, r2, r0, lsl #2
 80024b6:	2300      	movs	r3, #0
 80024b8:	e9c5 3301 	strd	r3, r3, [r5, #4]
 80024bc:	3101      	adds	r1, #1
 80024be:	2343      	movs	r3, #67	@ 0x43
 80024c0:	6161      	str	r1, [r4, #20]
 80024c2:	f802 3020 	strb.w	r3, [r2, r0, lsl #2]
 80024c6:	4620      	mov	r0, r4
 80024c8:	f7fd ff1a 	bl	8000300 <d_number>
 80024cc:	60e8      	str	r0, [r5, #12]
 80024ce:	462b      	mov	r3, r5
 80024d0:	4632      	mov	r2, r6
 80024d2:	4620      	mov	r0, r4
 80024d4:	2116      	movs	r1, #22
 80024d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80024da:	f7fd be99 	b.w	8000210 <d_make_comp>
 80024de:	789b      	ldrb	r3, [r3, #2]
 80024e0:	2b47      	cmp	r3, #71	@ 0x47
 80024e2:	d001      	beq.n	80024e8 <d_special_name+0x288>
 80024e4:	2b54      	cmp	r3, #84	@ 0x54
 80024e6:	d10a      	bne.n	80024fe <d_special_name+0x29e>
 80024e8:	4620      	mov	r0, r4
 80024ea:	f7ff feb9 	bl	8002260 <d_special_name>
 80024ee:	4602      	mov	r2, r0
 80024f0:	4620      	mov	r0, r4
 80024f2:	2300      	movs	r3, #0
 80024f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80024f8:	2117      	movs	r1, #23
 80024fa:	f7fd be89 	b.w	8000210 <d_make_comp>
 80024fe:	2100      	movs	r1, #0
 8002500:	f000 fa9e 	bl	8002a40 <d_encoding.part.0>
 8002504:	4602      	mov	r2, r0
 8002506:	e7f3      	b.n	80024f0 <d_special_name+0x290>
 8002508:	2b47      	cmp	r3, #71	@ 0x47
 800250a:	f000 8125 	beq.w	8002758 <d_special_name+0x4f8>
 800250e:	2b54      	cmp	r3, #84	@ 0x54
 8002510:	f000 8122 	beq.w	8002758 <d_special_name+0x4f8>
 8002514:	2100      	movs	r1, #0
 8002516:	f000 fa93 	bl	8002a40 <d_encoding.part.0>
 800251a:	4602      	mov	r2, r0
 800251c:	4620      	mov	r0, r4
 800251e:	2300      	movs	r3, #0
 8002520:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002524:	214b      	movs	r1, #75	@ 0x4b
 8002526:	f7fd be73 	b.w	8000210 <d_make_comp>
 800252a:	f7ff fa3b 	bl	80019a4 <d_template_arg>
 800252e:	2300      	movs	r3, #0
 8002530:	4602      	mov	r2, r0
 8002532:	2130      	movs	r1, #48	@ 0x30
 8002534:	4620      	mov	r0, r4
 8002536:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800253a:	f7fd be69 	b.w	8000210 <d_make_comp>
 800253e:	f7fe faa3 	bl	8000a88 <d_type>
 8002542:	4605      	mov	r5, r0
 8002544:	4620      	mov	r0, r4
 8002546:	f7fd fedb 	bl	8000300 <d_number>
 800254a:	2800      	cmp	r0, #0
 800254c:	f6ff aebc 	blt.w	80022c8 <d_special_name+0x68>
 8002550:	68e3      	ldr	r3, [r4, #12]
 8002552:	781a      	ldrb	r2, [r3, #0]
 8002554:	2a5f      	cmp	r2, #95	@ 0x5f
 8002556:	f47f aeb7 	bne.w	80022c8 <d_special_name+0x68>
 800255a:	3301      	adds	r3, #1
 800255c:	60e3      	str	r3, [r4, #12]
 800255e:	4620      	mov	r0, r4
 8002560:	f7fe fa92 	bl	8000a88 <d_type>
 8002564:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8002566:	3105      	adds	r1, #5
 8002568:	62e1      	str	r1, [r4, #44]	@ 0x2c
 800256a:	4602      	mov	r2, r0
 800256c:	462b      	mov	r3, r5
 800256e:	4620      	mov	r0, r4
 8002570:	210b      	movs	r1, #11
 8002572:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002576:	f7fd be4b 	b.w	8000210 <d_make_comp>
 800257a:	f7fe fa85 	bl	8000a88 <d_type>
 800257e:	2300      	movs	r3, #0
 8002580:	4602      	mov	r2, r0
 8002582:	210e      	movs	r1, #14
 8002584:	4620      	mov	r0, r4
 8002586:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800258a:	f7fd be41 	b.w	8000210 <d_make_comp>
 800258e:	2168      	movs	r1, #104	@ 0x68
 8002590:	f7fd fef0 	bl	8000374 <d_call_offset>
 8002594:	2800      	cmp	r0, #0
 8002596:	f43f ae97 	beq.w	80022c8 <d_special_name+0x68>
 800259a:	68e3      	ldr	r3, [r4, #12]
 800259c:	781b      	ldrb	r3, [r3, #0]
 800259e:	2b47      	cmp	r3, #71	@ 0x47
 80025a0:	f000 80d0 	beq.w	8002744 <d_special_name+0x4e4>
 80025a4:	2b54      	cmp	r3, #84	@ 0x54
 80025a6:	f000 80cd 	beq.w	8002744 <d_special_name+0x4e4>
 80025aa:	2100      	movs	r1, #0
 80025ac:	4620      	mov	r0, r4
 80025ae:	f000 fa47 	bl	8002a40 <d_encoding.part.0>
 80025b2:	4602      	mov	r2, r0
 80025b4:	4620      	mov	r0, r4
 80025b6:	2300      	movs	r3, #0
 80025b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80025bc:	210f      	movs	r1, #15
 80025be:	f7fd be27 	b.w	8000210 <d_make_comp>
 80025c2:	2176      	movs	r1, #118	@ 0x76
 80025c4:	f7fd fed6 	bl	8000374 <d_call_offset>
 80025c8:	2800      	cmp	r0, #0
 80025ca:	f43f ae7d 	beq.w	80022c8 <d_special_name+0x68>
 80025ce:	68e3      	ldr	r3, [r4, #12]
 80025d0:	781b      	ldrb	r3, [r3, #0]
 80025d2:	2b47      	cmp	r3, #71	@ 0x47
 80025d4:	f000 80bb 	beq.w	800274e <d_special_name+0x4ee>
 80025d8:	2b54      	cmp	r3, #84	@ 0x54
 80025da:	f000 80b8 	beq.w	800274e <d_special_name+0x4ee>
 80025de:	2100      	movs	r1, #0
 80025e0:	4620      	mov	r0, r4
 80025e2:	f000 fa2d 	bl	8002a40 <d_encoding.part.0>
 80025e6:	4602      	mov	r2, r0
 80025e8:	4620      	mov	r0, r4
 80025ea:	2300      	movs	r3, #0
 80025ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80025f0:	2110      	movs	r1, #16
 80025f2:	f7fd be0d 	b.w	8000210 <d_make_comp>
 80025f6:	f000 f8c1 	bl	800277c <d_name>
 80025fa:	2300      	movs	r3, #0
 80025fc:	4602      	mov	r2, r0
 80025fe:	2114      	movs	r1, #20
 8002600:	4620      	mov	r0, r4
 8002602:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002606:	f7fd be03 	b.w	8000210 <d_make_comp>
 800260a:	310a      	adds	r1, #10
 800260c:	62c1      	str	r1, [r0, #44]	@ 0x2c
 800260e:	f7fe fa3b 	bl	8000a88 <d_type>
 8002612:	2300      	movs	r3, #0
 8002614:	4602      	mov	r2, r0
 8002616:	210a      	movs	r1, #10
 8002618:	4620      	mov	r0, r4
 800261a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800261e:	f7fd bdf7 	b.w	8000210 <d_make_comp>
 8002622:	310f      	adds	r1, #15
 8002624:	62c1      	str	r1, [r0, #44]	@ 0x2c
 8002626:	f7fe fa2f 	bl	8000a88 <d_type>
 800262a:	2300      	movs	r3, #0
 800262c:	4602      	mov	r2, r0
 800262e:	2109      	movs	r1, #9
 8002630:	4620      	mov	r0, r4
 8002632:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002636:	f7fd bdeb 	b.w	8000210 <d_make_comp>
 800263a:	f000 f89f 	bl	800277c <d_name>
 800263e:	2300      	movs	r3, #0
 8002640:	4602      	mov	r2, r0
 8002642:	2115      	movs	r1, #21
 8002644:	4620      	mov	r0, r4
 8002646:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800264a:	f7fd bde1 	b.w	8000210 <d_make_comp>
 800264e:	2100      	movs	r1, #0
 8002650:	f7fd fe90 	bl	8000374 <d_call_offset>
 8002654:	2800      	cmp	r0, #0
 8002656:	f43f ae37 	beq.w	80022c8 <d_special_name+0x68>
 800265a:	2100      	movs	r1, #0
 800265c:	4620      	mov	r0, r4
 800265e:	f7fd fe89 	bl	8000374 <d_call_offset>
 8002662:	2800      	cmp	r0, #0
 8002664:	f43f ae30 	beq.w	80022c8 <d_special_name+0x68>
 8002668:	68e3      	ldr	r3, [r4, #12]
 800266a:	781b      	ldrb	r3, [r3, #0]
 800266c:	2b47      	cmp	r3, #71	@ 0x47
 800266e:	d078      	beq.n	8002762 <d_special_name+0x502>
 8002670:	2b54      	cmp	r3, #84	@ 0x54
 8002672:	d076      	beq.n	8002762 <d_special_name+0x502>
 8002674:	2100      	movs	r1, #0
 8002676:	4620      	mov	r0, r4
 8002678:	f000 f9e2 	bl	8002a40 <d_encoding.part.0>
 800267c:	4602      	mov	r2, r0
 800267e:	4620      	mov	r0, r4
 8002680:	2300      	movs	r3, #0
 8002682:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002686:	2111      	movs	r1, #17
 8002688:	f7fd bdc2 	b.w	8000210 <d_make_comp>
 800268c:	f7fe f9fc 	bl	8000a88 <d_type>
 8002690:	2300      	movs	r3, #0
 8002692:	4602      	mov	r2, r0
 8002694:	2112      	movs	r1, #18
 8002696:	4620      	mov	r0, r4
 8002698:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800269c:	f7fd bdb8 	b.w	8000210 <d_make_comp>
 80026a0:	f7fe f9f2 	bl	8000a88 <d_type>
 80026a4:	2300      	movs	r3, #0
 80026a6:	4602      	mov	r2, r0
 80026a8:	210c      	movs	r1, #12
 80026aa:	4620      	mov	r0, r4
 80026ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80026b0:	f7fd bdae 	b.w	8000210 <d_make_comp>
 80026b4:	f7fe f9e8 	bl	8000a88 <d_type>
 80026b8:	2300      	movs	r3, #0
 80026ba:	4602      	mov	r2, r0
 80026bc:	210d      	movs	r1, #13
 80026be:	4620      	mov	r0, r4
 80026c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80026c4:	f7fd bda4 	b.w	8000210 <d_make_comp>
 80026c8:	f106 3cff 	add.w	ip, r6, #4294967295	@ 0xffffffff
 80026cc:	2100      	movs	r1, #0
 80026ce:	e004      	b.n	80026da <d_special_name+0x47a>
 80026d0:	2b24      	cmp	r3, #36	@ 0x24
 80026d2:	d006      	beq.n	80026e2 <d_special_name+0x482>
 80026d4:	3101      	adds	r1, #1
 80026d6:	428d      	cmp	r5, r1
 80026d8:	d003      	beq.n	80026e2 <d_special_name+0x482>
 80026da:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d1f6      	bne.n	80026d0 <d_special_name+0x470>
 80026e2:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
 80026e6:	4293      	cmp	r3, r2
 80026e8:	da26      	bge.n	8002738 <d_special_name+0x4d8>
 80026ea:	6927      	ldr	r7, [r4, #16]
 80026ec:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80026f0:	eb07 0c82 	add.w	ip, r7, r2, lsl #2
 80026f4:	3301      	adds	r3, #1
 80026f6:	ea4f 0e82 	mov.w	lr, r2, lsl #2
 80026fa:	2200      	movs	r2, #0
 80026fc:	e9cc 2201 	strd	r2, r2, [ip, #4]
 8002700:	6163      	str	r3, [r4, #20]
 8002702:	2900      	cmp	r1, #0
 8002704:	f43f ade0 	beq.w	80022c8 <d_special_name+0x68>
 8002708:	e9cc 2201 	strd	r2, r2, [ip, #4]
 800270c:	f807 200e 	strb.w	r2, [r7, lr]
 8002710:	f8cc 600c 	str.w	r6, [ip, #12]
 8002714:	68e6      	ldr	r6, [r4, #12]
 8002716:	f8cc 1010 	str.w	r1, [ip, #16]
 800271a:	4602      	mov	r2, r0
 800271c:	1a6d      	subs	r5, r5, r1
 800271e:	4660      	mov	r0, ip
 8002720:	440e      	add	r6, r1
 8002722:	e60d      	b.n	8002340 <d_special_name+0xe0>
 8002724:	212e      	movs	r1, #46	@ 0x2e
 8002726:	e5f3      	b.n	8002310 <d_special_name+0xb0>
 8002728:	212f      	movs	r1, #47	@ 0x2f
 800272a:	e5f1      	b.n	8002310 <d_special_name+0xb0>
 800272c:	2100      	movs	r1, #0
 800272e:	4620      	mov	r0, r4
 8002730:	f000 f986 	bl	8002a40 <d_encoding.part.0>
 8002734:	4602      	mov	r2, r0
 8002736:	e6aa      	b.n	800248e <d_special_name+0x22e>
 8002738:	68e3      	ldr	r3, [r4, #12]
 800273a:	440b      	add	r3, r1
 800273c:	60e3      	str	r3, [r4, #12]
 800273e:	e5c3      	b.n	80022c8 <d_special_name+0x68>
 8002740:	2500      	movs	r5, #0
 8002742:	e6c4      	b.n	80024ce <d_special_name+0x26e>
 8002744:	4620      	mov	r0, r4
 8002746:	f7ff fd8b 	bl	8002260 <d_special_name>
 800274a:	4602      	mov	r2, r0
 800274c:	e732      	b.n	80025b4 <d_special_name+0x354>
 800274e:	4620      	mov	r0, r4
 8002750:	f7ff fd86 	bl	8002260 <d_special_name>
 8002754:	4602      	mov	r2, r0
 8002756:	e747      	b.n	80025e8 <d_special_name+0x388>
 8002758:	4620      	mov	r0, r4
 800275a:	f7ff fd81 	bl	8002260 <d_special_name>
 800275e:	4602      	mov	r2, r0
 8002760:	e6dc      	b.n	800251c <d_special_name+0x2bc>
 8002762:	4620      	mov	r0, r4
 8002764:	f7ff fd7c 	bl	8002260 <d_special_name>
 8002768:	4602      	mov	r2, r0
 800276a:	e788      	b.n	800267e <d_special_name+0x41e>
 800276c:	4602      	mov	r2, r0
 800276e:	2300      	movs	r3, #0
 8002770:	4620      	mov	r0, r4
 8002772:	2140      	movs	r1, #64	@ 0x40
 8002774:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002778:	f7fd bd4a 	b.w	8000210 <d_make_comp>

0800277c <d_name>:
 800277c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800277e:	68c2      	ldr	r2, [r0, #12]
 8002780:	7813      	ldrb	r3, [r2, #0]
 8002782:	3b4e      	subs	r3, #78	@ 0x4e
 8002784:	b085      	sub	sp, #20
 8002786:	4604      	mov	r4, r0
 8002788:	2b0c      	cmp	r3, #12
 800278a:	d808      	bhi.n	800279e <d_name+0x22>
 800278c:	e8df f003 	tbb	[pc, r3]
 8002790:	07070730 	.word	0x07070730
 8002794:	11071607 	.word	0x11071607
 8002798:	07070707 	.word	0x07070707
 800279c:	53          	.byte	0x53
 800279d:	00          	.byte	0x00
 800279e:	f7fe fecf 	bl	8001540 <d_unqualified_name>
 80027a2:	68e3      	ldr	r3, [r4, #12]
 80027a4:	781a      	ldrb	r2, [r3, #0]
 80027a6:	2a49      	cmp	r2, #73	@ 0x49
 80027a8:	4605      	mov	r5, r0
 80027aa:	d07d      	beq.n	80028a8 <d_name+0x12c>
 80027ac:	4628      	mov	r0, r5
 80027ae:	b005      	add	sp, #20
 80027b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80027b2:	b005      	add	sp, #20
 80027b4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80027b8:	f7fe bec2 	b.w	8001540 <d_unqualified_name>
 80027bc:	7853      	ldrb	r3, [r2, #1]
 80027be:	2b74      	cmp	r3, #116	@ 0x74
 80027c0:	f000 8083 	beq.w	80028ca <d_name+0x14e>
 80027c4:	2100      	movs	r1, #0
 80027c6:	f7fe f89b 	bl	8000900 <d_substitution>
 80027ca:	68e3      	ldr	r3, [r4, #12]
 80027cc:	781a      	ldrb	r2, [r3, #0]
 80027ce:	2a49      	cmp	r2, #73	@ 0x49
 80027d0:	4605      	mov	r5, r0
 80027d2:	d1eb      	bne.n	80027ac <d_name+0x30>
 80027d4:	3301      	adds	r3, #1
 80027d6:	60e3      	str	r3, [r4, #12]
 80027d8:	4620      	mov	r0, r4
 80027da:	f7ff f90d 	bl	80019f8 <d_template_args_1>
 80027de:	4603      	mov	r3, r0
 80027e0:	462a      	mov	r2, r5
 80027e2:	2104      	movs	r1, #4
 80027e4:	4620      	mov	r0, r4
 80027e6:	b005      	add	sp, #20
 80027e8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80027ec:	f7fd bd10 	b.w	8000210 <d_make_comp>
 80027f0:	3201      	adds	r2, #1
 80027f2:	60c2      	str	r2, [r0, #12]
 80027f4:	a903      	add	r1, sp, #12
 80027f6:	2201      	movs	r2, #1
 80027f8:	f7ff fc8a 	bl	8002110 <d_cv_qualifiers>
 80027fc:	4605      	mov	r5, r0
 80027fe:	2800      	cmp	r0, #0
 8002800:	f000 809b 	beq.w	800293a <d_name+0x1be>
 8002804:	68e3      	ldr	r3, [r4, #12]
 8002806:	781a      	ldrb	r2, [r3, #0]
 8002808:	2a52      	cmp	r2, #82	@ 0x52
 800280a:	f000 80ef 	beq.w	80029ec <d_name+0x270>
 800280e:	2a4f      	cmp	r2, #79	@ 0x4f
 8002810:	f000 809c 	beq.w	800294c <d_name+0x1d0>
 8002814:	2101      	movs	r1, #1
 8002816:	4620      	mov	r0, r4
 8002818:	f7ff f920 	bl	8001a5c <d_prefix>
 800281c:	6028      	str	r0, [r5, #0]
 800281e:	2800      	cmp	r0, #0
 8002820:	f000 808b 	beq.w	800293a <d_name+0x1be>
 8002824:	68e3      	ldr	r3, [r4, #12]
 8002826:	781a      	ldrb	r2, [r3, #0]
 8002828:	2a45      	cmp	r2, #69	@ 0x45
 800282a:	f040 8086 	bne.w	800293a <d_name+0x1be>
 800282e:	3301      	adds	r3, #1
 8002830:	9d03      	ldr	r5, [sp, #12]
 8002832:	60e3      	str	r3, [r4, #12]
 8002834:	e7ba      	b.n	80027ac <d_name+0x30>
 8002836:	1c53      	adds	r3, r2, #1
 8002838:	60c3      	str	r3, [r0, #12]
 800283a:	7853      	ldrb	r3, [r2, #1]
 800283c:	2b47      	cmp	r3, #71	@ 0x47
 800283e:	d001      	beq.n	8002844 <d_name+0xc8>
 8002840:	2b54      	cmp	r3, #84	@ 0x54
 8002842:	d17e      	bne.n	8002942 <d_name+0x1c6>
 8002844:	4620      	mov	r0, r4
 8002846:	f7ff fd0b 	bl	8002260 <d_special_name>
 800284a:	4605      	mov	r5, r0
 800284c:	2d00      	cmp	r5, #0
 800284e:	d074      	beq.n	800293a <d_name+0x1be>
 8002850:	68e3      	ldr	r3, [r4, #12]
 8002852:	781a      	ldrb	r2, [r3, #0]
 8002854:	2a45      	cmp	r2, #69	@ 0x45
 8002856:	d170      	bne.n	800293a <d_name+0x1be>
 8002858:	1c5a      	adds	r2, r3, #1
 800285a:	60e2      	str	r2, [r4, #12]
 800285c:	785a      	ldrb	r2, [r3, #1]
 800285e:	2a73      	cmp	r2, #115	@ 0x73
 8002860:	f000 80ca 	beq.w	80029f8 <d_name+0x27c>
 8002864:	2a64      	cmp	r2, #100	@ 0x64
 8002866:	f000 808b 	beq.w	8002980 <d_name+0x204>
 800286a:	4620      	mov	r0, r4
 800286c:	f7ff ff86 	bl	800277c <d_name>
 8002870:	4603      	mov	r3, r0
 8002872:	2800      	cmp	r0, #0
 8002874:	f000 80be 	beq.w	80029f4 <d_name+0x278>
 8002878:	7802      	ldrb	r2, [r0, #0]
 800287a:	2a47      	cmp	r2, #71	@ 0x47
 800287c:	d008      	beq.n	8002890 <d_name+0x114>
 800287e:	2a49      	cmp	r2, #73	@ 0x49
 8002880:	d006      	beq.n	8002890 <d_name+0x114>
 8002882:	9001      	str	r0, [sp, #4]
 8002884:	4620      	mov	r0, r4
 8002886:	f7fd fd99 	bl	80003bc <d_discriminator>
 800288a:	9b01      	ldr	r3, [sp, #4]
 800288c:	2800      	cmp	r0, #0
 800288e:	d054      	beq.n	800293a <d_name+0x1be>
 8002890:	782a      	ldrb	r2, [r5, #0]
 8002892:	2a03      	cmp	r2, #3
 8002894:	d105      	bne.n	80028a2 <d_name+0x126>
 8002896:	692a      	ldr	r2, [r5, #16]
 8002898:	7811      	ldrb	r1, [r2, #0]
 800289a:	2929      	cmp	r1, #41	@ 0x29
 800289c:	bf04      	itt	eq
 800289e:	2100      	moveq	r1, #0
 80028a0:	60d1      	streq	r1, [r2, #12]
 80028a2:	462a      	mov	r2, r5
 80028a4:	2102      	movs	r1, #2
 80028a6:	e79d      	b.n	80027e4 <d_name+0x68>
 80028a8:	2800      	cmp	r0, #0
 80028aa:	d046      	beq.n	800293a <d_name+0x1be>
 80028ac:	e9d4 2108 	ldrd	r2, r1, [r4, #32]
 80028b0:	428a      	cmp	r2, r1
 80028b2:	da42      	bge.n	800293a <d_name+0x1be>
 80028b4:	69e1      	ldr	r1, [r4, #28]
 80028b6:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
 80028ba:	3201      	adds	r2, #1
 80028bc:	6222      	str	r2, [r4, #32]
 80028be:	781a      	ldrb	r2, [r3, #0]
 80028c0:	3a49      	subs	r2, #73	@ 0x49
 80028c2:	2a01      	cmp	r2, #1
 80028c4:	d986      	bls.n	80027d4 <d_name+0x58>
 80028c6:	2300      	movs	r3, #0
 80028c8:	e78a      	b.n	80027e0 <d_name+0x64>
 80028ca:	e9d0 3105 	ldrd	r3, r1, [r0, #20]
 80028ce:	3202      	adds	r2, #2
 80028d0:	428b      	cmp	r3, r1
 80028d2:	60c2      	str	r2, [r0, #12]
 80028d4:	f280 80ac 	bge.w	8002a30 <d_name+0x2b4>
 80028d8:	6902      	ldr	r2, [r0, #16]
 80028da:	eb03 0583 	add.w	r5, r3, r3, lsl #2
 80028de:	00a9      	lsls	r1, r5, #2
 80028e0:	3301      	adds	r3, #1
 80028e2:	6143      	str	r3, [r0, #20]
 80028e4:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 80028e8:	2300      	movs	r3, #0
 80028ea:	e9c5 3301 	strd	r3, r3, [r5, #4]
 80028ee:	5453      	strb	r3, [r2, r1]
 80028f0:	4a51      	ldr	r2, [pc, #324]	@ (8002a38 <d_name+0x2bc>)
 80028f2:	2303      	movs	r3, #3
 80028f4:	e9c5 2303 	strd	r2, r3, [r5, #12]
 80028f8:	4620      	mov	r0, r4
 80028fa:	f7fe fe21 	bl	8001540 <d_unqualified_name>
 80028fe:	462a      	mov	r2, r5
 8002900:	4603      	mov	r3, r0
 8002902:	2101      	movs	r1, #1
 8002904:	4620      	mov	r0, r4
 8002906:	f7fd fc83 	bl	8000210 <d_make_comp>
 800290a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800290c:	68e3      	ldr	r3, [r4, #12]
 800290e:	3203      	adds	r2, #3
 8002910:	62e2      	str	r2, [r4, #44]	@ 0x2c
 8002912:	781a      	ldrb	r2, [r3, #0]
 8002914:	2a49      	cmp	r2, #73	@ 0x49
 8002916:	4605      	mov	r5, r0
 8002918:	f47f af48 	bne.w	80027ac <d_name+0x30>
 800291c:	b168      	cbz	r0, 800293a <d_name+0x1be>
 800291e:	e9d4 2108 	ldrd	r2, r1, [r4, #32]
 8002922:	428a      	cmp	r2, r1
 8002924:	da09      	bge.n	800293a <d_name+0x1be>
 8002926:	69e1      	ldr	r1, [r4, #28]
 8002928:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
 800292c:	3201      	adds	r2, #1
 800292e:	6222      	str	r2, [r4, #32]
 8002930:	781a      	ldrb	r2, [r3, #0]
 8002932:	3a49      	subs	r2, #73	@ 0x49
 8002934:	2a01      	cmp	r2, #1
 8002936:	d8c6      	bhi.n	80028c6 <d_name+0x14a>
 8002938:	e74c      	b.n	80027d4 <d_name+0x58>
 800293a:	2500      	movs	r5, #0
 800293c:	4628      	mov	r0, r5
 800293e:	b005      	add	sp, #20
 8002940:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002942:	2100      	movs	r1, #0
 8002944:	f000 f87c 	bl	8002a40 <d_encoding.part.0>
 8002948:	4605      	mov	r5, r0
 800294a:	e77f      	b.n	800284c <d_name+0xd0>
 800294c:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 800294e:	2120      	movs	r1, #32
 8002950:	3003      	adds	r0, #3
 8002952:	1c5a      	adds	r2, r3, #1
 8002954:	2300      	movs	r3, #0
 8002956:	62e0      	str	r0, [r4, #44]	@ 0x2c
 8002958:	60e2      	str	r2, [r4, #12]
 800295a:	4620      	mov	r0, r4
 800295c:	461a      	mov	r2, r3
 800295e:	f7fd fc57 	bl	8000210 <d_make_comp>
 8002962:	2101      	movs	r1, #1
 8002964:	4606      	mov	r6, r0
 8002966:	4620      	mov	r0, r4
 8002968:	f7ff f878 	bl	8001a5c <d_prefix>
 800296c:	6028      	str	r0, [r5, #0]
 800296e:	2800      	cmp	r0, #0
 8002970:	d0e3      	beq.n	800293a <d_name+0x1be>
 8002972:	2e00      	cmp	r6, #0
 8002974:	f43f af56 	beq.w	8002824 <d_name+0xa8>
 8002978:	9b03      	ldr	r3, [sp, #12]
 800297a:	60f3      	str	r3, [r6, #12]
 800297c:	9603      	str	r6, [sp, #12]
 800297e:	e751      	b.n	8002824 <d_name+0xa8>
 8002980:	1c9a      	adds	r2, r3, #2
 8002982:	60e2      	str	r2, [r4, #12]
 8002984:	789b      	ldrb	r3, [r3, #2]
 8002986:	2b5f      	cmp	r3, #95	@ 0x5f
 8002988:	d054      	beq.n	8002a34 <d_name+0x2b8>
 800298a:	2b6e      	cmp	r3, #110	@ 0x6e
 800298c:	d0d5      	beq.n	800293a <d_name+0x1be>
 800298e:	4620      	mov	r0, r4
 8002990:	f7fd fcb6 	bl	8000300 <d_number>
 8002994:	1c46      	adds	r6, r0, #1
 8002996:	d4d0      	bmi.n	800293a <d_name+0x1be>
 8002998:	68e2      	ldr	r2, [r4, #12]
 800299a:	7813      	ldrb	r3, [r2, #0]
 800299c:	2b5f      	cmp	r3, #95	@ 0x5f
 800299e:	d1cc      	bne.n	800293a <d_name+0x1be>
 80029a0:	3201      	adds	r2, #1
 80029a2:	60e2      	str	r2, [r4, #12]
 80029a4:	4620      	mov	r0, r4
 80029a6:	f7ff fee9 	bl	800277c <d_name>
 80029aa:	4607      	mov	r7, r0
 80029ac:	b148      	cbz	r0, 80029c2 <d_name+0x246>
 80029ae:	7803      	ldrb	r3, [r0, #0]
 80029b0:	2b47      	cmp	r3, #71	@ 0x47
 80029b2:	d006      	beq.n	80029c2 <d_name+0x246>
 80029b4:	2b49      	cmp	r3, #73	@ 0x49
 80029b6:	d004      	beq.n	80029c2 <d_name+0x246>
 80029b8:	4620      	mov	r0, r4
 80029ba:	f7fd fcff 	bl	80003bc <d_discriminator>
 80029be:	2800      	cmp	r0, #0
 80029c0:	d0bb      	beq.n	800293a <d_name+0x1be>
 80029c2:	e9d4 2305 	ldrd	r2, r3, [r4, #20]
 80029c6:	429a      	cmp	r2, r3
 80029c8:	da14      	bge.n	80029f4 <d_name+0x278>
 80029ca:	6921      	ldr	r1, [r4, #16]
 80029cc:	eb02 0082 	add.w	r0, r2, r2, lsl #2
 80029d0:	eb01 0380 	add.w	r3, r1, r0, lsl #2
 80029d4:	3201      	adds	r2, #1
 80029d6:	f04f 0c00 	mov.w	ip, #0
 80029da:	e9c3 cc01 	strd	ip, ip, [r3, #4]
 80029de:	6162      	str	r2, [r4, #20]
 80029e0:	2248      	movs	r2, #72	@ 0x48
 80029e2:	f801 2020 	strb.w	r2, [r1, r0, lsl #2]
 80029e6:	e9c3 7603 	strd	r7, r6, [r3, #12]
 80029ea:	e751      	b.n	8002890 <d_name+0x114>
 80029ec:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 80029ee:	211f      	movs	r1, #31
 80029f0:	3002      	adds	r0, #2
 80029f2:	e7ae      	b.n	8002952 <d_name+0x1d6>
 80029f4:	2300      	movs	r3, #0
 80029f6:	e74b      	b.n	8002890 <d_name+0x114>
 80029f8:	3302      	adds	r3, #2
 80029fa:	60e3      	str	r3, [r4, #12]
 80029fc:	4620      	mov	r0, r4
 80029fe:	f7fd fcdd 	bl	80003bc <d_discriminator>
 8002a02:	2800      	cmp	r0, #0
 8002a04:	d099      	beq.n	800293a <d_name+0x1be>
 8002a06:	e9d4 2305 	ldrd	r2, r3, [r4, #20]
 8002a0a:	429a      	cmp	r2, r3
 8002a0c:	daf2      	bge.n	80029f4 <d_name+0x278>
 8002a0e:	6921      	ldr	r1, [r4, #16]
 8002a10:	eb02 0382 	add.w	r3, r2, r2, lsl #2
 8002a14:	0098      	lsls	r0, r3, #2
 8002a16:	3201      	adds	r2, #1
 8002a18:	6162      	str	r2, [r4, #20]
 8002a1a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8002a1e:	2200      	movs	r2, #0
 8002a20:	e9c3 2201 	strd	r2, r2, [r3, #4]
 8002a24:	540a      	strb	r2, [r1, r0]
 8002a26:	4905      	ldr	r1, [pc, #20]	@ (8002a3c <d_name+0x2c0>)
 8002a28:	220e      	movs	r2, #14
 8002a2a:	e9c3 1203 	strd	r1, r2, [r3, #12]
 8002a2e:	e72f      	b.n	8002890 <d_name+0x114>
 8002a30:	2500      	movs	r5, #0
 8002a32:	e761      	b.n	80028f8 <d_name+0x17c>
 8002a34:	2600      	movs	r6, #0
 8002a36:	e7b3      	b.n	80029a0 <d_name+0x224>
 8002a38:	080af10c 	.word	0x080af10c
 8002a3c:	080af0fc 	.word	0x080af0fc

08002a40 <d_encoding.part.0>:
 8002a40:	b570      	push	{r4, r5, r6, lr}
 8002a42:	4605      	mov	r5, r0
 8002a44:	460e      	mov	r6, r1
 8002a46:	f7ff fe99 	bl	800277c <d_name>
 8002a4a:	b300      	cbz	r0, 8002a8e <d_encoding.part.0+0x4e>
 8002a4c:	4604      	mov	r4, r0
 8002a4e:	b30e      	cbz	r6, 8002a94 <d_encoding.part.0+0x54>
 8002a50:	68ab      	ldr	r3, [r5, #8]
 8002a52:	07db      	lsls	r3, r3, #31
 8002a54:	d41e      	bmi.n	8002a94 <d_encoding.part.0+0x54>
 8002a56:	7823      	ldrb	r3, [r4, #0]
 8002a58:	2b4e      	cmp	r3, #78	@ 0x4e
 8002a5a:	f1a3 011c 	sub.w	r1, r3, #28
 8002a5e:	f1a3 0250 	sub.w	r2, r3, #80	@ 0x50
 8002a62:	d03a      	beq.n	8002ada <d_encoding.part.0+0x9a>
 8002a64:	d837      	bhi.n	8002ad6 <d_encoding.part.0+0x96>
 8002a66:	2904      	cmp	r1, #4
 8002a68:	d937      	bls.n	8002ada <d_encoding.part.0+0x9a>
 8002a6a:	2b02      	cmp	r3, #2
 8002a6c:	d110      	bne.n	8002a90 <d_encoding.part.0+0x50>
 8002a6e:	6923      	ldr	r3, [r4, #16]
 8002a70:	b16b      	cbz	r3, 8002a8e <d_encoding.part.0+0x4e>
 8002a72:	781a      	ldrb	r2, [r3, #0]
 8002a74:	2a4e      	cmp	r2, #78	@ 0x4e
 8002a76:	f1a2 001c 	sub.w	r0, r2, #28
 8002a7a:	f1a2 0150 	sub.w	r1, r2, #80	@ 0x50
 8002a7e:	d002      	beq.n	8002a86 <d_encoding.part.0+0x46>
 8002a80:	d83d      	bhi.n	8002afe <d_encoding.part.0+0xbe>
 8002a82:	2804      	cmp	r0, #4
 8002a84:	d804      	bhi.n	8002a90 <d_encoding.part.0+0x50>
 8002a86:	68db      	ldr	r3, [r3, #12]
 8002a88:	6123      	str	r3, [r4, #16]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d1f1      	bne.n	8002a72 <d_encoding.part.0+0x32>
 8002a8e:	2400      	movs	r4, #0
 8002a90:	4620      	mov	r0, r4
 8002a92:	bd70      	pop	{r4, r5, r6, pc}
 8002a94:	68eb      	ldr	r3, [r5, #12]
 8002a96:	781b      	ldrb	r3, [r3, #0]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d0f9      	beq.n	8002a90 <d_encoding.part.0+0x50>
 8002a9c:	2b45      	cmp	r3, #69	@ 0x45
 8002a9e:	d0f7      	beq.n	8002a90 <d_encoding.part.0+0x50>
 8002aa0:	4621      	mov	r1, r4
 8002aa2:	780b      	ldrb	r3, [r1, #0]
 8002aa4:	2b04      	cmp	r3, #4
 8002aa6:	d02d      	beq.n	8002b04 <d_encoding.part.0+0xc4>
 8002aa8:	d81e      	bhi.n	8002ae8 <d_encoding.part.0+0xa8>
 8002aaa:	2b02      	cmp	r3, #2
 8002aac:	d11a      	bne.n	8002ae4 <d_encoding.part.0+0xa4>
 8002aae:	6909      	ldr	r1, [r1, #16]
 8002ab0:	2900      	cmp	r1, #0
 8002ab2:	d1f6      	bne.n	8002aa2 <d_encoding.part.0+0x62>
 8002ab4:	4628      	mov	r0, r5
 8002ab6:	f7fe fc59 	bl	800136c <d_bare_function_type>
 8002aba:	4603      	mov	r3, r0
 8002abc:	2800      	cmp	r0, #0
 8002abe:	d0e6      	beq.n	8002a8e <d_encoding.part.0+0x4e>
 8002ac0:	b916      	cbnz	r6, 8002ac8 <d_encoding.part.0+0x88>
 8002ac2:	7822      	ldrb	r2, [r4, #0]
 8002ac4:	2a02      	cmp	r2, #2
 8002ac6:	d031      	beq.n	8002b2c <d_encoding.part.0+0xec>
 8002ac8:	4622      	mov	r2, r4
 8002aca:	4628      	mov	r0, r5
 8002acc:	2103      	movs	r1, #3
 8002ace:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8002ad2:	f7fd bb9d 	b.w	8000210 <d_make_comp>
 8002ad6:	2a01      	cmp	r2, #1
 8002ad8:	d8da      	bhi.n	8002a90 <d_encoding.part.0+0x50>
 8002ada:	68e4      	ldr	r4, [r4, #12]
 8002adc:	e7bb      	b.n	8002a56 <d_encoding.part.0+0x16>
 8002ade:	3b1c      	subs	r3, #28
 8002ae0:	2b04      	cmp	r3, #4
 8002ae2:	d908      	bls.n	8002af6 <d_encoding.part.0+0xb6>
 8002ae4:	2100      	movs	r1, #0
 8002ae6:	e7e5      	b.n	8002ab4 <d_encoding.part.0+0x74>
 8002ae8:	2b4e      	cmp	r3, #78	@ 0x4e
 8002aea:	f1a3 0250 	sub.w	r2, r3, #80	@ 0x50
 8002aee:	d002      	beq.n	8002af6 <d_encoding.part.0+0xb6>
 8002af0:	d9f5      	bls.n	8002ade <d_encoding.part.0+0x9e>
 8002af2:	2a01      	cmp	r2, #1
 8002af4:	d8f6      	bhi.n	8002ae4 <d_encoding.part.0+0xa4>
 8002af6:	68c9      	ldr	r1, [r1, #12]
 8002af8:	2900      	cmp	r1, #0
 8002afa:	d1d2      	bne.n	8002aa2 <d_encoding.part.0+0x62>
 8002afc:	e7da      	b.n	8002ab4 <d_encoding.part.0+0x74>
 8002afe:	2901      	cmp	r1, #1
 8002b00:	d8c6      	bhi.n	8002a90 <d_encoding.part.0+0x50>
 8002b02:	e7c0      	b.n	8002a86 <d_encoding.part.0+0x46>
 8002b04:	68cb      	ldr	r3, [r1, #12]
 8002b06:	b15b      	cbz	r3, 8002b20 <d_encoding.part.0+0xe0>
 8002b08:	7819      	ldrb	r1, [r3, #0]
 8002b0a:	2908      	cmp	r1, #8
 8002b0c:	f101 32ff 	add.w	r2, r1, #4294967295	@ 0xffffffff
 8002b10:	d808      	bhi.n	8002b24 <d_encoding.part.0+0xe4>
 8002b12:	2906      	cmp	r1, #6
 8002b14:	d8e6      	bhi.n	8002ae4 <d_encoding.part.0+0xa4>
 8002b16:	2a01      	cmp	r2, #1
 8002b18:	d802      	bhi.n	8002b20 <d_encoding.part.0+0xe0>
 8002b1a:	691b      	ldr	r3, [r3, #16]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d1f3      	bne.n	8002b08 <d_encoding.part.0+0xc8>
 8002b20:	2101      	movs	r1, #1
 8002b22:	e7c7      	b.n	8002ab4 <d_encoding.part.0+0x74>
 8002b24:	3935      	subs	r1, #53	@ 0x35
 8002b26:	bf18      	it	ne
 8002b28:	2101      	movne	r1, #1
 8002b2a:	e7c3      	b.n	8002ab4 <d_encoding.part.0+0x74>
 8002b2c:	7802      	ldrb	r2, [r0, #0]
 8002b2e:	2a29      	cmp	r2, #41	@ 0x29
 8002b30:	bf08      	it	eq
 8002b32:	60c6      	streq	r6, [r0, #12]
 8002b34:	e7c8      	b.n	8002ac8 <d_encoding.part.0+0x88>
 8002b36:	bf00      	nop

08002b38 <d_print_comp_inner>:
 8002b38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b3c:	4604      	mov	r4, r0
 8002b3e:	b095      	sub	sp, #84	@ 0x54
 8002b40:	2a00      	cmp	r2, #0
 8002b42:	d072      	beq.n	8002c2a <d_print_comp_inner+0xf2>
 8002b44:	f8d0 6118 	ldr.w	r6, [r0, #280]	@ 0x118
 8002b48:	2e00      	cmp	r6, #0
 8002b4a:	d171      	bne.n	8002c30 <d_print_comp_inner+0xf8>
 8002b4c:	7817      	ldrb	r7, [r2, #0]
 8002b4e:	4615      	mov	r5, r2
 8002b50:	2f51      	cmp	r7, #81	@ 0x51
 8002b52:	d86a      	bhi.n	8002c2a <d_print_comp_inner+0xf2>
 8002b54:	e8df f017 	tbh	[pc, r7, lsl #1]
 8002b58:	01460926 	.word	0x01460926
 8002b5c:	01a10146 	.word	0x01a10146
 8002b60:	02f7052c 	.word	0x02f7052c
 8002b64:	011102ec 	.word	0x011102ec
 8002b68:	0833060a 	.word	0x0833060a
 8002b6c:	0238080d 	.word	0x0238080d
 8002b70:	08940322 	.word	0x08940322
 8002b74:	02120859 	.word	0x02120859
 8002b78:	047e04ba 	.word	0x047e04ba
 8002b7c:	04320458 	.word	0x04320458
 8002b80:	04e00506 	.word	0x04e00506
 8002b84:	02b3017b 	.word	0x02b3017b
 8002b88:	006f0288 	.word	0x006f0288
 8002b8c:	006f006f 	.word	0x006f006f
 8002b90:	008c008c 	.word	0x008c008c
 8002b94:	008c008c 	.word	0x008c008c
 8002b98:	008c008c 	.word	0x008c008c
 8002b9c:	00bf008c 	.word	0x00bf008c
 8002ba0:	008c00bf 	.word	0x008c00bf
 8002ba4:	0951008c 	.word	0x0951008c
 8002ba8:	05e30084 	.word	0x05e30084
 8002bac:	00a90587 	.word	0x00a90587
 8002bb0:	00a90566 	.word	0x00a90566
 8002bb4:	01130113 	.word	0x01130113
 8002bb8:	07d20155 	.word	0x07d20155
 8002bbc:	078207a8 	.word	0x078207a8
 8002bc0:	075c0069 	.word	0x075c0069
 8002bc4:	07f70805 	.word	0x07f70805
 8002bc8:	006908c8 	.word	0x006908c8
 8002bcc:	0069069d 	.word	0x0069069d
 8002bd0:	00e10069 	.word	0x00e10069
 8002bd4:	067a00e1 	.word	0x067a00e1
 8002bd8:	063f0645 	.word	0x063f0645
 8002bdc:	06e008ba 	.word	0x06e008ba
 8002be0:	061901ec 	.word	0x061901ec
 8002be4:	07100736 	.word	0x07100736
 8002be8:	040c0069 	.word	0x040c0069
 8002bec:	03c003e6 	.word	0x03c003e6
 8002bf0:	03480372 	.word	0x03480372
 8002bf4:	025e008c 	.word	0x025e008c
 8002bf8:	008c008c 	.word	0x008c008c
 8002bfc:	4611      	mov	r1, r2
 8002bfe:	f7fd fd0f 	bl	8000620 <d_lookup_template_argument>
 8002c02:	4602      	mov	r2, r0
 8002c04:	b188      	cbz	r0, 8002c2a <d_print_comp_inner+0xf2>
 8002c06:	7803      	ldrb	r3, [r0, #0]
 8002c08:	2b2f      	cmp	r3, #47	@ 0x2f
 8002c0a:	f041 833a 	bne.w	8004282 <d_print_comp_inner+0x174a>
 8002c0e:	f8d4 3124 	ldr.w	r3, [r4, #292]	@ 0x124
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	f2c1 8335 	blt.w	8004282 <d_print_comp_inner+0x174a>
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	f001 832e 	beq.w	800427a <d_print_comp_inner+0x1742>
 8002c1e:	6912      	ldr	r2, [r2, #16]
 8002c20:	3b01      	subs	r3, #1
 8002c22:	b112      	cbz	r2, 8002c2a <d_print_comp_inner+0xf2>
 8002c24:	7811      	ldrb	r1, [r2, #0]
 8002c26:	292f      	cmp	r1, #47	@ 0x2f
 8002c28:	d0f6      	beq.n	8002c18 <d_print_comp_inner+0xe0>
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	f8c4 3118 	str.w	r3, [r4, #280]	@ 0x118
 8002c30:	b015      	add	sp, #84	@ 0x54
 8002c32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002c36:	f8d0 1114 	ldr.w	r1, [r0, #276]	@ 0x114
 8002c3a:	468c      	mov	ip, r1
 8002c3c:	2900      	cmp	r1, #0
 8002c3e:	f001 8753 	beq.w	8004ae8 <d_print_comp_inner+0x1fb0>
 8002c42:	460b      	mov	r3, r1
 8002c44:	e001      	b.n	8002c4a <d_print_comp_inner+0x112>
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	b1a3      	cbz	r3, 8002c74 <d_print_comp_inner+0x13c>
 8002c4a:	689a      	ldr	r2, [r3, #8]
 8002c4c:	2a00      	cmp	r2, #0
 8002c4e:	d1fa      	bne.n	8002c46 <d_print_comp_inner+0x10e>
 8002c50:	685a      	ldr	r2, [r3, #4]
 8002c52:	7812      	ldrb	r2, [r2, #0]
 8002c54:	f1a2 0019 	sub.w	r0, r2, #25
 8002c58:	2802      	cmp	r0, #2
 8002c5a:	d80b      	bhi.n	8002c74 <d_print_comp_inner+0x13c>
 8002c5c:	4297      	cmp	r7, r2
 8002c5e:	d1f2      	bne.n	8002c46 <d_print_comp_inner+0x10e>
 8002c60:	68ea      	ldr	r2, [r5, #12]
 8002c62:	2111      	movs	r1, #17
 8002c64:	4620      	mov	r0, r4
 8002c66:	b015      	add	sp, #84	@ 0x54
 8002c68:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c6c:	f001 bfaa 	b.w	8004bc4 <d_print_comp>
 8002c70:	f8d0 1114 	ldr.w	r1, [r0, #276]	@ 0x114
 8002c74:	f8d4 3110 	ldr.w	r3, [r4, #272]	@ 0x110
 8002c78:	9307      	str	r3, [sp, #28]
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	e9cd 5305 	strd	r5, r3, [sp, #20]
 8002c80:	aa04      	add	r2, sp, #16
 8002c82:	f8c4 2114 	str.w	r2, [r4, #276]	@ 0x114
 8002c86:	9104      	str	r1, [sp, #16]
 8002c88:	68ea      	ldr	r2, [r5, #12]
 8002c8a:	2111      	movs	r1, #17
 8002c8c:	4620      	mov	r0, r4
 8002c8e:	f001 ff99 	bl	8004bc4 <d_print_comp>
 8002c92:	9b06      	ldr	r3, [sp, #24]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	f001 82a5 	beq.w	80041e4 <d_print_comp_inner+0x16ac>
 8002c9a:	9b04      	ldr	r3, [sp, #16]
 8002c9c:	f8c4 3114 	str.w	r3, [r4, #276]	@ 0x114
 8002ca0:	2e00      	cmp	r6, #0
 8002ca2:	d0c5      	beq.n	8002c30 <d_print_comp_inner+0xf8>
 8002ca4:	f8c4 8110 	str.w	r8, [r4, #272]	@ 0x110
 8002ca8:	e7c2      	b.n	8002c30 <d_print_comp_inner+0xf8>
 8002caa:	e9d0 3144 	ldrd	r3, r1, [r0, #272]	@ 0x110
 8002cae:	aa04      	add	r2, sp, #16
 8002cb0:	f8c0 2114 	str.w	r2, [r0, #276]	@ 0x114
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	e9cd 1504 	strd	r1, r5, [sp, #16]
 8002cba:	9206      	str	r2, [sp, #24]
 8002cbc:	2111      	movs	r1, #17
 8002cbe:	692a      	ldr	r2, [r5, #16]
 8002cc0:	9307      	str	r3, [sp, #28]
 8002cc2:	f001 ff7f 	bl	8004bc4 <d_print_comp>
 8002cc6:	9b06      	ldr	r3, [sp, #24]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	f001 8411 	beq.w	80044f0 <d_print_comp_inner+0x19b8>
 8002cce:	9b04      	ldr	r3, [sp, #16]
 8002cd0:	f8c4 3114 	str.w	r3, [r4, #276]	@ 0x114
 8002cd4:	e7ac      	b.n	8002c30 <d_print_comp_inner+0xf8>
 8002cd6:	68d2      	ldr	r2, [r2, #12]
 8002cd8:	f8d0 9120 	ldr.w	r9, [r0, #288]	@ 0x120
 8002cdc:	7813      	ldrb	r3, [r2, #0]
 8002cde:	f1b9 0f00 	cmp.w	r9, #0
 8002ce2:	d103      	bne.n	8002cec <d_print_comp_inner+0x1b4>
 8002ce4:	2b05      	cmp	r3, #5
 8002ce6:	f001 853e 	beq.w	8004766 <d_print_comp_inner+0x1c2e>
 8002cea:	464e      	mov	r6, r9
 8002cec:	4610      	mov	r0, r2
 8002cee:	2b23      	cmp	r3, #35	@ 0x23
 8002cf0:	f001 8410 	beq.w	8004514 <d_print_comp_inner+0x19dc>
 8002cf4:	429f      	cmp	r7, r3
 8002cf6:	f8d4 c114 	ldr.w	ip, [r4, #276]	@ 0x114
 8002cfa:	f001 8449 	beq.w	8004590 <d_print_comp_inner+0x1a58>
 8002cfe:	2b24      	cmp	r3, #36	@ 0x24
 8002d00:	f001 80f4 	beq.w	8003eec <d_print_comp_inner+0x13b4>
 8002d04:	f8d4 3110 	ldr.w	r3, [r4, #272]	@ 0x110
 8002d08:	9307      	str	r3, [sp, #28]
 8002d0a:	ab04      	add	r3, sp, #16
 8002d0c:	f8c4 3114 	str.w	r3, [r4, #276]	@ 0x114
 8002d10:	2300      	movs	r3, #0
 8002d12:	e9cd c504 	strd	ip, r5, [sp, #16]
 8002d16:	9306      	str	r3, [sp, #24]
 8002d18:	e7b7      	b.n	8002c8a <d_print_comp_inner+0x152>
 8002d1a:	68d2      	ldr	r2, [r2, #12]
 8002d1c:	7813      	ldrb	r3, [r2, #0]
 8002d1e:	2b27      	cmp	r3, #39	@ 0x27
 8002d20:	f041 833b 	bne.w	800439a <d_print_comp_inner+0x1862>
 8002d24:	68d3      	ldr	r3, [r2, #12]
 8002d26:	7c1e      	ldrb	r6, [r3, #16]
 8002d28:	2e06      	cmp	r6, #6
 8002d2a:	f201 828c 	bhi.w	8004246 <d_print_comp_inner+0x170e>
 8002d2e:	2e00      	cmp	r6, #0
 8002d30:	f041 8553 	bne.w	80047da <d_print_comp_inner+0x1ca2>
 8002d34:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
 8002d38:	29ff      	cmp	r1, #255	@ 0xff
 8002d3a:	f001 8503 	beq.w	8004744 <d_print_comp_inner+0x1c0c>
 8002d3e:	1c4b      	adds	r3, r1, #1
 8002d40:	f8c4 3100 	str.w	r3, [r4, #256]	@ 0x100
 8002d44:	2328      	movs	r3, #40	@ 0x28
 8002d46:	5463      	strb	r3, [r4, r1]
 8002d48:	4620      	mov	r0, r4
 8002d4a:	2111      	movs	r1, #17
 8002d4c:	f884 3104 	strb.w	r3, [r4, #260]	@ 0x104
 8002d50:	f001 ff38 	bl	8004bc4 <d_print_comp>
 8002d54:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
 8002d58:	29ff      	cmp	r1, #255	@ 0xff
 8002d5a:	f001 84e3 	beq.w	8004724 <d_print_comp_inner+0x1bec>
 8002d5e:	1c4b      	adds	r3, r1, #1
 8002d60:	f8c4 3100 	str.w	r3, [r4, #256]	@ 0x100
 8002d64:	2329      	movs	r3, #41	@ 0x29
 8002d66:	5463      	strb	r3, [r4, r1]
 8002d68:	f884 3104 	strb.w	r3, [r4, #260]	@ 0x104
 8002d6c:	782b      	ldrb	r3, [r5, #0]
 8002d6e:	2b3e      	cmp	r3, #62	@ 0x3e
 8002d70:	f001 84d2 	beq.w	8004718 <d_print_comp_inner+0x1be0>
 8002d74:	2e08      	cmp	r6, #8
 8002d76:	f001 84c3 	beq.w	8004700 <d_print_comp_inner+0x1bc8>
 8002d7a:	692a      	ldr	r2, [r5, #16]
 8002d7c:	e771      	b.n	8002c62 <d_print_comp_inner+0x12a>
 8002d7e:	68d2      	ldr	r2, [r2, #12]
 8002d80:	b112      	cbz	r2, 8002d88 <d_print_comp_inner+0x250>
 8002d82:	2111      	movs	r1, #17
 8002d84:	f001 ff1e 	bl	8004bc4 <d_print_comp>
 8002d88:	692b      	ldr	r3, [r5, #16]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	f43f af50 	beq.w	8002c30 <d_print_comp_inner+0xf8>
 8002d90:	f8d4 6100 	ldr.w	r6, [r4, #256]	@ 0x100
 8002d94:	2efd      	cmp	r6, #253	@ 0xfd
 8002d96:	f201 83e7 	bhi.w	8004568 <d_print_comp_inner+0x1a30>
 8002d9a:	4fcd      	ldr	r7, [pc, #820]	@ (80030d0 <d_print_comp_inner+0x598>)
 8002d9c:	f04f 0900 	mov.w	r9, #0
 8002da0:	f107 0a02 	add.w	sl, r7, #2
 8002da4:	4631      	mov	r1, r6
 8002da6:	e009      	b.n	8002dbc <d_print_comp_inner+0x284>
 8002da8:	460b      	mov	r3, r1
 8002daa:	3101      	adds	r1, #1
 8002dac:	45ba      	cmp	sl, r7
 8002dae:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
 8002db2:	54e6      	strb	r6, [r4, r3]
 8002db4:	f884 6104 	strb.w	r6, [r4, #260]	@ 0x104
 8002db8:	f001 821b 	beq.w	80041f2 <d_print_comp_inner+0x16ba>
 8002dbc:	29ff      	cmp	r1, #255	@ 0xff
 8002dbe:	f817 6b01 	ldrb.w	r6, [r7], #1
 8002dc2:	d1f1      	bne.n	8002da8 <d_print_comp_inner+0x270>
 8002dc4:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
 8002dc8:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
 8002dcc:	f884 90ff 	strb.w	r9, [r4, #255]	@ 0xff
 8002dd0:	4620      	mov	r0, r4
 8002dd2:	4798      	blx	r3
 8002dd4:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
 8002dd8:	3301      	adds	r3, #1
 8002dda:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
 8002dde:	2101      	movs	r1, #1
 8002de0:	2300      	movs	r3, #0
 8002de2:	e7e3      	b.n	8002dac <d_print_comp_inner+0x274>
 8002de4:	68d2      	ldr	r2, [r2, #12]
 8002de6:	2111      	movs	r1, #17
 8002de8:	f001 feec 	bl	8004bc4 <d_print_comp>
 8002dec:	49b9      	ldr	r1, [pc, #740]	@ (80030d4 <d_print_comp_inner+0x59c>)
 8002dee:	4620      	mov	r0, r4
 8002df0:	f7fd fc7a 	bl	80006e8 <d_append_string>
 8002df4:	692f      	ldr	r7, [r5, #16]
 8002df6:	783b      	ldrb	r3, [r7, #0]
 8002df8:	2b48      	cmp	r3, #72	@ 0x48
 8002dfa:	f001 802a 	beq.w	8003e52 <d_print_comp_inner+0x131a>
 8002dfe:	463a      	mov	r2, r7
 8002e00:	e72f      	b.n	8002c62 <d_print_comp_inner+0x12a>
 8002e02:	4eb5      	ldr	r6, [pc, #724]	@ (80030d8 <d_print_comp_inner+0x5a0>)
 8002e04:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
 8002e08:	f106 091e 	add.w	r9, r6, #30
 8002e0c:	f04f 0800 	mov.w	r8, #0
 8002e10:	e009      	b.n	8002e26 <d_print_comp_inner+0x2ee>
 8002e12:	460b      	mov	r3, r1
 8002e14:	3101      	adds	r1, #1
 8002e16:	45b1      	cmp	r9, r6
 8002e18:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
 8002e1c:	54e7      	strb	r7, [r4, r3]
 8002e1e:	f884 7104 	strb.w	r7, [r4, #260]	@ 0x104
 8002e22:	f43f af1d 	beq.w	8002c60 <d_print_comp_inner+0x128>
 8002e26:	29ff      	cmp	r1, #255	@ 0xff
 8002e28:	f816 7f01 	ldrb.w	r7, [r6, #1]!
 8002e2c:	d1f1      	bne.n	8002e12 <d_print_comp_inner+0x2da>
 8002e2e:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
 8002e32:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
 8002e36:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
 8002e3a:	4620      	mov	r0, r4
 8002e3c:	4798      	blx	r3
 8002e3e:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
 8002e42:	3301      	adds	r3, #1
 8002e44:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
 8002e48:	2101      	movs	r1, #1
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	e7e3      	b.n	8002e16 <d_print_comp_inner+0x2de>
 8002e4e:	4ea3      	ldr	r6, [pc, #652]	@ (80030dc <d_print_comp_inner+0x5a4>)
 8002e50:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
 8002e54:	f106 0915 	add.w	r9, r6, #21
 8002e58:	f04f 0800 	mov.w	r8, #0
 8002e5c:	e009      	b.n	8002e72 <d_print_comp_inner+0x33a>
 8002e5e:	460b      	mov	r3, r1
 8002e60:	3101      	adds	r1, #1
 8002e62:	45b1      	cmp	r9, r6
 8002e64:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
 8002e68:	54e7      	strb	r7, [r4, r3]
 8002e6a:	f884 7104 	strb.w	r7, [r4, #260]	@ 0x104
 8002e6e:	f001 80cc 	beq.w	800400a <d_print_comp_inner+0x14d2>
 8002e72:	29ff      	cmp	r1, #255	@ 0xff
 8002e74:	f816 7f01 	ldrb.w	r7, [r6, #1]!
 8002e78:	d1f1      	bne.n	8002e5e <d_print_comp_inner+0x326>
 8002e7a:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
 8002e7e:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
 8002e82:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
 8002e86:	4620      	mov	r0, r4
 8002e88:	4798      	blx	r3
 8002e8a:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
 8002e8e:	3301      	adds	r3, #1
 8002e90:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
 8002e94:	2101      	movs	r1, #1
 8002e96:	2300      	movs	r3, #0
 8002e98:	e7e3      	b.n	8002e62 <d_print_comp_inner+0x32a>
 8002e9a:	68d7      	ldr	r7, [r2, #12]
 8002e9c:	f8d0 9114 	ldr.w	r9, [r0, #276]	@ 0x114
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	f8c0 2114 	str.w	r2, [r0, #276]	@ 0x114
 8002ea6:	2f00      	cmp	r7, #0
 8002ea8:	f43f aebf 	beq.w	8002c2a <d_print_comp_inner+0xf2>
 8002eac:	f10d 0810 	add.w	r8, sp, #16
 8002eb0:	f8d0 1110 	ldr.w	r1, [r0, #272]	@ 0x110
 8002eb4:	4643      	mov	r3, r8
 8002eb6:	4694      	mov	ip, r2
 8002eb8:	4696      	mov	lr, r2
 8002eba:	e9c3 2700 	strd	r2, r7, [r3]
 8002ebe:	e9c3 e102 	strd	lr, r1, [r3, #8]
 8002ec2:	783a      	ldrb	r2, [r7, #0]
 8002ec4:	2a4e      	cmp	r2, #78	@ 0x4e
 8002ec6:	469a      	mov	sl, r3
 8002ec8:	f1a2 0b1c 	sub.w	fp, r2, #28
 8002ecc:	f1a2 0050 	sub.w	r0, r2, #80	@ 0x50
 8002ed0:	f10c 0601 	add.w	r6, ip, #1
 8002ed4:	f001 801d 	beq.w	8003f12 <d_print_comp_inner+0x13da>
 8002ed8:	f201 8018 	bhi.w	8003f0c <d_print_comp_inner+0x13d4>
 8002edc:	f1bb 0f04 	cmp.w	fp, #4
 8002ee0:	f241 8017 	bls.w	8003f12 <d_print_comp_inner+0x13da>
 8002ee4:	f8c4 3114 	str.w	r3, [r4, #276]	@ 0x114
 8002ee8:	783b      	ldrb	r3, [r7, #0]
 8002eea:	2b02      	cmp	r3, #2
 8002eec:	f001 83a2 	beq.w	8004634 <d_print_comp_inner+0x1afc>
 8002ef0:	2b04      	cmp	r3, #4
 8002ef2:	d104      	bne.n	8002efe <d_print_comp_inner+0x3c6>
 8002ef4:	e9cd 1702 	strd	r1, r7, [sp, #8]
 8002ef8:	ab02      	add	r3, sp, #8
 8002efa:	f8c4 3110 	str.w	r3, [r4, #272]	@ 0x110
 8002efe:	692a      	ldr	r2, [r5, #16]
 8002f00:	2111      	movs	r1, #17
 8002f02:	4620      	mov	r0, r4
 8002f04:	f001 fe5e 	bl	8004bc4 <d_print_comp>
 8002f08:	783b      	ldrb	r3, [r7, #0]
 8002f0a:	2b04      	cmp	r3, #4
 8002f0c:	d102      	bne.n	8002f14 <d_print_comp_inner+0x3dc>
 8002f0e:	9b02      	ldr	r3, [sp, #8]
 8002f10:	f8c4 3110 	str.w	r3, [r4, #272]	@ 0x110
 8002f14:	eb08 1506 	add.w	r5, r8, r6, lsl #4
 8002f18:	2720      	movs	r7, #32
 8002f1a:	f855 6c08 	ldr.w	r6, [r5, #-8]
 8002f1e:	2e00      	cmp	r6, #0
 8002f20:	f001 817e 	beq.w	8004220 <d_print_comp_inner+0x16e8>
 8002f24:	3d10      	subs	r5, #16
 8002f26:	45a8      	cmp	r8, r5
 8002f28:	d1f7      	bne.n	8002f1a <d_print_comp_inner+0x3e2>
 8002f2a:	f8c4 9114 	str.w	r9, [r4, #276]	@ 0x114
 8002f2e:	e67f      	b.n	8002c30 <d_print_comp_inner+0xf8>
 8002f30:	4e6b      	ldr	r6, [pc, #428]	@ (80030e0 <d_print_comp_inner+0x5a8>)
 8002f32:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
 8002f36:	f106 090a 	add.w	r9, r6, #10
 8002f3a:	f04f 0800 	mov.w	r8, #0
 8002f3e:	e009      	b.n	8002f54 <d_print_comp_inner+0x41c>
 8002f40:	460b      	mov	r3, r1
 8002f42:	3101      	adds	r1, #1
 8002f44:	45b1      	cmp	r9, r6
 8002f46:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
 8002f4a:	54e7      	strb	r7, [r4, r3]
 8002f4c:	f884 7104 	strb.w	r7, [r4, #260]	@ 0x104
 8002f50:	f001 8059 	beq.w	8004006 <d_print_comp_inner+0x14ce>
 8002f54:	29ff      	cmp	r1, #255	@ 0xff
 8002f56:	f816 7b01 	ldrb.w	r7, [r6], #1
 8002f5a:	d1f1      	bne.n	8002f40 <d_print_comp_inner+0x408>
 8002f5c:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
 8002f60:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
 8002f64:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
 8002f68:	4620      	mov	r0, r4
 8002f6a:	4798      	blx	r3
 8002f6c:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
 8002f70:	3301      	adds	r3, #1
 8002f72:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
 8002f76:	2101      	movs	r1, #1
 8002f78:	2300      	movs	r3, #0
 8002f7a:	e7e3      	b.n	8002f44 <d_print_comp_inner+0x40c>
 8002f7c:	4e59      	ldr	r6, [pc, #356]	@ (80030e4 <d_print_comp_inner+0x5ac>)
 8002f7e:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
 8002f82:	f106 0915 	add.w	r9, r6, #21
 8002f86:	f04f 0800 	mov.w	r8, #0
 8002f8a:	e009      	b.n	8002fa0 <d_print_comp_inner+0x468>
 8002f8c:	460b      	mov	r3, r1
 8002f8e:	3101      	adds	r1, #1
 8002f90:	45b1      	cmp	r9, r6
 8002f92:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
 8002f96:	54e7      	strb	r7, [r4, r3]
 8002f98:	f884 7104 	strb.w	r7, [r4, #260]	@ 0x104
 8002f9c:	f43f ae60 	beq.w	8002c60 <d_print_comp_inner+0x128>
 8002fa0:	29ff      	cmp	r1, #255	@ 0xff
 8002fa2:	f816 7f01 	ldrb.w	r7, [r6, #1]!
 8002fa6:	d1f1      	bne.n	8002f8c <d_print_comp_inner+0x454>
 8002fa8:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
 8002fac:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
 8002fb0:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
 8002fb4:	4620      	mov	r0, r4
 8002fb6:	4798      	blx	r3
 8002fb8:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
 8002fbc:	3301      	adds	r3, #1
 8002fbe:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
 8002fc2:	2101      	movs	r1, #1
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	e7e3      	b.n	8002f90 <d_print_comp_inner+0x458>
 8002fc8:	4e47      	ldr	r6, [pc, #284]	@ (80030e8 <d_print_comp_inner+0x5b0>)
 8002fca:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
 8002fce:	f106 0918 	add.w	r9, r6, #24
 8002fd2:	f04f 0800 	mov.w	r8, #0
 8002fd6:	e009      	b.n	8002fec <d_print_comp_inner+0x4b4>
 8002fd8:	460b      	mov	r3, r1
 8002fda:	3101      	adds	r1, #1
 8002fdc:	454e      	cmp	r6, r9
 8002fde:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
 8002fe2:	54e7      	strb	r7, [r4, r3]
 8002fe4:	f884 7104 	strb.w	r7, [r4, #260]	@ 0x104
 8002fe8:	f000 87a0 	beq.w	8003f2c <d_print_comp_inner+0x13f4>
 8002fec:	29ff      	cmp	r1, #255	@ 0xff
 8002fee:	f816 7f01 	ldrb.w	r7, [r6, #1]!
 8002ff2:	d1f1      	bne.n	8002fd8 <d_print_comp_inner+0x4a0>
 8002ff4:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
 8002ff8:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
 8002ffc:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
 8003000:	4620      	mov	r0, r4
 8003002:	4798      	blx	r3
 8003004:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
 8003008:	3301      	adds	r3, #1
 800300a:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
 800300e:	2101      	movs	r1, #1
 8003010:	2300      	movs	r3, #0
 8003012:	e7e3      	b.n	8002fdc <d_print_comp_inner+0x4a4>
 8003014:	4e35      	ldr	r6, [pc, #212]	@ (80030ec <d_print_comp_inner+0x5b4>)
 8003016:	68d2      	ldr	r2, [r2, #12]
 8003018:	2111      	movs	r1, #17
 800301a:	f001 fdd3 	bl	8004bc4 <d_print_comp>
 800301e:	f106 0908 	add.w	r9, r6, #8
 8003022:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
 8003026:	f04f 0800 	mov.w	r8, #0
 800302a:	e009      	b.n	8003040 <d_print_comp_inner+0x508>
 800302c:	460b      	mov	r3, r1
 800302e:	3101      	adds	r1, #1
 8003030:	45b1      	cmp	r9, r6
 8003032:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
 8003036:	54e7      	strb	r7, [r4, r3]
 8003038:	f884 7104 	strb.w	r7, [r4, #260]	@ 0x104
 800303c:	f000 8743 	beq.w	8003ec6 <d_print_comp_inner+0x138e>
 8003040:	29ff      	cmp	r1, #255	@ 0xff
 8003042:	f816 7f01 	ldrb.w	r7, [r6, #1]!
 8003046:	d1f1      	bne.n	800302c <d_print_comp_inner+0x4f4>
 8003048:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
 800304c:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
 8003050:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
 8003054:	4620      	mov	r0, r4
 8003056:	4798      	blx	r3
 8003058:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
 800305c:	3301      	adds	r3, #1
 800305e:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
 8003062:	2101      	movs	r1, #1
 8003064:	2300      	movs	r3, #0
 8003066:	e7e3      	b.n	8003030 <d_print_comp_inner+0x4f8>
 8003068:	e9d2 5303 	ldrd	r5, r3, [r2, #12]
 800306c:	2b00      	cmp	r3, #0
 800306e:	f43f addf 	beq.w	8002c30 <d_print_comp_inner+0xf8>
 8003072:	442b      	add	r3, r5
 8003074:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
 8003078:	3d01      	subs	r5, #1
 800307a:	1e5f      	subs	r7, r3, #1
 800307c:	f04f 0800 	mov.w	r8, #0
 8003080:	e009      	b.n	8003096 <d_print_comp_inner+0x55e>
 8003082:	460b      	mov	r3, r1
 8003084:	3101      	adds	r1, #1
 8003086:	42af      	cmp	r7, r5
 8003088:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
 800308c:	54e6      	strb	r6, [r4, r3]
 800308e:	f884 6104 	strb.w	r6, [r4, #260]	@ 0x104
 8003092:	f43f adcd 	beq.w	8002c30 <d_print_comp_inner+0xf8>
 8003096:	29ff      	cmp	r1, #255	@ 0xff
 8003098:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800309c:	d1f1      	bne.n	8003082 <d_print_comp_inner+0x54a>
 800309e:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
 80030a2:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
 80030a6:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
 80030aa:	4620      	mov	r0, r4
 80030ac:	4798      	blx	r3
 80030ae:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
 80030b2:	3301      	adds	r3, #1
 80030b4:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
 80030b8:	2101      	movs	r1, #1
 80030ba:	2300      	movs	r3, #0
 80030bc:	e7e3      	b.n	8003086 <d_print_comp_inner+0x54e>
 80030be:	4e0c      	ldr	r6, [pc, #48]	@ (80030f0 <d_print_comp_inner+0x5b8>)
 80030c0:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
 80030c4:	f106 0911 	add.w	r9, r6, #17
 80030c8:	f04f 0800 	mov.w	r8, #0
 80030cc:	e01c      	b.n	8003108 <d_print_comp_inner+0x5d0>
 80030ce:	bf00      	nop
 80030d0:	080af2b8 	.word	0x080af2b8
 80030d4:	080af118 	.word	0x080af118
 80030d8:	080af137 	.word	0x080af137
 80030dc:	080af257 	.word	0x080af257
 80030e0:	080af31c 	.word	0x080af31c
 80030e4:	080af1cb 	.word	0x080af1cb
 80030e8:	080af16f 	.word	0x080af16f
 80030ec:	080af39b 	.word	0x080af39b
 80030f0:	080af26f 	.word	0x080af26f
 80030f4:	460b      	mov	r3, r1
 80030f6:	3101      	adds	r1, #1
 80030f8:	45b1      	cmp	r9, r6
 80030fa:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
 80030fe:	54e7      	strb	r7, [r4, r3]
 8003100:	f884 7104 	strb.w	r7, [r4, #260]	@ 0x104
 8003104:	f43f adac 	beq.w	8002c60 <d_print_comp_inner+0x128>
 8003108:	29ff      	cmp	r1, #255	@ 0xff
 800310a:	f816 7f01 	ldrb.w	r7, [r6, #1]!
 800310e:	d1f1      	bne.n	80030f4 <d_print_comp_inner+0x5bc>
 8003110:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
 8003114:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
 8003118:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
 800311c:	4620      	mov	r0, r4
 800311e:	4798      	blx	r3
 8003120:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
 8003124:	3301      	adds	r3, #1
 8003126:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
 800312a:	2101      	movs	r1, #1
 800312c:	2300      	movs	r3, #0
 800312e:	e7e3      	b.n	80030f8 <d_print_comp_inner+0x5c0>
 8003130:	68d5      	ldr	r5, [r2, #12]
 8003132:	2d00      	cmp	r5, #0
 8003134:	f041 80b2 	bne.w	800429c <d_print_comp_inner+0x1764>
 8003138:	49ca      	ldr	r1, [pc, #808]	@ (8003464 <d_print_comp_inner+0x92c>)
 800313a:	4620      	mov	r0, r4
 800313c:	b015      	add	sp, #84	@ 0x54
 800313e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003142:	f7fd bad1 	b.w	80006e8 <d_append_string>
 8003146:	f8d0 3120 	ldr.w	r3, [r0, #288]	@ 0x120
 800314a:	2b00      	cmp	r3, #0
 800314c:	f43f ad56 	beq.w	8002bfc <d_print_comp_inner+0xc4>
 8003150:	4ec5      	ldr	r6, [pc, #788]	@ (8003468 <d_print_comp_inner+0x930>)
 8003152:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
 8003156:	f106 0905 	add.w	r9, r6, #5
 800315a:	f04f 0800 	mov.w	r8, #0
 800315e:	e009      	b.n	8003174 <d_print_comp_inner+0x63c>
 8003160:	460b      	mov	r3, r1
 8003162:	3101      	adds	r1, #1
 8003164:	45b1      	cmp	r9, r6
 8003166:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
 800316a:	54e7      	strb	r7, [r4, r3]
 800316c:	f884 7104 	strb.w	r7, [r4, #260]	@ 0x104
 8003170:	f001 80e2 	beq.w	8004338 <d_print_comp_inner+0x1800>
 8003174:	29ff      	cmp	r1, #255	@ 0xff
 8003176:	f816 7b01 	ldrb.w	r7, [r6], #1
 800317a:	d1f1      	bne.n	8003160 <d_print_comp_inner+0x628>
 800317c:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
 8003180:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
 8003184:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
 8003188:	4620      	mov	r0, r4
 800318a:	4798      	blx	r3
 800318c:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
 8003190:	3301      	adds	r3, #1
 8003192:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
 8003196:	2101      	movs	r1, #1
 8003198:	2300      	movs	r3, #0
 800319a:	e7e3      	b.n	8003164 <d_print_comp_inner+0x62c>
 800319c:	4eb3      	ldr	r6, [pc, #716]	@ (800346c <d_print_comp_inner+0x934>)
 800319e:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
 80031a2:	f106 090d 	add.w	r9, r6, #13
 80031a6:	f04f 0800 	mov.w	r8, #0
 80031aa:	e009      	b.n	80031c0 <d_print_comp_inner+0x688>
 80031ac:	460b      	mov	r3, r1
 80031ae:	3101      	adds	r1, #1
 80031b0:	454e      	cmp	r6, r9
 80031b2:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
 80031b6:	54e7      	strb	r7, [r4, r3]
 80031b8:	f884 7104 	strb.w	r7, [r4, #260]	@ 0x104
 80031bc:	f43f ad50 	beq.w	8002c60 <d_print_comp_inner+0x128>
 80031c0:	29ff      	cmp	r1, #255	@ 0xff
 80031c2:	f816 7b01 	ldrb.w	r7, [r6], #1
 80031c6:	d1f1      	bne.n	80031ac <d_print_comp_inner+0x674>
 80031c8:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
 80031cc:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
 80031d0:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
 80031d4:	4620      	mov	r0, r4
 80031d6:	4798      	blx	r3
 80031d8:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
 80031dc:	3301      	adds	r3, #1
 80031de:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
 80031e2:	2101      	movs	r1, #1
 80031e4:	2300      	movs	r3, #0
 80031e6:	e7e3      	b.n	80031b0 <d_print_comp_inner+0x678>
 80031e8:	4ea1      	ldr	r6, [pc, #644]	@ (8003470 <d_print_comp_inner+0x938>)
 80031ea:	68d2      	ldr	r2, [r2, #12]
 80031ec:	2111      	movs	r1, #17
 80031ee:	f001 fce9 	bl	8004bc4 <d_print_comp>
 80031f2:	f106 0905 	add.w	r9, r6, #5
 80031f6:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
 80031fa:	f04f 0800 	mov.w	r8, #0
 80031fe:	e009      	b.n	8003214 <d_print_comp_inner+0x6dc>
 8003200:	460b      	mov	r3, r1
 8003202:	3101      	adds	r1, #1
 8003204:	454e      	cmp	r6, r9
 8003206:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
 800320a:	54e7      	strb	r7, [r4, r3]
 800320c:	f884 7104 	strb.w	r7, [r4, #260]	@ 0x104
 8003210:	f000 8659 	beq.w	8003ec6 <d_print_comp_inner+0x138e>
 8003214:	29ff      	cmp	r1, #255	@ 0xff
 8003216:	f816 7b01 	ldrb.w	r7, [r6], #1
 800321a:	d1f1      	bne.n	8003200 <d_print_comp_inner+0x6c8>
 800321c:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
 8003220:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
 8003224:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
 8003228:	4620      	mov	r0, r4
 800322a:	4798      	blx	r3
 800322c:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
 8003230:	3301      	adds	r3, #1
 8003232:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
 8003236:	2101      	movs	r1, #1
 8003238:	2300      	movs	r3, #0
 800323a:	e7e3      	b.n	8003204 <d_print_comp_inner+0x6cc>
 800323c:	f8d2 800c 	ldr.w	r8, [r2, #12]
 8003240:	4641      	mov	r1, r8
 8003242:	f7fd fa07 	bl	8000654 <d_find_pack>
 8003246:	2700      	movs	r7, #0
 8003248:	b930      	cbnz	r0, 8003258 <d_print_comp_inner+0x720>
 800324a:	f001 bb2c 	b.w	80048a6 <d_print_comp_inner+0x1d6e>
 800324e:	68c3      	ldr	r3, [r0, #12]
 8003250:	b12b      	cbz	r3, 800325e <d_print_comp_inner+0x726>
 8003252:	6900      	ldr	r0, [r0, #16]
 8003254:	3701      	adds	r7, #1
 8003256:	b128      	cbz	r0, 8003264 <d_print_comp_inner+0x72c>
 8003258:	7803      	ldrb	r3, [r0, #0]
 800325a:	2b2f      	cmp	r3, #47	@ 0x2f
 800325c:	d0f7      	beq.n	800324e <d_print_comp_inner+0x716>
 800325e:	2f00      	cmp	r7, #0
 8003260:	f43f ace6 	beq.w	8002c30 <d_print_comp_inner+0xf8>
 8003264:	46c3      	mov	fp, r8
 8003266:	f107 39ff 	add.w	r9, r7, #4294967295	@ 0xffffffff
 800326a:	f04f 0a00 	mov.w	sl, #0
 800326e:	46a0      	mov	r8, r4
 8003270:	e003      	b.n	800327a <d_print_comp_inner+0x742>
 8003272:	3601      	adds	r6, #1
 8003274:	42b7      	cmp	r7, r6
 8003276:	f43f acdb 	beq.w	8002c30 <d_print_comp_inner+0xf8>
 800327a:	f8c8 6124 	str.w	r6, [r8, #292]	@ 0x124
 800327e:	465a      	mov	r2, fp
 8003280:	2111      	movs	r1, #17
 8003282:	4640      	mov	r0, r8
 8003284:	f001 fc9e 	bl	8004bc4 <d_print_comp>
 8003288:	454e      	cmp	r6, r9
 800328a:	daf2      	bge.n	8003272 <d_print_comp_inner+0x73a>
 800328c:	4d79      	ldr	r5, [pc, #484]	@ (8003474 <d_print_comp_inner+0x93c>)
 800328e:	9601      	str	r6, [sp, #4]
 8003290:	f8d8 1100 	ldr.w	r1, [r8, #256]	@ 0x100
 8003294:	1cac      	adds	r4, r5, #2
 8003296:	4646      	mov	r6, r8
 8003298:	e00a      	b.n	80032b0 <d_print_comp_inner+0x778>
 800329a:	460b      	mov	r3, r1
 800329c:	3101      	adds	r1, #1
 800329e:	42ac      	cmp	r4, r5
 80032a0:	f8c6 1100 	str.w	r1, [r6, #256]	@ 0x100
 80032a4:	f806 8003 	strb.w	r8, [r6, r3]
 80032a8:	f886 8104 	strb.w	r8, [r6, #260]	@ 0x104
 80032ac:	f000 8607 	beq.w	8003ebe <d_print_comp_inner+0x1386>
 80032b0:	29ff      	cmp	r1, #255	@ 0xff
 80032b2:	f815 8b01 	ldrb.w	r8, [r5], #1
 80032b6:	d1f0      	bne.n	800329a <d_print_comp_inner+0x762>
 80032b8:	f8d6 3108 	ldr.w	r3, [r6, #264]	@ 0x108
 80032bc:	f8d6 210c 	ldr.w	r2, [r6, #268]	@ 0x10c
 80032c0:	f886 a0ff 	strb.w	sl, [r6, #255]	@ 0xff
 80032c4:	4630      	mov	r0, r6
 80032c6:	4798      	blx	r3
 80032c8:	f8d6 3128 	ldr.w	r3, [r6, #296]	@ 0x128
 80032cc:	3301      	adds	r3, #1
 80032ce:	f8c6 3128 	str.w	r3, [r6, #296]	@ 0x128
 80032d2:	2101      	movs	r1, #1
 80032d4:	2300      	movs	r3, #0
 80032d6:	e7e2      	b.n	800329e <d_print_comp_inner+0x766>
 80032d8:	4e67      	ldr	r6, [pc, #412]	@ (8003478 <d_print_comp_inner+0x940>)
 80032da:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
 80032de:	f106 091a 	add.w	r9, r6, #26
 80032e2:	f04f 0800 	mov.w	r8, #0
 80032e6:	e009      	b.n	80032fc <d_print_comp_inner+0x7c4>
 80032e8:	460b      	mov	r3, r1
 80032ea:	3101      	adds	r1, #1
 80032ec:	454e      	cmp	r6, r9
 80032ee:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
 80032f2:	54e7      	strb	r7, [r4, r3]
 80032f4:	f884 7104 	strb.w	r7, [r4, #260]	@ 0x104
 80032f8:	f43f acb2 	beq.w	8002c60 <d_print_comp_inner+0x128>
 80032fc:	29ff      	cmp	r1, #255	@ 0xff
 80032fe:	f816 7f01 	ldrb.w	r7, [r6, #1]!
 8003302:	d1f1      	bne.n	80032e8 <d_print_comp_inner+0x7b0>
 8003304:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
 8003308:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
 800330c:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
 8003310:	4620      	mov	r0, r4
 8003312:	4798      	blx	r3
 8003314:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
 8003318:	3301      	adds	r3, #1
 800331a:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
 800331e:	2101      	movs	r1, #1
 8003320:	2300      	movs	r3, #0
 8003322:	e7e3      	b.n	80032ec <d_print_comp_inner+0x7b4>
 8003324:	4e55      	ldr	r6, [pc, #340]	@ (800347c <d_print_comp_inner+0x944>)
 8003326:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
 800332a:	f106 0916 	add.w	r9, r6, #22
 800332e:	f04f 0800 	mov.w	r8, #0
 8003332:	e009      	b.n	8003348 <d_print_comp_inner+0x810>
 8003334:	460b      	mov	r3, r1
 8003336:	3101      	adds	r1, #1
 8003338:	454e      	cmp	r6, r9
 800333a:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
 800333e:	54e7      	strb	r7, [r4, r3]
 8003340:	f884 7104 	strb.w	r7, [r4, #260]	@ 0x104
 8003344:	f43f ac8c 	beq.w	8002c60 <d_print_comp_inner+0x128>
 8003348:	29ff      	cmp	r1, #255	@ 0xff
 800334a:	f816 7f01 	ldrb.w	r7, [r6, #1]!
 800334e:	d1f1      	bne.n	8003334 <d_print_comp_inner+0x7fc>
 8003350:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
 8003354:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
 8003358:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
 800335c:	4620      	mov	r0, r4
 800335e:	4798      	blx	r3
 8003360:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
 8003364:	3301      	adds	r3, #1
 8003366:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
 800336a:	2101      	movs	r1, #1
 800336c:	2300      	movs	r3, #0
 800336e:	e7e3      	b.n	8003338 <d_print_comp_inner+0x800>
 8003370:	4e43      	ldr	r6, [pc, #268]	@ (8003480 <d_print_comp_inner+0x948>)
 8003372:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
 8003376:	f106 090e 	add.w	r9, r6, #14
 800337a:	f04f 0800 	mov.w	r8, #0
 800337e:	e009      	b.n	8003394 <d_print_comp_inner+0x85c>
 8003380:	460b      	mov	r3, r1
 8003382:	3101      	adds	r1, #1
 8003384:	454e      	cmp	r6, r9
 8003386:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
 800338a:	54e7      	strb	r7, [r4, r3]
 800338c:	f884 7104 	strb.w	r7, [r4, #260]	@ 0x104
 8003390:	f000 8666 	beq.w	8004060 <d_print_comp_inner+0x1528>
 8003394:	29ff      	cmp	r1, #255	@ 0xff
 8003396:	f816 7f01 	ldrb.w	r7, [r6, #1]!
 800339a:	d1f1      	bne.n	8003380 <d_print_comp_inner+0x848>
 800339c:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
 80033a0:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
 80033a4:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
 80033a8:	4620      	mov	r0, r4
 80033aa:	4798      	blx	r3
 80033ac:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
 80033b0:	3301      	adds	r3, #1
 80033b2:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
 80033b6:	2101      	movs	r1, #1
 80033b8:	2300      	movs	r3, #0
 80033ba:	e7e3      	b.n	8003384 <d_print_comp_inner+0x84c>
 80033bc:	4e31      	ldr	r6, [pc, #196]	@ (8003484 <d_print_comp_inner+0x94c>)
 80033be:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
 80033c2:	f106 0913 	add.w	r9, r6, #19
 80033c6:	f04f 0800 	mov.w	r8, #0
 80033ca:	e009      	b.n	80033e0 <d_print_comp_inner+0x8a8>
 80033cc:	460b      	mov	r3, r1
 80033ce:	3101      	adds	r1, #1
 80033d0:	45b1      	cmp	r9, r6
 80033d2:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
 80033d6:	54e7      	strb	r7, [r4, r3]
 80033d8:	f884 7104 	strb.w	r7, [r4, #260]	@ 0x104
 80033dc:	f43f ac40 	beq.w	8002c60 <d_print_comp_inner+0x128>
 80033e0:	29ff      	cmp	r1, #255	@ 0xff
 80033e2:	f816 7f01 	ldrb.w	r7, [r6, #1]!
 80033e6:	d1f1      	bne.n	80033cc <d_print_comp_inner+0x894>
 80033e8:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
 80033ec:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
 80033f0:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
 80033f4:	4620      	mov	r0, r4
 80033f6:	4798      	blx	r3
 80033f8:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
 80033fc:	3301      	adds	r3, #1
 80033fe:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
 8003402:	2101      	movs	r1, #1
 8003404:	2300      	movs	r3, #0
 8003406:	e7e3      	b.n	80033d0 <d_print_comp_inner+0x898>
 8003408:	4e1f      	ldr	r6, [pc, #124]	@ (8003488 <d_print_comp_inner+0x950>)
 800340a:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
 800340e:	f106 090f 	add.w	r9, r6, #15
 8003412:	f04f 0800 	mov.w	r8, #0
 8003416:	e009      	b.n	800342c <d_print_comp_inner+0x8f4>
 8003418:	460b      	mov	r3, r1
 800341a:	3101      	adds	r1, #1
 800341c:	45b1      	cmp	r9, r6
 800341e:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
 8003422:	54e7      	strb	r7, [r4, r3]
 8003424:	f884 7104 	strb.w	r7, [r4, #260]	@ 0x104
 8003428:	f43f ac1a 	beq.w	8002c60 <d_print_comp_inner+0x128>
 800342c:	29ff      	cmp	r1, #255	@ 0xff
 800342e:	f816 7f01 	ldrb.w	r7, [r6, #1]!
 8003432:	d1f1      	bne.n	8003418 <d_print_comp_inner+0x8e0>
 8003434:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
 8003438:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
 800343c:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
 8003440:	4620      	mov	r0, r4
 8003442:	4798      	blx	r3
 8003444:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
 8003448:	3301      	adds	r3, #1
 800344a:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
 800344e:	2101      	movs	r1, #1
 8003450:	2300      	movs	r3, #0
 8003452:	e7e3      	b.n	800341c <d_print_comp_inner+0x8e4>
 8003454:	4e0d      	ldr	r6, [pc, #52]	@ (800348c <d_print_comp_inner+0x954>)
 8003456:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
 800345a:	f106 091a 	add.w	r9, r6, #26
 800345e:	f04f 0800 	mov.w	r8, #0
 8003462:	e01f      	b.n	80034a4 <d_print_comp_inner+0x96c>
 8003464:	080af32c 	.word	0x080af32c
 8003468:	080af130 	.word	0x080af130
 800346c:	080af194 	.word	0x080af194
 8003470:	080af110 	.word	0x080af110
 8003474:	080af2b8 	.word	0x080af2b8
 8003478:	080af283 	.word	0x080af283
 800347c:	080af287 	.word	0x080af287
 8003480:	080af38b 	.word	0x080af38b
 8003484:	080af20f 	.word	0x080af20f
 8003488:	080af1ff 	.word	0x080af1ff
 800348c:	080af1e3 	.word	0x080af1e3
 8003490:	460b      	mov	r3, r1
 8003492:	3101      	adds	r1, #1
 8003494:	45b1      	cmp	r9, r6
 8003496:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
 800349a:	54e7      	strb	r7, [r4, r3]
 800349c:	f884 7104 	strb.w	r7, [r4, #260]	@ 0x104
 80034a0:	f43f abde 	beq.w	8002c60 <d_print_comp_inner+0x128>
 80034a4:	29ff      	cmp	r1, #255	@ 0xff
 80034a6:	f816 7f01 	ldrb.w	r7, [r6, #1]!
 80034aa:	d1f1      	bne.n	8003490 <d_print_comp_inner+0x958>
 80034ac:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
 80034b0:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
 80034b4:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
 80034b8:	4620      	mov	r0, r4
 80034ba:	4798      	blx	r3
 80034bc:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
 80034c0:	3301      	adds	r3, #1
 80034c2:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
 80034c6:	2101      	movs	r1, #1
 80034c8:	2300      	movs	r3, #0
 80034ca:	e7e3      	b.n	8003494 <d_print_comp_inner+0x95c>
 80034cc:	4ec9      	ldr	r6, [pc, #804]	@ (80037f4 <d_print_comp_inner+0xcbc>)
 80034ce:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
 80034d2:	f106 0911 	add.w	r9, r6, #17
 80034d6:	f04f 0800 	mov.w	r8, #0
 80034da:	e009      	b.n	80034f0 <d_print_comp_inner+0x9b8>
 80034dc:	460b      	mov	r3, r1
 80034de:	3101      	adds	r1, #1
 80034e0:	45b1      	cmp	r9, r6
 80034e2:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
 80034e6:	54e7      	strb	r7, [r4, r3]
 80034e8:	f884 7104 	strb.w	r7, [r4, #260]	@ 0x104
 80034ec:	f43f abb8 	beq.w	8002c60 <d_print_comp_inner+0x128>
 80034f0:	29ff      	cmp	r1, #255	@ 0xff
 80034f2:	f816 7f01 	ldrb.w	r7, [r6, #1]!
 80034f6:	d1f1      	bne.n	80034dc <d_print_comp_inner+0x9a4>
 80034f8:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
 80034fc:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
 8003500:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
 8003504:	4620      	mov	r0, r4
 8003506:	4798      	blx	r3
 8003508:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
 800350c:	3301      	adds	r3, #1
 800350e:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
 8003512:	2101      	movs	r1, #1
 8003514:	2300      	movs	r3, #0
 8003516:	e7e3      	b.n	80034e0 <d_print_comp_inner+0x9a8>
 8003518:	4eb7      	ldr	r6, [pc, #732]	@ (80037f8 <d_print_comp_inner+0xcc0>)
 800351a:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
 800351e:	f106 0919 	add.w	r9, r6, #25
 8003522:	f04f 0800 	mov.w	r8, #0
 8003526:	e009      	b.n	800353c <d_print_comp_inner+0xa04>
 8003528:	460b      	mov	r3, r1
 800352a:	3101      	adds	r1, #1
 800352c:	454e      	cmp	r6, r9
 800352e:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
 8003532:	54e7      	strb	r7, [r4, r3]
 8003534:	f884 7104 	strb.w	r7, [r4, #260]	@ 0x104
 8003538:	f43f ab92 	beq.w	8002c60 <d_print_comp_inner+0x128>
 800353c:	29ff      	cmp	r1, #255	@ 0xff
 800353e:	f816 7f01 	ldrb.w	r7, [r6, #1]!
 8003542:	d1f1      	bne.n	8003528 <d_print_comp_inner+0x9f0>
 8003544:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
 8003548:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
 800354c:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
 8003550:	4620      	mov	r0, r4
 8003552:	4798      	blx	r3
 8003554:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
 8003558:	3301      	adds	r3, #1
 800355a:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
 800355e:	2101      	movs	r1, #1
 8003560:	2300      	movs	r3, #0
 8003562:	e7e3      	b.n	800352c <d_print_comp_inner+0x9f4>
 8003564:	4ea5      	ldr	r6, [pc, #660]	@ (80037fc <d_print_comp_inner+0xcc4>)
 8003566:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
 800356a:	f106 0916 	add.w	r9, r6, #22
 800356e:	f04f 0800 	mov.w	r8, #0
 8003572:	e009      	b.n	8003588 <d_print_comp_inner+0xa50>
 8003574:	460b      	mov	r3, r1
 8003576:	3101      	adds	r1, #1
 8003578:	45b1      	cmp	r9, r6
 800357a:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
 800357e:	54e7      	strb	r7, [r4, r3]
 8003580:	f884 7104 	strb.w	r7, [r4, #260]	@ 0x104
 8003584:	f43f ab6c 	beq.w	8002c60 <d_print_comp_inner+0x128>
 8003588:	29ff      	cmp	r1, #255	@ 0xff
 800358a:	f816 7f01 	ldrb.w	r7, [r6, #1]!
 800358e:	d1f1      	bne.n	8003574 <d_print_comp_inner+0xa3c>
 8003590:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
 8003594:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
 8003598:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
 800359c:	4620      	mov	r0, r4
 800359e:	4798      	blx	r3
 80035a0:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
 80035a4:	3301      	adds	r3, #1
 80035a6:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
 80035aa:	2101      	movs	r1, #1
 80035ac:	2300      	movs	r3, #0
 80035ae:	e7e3      	b.n	8003578 <d_print_comp_inner+0xa40>
 80035b0:	2300      	movs	r3, #0
 80035b2:	f8d0 6114 	ldr.w	r6, [r0, #276]	@ 0x114
 80035b6:	f8d0 7148 	ldr.w	r7, [r0, #328]	@ 0x148
 80035ba:	f8c4 2148 	str.w	r2, [r4, #328]	@ 0x148
 80035be:	2111      	movs	r1, #17
 80035c0:	f8c0 3114 	str.w	r3, [r0, #276]	@ 0x114
 80035c4:	68d2      	ldr	r2, [r2, #12]
 80035c6:	f001 fafd 	bl	8004bc4 <d_print_comp>
 80035ca:	f894 3104 	ldrb.w	r3, [r4, #260]	@ 0x104
 80035ce:	2b3c      	cmp	r3, #60	@ 0x3c
 80035d0:	f001 8090 	beq.w	80046f4 <d_print_comp_inner+0x1bbc>
 80035d4:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
 80035d8:	29ff      	cmp	r1, #255	@ 0xff
 80035da:	f001 807a 	beq.w	80046d2 <d_print_comp_inner+0x1b9a>
 80035de:	1c4b      	adds	r3, r1, #1
 80035e0:	f8c4 3100 	str.w	r3, [r4, #256]	@ 0x100
 80035e4:	233c      	movs	r3, #60	@ 0x3c
 80035e6:	5463      	strb	r3, [r4, r1]
 80035e8:	f884 3104 	strb.w	r3, [r4, #260]	@ 0x104
 80035ec:	692a      	ldr	r2, [r5, #16]
 80035ee:	2111      	movs	r1, #17
 80035f0:	4620      	mov	r0, r4
 80035f2:	f001 fae7 	bl	8004bc4 <d_print_comp>
 80035f6:	f894 3104 	ldrb.w	r3, [r4, #260]	@ 0x104
 80035fa:	2b3e      	cmp	r3, #62	@ 0x3e
 80035fc:	f001 8063 	beq.w	80046c6 <d_print_comp_inner+0x1b8e>
 8003600:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
 8003604:	29ff      	cmp	r1, #255	@ 0xff
 8003606:	f001 804e 	beq.w	80046a6 <d_print_comp_inner+0x1b6e>
 800360a:	1c4b      	adds	r3, r1, #1
 800360c:	f8c4 3100 	str.w	r3, [r4, #256]	@ 0x100
 8003610:	233e      	movs	r3, #62	@ 0x3e
 8003612:	5463      	strb	r3, [r4, r1]
 8003614:	f884 3104 	strb.w	r3, [r4, #260]	@ 0x104
 8003618:	f8c4 6114 	str.w	r6, [r4, #276]	@ 0x114
 800361c:	f8c4 7148 	str.w	r7, [r4, #328]	@ 0x148
 8003620:	f7ff bb06 	b.w	8002c30 <d_print_comp_inner+0xf8>
 8003624:	f9b2 3012 	ldrsh.w	r3, [r2, #18]
 8003628:	2b00      	cmp	r3, #0
 800362a:	f040 875c 	bne.w	80044e6 <d_print_comp_inner+0x19ae>
 800362e:	68ea      	ldr	r2, [r5, #12]
 8003630:	4b73      	ldr	r3, [pc, #460]	@ (8003800 <d_print_comp_inner+0xcc8>)
 8003632:	68d1      	ldr	r1, [r2, #12]
 8003634:	4299      	cmp	r1, r3
 8003636:	d00f      	beq.n	8003658 <d_print_comp_inner+0xb20>
 8003638:	2111      	movs	r1, #17
 800363a:	4620      	mov	r0, r4
 800363c:	f001 fac2 	bl	8004bc4 <d_print_comp>
 8003640:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
 8003644:	29ff      	cmp	r1, #255	@ 0xff
 8003646:	f001 8136 	beq.w	80048b6 <d_print_comp_inner+0x1d7e>
 800364a:	2320      	movs	r3, #32
 800364c:	1c4a      	adds	r2, r1, #1
 800364e:	f8c4 2100 	str.w	r2, [r4, #256]	@ 0x100
 8003652:	5463      	strb	r3, [r4, r1]
 8003654:	f884 3104 	strb.w	r3, [r4, #260]	@ 0x104
 8003658:	f9b5 3010 	ldrsh.w	r3, [r5, #16]
 800365c:	2b00      	cmp	r3, #0
 800365e:	f000 865b 	beq.w	8004318 <d_print_comp_inner+0x17e0>
 8003662:	4968      	ldr	r1, [pc, #416]	@ (8003804 <d_print_comp_inner+0xccc>)
 8003664:	e569      	b.n	800313a <d_print_comp_inner+0x602>
 8003666:	f8d0 c114 	ldr.w	ip, [r0, #276]	@ 0x114
 800366a:	f8d0 3110 	ldr.w	r3, [r0, #272]	@ 0x110
 800366e:	9307      	str	r3, [sp, #28]
 8003670:	f10d 0810 	add.w	r8, sp, #16
 8003674:	2300      	movs	r3, #0
 8003676:	46e1      	mov	r9, ip
 8003678:	f8cd c010 	str.w	ip, [sp, #16]
 800367c:	f8c0 8114 	str.w	r8, [r0, #276]	@ 0x114
 8003680:	9205      	str	r2, [sp, #20]
 8003682:	9306      	str	r3, [sp, #24]
 8003684:	f1bc 0f00 	cmp.w	ip, #0
 8003688:	f001 8209 	beq.w	8004a9e <d_print_comp_inner+0x1f66>
 800368c:	2701      	movs	r7, #1
 800368e:	4666      	mov	r6, ip
 8003690:	46be      	mov	lr, r7
 8003692:	4694      	mov	ip, r2
 8003694:	4645      	mov	r5, r8
 8003696:	e018      	b.n	80036ca <d_print_comp_inner+0xb92>
 8003698:	68b3      	ldr	r3, [r6, #8]
 800369a:	b9a3      	cbnz	r3, 80036c6 <d_print_comp_inner+0xb8e>
 800369c:	2f03      	cmp	r7, #3
 800369e:	f63f aac4 	bhi.w	8002c2a <d_print_comp_inner+0xf2>
 80036a2:	ab14      	add	r3, sp, #80	@ 0x50
 80036a4:	eb03 1b07 	add.w	fp, r3, r7, lsl #4
 80036a8:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80036ac:	f1ab 0a40 	sub.w	sl, fp, #64	@ 0x40
 80036b0:	e88a 000f 	stmia.w	sl, {r0, r1, r2, r3}
 80036b4:	f84b 5c40 	str.w	r5, [fp, #-64]
 80036b8:	eb08 1507 	add.w	r5, r8, r7, lsl #4
 80036bc:	f8c4 5114 	str.w	r5, [r4, #276]	@ 0x114
 80036c0:	3701      	adds	r7, #1
 80036c2:	f8c6 e008 	str.w	lr, [r6, #8]
 80036c6:	6836      	ldr	r6, [r6, #0]
 80036c8:	b126      	cbz	r6, 80036d4 <d_print_comp_inner+0xb9c>
 80036ca:	6873      	ldr	r3, [r6, #4]
 80036cc:	781b      	ldrb	r3, [r3, #0]
 80036ce:	3b19      	subs	r3, #25
 80036d0:	2b02      	cmp	r3, #2
 80036d2:	d9e1      	bls.n	8003698 <d_print_comp_inner+0xb60>
 80036d4:	f8dc 2010 	ldr.w	r2, [ip, #16]
 80036d8:	2111      	movs	r1, #17
 80036da:	4620      	mov	r0, r4
 80036dc:	4665      	mov	r5, ip
 80036de:	f001 fa71 	bl	8004bc4 <d_print_comp>
 80036e2:	9b06      	ldr	r3, [sp, #24]
 80036e4:	f8c4 9114 	str.w	r9, [r4, #276]	@ 0x114
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	f47f aaa1 	bne.w	8002c30 <d_print_comp_inner+0xf8>
 80036ee:	2f01      	cmp	r7, #1
 80036f0:	d00c      	beq.n	800370c <d_print_comp_inner+0xbd4>
 80036f2:	eb08 1807 	add.w	r8, r8, r7, lsl #4
 80036f6:	f858 2c0c 	ldr.w	r2, [r8, #-12]
 80036fa:	3f01      	subs	r7, #1
 80036fc:	2111      	movs	r1, #17
 80036fe:	4620      	mov	r0, r4
 8003700:	f001 fa8e 	bl	8004c20 <d_print_mod>
 8003704:	2f01      	cmp	r7, #1
 8003706:	f1a8 0810 	sub.w	r8, r8, #16
 800370a:	d1f4      	bne.n	80036f6 <d_print_comp_inner+0xbbe>
 800370c:	f8d4 3114 	ldr.w	r3, [r4, #276]	@ 0x114
 8003710:	462a      	mov	r2, r5
 8003712:	2111      	movs	r1, #17
 8003714:	4620      	mov	r0, r4
 8003716:	f001 ff8d 	bl	8005634 <d_print_array_type>
 800371a:	f7ff ba89 	b.w	8002c30 <d_print_comp_inner+0xf8>
 800371e:	68d2      	ldr	r2, [r2, #12]
 8003720:	f8d0 c114 	ldr.w	ip, [r0, #276]	@ 0x114
 8003724:	b1ca      	cbz	r2, 800375a <d_print_comp_inner+0xc22>
 8003726:	ab04      	add	r3, sp, #16
 8003728:	f8c0 3114 	str.w	r3, [r0, #276]	@ 0x114
 800372c:	2300      	movs	r3, #0
 800372e:	9306      	str	r3, [sp, #24]
 8003730:	2111      	movs	r1, #17
 8003732:	f8d0 3110 	ldr.w	r3, [r0, #272]	@ 0x110
 8003736:	9307      	str	r3, [sp, #28]
 8003738:	e9cd c504 	strd	ip, r5, [sp, #16]
 800373c:	f001 fa42 	bl	8004bc4 <d_print_comp>
 8003740:	9b06      	ldr	r3, [sp, #24]
 8003742:	9a04      	ldr	r2, [sp, #16]
 8003744:	f8c4 2114 	str.w	r2, [r4, #276]	@ 0x114
 8003748:	2b00      	cmp	r3, #0
 800374a:	f47f aa71 	bne.w	8002c30 <d_print_comp_inner+0xf8>
 800374e:	2120      	movs	r1, #32
 8003750:	4620      	mov	r0, r4
 8003752:	f7fc ff43 	bl	80005dc <d_append_char>
 8003756:	f8d4 c114 	ldr.w	ip, [r4, #276]	@ 0x114
 800375a:	4663      	mov	r3, ip
 800375c:	462a      	mov	r2, r5
 800375e:	2111      	movs	r1, #17
 8003760:	4620      	mov	r0, r4
 8003762:	b015      	add	sp, #84	@ 0x54
 8003764:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003768:	f001 bd68 	b.w	800523c <d_print_function_type>
 800376c:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
 8003770:	29ff      	cmp	r1, #255	@ 0xff
 8003772:	f000 8711 	beq.w	8004598 <d_print_comp_inner+0x1a60>
 8003776:	1c4a      	adds	r2, r1, #1
 8003778:	237e      	movs	r3, #126	@ 0x7e
 800377a:	f8c4 2100 	str.w	r2, [r4, #256]	@ 0x100
 800377e:	5463      	strb	r3, [r4, r1]
 8003780:	f884 3104 	strb.w	r3, [r4, #260]	@ 0x104
 8003784:	692a      	ldr	r2, [r5, #16]
 8003786:	f7ff ba6c 	b.w	8002c62 <d_print_comp_inner+0x12a>
 800378a:	4e1f      	ldr	r6, [pc, #124]	@ (8003808 <d_print_comp_inner+0xcd0>)
 800378c:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
 8003790:	f106 091d 	add.w	r9, r6, #29
 8003794:	f04f 0800 	mov.w	r8, #0
 8003798:	e009      	b.n	80037ae <d_print_comp_inner+0xc76>
 800379a:	460b      	mov	r3, r1
 800379c:	3101      	adds	r1, #1
 800379e:	45b1      	cmp	r9, r6
 80037a0:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
 80037a4:	54e7      	strb	r7, [r4, r3]
 80037a6:	f884 7104 	strb.w	r7, [r4, #260]	@ 0x104
 80037aa:	f43f aa59 	beq.w	8002c60 <d_print_comp_inner+0x128>
 80037ae:	29ff      	cmp	r1, #255	@ 0xff
 80037b0:	f816 7f01 	ldrb.w	r7, [r6, #1]!
 80037b4:	d1f1      	bne.n	800379a <d_print_comp_inner+0xc62>
 80037b6:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
 80037ba:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
 80037be:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
 80037c2:	4620      	mov	r0, r4
 80037c4:	4798      	blx	r3
 80037c6:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
 80037ca:	3301      	adds	r3, #1
 80037cc:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
 80037d0:	2101      	movs	r1, #1
 80037d2:	2300      	movs	r3, #0
 80037d4:	e7e3      	b.n	800379e <d_print_comp_inner+0xc66>
 80037d6:	68d2      	ldr	r2, [r2, #12]
 80037d8:	2111      	movs	r1, #17
 80037da:	f001 f9f3 	bl	8004bc4 <d_print_comp>
 80037de:	f7ff bacc 	b.w	8002d7a <d_print_comp_inner+0x242>
 80037e2:	4e0a      	ldr	r6, [pc, #40]	@ (800380c <d_print_comp_inner+0xcd4>)
 80037e4:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
 80037e8:	f106 090e 	add.w	r9, r6, #14
 80037ec:	f04f 0800 	mov.w	r8, #0
 80037f0:	e018      	b.n	8003824 <d_print_comp_inner+0xcec>
 80037f2:	bf00      	nop
 80037f4:	080af1cf 	.word	0x080af1cf
 80037f8:	080af23b 	.word	0x080af23b
 80037fc:	080af223 	.word	0x080af223
 8003800:	0802cd64 	.word	0x0802cd64
 8003804:	080af2a8 	.word	0x080af2a8
 8003808:	080af33b 	.word	0x080af33b
 800380c:	080af30b 	.word	0x080af30b
 8003810:	460b      	mov	r3, r1
 8003812:	3101      	adds	r1, #1
 8003814:	45b1      	cmp	r9, r6
 8003816:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
 800381a:	54e7      	strb	r7, [r4, r3]
 800381c:	f884 7104 	strb.w	r7, [r4, #260]	@ 0x104
 8003820:	f43f aa1e 	beq.w	8002c60 <d_print_comp_inner+0x128>
 8003824:	29ff      	cmp	r1, #255	@ 0xff
 8003826:	f816 7f01 	ldrb.w	r7, [r6, #1]!
 800382a:	d1f1      	bne.n	8003810 <d_print_comp_inner+0xcd8>
 800382c:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
 8003830:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
 8003834:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
 8003838:	4620      	mov	r0, r4
 800383a:	4798      	blx	r3
 800383c:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
 8003840:	3301      	adds	r3, #1
 8003842:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
 8003846:	2101      	movs	r1, #1
 8003848:	2300      	movs	r3, #0
 800384a:	e7e3      	b.n	8003814 <d_print_comp_inner+0xcdc>
 800384c:	2111      	movs	r1, #17
 800384e:	68d2      	ldr	r2, [r2, #12]
 8003850:	f001 f9b8 	bl	8004bc4 <d_print_comp>
 8003854:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
 8003858:	29ff      	cmp	r1, #255	@ 0xff
 800385a:	f000 86d1 	beq.w	8004600 <d_print_comp_inner+0x1ac8>
 800385e:	1c4a      	adds	r2, r1, #1
 8003860:	2328      	movs	r3, #40	@ 0x28
 8003862:	f8c4 2100 	str.w	r2, [r4, #256]	@ 0x100
 8003866:	5463      	strb	r3, [r4, r1]
 8003868:	f884 3104 	strb.w	r3, [r4, #260]	@ 0x104
 800386c:	692a      	ldr	r2, [r5, #16]
 800386e:	2111      	movs	r1, #17
 8003870:	4620      	mov	r0, r4
 8003872:	f001 f9a7 	bl	8004bc4 <d_print_comp>
 8003876:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
 800387a:	29ff      	cmp	r1, #255	@ 0xff
 800387c:	f000 859f 	beq.w	80043be <d_print_comp_inner+0x1886>
 8003880:	1c4a      	adds	r2, r1, #1
 8003882:	2329      	movs	r3, #41	@ 0x29
 8003884:	f8c4 2100 	str.w	r2, [r4, #256]	@ 0x100
 8003888:	5463      	strb	r3, [r4, r1]
 800388a:	f884 3104 	strb.w	r3, [r4, #260]	@ 0x104
 800388e:	f7ff b9cf 	b.w	8002c30 <d_print_comp_inner+0xf8>
 8003892:	6913      	ldr	r3, [r2, #16]
 8003894:	781a      	ldrb	r2, [r3, #0]
 8003896:	2a3b      	cmp	r2, #59	@ 0x3b
 8003898:	f47f a9c7 	bne.w	8002c2a <d_print_comp_inner+0xf2>
 800389c:	691b      	ldr	r3, [r3, #16]
 800389e:	781b      	ldrb	r3, [r3, #0]
 80038a0:	2b3c      	cmp	r3, #60	@ 0x3c
 80038a2:	f47f a9c2 	bne.w	8002c2a <d_print_comp_inner+0xf2>
 80038a6:	462a      	mov	r2, r5
 80038a8:	2111      	movs	r1, #17
 80038aa:	f002 fa13 	bl	8005cd4 <d_maybe_print_fold_expression>
 80038ae:	2800      	cmp	r0, #0
 80038b0:	f47f a9be 	bne.w	8002c30 <d_print_comp_inner+0xf8>
 80038b4:	462a      	mov	r2, r5
 80038b6:	2111      	movs	r1, #17
 80038b8:	4620      	mov	r0, r4
 80038ba:	f002 fb31 	bl	8005f20 <d_maybe_print_designated_init>
 80038be:	2800      	cmp	r0, #0
 80038c0:	f47f a9b6 	bne.w	8002c30 <d_print_comp_inner+0xf8>
 80038c4:	e9d5 8303 	ldrd	r8, r3, [r5, #12]
 80038c8:	e9d3 6303 	ldrd	r6, r3, [r3, #12]
 80038cc:	f8d8 200c 	ldr.w	r2, [r8, #12]
 80038d0:	49d2      	ldr	r1, [pc, #840]	@ (8003c1c <d_print_comp_inner+0x10e4>)
 80038d2:	6810      	ldr	r0, [r2, #0]
 80038d4:	e9d3 7503 	ldrd	r7, r5, [r3, #12]
 80038d8:	f002 fc82 	bl	80061e0 <strcmp>
 80038dc:	2800      	cmp	r0, #0
 80038de:	f041 8133 	bne.w	8004b48 <d_print_comp_inner+0x2010>
 80038e2:	4632      	mov	r2, r6
 80038e4:	2111      	movs	r1, #17
 80038e6:	4620      	mov	r0, r4
 80038e8:	f002 f97a 	bl	8005be0 <d_print_subexpr>
 80038ec:	4642      	mov	r2, r8
 80038ee:	2111      	movs	r1, #17
 80038f0:	4620      	mov	r0, r4
 80038f2:	f001 ff77 	bl	80057e4 <d_print_expr_op>
 80038f6:	2111      	movs	r1, #17
 80038f8:	4620      	mov	r0, r4
 80038fa:	463a      	mov	r2, r7
 80038fc:	f002 f970 	bl	8005be0 <d_print_subexpr>
 8003900:	49c7      	ldr	r1, [pc, #796]	@ (8003c20 <d_print_comp_inner+0x10e8>)
 8003902:	4620      	mov	r0, r4
 8003904:	f7fc fef0 	bl	80006e8 <d_append_string>
 8003908:	462a      	mov	r2, r5
 800390a:	2111      	movs	r1, #17
 800390c:	4620      	mov	r0, r4
 800390e:	b015      	add	sp, #84	@ 0x54
 8003910:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003914:	f002 b964 	b.w	8005be0 <d_print_subexpr>
 8003918:	68d2      	ldr	r2, [r2, #12]
 800391a:	49c2      	ldr	r1, [pc, #776]	@ (8003c24 <d_print_comp_inner+0x10ec>)
 800391c:	a804      	add	r0, sp, #16
 800391e:	f01f fe59 	bl	80235d4 <sprintf>
 8003922:	a804      	add	r0, sp, #16
 8003924:	f002 fcbc 	bl	80062a0 <strlen>
 8003928:	2800      	cmp	r0, #0
 800392a:	f43f a981 	beq.w	8002c30 <d_print_comp_inner+0xf8>
 800392e:	ad04      	add	r5, sp, #16
 8003930:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
 8003934:	182f      	adds	r7, r5, r0
 8003936:	f04f 0800 	mov.w	r8, #0
 800393a:	e009      	b.n	8003950 <d_print_comp_inner+0xe18>
 800393c:	460b      	mov	r3, r1
 800393e:	3101      	adds	r1, #1
 8003940:	42af      	cmp	r7, r5
 8003942:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
 8003946:	54e6      	strb	r6, [r4, r3]
 8003948:	f884 6104 	strb.w	r6, [r4, #260]	@ 0x104
 800394c:	f43f a970 	beq.w	8002c30 <d_print_comp_inner+0xf8>
 8003950:	29ff      	cmp	r1, #255	@ 0xff
 8003952:	f815 6b01 	ldrb.w	r6, [r5], #1
 8003956:	d1f1      	bne.n	800393c <d_print_comp_inner+0xe04>
 8003958:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
 800395c:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
 8003960:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
 8003964:	4620      	mov	r0, r4
 8003966:	4798      	blx	r3
 8003968:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
 800396c:	3301      	adds	r3, #1
 800396e:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
 8003972:	2101      	movs	r1, #1
 8003974:	2300      	movs	r3, #0
 8003976:	e7e3      	b.n	8003940 <d_print_comp_inner+0xe08>
 8003978:	4eab      	ldr	r6, [pc, #684]	@ (8003c28 <d_print_comp_inner+0x10f0>)
 800397a:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
 800397e:	f106 0908 	add.w	r9, r6, #8
 8003982:	f04f 0800 	mov.w	r8, #0
 8003986:	e009      	b.n	800399c <d_print_comp_inner+0xe64>
 8003988:	460b      	mov	r3, r1
 800398a:	3101      	adds	r1, #1
 800398c:	454e      	cmp	r6, r9
 800398e:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
 8003992:	54e7      	strb	r7, [r4, r3]
 8003994:	f884 7104 	strb.w	r7, [r4, #260]	@ 0x104
 8003998:	f000 83c1 	beq.w	800411e <d_print_comp_inner+0x15e6>
 800399c:	29ff      	cmp	r1, #255	@ 0xff
 800399e:	f816 7f01 	ldrb.w	r7, [r6, #1]!
 80039a2:	d1f1      	bne.n	8003988 <d_print_comp_inner+0xe50>
 80039a4:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
 80039a8:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
 80039ac:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
 80039b0:	4620      	mov	r0, r4
 80039b2:	4798      	blx	r3
 80039b4:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
 80039b8:	3301      	adds	r3, #1
 80039ba:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
 80039be:	2101      	movs	r1, #1
 80039c0:	2300      	movs	r3, #0
 80039c2:	e7e3      	b.n	800398c <d_print_comp_inner+0xe54>
 80039c4:	4e99      	ldr	r6, [pc, #612]	@ (8003c2c <d_print_comp_inner+0x10f4>)
 80039c6:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
 80039ca:	f106 091c 	add.w	r9, r6, #28
 80039ce:	f04f 0800 	mov.w	r8, #0
 80039d2:	e009      	b.n	80039e8 <d_print_comp_inner+0xeb0>
 80039d4:	460b      	mov	r3, r1
 80039d6:	3101      	adds	r1, #1
 80039d8:	45b1      	cmp	r9, r6
 80039da:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
 80039de:	54e7      	strb	r7, [r4, r3]
 80039e0:	f884 7104 	strb.w	r7, [r4, #260]	@ 0x104
 80039e4:	f43f a93c 	beq.w	8002c60 <d_print_comp_inner+0x128>
 80039e8:	29ff      	cmp	r1, #255	@ 0xff
 80039ea:	f816 7f01 	ldrb.w	r7, [r6, #1]!
 80039ee:	d1f1      	bne.n	80039d4 <d_print_comp_inner+0xe9c>
 80039f0:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
 80039f4:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
 80039f8:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
 80039fc:	4620      	mov	r0, r4
 80039fe:	4798      	blx	r3
 8003a00:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
 8003a04:	3301      	adds	r3, #1
 8003a06:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
 8003a0a:	2101      	movs	r1, #1
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	e7e3      	b.n	80039d8 <d_print_comp_inner+0xea0>
 8003a10:	4e87      	ldr	r6, [pc, #540]	@ (8003c30 <d_print_comp_inner+0x10f8>)
 8003a12:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
 8003a16:	f106 0909 	add.w	r9, r6, #9
 8003a1a:	f04f 0800 	mov.w	r8, #0
 8003a1e:	e009      	b.n	8003a34 <d_print_comp_inner+0xefc>
 8003a20:	460b      	mov	r3, r1
 8003a22:	3101      	adds	r1, #1
 8003a24:	45b1      	cmp	r9, r6
 8003a26:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
 8003a2a:	54e7      	strb	r7, [r4, r3]
 8003a2c:	f884 7104 	strb.w	r7, [r4, #260]	@ 0x104
 8003a30:	f000 8358 	beq.w	80040e4 <d_print_comp_inner+0x15ac>
 8003a34:	29ff      	cmp	r1, #255	@ 0xff
 8003a36:	f816 7f01 	ldrb.w	r7, [r6, #1]!
 8003a3a:	d1f1      	bne.n	8003a20 <d_print_comp_inner+0xee8>
 8003a3c:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
 8003a40:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
 8003a44:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
 8003a48:	4620      	mov	r0, r4
 8003a4a:	4798      	blx	r3
 8003a4c:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
 8003a50:	3301      	adds	r3, #1
 8003a52:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
 8003a56:	2101      	movs	r1, #1
 8003a58:	2300      	movs	r3, #0
 8003a5a:	e7e3      	b.n	8003a24 <d_print_comp_inner+0xeec>
 8003a5c:	4e74      	ldr	r6, [pc, #464]	@ (8003c30 <d_print_comp_inner+0x10f8>)
 8003a5e:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
 8003a62:	f106 0909 	add.w	r9, r6, #9
 8003a66:	f04f 0800 	mov.w	r8, #0
 8003a6a:	e009      	b.n	8003a80 <d_print_comp_inner+0xf48>
 8003a6c:	460b      	mov	r3, r1
 8003a6e:	3101      	adds	r1, #1
 8003a70:	45b1      	cmp	r9, r6
 8003a72:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
 8003a76:	54e7      	strb	r7, [r4, r3]
 8003a78:	f884 7104 	strb.w	r7, [r4, #260]	@ 0x104
 8003a7c:	f43f a97d 	beq.w	8002d7a <d_print_comp_inner+0x242>
 8003a80:	29ff      	cmp	r1, #255	@ 0xff
 8003a82:	f816 7f01 	ldrb.w	r7, [r6, #1]!
 8003a86:	d1f1      	bne.n	8003a6c <d_print_comp_inner+0xf34>
 8003a88:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
 8003a8c:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
 8003a90:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
 8003a94:	4620      	mov	r0, r4
 8003a96:	4798      	blx	r3
 8003a98:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
 8003a9c:	3301      	adds	r3, #1
 8003a9e:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
 8003aa2:	2101      	movs	r1, #1
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	e7e3      	b.n	8003a70 <d_print_comp_inner+0xf38>
 8003aa8:	f8d2 800c 	ldr.w	r8, [r2, #12]
 8003aac:	4d61      	ldr	r5, [pc, #388]	@ (8003c34 <d_print_comp_inner+0x10fc>)
 8003aae:	f8d8 a008 	ldr.w	sl, [r8, #8]
 8003ab2:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
 8003ab6:	f105 0708 	add.w	r7, r5, #8
 8003aba:	f04f 0900 	mov.w	r9, #0
 8003abe:	e009      	b.n	8003ad4 <d_print_comp_inner+0xf9c>
 8003ac0:	460b      	mov	r3, r1
 8003ac2:	3101      	adds	r1, #1
 8003ac4:	42af      	cmp	r7, r5
 8003ac6:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
 8003aca:	54e6      	strb	r6, [r4, r3]
 8003acc:	f884 6104 	strb.w	r6, [r4, #260]	@ 0x104
 8003ad0:	f000 8264 	beq.w	8003f9c <d_print_comp_inner+0x1464>
 8003ad4:	29ff      	cmp	r1, #255	@ 0xff
 8003ad6:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8003ada:	d1f1      	bne.n	8003ac0 <d_print_comp_inner+0xf88>
 8003adc:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
 8003ae0:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
 8003ae4:	f884 90ff 	strb.w	r9, [r4, #255]	@ 0xff
 8003ae8:	4620      	mov	r0, r4
 8003aea:	4798      	blx	r3
 8003aec:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
 8003af0:	3301      	adds	r3, #1
 8003af2:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
 8003af6:	2101      	movs	r1, #1
 8003af8:	2300      	movs	r3, #0
 8003afa:	e7e3      	b.n	8003ac4 <d_print_comp_inner+0xf8c>
 8003afc:	e9d2 2503 	ldrd	r2, r5, [r2, #12]
 8003b00:	b112      	cbz	r2, 8003b08 <d_print_comp_inner+0xfd0>
 8003b02:	2111      	movs	r1, #17
 8003b04:	f001 f85e 	bl	8004bc4 <d_print_comp>
 8003b08:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
 8003b0c:	29ff      	cmp	r1, #255	@ 0xff
 8003b0e:	f000 8565 	beq.w	80045dc <d_print_comp_inner+0x1aa4>
 8003b12:	1c4a      	adds	r2, r1, #1
 8003b14:	237b      	movs	r3, #123	@ 0x7b
 8003b16:	f8c4 2100 	str.w	r2, [r4, #256]	@ 0x100
 8003b1a:	4620      	mov	r0, r4
 8003b1c:	5463      	strb	r3, [r4, r1]
 8003b1e:	462a      	mov	r2, r5
 8003b20:	2111      	movs	r1, #17
 8003b22:	f884 3104 	strb.w	r3, [r4, #260]	@ 0x104
 8003b26:	f001 f84d 	bl	8004bc4 <d_print_comp>
 8003b2a:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
 8003b2e:	29ff      	cmp	r1, #255	@ 0xff
 8003b30:	f000 82c9 	beq.w	80040c6 <d_print_comp_inner+0x158e>
 8003b34:	1c4a      	adds	r2, r1, #1
 8003b36:	237d      	movs	r3, #125	@ 0x7d
 8003b38:	f8c4 2100 	str.w	r2, [r4, #256]	@ 0x100
 8003b3c:	5463      	strb	r3, [r4, r1]
 8003b3e:	f884 3104 	strb.w	r3, [r4, #260]	@ 0x104
 8003b42:	f7ff b875 	b.w	8002c30 <d_print_comp_inner+0xf8>
 8003b46:	e9d2 6503 	ldrd	r6, r5, [r2, #12]
 8003b4a:	7833      	ldrb	r3, [r6, #0]
 8003b4c:	2b32      	cmp	r3, #50	@ 0x32
 8003b4e:	f000 8446 	beq.w	80043de <d_print_comp_inner+0x18a6>
 8003b52:	2b34      	cmp	r3, #52	@ 0x34
 8003b54:	f000 84e9 	beq.w	800452a <d_print_comp_inner+0x19f2>
 8003b58:	4632      	mov	r2, r6
 8003b5a:	2111      	movs	r1, #17
 8003b5c:	f001 fe42 	bl	80057e4 <d_print_expr_op>
 8003b60:	e6d2      	b.n	8003908 <d_print_comp_inner+0xdd0>
 8003b62:	68d2      	ldr	r2, [r2, #12]
 8003b64:	2111      	movs	r1, #17
 8003b66:	4620      	mov	r0, r4
 8003b68:	b015      	add	sp, #84	@ 0x54
 8003b6a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b6e:	f001 be39 	b.w	80057e4 <d_print_expr_op>
 8003b72:	4e31      	ldr	r6, [pc, #196]	@ (8003c38 <d_print_comp_inner+0x1100>)
 8003b74:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
 8003b78:	f106 0908 	add.w	r9, r6, #8
 8003b7c:	f04f 0800 	mov.w	r8, #0
 8003b80:	e009      	b.n	8003b96 <d_print_comp_inner+0x105e>
 8003b82:	460b      	mov	r3, r1
 8003b84:	3101      	adds	r1, #1
 8003b86:	45b1      	cmp	r9, r6
 8003b88:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
 8003b8c:	54e7      	strb	r7, [r4, r3]
 8003b8e:	f884 7104 	strb.w	r7, [r4, #260]	@ 0x104
 8003b92:	f43f a865 	beq.w	8002c60 <d_print_comp_inner+0x128>
 8003b96:	29ff      	cmp	r1, #255	@ 0xff
 8003b98:	f816 7f01 	ldrb.w	r7, [r6, #1]!
 8003b9c:	d1f1      	bne.n	8003b82 <d_print_comp_inner+0x104a>
 8003b9e:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
 8003ba2:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
 8003ba6:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
 8003baa:	4620      	mov	r0, r4
 8003bac:	4798      	blx	r3
 8003bae:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
 8003bb2:	3301      	adds	r3, #1
 8003bb4:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
 8003bb8:	2101      	movs	r1, #1
 8003bba:	2300      	movs	r3, #0
 8003bbc:	e7e3      	b.n	8003b86 <d_print_comp_inner+0x104e>
 8003bbe:	4e1f      	ldr	r6, [pc, #124]	@ (8003c3c <d_print_comp_inner+0x1104>)
 8003bc0:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
 8003bc4:	f106 090b 	add.w	r9, r6, #11
 8003bc8:	f04f 0800 	mov.w	r8, #0
 8003bcc:	e009      	b.n	8003be2 <d_print_comp_inner+0x10aa>
 8003bce:	460b      	mov	r3, r1
 8003bd0:	3101      	adds	r1, #1
 8003bd2:	45b1      	cmp	r9, r6
 8003bd4:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
 8003bd8:	54e7      	strb	r7, [r4, r3]
 8003bda:	f884 7104 	strb.w	r7, [r4, #260]	@ 0x104
 8003bde:	f43f a83f 	beq.w	8002c60 <d_print_comp_inner+0x128>
 8003be2:	29ff      	cmp	r1, #255	@ 0xff
 8003be4:	f816 7b01 	ldrb.w	r7, [r6], #1
 8003be8:	d1f1      	bne.n	8003bce <d_print_comp_inner+0x1096>
 8003bea:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
 8003bee:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
 8003bf2:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
 8003bf6:	4620      	mov	r0, r4
 8003bf8:	4798      	blx	r3
 8003bfa:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
 8003bfe:	3301      	adds	r3, #1
 8003c00:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
 8003c04:	2101      	movs	r1, #1
 8003c06:	2300      	movs	r3, #0
 8003c08:	e7e3      	b.n	8003bd2 <d_print_comp_inner+0x109a>
 8003c0a:	4e0d      	ldr	r6, [pc, #52]	@ (8003c40 <d_print_comp_inner+0x1108>)
 8003c0c:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
 8003c10:	f106 0910 	add.w	r9, r6, #16
 8003c14:	f04f 0800 	mov.w	r8, #0
 8003c18:	e01e      	b.n	8003c58 <d_print_comp_inner+0x1120>
 8003c1a:	bf00      	nop
 8003c1c:	080af2e0 	.word	0x080af2e0
 8003c20:	080af2e4 	.word	0x080af2e4
 8003c24:	080af0a8 	.word	0x080af0a8
 8003c28:	080af37b 	.word	0x080af37b
 8003c2c:	080af35b 	.word	0x080af35b
 8003c30:	080af2c7 	.word	0x080af2c7
 8003c34:	080af2bb 	.word	0x080af2bb
 8003c38:	080af163 	.word	0x080af163
 8003c3c:	080af158 	.word	0x080af158
 8003c40:	080af1b7 	.word	0x080af1b7
 8003c44:	460b      	mov	r3, r1
 8003c46:	3101      	adds	r1, #1
 8003c48:	45b1      	cmp	r9, r6
 8003c4a:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
 8003c4e:	54e7      	strb	r7, [r4, r3]
 8003c50:	f884 7104 	strb.w	r7, [r4, #260]	@ 0x104
 8003c54:	f43f a804 	beq.w	8002c60 <d_print_comp_inner+0x128>
 8003c58:	29ff      	cmp	r1, #255	@ 0xff
 8003c5a:	f816 7f01 	ldrb.w	r7, [r6, #1]!
 8003c5e:	d1f1      	bne.n	8003c44 <d_print_comp_inner+0x110c>
 8003c60:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
 8003c64:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
 8003c68:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
 8003c6c:	4620      	mov	r0, r4
 8003c6e:	4798      	blx	r3
 8003c70:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
 8003c74:	3301      	adds	r3, #1
 8003c76:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
 8003c7a:	2101      	movs	r1, #1
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	e7e3      	b.n	8003c48 <d_print_comp_inner+0x1110>
 8003c80:	4ec0      	ldr	r6, [pc, #768]	@ (8003f84 <d_print_comp_inner+0x144c>)
 8003c82:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
 8003c86:	f106 0912 	add.w	r9, r6, #18
 8003c8a:	f04f 0800 	mov.w	r8, #0
 8003c8e:	e009      	b.n	8003ca4 <d_print_comp_inner+0x116c>
 8003c90:	460b      	mov	r3, r1
 8003c92:	3101      	adds	r1, #1
 8003c94:	454e      	cmp	r6, r9
 8003c96:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
 8003c9a:	54e7      	strb	r7, [r4, r3]
 8003c9c:	f884 7104 	strb.w	r7, [r4, #260]	@ 0x104
 8003ca0:	f43e afde 	beq.w	8002c60 <d_print_comp_inner+0x128>
 8003ca4:	29ff      	cmp	r1, #255	@ 0xff
 8003ca6:	f816 7f01 	ldrb.w	r7, [r6, #1]!
 8003caa:	d1f1      	bne.n	8003c90 <d_print_comp_inner+0x1158>
 8003cac:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
 8003cb0:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
 8003cb4:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
 8003cb8:	4620      	mov	r0, r4
 8003cba:	4798      	blx	r3
 8003cbc:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
 8003cc0:	3301      	adds	r3, #1
 8003cc2:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
 8003cc6:	2101      	movs	r1, #1
 8003cc8:	2300      	movs	r3, #0
 8003cca:	e7e3      	b.n	8003c94 <d_print_comp_inner+0x115c>
 8003ccc:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
 8003cd0:	7b15      	ldrb	r5, [r2, #12]
 8003cd2:	29ff      	cmp	r1, #255	@ 0xff
 8003cd4:	f000 8471 	beq.w	80045ba <d_print_comp_inner+0x1a82>
 8003cd8:	1c4b      	adds	r3, r1, #1
 8003cda:	f8c4 3100 	str.w	r3, [r4, #256]	@ 0x100
 8003cde:	5465      	strb	r5, [r4, r1]
 8003ce0:	f884 5104 	strb.w	r5, [r4, #260]	@ 0x104
 8003ce4:	f7fe bfa4 	b.w	8002c30 <d_print_comp_inner+0xf8>
 8003ce8:	6913      	ldr	r3, [r2, #16]
 8003cea:	781b      	ldrb	r3, [r3, #0]
 8003cec:	2b39      	cmp	r3, #57	@ 0x39
 8003cee:	f47e af9c 	bne.w	8002c2a <d_print_comp_inner+0xf2>
 8003cf2:	68d2      	ldr	r2, [r2, #12]
 8003cf4:	68d3      	ldr	r3, [r2, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	7859      	ldrb	r1, [r3, #1]
 8003cfa:	2963      	cmp	r1, #99	@ 0x63
 8003cfc:	f000 8592 	beq.w	8004824 <d_print_comp_inner+0x1cec>
 8003d00:	462a      	mov	r2, r5
 8003d02:	2111      	movs	r1, #17
 8003d04:	4620      	mov	r0, r4
 8003d06:	f001 ffe5 	bl	8005cd4 <d_maybe_print_fold_expression>
 8003d0a:	2800      	cmp	r0, #0
 8003d0c:	f47e af90 	bne.w	8002c30 <d_print_comp_inner+0xf8>
 8003d10:	462a      	mov	r2, r5
 8003d12:	2111      	movs	r1, #17
 8003d14:	4620      	mov	r0, r4
 8003d16:	f002 f903 	bl	8005f20 <d_maybe_print_designated_init>
 8003d1a:	2800      	cmp	r0, #0
 8003d1c:	f47e af88 	bne.w	8002c30 <d_print_comp_inner+0xf8>
 8003d20:	68eb      	ldr	r3, [r5, #12]
 8003d22:	781a      	ldrb	r2, [r3, #0]
 8003d24:	2a32      	cmp	r2, #50	@ 0x32
 8003d26:	f000 86c6 	beq.w	8004ab6 <d_print_comp_inner+0x1f7e>
 8003d2a:	68db      	ldr	r3, [r3, #12]
 8003d2c:	4996      	ldr	r1, [pc, #600]	@ (8003f88 <d_print_comp_inner+0x1450>)
 8003d2e:	6818      	ldr	r0, [r3, #0]
 8003d30:	f002 fa56 	bl	80061e0 <strcmp>
 8003d34:	692b      	ldr	r3, [r5, #16]
 8003d36:	68da      	ldr	r2, [r3, #12]
 8003d38:	b918      	cbnz	r0, 8003d42 <d_print_comp_inner+0x120a>
 8003d3a:	7813      	ldrb	r3, [r2, #0]
 8003d3c:	2b03      	cmp	r3, #3
 8003d3e:	f000 8720 	beq.w	8004b82 <d_print_comp_inner+0x204a>
 8003d42:	2111      	movs	r1, #17
 8003d44:	4620      	mov	r0, r4
 8003d46:	f001 ff4b 	bl	8005be0 <d_print_subexpr>
 8003d4a:	68ee      	ldr	r6, [r5, #12]
 8003d4c:	498f      	ldr	r1, [pc, #572]	@ (8003f8c <d_print_comp_inner+0x1454>)
 8003d4e:	68f3      	ldr	r3, [r6, #12]
 8003d50:	681f      	ldr	r7, [r3, #0]
 8003d52:	4638      	mov	r0, r7
 8003d54:	f002 fa44 	bl	80061e0 <strcmp>
 8003d58:	2800      	cmp	r0, #0
 8003d5a:	f000 86c8 	beq.w	8004aee <d_print_comp_inner+0x1fb6>
 8003d5e:	498a      	ldr	r1, [pc, #552]	@ (8003f88 <d_print_comp_inner+0x1450>)
 8003d60:	4638      	mov	r0, r7
 8003d62:	f002 fa3d 	bl	80061e0 <strcmp>
 8003d66:	2800      	cmp	r0, #0
 8003d68:	f040 86d1 	bne.w	8004b0e <d_print_comp_inner+0x1fd6>
 8003d6c:	692b      	ldr	r3, [r5, #16]
 8003d6e:	2111      	movs	r1, #17
 8003d70:	691a      	ldr	r2, [r3, #16]
 8003d72:	4620      	mov	r0, r4
 8003d74:	f001 ff34 	bl	8005be0 <d_print_subexpr>
 8003d78:	68eb      	ldr	r3, [r5, #12]
 8003d7a:	781a      	ldrb	r2, [r3, #0]
 8003d7c:	2a32      	cmp	r2, #50	@ 0x32
 8003d7e:	f47e af57 	bne.w	8002c30 <d_print_comp_inner+0xf8>
 8003d82:	68db      	ldr	r3, [r3, #12]
 8003d84:	689a      	ldr	r2, [r3, #8]
 8003d86:	2a01      	cmp	r2, #1
 8003d88:	f47e af52 	bne.w	8002c30 <d_print_comp_inner+0xf8>
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	781b      	ldrb	r3, [r3, #0]
 8003d90:	2b3e      	cmp	r3, #62	@ 0x3e
 8003d92:	f47e af4d 	bne.w	8002c30 <d_print_comp_inner+0xf8>
 8003d96:	2129      	movs	r1, #41	@ 0x29
 8003d98:	4620      	mov	r0, r4
 8003d9a:	b015      	add	sp, #84	@ 0x54
 8003d9c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003da0:	f7fc bc1c 	b.w	80005dc <d_append_char>
 8003da4:	e9d2 5303 	ldrd	r5, r3, [r2, #12]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	f43e af41 	beq.w	8002c30 <d_print_comp_inner+0xf8>
 8003dae:	442b      	add	r3, r5
 8003db0:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
 8003db4:	3d01      	subs	r5, #1
 8003db6:	1e5f      	subs	r7, r3, #1
 8003db8:	f04f 0800 	mov.w	r8, #0
 8003dbc:	e009      	b.n	8003dd2 <d_print_comp_inner+0x129a>
 8003dbe:	460b      	mov	r3, r1
 8003dc0:	3101      	adds	r1, #1
 8003dc2:	42af      	cmp	r7, r5
 8003dc4:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
 8003dc8:	54e6      	strb	r6, [r4, r3]
 8003dca:	f884 6104 	strb.w	r6, [r4, #260]	@ 0x104
 8003dce:	f43e af2f 	beq.w	8002c30 <d_print_comp_inner+0xf8>
 8003dd2:	29ff      	cmp	r1, #255	@ 0xff
 8003dd4:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8003dd8:	d1f1      	bne.n	8003dbe <d_print_comp_inner+0x1286>
 8003dda:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
 8003dde:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
 8003de2:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
 8003de6:	4620      	mov	r0, r4
 8003de8:	4798      	blx	r3
 8003dea:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
 8003dee:	3301      	adds	r3, #1
 8003df0:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
 8003df4:	2101      	movs	r1, #1
 8003df6:	2300      	movs	r3, #0
 8003df8:	e7e3      	b.n	8003dc2 <d_print_comp_inner+0x128a>
 8003dfa:	68d2      	ldr	r2, [r2, #12]
 8003dfc:	e9d2 5300 	ldrd	r5, r3, [r2]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	f43e af15 	beq.w	8002c30 <d_print_comp_inner+0xf8>
 8003e06:	442b      	add	r3, r5
 8003e08:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
 8003e0c:	3d01      	subs	r5, #1
 8003e0e:	1e5f      	subs	r7, r3, #1
 8003e10:	f04f 0800 	mov.w	r8, #0
 8003e14:	e009      	b.n	8003e2a <d_print_comp_inner+0x12f2>
 8003e16:	460b      	mov	r3, r1
 8003e18:	3101      	adds	r1, #1
 8003e1a:	42af      	cmp	r7, r5
 8003e1c:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
 8003e20:	54e6      	strb	r6, [r4, r3]
 8003e22:	f884 6104 	strb.w	r6, [r4, #260]	@ 0x104
 8003e26:	f43e af03 	beq.w	8002c30 <d_print_comp_inner+0xf8>
 8003e2a:	29ff      	cmp	r1, #255	@ 0xff
 8003e2c:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8003e30:	d1f1      	bne.n	8003e16 <d_print_comp_inner+0x12de>
 8003e32:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
 8003e36:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
 8003e3a:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
 8003e3e:	4620      	mov	r0, r4
 8003e40:	4798      	blx	r3
 8003e42:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
 8003e46:	3301      	adds	r3, #1
 8003e48:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
 8003e4c:	2101      	movs	r1, #1
 8003e4e:	2300      	movs	r3, #0
 8003e50:	e7e3      	b.n	8003e1a <d_print_comp_inner+0x12e2>
 8003e52:	494f      	ldr	r1, [pc, #316]	@ (8003f90 <d_print_comp_inner+0x1458>)
 8003e54:	4620      	mov	r0, r4
 8003e56:	f7fc fc47 	bl	80006e8 <d_append_string>
 8003e5a:	693a      	ldr	r2, [r7, #16]
 8003e5c:	494d      	ldr	r1, [pc, #308]	@ (8003f94 <d_print_comp_inner+0x145c>)
 8003e5e:	3201      	adds	r2, #1
 8003e60:	a804      	add	r0, sp, #16
 8003e62:	f01f fbb7 	bl	80235d4 <sprintf>
 8003e66:	a804      	add	r0, sp, #16
 8003e68:	f002 fa1a 	bl	80062a0 <strlen>
 8003e6c:	4681      	mov	r9, r0
 8003e6e:	2800      	cmp	r0, #0
 8003e70:	f000 83d8 	beq.w	8004624 <d_print_comp_inner+0x1aec>
 8003e74:	ad04      	add	r5, sp, #16
 8003e76:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
 8003e7a:	44a9      	add	r9, r5
 8003e7c:	f04f 0800 	mov.w	r8, #0
 8003e80:	e009      	b.n	8003e96 <d_print_comp_inner+0x135e>
 8003e82:	460b      	mov	r3, r1
 8003e84:	3101      	adds	r1, #1
 8003e86:	45a9      	cmp	r9, r5
 8003e88:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
 8003e8c:	54e6      	strb	r6, [r4, r3]
 8003e8e:	f884 6104 	strb.w	r6, [r4, #260]	@ 0x104
 8003e92:	f000 83c7 	beq.w	8004624 <d_print_comp_inner+0x1aec>
 8003e96:	29ff      	cmp	r1, #255	@ 0xff
 8003e98:	f815 6b01 	ldrb.w	r6, [r5], #1
 8003e9c:	d1f1      	bne.n	8003e82 <d_print_comp_inner+0x134a>
 8003e9e:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
 8003ea2:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
 8003ea6:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
 8003eaa:	4620      	mov	r0, r4
 8003eac:	4798      	blx	r3
 8003eae:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
 8003eb2:	3301      	adds	r3, #1
 8003eb4:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
 8003eb8:	2101      	movs	r1, #1
 8003eba:	2300      	movs	r3, #0
 8003ebc:	e7e3      	b.n	8003e86 <d_print_comp_inner+0x134e>
 8003ebe:	46b0      	mov	r8, r6
 8003ec0:	9e01      	ldr	r6, [sp, #4]
 8003ec2:	f7ff b9d6 	b.w	8003272 <d_print_comp_inner+0x73a>
 8003ec6:	2111      	movs	r1, #17
 8003ec8:	692a      	ldr	r2, [r5, #16]
 8003eca:	4620      	mov	r0, r4
 8003ecc:	f000 fe7a 	bl	8004bc4 <d_print_comp>
 8003ed0:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
 8003ed4:	29ff      	cmp	r1, #255	@ 0xff
 8003ed6:	f000 8263 	beq.w	80043a0 <d_print_comp_inner+0x1868>
 8003eda:	1c4a      	adds	r2, r1, #1
 8003edc:	235d      	movs	r3, #93	@ 0x5d
 8003ede:	f8c4 2100 	str.w	r2, [r4, #256]	@ 0x100
 8003ee2:	5463      	strb	r3, [r4, r1]
 8003ee4:	f884 3104 	strb.w	r3, [r4, #260]	@ 0x104
 8003ee8:	f7fe bea2 	b.w	8002c30 <d_print_comp_inner+0xf8>
 8003eec:	f8d4 3110 	ldr.w	r3, [r4, #272]	@ 0x110
 8003ef0:	68c2      	ldr	r2, [r0, #12]
 8003ef2:	9307      	str	r3, [sp, #28]
 8003ef4:	ab04      	add	r3, sp, #16
 8003ef6:	f8c4 3114 	str.w	r3, [r4, #276]	@ 0x114
 8003efa:	2300      	movs	r3, #0
 8003efc:	e9cd c504 	strd	ip, r5, [sp, #16]
 8003f00:	9306      	str	r3, [sp, #24]
 8003f02:	2a00      	cmp	r2, #0
 8003f04:	f47e aec1 	bne.w	8002c8a <d_print_comp_inner+0x152>
 8003f08:	f7fe bebe 	b.w	8002c88 <d_print_comp_inner+0x150>
 8003f0c:	2801      	cmp	r0, #1
 8003f0e:	f63e afe9 	bhi.w	8002ee4 <d_print_comp_inner+0x3ac>
 8003f12:	68ff      	ldr	r7, [r7, #12]
 8003f14:	4652      	mov	r2, sl
 8003f16:	2f00      	cmp	r7, #0
 8003f18:	f000 862f 	beq.w	8004b7a <d_print_comp_inner+0x2042>
 8003f1c:	2e04      	cmp	r6, #4
 8003f1e:	f103 0310 	add.w	r3, r3, #16
 8003f22:	f000 82fd 	beq.w	8004520 <d_print_comp_inner+0x19e8>
 8003f26:	46b4      	mov	ip, r6
 8003f28:	f7fe bfc7 	b.w	8002eba <d_print_comp_inner+0x382>
 8003f2c:	4e1a      	ldr	r6, [pc, #104]	@ (8003f98 <d_print_comp_inner+0x1460>)
 8003f2e:	68ea      	ldr	r2, [r5, #12]
 8003f30:	2111      	movs	r1, #17
 8003f32:	4620      	mov	r0, r4
 8003f34:	f000 fe46 	bl	8004bc4 <d_print_comp>
 8003f38:	f106 0904 	add.w	r9, r6, #4
 8003f3c:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
 8003f40:	f04f 0800 	mov.w	r8, #0
 8003f44:	e009      	b.n	8003f5a <d_print_comp_inner+0x1422>
 8003f46:	460b      	mov	r3, r1
 8003f48:	3101      	adds	r1, #1
 8003f4a:	45b1      	cmp	r9, r6
 8003f4c:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
 8003f50:	54e7      	strb	r7, [r4, r3]
 8003f52:	f884 7104 	strb.w	r7, [r4, #260]	@ 0x104
 8003f56:	f43e af10 	beq.w	8002d7a <d_print_comp_inner+0x242>
 8003f5a:	29ff      	cmp	r1, #255	@ 0xff
 8003f5c:	f816 7b01 	ldrb.w	r7, [r6], #1
 8003f60:	d1f1      	bne.n	8003f46 <d_print_comp_inner+0x140e>
 8003f62:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
 8003f66:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
 8003f6a:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
 8003f6e:	4620      	mov	r0, r4
 8003f70:	4798      	blx	r3
 8003f72:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
 8003f76:	3301      	adds	r3, #1
 8003f78:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
 8003f7c:	2101      	movs	r1, #1
 8003f7e:	2300      	movs	r3, #0
 8003f80:	e7e3      	b.n	8003f4a <d_print_comp_inner+0x1412>
 8003f82:	bf00      	nop
 8003f84:	080af1a3 	.word	0x080af1a3
 8003f88:	080af2d8 	.word	0x080af2d8
 8003f8c:	080af2dc 	.word	0x080af2dc
 8003f90:	080af11c 	.word	0x080af11c
 8003f94:	080af0a8 	.word	0x080af0a8
 8003f98:	080af18c 	.word	0x080af18c
 8003f9c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8003fa0:	782b      	ldrb	r3, [r5, #0]
 8003fa2:	3b61      	subs	r3, #97	@ 0x61
 8003fa4:	2b19      	cmp	r3, #25
 8003fa6:	f240 82aa 	bls.w	80044fe <d_print_comp_inner+0x19c6>
 8003faa:	f10a 37ff 	add.w	r7, sl, #4294967295	@ 0xffffffff
 8003fae:	5deb      	ldrb	r3, [r5, r7]
 8003fb0:	2b20      	cmp	r3, #32
 8003fb2:	bf18      	it	ne
 8003fb4:	4657      	movne	r7, sl
 8003fb6:	2f00      	cmp	r7, #0
 8003fb8:	f43e ae3a 	beq.w	8002c30 <d_print_comp_inner+0xf8>
 8003fbc:	3d01      	subs	r5, #1
 8003fbe:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
 8003fc2:	442f      	add	r7, r5
 8003fc4:	f04f 0800 	mov.w	r8, #0
 8003fc8:	e009      	b.n	8003fde <d_print_comp_inner+0x14a6>
 8003fca:	460b      	mov	r3, r1
 8003fcc:	3101      	adds	r1, #1
 8003fce:	42bd      	cmp	r5, r7
 8003fd0:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
 8003fd4:	54e6      	strb	r6, [r4, r3]
 8003fd6:	f884 6104 	strb.w	r6, [r4, #260]	@ 0x104
 8003fda:	f43e ae29 	beq.w	8002c30 <d_print_comp_inner+0xf8>
 8003fde:	29ff      	cmp	r1, #255	@ 0xff
 8003fe0:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8003fe4:	d1f1      	bne.n	8003fca <d_print_comp_inner+0x1492>
 8003fe6:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
 8003fea:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
 8003fee:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
 8003ff2:	4620      	mov	r0, r4
 8003ff4:	4798      	blx	r3
 8003ff6:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
 8003ffa:	3301      	adds	r3, #1
 8003ffc:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
 8004000:	2101      	movs	r1, #1
 8004002:	2300      	movs	r3, #0
 8004004:	e7e3      	b.n	8003fce <d_print_comp_inner+0x1496>
 8004006:	68ea      	ldr	r2, [r5, #12]
 8004008:	e431      	b.n	800386e <d_print_comp_inner+0xd36>
 800400a:	4ec5      	ldr	r6, [pc, #788]	@ (8004320 <d_print_comp_inner+0x17e8>)
 800400c:	692a      	ldr	r2, [r5, #16]
 800400e:	2111      	movs	r1, #17
 8004010:	4620      	mov	r0, r4
 8004012:	f000 fdd7 	bl	8004bc4 <d_print_comp>
 8004016:	f106 0905 	add.w	r9, r6, #5
 800401a:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
 800401e:	f04f 0800 	mov.w	r8, #0
 8004022:	e009      	b.n	8004038 <d_print_comp_inner+0x1500>
 8004024:	460b      	mov	r3, r1
 8004026:	3101      	adds	r1, #1
 8004028:	45b1      	cmp	r9, r6
 800402a:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
 800402e:	54e7      	strb	r7, [r4, r3]
 8004030:	f884 7104 	strb.w	r7, [r4, #260]	@ 0x104
 8004034:	f43e ae14 	beq.w	8002c60 <d_print_comp_inner+0x128>
 8004038:	29ff      	cmp	r1, #255	@ 0xff
 800403a:	f816 7b01 	ldrb.w	r7, [r6], #1
 800403e:	d1f1      	bne.n	8004024 <d_print_comp_inner+0x14ec>
 8004040:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
 8004044:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
 8004048:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
 800404c:	4620      	mov	r0, r4
 800404e:	4798      	blx	r3
 8004050:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
 8004054:	3301      	adds	r3, #1
 8004056:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
 800405a:	2101      	movs	r1, #1
 800405c:	2300      	movs	r3, #0
 800405e:	e7e3      	b.n	8004028 <d_print_comp_inner+0x14f0>
 8004060:	68ea      	ldr	r2, [r5, #12]
 8004062:	49b0      	ldr	r1, [pc, #704]	@ (8004324 <d_print_comp_inner+0x17ec>)
 8004064:	3201      	adds	r2, #1
 8004066:	a804      	add	r0, sp, #16
 8004068:	f01f fab4 	bl	80235d4 <sprintf>
 800406c:	a804      	add	r0, sp, #16
 800406e:	f002 f917 	bl	80062a0 <strlen>
 8004072:	b318      	cbz	r0, 80040bc <d_print_comp_inner+0x1584>
 8004074:	ad04      	add	r5, sp, #16
 8004076:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
 800407a:	182f      	adds	r7, r5, r0
 800407c:	f04f 0800 	mov.w	r8, #0
 8004080:	e008      	b.n	8004094 <d_print_comp_inner+0x155c>
 8004082:	460b      	mov	r3, r1
 8004084:	3101      	adds	r1, #1
 8004086:	42af      	cmp	r7, r5
 8004088:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
 800408c:	54e6      	strb	r6, [r4, r3]
 800408e:	f884 6104 	strb.w	r6, [r4, #260]	@ 0x104
 8004092:	d015      	beq.n	80040c0 <d_print_comp_inner+0x1588>
 8004094:	29ff      	cmp	r1, #255	@ 0xff
 8004096:	f815 6b01 	ldrb.w	r6, [r5], #1
 800409a:	d1f2      	bne.n	8004082 <d_print_comp_inner+0x154a>
 800409c:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
 80040a0:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
 80040a4:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
 80040a8:	4620      	mov	r0, r4
 80040aa:	4798      	blx	r3
 80040ac:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
 80040b0:	3301      	adds	r3, #1
 80040b2:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
 80040b6:	2101      	movs	r1, #1
 80040b8:	2300      	movs	r3, #0
 80040ba:	e7e4      	b.n	8004086 <d_print_comp_inner+0x154e>
 80040bc:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
 80040c0:	29ff      	cmp	r1, #255	@ 0xff
 80040c2:	f47f ad37 	bne.w	8003b34 <d_print_comp_inner+0xffc>
 80040c6:	2500      	movs	r5, #0
 80040c8:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	@ 0x108
 80040cc:	f884 50ff 	strb.w	r5, [r4, #255]	@ 0xff
 80040d0:	4620      	mov	r0, r4
 80040d2:	4798      	blx	r3
 80040d4:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
 80040d8:	2201      	movs	r2, #1
 80040da:	4413      	add	r3, r2
 80040dc:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
 80040e0:	4629      	mov	r1, r5
 80040e2:	e528      	b.n	8003b36 <d_print_comp_inner+0xffe>
 80040e4:	f8d4 3148 	ldr.w	r3, [r4, #328]	@ 0x148
 80040e8:	b133      	cbz	r3, 80040f8 <d_print_comp_inner+0x15c0>
 80040ea:	f8d4 1110 	ldr.w	r1, [r4, #272]	@ 0x110
 80040ee:	9104      	str	r1, [sp, #16]
 80040f0:	aa04      	add	r2, sp, #16
 80040f2:	f8c4 2110 	str.w	r2, [r4, #272]	@ 0x110
 80040f6:	9305      	str	r3, [sp, #20]
 80040f8:	68ea      	ldr	r2, [r5, #12]
 80040fa:	7813      	ldrb	r3, [r2, #0]
 80040fc:	2b04      	cmp	r3, #4
 80040fe:	f000 81bd 	beq.w	800447c <d_print_comp_inner+0x1944>
 8004102:	2111      	movs	r1, #17
 8004104:	4620      	mov	r0, r4
 8004106:	f000 fd5d 	bl	8004bc4 <d_print_comp>
 800410a:	f8d4 3148 	ldr.w	r3, [r4, #328]	@ 0x148
 800410e:	2b00      	cmp	r3, #0
 8004110:	f43e ad8e 	beq.w	8002c30 <d_print_comp_inner+0xf8>
 8004114:	9b04      	ldr	r3, [sp, #16]
 8004116:	f8c4 3110 	str.w	r3, [r4, #272]	@ 0x110
 800411a:	f7fe bd89 	b.w	8002c30 <d_print_comp_inner+0xf8>
 800411e:	f8d4 3120 	ldr.w	r3, [r4, #288]	@ 0x120
 8004122:	68ea      	ldr	r2, [r5, #12]
 8004124:	4e80      	ldr	r6, [pc, #512]	@ (8004328 <d_print_comp_inner+0x17f0>)
 8004126:	3301      	adds	r3, #1
 8004128:	f8c4 3120 	str.w	r3, [r4, #288]	@ 0x120
 800412c:	2111      	movs	r1, #17
 800412e:	4620      	mov	r0, r4
 8004130:	f000 fd48 	bl	8004bc4 <d_print_comp>
 8004134:	f8d4 3120 	ldr.w	r3, [r4, #288]	@ 0x120
 8004138:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
 800413c:	3b01      	subs	r3, #1
 800413e:	f8c4 3120 	str.w	r3, [r4, #288]	@ 0x120
 8004142:	f106 0902 	add.w	r9, r6, #2
 8004146:	f04f 0800 	mov.w	r8, #0
 800414a:	e008      	b.n	800415e <d_print_comp_inner+0x1626>
 800414c:	460b      	mov	r3, r1
 800414e:	3101      	adds	r1, #1
 8004150:	45b1      	cmp	r9, r6
 8004152:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
 8004156:	54e7      	strb	r7, [r4, r3]
 8004158:	f884 7104 	strb.w	r7, [r4, #260]	@ 0x104
 800415c:	d013      	beq.n	8004186 <d_print_comp_inner+0x164e>
 800415e:	29ff      	cmp	r1, #255	@ 0xff
 8004160:	f816 7b01 	ldrb.w	r7, [r6], #1
 8004164:	d1f2      	bne.n	800414c <d_print_comp_inner+0x1614>
 8004166:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
 800416a:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
 800416e:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
 8004172:	4620      	mov	r0, r4
 8004174:	4798      	blx	r3
 8004176:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
 800417a:	3301      	adds	r3, #1
 800417c:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
 8004180:	2101      	movs	r1, #1
 8004182:	2300      	movs	r3, #0
 8004184:	e7e4      	b.n	8004150 <d_print_comp_inner+0x1618>
 8004186:	692a      	ldr	r2, [r5, #16]
 8004188:	4966      	ldr	r1, [pc, #408]	@ (8004324 <d_print_comp_inner+0x17ec>)
 800418a:	3201      	adds	r2, #1
 800418c:	a804      	add	r0, sp, #16
 800418e:	f01f fa21 	bl	80235d4 <sprintf>
 8004192:	a804      	add	r0, sp, #16
 8004194:	f002 f884 	bl	80062a0 <strlen>
 8004198:	2800      	cmp	r0, #0
 800419a:	d08f      	beq.n	80040bc <d_print_comp_inner+0x1584>
 800419c:	ad04      	add	r5, sp, #16
 800419e:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
 80041a2:	182f      	adds	r7, r5, r0
 80041a4:	f04f 0800 	mov.w	r8, #0
 80041a8:	e008      	b.n	80041bc <d_print_comp_inner+0x1684>
 80041aa:	460b      	mov	r3, r1
 80041ac:	3101      	adds	r1, #1
 80041ae:	42af      	cmp	r7, r5
 80041b0:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
 80041b4:	54e6      	strb	r6, [r4, r3]
 80041b6:	f884 6104 	strb.w	r6, [r4, #260]	@ 0x104
 80041ba:	d081      	beq.n	80040c0 <d_print_comp_inner+0x1588>
 80041bc:	29ff      	cmp	r1, #255	@ 0xff
 80041be:	f815 6b01 	ldrb.w	r6, [r5], #1
 80041c2:	d1f2      	bne.n	80041aa <d_print_comp_inner+0x1672>
 80041c4:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
 80041c8:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
 80041cc:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
 80041d0:	4620      	mov	r0, r4
 80041d2:	4798      	blx	r3
 80041d4:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
 80041d8:	3301      	adds	r3, #1
 80041da:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
 80041de:	2101      	movs	r1, #1
 80041e0:	2300      	movs	r3, #0
 80041e2:	e7e4      	b.n	80041ae <d_print_comp_inner+0x1676>
 80041e4:	462a      	mov	r2, r5
 80041e6:	2111      	movs	r1, #17
 80041e8:	4620      	mov	r0, r4
 80041ea:	f000 fd19 	bl	8004c20 <d_print_mod>
 80041ee:	f7fe bd54 	b.w	8002c9a <d_print_comp_inner+0x162>
 80041f2:	692a      	ldr	r2, [r5, #16]
 80041f4:	f8d4 5128 	ldr.w	r5, [r4, #296]	@ 0x128
 80041f8:	460e      	mov	r6, r1
 80041fa:	4620      	mov	r0, r4
 80041fc:	2111      	movs	r1, #17
 80041fe:	f000 fce1 	bl	8004bc4 <d_print_comp>
 8004202:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
 8004206:	42ab      	cmp	r3, r5
 8004208:	f47e ad12 	bne.w	8002c30 <d_print_comp_inner+0xf8>
 800420c:	f8d4 3100 	ldr.w	r3, [r4, #256]	@ 0x100
 8004210:	42b3      	cmp	r3, r6
 8004212:	f47e ad0d 	bne.w	8002c30 <d_print_comp_inner+0xf8>
 8004216:	3e02      	subs	r6, #2
 8004218:	f8c4 6100 	str.w	r6, [r4, #256]	@ 0x100
 800421c:	f7fe bd08 	b.w	8002c30 <d_print_comp_inner+0xf8>
 8004220:	f8d4 3100 	ldr.w	r3, [r4, #256]	@ 0x100
 8004224:	2bff      	cmp	r3, #255	@ 0xff
 8004226:	f000 8321 	beq.w	800486c <d_print_comp_inner+0x1d34>
 800422a:	1c58      	adds	r0, r3, #1
 800422c:	f8c4 0100 	str.w	r0, [r4, #256]	@ 0x100
 8004230:	f855 2c0c 	ldr.w	r2, [r5, #-12]
 8004234:	54e7      	strb	r7, [r4, r3]
 8004236:	2111      	movs	r1, #17
 8004238:	f884 7104 	strb.w	r7, [r4, #260]	@ 0x104
 800423c:	4620      	mov	r0, r4
 800423e:	f000 fcef 	bl	8004c20 <d_print_mod>
 8004242:	f7fe be6f 	b.w	8002f24 <d_print_comp_inner+0x3ec>
 8004246:	2e07      	cmp	r6, #7
 8004248:	f47e ad74 	bne.w	8002d34 <d_print_comp_inner+0x1fc>
 800424c:	692b      	ldr	r3, [r5, #16]
 800424e:	7819      	ldrb	r1, [r3, #0]
 8004250:	2900      	cmp	r1, #0
 8004252:	f47e ad6f 	bne.w	8002d34 <d_print_comp_inner+0x1fc>
 8004256:	6919      	ldr	r1, [r3, #16]
 8004258:	2901      	cmp	r1, #1
 800425a:	f47e ad6b 	bne.w	8002d34 <d_print_comp_inner+0x1fc>
 800425e:	2f3d      	cmp	r7, #61	@ 0x3d
 8004260:	f47e ad68 	bne.w	8002d34 <d_print_comp_inner+0x1fc>
 8004264:	68db      	ldr	r3, [r3, #12]
 8004266:	781b      	ldrb	r3, [r3, #0]
 8004268:	2b30      	cmp	r3, #48	@ 0x30
 800426a:	f000 84a4 	beq.w	8004bb6 <d_print_comp_inner+0x207e>
 800426e:	2b31      	cmp	r3, #49	@ 0x31
 8004270:	f47e ad60 	bne.w	8002d34 <d_print_comp_inner+0x1fc>
 8004274:	492d      	ldr	r1, [pc, #180]	@ (800432c <d_print_comp_inner+0x17f4>)
 8004276:	f7fe bf60 	b.w	800313a <d_print_comp_inner+0x602>
 800427a:	68d2      	ldr	r2, [r2, #12]
 800427c:	2a00      	cmp	r2, #0
 800427e:	f43e acd4 	beq.w	8002c2a <d_print_comp_inner+0xf2>
 8004282:	f8d4 5110 	ldr.w	r5, [r4, #272]	@ 0x110
 8004286:	682b      	ldr	r3, [r5, #0]
 8004288:	f8c4 3110 	str.w	r3, [r4, #272]	@ 0x110
 800428c:	2111      	movs	r1, #17
 800428e:	4620      	mov	r0, r4
 8004290:	f000 fc98 	bl	8004bc4 <d_print_comp>
 8004294:	f8c4 5110 	str.w	r5, [r4, #272]	@ 0x110
 8004298:	f7fe bcca 	b.w	8002c30 <d_print_comp_inner+0xf8>
 800429c:	4924      	ldr	r1, [pc, #144]	@ (8004330 <d_print_comp_inner+0x17f8>)
 800429e:	f7fc fa23 	bl	80006e8 <d_append_string>
 80042a2:	4920      	ldr	r1, [pc, #128]	@ (8004324 <d_print_comp_inner+0x17ec>)
 80042a4:	462a      	mov	r2, r5
 80042a6:	a804      	add	r0, sp, #16
 80042a8:	f01f f994 	bl	80235d4 <sprintf>
 80042ac:	a804      	add	r0, sp, #16
 80042ae:	f001 fff7 	bl	80062a0 <strlen>
 80042b2:	b318      	cbz	r0, 80042fc <d_print_comp_inner+0x17c4>
 80042b4:	ad04      	add	r5, sp, #16
 80042b6:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
 80042ba:	182f      	adds	r7, r5, r0
 80042bc:	f04f 0800 	mov.w	r8, #0
 80042c0:	e008      	b.n	80042d4 <d_print_comp_inner+0x179c>
 80042c2:	460b      	mov	r3, r1
 80042c4:	3101      	adds	r1, #1
 80042c6:	42af      	cmp	r7, r5
 80042c8:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
 80042cc:	54e6      	strb	r6, [r4, r3]
 80042ce:	f884 6104 	strb.w	r6, [r4, #260]	@ 0x104
 80042d2:	d015      	beq.n	8004300 <d_print_comp_inner+0x17c8>
 80042d4:	29ff      	cmp	r1, #255	@ 0xff
 80042d6:	f815 6b01 	ldrb.w	r6, [r5], #1
 80042da:	d1f2      	bne.n	80042c2 <d_print_comp_inner+0x178a>
 80042dc:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
 80042e0:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
 80042e4:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
 80042e8:	4620      	mov	r0, r4
 80042ea:	4798      	blx	r3
 80042ec:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
 80042f0:	3301      	adds	r3, #1
 80042f2:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
 80042f6:	2101      	movs	r1, #1
 80042f8:	2300      	movs	r3, #0
 80042fa:	e7e4      	b.n	80042c6 <d_print_comp_inner+0x178e>
 80042fc:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
 8004300:	29ff      	cmp	r1, #255	@ 0xff
 8004302:	f000 82c2 	beq.w	800488a <d_print_comp_inner+0x1d52>
 8004306:	237d      	movs	r3, #125	@ 0x7d
 8004308:	1c4a      	adds	r2, r1, #1
 800430a:	f8c4 2100 	str.w	r2, [r4, #256]	@ 0x100
 800430e:	5463      	strb	r3, [r4, r1]
 8004310:	f884 3104 	strb.w	r3, [r4, #260]	@ 0x104
 8004314:	f7fe bc8c 	b.w	8002c30 <d_print_comp_inner+0xf8>
 8004318:	4906      	ldr	r1, [pc, #24]	@ (8004334 <d_print_comp_inner+0x17fc>)
 800431a:	f7fe bf0e 	b.w	800313a <d_print_comp_inner+0x602>
 800431e:	bf00      	nop
 8004320:	080af250 	.word	0x080af250
 8004324:	080af0a8 	.word	0x080af0a8
 8004328:	080af388 	.word	0x080af388
 800432c:	080af304 	.word	0x080af304
 8004330:	080af334 	.word	0x080af334
 8004334:	080af2b0 	.word	0x080af2b0
 8004338:	68ea      	ldr	r2, [r5, #12]
 800433a:	49c9      	ldr	r1, [pc, #804]	@ (8004660 <d_print_comp_inner+0x1b28>)
 800433c:	3201      	adds	r2, #1
 800433e:	a804      	add	r0, sp, #16
 8004340:	f01f f948 	bl	80235d4 <sprintf>
 8004344:	a804      	add	r0, sp, #16
 8004346:	f001 ffab 	bl	80062a0 <strlen>
 800434a:	2800      	cmp	r0, #0
 800434c:	f43e ac70 	beq.w	8002c30 <d_print_comp_inner+0xf8>
 8004350:	ad04      	add	r5, sp, #16
 8004352:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
 8004356:	182f      	adds	r7, r5, r0
 8004358:	f04f 0800 	mov.w	r8, #0
 800435c:	e009      	b.n	8004372 <d_print_comp_inner+0x183a>
 800435e:	460b      	mov	r3, r1
 8004360:	3101      	adds	r1, #1
 8004362:	42af      	cmp	r7, r5
 8004364:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
 8004368:	54e6      	strb	r6, [r4, r3]
 800436a:	f884 6104 	strb.w	r6, [r4, #260]	@ 0x104
 800436e:	f43e ac5f 	beq.w	8002c30 <d_print_comp_inner+0xf8>
 8004372:	29ff      	cmp	r1, #255	@ 0xff
 8004374:	f815 6b01 	ldrb.w	r6, [r5], #1
 8004378:	d1f1      	bne.n	800435e <d_print_comp_inner+0x1826>
 800437a:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
 800437e:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
 8004382:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
 8004386:	4620      	mov	r0, r4
 8004388:	4798      	blx	r3
 800438a:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
 800438e:	3301      	adds	r3, #1
 8004390:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
 8004394:	2101      	movs	r1, #1
 8004396:	2300      	movs	r3, #0
 8004398:	e7e3      	b.n	8004362 <d_print_comp_inner+0x182a>
 800439a:	2600      	movs	r6, #0
 800439c:	f7fe bcca 	b.w	8002d34 <d_print_comp_inner+0x1fc>
 80043a0:	2500      	movs	r5, #0
 80043a2:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	@ 0x108
 80043a6:	f884 50ff 	strb.w	r5, [r4, #255]	@ 0xff
 80043aa:	4620      	mov	r0, r4
 80043ac:	4798      	blx	r3
 80043ae:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
 80043b2:	2201      	movs	r2, #1
 80043b4:	4413      	add	r3, r2
 80043b6:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
 80043ba:	4629      	mov	r1, r5
 80043bc:	e58e      	b.n	8003edc <d_print_comp_inner+0x13a4>
 80043be:	2500      	movs	r5, #0
 80043c0:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	@ 0x108
 80043c4:	f884 50ff 	strb.w	r5, [r4, #255]	@ 0xff
 80043c8:	4620      	mov	r0, r4
 80043ca:	4798      	blx	r3
 80043cc:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
 80043d0:	2201      	movs	r2, #1
 80043d2:	4413      	add	r3, r2
 80043d4:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
 80043d8:	4629      	mov	r1, r5
 80043da:	f7ff ba52 	b.w	8003882 <d_print_comp_inner+0xd4a>
 80043de:	68f3      	ldr	r3, [r6, #12]
 80043e0:	681f      	ldr	r7, [r3, #0]
 80043e2:	783b      	ldrb	r3, [r7, #0]
 80043e4:	f1b3 0261 	subs.w	r2, r3, #97	@ 0x61
 80043e8:	d103      	bne.n	80043f2 <d_print_comp_inner+0x18ba>
 80043ea:	787a      	ldrb	r2, [r7, #1]
 80043ec:	3a64      	subs	r2, #100	@ 0x64
 80043ee:	bf08      	it	eq
 80043f0:	78ba      	ldrbeq	r2, [r7, #2]
 80043f2:	7829      	ldrb	r1, [r5, #0]
 80043f4:	b912      	cbnz	r2, 80043fc <d_print_comp_inner+0x18c4>
 80043f6:	2903      	cmp	r1, #3
 80043f8:	f000 82ec 	beq.w	80049d4 <d_print_comp_inner+0x1e9c>
 80043fc:	2939      	cmp	r1, #57	@ 0x39
 80043fe:	f000 836b 	beq.w	8004ad8 <d_print_comp_inner+0x1fa0>
 8004402:	2b73      	cmp	r3, #115	@ 0x73
 8004404:	d114      	bne.n	8004430 <d_print_comp_inner+0x18f8>
 8004406:	787a      	ldrb	r2, [r7, #1]
 8004408:	2a5a      	cmp	r2, #90	@ 0x5a
 800440a:	f040 8265 	bne.w	80048d8 <d_print_comp_inner+0x1da0>
 800440e:	78ba      	ldrb	r2, [r7, #2]
 8004410:	2a00      	cmp	r2, #0
 8004412:	f040 8261 	bne.w	80048d8 <d_print_comp_inner+0x1da0>
 8004416:	4629      	mov	r1, r5
 8004418:	4620      	mov	r0, r4
 800441a:	f7fc f91b 	bl	8000654 <d_find_pack>
 800441e:	f7fc f85d 	bl	80004dc <d_pack_length>
 8004422:	4601      	mov	r1, r0
 8004424:	4620      	mov	r0, r4
 8004426:	b015      	add	sp, #84	@ 0x54
 8004428:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800442c:	f7fc b9be 	b.w	80007ac <d_append_num>
 8004430:	4632      	mov	r2, r6
 8004432:	2111      	movs	r1, #17
 8004434:	4620      	mov	r0, r4
 8004436:	f001 f9d5 	bl	80057e4 <d_print_expr_op>
 800443a:	783b      	ldrb	r3, [r7, #0]
 800443c:	2b67      	cmp	r3, #103	@ 0x67
 800443e:	d107      	bne.n	8004450 <d_print_comp_inner+0x1918>
 8004440:	787a      	ldrb	r2, [r7, #1]
 8004442:	2a73      	cmp	r2, #115	@ 0x73
 8004444:	d104      	bne.n	8004450 <d_print_comp_inner+0x1918>
 8004446:	78ba      	ldrb	r2, [r7, #2]
 8004448:	b912      	cbnz	r2, 8004450 <d_print_comp_inner+0x1918>
 800444a:	462a      	mov	r2, r5
 800444c:	f7fe bc09 	b.w	8002c62 <d_print_comp_inner+0x12a>
 8004450:	2b73      	cmp	r3, #115	@ 0x73
 8004452:	f47f aa59 	bne.w	8003908 <d_print_comp_inner+0xdd0>
 8004456:	787b      	ldrb	r3, [r7, #1]
 8004458:	2b74      	cmp	r3, #116	@ 0x74
 800445a:	f47f aa55 	bne.w	8003908 <d_print_comp_inner+0xdd0>
 800445e:	78bb      	ldrb	r3, [r7, #2]
 8004460:	2b00      	cmp	r3, #0
 8004462:	f47f aa51 	bne.w	8003908 <d_print_comp_inner+0xdd0>
 8004466:	2128      	movs	r1, #40	@ 0x28
 8004468:	4620      	mov	r0, r4
 800446a:	f7fc f8b7 	bl	80005dc <d_append_char>
 800446e:	2111      	movs	r1, #17
 8004470:	462a      	mov	r2, r5
 8004472:	4620      	mov	r0, r4
 8004474:	f000 fba6 	bl	8004bc4 <d_print_comp>
 8004478:	2129      	movs	r1, #41	@ 0x29
 800447a:	e48d      	b.n	8003d98 <d_print_comp_inner+0x1260>
 800447c:	68d2      	ldr	r2, [r2, #12]
 800447e:	2111      	movs	r1, #17
 8004480:	4620      	mov	r0, r4
 8004482:	f000 fb9f 	bl	8004bc4 <d_print_comp>
 8004486:	f8d4 3148 	ldr.w	r3, [r4, #328]	@ 0x148
 800448a:	b113      	cbz	r3, 8004492 <d_print_comp_inner+0x195a>
 800448c:	9b04      	ldr	r3, [sp, #16]
 800448e:	f8c4 3110 	str.w	r3, [r4, #272]	@ 0x110
 8004492:	f894 3104 	ldrb.w	r3, [r4, #260]	@ 0x104
 8004496:	2b3c      	cmp	r3, #60	@ 0x3c
 8004498:	f000 8270 	beq.w	800497c <d_print_comp_inner+0x1e44>
 800449c:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
 80044a0:	29ff      	cmp	r1, #255	@ 0xff
 80044a2:	f000 825b 	beq.w	800495c <d_print_comp_inner+0x1e24>
 80044a6:	1c4a      	adds	r2, r1, #1
 80044a8:	233c      	movs	r3, #60	@ 0x3c
 80044aa:	f8c4 2100 	str.w	r2, [r4, #256]	@ 0x100
 80044ae:	5463      	strb	r3, [r4, r1]
 80044b0:	f884 3104 	strb.w	r3, [r4, #260]	@ 0x104
 80044b4:	68eb      	ldr	r3, [r5, #12]
 80044b6:	2111      	movs	r1, #17
 80044b8:	691a      	ldr	r2, [r3, #16]
 80044ba:	4620      	mov	r0, r4
 80044bc:	f000 fb82 	bl	8004bc4 <d_print_comp>
 80044c0:	f894 3104 	ldrb.w	r3, [r4, #260]	@ 0x104
 80044c4:	2b3e      	cmp	r3, #62	@ 0x3e
 80044c6:	f000 8244 	beq.w	8004952 <d_print_comp_inner+0x1e1a>
 80044ca:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
 80044ce:	29ff      	cmp	r1, #255	@ 0xff
 80044d0:	f000 8231 	beq.w	8004936 <d_print_comp_inner+0x1dfe>
 80044d4:	233e      	movs	r3, #62	@ 0x3e
 80044d6:	1c4a      	adds	r2, r1, #1
 80044d8:	f8c4 2100 	str.w	r2, [r4, #256]	@ 0x100
 80044dc:	5463      	strb	r3, [r4, r1]
 80044de:	f884 3104 	strb.w	r3, [r4, #260]	@ 0x104
 80044e2:	f7fe bba5 	b.w	8002c30 <d_print_comp_inner+0xf8>
 80044e6:	495f      	ldr	r1, [pc, #380]	@ (8004664 <d_print_comp_inner+0x1b2c>)
 80044e8:	f7fc f8fe 	bl	80006e8 <d_append_string>
 80044ec:	f7ff b89f 	b.w	800362e <d_print_comp_inner+0xaf6>
 80044f0:	462a      	mov	r2, r5
 80044f2:	2111      	movs	r1, #17
 80044f4:	4620      	mov	r0, r4
 80044f6:	f000 fb93 	bl	8004c20 <d_print_mod>
 80044fa:	f7fe bbe8 	b.w	8002cce <d_print_comp_inner+0x196>
 80044fe:	29ff      	cmp	r1, #255	@ 0xff
 8004500:	f000 8241 	beq.w	8004986 <d_print_comp_inner+0x1e4e>
 8004504:	1c4b      	adds	r3, r1, #1
 8004506:	f8c4 3100 	str.w	r3, [r4, #256]	@ 0x100
 800450a:	2320      	movs	r3, #32
 800450c:	5463      	strb	r3, [r4, r1]
 800450e:	f884 3104 	strb.w	r3, [r4, #260]	@ 0x104
 8004512:	e54a      	b.n	8003faa <d_print_comp_inner+0x1472>
 8004514:	68c2      	ldr	r2, [r0, #12]
 8004516:	f8d4 c114 	ldr.w	ip, [r4, #276]	@ 0x114
 800451a:	4605      	mov	r5, r0
 800451c:	f7fe bbf2 	b.w	8002d04 <d_print_comp_inner+0x1cc>
 8004520:	2301      	movs	r3, #1
 8004522:	e9c4 a345 	strd	sl, r3, [r4, #276]	@ 0x114
 8004526:	f7fe bb83 	b.w	8002c30 <d_print_comp_inner+0xf8>
 800452a:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
 800452e:	29ff      	cmp	r1, #255	@ 0xff
 8004530:	f000 826b 	beq.w	8004a0a <d_print_comp_inner+0x1ed2>
 8004534:	1c4b      	adds	r3, r1, #1
 8004536:	f8c4 3100 	str.w	r3, [r4, #256]	@ 0x100
 800453a:	2328      	movs	r3, #40	@ 0x28
 800453c:	5463      	strb	r3, [r4, r1]
 800453e:	f884 3104 	strb.w	r3, [r4, #260]	@ 0x104
 8004542:	2111      	movs	r1, #17
 8004544:	68f2      	ldr	r2, [r6, #12]
 8004546:	4620      	mov	r0, r4
 8004548:	f000 fb3c 	bl	8004bc4 <d_print_comp>
 800454c:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
 8004550:	29ff      	cmp	r1, #255	@ 0xff
 8004552:	f000 824a 	beq.w	80049ea <d_print_comp_inner+0x1eb2>
 8004556:	2329      	movs	r3, #41	@ 0x29
 8004558:	1c4a      	adds	r2, r1, #1
 800455a:	f8c4 2100 	str.w	r2, [r4, #256]	@ 0x100
 800455e:	5463      	strb	r3, [r4, r1]
 8004560:	f884 3104 	strb.w	r3, [r4, #260]	@ 0x104
 8004564:	f7ff b9d0 	b.w	8003908 <d_print_comp_inner+0xdd0>
 8004568:	2700      	movs	r7, #0
 800456a:	55a7      	strb	r7, [r4, r6]
 800456c:	4631      	mov	r1, r6
 800456e:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	@ 0x108
 8004572:	4620      	mov	r0, r4
 8004574:	4798      	blx	r3
 8004576:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
 800457a:	f8c4 7100 	str.w	r7, [r4, #256]	@ 0x100
 800457e:	3301      	adds	r3, #1
 8004580:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
 8004584:	463e      	mov	r6, r7
 8004586:	f7fe bc08 	b.w	8002d9a <d_print_comp_inner+0x262>
 800458a:	f8d4 c114 	ldr.w	ip, [r4, #276]	@ 0x114
 800458e:	464e      	mov	r6, r9
 8004590:	68c2      	ldr	r2, [r0, #12]
 8004592:	4605      	mov	r5, r0
 8004594:	f7fe bbb6 	b.w	8002d04 <d_print_comp_inner+0x1cc>
 8004598:	2600      	movs	r6, #0
 800459a:	f8d0 3108 	ldr.w	r3, [r0, #264]	@ 0x108
 800459e:	f8d0 210c 	ldr.w	r2, [r0, #268]	@ 0x10c
 80045a2:	f880 60ff 	strb.w	r6, [r0, #255]	@ 0xff
 80045a6:	4798      	blx	r3
 80045a8:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
 80045ac:	2201      	movs	r2, #1
 80045ae:	4413      	add	r3, r2
 80045b0:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
 80045b4:	4631      	mov	r1, r6
 80045b6:	f7ff b8df 	b.w	8003778 <d_print_comp_inner+0xc40>
 80045ba:	2600      	movs	r6, #0
 80045bc:	f8d0 3108 	ldr.w	r3, [r0, #264]	@ 0x108
 80045c0:	f8d0 210c 	ldr.w	r2, [r0, #268]	@ 0x10c
 80045c4:	f880 60ff 	strb.w	r6, [r0, #255]	@ 0xff
 80045c8:	4798      	blx	r3
 80045ca:	f8d4 2128 	ldr.w	r2, [r4, #296]	@ 0x128
 80045ce:	2301      	movs	r3, #1
 80045d0:	441a      	add	r2, r3
 80045d2:	f8c4 2128 	str.w	r2, [r4, #296]	@ 0x128
 80045d6:	4631      	mov	r1, r6
 80045d8:	f7ff bb7f 	b.w	8003cda <d_print_comp_inner+0x11a2>
 80045dc:	2600      	movs	r6, #0
 80045de:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
 80045e2:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
 80045e6:	f884 60ff 	strb.w	r6, [r4, #255]	@ 0xff
 80045ea:	4620      	mov	r0, r4
 80045ec:	4798      	blx	r3
 80045ee:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
 80045f2:	2201      	movs	r2, #1
 80045f4:	4413      	add	r3, r2
 80045f6:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
 80045fa:	4631      	mov	r1, r6
 80045fc:	f7ff ba8a 	b.w	8003b14 <d_print_comp_inner+0xfdc>
 8004600:	2600      	movs	r6, #0
 8004602:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
 8004606:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
 800460a:	f884 60ff 	strb.w	r6, [r4, #255]	@ 0xff
 800460e:	4620      	mov	r0, r4
 8004610:	4798      	blx	r3
 8004612:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
 8004616:	2201      	movs	r2, #1
 8004618:	4413      	add	r3, r2
 800461a:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
 800461e:	4631      	mov	r1, r6
 8004620:	f7ff b91e 	b.w	8003860 <d_print_comp_inner+0xd28>
 8004624:	4910      	ldr	r1, [pc, #64]	@ (8004668 <d_print_comp_inner+0x1b30>)
 8004626:	4620      	mov	r0, r4
 8004628:	f7fc f85e 	bl	80006e8 <d_append_string>
 800462c:	68ff      	ldr	r7, [r7, #12]
 800462e:	463a      	mov	r2, r7
 8004630:	f7fe bb17 	b.w	8002c62 <d_print_comp_inner+0x12a>
 8004634:	693f      	ldr	r7, [r7, #16]
 8004636:	783b      	ldrb	r3, [r7, #0]
 8004638:	2b48      	cmp	r3, #72	@ 0x48
 800463a:	f000 81c5 	beq.w	80049c8 <d_print_comp_inner+0x1e90>
 800463e:	eb08 1c0c 	add.w	ip, r8, ip, lsl #4
 8004642:	468b      	mov	fp, r1
 8004644:	2b4e      	cmp	r3, #78	@ 0x4e
 8004646:	f1a3 011c 	sub.w	r1, r3, #28
 800464a:	f1a3 0250 	sub.w	r2, r3, #80	@ 0x50
 800464e:	d00f      	beq.n	8004670 <d_print_comp_inner+0x1b38>
 8004650:	d80c      	bhi.n	800466c <d_print_comp_inner+0x1b34>
 8004652:	2904      	cmp	r1, #4
 8004654:	d90c      	bls.n	8004670 <d_print_comp_inner+0x1b38>
 8004656:	783b      	ldrb	r3, [r7, #0]
 8004658:	4659      	mov	r1, fp
 800465a:	f7fe bc49 	b.w	8002ef0 <d_print_comp_inner+0x3b8>
 800465e:	bf00      	nop
 8004660:	080af0a8 	.word	0x080af0a8
 8004664:	080af2a0 	.word	0x080af2a0
 8004668:	080af12c 	.word	0x080af12c
 800466c:	2a01      	cmp	r2, #1
 800466e:	d8f2      	bhi.n	8004656 <d_print_comp_inner+0x1b1e>
 8004670:	2e04      	cmp	r6, #4
 8004672:	46e2      	mov	sl, ip
 8004674:	f43e aad9 	beq.w	8002c2a <d_print_comp_inner+0xf2>
 8004678:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 800467c:	f10c 0e10 	add.w	lr, ip, #16
 8004680:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 8004684:	2300      	movs	r3, #0
 8004686:	f8cc c010 	str.w	ip, [ip, #16]
 800468a:	e9ca 7301 	strd	r7, r3, [sl, #4]
 800468e:	68ff      	ldr	r7, [r7, #12]
 8004690:	f8c4 e114 	str.w	lr, [r4, #276]	@ 0x114
 8004694:	3601      	adds	r6, #1
 8004696:	46f4      	mov	ip, lr
 8004698:	f8ca b00c 	str.w	fp, [sl, #12]
 800469c:	2f00      	cmp	r7, #0
 800469e:	f43e aac4 	beq.w	8002c2a <d_print_comp_inner+0xf2>
 80046a2:	783b      	ldrb	r3, [r7, #0]
 80046a4:	e7ce      	b.n	8004644 <d_print_comp_inner+0x1b0c>
 80046a6:	2500      	movs	r5, #0
 80046a8:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	@ 0x108
 80046ac:	f884 50ff 	strb.w	r5, [r4, #255]	@ 0xff
 80046b0:	4620      	mov	r0, r4
 80046b2:	4798      	blx	r3
 80046b4:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
 80046b8:	3301      	adds	r3, #1
 80046ba:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
 80046be:	4629      	mov	r1, r5
 80046c0:	2301      	movs	r3, #1
 80046c2:	f7fe bfa3 	b.w	800360c <d_print_comp_inner+0xad4>
 80046c6:	2120      	movs	r1, #32
 80046c8:	4620      	mov	r0, r4
 80046ca:	f7fb ff87 	bl	80005dc <d_append_char>
 80046ce:	f7fe bf97 	b.w	8003600 <d_print_comp_inner+0xac8>
 80046d2:	f04f 0800 	mov.w	r8, #0
 80046d6:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	@ 0x108
 80046da:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
 80046de:	4620      	mov	r0, r4
 80046e0:	4798      	blx	r3
 80046e2:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
 80046e6:	3301      	adds	r3, #1
 80046e8:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
 80046ec:	4641      	mov	r1, r8
 80046ee:	2301      	movs	r3, #1
 80046f0:	f7fe bf76 	b.w	80035e0 <d_print_comp_inner+0xaa8>
 80046f4:	2120      	movs	r1, #32
 80046f6:	4620      	mov	r0, r4
 80046f8:	f7fb ff70 	bl	80005dc <d_append_char>
 80046fc:	f7fe bf6a 	b.w	80035d4 <d_print_comp_inner+0xa9c>
 8004700:	215b      	movs	r1, #91	@ 0x5b
 8004702:	4620      	mov	r0, r4
 8004704:	f7fb ff6a 	bl	80005dc <d_append_char>
 8004708:	2111      	movs	r1, #17
 800470a:	692a      	ldr	r2, [r5, #16]
 800470c:	4620      	mov	r0, r4
 800470e:	f000 fa59 	bl	8004bc4 <d_print_comp>
 8004712:	215d      	movs	r1, #93	@ 0x5d
 8004714:	f7ff bb40 	b.w	8003d98 <d_print_comp_inner+0x1260>
 8004718:	212d      	movs	r1, #45	@ 0x2d
 800471a:	4620      	mov	r0, r4
 800471c:	f7fb ff5e 	bl	80005dc <d_append_char>
 8004720:	f7fe bb28 	b.w	8002d74 <d_print_comp_inner+0x23c>
 8004724:	2700      	movs	r7, #0
 8004726:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	@ 0x108
 800472a:	f884 70ff 	strb.w	r7, [r4, #255]	@ 0xff
 800472e:	4620      	mov	r0, r4
 8004730:	4798      	blx	r3
 8004732:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
 8004736:	3301      	adds	r3, #1
 8004738:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
 800473c:	4639      	mov	r1, r7
 800473e:	2301      	movs	r3, #1
 8004740:	f7fe bb0e 	b.w	8002d60 <d_print_comp_inner+0x228>
 8004744:	2700      	movs	r7, #0
 8004746:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	@ 0x108
 800474a:	f884 70ff 	strb.w	r7, [r4, #255]	@ 0xff
 800474e:	4620      	mov	r0, r4
 8004750:	4798      	blx	r3
 8004752:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
 8004756:	68ea      	ldr	r2, [r5, #12]
 8004758:	3301      	adds	r3, #1
 800475a:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
 800475e:	4639      	mov	r1, r7
 8004760:	2301      	movs	r3, #1
 8004762:	f7fe baed 	b.w	8002d40 <d_print_comp_inner+0x208>
 8004766:	f8d0 6134 	ldr.w	r6, [r0, #308]	@ 0x134
 800476a:	2e00      	cmp	r6, #0
 800476c:	f340 816a 	ble.w	8004a44 <d_print_comp_inner+0x1f0c>
 8004770:	f8d0 c130 	ldr.w	ip, [r0, #304]	@ 0x130
 8004774:	464b      	mov	r3, r9
 8004776:	4660      	mov	r0, ip
 8004778:	e004      	b.n	8004784 <d_print_comp_inner+0x1c4c>
 800477a:	42b3      	cmp	r3, r6
 800477c:	f100 0008 	add.w	r0, r0, #8
 8004780:	f000 8160 	beq.w	8004a44 <d_print_comp_inner+0x1f0c>
 8004784:	f85c 1033 	ldr.w	r1, [ip, r3, lsl #3]
 8004788:	428a      	cmp	r2, r1
 800478a:	f103 0301 	add.w	r3, r3, #1
 800478e:	d1f4      	bne.n	800477a <d_print_comp_inner+0x1c42>
 8004790:	2800      	cmp	r0, #0
 8004792:	f000 8157 	beq.w	8004a44 <d_print_comp_inner+0x1f0c>
 8004796:	f8d4 612c 	ldr.w	r6, [r4, #300]	@ 0x12c
 800479a:	2e00      	cmp	r6, #0
 800479c:	f000 8103 	beq.w	80049a6 <d_print_comp_inner+0x1e6e>
 80047a0:	4633      	mov	r3, r6
 80047a2:	e003      	b.n	80047ac <d_print_comp_inner+0x1c74>
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	f000 80fd 	beq.w	80049a6 <d_print_comp_inner+0x1e6e>
 80047ac:	6819      	ldr	r1, [r3, #0]
 80047ae:	4291      	cmp	r1, r2
 80047b0:	d003      	beq.n	80047ba <d_print_comp_inner+0x1c82>
 80047b2:	42a9      	cmp	r1, r5
 80047b4:	d1f6      	bne.n	80047a4 <d_print_comp_inner+0x1c6c>
 80047b6:	42b3      	cmp	r3, r6
 80047b8:	d0f4      	beq.n	80047a4 <d_print_comp_inner+0x1c6c>
 80047ba:	4611      	mov	r1, r2
 80047bc:	4620      	mov	r0, r4
 80047be:	9201      	str	r2, [sp, #4]
 80047c0:	f7fb ff2e 	bl	8000620 <d_lookup_template_argument>
 80047c4:	9a01      	ldr	r2, [sp, #4]
 80047c6:	2800      	cmp	r0, #0
 80047c8:	f43e aa2f 	beq.w	8002c2a <d_print_comp_inner+0xf2>
 80047cc:	7803      	ldrb	r3, [r0, #0]
 80047ce:	2b2f      	cmp	r3, #47	@ 0x2f
 80047d0:	f000 8128 	beq.w	8004a24 <d_print_comp_inner+0x1eec>
 80047d4:	464e      	mov	r6, r9
 80047d6:	f7fe ba8a 	b.w	8002cee <d_print_comp_inner+0x1b6>
 80047da:	692b      	ldr	r3, [r5, #16]
 80047dc:	781b      	ldrb	r3, [r3, #0]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	f47e aaa8 	bne.w	8002d34 <d_print_comp_inner+0x1fc>
 80047e4:	2f3e      	cmp	r7, #62	@ 0x3e
 80047e6:	f000 81da 	beq.w	8004b9e <d_print_comp_inner+0x2066>
 80047ea:	692a      	ldr	r2, [r5, #16]
 80047ec:	2111      	movs	r1, #17
 80047ee:	4620      	mov	r0, r4
 80047f0:	3e02      	subs	r6, #2
 80047f2:	f000 f9e7 	bl	8004bc4 <d_print_comp>
 80047f6:	2e04      	cmp	r6, #4
 80047f8:	f63e aa1a 	bhi.w	8002c30 <d_print_comp_inner+0xf8>
 80047fc:	e8df f006 	tbb	[pc, r6]
 8004800:	06090c0f 	.word	0x06090c0f
 8004804:	03          	.byte	0x03
 8004805:	00          	.byte	0x00
 8004806:	49c7      	ldr	r1, [pc, #796]	@ (8004b24 <d_print_comp_inner+0x1fec>)
 8004808:	f7fe bc97 	b.w	800313a <d_print_comp_inner+0x602>
 800480c:	49c6      	ldr	r1, [pc, #792]	@ (8004b28 <d_print_comp_inner+0x1ff0>)
 800480e:	f7fe bc94 	b.w	800313a <d_print_comp_inner+0x602>
 8004812:	49c6      	ldr	r1, [pc, #792]	@ (8004b2c <d_print_comp_inner+0x1ff4>)
 8004814:	f7fe bc91 	b.w	800313a <d_print_comp_inner+0x602>
 8004818:	216c      	movs	r1, #108	@ 0x6c
 800481a:	f7ff babd 	b.w	8003d98 <d_print_comp_inner+0x1260>
 800481e:	2175      	movs	r1, #117	@ 0x75
 8004820:	f7ff baba 	b.w	8003d98 <d_print_comp_inner+0x1260>
 8004824:	781b      	ldrb	r3, [r3, #0]
 8004826:	f1a3 0172 	sub.w	r1, r3, #114	@ 0x72
 800482a:	2901      	cmp	r1, #1
 800482c:	d903      	bls.n	8004836 <d_print_comp_inner+0x1cfe>
 800482e:	3b63      	subs	r3, #99	@ 0x63
 8004830:	2b01      	cmp	r3, #1
 8004832:	f63f aa65 	bhi.w	8003d00 <d_print_comp_inner+0x11c8>
 8004836:	2111      	movs	r1, #17
 8004838:	4620      	mov	r0, r4
 800483a:	f000 ffd3 	bl	80057e4 <d_print_expr_op>
 800483e:	213c      	movs	r1, #60	@ 0x3c
 8004840:	4620      	mov	r0, r4
 8004842:	f7fb fecb 	bl	80005dc <d_append_char>
 8004846:	692b      	ldr	r3, [r5, #16]
 8004848:	2111      	movs	r1, #17
 800484a:	68da      	ldr	r2, [r3, #12]
 800484c:	4620      	mov	r0, r4
 800484e:	f000 f9b9 	bl	8004bc4 <d_print_comp>
 8004852:	49b7      	ldr	r1, [pc, #732]	@ (8004b30 <d_print_comp_inner+0x1ff8>)
 8004854:	4620      	mov	r0, r4
 8004856:	f7fb ff47 	bl	80006e8 <d_append_string>
 800485a:	692b      	ldr	r3, [r5, #16]
 800485c:	2111      	movs	r1, #17
 800485e:	691a      	ldr	r2, [r3, #16]
 8004860:	4620      	mov	r0, r4
 8004862:	f000 f9af 	bl	8004bc4 <d_print_comp>
 8004866:	2129      	movs	r1, #41	@ 0x29
 8004868:	f7ff ba96 	b.w	8003d98 <d_print_comp_inner+0x1260>
 800486c:	4619      	mov	r1, r3
 800486e:	4620      	mov	r0, r4
 8004870:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	@ 0x108
 8004874:	f884 60ff 	strb.w	r6, [r4, #255]	@ 0xff
 8004878:	4798      	blx	r3
 800487a:	f8d4 2128 	ldr.w	r2, [r4, #296]	@ 0x128
 800487e:	3201      	adds	r2, #1
 8004880:	4633      	mov	r3, r6
 8004882:	f8c4 2128 	str.w	r2, [r4, #296]	@ 0x128
 8004886:	2001      	movs	r0, #1
 8004888:	e4d0      	b.n	800422c <d_print_comp_inner+0x16f4>
 800488a:	2500      	movs	r5, #0
 800488c:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	@ 0x108
 8004890:	f884 50ff 	strb.w	r5, [r4, #255]	@ 0xff
 8004894:	4620      	mov	r0, r4
 8004896:	4798      	blx	r3
 8004898:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
 800489c:	3301      	adds	r3, #1
 800489e:	4629      	mov	r1, r5
 80048a0:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
 80048a4:	e52f      	b.n	8004306 <d_print_comp_inner+0x17ce>
 80048a6:	2111      	movs	r1, #17
 80048a8:	4620      	mov	r0, r4
 80048aa:	4642      	mov	r2, r8
 80048ac:	f001 f998 	bl	8005be0 <d_print_subexpr>
 80048b0:	49a0      	ldr	r1, [pc, #640]	@ (8004b34 <d_print_comp_inner+0x1ffc>)
 80048b2:	f7fe bc42 	b.w	800313a <d_print_comp_inner+0x602>
 80048b6:	2600      	movs	r6, #0
 80048b8:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
 80048bc:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
 80048c0:	f884 60ff 	strb.w	r6, [r4, #255]	@ 0xff
 80048c4:	4620      	mov	r0, r4
 80048c6:	4798      	blx	r3
 80048c8:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
 80048cc:	3301      	adds	r3, #1
 80048ce:	4631      	mov	r1, r6
 80048d0:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
 80048d4:	f7fe beb9 	b.w	800364a <d_print_comp_inner+0xb12>
 80048d8:	2b73      	cmp	r3, #115	@ 0x73
 80048da:	f47f ada9 	bne.w	8004430 <d_print_comp_inner+0x18f8>
 80048de:	787b      	ldrb	r3, [r7, #1]
 80048e0:	2b50      	cmp	r3, #80	@ 0x50
 80048e2:	f47f ada5 	bne.w	8004430 <d_print_comp_inner+0x18f8>
 80048e6:	78bb      	ldrb	r3, [r7, #2]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	f47f ada1 	bne.w	8004430 <d_print_comp_inner+0x18f8>
 80048ee:	461e      	mov	r6, r3
 80048f0:	e004      	b.n	80048fc <d_print_comp_inner+0x1dc4>
 80048f2:	3601      	adds	r6, #1
 80048f4:	692d      	ldr	r5, [r5, #16]
 80048f6:	2d00      	cmp	r5, #0
 80048f8:	f000 80a2 	beq.w	8004a40 <d_print_comp_inner+0x1f08>
 80048fc:	782b      	ldrb	r3, [r5, #0]
 80048fe:	2b2f      	cmp	r3, #47	@ 0x2f
 8004900:	f040 809e 	bne.w	8004a40 <d_print_comp_inner+0x1f08>
 8004904:	68eb      	ldr	r3, [r5, #12]
 8004906:	2b00      	cmp	r3, #0
 8004908:	f000 809a 	beq.w	8004a40 <d_print_comp_inner+0x1f08>
 800490c:	781a      	ldrb	r2, [r3, #0]
 800490e:	2a4c      	cmp	r2, #76	@ 0x4c
 8004910:	d1ef      	bne.n	80048f2 <d_print_comp_inner+0x1dba>
 8004912:	68d9      	ldr	r1, [r3, #12]
 8004914:	4620      	mov	r0, r4
 8004916:	f7fb fe9d 	bl	8000654 <d_find_pack>
 800491a:	4602      	mov	r2, r0
 800491c:	b148      	cbz	r0, 8004932 <d_print_comp_inner+0x1dfa>
 800491e:	2200      	movs	r2, #0
 8004920:	e004      	b.n	800492c <d_print_comp_inner+0x1df4>
 8004922:	68c1      	ldr	r1, [r0, #12]
 8004924:	b129      	cbz	r1, 8004932 <d_print_comp_inner+0x1dfa>
 8004926:	6900      	ldr	r0, [r0, #16]
 8004928:	3201      	adds	r2, #1
 800492a:	b110      	cbz	r0, 8004932 <d_print_comp_inner+0x1dfa>
 800492c:	7801      	ldrb	r1, [r0, #0]
 800492e:	292f      	cmp	r1, #47	@ 0x2f
 8004930:	d0f7      	beq.n	8004922 <d_print_comp_inner+0x1dea>
 8004932:	4416      	add	r6, r2
 8004934:	e7de      	b.n	80048f4 <d_print_comp_inner+0x1dbc>
 8004936:	2500      	movs	r5, #0
 8004938:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	@ 0x108
 800493c:	f884 50ff 	strb.w	r5, [r4, #255]	@ 0xff
 8004940:	4620      	mov	r0, r4
 8004942:	4798      	blx	r3
 8004944:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
 8004948:	3301      	adds	r3, #1
 800494a:	4629      	mov	r1, r5
 800494c:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
 8004950:	e5c0      	b.n	80044d4 <d_print_comp_inner+0x199c>
 8004952:	2120      	movs	r1, #32
 8004954:	4620      	mov	r0, r4
 8004956:	f7fb fe41 	bl	80005dc <d_append_char>
 800495a:	e5b6      	b.n	80044ca <d_print_comp_inner+0x1992>
 800495c:	2600      	movs	r6, #0
 800495e:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
 8004962:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
 8004966:	f884 60ff 	strb.w	r6, [r4, #255]	@ 0xff
 800496a:	4620      	mov	r0, r4
 800496c:	4798      	blx	r3
 800496e:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
 8004972:	3301      	adds	r3, #1
 8004974:	4631      	mov	r1, r6
 8004976:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
 800497a:	e594      	b.n	80044a6 <d_print_comp_inner+0x196e>
 800497c:	2120      	movs	r1, #32
 800497e:	4620      	mov	r0, r4
 8004980:	f7fb fe2c 	bl	80005dc <d_append_char>
 8004984:	e58a      	b.n	800449c <d_print_comp_inner+0x1964>
 8004986:	2600      	movs	r6, #0
 8004988:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	@ 0x108
 800498c:	f884 60ff 	strb.w	r6, [r4, #255]	@ 0xff
 8004990:	4620      	mov	r0, r4
 8004992:	4798      	blx	r3
 8004994:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
 8004998:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800499c:	3301      	adds	r3, #1
 800499e:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
 80049a2:	4631      	mov	r1, r6
 80049a4:	e5ae      	b.n	8004504 <d_print_comp_inner+0x19cc>
 80049a6:	6843      	ldr	r3, [r0, #4]
 80049a8:	f8d4 8110 	ldr.w	r8, [r4, #272]	@ 0x110
 80049ac:	f8c4 3110 	str.w	r3, [r4, #272]	@ 0x110
 80049b0:	4611      	mov	r1, r2
 80049b2:	4620      	mov	r0, r4
 80049b4:	9201      	str	r2, [sp, #4]
 80049b6:	f7fb fe33 	bl	8000620 <d_lookup_template_argument>
 80049ba:	2800      	cmp	r0, #0
 80049bc:	f000 80c0 	beq.w	8004b40 <d_print_comp_inner+0x2008>
 80049c0:	9a01      	ldr	r2, [sp, #4]
 80049c2:	f04f 0901 	mov.w	r9, #1
 80049c6:	e701      	b.n	80047cc <d_print_comp_inner+0x1c94>
 80049c8:	68ff      	ldr	r7, [r7, #12]
 80049ca:	2f00      	cmp	r7, #0
 80049cc:	f43e a92d 	beq.w	8002c2a <d_print_comp_inner+0xf2>
 80049d0:	783b      	ldrb	r3, [r7, #0]
 80049d2:	e634      	b.n	800463e <d_print_comp_inner+0x1b06>
 80049d4:	68ea      	ldr	r2, [r5, #12]
 80049d6:	7811      	ldrb	r1, [r2, #0]
 80049d8:	2901      	cmp	r1, #1
 80049da:	f47f ad12 	bne.w	8004402 <d_print_comp_inner+0x18ca>
 80049de:	6929      	ldr	r1, [r5, #16]
 80049e0:	7809      	ldrb	r1, [r1, #0]
 80049e2:	2929      	cmp	r1, #41	@ 0x29
 80049e4:	bf08      	it	eq
 80049e6:	4615      	moveq	r5, r2
 80049e8:	e50b      	b.n	8004402 <d_print_comp_inner+0x18ca>
 80049ea:	2600      	movs	r6, #0
 80049ec:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
 80049f0:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
 80049f4:	f884 60ff 	strb.w	r6, [r4, #255]	@ 0xff
 80049f8:	4620      	mov	r0, r4
 80049fa:	4798      	blx	r3
 80049fc:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
 8004a00:	3301      	adds	r3, #1
 8004a02:	4631      	mov	r1, r6
 8004a04:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
 8004a08:	e5a5      	b.n	8004556 <d_print_comp_inner+0x1a1e>
 8004a0a:	2700      	movs	r7, #0
 8004a0c:	e9d0 3242 	ldrd	r3, r2, [r0, #264]	@ 0x108
 8004a10:	f880 70ff 	strb.w	r7, [r0, #255]	@ 0xff
 8004a14:	4798      	blx	r3
 8004a16:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
 8004a1a:	3301      	adds	r3, #1
 8004a1c:	4639      	mov	r1, r7
 8004a1e:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
 8004a22:	e587      	b.n	8004534 <d_print_comp_inner+0x19fc>
 8004a24:	f8d4 1124 	ldr.w	r1, [r4, #292]	@ 0x124
 8004a28:	2900      	cmp	r1, #0
 8004a2a:	f2c0 80bc 	blt.w	8004ba6 <d_print_comp_inner+0x206e>
 8004a2e:	f7fb fd65 	bl	80004fc <d_index_template_argument.part.0>
 8004a32:	2800      	cmp	r0, #0
 8004a34:	f000 8080 	beq.w	8004b38 <d_print_comp_inner+0x2000>
 8004a38:	7803      	ldrb	r3, [r0, #0]
 8004a3a:	464e      	mov	r6, r9
 8004a3c:	f7fe b957 	b.w	8002cee <d_print_comp_inner+0x1b6>
 8004a40:	4631      	mov	r1, r6
 8004a42:	e4ef      	b.n	8004424 <d_print_comp_inner+0x18ec>
 8004a44:	f8d4 3138 	ldr.w	r3, [r4, #312]	@ 0x138
 8004a48:	42b3      	cmp	r3, r6
 8004a4a:	f77e a8ee 	ble.w	8002c2a <d_print_comp_inner+0xf2>
 8004a4e:	f8d4 1130 	ldr.w	r1, [r4, #304]	@ 0x130
 8004a52:	f8d4 c110 	ldr.w	ip, [r4, #272]	@ 0x110
 8004a56:	eb01 03c6 	add.w	r3, r1, r6, lsl #3
 8004a5a:	1c70      	adds	r0, r6, #1
 8004a5c:	f8c4 0134 	str.w	r0, [r4, #308]	@ 0x134
 8004a60:	3304      	adds	r3, #4
 8004a62:	f841 2036 	str.w	r2, [r1, r6, lsl #3]
 8004a66:	f1bc 0f00 	cmp.w	ip, #0
 8004a6a:	d058      	beq.n	8004b1e <d_print_comp_inner+0x1fe6>
 8004a6c:	e9d4 6050 	ldrd	r6, r0, [r4, #320]	@ 0x140
 8004a70:	4696      	mov	lr, r2
 8004a72:	e010      	b.n	8004a96 <d_print_comp_inner+0x1f5e>
 8004a74:	f8d4 113c 	ldr.w	r1, [r4, #316]	@ 0x13c
 8004a78:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8004a7c:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8004a80:	3601      	adds	r6, #1
 8004a82:	f8c4 6140 	str.w	r6, [r4, #320]	@ 0x140
 8004a86:	604a      	str	r2, [r1, #4]
 8004a88:	6019      	str	r1, [r3, #0]
 8004a8a:	f8dc c000 	ldr.w	ip, [ip]
 8004a8e:	460b      	mov	r3, r1
 8004a90:	f1bc 0f00 	cmp.w	ip, #0
 8004a94:	d042      	beq.n	8004b1c <d_print_comp_inner+0x1fe4>
 8004a96:	4286      	cmp	r6, r0
 8004a98:	dbec      	blt.n	8004a74 <d_print_comp_inner+0x1f3c>
 8004a9a:	f7fe b8c6 	b.w	8002c2a <d_print_comp_inner+0xf2>
 8004a9e:	6912      	ldr	r2, [r2, #16]
 8004aa0:	2111      	movs	r1, #17
 8004aa2:	f000 f88f 	bl	8004bc4 <d_print_comp>
 8004aa6:	9b06      	ldr	r3, [sp, #24]
 8004aa8:	f8c4 9114 	str.w	r9, [r4, #276]	@ 0x114
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	f43e ae2d 	beq.w	800370c <d_print_comp_inner+0xbd4>
 8004ab2:	f7fe b8bd 	b.w	8002c30 <d_print_comp_inner+0xf8>
 8004ab6:	68da      	ldr	r2, [r3, #12]
 8004ab8:	6891      	ldr	r1, [r2, #8]
 8004aba:	2901      	cmp	r1, #1
 8004abc:	f47f a935 	bne.w	8003d2a <d_print_comp_inner+0x11f2>
 8004ac0:	6852      	ldr	r2, [r2, #4]
 8004ac2:	7812      	ldrb	r2, [r2, #0]
 8004ac4:	2a3e      	cmp	r2, #62	@ 0x3e
 8004ac6:	f47f a930 	bne.w	8003d2a <d_print_comp_inner+0x11f2>
 8004aca:	2128      	movs	r1, #40	@ 0x28
 8004acc:	4620      	mov	r0, r4
 8004ace:	f7fb fd85 	bl	80005dc <d_append_char>
 8004ad2:	68eb      	ldr	r3, [r5, #12]
 8004ad4:	f7ff b929 	b.w	8003d2a <d_print_comp_inner+0x11f2>
 8004ad8:	68ea      	ldr	r2, [r5, #12]
 8004ada:	2111      	movs	r1, #17
 8004adc:	4620      	mov	r0, r4
 8004ade:	f001 f87f 	bl	8005be0 <d_print_subexpr>
 8004ae2:	4632      	mov	r2, r6
 8004ae4:	f7ff b83e 	b.w	8003b64 <d_print_comp_inner+0x102c>
 8004ae8:	68d2      	ldr	r2, [r2, #12]
 8004aea:	f7fe b90b 	b.w	8002d04 <d_print_comp_inner+0x1cc>
 8004aee:	4620      	mov	r0, r4
 8004af0:	215b      	movs	r1, #91	@ 0x5b
 8004af2:	f7fb fd73 	bl	80005dc <d_append_char>
 8004af6:	692b      	ldr	r3, [r5, #16]
 8004af8:	4620      	mov	r0, r4
 8004afa:	691a      	ldr	r2, [r3, #16]
 8004afc:	2111      	movs	r1, #17
 8004afe:	f000 f861 	bl	8004bc4 <d_print_comp>
 8004b02:	215d      	movs	r1, #93	@ 0x5d
 8004b04:	4620      	mov	r0, r4
 8004b06:	f7fb fd69 	bl	80005dc <d_append_char>
 8004b0a:	f7ff b935 	b.w	8003d78 <d_print_comp_inner+0x1240>
 8004b0e:	4632      	mov	r2, r6
 8004b10:	2111      	movs	r1, #17
 8004b12:	4620      	mov	r0, r4
 8004b14:	f000 fe66 	bl	80057e4 <d_print_expr_op>
 8004b18:	f7ff b928 	b.w	8003d6c <d_print_comp_inner+0x1234>
 8004b1c:	4672      	mov	r2, lr
 8004b1e:	2100      	movs	r1, #0
 8004b20:	6019      	str	r1, [r3, #0]
 8004b22:	e64a      	b.n	80047ba <d_print_comp_inner+0x1c82>
 8004b24:	080af2f8 	.word	0x080af2f8
 8004b28:	080af2f4 	.word	0x080af2f4
 8004b2c:	080af2f0 	.word	0x080af2f0
 8004b30:	080af2d4 	.word	0x080af2d4
 8004b34:	080af328 	.word	0x080af328
 8004b38:	f1b9 0f00 	cmp.w	r9, #0
 8004b3c:	f43e a875 	beq.w	8002c2a <d_print_comp_inner+0xf2>
 8004b40:	f8c4 8110 	str.w	r8, [r4, #272]	@ 0x110
 8004b44:	f7fe b871 	b.w	8002c2a <d_print_comp_inner+0xf2>
 8004b48:	491c      	ldr	r1, [pc, #112]	@ (8004bbc <d_print_comp_inner+0x2084>)
 8004b4a:	4620      	mov	r0, r4
 8004b4c:	f7fb fdcc 	bl	80006e8 <d_append_string>
 8004b50:	68f3      	ldr	r3, [r6, #12]
 8004b52:	b143      	cbz	r3, 8004b66 <d_print_comp_inner+0x202e>
 8004b54:	2111      	movs	r1, #17
 8004b56:	4620      	mov	r0, r4
 8004b58:	4632      	mov	r2, r6
 8004b5a:	f001 f841 	bl	8005be0 <d_print_subexpr>
 8004b5e:	2120      	movs	r1, #32
 8004b60:	4620      	mov	r0, r4
 8004b62:	f7fb fd3b 	bl	80005dc <d_append_char>
 8004b66:	463a      	mov	r2, r7
 8004b68:	2111      	movs	r1, #17
 8004b6a:	4620      	mov	r0, r4
 8004b6c:	f000 f82a 	bl	8004bc4 <d_print_comp>
 8004b70:	2d00      	cmp	r5, #0
 8004b72:	f47e aec9 	bne.w	8003908 <d_print_comp_inner+0xdd0>
 8004b76:	f7fe b85b 	b.w	8002c30 <d_print_comp_inner+0xf8>
 8004b7a:	f8c4 3114 	str.w	r3, [r4, #276]	@ 0x114
 8004b7e:	f7fe b854 	b.w	8002c2a <d_print_comp_inner+0xf2>
 8004b82:	6913      	ldr	r3, [r2, #16]
 8004b84:	68d2      	ldr	r2, [r2, #12]
 8004b86:	781b      	ldrb	r3, [r3, #0]
 8004b88:	2b29      	cmp	r3, #41	@ 0x29
 8004b8a:	bf1c      	itt	ne
 8004b8c:	2301      	movne	r3, #1
 8004b8e:	f8c4 3118 	strne.w	r3, [r4, #280]	@ 0x118
 8004b92:	2111      	movs	r1, #17
 8004b94:	4620      	mov	r0, r4
 8004b96:	f001 f823 	bl	8005be0 <d_print_subexpr>
 8004b9a:	f7ff b8d6 	b.w	8003d4a <d_print_comp_inner+0x1212>
 8004b9e:	212d      	movs	r1, #45	@ 0x2d
 8004ba0:	f7fb fd1c 	bl	80005dc <d_append_char>
 8004ba4:	e621      	b.n	80047ea <d_print_comp_inner+0x1cb2>
 8004ba6:	2f2f      	cmp	r7, #47	@ 0x2f
 8004ba8:	f43f acef 	beq.w	800458a <d_print_comp_inner+0x1a52>
 8004bac:	f8d4 c114 	ldr.w	ip, [r4, #276]	@ 0x114
 8004bb0:	464e      	mov	r6, r9
 8004bb2:	f7fe b8a7 	b.w	8002d04 <d_print_comp_inner+0x1cc>
 8004bb6:	4902      	ldr	r1, [pc, #8]	@ (8004bc0 <d_print_comp_inner+0x2088>)
 8004bb8:	f7fe babf 	b.w	800313a <d_print_comp_inner+0x602>
 8004bbc:	080af2e8 	.word	0x080af2e8
 8004bc0:	080af2fc 	.word	0x080af2fc

08004bc4 <d_print_comp>:
 8004bc4:	b530      	push	{r4, r5, lr}
 8004bc6:	4605      	mov	r5, r0
 8004bc8:	b083      	sub	sp, #12
 8004bca:	b31a      	cbz	r2, 8004c14 <d_print_comp+0x50>
 8004bcc:	6853      	ldr	r3, [r2, #4]
 8004bce:	2b01      	cmp	r3, #1
 8004bd0:	4614      	mov	r4, r2
 8004bd2:	dc1f      	bgt.n	8004c14 <d_print_comp+0x50>
 8004bd4:	f8d0 111c 	ldr.w	r1, [r0, #284]	@ 0x11c
 8004bd8:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8004bdc:	dc1a      	bgt.n	8004c14 <d_print_comp+0x50>
 8004bde:	3301      	adds	r3, #1
 8004be0:	6053      	str	r3, [r2, #4]
 8004be2:	3101      	adds	r1, #1
 8004be4:	f8d0 312c 	ldr.w	r3, [r0, #300]	@ 0x12c
 8004be8:	f8c0 111c 	str.w	r1, [r0, #284]	@ 0x11c
 8004bec:	f8c0 d12c 	str.w	sp, [r0, #300]	@ 0x12c
 8004bf0:	2111      	movs	r1, #17
 8004bf2:	e9cd 2300 	strd	r2, r3, [sp]
 8004bf6:	f7fd ff9f 	bl	8002b38 <d_print_comp_inner>
 8004bfa:	6862      	ldr	r2, [r4, #4]
 8004bfc:	f8d5 311c 	ldr.w	r3, [r5, #284]	@ 0x11c
 8004c00:	9901      	ldr	r1, [sp, #4]
 8004c02:	f8c5 112c 	str.w	r1, [r5, #300]	@ 0x12c
 8004c06:	3a01      	subs	r2, #1
 8004c08:	3b01      	subs	r3, #1
 8004c0a:	6062      	str	r2, [r4, #4]
 8004c0c:	f8c5 311c 	str.w	r3, [r5, #284]	@ 0x11c
 8004c10:	b003      	add	sp, #12
 8004c12:	bd30      	pop	{r4, r5, pc}
 8004c14:	2301      	movs	r3, #1
 8004c16:	f8c5 3118 	str.w	r3, [r5, #280]	@ 0x118
 8004c1a:	b003      	add	sp, #12
 8004c1c:	bd30      	pop	{r4, r5, pc}
 8004c1e:	bf00      	nop

08004c20 <d_print_mod>:
 8004c20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004c24:	7813      	ldrb	r3, [r2, #0]
 8004c26:	3b03      	subs	r3, #3
 8004c28:	4615      	mov	r5, r2
 8004c2a:	4604      	mov	r4, r0
 8004c2c:	2b4e      	cmp	r3, #78	@ 0x4e
 8004c2e:	d850      	bhi.n	8004cd2 <d_print_mod+0xb2>
 8004c30:	e8df f013 	tbh	[pc, r3, lsl #1]
 8004c34:	004f0116 	.word	0x004f0116
 8004c38:	004f004f 	.word	0x004f004f
 8004c3c:	004f004f 	.word	0x004f004f
 8004c40:	004f004f 	.word	0x004f004f
 8004c44:	004f004f 	.word	0x004f004f
 8004c48:	004f004f 	.word	0x004f004f
 8004c4c:	004f004f 	.word	0x004f004f
 8004c50:	004f004f 	.word	0x004f004f
 8004c54:	004f004f 	.word	0x004f004f
 8004c58:	004f004f 	.word	0x004f004f
 8004c5c:	004f004f 	.word	0x004f004f
 8004c60:	007a0054 	.word	0x007a0054
 8004c64:	005400a0 	.word	0x005400a0
 8004c68:	00a0007a 	.word	0x00a0007a
 8004c6c:	00f700ea 	.word	0x00f700ea
 8004c70:	02780104 	.word	0x02780104
 8004c74:	0129011b 	.word	0x0129011b
 8004c78:	0172014d 	.word	0x0172014d
 8004c7c:	004f004f 	.word	0x004f004f
 8004c80:	004f004f 	.word	0x004f004f
 8004c84:	004f0197 	.word	0x004f0197
 8004c88:	004f01c6 	.word	0x004f01c6
 8004c8c:	004f004f 	.word	0x004f004f
 8004c90:	004f004f 	.word	0x004f004f
 8004c94:	004f004f 	.word	0x004f004f
 8004c98:	004f004f 	.word	0x004f004f
 8004c9c:	004f004f 	.word	0x004f004f
 8004ca0:	004f004f 	.word	0x004f004f
 8004ca4:	004f004f 	.word	0x004f004f
 8004ca8:	004f004f 	.word	0x004f004f
 8004cac:	004f004f 	.word	0x004f004f
 8004cb0:	004f004f 	.word	0x004f004f
 8004cb4:	004f004f 	.word	0x004f004f
 8004cb8:	004f004f 	.word	0x004f004f
 8004cbc:	004f004f 	.word	0x004f004f
 8004cc0:	004f004f 	.word	0x004f004f
 8004cc4:	004f004f 	.word	0x004f004f
 8004cc8:	01ec004f 	.word	0x01ec004f
 8004ccc:	0226004f 	.word	0x0226004f
 8004cd0:	00c4      	.short	0x00c4
 8004cd2:	462a      	mov	r2, r5
 8004cd4:	2111      	movs	r1, #17
 8004cd6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004cda:	e773      	b.n	8004bc4 <d_print_comp>
 8004cdc:	4dcf      	ldr	r5, [pc, #828]	@ (800501c <d_print_mod+0x3fc>)
 8004cde:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
 8004ce2:	f105 0709 	add.w	r7, r5, #9
 8004ce6:	f04f 0800 	mov.w	r8, #0
 8004cea:	e009      	b.n	8004d00 <d_print_mod+0xe0>
 8004cec:	460b      	mov	r3, r1
 8004cee:	3101      	adds	r1, #1
 8004cf0:	42af      	cmp	r7, r5
 8004cf2:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
 8004cf6:	54e6      	strb	r6, [r4, r3]
 8004cf8:	f884 6104 	strb.w	r6, [r4, #260]	@ 0x104
 8004cfc:	f000 80c1 	beq.w	8004e82 <d_print_mod+0x262>
 8004d00:	29ff      	cmp	r1, #255	@ 0xff
 8004d02:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8004d06:	d1f1      	bne.n	8004cec <d_print_mod+0xcc>
 8004d08:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
 8004d0c:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
 8004d10:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
 8004d14:	4620      	mov	r0, r4
 8004d16:	4798      	blx	r3
 8004d18:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
 8004d1c:	3301      	adds	r3, #1
 8004d1e:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
 8004d22:	2101      	movs	r1, #1
 8004d24:	2300      	movs	r3, #0
 8004d26:	e7e3      	b.n	8004cf0 <d_print_mod+0xd0>
 8004d28:	4dbd      	ldr	r5, [pc, #756]	@ (8005020 <d_print_mod+0x400>)
 8004d2a:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
 8004d2e:	f105 0709 	add.w	r7, r5, #9
 8004d32:	f04f 0800 	mov.w	r8, #0
 8004d36:	e009      	b.n	8004d4c <d_print_mod+0x12c>
 8004d38:	460b      	mov	r3, r1
 8004d3a:	3101      	adds	r1, #1
 8004d3c:	42bd      	cmp	r5, r7
 8004d3e:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
 8004d42:	54e6      	strb	r6, [r4, r3]
 8004d44:	f884 6104 	strb.w	r6, [r4, #260]	@ 0x104
 8004d48:	f000 809b 	beq.w	8004e82 <d_print_mod+0x262>
 8004d4c:	29ff      	cmp	r1, #255	@ 0xff
 8004d4e:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8004d52:	d1f1      	bne.n	8004d38 <d_print_mod+0x118>
 8004d54:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
 8004d58:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
 8004d5c:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
 8004d60:	4620      	mov	r0, r4
 8004d62:	4798      	blx	r3
 8004d64:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
 8004d68:	3301      	adds	r3, #1
 8004d6a:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
 8004d6e:	2101      	movs	r1, #1
 8004d70:	2300      	movs	r3, #0
 8004d72:	e7e3      	b.n	8004d3c <d_print_mod+0x11c>
 8004d74:	4dab      	ldr	r5, [pc, #684]	@ (8005024 <d_print_mod+0x404>)
 8004d76:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
 8004d7a:	1daf      	adds	r7, r5, #6
 8004d7c:	f04f 0800 	mov.w	r8, #0
 8004d80:	e008      	b.n	8004d94 <d_print_mod+0x174>
 8004d82:	460b      	mov	r3, r1
 8004d84:	3101      	adds	r1, #1
 8004d86:	42af      	cmp	r7, r5
 8004d88:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
 8004d8c:	54e6      	strb	r6, [r4, r3]
 8004d8e:	f884 6104 	strb.w	r6, [r4, #260]	@ 0x104
 8004d92:	d076      	beq.n	8004e82 <d_print_mod+0x262>
 8004d94:	29ff      	cmp	r1, #255	@ 0xff
 8004d96:	f815 6b01 	ldrb.w	r6, [r5], #1
 8004d9a:	d1f2      	bne.n	8004d82 <d_print_mod+0x162>
 8004d9c:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
 8004da0:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
 8004da4:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
 8004da8:	4620      	mov	r0, r4
 8004daa:	4798      	blx	r3
 8004dac:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
 8004db0:	3301      	adds	r3, #1
 8004db2:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
 8004db6:	2101      	movs	r1, #1
 8004db8:	2300      	movs	r3, #0
 8004dba:	e7e4      	b.n	8004d86 <d_print_mod+0x166>
 8004dbc:	4e9a      	ldr	r6, [pc, #616]	@ (8005028 <d_print_mod+0x408>)
 8004dbe:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
 8004dc2:	f106 0906 	add.w	r9, r6, #6
 8004dc6:	f04f 0800 	mov.w	r8, #0
 8004dca:	e009      	b.n	8004de0 <d_print_mod+0x1c0>
 8004dcc:	460b      	mov	r3, r1
 8004dce:	3101      	adds	r1, #1
 8004dd0:	454e      	cmp	r6, r9
 8004dd2:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
 8004dd6:	54e7      	strb	r7, [r4, r3]
 8004dd8:	f884 7104 	strb.w	r7, [r4, #260]	@ 0x104
 8004ddc:	f000 8175 	beq.w	80050ca <d_print_mod+0x4aa>
 8004de0:	29ff      	cmp	r1, #255	@ 0xff
 8004de2:	f816 7b01 	ldrb.w	r7, [r6], #1
 8004de6:	d1f1      	bne.n	8004dcc <d_print_mod+0x1ac>
 8004de8:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
 8004dec:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
 8004df0:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
 8004df4:	4620      	mov	r0, r4
 8004df6:	4798      	blx	r3
 8004df8:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
 8004dfc:	3301      	adds	r3, #1
 8004dfe:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
 8004e02:	2101      	movs	r1, #1
 8004e04:	2300      	movs	r3, #0
 8004e06:	e7e3      	b.n	8004dd0 <d_print_mod+0x1b0>
 8004e08:	f8d0 3100 	ldr.w	r3, [r0, #256]	@ 0x100
 8004e0c:	2bff      	cmp	r3, #255	@ 0xff
 8004e0e:	f000 81c6 	beq.w	800519e <d_print_mod+0x57e>
 8004e12:	2220      	movs	r2, #32
 8004e14:	1c59      	adds	r1, r3, #1
 8004e16:	f8c0 1100 	str.w	r1, [r0, #256]	@ 0x100
 8004e1a:	54c2      	strb	r2, [r0, r3]
 8004e1c:	f880 2104 	strb.w	r2, [r0, #260]	@ 0x104
 8004e20:	e025      	b.n	8004e6e <d_print_mod+0x24e>
 8004e22:	f8d0 3100 	ldr.w	r3, [r0, #256]	@ 0x100
 8004e26:	2bff      	cmp	r3, #255	@ 0xff
 8004e28:	f000 81aa 	beq.w	8005180 <d_print_mod+0x560>
 8004e2c:	1c59      	adds	r1, r3, #1
 8004e2e:	2220      	movs	r2, #32
 8004e30:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
 8004e34:	54e2      	strb	r2, [r4, r3]
 8004e36:	f884 2104 	strb.w	r2, [r4, #260]	@ 0x104
 8004e3a:	e026      	b.n	8004e8a <d_print_mod+0x26a>
 8004e3c:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
 8004e40:	29ff      	cmp	r1, #255	@ 0xff
 8004e42:	f000 818d 	beq.w	8005160 <d_print_mod+0x540>
 8004e46:	1c4a      	adds	r2, r1, #1
 8004e48:	2320      	movs	r3, #32
 8004e4a:	f8c4 2100 	str.w	r2, [r4, #256]	@ 0x100
 8004e4e:	5463      	strb	r3, [r4, r1]
 8004e50:	f884 3104 	strb.w	r3, [r4, #260]	@ 0x104
 8004e54:	692a      	ldr	r2, [r5, #16]
 8004e56:	4620      	mov	r0, r4
 8004e58:	2111      	movs	r1, #17
 8004e5a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004e5e:	e6b1      	b.n	8004bc4 <d_print_comp>
 8004e60:	68ea      	ldr	r2, [r5, #12]
 8004e62:	2111      	movs	r1, #17
 8004e64:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004e68:	e6ac      	b.n	8004bc4 <d_print_comp>
 8004e6a:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
 8004e6e:	29ff      	cmp	r1, #255	@ 0xff
 8004e70:	f000 81b4 	beq.w	80051dc <d_print_mod+0x5bc>
 8004e74:	1c4a      	adds	r2, r1, #1
 8004e76:	2326      	movs	r3, #38	@ 0x26
 8004e78:	f8c4 2100 	str.w	r2, [r4, #256]	@ 0x100
 8004e7c:	5463      	strb	r3, [r4, r1]
 8004e7e:	f884 3104 	strb.w	r3, [r4, #260]	@ 0x104
 8004e82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004e86:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
 8004e8a:	4d68      	ldr	r5, [pc, #416]	@ (800502c <d_print_mod+0x40c>)
 8004e8c:	f04f 0800 	mov.w	r8, #0
 8004e90:	1caf      	adds	r7, r5, #2
 8004e92:	e008      	b.n	8004ea6 <d_print_mod+0x286>
 8004e94:	460b      	mov	r3, r1
 8004e96:	3101      	adds	r1, #1
 8004e98:	42af      	cmp	r7, r5
 8004e9a:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
 8004e9e:	54e6      	strb	r6, [r4, r3]
 8004ea0:	f884 6104 	strb.w	r6, [r4, #260]	@ 0x104
 8004ea4:	d0ed      	beq.n	8004e82 <d_print_mod+0x262>
 8004ea6:	29ff      	cmp	r1, #255	@ 0xff
 8004ea8:	f815 6b01 	ldrb.w	r6, [r5], #1
 8004eac:	d1f2      	bne.n	8004e94 <d_print_mod+0x274>
 8004eae:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
 8004eb2:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
 8004eb6:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
 8004eba:	4620      	mov	r0, r4
 8004ebc:	4798      	blx	r3
 8004ebe:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
 8004ec2:	3301      	adds	r3, #1
 8004ec4:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
 8004ec8:	2101      	movs	r1, #1
 8004eca:	2300      	movs	r3, #0
 8004ecc:	e7e4      	b.n	8004e98 <d_print_mod+0x278>
 8004ece:	4d58      	ldr	r5, [pc, #352]	@ (8005030 <d_print_mod+0x410>)
 8004ed0:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
 8004ed4:	f105 0709 	add.w	r7, r5, #9
 8004ed8:	f04f 0800 	mov.w	r8, #0
 8004edc:	e008      	b.n	8004ef0 <d_print_mod+0x2d0>
 8004ede:	460b      	mov	r3, r1
 8004ee0:	3101      	adds	r1, #1
 8004ee2:	42bd      	cmp	r5, r7
 8004ee4:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
 8004ee8:	54e6      	strb	r6, [r4, r3]
 8004eea:	f884 6104 	strb.w	r6, [r4, #260]	@ 0x104
 8004eee:	d0c8      	beq.n	8004e82 <d_print_mod+0x262>
 8004ef0:	29ff      	cmp	r1, #255	@ 0xff
 8004ef2:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8004ef6:	d1f2      	bne.n	8004ede <d_print_mod+0x2be>
 8004ef8:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
 8004efc:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
 8004f00:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
 8004f04:	4620      	mov	r0, r4
 8004f06:	4798      	blx	r3
 8004f08:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
 8004f0c:	3301      	adds	r3, #1
 8004f0e:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
 8004f12:	2101      	movs	r1, #1
 8004f14:	2300      	movs	r3, #0
 8004f16:	e7e4      	b.n	8004ee2 <d_print_mod+0x2c2>
 8004f18:	4d46      	ldr	r5, [pc, #280]	@ (8005034 <d_print_mod+0x414>)
 8004f1a:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
 8004f1e:	f105 070b 	add.w	r7, r5, #11
 8004f22:	f04f 0800 	mov.w	r8, #0
 8004f26:	e008      	b.n	8004f3a <d_print_mod+0x31a>
 8004f28:	460b      	mov	r3, r1
 8004f2a:	3101      	adds	r1, #1
 8004f2c:	42af      	cmp	r7, r5
 8004f2e:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
 8004f32:	54e6      	strb	r6, [r4, r3]
 8004f34:	f884 6104 	strb.w	r6, [r4, #260]	@ 0x104
 8004f38:	d0a3      	beq.n	8004e82 <d_print_mod+0x262>
 8004f3a:	29ff      	cmp	r1, #255	@ 0xff
 8004f3c:	f815 6b01 	ldrb.w	r6, [r5], #1
 8004f40:	d1f2      	bne.n	8004f28 <d_print_mod+0x308>
 8004f42:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
 8004f46:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
 8004f4a:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
 8004f4e:	4620      	mov	r0, r4
 8004f50:	4798      	blx	r3
 8004f52:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
 8004f56:	3301      	adds	r3, #1
 8004f58:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
 8004f5c:	2101      	movs	r1, #1
 8004f5e:	2300      	movs	r3, #0
 8004f60:	e7e4      	b.n	8004f2c <d_print_mod+0x30c>
 8004f62:	f890 3104 	ldrb.w	r3, [r0, #260]	@ 0x104
 8004f66:	2b28      	cmp	r3, #40	@ 0x28
 8004f68:	f040 80d0 	bne.w	800510c <d_print_mod+0x4ec>
 8004f6c:	68ea      	ldr	r2, [r5, #12]
 8004f6e:	4d32      	ldr	r5, [pc, #200]	@ (8005038 <d_print_mod+0x418>)
 8004f70:	2111      	movs	r1, #17
 8004f72:	4620      	mov	r0, r4
 8004f74:	f7ff fe26 	bl	8004bc4 <d_print_comp>
 8004f78:	1cef      	adds	r7, r5, #3
 8004f7a:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
 8004f7e:	f04f 0800 	mov.w	r8, #0
 8004f82:	e009      	b.n	8004f98 <d_print_mod+0x378>
 8004f84:	460b      	mov	r3, r1
 8004f86:	3101      	adds	r1, #1
 8004f88:	42bd      	cmp	r5, r7
 8004f8a:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
 8004f8e:	54e6      	strb	r6, [r4, r3]
 8004f90:	f884 6104 	strb.w	r6, [r4, #260]	@ 0x104
 8004f94:	f43f af75 	beq.w	8004e82 <d_print_mod+0x262>
 8004f98:	29ff      	cmp	r1, #255	@ 0xff
 8004f9a:	f815 6b01 	ldrb.w	r6, [r5], #1
 8004f9e:	d1f1      	bne.n	8004f84 <d_print_mod+0x364>
 8004fa0:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
 8004fa4:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
 8004fa8:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
 8004fac:	4620      	mov	r0, r4
 8004fae:	4798      	blx	r3
 8004fb0:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
 8004fb4:	3301      	adds	r3, #1
 8004fb6:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
 8004fba:	2101      	movs	r1, #1
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	e7e3      	b.n	8004f88 <d_print_mod+0x368>
 8004fc0:	4e1e      	ldr	r6, [pc, #120]	@ (800503c <d_print_mod+0x41c>)
 8004fc2:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
 8004fc6:	f106 090a 	add.w	r9, r6, #10
 8004fca:	f04f 0800 	mov.w	r8, #0
 8004fce:	e009      	b.n	8004fe4 <d_print_mod+0x3c4>
 8004fd0:	460b      	mov	r3, r1
 8004fd2:	3101      	adds	r1, #1
 8004fd4:	45b1      	cmp	r9, r6
 8004fd6:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
 8004fda:	54e7      	strb	r7, [r4, r3]
 8004fdc:	f884 7104 	strb.w	r7, [r4, #260]	@ 0x104
 8004fe0:	f000 8082 	beq.w	80050e8 <d_print_mod+0x4c8>
 8004fe4:	29ff      	cmp	r1, #255	@ 0xff
 8004fe6:	f816 7b01 	ldrb.w	r7, [r6], #1
 8004fea:	d1f1      	bne.n	8004fd0 <d_print_mod+0x3b0>
 8004fec:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
 8004ff0:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
 8004ff4:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
 8004ff8:	4620      	mov	r0, r4
 8004ffa:	4798      	blx	r3
 8004ffc:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
 8005000:	3301      	adds	r3, #1
 8005002:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
 8005006:	2101      	movs	r1, #1
 8005008:	2300      	movs	r3, #0
 800500a:	e7e3      	b.n	8004fd4 <d_print_mod+0x3b4>
 800500c:	4d0c      	ldr	r5, [pc, #48]	@ (8005040 <d_print_mod+0x420>)
 800500e:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
 8005012:	f105 0711 	add.w	r7, r5, #17
 8005016:	f04f 0800 	mov.w	r8, #0
 800501a:	e01d      	b.n	8005058 <d_print_mod+0x438>
 800501c:	080af3a7 	.word	0x080af3a7
 8005020:	080af3b3 	.word	0x080af3b3
 8005024:	080af3c0 	.word	0x080af3c0
 8005028:	080af3e8 	.word	0x080af3e8
 800502c:	080af3f0 	.word	0x080af3f0
 8005030:	080af3f3 	.word	0x080af3f3
 8005034:	080af400 	.word	0x080af400
 8005038:	080af40c 	.word	0x080af40c
 800503c:	080af410 	.word	0x080af410
 8005040:	080af3c7 	.word	0x080af3c7
 8005044:	460b      	mov	r3, r1
 8005046:	3101      	adds	r1, #1
 8005048:	42bd      	cmp	r5, r7
 800504a:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
 800504e:	54e6      	strb	r6, [r4, r3]
 8005050:	f884 6104 	strb.w	r6, [r4, #260]	@ 0x104
 8005054:	f43f af15 	beq.w	8004e82 <d_print_mod+0x262>
 8005058:	29ff      	cmp	r1, #255	@ 0xff
 800505a:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800505e:	d1f1      	bne.n	8005044 <d_print_mod+0x424>
 8005060:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
 8005064:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
 8005068:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
 800506c:	4620      	mov	r0, r4
 800506e:	4798      	blx	r3
 8005070:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
 8005074:	3301      	adds	r3, #1
 8005076:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
 800507a:	2101      	movs	r1, #1
 800507c:	2300      	movs	r3, #0
 800507e:	e7e3      	b.n	8005048 <d_print_mod+0x428>
 8005080:	4e6d      	ldr	r6, [pc, #436]	@ (8005238 <d_print_mod+0x618>)
 8005082:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
 8005086:	f106 0909 	add.w	r9, r6, #9
 800508a:	f04f 0800 	mov.w	r8, #0
 800508e:	e008      	b.n	80050a2 <d_print_mod+0x482>
 8005090:	460b      	mov	r3, r1
 8005092:	3101      	adds	r1, #1
 8005094:	454e      	cmp	r6, r9
 8005096:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
 800509a:	54e7      	strb	r7, [r4, r3]
 800509c:	f884 7104 	strb.w	r7, [r4, #260]	@ 0x104
 80050a0:	d013      	beq.n	80050ca <d_print_mod+0x4aa>
 80050a2:	29ff      	cmp	r1, #255	@ 0xff
 80050a4:	f816 7f01 	ldrb.w	r7, [r6, #1]!
 80050a8:	d1f2      	bne.n	8005090 <d_print_mod+0x470>
 80050aa:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
 80050ae:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
 80050b2:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
 80050b6:	4620      	mov	r0, r4
 80050b8:	4798      	blx	r3
 80050ba:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
 80050be:	3301      	adds	r3, #1
 80050c0:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
 80050c4:	2101      	movs	r1, #1
 80050c6:	2300      	movs	r3, #0
 80050c8:	e7e4      	b.n	8005094 <d_print_mod+0x474>
 80050ca:	692a      	ldr	r2, [r5, #16]
 80050cc:	2a00      	cmp	r2, #0
 80050ce:	f43f aed8 	beq.w	8004e82 <d_print_mod+0x262>
 80050d2:	29ff      	cmp	r1, #255	@ 0xff
 80050d4:	d032      	beq.n	800513c <d_print_mod+0x51c>
 80050d6:	1c48      	adds	r0, r1, #1
 80050d8:	2328      	movs	r3, #40	@ 0x28
 80050da:	f8c4 0100 	str.w	r0, [r4, #256]	@ 0x100
 80050de:	5463      	strb	r3, [r4, r1]
 80050e0:	2111      	movs	r1, #17
 80050e2:	f884 3104 	strb.w	r3, [r4, #260]	@ 0x104
 80050e6:	e001      	b.n	80050ec <d_print_mod+0x4cc>
 80050e8:	68ea      	ldr	r2, [r5, #12]
 80050ea:	2111      	movs	r1, #17
 80050ec:	4620      	mov	r0, r4
 80050ee:	f7ff fd69 	bl	8004bc4 <d_print_comp>
 80050f2:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
 80050f6:	29ff      	cmp	r1, #255	@ 0xff
 80050f8:	d061      	beq.n	80051be <d_print_mod+0x59e>
 80050fa:	1c4a      	adds	r2, r1, #1
 80050fc:	2329      	movs	r3, #41	@ 0x29
 80050fe:	f8c4 2100 	str.w	r2, [r4, #256]	@ 0x100
 8005102:	5463      	strb	r3, [r4, r1]
 8005104:	f884 3104 	strb.w	r3, [r4, #260]	@ 0x104
 8005108:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800510c:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
 8005110:	29ff      	cmp	r1, #255	@ 0xff
 8005112:	d072      	beq.n	80051fa <d_print_mod+0x5da>
 8005114:	1c4a      	adds	r2, r1, #1
 8005116:	2320      	movs	r3, #32
 8005118:	f8c4 2100 	str.w	r2, [r4, #256]	@ 0x100
 800511c:	5463      	strb	r3, [r4, r1]
 800511e:	f884 3104 	strb.w	r3, [r4, #260]	@ 0x104
 8005122:	e723      	b.n	8004f6c <d_print_mod+0x34c>
 8005124:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
 8005128:	29ff      	cmp	r1, #255	@ 0xff
 800512a:	d076      	beq.n	800521a <d_print_mod+0x5fa>
 800512c:	1c4a      	adds	r2, r1, #1
 800512e:	232a      	movs	r3, #42	@ 0x2a
 8005130:	f8c4 2100 	str.w	r2, [r4, #256]	@ 0x100
 8005134:	5463      	strb	r3, [r4, r1]
 8005136:	f884 3104 	strb.w	r3, [r4, #260]	@ 0x104
 800513a:	e6a2      	b.n	8004e82 <d_print_mod+0x262>
 800513c:	2600      	movs	r6, #0
 800513e:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
 8005142:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
 8005146:	f884 60ff 	strb.w	r6, [r4, #255]	@ 0xff
 800514a:	4620      	mov	r0, r4
 800514c:	4798      	blx	r3
 800514e:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
 8005152:	692a      	ldr	r2, [r5, #16]
 8005154:	3301      	adds	r3, #1
 8005156:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
 800515a:	2001      	movs	r0, #1
 800515c:	4631      	mov	r1, r6
 800515e:	e7bb      	b.n	80050d8 <d_print_mod+0x4b8>
 8005160:	2600      	movs	r6, #0
 8005162:	f8d0 3108 	ldr.w	r3, [r0, #264]	@ 0x108
 8005166:	f8d0 210c 	ldr.w	r2, [r0, #268]	@ 0x10c
 800516a:	f880 60ff 	strb.w	r6, [r0, #255]	@ 0xff
 800516e:	4798      	blx	r3
 8005170:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
 8005174:	2201      	movs	r2, #1
 8005176:	4413      	add	r3, r2
 8005178:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
 800517c:	4631      	mov	r1, r6
 800517e:	e663      	b.n	8004e48 <d_print_mod+0x228>
 8005180:	2500      	movs	r5, #0
 8005182:	4619      	mov	r1, r3
 8005184:	f880 50ff 	strb.w	r5, [r0, #255]	@ 0xff
 8005188:	e9d0 3242 	ldrd	r3, r2, [r0, #264]	@ 0x108
 800518c:	4798      	blx	r3
 800518e:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
 8005192:	2101      	movs	r1, #1
 8005194:	440b      	add	r3, r1
 8005196:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
 800519a:	462b      	mov	r3, r5
 800519c:	e647      	b.n	8004e2e <d_print_mod+0x20e>
 800519e:	2100      	movs	r1, #0
 80051a0:	e9d0 5242 	ldrd	r5, r2, [r0, #264]	@ 0x108
 80051a4:	f880 10ff 	strb.w	r1, [r0, #255]	@ 0xff
 80051a8:	4619      	mov	r1, r3
 80051aa:	47a8      	blx	r5
 80051ac:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
 80051b0:	2220      	movs	r2, #32
 80051b2:	3301      	adds	r3, #1
 80051b4:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
 80051b8:	7022      	strb	r2, [r4, #0]
 80051ba:	2101      	movs	r1, #1
 80051bc:	e65a      	b.n	8004e74 <d_print_mod+0x254>
 80051be:	2500      	movs	r5, #0
 80051c0:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	@ 0x108
 80051c4:	f884 50ff 	strb.w	r5, [r4, #255]	@ 0xff
 80051c8:	4620      	mov	r0, r4
 80051ca:	4798      	blx	r3
 80051cc:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
 80051d0:	2201      	movs	r2, #1
 80051d2:	4413      	add	r3, r2
 80051d4:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
 80051d8:	4629      	mov	r1, r5
 80051da:	e78f      	b.n	80050fc <d_print_mod+0x4dc>
 80051dc:	2500      	movs	r5, #0
 80051de:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	@ 0x108
 80051e2:	f884 50ff 	strb.w	r5, [r4, #255]	@ 0xff
 80051e6:	4620      	mov	r0, r4
 80051e8:	4798      	blx	r3
 80051ea:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
 80051ee:	2201      	movs	r2, #1
 80051f0:	4413      	add	r3, r2
 80051f2:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
 80051f6:	4629      	mov	r1, r5
 80051f8:	e63d      	b.n	8004e76 <d_print_mod+0x256>
 80051fa:	2600      	movs	r6, #0
 80051fc:	f8d0 3108 	ldr.w	r3, [r0, #264]	@ 0x108
 8005200:	f8d0 210c 	ldr.w	r2, [r0, #268]	@ 0x10c
 8005204:	f880 60ff 	strb.w	r6, [r0, #255]	@ 0xff
 8005208:	4798      	blx	r3
 800520a:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
 800520e:	2201      	movs	r2, #1
 8005210:	4413      	add	r3, r2
 8005212:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
 8005216:	4631      	mov	r1, r6
 8005218:	e77d      	b.n	8005116 <d_print_mod+0x4f6>
 800521a:	2500      	movs	r5, #0
 800521c:	e9d0 3242 	ldrd	r3, r2, [r0, #264]	@ 0x108
 8005220:	f880 50ff 	strb.w	r5, [r0, #255]	@ 0xff
 8005224:	4798      	blx	r3
 8005226:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
 800522a:	2201      	movs	r2, #1
 800522c:	4413      	add	r3, r2
 800522e:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
 8005232:	4629      	mov	r1, r5
 8005234:	e77b      	b.n	800512e <d_print_mod+0x50e>
 8005236:	bf00      	nop
 8005238:	080af3db 	.word	0x080af3db

0800523c <d_print_function_type>:
 800523c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005240:	4604      	mov	r4, r0
 8005242:	4616      	mov	r6, r2
 8005244:	461d      	mov	r5, r3
 8005246:	b19b      	cbz	r3, 8005270 <d_print_function_type+0x34>
 8005248:	4f6a      	ldr	r7, [pc, #424]	@ (80053f4 <d_print_function_type+0x1b8>)
 800524a:	2001      	movs	r0, #1
 800524c:	689a      	ldr	r2, [r3, #8]
 800524e:	b97a      	cbnz	r2, 8005270 <d_print_function_type+0x34>
 8005250:	685a      	ldr	r2, [r3, #4]
 8005252:	7811      	ldrb	r1, [r2, #0]
 8005254:	3919      	subs	r1, #25
 8005256:	b2c9      	uxtb	r1, r1
 8005258:	2912      	cmp	r1, #18
 800525a:	fa00 f201 	lsl.w	r2, r0, r1
 800525e:	d804      	bhi.n	800526a <d_print_function_type+0x2e>
 8005260:	423a      	tst	r2, r7
 8005262:	d135      	bne.n	80052d0 <d_print_function_type+0x94>
 8005264:	f412 6f60 	tst.w	r2, #3584	@ 0xe00
 8005268:	d172      	bne.n	8005350 <d_print_function_type+0x114>
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d1ed      	bne.n	800524c <d_print_function_type+0x10>
 8005270:	2300      	movs	r3, #0
 8005272:	f8d4 7114 	ldr.w	r7, [r4, #276]	@ 0x114
 8005276:	f8c4 3114 	str.w	r3, [r4, #276]	@ 0x114
 800527a:	462a      	mov	r2, r5
 800527c:	2111      	movs	r1, #17
 800527e:	4620      	mov	r0, r4
 8005280:	f000 f8ba 	bl	80053f8 <d_print_mod_list>
 8005284:	f8d4 3100 	ldr.w	r3, [r4, #256]	@ 0x100
 8005288:	2bff      	cmp	r3, #255	@ 0xff
 800528a:	d049      	beq.n	8005320 <d_print_function_type+0xe4>
 800528c:	2228      	movs	r2, #40	@ 0x28
 800528e:	1c59      	adds	r1, r3, #1
 8005290:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
 8005294:	54e2      	strb	r2, [r4, r3]
 8005296:	f884 2104 	strb.w	r2, [r4, #260]	@ 0x104
 800529a:	6932      	ldr	r2, [r6, #16]
 800529c:	b12a      	cbz	r2, 80052aa <d_print_function_type+0x6e>
 800529e:	2111      	movs	r1, #17
 80052a0:	4620      	mov	r0, r4
 80052a2:	f7ff fc8f 	bl	8004bc4 <d_print_comp>
 80052a6:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
 80052aa:	29ff      	cmp	r1, #255	@ 0xff
 80052ac:	d059      	beq.n	8005362 <d_print_function_type+0x126>
 80052ae:	1c4b      	adds	r3, r1, #1
 80052b0:	2229      	movs	r2, #41	@ 0x29
 80052b2:	f8c4 3100 	str.w	r3, [r4, #256]	@ 0x100
 80052b6:	4620      	mov	r0, r4
 80052b8:	5462      	strb	r2, [r4, r1]
 80052ba:	2301      	movs	r3, #1
 80052bc:	f884 2104 	strb.w	r2, [r4, #260]	@ 0x104
 80052c0:	2111      	movs	r1, #17
 80052c2:	462a      	mov	r2, r5
 80052c4:	f000 f898 	bl	80053f8 <d_print_mod_list>
 80052c8:	f8c4 7114 	str.w	r7, [r4, #276]	@ 0x114
 80052cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80052d0:	f894 3104 	ldrb.w	r3, [r4, #260]	@ 0x104
 80052d4:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
 80052d8:	2b20      	cmp	r3, #32
 80052da:	d151      	bne.n	8005380 <d_print_function_type+0x144>
 80052dc:	29ff      	cmp	r1, #255	@ 0xff
 80052de:	d05b      	beq.n	8005398 <d_print_function_type+0x15c>
 80052e0:	1c4b      	adds	r3, r1, #1
 80052e2:	f8c4 3100 	str.w	r3, [r4, #256]	@ 0x100
 80052e6:	2328      	movs	r3, #40	@ 0x28
 80052e8:	5463      	strb	r3, [r4, r1]
 80052ea:	f04f 0800 	mov.w	r8, #0
 80052ee:	f8d4 7114 	ldr.w	r7, [r4, #276]	@ 0x114
 80052f2:	f884 3104 	strb.w	r3, [r4, #260]	@ 0x104
 80052f6:	2111      	movs	r1, #17
 80052f8:	f8c4 8114 	str.w	r8, [r4, #276]	@ 0x114
 80052fc:	4643      	mov	r3, r8
 80052fe:	462a      	mov	r2, r5
 8005300:	4620      	mov	r0, r4
 8005302:	f000 f879 	bl	80053f8 <d_print_mod_list>
 8005306:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
 800530a:	29ff      	cmp	r1, #255	@ 0xff
 800530c:	d053      	beq.n	80053b6 <d_print_function_type+0x17a>
 800530e:	1c4b      	adds	r3, r1, #1
 8005310:	2229      	movs	r2, #41	@ 0x29
 8005312:	2bff      	cmp	r3, #255	@ 0xff
 8005314:	f8c4 3100 	str.w	r3, [r4, #256]	@ 0x100
 8005318:	5462      	strb	r2, [r4, r1]
 800531a:	f884 2104 	strb.w	r2, [r4, #260]	@ 0x104
 800531e:	d1b5      	bne.n	800528c <d_print_function_type+0x50>
 8005320:	4619      	mov	r1, r3
 8005322:	2300      	movs	r3, #0
 8005324:	f884 30ff 	strb.w	r3, [r4, #255]	@ 0xff
 8005328:	4620      	mov	r0, r4
 800532a:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	@ 0x108
 800532e:	4798      	blx	r3
 8005330:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
 8005334:	3301      	adds	r3, #1
 8005336:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
 800533a:	2328      	movs	r3, #40	@ 0x28
 800533c:	7023      	strb	r3, [r4, #0]
 800533e:	f884 3104 	strb.w	r3, [r4, #260]	@ 0x104
 8005342:	6932      	ldr	r2, [r6, #16]
 8005344:	2101      	movs	r1, #1
 8005346:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
 800534a:	2a00      	cmp	r2, #0
 800534c:	d1a7      	bne.n	800529e <d_print_function_type+0x62>
 800534e:	e7ae      	b.n	80052ae <d_print_function_type+0x72>
 8005350:	f894 3104 	ldrb.w	r3, [r4, #260]	@ 0x104
 8005354:	f003 02fd 	and.w	r2, r3, #253	@ 0xfd
 8005358:	2a28      	cmp	r2, #40	@ 0x28
 800535a:	d1bb      	bne.n	80052d4 <d_print_function_type+0x98>
 800535c:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
 8005360:	e7bc      	b.n	80052dc <d_print_function_type+0xa0>
 8005362:	2600      	movs	r6, #0
 8005364:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	@ 0x108
 8005368:	f884 60ff 	strb.w	r6, [r4, #255]	@ 0xff
 800536c:	4620      	mov	r0, r4
 800536e:	4798      	blx	r3
 8005370:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
 8005374:	3301      	adds	r3, #1
 8005376:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
 800537a:	4631      	mov	r1, r6
 800537c:	2301      	movs	r3, #1
 800537e:	e797      	b.n	80052b0 <d_print_function_type+0x74>
 8005380:	29ff      	cmp	r1, #255	@ 0xff
 8005382:	d027      	beq.n	80053d4 <d_print_function_type+0x198>
 8005384:	1c4b      	adds	r3, r1, #1
 8005386:	2220      	movs	r2, #32
 8005388:	f8c4 3100 	str.w	r3, [r4, #256]	@ 0x100
 800538c:	5462      	strb	r2, [r4, r1]
 800538e:	4619      	mov	r1, r3
 8005390:	29ff      	cmp	r1, #255	@ 0xff
 8005392:	f884 2104 	strb.w	r2, [r4, #260]	@ 0x104
 8005396:	d1a3      	bne.n	80052e0 <d_print_function_type+0xa4>
 8005398:	2700      	movs	r7, #0
 800539a:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	@ 0x108
 800539e:	f884 70ff 	strb.w	r7, [r4, #255]	@ 0xff
 80053a2:	4620      	mov	r0, r4
 80053a4:	4798      	blx	r3
 80053a6:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
 80053aa:	3301      	adds	r3, #1
 80053ac:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
 80053b0:	4639      	mov	r1, r7
 80053b2:	2301      	movs	r3, #1
 80053b4:	e795      	b.n	80052e2 <d_print_function_type+0xa6>
 80053b6:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	@ 0x108
 80053ba:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
 80053be:	4620      	mov	r0, r4
 80053c0:	4798      	blx	r3
 80053c2:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
 80053c6:	3301      	adds	r3, #1
 80053c8:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
 80053cc:	2329      	movs	r3, #41	@ 0x29
 80053ce:	7023      	strb	r3, [r4, #0]
 80053d0:	2301      	movs	r3, #1
 80053d2:	e75b      	b.n	800528c <d_print_function_type+0x50>
 80053d4:	2300      	movs	r3, #0
 80053d6:	f884 30ff 	strb.w	r3, [r4, #255]	@ 0xff
 80053da:	4620      	mov	r0, r4
 80053dc:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	@ 0x108
 80053e0:	4798      	blx	r3
 80053e2:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
 80053e6:	2220      	movs	r2, #32
 80053e8:	3301      	adds	r3, #1
 80053ea:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
 80053ee:	7022      	strb	r2, [r4, #0]
 80053f0:	2101      	movs	r1, #1
 80053f2:	e775      	b.n	80052e0 <d_print_function_type+0xa4>
 80053f4:	00043107 	.word	0x00043107

080053f8 <d_print_mod_list>:
 80053f8:	2a00      	cmp	r2, #0
 80053fa:	f000 80be 	beq.w	800557a <d_print_mod_list+0x182>
 80053fe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005402:	4605      	mov	r5, r0
 8005404:	b088      	sub	sp, #32
 8005406:	461e      	mov	r6, r3
 8005408:	4614      	mov	r4, r2
 800540a:	2701      	movs	r7, #1
 800540c:	f8d5 2118 	ldr.w	r2, [r5, #280]	@ 0x118
 8005410:	b9ca      	cbnz	r2, 8005446 <d_print_mod_list+0x4e>
 8005412:	68a2      	ldr	r2, [r4, #8]
 8005414:	b9f2      	cbnz	r2, 8005454 <d_print_mod_list+0x5c>
 8005416:	6862      	ldr	r2, [r4, #4]
 8005418:	7811      	ldrb	r1, [r2, #0]
 800541a:	b9fe      	cbnz	r6, 800545c <d_print_mod_list+0x64>
 800541c:	294e      	cmp	r1, #78	@ 0x4e
 800541e:	d019      	beq.n	8005454 <d_print_mod_list+0x5c>
 8005420:	d914      	bls.n	800544c <d_print_mod_list+0x54>
 8005422:	3950      	subs	r1, #80	@ 0x50
 8005424:	2901      	cmp	r1, #1
 8005426:	d915      	bls.n	8005454 <d_print_mod_list+0x5c>
 8005428:	68e3      	ldr	r3, [r4, #12]
 800542a:	f8d5 8110 	ldr.w	r8, [r5, #272]	@ 0x110
 800542e:	60a7      	str	r7, [r4, #8]
 8005430:	f8c5 3110 	str.w	r3, [r5, #272]	@ 0x110
 8005434:	2111      	movs	r1, #17
 8005436:	4628      	mov	r0, r5
 8005438:	f7ff fbf2 	bl	8004c20 <d_print_mod>
 800543c:	6824      	ldr	r4, [r4, #0]
 800543e:	f8c5 8110 	str.w	r8, [r5, #272]	@ 0x110
 8005442:	2c00      	cmp	r4, #0
 8005444:	d1e2      	bne.n	800540c <d_print_mod_list+0x14>
 8005446:	b008      	add	sp, #32
 8005448:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800544c:	f1a1 031c 	sub.w	r3, r1, #28
 8005450:	2b04      	cmp	r3, #4
 8005452:	d803      	bhi.n	800545c <d_print_mod_list+0x64>
 8005454:	6824      	ldr	r4, [r4, #0]
 8005456:	2c00      	cmp	r4, #0
 8005458:	d1d8      	bne.n	800540c <d_print_mod_list+0x14>
 800545a:	e7f4      	b.n	8005446 <d_print_mod_list+0x4e>
 800545c:	68e3      	ldr	r3, [r4, #12]
 800545e:	f8d5 8110 	ldr.w	r8, [r5, #272]	@ 0x110
 8005462:	60a7      	str	r7, [r4, #8]
 8005464:	2929      	cmp	r1, #41	@ 0x29
 8005466:	f8c5 3110 	str.w	r3, [r5, #272]	@ 0x110
 800546a:	d032      	beq.n	80054d2 <d_print_mod_list+0xda>
 800546c:	292a      	cmp	r1, #42	@ 0x2a
 800546e:	d03a      	beq.n	80054e6 <d_print_mod_list+0xee>
 8005470:	2902      	cmp	r1, #2
 8005472:	d1df      	bne.n	8005434 <d_print_mod_list+0x3c>
 8005474:	2300      	movs	r3, #0
 8005476:	4e6b      	ldr	r6, [pc, #428]	@ (8005624 <d_print_mod_list+0x22c>)
 8005478:	f8d5 7114 	ldr.w	r7, [r5, #276]	@ 0x114
 800547c:	68d2      	ldr	r2, [r2, #12]
 800547e:	f8c5 3114 	str.w	r3, [r5, #276]	@ 0x114
 8005482:	2111      	movs	r1, #17
 8005484:	4628      	mov	r0, r5
 8005486:	f7ff fb9d 	bl	8004bc4 <d_print_comp>
 800548a:	f106 0902 	add.w	r9, r6, #2
 800548e:	f8d5 1100 	ldr.w	r1, [r5, #256]	@ 0x100
 8005492:	f8c5 7114 	str.w	r7, [r5, #276]	@ 0x114
 8005496:	e008      	b.n	80054aa <d_print_mod_list+0xb2>
 8005498:	460b      	mov	r3, r1
 800549a:	3101      	adds	r1, #1
 800549c:	454e      	cmp	r6, r9
 800549e:	f8c5 1100 	str.w	r1, [r5, #256]	@ 0x100
 80054a2:	54ef      	strb	r7, [r5, r3]
 80054a4:	f885 7104 	strb.w	r7, [r5, #260]	@ 0x104
 80054a8:	d027      	beq.n	80054fa <d_print_mod_list+0x102>
 80054aa:	29ff      	cmp	r1, #255	@ 0xff
 80054ac:	f816 7b01 	ldrb.w	r7, [r6], #1
 80054b0:	d1f2      	bne.n	8005498 <d_print_mod_list+0xa0>
 80054b2:	f04f 0a00 	mov.w	sl, #0
 80054b6:	e9d5 3242 	ldrd	r3, r2, [r5, #264]	@ 0x108
 80054ba:	f885 a0ff 	strb.w	sl, [r5, #255]	@ 0xff
 80054be:	4628      	mov	r0, r5
 80054c0:	4798      	blx	r3
 80054c2:	f8d5 2128 	ldr.w	r2, [r5, #296]	@ 0x128
 80054c6:	3201      	adds	r2, #1
 80054c8:	4653      	mov	r3, sl
 80054ca:	f8c5 2128 	str.w	r2, [r5, #296]	@ 0x128
 80054ce:	2101      	movs	r1, #1
 80054d0:	e7e4      	b.n	800549c <d_print_mod_list+0xa4>
 80054d2:	6823      	ldr	r3, [r4, #0]
 80054d4:	2111      	movs	r1, #17
 80054d6:	4628      	mov	r0, r5
 80054d8:	f7ff feb0 	bl	800523c <d_print_function_type>
 80054dc:	f8c5 8110 	str.w	r8, [r5, #272]	@ 0x110
 80054e0:	b008      	add	sp, #32
 80054e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054e6:	6823      	ldr	r3, [r4, #0]
 80054e8:	2111      	movs	r1, #17
 80054ea:	4628      	mov	r0, r5
 80054ec:	f000 f8a2 	bl	8005634 <d_print_array_type>
 80054f0:	f8c5 8110 	str.w	r8, [r5, #272]	@ 0x110
 80054f4:	b008      	add	sp, #32
 80054f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054fa:	6863      	ldr	r3, [r4, #4]
 80054fc:	691c      	ldr	r4, [r3, #16]
 80054fe:	7823      	ldrb	r3, [r4, #0]
 8005500:	2b48      	cmp	r3, #72	@ 0x48
 8005502:	d017      	beq.n	8005534 <d_print_mod_list+0x13c>
 8005504:	2b4e      	cmp	r3, #78	@ 0x4e
 8005506:	f1a3 0250 	sub.w	r2, r3, #80	@ 0x50
 800550a:	f1a3 011c 	sub.w	r1, r3, #28
 800550e:	d00e      	beq.n	800552e <d_print_mod_list+0x136>
 8005510:	d80b      	bhi.n	800552a <d_print_mod_list+0x132>
 8005512:	2904      	cmp	r1, #4
 8005514:	d90b      	bls.n	800552e <d_print_mod_list+0x136>
 8005516:	4622      	mov	r2, r4
 8005518:	2111      	movs	r1, #17
 800551a:	4628      	mov	r0, r5
 800551c:	f7ff fb52 	bl	8004bc4 <d_print_comp>
 8005520:	f8c5 8110 	str.w	r8, [r5, #272]	@ 0x110
 8005524:	b008      	add	sp, #32
 8005526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800552a:	2a01      	cmp	r2, #1
 800552c:	d8f3      	bhi.n	8005516 <d_print_mod_list+0x11e>
 800552e:	68e4      	ldr	r4, [r4, #12]
 8005530:	7823      	ldrb	r3, [r4, #0]
 8005532:	e7e7      	b.n	8005504 <d_print_mod_list+0x10c>
 8005534:	4e3c      	ldr	r6, [pc, #240]	@ (8005628 <d_print_mod_list+0x230>)
 8005536:	f04f 0900 	mov.w	r9, #0
 800553a:	f106 0a0d 	add.w	sl, r6, #13
 800553e:	e008      	b.n	8005552 <d_print_mod_list+0x15a>
 8005540:	460b      	mov	r3, r1
 8005542:	3101      	adds	r1, #1
 8005544:	4556      	cmp	r6, sl
 8005546:	f8c5 1100 	str.w	r1, [r5, #256]	@ 0x100
 800554a:	54ef      	strb	r7, [r5, r3]
 800554c:	f885 7104 	strb.w	r7, [r5, #260]	@ 0x104
 8005550:	d014      	beq.n	800557c <d_print_mod_list+0x184>
 8005552:	29ff      	cmp	r1, #255	@ 0xff
 8005554:	f816 7b01 	ldrb.w	r7, [r6], #1
 8005558:	d1f2      	bne.n	8005540 <d_print_mod_list+0x148>
 800555a:	f8d5 3108 	ldr.w	r3, [r5, #264]	@ 0x108
 800555e:	f8d5 210c 	ldr.w	r2, [r5, #268]	@ 0x10c
 8005562:	f885 90ff 	strb.w	r9, [r5, #255]	@ 0xff
 8005566:	4628      	mov	r0, r5
 8005568:	4798      	blx	r3
 800556a:	f8d5 3128 	ldr.w	r3, [r5, #296]	@ 0x128
 800556e:	3301      	adds	r3, #1
 8005570:	f8c5 3128 	str.w	r3, [r5, #296]	@ 0x128
 8005574:	2101      	movs	r1, #1
 8005576:	2300      	movs	r3, #0
 8005578:	e7e4      	b.n	8005544 <d_print_mod_list+0x14c>
 800557a:	4770      	bx	lr
 800557c:	6922      	ldr	r2, [r4, #16]
 800557e:	492b      	ldr	r1, [pc, #172]	@ (800562c <d_print_mod_list+0x234>)
 8005580:	3201      	adds	r2, #1
 8005582:	a801      	add	r0, sp, #4
 8005584:	f01e f826 	bl	80235d4 <sprintf>
 8005588:	a801      	add	r0, sp, #4
 800558a:	f000 fe89 	bl	80062a0 <strlen>
 800558e:	4682      	mov	sl, r0
 8005590:	b318      	cbz	r0, 80055da <d_print_mod_list+0x1e2>
 8005592:	ae01      	add	r6, sp, #4
 8005594:	f8d5 1100 	ldr.w	r1, [r5, #256]	@ 0x100
 8005598:	44b2      	add	sl, r6
 800559a:	f04f 0900 	mov.w	r9, #0
 800559e:	e008      	b.n	80055b2 <d_print_mod_list+0x1ba>
 80055a0:	460b      	mov	r3, r1
 80055a2:	3101      	adds	r1, #1
 80055a4:	4556      	cmp	r6, sl
 80055a6:	f8c5 1100 	str.w	r1, [r5, #256]	@ 0x100
 80055aa:	54ef      	strb	r7, [r5, r3]
 80055ac:	f885 7104 	strb.w	r7, [r5, #260]	@ 0x104
 80055b0:	d015      	beq.n	80055de <d_print_mod_list+0x1e6>
 80055b2:	29ff      	cmp	r1, #255	@ 0xff
 80055b4:	f816 7b01 	ldrb.w	r7, [r6], #1
 80055b8:	d1f2      	bne.n	80055a0 <d_print_mod_list+0x1a8>
 80055ba:	f8d5 3108 	ldr.w	r3, [r5, #264]	@ 0x108
 80055be:	f8d5 210c 	ldr.w	r2, [r5, #268]	@ 0x10c
 80055c2:	f885 90ff 	strb.w	r9, [r5, #255]	@ 0xff
 80055c6:	4628      	mov	r0, r5
 80055c8:	4798      	blx	r3
 80055ca:	f8d5 3128 	ldr.w	r3, [r5, #296]	@ 0x128
 80055ce:	3301      	adds	r3, #1
 80055d0:	f8c5 3128 	str.w	r3, [r5, #296]	@ 0x128
 80055d4:	2101      	movs	r1, #1
 80055d6:	2300      	movs	r3, #0
 80055d8:	e7e4      	b.n	80055a4 <d_print_mod_list+0x1ac>
 80055da:	f8d5 1100 	ldr.w	r1, [r5, #256]	@ 0x100
 80055de:	4e14      	ldr	r6, [pc, #80]	@ (8005630 <d_print_mod_list+0x238>)
 80055e0:	f04f 0900 	mov.w	r9, #0
 80055e4:	f106 0a03 	add.w	sl, r6, #3
 80055e8:	e008      	b.n	80055fc <d_print_mod_list+0x204>
 80055ea:	460b      	mov	r3, r1
 80055ec:	3101      	adds	r1, #1
 80055ee:	45b2      	cmp	sl, r6
 80055f0:	f8c5 1100 	str.w	r1, [r5, #256]	@ 0x100
 80055f4:	54ef      	strb	r7, [r5, r3]
 80055f6:	f885 7104 	strb.w	r7, [r5, #260]	@ 0x104
 80055fa:	d098      	beq.n	800552e <d_print_mod_list+0x136>
 80055fc:	29ff      	cmp	r1, #255	@ 0xff
 80055fe:	f816 7b01 	ldrb.w	r7, [r6], #1
 8005602:	d1f2      	bne.n	80055ea <d_print_mod_list+0x1f2>
 8005604:	f8d5 3108 	ldr.w	r3, [r5, #264]	@ 0x108
 8005608:	f8d5 210c 	ldr.w	r2, [r5, #268]	@ 0x10c
 800560c:	f885 90ff 	strb.w	r9, [r5, #255]	@ 0xff
 8005610:	4628      	mov	r0, r5
 8005612:	4798      	blx	r3
 8005614:	f8d5 3128 	ldr.w	r3, [r5, #296]	@ 0x128
 8005618:	3301      	adds	r3, #1
 800561a:	f8c5 3128 	str.w	r3, [r5, #296]	@ 0x128
 800561e:	2101      	movs	r1, #1
 8005620:	2300      	movs	r3, #0
 8005622:	e7e4      	b.n	80055ee <d_print_mod_list+0x1f6>
 8005624:	080af118 	.word	0x080af118
 8005628:	080af11c 	.word	0x080af11c
 800562c:	080af0a8 	.word	0x080af0a8
 8005630:	080af12c 	.word	0x080af12c

08005634 <d_print_array_type>:
 8005634:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005638:	4604      	mov	r4, r0
 800563a:	4617      	mov	r7, r2
 800563c:	b39b      	cbz	r3, 80056a6 <d_print_array_type+0x72>
 800563e:	461e      	mov	r6, r3
 8005640:	e001      	b.n	8005646 <d_print_array_type+0x12>
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	b353      	cbz	r3, 800569c <d_print_array_type+0x68>
 8005646:	689d      	ldr	r5, [r3, #8]
 8005648:	2d00      	cmp	r5, #0
 800564a:	d1fa      	bne.n	8005642 <d_print_array_type+0xe>
 800564c:	685b      	ldr	r3, [r3, #4]
 800564e:	781b      	ldrb	r3, [r3, #0]
 8005650:	2b2a      	cmp	r3, #42	@ 0x2a
 8005652:	d15e      	bne.n	8005712 <d_print_array_type+0xde>
 8005654:	2111      	movs	r1, #17
 8005656:	462b      	mov	r3, r5
 8005658:	4632      	mov	r2, r6
 800565a:	4620      	mov	r0, r4
 800565c:	f7ff fecc 	bl	80053f8 <d_print_mod_list>
 8005660:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
 8005664:	29ff      	cmp	r1, #255	@ 0xff
 8005666:	d02b      	beq.n	80056c0 <d_print_array_type+0x8c>
 8005668:	225b      	movs	r2, #91	@ 0x5b
 800566a:	1c4b      	adds	r3, r1, #1
 800566c:	f8c4 3100 	str.w	r3, [r4, #256]	@ 0x100
 8005670:	5462      	strb	r2, [r4, r1]
 8005672:	f884 2104 	strb.w	r2, [r4, #260]	@ 0x104
 8005676:	68fa      	ldr	r2, [r7, #12]
 8005678:	b12a      	cbz	r2, 8005686 <d_print_array_type+0x52>
 800567a:	2111      	movs	r1, #17
 800567c:	4620      	mov	r0, r4
 800567e:	f7ff faa1 	bl	8004bc4 <d_print_comp>
 8005682:	f8d4 3100 	ldr.w	r3, [r4, #256]	@ 0x100
 8005686:	2bff      	cmp	r3, #255	@ 0xff
 8005688:	d033      	beq.n	80056f2 <d_print_array_type+0xbe>
 800568a:	1c59      	adds	r1, r3, #1
 800568c:	225d      	movs	r2, #93	@ 0x5d
 800568e:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
 8005692:	54e2      	strb	r2, [r4, r3]
 8005694:	f884 2104 	strb.w	r2, [r4, #260]	@ 0x104
 8005698:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800569c:	4632      	mov	r2, r6
 800569e:	2111      	movs	r1, #17
 80056a0:	4620      	mov	r0, r4
 80056a2:	f7ff fea9 	bl	80053f8 <d_print_mod_list>
 80056a6:	f8d4 3100 	ldr.w	r3, [r4, #256]	@ 0x100
 80056aa:	2bff      	cmp	r3, #255	@ 0xff
 80056ac:	d071      	beq.n	8005792 <d_print_array_type+0x15e>
 80056ae:	1c59      	adds	r1, r3, #1
 80056b0:	2220      	movs	r2, #32
 80056b2:	29ff      	cmp	r1, #255	@ 0xff
 80056b4:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
 80056b8:	54e2      	strb	r2, [r4, r3]
 80056ba:	f884 2104 	strb.w	r2, [r4, #260]	@ 0x104
 80056be:	d1d3      	bne.n	8005668 <d_print_array_type+0x34>
 80056c0:	2200      	movs	r2, #0
 80056c2:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
 80056c6:	f884 20ff 	strb.w	r2, [r4, #255]	@ 0xff
 80056ca:	4620      	mov	r0, r4
 80056cc:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
 80056d0:	4798      	blx	r3
 80056d2:	225b      	movs	r2, #91	@ 0x5b
 80056d4:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
 80056d8:	7022      	strb	r2, [r4, #0]
 80056da:	f884 2104 	strb.w	r2, [r4, #260]	@ 0x104
 80056de:	68fa      	ldr	r2, [r7, #12]
 80056e0:	1c59      	adds	r1, r3, #1
 80056e2:	2301      	movs	r3, #1
 80056e4:	f8c4 1128 	str.w	r1, [r4, #296]	@ 0x128
 80056e8:	f8c4 3100 	str.w	r3, [r4, #256]	@ 0x100
 80056ec:	2a00      	cmp	r2, #0
 80056ee:	d1c4      	bne.n	800567a <d_print_array_type+0x46>
 80056f0:	e7cb      	b.n	800568a <d_print_array_type+0x56>
 80056f2:	2500      	movs	r5, #0
 80056f4:	4619      	mov	r1, r3
 80056f6:	f884 50ff 	strb.w	r5, [r4, #255]	@ 0xff
 80056fa:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	@ 0x108
 80056fe:	4620      	mov	r0, r4
 8005700:	4798      	blx	r3
 8005702:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
 8005706:	2101      	movs	r1, #1
 8005708:	440b      	add	r3, r1
 800570a:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
 800570e:	462b      	mov	r3, r5
 8005710:	e7bc      	b.n	800568c <d_print_array_type+0x58>
 8005712:	f8df 80cc 	ldr.w	r8, [pc, #204]	@ 80057e0 <d_print_array_type+0x1ac>
 8005716:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
 800571a:	f108 0a02 	add.w	sl, r8, #2
 800571e:	e00a      	b.n	8005736 <d_print_array_type+0x102>
 8005720:	460b      	mov	r3, r1
 8005722:	45d0      	cmp	r8, sl
 8005724:	f101 0101 	add.w	r1, r1, #1
 8005728:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
 800572c:	f804 9003 	strb.w	r9, [r4, r3]
 8005730:	f884 9104 	strb.w	r9, [r4, #260]	@ 0x104
 8005734:	d01a      	beq.n	800576c <d_print_array_type+0x138>
 8005736:	29ff      	cmp	r1, #255	@ 0xff
 8005738:	f818 9b01 	ldrb.w	r9, [r8], #1
 800573c:	d1f0      	bne.n	8005720 <d_print_array_type+0xec>
 800573e:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
 8005742:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
 8005746:	f884 50ff 	strb.w	r5, [r4, #255]	@ 0xff
 800574a:	4620      	mov	r0, r4
 800574c:	4798      	blx	r3
 800574e:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
 8005752:	3301      	adds	r3, #1
 8005754:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
 8005758:	2300      	movs	r3, #0
 800575a:	2101      	movs	r1, #1
 800575c:	45d0      	cmp	r8, sl
 800575e:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
 8005762:	f804 9003 	strb.w	r9, [r4, r3]
 8005766:	f884 9104 	strb.w	r9, [r4, #260]	@ 0x104
 800576a:	d1e4      	bne.n	8005736 <d_print_array_type+0x102>
 800576c:	2111      	movs	r1, #17
 800576e:	2300      	movs	r3, #0
 8005770:	4632      	mov	r2, r6
 8005772:	4620      	mov	r0, r4
 8005774:	f7ff fe40 	bl	80053f8 <d_print_mod_list>
 8005778:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
 800577c:	29ff      	cmp	r1, #255	@ 0xff
 800577e:	d01b      	beq.n	80057b8 <d_print_array_type+0x184>
 8005780:	1c4b      	adds	r3, r1, #1
 8005782:	2229      	movs	r2, #41	@ 0x29
 8005784:	2bff      	cmp	r3, #255	@ 0xff
 8005786:	f8c4 3100 	str.w	r3, [r4, #256]	@ 0x100
 800578a:	5462      	strb	r2, [r4, r1]
 800578c:	f884 2104 	strb.w	r2, [r4, #260]	@ 0x104
 8005790:	d18d      	bne.n	80056ae <d_print_array_type+0x7a>
 8005792:	2200      	movs	r2, #0
 8005794:	4619      	mov	r1, r3
 8005796:	f884 20ff 	strb.w	r2, [r4, #255]	@ 0xff
 800579a:	f8d4 5108 	ldr.w	r5, [r4, #264]	@ 0x108
 800579e:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
 80057a2:	4620      	mov	r0, r4
 80057a4:	47a8      	blx	r5
 80057a6:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
 80057aa:	2220      	movs	r2, #32
 80057ac:	3301      	adds	r3, #1
 80057ae:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
 80057b2:	7022      	strb	r2, [r4, #0]
 80057b4:	2101      	movs	r1, #1
 80057b6:	e757      	b.n	8005668 <d_print_array_type+0x34>
 80057b8:	2200      	movs	r2, #0
 80057ba:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
 80057be:	f884 20ff 	strb.w	r2, [r4, #255]	@ 0xff
 80057c2:	4620      	mov	r0, r4
 80057c4:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
 80057c8:	4798      	blx	r3
 80057ca:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
 80057ce:	f242 0229 	movw	r2, #8233	@ 0x2029
 80057d2:	3301      	adds	r3, #1
 80057d4:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
 80057d8:	8022      	strh	r2, [r4, #0]
 80057da:	2102      	movs	r1, #2
 80057dc:	e744      	b.n	8005668 <d_print_array_type+0x34>
 80057de:	bf00      	nop
 80057e0:	080af324 	.word	0x080af324

080057e4 <d_print_expr_op>:
 80057e4:	7811      	ldrb	r1, [r2, #0]
 80057e6:	2932      	cmp	r1, #50	@ 0x32
 80057e8:	d002      	beq.n	80057f0 <d_print_expr_op+0xc>
 80057ea:	2111      	movs	r1, #17
 80057ec:	f7ff b9ea 	b.w	8004bc4 <d_print_comp>
 80057f0:	68d3      	ldr	r3, [r2, #12]
 80057f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057f6:	e9d3 5701 	ldrd	r5, r7, [r3, #4]
 80057fa:	b367      	cbz	r7, 8005856 <d_print_expr_op+0x72>
 80057fc:	442f      	add	r7, r5
 80057fe:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
 8005802:	4604      	mov	r4, r0
 8005804:	3d01      	subs	r5, #1
 8005806:	3f01      	subs	r7, #1
 8005808:	f04f 0800 	mov.w	r8, #0
 800580c:	e009      	b.n	8005822 <d_print_expr_op+0x3e>
 800580e:	460b      	mov	r3, r1
 8005810:	42bd      	cmp	r5, r7
 8005812:	f101 0101 	add.w	r1, r1, #1
 8005816:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
 800581a:	54e6      	strb	r6, [r4, r3]
 800581c:	f884 6104 	strb.w	r6, [r4, #260]	@ 0x104
 8005820:	d019      	beq.n	8005856 <d_print_expr_op+0x72>
 8005822:	29ff      	cmp	r1, #255	@ 0xff
 8005824:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8005828:	d1f1      	bne.n	800580e <d_print_expr_op+0x2a>
 800582a:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
 800582e:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
 8005832:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
 8005836:	4620      	mov	r0, r4
 8005838:	4798      	blx	r3
 800583a:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
 800583e:	3301      	adds	r3, #1
 8005840:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
 8005844:	2300      	movs	r3, #0
 8005846:	2101      	movs	r1, #1
 8005848:	42bd      	cmp	r5, r7
 800584a:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
 800584e:	54e6      	strb	r6, [r4, r3]
 8005850:	f884 6104 	strb.w	r6, [r4, #260]	@ 0x104
 8005854:	d1e5      	bne.n	8005822 <d_print_expr_op+0x3e>
 8005856:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800585a:	bf00      	nop

0800585c <d_demangle_callback.constprop.0>:
 800585c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005860:	b0e9      	sub	sp, #420	@ 0x1a4
 8005862:	7803      	ldrb	r3, [r0, #0]
 8005864:	af00      	add	r7, sp, #0
 8005866:	2b5f      	cmp	r3, #95	@ 0x5f
 8005868:	4605      	mov	r5, r0
 800586a:	468a      	mov	sl, r1
 800586c:	60ba      	str	r2, [r7, #8]
 800586e:	f000 813e 	beq.w	8005aee <d_demangle_callback.constprop.0+0x292>
 8005872:	49a5      	ldr	r1, [pc, #660]	@ (8005b08 <d_demangle_callback.constprop.0+0x2ac>)
 8005874:	2208      	movs	r2, #8
 8005876:	4628      	mov	r0, r5
 8005878:	f01e fa28 	bl	8023ccc <strncmp>
 800587c:	2800      	cmp	r0, #0
 800587e:	f000 8105 	beq.w	8005a8c <d_demangle_callback.constprop.0+0x230>
 8005882:	f04f 0b00 	mov.w	fp, #0
 8005886:	2301      	movs	r3, #1
 8005888:	f1bb 0f02 	cmp.w	fp, #2
 800588c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800588e:	f1ab 0902 	sub.w	r9, fp, #2
 8005892:	bf0c      	ite	eq
 8005894:	2345      	moveq	r3, #69	@ 0x45
 8005896:	2346      	movne	r3, #70	@ 0x46
 8005898:	60fb      	str	r3, [r7, #12]
 800589a:	fa5f f989 	uxtb.w	r9, r9
 800589e:	f8c7 a004 	str.w	sl, [r7, #4]
 80058a2:	4628      	mov	r0, r5
 80058a4:	f000 fcfc 	bl	80062a0 <strlen>
 80058a8:	182b      	adds	r3, r5, r0
 80058aa:	0046      	lsls	r6, r0, #1
 80058ac:	2100      	movs	r1, #0
 80058ae:	e9c7 5304 	strd	r5, r3, [r7, #16]
 80058b2:	f5b6 6f00 	cmp.w	r6, #2048	@ 0x800
 80058b6:	f04f 0311 	mov.w	r3, #17
 80058ba:	e9c7 3506 	strd	r3, r5, [r7, #24]
 80058be:	e9c7 1609 	strd	r1, r6, [r7, #36]	@ 0x24
 80058c2:	e9c7 100c 	strd	r1, r0, [r7, #48]	@ 0x30
 80058c6:	e9c7 110e 	strd	r1, r1, [r7, #56]	@ 0x38
 80058ca:	e9c7 1110 	strd	r1, r1, [r7, #64]	@ 0x40
 80058ce:	64f9      	str	r1, [r7, #76]	@ 0x4c
 80058d0:	f200 8114 	bhi.w	8005afc <d_demangle_callback.constprop.0+0x2a0>
 80058d4:	46e8      	mov	r8, sp
 80058d6:	0083      	lsls	r3, r0, #2
 80058d8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80058dc:	eba8 02c0 	sub.w	r2, r8, r0, lsl #3
 80058e0:	3307      	adds	r3, #7
 80058e2:	4695      	mov	sp, r2
 80058e4:	f023 0307 	bic.w	r3, r3, #7
 80058e8:	46ea      	mov	sl, sp
 80058ea:	f1bb 0f01 	cmp.w	fp, #1
 80058ee:	ebad 0d03 	sub.w	sp, sp, r3
 80058f2:	f8c7 a020 	str.w	sl, [r7, #32]
 80058f6:	f8c7 d02c 	str.w	sp, [r7, #44]	@ 0x2c
 80058fa:	d040      	beq.n	800597e <d_demangle_callback.constprop.0+0x122>
 80058fc:	f1b9 0f01 	cmp.w	r9, #1
 8005900:	d835      	bhi.n	800596e <d_demangle_callback.constprop.0+0x112>
 8005902:	7aeb      	ldrb	r3, [r5, #11]
 8005904:	f105 040b 	add.w	r4, r5, #11
 8005908:	2b5f      	cmp	r3, #95	@ 0x5f
 800590a:	61fc      	str	r4, [r7, #28]
 800590c:	d103      	bne.n	8005916 <d_demangle_callback.constprop.0+0xba>
 800590e:	7b2b      	ldrb	r3, [r5, #12]
 8005910:	2b5a      	cmp	r3, #90	@ 0x5a
 8005912:	f000 80ac 	beq.w	8005a6e <d_demangle_callback.constprop.0+0x212>
 8005916:	4620      	mov	r0, r4
 8005918:	f000 fcc2 	bl	80062a0 <strlen>
 800591c:	2e00      	cmp	r6, #0
 800591e:	f000 80dc 	beq.w	8005ada <d_demangle_callback.constprop.0+0x27e>
 8005922:	2300      	movs	r3, #0
 8005924:	2201      	movs	r2, #1
 8005926:	e9ca 3301 	strd	r3, r3, [sl, #4]
 800592a:	627a      	str	r2, [r7, #36]	@ 0x24
 800592c:	2800      	cmp	r0, #0
 800592e:	f000 80d4 	beq.w	8005ada <d_demangle_callback.constprop.0+0x27e>
 8005932:	e9ca 4003 	strd	r4, r0, [sl, #12]
 8005936:	f88a 3000 	strb.w	r3, [sl]
 800593a:	2300      	movs	r3, #0
 800593c:	68f9      	ldr	r1, [r7, #12]
 800593e:	4652      	mov	r2, sl
 8005940:	f107 0010 	add.w	r0, r7, #16
 8005944:	f7fa fc64 	bl	8000210 <d_make_comp>
 8005948:	4606      	mov	r6, r0
 800594a:	4620      	mov	r0, r4
 800594c:	f000 fca8 	bl	80062a0 <strlen>
 8005950:	1823      	adds	r3, r4, r0
 8005952:	61fb      	str	r3, [r7, #28]
 8005954:	5c23      	ldrb	r3, [r4, r0]
 8005956:	b913      	cbnz	r3, 800595e <d_demangle_callback.constprop.0+0x102>
 8005958:	2e00      	cmp	r6, #0
 800595a:	f040 80d7 	bne.w	8005b0c <d_demangle_callback.constprop.0+0x2b0>
 800595e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005960:	3301      	adds	r3, #1
 8005962:	f040 80bd 	bne.w	8005ae0 <d_demangle_callback.constprop.0+0x284>
 8005966:	2300      	movs	r3, #0
 8005968:	64bb      	str	r3, [r7, #72]	@ 0x48
 800596a:	46c5      	mov	sp, r8
 800596c:	e799      	b.n	80058a2 <d_demangle_callback.constprop.0+0x46>
 800596e:	f107 0010 	add.w	r0, r7, #16
 8005972:	f7fb f889 	bl	8000a88 <d_type>
 8005976:	69fb      	ldr	r3, [r7, #28]
 8005978:	4606      	mov	r6, r0
 800597a:	781b      	ldrb	r3, [r3, #0]
 800597c:	e7eb      	b.n	8005956 <d_demangle_callback.constprop.0+0xfa>
 800597e:	782b      	ldrb	r3, [r5, #0]
 8005980:	2b5f      	cmp	r3, #95	@ 0x5f
 8005982:	d1ec      	bne.n	800595e <d_demangle_callback.constprop.0+0x102>
 8005984:	786b      	ldrb	r3, [r5, #1]
 8005986:	1c6a      	adds	r2, r5, #1
 8005988:	2b5a      	cmp	r3, #90	@ 0x5a
 800598a:	61fa      	str	r2, [r7, #28]
 800598c:	d1e7      	bne.n	800595e <d_demangle_callback.constprop.0+0x102>
 800598e:	78ab      	ldrb	r3, [r5, #2]
 8005990:	1caa      	adds	r2, r5, #2
 8005992:	2b47      	cmp	r3, #71	@ 0x47
 8005994:	61fa      	str	r2, [r7, #28]
 8005996:	f000 8098 	beq.w	8005aca <d_demangle_callback.constprop.0+0x26e>
 800599a:	2b54      	cmp	r3, #84	@ 0x54
 800599c:	f000 8095 	beq.w	8005aca <d_demangle_callback.constprop.0+0x26e>
 80059a0:	4659      	mov	r1, fp
 80059a2:	f107 0010 	add.w	r0, r7, #16
 80059a6:	f7fd f84b 	bl	8002a40 <d_encoding.part.0>
 80059aa:	4606      	mov	r6, r0
 80059ac:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80059b0:	07c9      	lsls	r1, r1, #31
 80059b2:	7813      	ldrb	r3, [r2, #0]
 80059b4:	d5cf      	bpl.n	8005956 <d_demangle_callback.constprop.0+0xfa>
 80059b6:	2b2e      	cmp	r3, #46	@ 0x2e
 80059b8:	d1cd      	bne.n	8005956 <d_demangle_callback.constprop.0+0xfa>
 80059ba:	4611      	mov	r1, r2
 80059bc:	f04f 0a00 	mov.w	sl, #0
 80059c0:	4632      	mov	r2, r6
 80059c2:	784b      	ldrb	r3, [r1, #1]
 80059c4:	f1a3 0061 	sub.w	r0, r3, #97	@ 0x61
 80059c8:	2819      	cmp	r0, #25
 80059ca:	d905      	bls.n	80059d8 <d_demangle_callback.constprop.0+0x17c>
 80059cc:	2b5f      	cmp	r3, #95	@ 0x5f
 80059ce:	d003      	beq.n	80059d8 <d_demangle_callback.constprop.0+0x17c>
 80059d0:	3b30      	subs	r3, #48	@ 0x30
 80059d2:	2b09      	cmp	r3, #9
 80059d4:	f200 8100 	bhi.w	8005bd8 <d_demangle_callback.constprop.0+0x37c>
 80059d8:	1c88      	adds	r0, r1, #2
 80059da:	7803      	ldrb	r3, [r0, #0]
 80059dc:	f1a3 0661 	sub.w	r6, r3, #97	@ 0x61
 80059e0:	2e19      	cmp	r6, #25
 80059e2:	4604      	mov	r4, r0
 80059e4:	f1a3 0c30 	sub.w	ip, r3, #48	@ 0x30
 80059e8:	f100 0001 	add.w	r0, r0, #1
 80059ec:	d9f5      	bls.n	80059da <d_demangle_callback.constprop.0+0x17e>
 80059ee:	f1bc 0f09 	cmp.w	ip, #9
 80059f2:	d9f2      	bls.n	80059da <d_demangle_callback.constprop.0+0x17e>
 80059f4:	2b5f      	cmp	r3, #95	@ 0x5f
 80059f6:	d0f0      	beq.n	80059da <d_demangle_callback.constprop.0+0x17e>
 80059f8:	2b2e      	cmp	r3, #46	@ 0x2e
 80059fa:	d112      	bne.n	8005a22 <d_demangle_callback.constprop.0+0x1c6>
 80059fc:	7863      	ldrb	r3, [r4, #1]
 80059fe:	3b30      	subs	r3, #48	@ 0x30
 8005a00:	2b09      	cmp	r3, #9
 8005a02:	d80e      	bhi.n	8005a22 <d_demangle_callback.constprop.0+0x1c6>
 8005a04:	78a3      	ldrb	r3, [r4, #2]
 8005a06:	f1a3 0030 	sub.w	r0, r3, #48	@ 0x30
 8005a0a:	2809      	cmp	r0, #9
 8005a0c:	f104 0402 	add.w	r4, r4, #2
 8005a10:	d8f2      	bhi.n	80059f8 <d_demangle_callback.constprop.0+0x19c>
 8005a12:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8005a16:	f1a3 0030 	sub.w	r0, r3, #48	@ 0x30
 8005a1a:	2809      	cmp	r0, #9
 8005a1c:	d9f9      	bls.n	8005a12 <d_demangle_callback.constprop.0+0x1b6>
 8005a1e:	2b2e      	cmp	r3, #46	@ 0x2e
 8005a20:	d0ec      	beq.n	80059fc <d_demangle_callback.constprop.0+0x1a0>
 8005a22:	e9d7 3009 	ldrd	r3, r0, [r7, #36]	@ 0x24
 8005a26:	4283      	cmp	r3, r0
 8005a28:	61fc      	str	r4, [r7, #28]
 8005a2a:	eba4 0601 	sub.w	r6, r4, r1
 8005a2e:	da52      	bge.n	8005ad6 <d_demangle_callback.constprop.0+0x27a>
 8005a30:	6a38      	ldr	r0, [r7, #32]
 8005a32:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 8005a36:	f103 0e01 	add.w	lr, r3, #1
 8005a3a:	2e00      	cmp	r6, #0
 8005a3c:	eb00 038c 	add.w	r3, r0, ip, lsl #2
 8005a40:	e9c3 aa01 	strd	sl, sl, [r3, #4]
 8005a44:	f8c7 e024 	str.w	lr, [r7, #36]	@ 0x24
 8005a48:	dd45      	ble.n	8005ad6 <d_demangle_callback.constprop.0+0x27a>
 8005a4a:	e9c3 aa01 	strd	sl, sl, [r3, #4]
 8005a4e:	f800 a02c 	strb.w	sl, [r0, ip, lsl #2]
 8005a52:	e9c3 1603 	strd	r1, r6, [r3, #12]
 8005a56:	214f      	movs	r1, #79	@ 0x4f
 8005a58:	f107 0010 	add.w	r0, r7, #16
 8005a5c:	f7fa fbd8 	bl	8000210 <d_make_comp>
 8005a60:	7823      	ldrb	r3, [r4, #0]
 8005a62:	2b2e      	cmp	r3, #46	@ 0x2e
 8005a64:	4602      	mov	r2, r0
 8005a66:	f040 80ad 	bne.w	8005bc4 <d_demangle_callback.constprop.0+0x368>
 8005a6a:	4621      	mov	r1, r4
 8005a6c:	e7a9      	b.n	80059c2 <d_demangle_callback.constprop.0+0x166>
 8005a6e:	7b6b      	ldrb	r3, [r5, #13]
 8005a70:	f105 020d 	add.w	r2, r5, #13
 8005a74:	2b47      	cmp	r3, #71	@ 0x47
 8005a76:	61fa      	str	r2, [r7, #28]
 8005a78:	f107 0010 	add.w	r0, r7, #16
 8005a7c:	d001      	beq.n	8005a82 <d_demangle_callback.constprop.0+0x226>
 8005a7e:	2b54      	cmp	r3, #84	@ 0x54
 8005a80:	d11e      	bne.n	8005ac0 <d_demangle_callback.constprop.0+0x264>
 8005a82:	f7fc fbed 	bl	8002260 <d_special_name>
 8005a86:	69fc      	ldr	r4, [r7, #28]
 8005a88:	4682      	mov	sl, r0
 8005a8a:	e756      	b.n	800593a <d_demangle_callback.constprop.0+0xde>
 8005a8c:	7a2b      	ldrb	r3, [r5, #8]
 8005a8e:	2b2e      	cmp	r3, #46	@ 0x2e
 8005a90:	d004      	beq.n	8005a9c <d_demangle_callback.constprop.0+0x240>
 8005a92:	2b5f      	cmp	r3, #95	@ 0x5f
 8005a94:	d002      	beq.n	8005a9c <d_demangle_callback.constprop.0+0x240>
 8005a96:	2b24      	cmp	r3, #36	@ 0x24
 8005a98:	f47f aef3 	bne.w	8005882 <d_demangle_callback.constprop.0+0x26>
 8005a9c:	7a6b      	ldrb	r3, [r5, #9]
 8005a9e:	2b44      	cmp	r3, #68	@ 0x44
 8005aa0:	f000 8092 	beq.w	8005bc8 <d_demangle_callback.constprop.0+0x36c>
 8005aa4:	2b49      	cmp	r3, #73	@ 0x49
 8005aa6:	f47f aeec 	bne.w	8005882 <d_demangle_callback.constprop.0+0x26>
 8005aaa:	f895 b00a 	ldrb.w	fp, [r5, #10]
 8005aae:	f1ab 0b5f 	sub.w	fp, fp, #95	@ 0x5f
 8005ab2:	fabb fb8b 	clz	fp, fp
 8005ab6:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 8005aba:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
 8005abe:	e6e2      	b.n	8005886 <d_demangle_callback.constprop.0+0x2a>
 8005ac0:	f7fc ffbe 	bl	8002a40 <d_encoding.part.0>
 8005ac4:	69fc      	ldr	r4, [r7, #28]
 8005ac6:	4682      	mov	sl, r0
 8005ac8:	e737      	b.n	800593a <d_demangle_callback.constprop.0+0xde>
 8005aca:	f107 0010 	add.w	r0, r7, #16
 8005ace:	f7fc fbc7 	bl	8002260 <d_special_name>
 8005ad2:	4606      	mov	r6, r0
 8005ad4:	e76a      	b.n	80059ac <d_demangle_callback.constprop.0+0x150>
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	e7bd      	b.n	8005a56 <d_demangle_callback.constprop.0+0x1fa>
 8005ada:	f04f 0a00 	mov.w	sl, #0
 8005ade:	e72c      	b.n	800593a <d_demangle_callback.constprop.0+0xde>
 8005ae0:	2000      	movs	r0, #0
 8005ae2:	f507 77d2 	add.w	r7, r7, #420	@ 0x1a4
 8005ae6:	46c5      	mov	sp, r8
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005aee:	7843      	ldrb	r3, [r0, #1]
 8005af0:	2b5a      	cmp	r3, #90	@ 0x5a
 8005af2:	f47f aebe 	bne.w	8005872 <d_demangle_callback.constprop.0+0x16>
 8005af6:	f04f 0b01 	mov.w	fp, #1
 8005afa:	e6c4      	b.n	8005886 <d_demangle_callback.constprop.0+0x2a>
 8005afc:	4608      	mov	r0, r1
 8005afe:	f507 77d2 	add.w	r7, r7, #420	@ 0x1a4
 8005b02:	46bd      	mov	sp, r7
 8005b04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b08:	080af0ac 	.word	0x080af0ac
 8005b0c:	f107 0450 	add.w	r4, r7, #80	@ 0x50
 8005b10:	2000      	movs	r0, #0
 8005b12:	2100      	movs	r1, #0
 8005b14:	e9c7 0164 	strd	r0, r1, [r7, #400]	@ 0x190
 8005b18:	68ba      	ldr	r2, [r7, #8]
 8005b1a:	f8d7 a004 	ldr.w	sl, [r7, #4]
 8005b1e:	f8c4 210c 	str.w	r2, [r4, #268]	@ 0x10c
 8005b22:	4631      	mov	r1, r6
 8005b24:	4620      	mov	r0, r4
 8005b26:	e9c7 3361 	strd	r3, r3, [r7, #388]	@ 0x184
 8005b2a:	e9c4 3344 	strd	r3, r3, [r4, #272]	@ 0x110
 8005b2e:	e9c4 3349 	strd	r3, r3, [r4, #292]	@ 0x124
 8005b32:	e9c4 3346 	strd	r3, r3, [r4, #280]	@ 0x118
 8005b36:	60fb      	str	r3, [r7, #12]
 8005b38:	f8c4 3100 	str.w	r3, [r4, #256]	@ 0x100
 8005b3c:	f884 3104 	strb.w	r3, [r4, #260]	@ 0x104
 8005b40:	f8c4 3120 	str.w	r3, [r4, #288]	@ 0x120
 8005b44:	f8c4 312c 	str.w	r3, [r4, #300]	@ 0x12c
 8005b48:	f8c4 a108 	str.w	sl, [r4, #264]	@ 0x108
 8005b4c:	f7fa fc5c 	bl	8000408 <d_count_templates_scopes>
 8005b50:	f8d4 211c 	ldr.w	r2, [r4, #284]	@ 0x11c
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	f5b2 6f00 	cmp.w	r2, #2048	@ 0x800
 8005b5a:	da01      	bge.n	8005b60 <d_demangle_callback.constprop.0+0x304>
 8005b5c:	f8c4 311c 	str.w	r3, [r4, #284]	@ 0x11c
 8005b60:	f8d4 1138 	ldr.w	r1, [r4, #312]	@ 0x138
 8005b64:	f8d4 3144 	ldr.w	r3, [r4, #324]	@ 0x144
 8005b68:	2901      	cmp	r1, #1
 8005b6a:	fb01 f303 	mul.w	r3, r1, r3
 8005b6e:	4632      	mov	r2, r6
 8005b70:	bfb8      	it	lt
 8005b72:	2101      	movlt	r1, #1
 8005b74:	466e      	mov	r6, sp
 8005b76:	eba6 01c1 	sub.w	r1, r6, r1, lsl #3
 8005b7a:	2b01      	cmp	r3, #1
 8005b7c:	468d      	mov	sp, r1
 8005b7e:	f8c4 3144 	str.w	r3, [r4, #324]	@ 0x144
 8005b82:	4668      	mov	r0, sp
 8005b84:	bfb8      	it	lt
 8005b86:	2301      	movlt	r3, #1
 8005b88:	eba0 03c3 	sub.w	r3, r0, r3, lsl #3
 8005b8c:	469d      	mov	sp, r3
 8005b8e:	2500      	movs	r5, #0
 8005b90:	f8c4 1130 	str.w	r1, [r4, #304]	@ 0x130
 8005b94:	4620      	mov	r0, r4
 8005b96:	2111      	movs	r1, #17
 8005b98:	f8c4 d13c 	str.w	sp, [r4, #316]	@ 0x13c
 8005b9c:	f8c4 5148 	str.w	r5, [r4, #328]	@ 0x148
 8005ba0:	f7ff f810 	bl	8004bc4 <d_print_comp>
 8005ba4:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
 8005ba8:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
 8005bac:	5465      	strb	r5, [r4, r1]
 8005bae:	4620      	mov	r0, r4
 8005bb0:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
 8005bb4:	46b5      	mov	sp, r6
 8005bb6:	4798      	blx	r3
 8005bb8:	f8d4 0118 	ldr.w	r0, [r4, #280]	@ 0x118
 8005bbc:	fab0 f080 	clz	r0, r0
 8005bc0:	0940      	lsrs	r0, r0, #5
 8005bc2:	e78e      	b.n	8005ae2 <d_demangle_callback.constprop.0+0x286>
 8005bc4:	4606      	mov	r6, r0
 8005bc6:	e6c6      	b.n	8005956 <d_demangle_callback.constprop.0+0xfa>
 8005bc8:	7aab      	ldrb	r3, [r5, #10]
 8005bca:	2b5f      	cmp	r3, #95	@ 0x5f
 8005bcc:	bf14      	ite	ne
 8005bce:	f04f 0b00 	movne.w	fp, #0
 8005bd2:	f04f 0b03 	moveq.w	fp, #3
 8005bd6:	e656      	b.n	8005886 <d_demangle_callback.constprop.0+0x2a>
 8005bd8:	69fb      	ldr	r3, [r7, #28]
 8005bda:	4616      	mov	r6, r2
 8005bdc:	781b      	ldrb	r3, [r3, #0]
 8005bde:	e6ba      	b.n	8005956 <d_demangle_callback.constprop.0+0xfa>

08005be0 <d_print_subexpr>:
 8005be0:	b570      	push	{r4, r5, r6, lr}
 8005be2:	7813      	ldrb	r3, [r2, #0]
 8005be4:	2b01      	cmp	r3, #1
 8005be6:	b082      	sub	sp, #8
 8005be8:	4615      	mov	r5, r2
 8005bea:	4604      	mov	r4, r0
 8005bec:	d903      	bls.n	8005bf6 <d_print_subexpr+0x16>
 8005bee:	2b31      	cmp	r3, #49	@ 0x31
 8005bf0:	d001      	beq.n	8005bf6 <d_print_subexpr+0x16>
 8005bf2:	2b06      	cmp	r3, #6
 8005bf4:	d136      	bne.n	8005c64 <d_print_subexpr+0x84>
 8005bf6:	686b      	ldr	r3, [r5, #4]
 8005bf8:	2b01      	cmp	r3, #1
 8005bfa:	dc2e      	bgt.n	8005c5a <d_print_subexpr+0x7a>
 8005bfc:	f8d4 211c 	ldr.w	r2, [r4, #284]	@ 0x11c
 8005c00:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8005c04:	dc29      	bgt.n	8005c5a <d_print_subexpr+0x7a>
 8005c06:	2601      	movs	r6, #1
 8005c08:	3301      	adds	r3, #1
 8005c0a:	3201      	adds	r2, #1
 8005c0c:	606b      	str	r3, [r5, #4]
 8005c0e:	2111      	movs	r1, #17
 8005c10:	f8d4 312c 	ldr.w	r3, [r4, #300]	@ 0x12c
 8005c14:	f8c4 211c 	str.w	r2, [r4, #284]	@ 0x11c
 8005c18:	f8c4 d12c 	str.w	sp, [r4, #300]	@ 0x12c
 8005c1c:	462a      	mov	r2, r5
 8005c1e:	4620      	mov	r0, r4
 8005c20:	9301      	str	r3, [sp, #4]
 8005c22:	9500      	str	r5, [sp, #0]
 8005c24:	f7fc ff88 	bl	8002b38 <d_print_comp_inner>
 8005c28:	686a      	ldr	r2, [r5, #4]
 8005c2a:	f8d4 311c 	ldr.w	r3, [r4, #284]	@ 0x11c
 8005c2e:	9901      	ldr	r1, [sp, #4]
 8005c30:	f8c4 112c 	str.w	r1, [r4, #300]	@ 0x12c
 8005c34:	3a01      	subs	r2, #1
 8005c36:	3b01      	subs	r3, #1
 8005c38:	606a      	str	r2, [r5, #4]
 8005c3a:	f8c4 311c 	str.w	r3, [r4, #284]	@ 0x11c
 8005c3e:	b97e      	cbnz	r6, 8005c60 <d_print_subexpr+0x80>
 8005c40:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
 8005c44:	29ff      	cmp	r1, #255	@ 0xff
 8005c46:	d024      	beq.n	8005c92 <d_print_subexpr+0xb2>
 8005c48:	1c4a      	adds	r2, r1, #1
 8005c4a:	2329      	movs	r3, #41	@ 0x29
 8005c4c:	f8c4 2100 	str.w	r2, [r4, #256]	@ 0x100
 8005c50:	5463      	strb	r3, [r4, r1]
 8005c52:	f884 3104 	strb.w	r3, [r4, #260]	@ 0x104
 8005c56:	b002      	add	sp, #8
 8005c58:	bd70      	pop	{r4, r5, r6, pc}
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	f8c4 3118 	str.w	r3, [r4, #280]	@ 0x118
 8005c60:	b002      	add	sp, #8
 8005c62:	bd70      	pop	{r4, r5, r6, pc}
 8005c64:	f8d0 3100 	ldr.w	r3, [r0, #256]	@ 0x100
 8005c68:	2bff      	cmp	r3, #255	@ 0xff
 8005c6a:	d021      	beq.n	8005cb0 <d_print_subexpr+0xd0>
 8005c6c:	1c59      	adds	r1, r3, #1
 8005c6e:	2228      	movs	r2, #40	@ 0x28
 8005c70:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
 8005c74:	54e2      	strb	r2, [r4, r3]
 8005c76:	f884 2104 	strb.w	r2, [r4, #260]	@ 0x104
 8005c7a:	686b      	ldr	r3, [r5, #4]
 8005c7c:	2b01      	cmp	r3, #1
 8005c7e:	dc04      	bgt.n	8005c8a <d_print_subexpr+0xaa>
 8005c80:	f8d4 211c 	ldr.w	r2, [r4, #284]	@ 0x11c
 8005c84:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8005c88:	dd21      	ble.n	8005cce <d_print_subexpr+0xee>
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	f8c4 3118 	str.w	r3, [r4, #280]	@ 0x118
 8005c90:	e7d8      	b.n	8005c44 <d_print_subexpr+0x64>
 8005c92:	2500      	movs	r5, #0
 8005c94:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	@ 0x108
 8005c98:	f884 50ff 	strb.w	r5, [r4, #255]	@ 0xff
 8005c9c:	4620      	mov	r0, r4
 8005c9e:	4798      	blx	r3
 8005ca0:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
 8005ca4:	2201      	movs	r2, #1
 8005ca6:	4413      	add	r3, r2
 8005ca8:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
 8005cac:	4629      	mov	r1, r5
 8005cae:	e7cc      	b.n	8005c4a <d_print_subexpr+0x6a>
 8005cb0:	2600      	movs	r6, #0
 8005cb2:	4619      	mov	r1, r3
 8005cb4:	f880 60ff 	strb.w	r6, [r0, #255]	@ 0xff
 8005cb8:	e9d0 3242 	ldrd	r3, r2, [r0, #264]	@ 0x108
 8005cbc:	4798      	blx	r3
 8005cbe:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
 8005cc2:	2101      	movs	r1, #1
 8005cc4:	440b      	add	r3, r1
 8005cc6:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
 8005cca:	4633      	mov	r3, r6
 8005ccc:	e7cf      	b.n	8005c6e <d_print_subexpr+0x8e>
 8005cce:	2600      	movs	r6, #0
 8005cd0:	e79a      	b.n	8005c08 <d_print_subexpr+0x28>
 8005cd2:	bf00      	nop

08005cd4 <d_maybe_print_fold_expression>:
 8005cd4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cd8:	68d3      	ldr	r3, [r2, #12]
 8005cda:	68db      	ldr	r3, [r3, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	7819      	ldrb	r1, [r3, #0]
 8005ce0:	2966      	cmp	r1, #102	@ 0x66
 8005ce2:	d177      	bne.n	8005dd4 <d_maybe_print_fold_expression+0x100>
 8005ce4:	6912      	ldr	r2, [r2, #16]
 8005ce6:	f8d0 7124 	ldr.w	r7, [r0, #292]	@ 0x124
 8005cea:	e9d2 8a03 	ldrd	r8, sl, [r2, #12]
 8005cee:	f89a 2000 	ldrb.w	r2, [sl]
 8005cf2:	2a3c      	cmp	r2, #60	@ 0x3c
 8005cf4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005cf8:	bf08      	it	eq
 8005cfa:	e9da a903 	ldrdeq	sl, r9, [sl, #12]
 8005cfe:	f8c0 2124 	str.w	r2, [r0, #292]	@ 0x124
 8005d02:	785b      	ldrb	r3, [r3, #1]
 8005d04:	bf18      	it	ne
 8005d06:	f04f 0900 	movne.w	r9, #0
 8005d0a:	2b6c      	cmp	r3, #108	@ 0x6c
 8005d0c:	4604      	mov	r4, r0
 8005d0e:	f000 80a0 	beq.w	8005e52 <d_maybe_print_fold_expression+0x17e>
 8005d12:	d862      	bhi.n	8005dda <d_maybe_print_fold_expression+0x106>
 8005d14:	2b4c      	cmp	r3, #76	@ 0x4c
 8005d16:	d001      	beq.n	8005d1c <d_maybe_print_fold_expression+0x48>
 8005d18:	2b52      	cmp	r3, #82	@ 0x52
 8005d1a:	d156      	bne.n	8005dca <d_maybe_print_fold_expression+0xf6>
 8005d1c:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
 8005d20:	29ff      	cmp	r1, #255	@ 0xff
 8005d22:	f000 80e8 	beq.w	8005ef6 <d_maybe_print_fold_expression+0x222>
 8005d26:	1c4b      	adds	r3, r1, #1
 8005d28:	f8c4 3100 	str.w	r3, [r4, #256]	@ 0x100
 8005d2c:	2328      	movs	r3, #40	@ 0x28
 8005d2e:	5463      	strb	r3, [r4, r1]
 8005d30:	4652      	mov	r2, sl
 8005d32:	f884 3104 	strb.w	r3, [r4, #260]	@ 0x104
 8005d36:	2111      	movs	r1, #17
 8005d38:	4620      	mov	r0, r4
 8005d3a:	4d76      	ldr	r5, [pc, #472]	@ (8005f14 <d_maybe_print_fold_expression+0x240>)
 8005d3c:	f7ff ff50 	bl	8005be0 <d_print_subexpr>
 8005d40:	2111      	movs	r1, #17
 8005d42:	4642      	mov	r2, r8
 8005d44:	4620      	mov	r0, r4
 8005d46:	f7ff fd4d 	bl	80057e4 <d_print_expr_op>
 8005d4a:	f105 0b03 	add.w	fp, r5, #3
 8005d4e:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
 8005d52:	f04f 0a00 	mov.w	sl, #0
 8005d56:	e009      	b.n	8005d6c <d_maybe_print_fold_expression+0x98>
 8005d58:	460b      	mov	r3, r1
 8005d5a:	455d      	cmp	r5, fp
 8005d5c:	f101 0101 	add.w	r1, r1, #1
 8005d60:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
 8005d64:	54e6      	strb	r6, [r4, r3]
 8005d66:	f884 6104 	strb.w	r6, [r4, #260]	@ 0x104
 8005d6a:	d019      	beq.n	8005da0 <d_maybe_print_fold_expression+0xcc>
 8005d6c:	29ff      	cmp	r1, #255	@ 0xff
 8005d6e:	f815 6b01 	ldrb.w	r6, [r5], #1
 8005d72:	d1f1      	bne.n	8005d58 <d_maybe_print_fold_expression+0x84>
 8005d74:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
 8005d78:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
 8005d7c:	f884 a0ff 	strb.w	sl, [r4, #255]	@ 0xff
 8005d80:	4620      	mov	r0, r4
 8005d82:	4798      	blx	r3
 8005d84:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
 8005d88:	3301      	adds	r3, #1
 8005d8a:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
 8005d8e:	2300      	movs	r3, #0
 8005d90:	2101      	movs	r1, #1
 8005d92:	455d      	cmp	r5, fp
 8005d94:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
 8005d98:	54e6      	strb	r6, [r4, r3]
 8005d9a:	f884 6104 	strb.w	r6, [r4, #260]	@ 0x104
 8005d9e:	d1e5      	bne.n	8005d6c <d_maybe_print_fold_expression+0x98>
 8005da0:	4642      	mov	r2, r8
 8005da2:	2111      	movs	r1, #17
 8005da4:	4620      	mov	r0, r4
 8005da6:	f7ff fd1d 	bl	80057e4 <d_print_expr_op>
 8005daa:	464a      	mov	r2, r9
 8005dac:	2111      	movs	r1, #17
 8005dae:	4620      	mov	r0, r4
 8005db0:	f7ff ff16 	bl	8005be0 <d_print_subexpr>
 8005db4:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
 8005db8:	29ff      	cmp	r1, #255	@ 0xff
 8005dba:	d07d      	beq.n	8005eb8 <d_maybe_print_fold_expression+0x1e4>
 8005dbc:	1c4a      	adds	r2, r1, #1
 8005dbe:	2329      	movs	r3, #41	@ 0x29
 8005dc0:	f8c4 2100 	str.w	r2, [r4, #256]	@ 0x100
 8005dc4:	5463      	strb	r3, [r4, r1]
 8005dc6:	f884 3104 	strb.w	r3, [r4, #260]	@ 0x104
 8005dca:	f8c4 7124 	str.w	r7, [r4, #292]	@ 0x124
 8005dce:	2001      	movs	r0, #1
 8005dd0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005dd4:	2000      	movs	r0, #0
 8005dd6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005dda:	2b72      	cmp	r3, #114	@ 0x72
 8005ddc:	d1f5      	bne.n	8005dca <d_maybe_print_fold_expression+0xf6>
 8005dde:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
 8005de2:	29ff      	cmp	r1, #255	@ 0xff
 8005de4:	d079      	beq.n	8005eda <d_maybe_print_fold_expression+0x206>
 8005de6:	1c4b      	adds	r3, r1, #1
 8005de8:	f8c4 3100 	str.w	r3, [r4, #256]	@ 0x100
 8005dec:	2328      	movs	r3, #40	@ 0x28
 8005dee:	5463      	strb	r3, [r4, r1]
 8005df0:	4652      	mov	r2, sl
 8005df2:	f884 3104 	strb.w	r3, [r4, #260]	@ 0x104
 8005df6:	2111      	movs	r1, #17
 8005df8:	4620      	mov	r0, r4
 8005dfa:	4d47      	ldr	r5, [pc, #284]	@ (8005f18 <d_maybe_print_fold_expression+0x244>)
 8005dfc:	f7ff fef0 	bl	8005be0 <d_print_subexpr>
 8005e00:	4642      	mov	r2, r8
 8005e02:	2111      	movs	r1, #17
 8005e04:	4620      	mov	r0, r4
 8005e06:	f7ff fced 	bl	80057e4 <d_print_expr_op>
 8005e0a:	f105 0904 	add.w	r9, r5, #4
 8005e0e:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
 8005e12:	f04f 0800 	mov.w	r8, #0
 8005e16:	e008      	b.n	8005e2a <d_maybe_print_fold_expression+0x156>
 8005e18:	460b      	mov	r3, r1
 8005e1a:	3101      	adds	r1, #1
 8005e1c:	454d      	cmp	r5, r9
 8005e1e:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
 8005e22:	54e6      	strb	r6, [r4, r3]
 8005e24:	f884 6104 	strb.w	r6, [r4, #260]	@ 0x104
 8005e28:	d0cf      	beq.n	8005dca <d_maybe_print_fold_expression+0xf6>
 8005e2a:	29ff      	cmp	r1, #255	@ 0xff
 8005e2c:	f815 6b01 	ldrb.w	r6, [r5], #1
 8005e30:	d1f2      	bne.n	8005e18 <d_maybe_print_fold_expression+0x144>
 8005e32:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
 8005e36:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
 8005e3a:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
 8005e3e:	4620      	mov	r0, r4
 8005e40:	4798      	blx	r3
 8005e42:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
 8005e46:	3301      	adds	r3, #1
 8005e48:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
 8005e4c:	2101      	movs	r1, #1
 8005e4e:	2300      	movs	r3, #0
 8005e50:	e7e4      	b.n	8005e1c <d_maybe_print_fold_expression+0x148>
 8005e52:	4d32      	ldr	r5, [pc, #200]	@ (8005f1c <d_maybe_print_fold_expression+0x248>)
 8005e54:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
 8005e58:	f04f 0900 	mov.w	r9, #0
 8005e5c:	f105 0b04 	add.w	fp, r5, #4
 8005e60:	e009      	b.n	8005e76 <d_maybe_print_fold_expression+0x1a2>
 8005e62:	460b      	mov	r3, r1
 8005e64:	45ab      	cmp	fp, r5
 8005e66:	f101 0101 	add.w	r1, r1, #1
 8005e6a:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
 8005e6e:	54e6      	strb	r6, [r4, r3]
 8005e70:	f884 6104 	strb.w	r6, [r4, #260]	@ 0x104
 8005e74:	d019      	beq.n	8005eaa <d_maybe_print_fold_expression+0x1d6>
 8005e76:	29ff      	cmp	r1, #255	@ 0xff
 8005e78:	f815 6b01 	ldrb.w	r6, [r5], #1
 8005e7c:	d1f1      	bne.n	8005e62 <d_maybe_print_fold_expression+0x18e>
 8005e7e:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
 8005e82:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
 8005e86:	f884 90ff 	strb.w	r9, [r4, #255]	@ 0xff
 8005e8a:	4620      	mov	r0, r4
 8005e8c:	4798      	blx	r3
 8005e8e:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
 8005e92:	3301      	adds	r3, #1
 8005e94:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
 8005e98:	2300      	movs	r3, #0
 8005e9a:	2101      	movs	r1, #1
 8005e9c:	45ab      	cmp	fp, r5
 8005e9e:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
 8005ea2:	54e6      	strb	r6, [r4, r3]
 8005ea4:	f884 6104 	strb.w	r6, [r4, #260]	@ 0x104
 8005ea8:	d1e5      	bne.n	8005e76 <d_maybe_print_fold_expression+0x1a2>
 8005eaa:	4642      	mov	r2, r8
 8005eac:	2111      	movs	r1, #17
 8005eae:	4620      	mov	r0, r4
 8005eb0:	f7ff fc98 	bl	80057e4 <d_print_expr_op>
 8005eb4:	4652      	mov	r2, sl
 8005eb6:	e779      	b.n	8005dac <d_maybe_print_fold_expression+0xd8>
 8005eb8:	2500      	movs	r5, #0
 8005eba:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
 8005ebe:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
 8005ec2:	f884 50ff 	strb.w	r5, [r4, #255]	@ 0xff
 8005ec6:	4620      	mov	r0, r4
 8005ec8:	4798      	blx	r3
 8005eca:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
 8005ece:	2201      	movs	r2, #1
 8005ed0:	4413      	add	r3, r2
 8005ed2:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
 8005ed6:	4629      	mov	r1, r5
 8005ed8:	e771      	b.n	8005dbe <d_maybe_print_fold_expression+0xea>
 8005eda:	2500      	movs	r5, #0
 8005edc:	e9d0 3242 	ldrd	r3, r2, [r0, #264]	@ 0x108
 8005ee0:	f880 50ff 	strb.w	r5, [r0, #255]	@ 0xff
 8005ee4:	4798      	blx	r3
 8005ee6:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
 8005eea:	3301      	adds	r3, #1
 8005eec:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
 8005ef0:	4629      	mov	r1, r5
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	e778      	b.n	8005de8 <d_maybe_print_fold_expression+0x114>
 8005ef6:	2500      	movs	r5, #0
 8005ef8:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	@ 0x108
 8005efc:	f884 50ff 	strb.w	r5, [r4, #255]	@ 0xff
 8005f00:	4620      	mov	r0, r4
 8005f02:	4798      	blx	r3
 8005f04:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
 8005f08:	3301      	adds	r3, #1
 8005f0a:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
 8005f0e:	4629      	mov	r1, r5
 8005f10:	2301      	movs	r3, #1
 8005f12:	e709      	b.n	8005d28 <d_maybe_print_fold_expression+0x54>
 8005f14:	080af328 	.word	0x080af328
 8005f18:	080af424 	.word	0x080af424
 8005f1c:	080af41c 	.word	0x080af41c

08005f20 <d_maybe_print_designated_init>:
 8005f20:	7813      	ldrb	r3, [r2, #0]
 8005f22:	f003 03fd 	and.w	r3, r3, #253	@ 0xfd
 8005f26:	2b38      	cmp	r3, #56	@ 0x38
 8005f28:	d001      	beq.n	8005f2e <d_maybe_print_designated_init+0xe>
 8005f2a:	2000      	movs	r0, #0
 8005f2c:	4770      	bx	lr
 8005f2e:	68d3      	ldr	r3, [r2, #12]
 8005f30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f34:	68db      	ldr	r3, [r3, #12]
 8005f36:	681f      	ldr	r7, [r3, #0]
 8005f38:	783b      	ldrb	r3, [r7, #0]
 8005f3a:	2b64      	cmp	r3, #100	@ 0x64
 8005f3c:	d002      	beq.n	8005f44 <d_maybe_print_designated_init+0x24>
 8005f3e:	2000      	movs	r0, #0
 8005f40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f44:	787b      	ldrb	r3, [r7, #1]
 8005f46:	2b69      	cmp	r3, #105	@ 0x69
 8005f48:	4604      	mov	r4, r0
 8005f4a:	d011      	beq.n	8005f70 <d_maybe_print_designated_init+0x50>
 8005f4c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8005f50:	2b58      	cmp	r3, #88	@ 0x58
 8005f52:	d1f4      	bne.n	8005f3e <d_maybe_print_designated_init+0x1e>
 8005f54:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
 8005f58:	6913      	ldr	r3, [r2, #16]
 8005f5a:	29ff      	cmp	r1, #255	@ 0xff
 8005f5c:	e9d3 5603 	ldrd	r5, r6, [r3, #12]
 8005f60:	f000 808c 	beq.w	800607c <d_maybe_print_designated_init+0x15c>
 8005f64:	1c4b      	adds	r3, r1, #1
 8005f66:	f8c4 3100 	str.w	r3, [r4, #256]	@ 0x100
 8005f6a:	235b      	movs	r3, #91	@ 0x5b
 8005f6c:	5463      	strb	r3, [r4, r1]
 8005f6e:	e00c      	b.n	8005f8a <d_maybe_print_designated_init+0x6a>
 8005f70:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
 8005f74:	6913      	ldr	r3, [r2, #16]
 8005f76:	29ff      	cmp	r1, #255	@ 0xff
 8005f78:	e9d3 5603 	ldrd	r5, r6, [r3, #12]
 8005f7c:	f000 80af 	beq.w	80060de <d_maybe_print_designated_init+0x1be>
 8005f80:	1c4b      	adds	r3, r1, #1
 8005f82:	f8c4 3100 	str.w	r3, [r4, #256]	@ 0x100
 8005f86:	232e      	movs	r3, #46	@ 0x2e
 8005f88:	5463      	strb	r3, [r4, r1]
 8005f8a:	f884 3104 	strb.w	r3, [r4, #260]	@ 0x104
 8005f8e:	462a      	mov	r2, r5
 8005f90:	2111      	movs	r1, #17
 8005f92:	4620      	mov	r0, r4
 8005f94:	f7fe fe16 	bl	8004bc4 <d_print_comp>
 8005f98:	787b      	ldrb	r3, [r7, #1]
 8005f9a:	2b58      	cmp	r3, #88	@ 0x58
 8005f9c:	d038      	beq.n	8006010 <d_maybe_print_designated_init+0xf0>
 8005f9e:	2b69      	cmp	r3, #105	@ 0x69
 8005fa0:	d00b      	beq.n	8005fba <d_maybe_print_designated_init+0x9a>
 8005fa2:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
 8005fa6:	29ff      	cmp	r1, #255	@ 0xff
 8005fa8:	f000 8088 	beq.w	80060bc <d_maybe_print_designated_init+0x19c>
 8005fac:	1c4a      	adds	r2, r1, #1
 8005fae:	235d      	movs	r3, #93	@ 0x5d
 8005fb0:	f8c4 2100 	str.w	r2, [r4, #256]	@ 0x100
 8005fb4:	5463      	strb	r3, [r4, r1]
 8005fb6:	f884 3104 	strb.w	r3, [r4, #260]	@ 0x104
 8005fba:	7833      	ldrb	r3, [r6, #0]
 8005fbc:	f003 03fd 	and.w	r3, r3, #253	@ 0xfd
 8005fc0:	2b38      	cmp	r3, #56	@ 0x38
 8005fc2:	d012      	beq.n	8005fea <d_maybe_print_designated_init+0xca>
 8005fc4:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
 8005fc8:	29ff      	cmp	r1, #255	@ 0xff
 8005fca:	d066      	beq.n	800609a <d_maybe_print_designated_init+0x17a>
 8005fcc:	1c4a      	adds	r2, r1, #1
 8005fce:	233d      	movs	r3, #61	@ 0x3d
 8005fd0:	f8c4 2100 	str.w	r2, [r4, #256]	@ 0x100
 8005fd4:	4620      	mov	r0, r4
 8005fd6:	5463      	strb	r3, [r4, r1]
 8005fd8:	4632      	mov	r2, r6
 8005fda:	2111      	movs	r1, #17
 8005fdc:	f884 3104 	strb.w	r3, [r4, #260]	@ 0x104
 8005fe0:	f7ff fdfe 	bl	8005be0 <d_print_subexpr>
 8005fe4:	2001      	movs	r0, #1
 8005fe6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005fea:	68f3      	ldr	r3, [r6, #12]
 8005fec:	68db      	ldr	r3, [r3, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	781a      	ldrb	r2, [r3, #0]
 8005ff2:	2a64      	cmp	r2, #100	@ 0x64
 8005ff4:	d1e6      	bne.n	8005fc4 <d_maybe_print_designated_init+0xa4>
 8005ff6:	785b      	ldrb	r3, [r3, #1]
 8005ff8:	2b69      	cmp	r3, #105	@ 0x69
 8005ffa:	d003      	beq.n	8006004 <d_maybe_print_designated_init+0xe4>
 8005ffc:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8006000:	2b58      	cmp	r3, #88	@ 0x58
 8006002:	d1df      	bne.n	8005fc4 <d_maybe_print_designated_init+0xa4>
 8006004:	4632      	mov	r2, r6
 8006006:	2111      	movs	r1, #17
 8006008:	4620      	mov	r0, r4
 800600a:	f7fe fddb 	bl	8004bc4 <d_print_comp>
 800600e:	e7e9      	b.n	8005fe4 <d_maybe_print_designated_init+0xc4>
 8006010:	4d3a      	ldr	r5, [pc, #232]	@ (80060fc <d_maybe_print_designated_init+0x1dc>)
 8006012:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
 8006016:	f105 0a05 	add.w	sl, r5, #5
 800601a:	f04f 0900 	mov.w	r9, #0
 800601e:	e00a      	b.n	8006036 <d_maybe_print_designated_init+0x116>
 8006020:	460b      	mov	r3, r1
 8006022:	45aa      	cmp	sl, r5
 8006024:	f101 0101 	add.w	r1, r1, #1
 8006028:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
 800602c:	f804 8003 	strb.w	r8, [r4, r3]
 8006030:	f884 8104 	strb.w	r8, [r4, #260]	@ 0x104
 8006034:	d01a      	beq.n	800606c <d_maybe_print_designated_init+0x14c>
 8006036:	29ff      	cmp	r1, #255	@ 0xff
 8006038:	f815 8b01 	ldrb.w	r8, [r5], #1
 800603c:	d1f0      	bne.n	8006020 <d_maybe_print_designated_init+0x100>
 800603e:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
 8006042:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
 8006046:	f884 90ff 	strb.w	r9, [r4, #255]	@ 0xff
 800604a:	4620      	mov	r0, r4
 800604c:	4798      	blx	r3
 800604e:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
 8006052:	3301      	adds	r3, #1
 8006054:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
 8006058:	2300      	movs	r3, #0
 800605a:	2101      	movs	r1, #1
 800605c:	45aa      	cmp	sl, r5
 800605e:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
 8006062:	f804 8003 	strb.w	r8, [r4, r3]
 8006066:	f884 8104 	strb.w	r8, [r4, #260]	@ 0x104
 800606a:	d1e4      	bne.n	8006036 <d_maybe_print_designated_init+0x116>
 800606c:	68f2      	ldr	r2, [r6, #12]
 800606e:	2111      	movs	r1, #17
 8006070:	4620      	mov	r0, r4
 8006072:	f7fe fda7 	bl	8004bc4 <d_print_comp>
 8006076:	6936      	ldr	r6, [r6, #16]
 8006078:	787b      	ldrb	r3, [r7, #1]
 800607a:	e790      	b.n	8005f9e <d_maybe_print_designated_init+0x7e>
 800607c:	f04f 0800 	mov.w	r8, #0
 8006080:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	@ 0x108
 8006084:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
 8006088:	4798      	blx	r3
 800608a:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
 800608e:	3301      	adds	r3, #1
 8006090:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
 8006094:	4641      	mov	r1, r8
 8006096:	2301      	movs	r3, #1
 8006098:	e765      	b.n	8005f66 <d_maybe_print_designated_init+0x46>
 800609a:	2500      	movs	r5, #0
 800609c:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
 80060a0:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
 80060a4:	f884 50ff 	strb.w	r5, [r4, #255]	@ 0xff
 80060a8:	4620      	mov	r0, r4
 80060aa:	4798      	blx	r3
 80060ac:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
 80060b0:	2201      	movs	r2, #1
 80060b2:	4413      	add	r3, r2
 80060b4:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
 80060b8:	4629      	mov	r1, r5
 80060ba:	e788      	b.n	8005fce <d_maybe_print_designated_init+0xae>
 80060bc:	2500      	movs	r5, #0
 80060be:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
 80060c2:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
 80060c6:	f884 50ff 	strb.w	r5, [r4, #255]	@ 0xff
 80060ca:	4620      	mov	r0, r4
 80060cc:	4798      	blx	r3
 80060ce:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
 80060d2:	2201      	movs	r2, #1
 80060d4:	4413      	add	r3, r2
 80060d6:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
 80060da:	4629      	mov	r1, r5
 80060dc:	e767      	b.n	8005fae <d_maybe_print_designated_init+0x8e>
 80060de:	f04f 0800 	mov.w	r8, #0
 80060e2:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	@ 0x108
 80060e6:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
 80060ea:	4798      	blx	r3
 80060ec:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
 80060f0:	3301      	adds	r3, #1
 80060f2:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
 80060f6:	4641      	mov	r1, r8
 80060f8:	2301      	movs	r3, #1
 80060fa:	e742      	b.n	8005f82 <d_maybe_print_designated_init+0x62>
 80060fc:	080af42c 	.word	0x080af42c

08006100 <__cxa_demangle>:
 8006100:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006104:	461e      	mov	r6, r3
 8006106:	b084      	sub	sp, #16
 8006108:	2800      	cmp	r0, #0
 800610a:	d03f      	beq.n	800618c <__cxa_demangle+0x8c>
 800610c:	460c      	mov	r4, r1
 800610e:	4615      	mov	r5, r2
 8006110:	b109      	cbz	r1, 8006116 <__cxa_demangle+0x16>
 8006112:	2a00      	cmp	r2, #0
 8006114:	d03a      	beq.n	800618c <__cxa_demangle+0x8c>
 8006116:	2300      	movs	r3, #0
 8006118:	4927      	ldr	r1, [pc, #156]	@ (80061b8 <__cxa_demangle+0xb8>)
 800611a:	466a      	mov	r2, sp
 800611c:	e9cd 3300 	strd	r3, r3, [sp]
 8006120:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006124:	f7ff fb9a 	bl	800585c <d_demangle_callback.constprop.0>
 8006128:	2800      	cmp	r0, #0
 800612a:	d035      	beq.n	8006198 <__cxa_demangle+0x98>
 800612c:	9b03      	ldr	r3, [sp, #12]
 800612e:	9f00      	ldr	r7, [sp, #0]
 8006130:	b9d3      	cbnz	r3, 8006168 <__cxa_demangle+0x68>
 8006132:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8006136:	2f00      	cmp	r7, #0
 8006138:	d037      	beq.n	80061aa <__cxa_demangle+0xaa>
 800613a:	b324      	cbz	r4, 8006186 <__cxa_demangle+0x86>
 800613c:	4638      	mov	r0, r7
 800613e:	f000 f8af 	bl	80062a0 <strlen>
 8006142:	682b      	ldr	r3, [r5, #0]
 8006144:	4298      	cmp	r0, r3
 8006146:	d218      	bcs.n	800617a <__cxa_demangle+0x7a>
 8006148:	4639      	mov	r1, r7
 800614a:	1c42      	adds	r2, r0, #1
 800614c:	4620      	mov	r0, r4
 800614e:	f01d fe65 	bl	8023e1c <memcpy>
 8006152:	4638      	mov	r0, r7
 8006154:	f01c fe0c 	bl	8022d70 <free>
 8006158:	4627      	mov	r7, r4
 800615a:	b10e      	cbz	r6, 8006160 <__cxa_demangle+0x60>
 800615c:	2300      	movs	r3, #0
 800615e:	6033      	str	r3, [r6, #0]
 8006160:	4638      	mov	r0, r7
 8006162:	b004      	add	sp, #16
 8006164:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006168:	f04f 0801 	mov.w	r8, #1
 800616c:	2f00      	cmp	r7, #0
 800616e:	d1e4      	bne.n	800613a <__cxa_demangle+0x3a>
 8006170:	b186      	cbz	r6, 8006194 <__cxa_demangle+0x94>
 8006172:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006176:	6033      	str	r3, [r6, #0]
 8006178:	e00c      	b.n	8006194 <__cxa_demangle+0x94>
 800617a:	4620      	mov	r0, r4
 800617c:	f01c fdf8 	bl	8022d70 <free>
 8006180:	f8c5 8000 	str.w	r8, [r5]
 8006184:	e7e9      	b.n	800615a <__cxa_demangle+0x5a>
 8006186:	2d00      	cmp	r5, #0
 8006188:	d1fa      	bne.n	8006180 <__cxa_demangle+0x80>
 800618a:	e7e6      	b.n	800615a <__cxa_demangle+0x5a>
 800618c:	b116      	cbz	r6, 8006194 <__cxa_demangle+0x94>
 800618e:	f06f 0302 	mvn.w	r3, #2
 8006192:	6033      	str	r3, [r6, #0]
 8006194:	2700      	movs	r7, #0
 8006196:	e7e3      	b.n	8006160 <__cxa_demangle+0x60>
 8006198:	9800      	ldr	r0, [sp, #0]
 800619a:	f01c fde9 	bl	8022d70 <free>
 800619e:	2e00      	cmp	r6, #0
 80061a0:	d0f8      	beq.n	8006194 <__cxa_demangle+0x94>
 80061a2:	f06f 0301 	mvn.w	r3, #1
 80061a6:	6033      	str	r3, [r6, #0]
 80061a8:	e7f4      	b.n	8006194 <__cxa_demangle+0x94>
 80061aa:	2e00      	cmp	r6, #0
 80061ac:	d0f2      	beq.n	8006194 <__cxa_demangle+0x94>
 80061ae:	f1b8 0f01 	cmp.w	r8, #1
 80061b2:	d1f6      	bne.n	80061a2 <__cxa_demangle+0xa2>
 80061b4:	e7dd      	b.n	8006172 <__cxa_demangle+0x72>
 80061b6:	bf00      	nop
 80061b8:	08000519 	.word	0x08000519

080061bc <__gcclibcxx_demangle_callback>:
 80061bc:	b160      	cbz	r0, 80061d8 <__gcclibcxx_demangle_callback+0x1c>
 80061be:	b508      	push	{r3, lr}
 80061c0:	b139      	cbz	r1, 80061d2 <__gcclibcxx_demangle_callback+0x16>
 80061c2:	f7ff fb4b 	bl	800585c <d_demangle_callback.constprop.0>
 80061c6:	2800      	cmp	r0, #0
 80061c8:	bf0c      	ite	eq
 80061ca:	f06f 0001 	mvneq.w	r0, #1
 80061ce:	2000      	movne	r0, #0
 80061d0:	bd08      	pop	{r3, pc}
 80061d2:	f06f 0002 	mvn.w	r0, #2
 80061d6:	bd08      	pop	{r3, pc}
 80061d8:	f06f 0002 	mvn.w	r0, #2
 80061dc:	4770      	bx	lr
 80061de:	bf00      	nop

080061e0 <strcmp>:
 80061e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80061e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80061e8:	2a01      	cmp	r2, #1
 80061ea:	bf28      	it	cs
 80061ec:	429a      	cmpcs	r2, r3
 80061ee:	d0f7      	beq.n	80061e0 <strcmp>
 80061f0:	1ad0      	subs	r0, r2, r3
 80061f2:	4770      	bx	lr
	...

08006200 <memchr>:
 8006200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8006204:	2a10      	cmp	r2, #16
 8006206:	db2b      	blt.n	8006260 <memchr+0x60>
 8006208:	f010 0f07 	tst.w	r0, #7
 800620c:	d008      	beq.n	8006220 <memchr+0x20>
 800620e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8006212:	3a01      	subs	r2, #1
 8006214:	428b      	cmp	r3, r1
 8006216:	d02d      	beq.n	8006274 <memchr+0x74>
 8006218:	f010 0f07 	tst.w	r0, #7
 800621c:	b342      	cbz	r2, 8006270 <memchr+0x70>
 800621e:	d1f6      	bne.n	800620e <memchr+0xe>
 8006220:	b4f0      	push	{r4, r5, r6, r7}
 8006222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8006226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800622a:	f022 0407 	bic.w	r4, r2, #7
 800622e:	f07f 0700 	mvns.w	r7, #0
 8006232:	2300      	movs	r3, #0
 8006234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8006238:	3c08      	subs	r4, #8
 800623a:	ea85 0501 	eor.w	r5, r5, r1
 800623e:	ea86 0601 	eor.w	r6, r6, r1
 8006242:	fa85 f547 	uadd8	r5, r5, r7
 8006246:	faa3 f587 	sel	r5, r3, r7
 800624a:	fa86 f647 	uadd8	r6, r6, r7
 800624e:	faa5 f687 	sel	r6, r5, r7
 8006252:	b98e      	cbnz	r6, 8006278 <memchr+0x78>
 8006254:	d1ee      	bne.n	8006234 <memchr+0x34>
 8006256:	bcf0      	pop	{r4, r5, r6, r7}
 8006258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800625c:	f002 0207 	and.w	r2, r2, #7
 8006260:	b132      	cbz	r2, 8006270 <memchr+0x70>
 8006262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8006266:	3a01      	subs	r2, #1
 8006268:	ea83 0301 	eor.w	r3, r3, r1
 800626c:	b113      	cbz	r3, 8006274 <memchr+0x74>
 800626e:	d1f8      	bne.n	8006262 <memchr+0x62>
 8006270:	2000      	movs	r0, #0
 8006272:	4770      	bx	lr
 8006274:	3801      	subs	r0, #1
 8006276:	4770      	bx	lr
 8006278:	2d00      	cmp	r5, #0
 800627a:	bf06      	itte	eq
 800627c:	4635      	moveq	r5, r6
 800627e:	3803      	subeq	r0, #3
 8006280:	3807      	subne	r0, #7
 8006282:	f015 0f01 	tst.w	r5, #1
 8006286:	d107      	bne.n	8006298 <memchr+0x98>
 8006288:	3001      	adds	r0, #1
 800628a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800628e:	bf02      	ittt	eq
 8006290:	3001      	addeq	r0, #1
 8006292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8006296:	3001      	addeq	r0, #1
 8006298:	bcf0      	pop	{r4, r5, r6, r7}
 800629a:	3801      	subs	r0, #1
 800629c:	4770      	bx	lr
 800629e:	bf00      	nop

080062a0 <strlen>:
 80062a0:	4603      	mov	r3, r0
 80062a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80062a6:	2a00      	cmp	r2, #0
 80062a8:	d1fb      	bne.n	80062a2 <strlen+0x2>
 80062aa:	1a18      	subs	r0, r3, r0
 80062ac:	3801      	subs	r0, #1
 80062ae:	4770      	bx	lr

080062b0 <__aeabi_drsub>:
 80062b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80062b4:	e002      	b.n	80062bc <__adddf3>
 80062b6:	bf00      	nop

080062b8 <__aeabi_dsub>:
 80062b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080062bc <__adddf3>:
 80062bc:	b530      	push	{r4, r5, lr}
 80062be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80062c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80062c6:	ea94 0f05 	teq	r4, r5
 80062ca:	bf08      	it	eq
 80062cc:	ea90 0f02 	teqeq	r0, r2
 80062d0:	bf1f      	itttt	ne
 80062d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80062d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80062da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80062de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80062e2:	f000 80e2 	beq.w	80064aa <__adddf3+0x1ee>
 80062e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80062ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80062ee:	bfb8      	it	lt
 80062f0:	426d      	neglt	r5, r5
 80062f2:	dd0c      	ble.n	800630e <__adddf3+0x52>
 80062f4:	442c      	add	r4, r5
 80062f6:	ea80 0202 	eor.w	r2, r0, r2
 80062fa:	ea81 0303 	eor.w	r3, r1, r3
 80062fe:	ea82 0000 	eor.w	r0, r2, r0
 8006302:	ea83 0101 	eor.w	r1, r3, r1
 8006306:	ea80 0202 	eor.w	r2, r0, r2
 800630a:	ea81 0303 	eor.w	r3, r1, r3
 800630e:	2d36      	cmp	r5, #54	@ 0x36
 8006310:	bf88      	it	hi
 8006312:	bd30      	pophi	{r4, r5, pc}
 8006314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8006318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800631c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8006320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8006324:	d002      	beq.n	800632c <__adddf3+0x70>
 8006326:	4240      	negs	r0, r0
 8006328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800632c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8006330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8006334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8006338:	d002      	beq.n	8006340 <__adddf3+0x84>
 800633a:	4252      	negs	r2, r2
 800633c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8006340:	ea94 0f05 	teq	r4, r5
 8006344:	f000 80a7 	beq.w	8006496 <__adddf3+0x1da>
 8006348:	f1a4 0401 	sub.w	r4, r4, #1
 800634c:	f1d5 0e20 	rsbs	lr, r5, #32
 8006350:	db0d      	blt.n	800636e <__adddf3+0xb2>
 8006352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8006356:	fa22 f205 	lsr.w	r2, r2, r5
 800635a:	1880      	adds	r0, r0, r2
 800635c:	f141 0100 	adc.w	r1, r1, #0
 8006360:	fa03 f20e 	lsl.w	r2, r3, lr
 8006364:	1880      	adds	r0, r0, r2
 8006366:	fa43 f305 	asr.w	r3, r3, r5
 800636a:	4159      	adcs	r1, r3
 800636c:	e00e      	b.n	800638c <__adddf3+0xd0>
 800636e:	f1a5 0520 	sub.w	r5, r5, #32
 8006372:	f10e 0e20 	add.w	lr, lr, #32
 8006376:	2a01      	cmp	r2, #1
 8006378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800637c:	bf28      	it	cs
 800637e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8006382:	fa43 f305 	asr.w	r3, r3, r5
 8006386:	18c0      	adds	r0, r0, r3
 8006388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800638c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8006390:	d507      	bpl.n	80063a2 <__adddf3+0xe6>
 8006392:	f04f 0e00 	mov.w	lr, #0
 8006396:	f1dc 0c00 	rsbs	ip, ip, #0
 800639a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800639e:	eb6e 0101 	sbc.w	r1, lr, r1
 80063a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80063a6:	d31b      	bcc.n	80063e0 <__adddf3+0x124>
 80063a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80063ac:	d30c      	bcc.n	80063c8 <__adddf3+0x10c>
 80063ae:	0849      	lsrs	r1, r1, #1
 80063b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80063b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80063b8:	f104 0401 	add.w	r4, r4, #1
 80063bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80063c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80063c4:	f080 809a 	bcs.w	80064fc <__adddf3+0x240>
 80063c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80063cc:	bf08      	it	eq
 80063ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80063d2:	f150 0000 	adcs.w	r0, r0, #0
 80063d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80063da:	ea41 0105 	orr.w	r1, r1, r5
 80063de:	bd30      	pop	{r4, r5, pc}
 80063e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80063e4:	4140      	adcs	r0, r0
 80063e6:	eb41 0101 	adc.w	r1, r1, r1
 80063ea:	3c01      	subs	r4, #1
 80063ec:	bf28      	it	cs
 80063ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80063f2:	d2e9      	bcs.n	80063c8 <__adddf3+0x10c>
 80063f4:	f091 0f00 	teq	r1, #0
 80063f8:	bf04      	itt	eq
 80063fa:	4601      	moveq	r1, r0
 80063fc:	2000      	moveq	r0, #0
 80063fe:	fab1 f381 	clz	r3, r1
 8006402:	bf08      	it	eq
 8006404:	3320      	addeq	r3, #32
 8006406:	f1a3 030b 	sub.w	r3, r3, #11
 800640a:	f1b3 0220 	subs.w	r2, r3, #32
 800640e:	da0c      	bge.n	800642a <__adddf3+0x16e>
 8006410:	320c      	adds	r2, #12
 8006412:	dd08      	ble.n	8006426 <__adddf3+0x16a>
 8006414:	f102 0c14 	add.w	ip, r2, #20
 8006418:	f1c2 020c 	rsb	r2, r2, #12
 800641c:	fa01 f00c 	lsl.w	r0, r1, ip
 8006420:	fa21 f102 	lsr.w	r1, r1, r2
 8006424:	e00c      	b.n	8006440 <__adddf3+0x184>
 8006426:	f102 0214 	add.w	r2, r2, #20
 800642a:	bfd8      	it	le
 800642c:	f1c2 0c20 	rsble	ip, r2, #32
 8006430:	fa01 f102 	lsl.w	r1, r1, r2
 8006434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8006438:	bfdc      	itt	le
 800643a:	ea41 010c 	orrle.w	r1, r1, ip
 800643e:	4090      	lslle	r0, r2
 8006440:	1ae4      	subs	r4, r4, r3
 8006442:	bfa2      	ittt	ge
 8006444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8006448:	4329      	orrge	r1, r5
 800644a:	bd30      	popge	{r4, r5, pc}
 800644c:	ea6f 0404 	mvn.w	r4, r4
 8006450:	3c1f      	subs	r4, #31
 8006452:	da1c      	bge.n	800648e <__adddf3+0x1d2>
 8006454:	340c      	adds	r4, #12
 8006456:	dc0e      	bgt.n	8006476 <__adddf3+0x1ba>
 8006458:	f104 0414 	add.w	r4, r4, #20
 800645c:	f1c4 0220 	rsb	r2, r4, #32
 8006460:	fa20 f004 	lsr.w	r0, r0, r4
 8006464:	fa01 f302 	lsl.w	r3, r1, r2
 8006468:	ea40 0003 	orr.w	r0, r0, r3
 800646c:	fa21 f304 	lsr.w	r3, r1, r4
 8006470:	ea45 0103 	orr.w	r1, r5, r3
 8006474:	bd30      	pop	{r4, r5, pc}
 8006476:	f1c4 040c 	rsb	r4, r4, #12
 800647a:	f1c4 0220 	rsb	r2, r4, #32
 800647e:	fa20 f002 	lsr.w	r0, r0, r2
 8006482:	fa01 f304 	lsl.w	r3, r1, r4
 8006486:	ea40 0003 	orr.w	r0, r0, r3
 800648a:	4629      	mov	r1, r5
 800648c:	bd30      	pop	{r4, r5, pc}
 800648e:	fa21 f004 	lsr.w	r0, r1, r4
 8006492:	4629      	mov	r1, r5
 8006494:	bd30      	pop	{r4, r5, pc}
 8006496:	f094 0f00 	teq	r4, #0
 800649a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800649e:	bf06      	itte	eq
 80064a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80064a4:	3401      	addeq	r4, #1
 80064a6:	3d01      	subne	r5, #1
 80064a8:	e74e      	b.n	8006348 <__adddf3+0x8c>
 80064aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80064ae:	bf18      	it	ne
 80064b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80064b4:	d029      	beq.n	800650a <__adddf3+0x24e>
 80064b6:	ea94 0f05 	teq	r4, r5
 80064ba:	bf08      	it	eq
 80064bc:	ea90 0f02 	teqeq	r0, r2
 80064c0:	d005      	beq.n	80064ce <__adddf3+0x212>
 80064c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80064c6:	bf04      	itt	eq
 80064c8:	4619      	moveq	r1, r3
 80064ca:	4610      	moveq	r0, r2
 80064cc:	bd30      	pop	{r4, r5, pc}
 80064ce:	ea91 0f03 	teq	r1, r3
 80064d2:	bf1e      	ittt	ne
 80064d4:	2100      	movne	r1, #0
 80064d6:	2000      	movne	r0, #0
 80064d8:	bd30      	popne	{r4, r5, pc}
 80064da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80064de:	d105      	bne.n	80064ec <__adddf3+0x230>
 80064e0:	0040      	lsls	r0, r0, #1
 80064e2:	4149      	adcs	r1, r1
 80064e4:	bf28      	it	cs
 80064e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80064ea:	bd30      	pop	{r4, r5, pc}
 80064ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80064f0:	bf3c      	itt	cc
 80064f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80064f6:	bd30      	popcc	{r4, r5, pc}
 80064f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80064fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8006500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8006504:	f04f 0000 	mov.w	r0, #0
 8006508:	bd30      	pop	{r4, r5, pc}
 800650a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800650e:	bf1a      	itte	ne
 8006510:	4619      	movne	r1, r3
 8006512:	4610      	movne	r0, r2
 8006514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8006518:	bf1c      	itt	ne
 800651a:	460b      	movne	r3, r1
 800651c:	4602      	movne	r2, r0
 800651e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8006522:	bf06      	itte	eq
 8006524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8006528:	ea91 0f03 	teqeq	r1, r3
 800652c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8006530:	bd30      	pop	{r4, r5, pc}
 8006532:	bf00      	nop

08006534 <__aeabi_ui2d>:
 8006534:	f090 0f00 	teq	r0, #0
 8006538:	bf04      	itt	eq
 800653a:	2100      	moveq	r1, #0
 800653c:	4770      	bxeq	lr
 800653e:	b530      	push	{r4, r5, lr}
 8006540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8006544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8006548:	f04f 0500 	mov.w	r5, #0
 800654c:	f04f 0100 	mov.w	r1, #0
 8006550:	e750      	b.n	80063f4 <__adddf3+0x138>
 8006552:	bf00      	nop

08006554 <__aeabi_i2d>:
 8006554:	f090 0f00 	teq	r0, #0
 8006558:	bf04      	itt	eq
 800655a:	2100      	moveq	r1, #0
 800655c:	4770      	bxeq	lr
 800655e:	b530      	push	{r4, r5, lr}
 8006560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8006564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8006568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800656c:	bf48      	it	mi
 800656e:	4240      	negmi	r0, r0
 8006570:	f04f 0100 	mov.w	r1, #0
 8006574:	e73e      	b.n	80063f4 <__adddf3+0x138>
 8006576:	bf00      	nop

08006578 <__aeabi_f2d>:
 8006578:	0042      	lsls	r2, r0, #1
 800657a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800657e:	ea4f 0131 	mov.w	r1, r1, rrx
 8006582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8006586:	bf1f      	itttt	ne
 8006588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800658c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8006590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8006594:	4770      	bxne	lr
 8006596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800659a:	bf08      	it	eq
 800659c:	4770      	bxeq	lr
 800659e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80065a2:	bf04      	itt	eq
 80065a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80065a8:	4770      	bxeq	lr
 80065aa:	b530      	push	{r4, r5, lr}
 80065ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80065b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80065b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80065b8:	e71c      	b.n	80063f4 <__adddf3+0x138>
 80065ba:	bf00      	nop

080065bc <__aeabi_ul2d>:
 80065bc:	ea50 0201 	orrs.w	r2, r0, r1
 80065c0:	bf08      	it	eq
 80065c2:	4770      	bxeq	lr
 80065c4:	b530      	push	{r4, r5, lr}
 80065c6:	f04f 0500 	mov.w	r5, #0
 80065ca:	e00a      	b.n	80065e2 <__aeabi_l2d+0x16>

080065cc <__aeabi_l2d>:
 80065cc:	ea50 0201 	orrs.w	r2, r0, r1
 80065d0:	bf08      	it	eq
 80065d2:	4770      	bxeq	lr
 80065d4:	b530      	push	{r4, r5, lr}
 80065d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80065da:	d502      	bpl.n	80065e2 <__aeabi_l2d+0x16>
 80065dc:	4240      	negs	r0, r0
 80065de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80065e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80065e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80065ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80065ee:	f43f aed8 	beq.w	80063a2 <__adddf3+0xe6>
 80065f2:	f04f 0203 	mov.w	r2, #3
 80065f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80065fa:	bf18      	it	ne
 80065fc:	3203      	addne	r2, #3
 80065fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8006602:	bf18      	it	ne
 8006604:	3203      	addne	r2, #3
 8006606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800660a:	f1c2 0320 	rsb	r3, r2, #32
 800660e:	fa00 fc03 	lsl.w	ip, r0, r3
 8006612:	fa20 f002 	lsr.w	r0, r0, r2
 8006616:	fa01 fe03 	lsl.w	lr, r1, r3
 800661a:	ea40 000e 	orr.w	r0, r0, lr
 800661e:	fa21 f102 	lsr.w	r1, r1, r2
 8006622:	4414      	add	r4, r2
 8006624:	e6bd      	b.n	80063a2 <__adddf3+0xe6>
 8006626:	bf00      	nop

08006628 <__aeabi_dmul>:
 8006628:	b570      	push	{r4, r5, r6, lr}
 800662a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800662e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8006632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8006636:	bf1d      	ittte	ne
 8006638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800663c:	ea94 0f0c 	teqne	r4, ip
 8006640:	ea95 0f0c 	teqne	r5, ip
 8006644:	f000 f8de 	bleq	8006804 <__aeabi_dmul+0x1dc>
 8006648:	442c      	add	r4, r5
 800664a:	ea81 0603 	eor.w	r6, r1, r3
 800664e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8006652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8006656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800665a:	bf18      	it	ne
 800665c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8006660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8006664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006668:	d038      	beq.n	80066dc <__aeabi_dmul+0xb4>
 800666a:	fba0 ce02 	umull	ip, lr, r0, r2
 800666e:	f04f 0500 	mov.w	r5, #0
 8006672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8006676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800667a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800667e:	f04f 0600 	mov.w	r6, #0
 8006682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8006686:	f09c 0f00 	teq	ip, #0
 800668a:	bf18      	it	ne
 800668c:	f04e 0e01 	orrne.w	lr, lr, #1
 8006690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8006694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8006698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800669c:	d204      	bcs.n	80066a8 <__aeabi_dmul+0x80>
 800669e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80066a2:	416d      	adcs	r5, r5
 80066a4:	eb46 0606 	adc.w	r6, r6, r6
 80066a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80066ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80066b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80066b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80066b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80066bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80066c0:	bf88      	it	hi
 80066c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80066c6:	d81e      	bhi.n	8006706 <__aeabi_dmul+0xde>
 80066c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80066cc:	bf08      	it	eq
 80066ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80066d2:	f150 0000 	adcs.w	r0, r0, #0
 80066d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80066da:	bd70      	pop	{r4, r5, r6, pc}
 80066dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80066e0:	ea46 0101 	orr.w	r1, r6, r1
 80066e4:	ea40 0002 	orr.w	r0, r0, r2
 80066e8:	ea81 0103 	eor.w	r1, r1, r3
 80066ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80066f0:	bfc2      	ittt	gt
 80066f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80066f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80066fa:	bd70      	popgt	{r4, r5, r6, pc}
 80066fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8006700:	f04f 0e00 	mov.w	lr, #0
 8006704:	3c01      	subs	r4, #1
 8006706:	f300 80ab 	bgt.w	8006860 <__aeabi_dmul+0x238>
 800670a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800670e:	bfde      	ittt	le
 8006710:	2000      	movle	r0, #0
 8006712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8006716:	bd70      	pople	{r4, r5, r6, pc}
 8006718:	f1c4 0400 	rsb	r4, r4, #0
 800671c:	3c20      	subs	r4, #32
 800671e:	da35      	bge.n	800678c <__aeabi_dmul+0x164>
 8006720:	340c      	adds	r4, #12
 8006722:	dc1b      	bgt.n	800675c <__aeabi_dmul+0x134>
 8006724:	f104 0414 	add.w	r4, r4, #20
 8006728:	f1c4 0520 	rsb	r5, r4, #32
 800672c:	fa00 f305 	lsl.w	r3, r0, r5
 8006730:	fa20 f004 	lsr.w	r0, r0, r4
 8006734:	fa01 f205 	lsl.w	r2, r1, r5
 8006738:	ea40 0002 	orr.w	r0, r0, r2
 800673c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8006740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8006744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8006748:	fa21 f604 	lsr.w	r6, r1, r4
 800674c:	eb42 0106 	adc.w	r1, r2, r6
 8006750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8006754:	bf08      	it	eq
 8006756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800675a:	bd70      	pop	{r4, r5, r6, pc}
 800675c:	f1c4 040c 	rsb	r4, r4, #12
 8006760:	f1c4 0520 	rsb	r5, r4, #32
 8006764:	fa00 f304 	lsl.w	r3, r0, r4
 8006768:	fa20 f005 	lsr.w	r0, r0, r5
 800676c:	fa01 f204 	lsl.w	r2, r1, r4
 8006770:	ea40 0002 	orr.w	r0, r0, r2
 8006774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8006778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800677c:	f141 0100 	adc.w	r1, r1, #0
 8006780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8006784:	bf08      	it	eq
 8006786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800678a:	bd70      	pop	{r4, r5, r6, pc}
 800678c:	f1c4 0520 	rsb	r5, r4, #32
 8006790:	fa00 f205 	lsl.w	r2, r0, r5
 8006794:	ea4e 0e02 	orr.w	lr, lr, r2
 8006798:	fa20 f304 	lsr.w	r3, r0, r4
 800679c:	fa01 f205 	lsl.w	r2, r1, r5
 80067a0:	ea43 0302 	orr.w	r3, r3, r2
 80067a4:	fa21 f004 	lsr.w	r0, r1, r4
 80067a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80067ac:	fa21 f204 	lsr.w	r2, r1, r4
 80067b0:	ea20 0002 	bic.w	r0, r0, r2
 80067b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80067b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80067bc:	bf08      	it	eq
 80067be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80067c2:	bd70      	pop	{r4, r5, r6, pc}
 80067c4:	f094 0f00 	teq	r4, #0
 80067c8:	d10f      	bne.n	80067ea <__aeabi_dmul+0x1c2>
 80067ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80067ce:	0040      	lsls	r0, r0, #1
 80067d0:	eb41 0101 	adc.w	r1, r1, r1
 80067d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80067d8:	bf08      	it	eq
 80067da:	3c01      	subeq	r4, #1
 80067dc:	d0f7      	beq.n	80067ce <__aeabi_dmul+0x1a6>
 80067de:	ea41 0106 	orr.w	r1, r1, r6
 80067e2:	f095 0f00 	teq	r5, #0
 80067e6:	bf18      	it	ne
 80067e8:	4770      	bxne	lr
 80067ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80067ee:	0052      	lsls	r2, r2, #1
 80067f0:	eb43 0303 	adc.w	r3, r3, r3
 80067f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80067f8:	bf08      	it	eq
 80067fa:	3d01      	subeq	r5, #1
 80067fc:	d0f7      	beq.n	80067ee <__aeabi_dmul+0x1c6>
 80067fe:	ea43 0306 	orr.w	r3, r3, r6
 8006802:	4770      	bx	lr
 8006804:	ea94 0f0c 	teq	r4, ip
 8006808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800680c:	bf18      	it	ne
 800680e:	ea95 0f0c 	teqne	r5, ip
 8006812:	d00c      	beq.n	800682e <__aeabi_dmul+0x206>
 8006814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8006818:	bf18      	it	ne
 800681a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800681e:	d1d1      	bne.n	80067c4 <__aeabi_dmul+0x19c>
 8006820:	ea81 0103 	eor.w	r1, r1, r3
 8006824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8006828:	f04f 0000 	mov.w	r0, #0
 800682c:	bd70      	pop	{r4, r5, r6, pc}
 800682e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8006832:	bf06      	itte	eq
 8006834:	4610      	moveq	r0, r2
 8006836:	4619      	moveq	r1, r3
 8006838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800683c:	d019      	beq.n	8006872 <__aeabi_dmul+0x24a>
 800683e:	ea94 0f0c 	teq	r4, ip
 8006842:	d102      	bne.n	800684a <__aeabi_dmul+0x222>
 8006844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8006848:	d113      	bne.n	8006872 <__aeabi_dmul+0x24a>
 800684a:	ea95 0f0c 	teq	r5, ip
 800684e:	d105      	bne.n	800685c <__aeabi_dmul+0x234>
 8006850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8006854:	bf1c      	itt	ne
 8006856:	4610      	movne	r0, r2
 8006858:	4619      	movne	r1, r3
 800685a:	d10a      	bne.n	8006872 <__aeabi_dmul+0x24a>
 800685c:	ea81 0103 	eor.w	r1, r1, r3
 8006860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8006864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8006868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800686c:	f04f 0000 	mov.w	r0, #0
 8006870:	bd70      	pop	{r4, r5, r6, pc}
 8006872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8006876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800687a:	bd70      	pop	{r4, r5, r6, pc}

0800687c <__aeabi_ddiv>:
 800687c:	b570      	push	{r4, r5, r6, lr}
 800687e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8006882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8006886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800688a:	bf1d      	ittte	ne
 800688c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8006890:	ea94 0f0c 	teqne	r4, ip
 8006894:	ea95 0f0c 	teqne	r5, ip
 8006898:	f000 f8a7 	bleq	80069ea <__aeabi_ddiv+0x16e>
 800689c:	eba4 0405 	sub.w	r4, r4, r5
 80068a0:	ea81 0e03 	eor.w	lr, r1, r3
 80068a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80068a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80068ac:	f000 8088 	beq.w	80069c0 <__aeabi_ddiv+0x144>
 80068b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80068b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80068b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80068bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80068c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80068c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80068c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80068cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80068d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80068d4:	429d      	cmp	r5, r3
 80068d6:	bf08      	it	eq
 80068d8:	4296      	cmpeq	r6, r2
 80068da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80068de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80068e2:	d202      	bcs.n	80068ea <__aeabi_ddiv+0x6e>
 80068e4:	085b      	lsrs	r3, r3, #1
 80068e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80068ea:	1ab6      	subs	r6, r6, r2
 80068ec:	eb65 0503 	sbc.w	r5, r5, r3
 80068f0:	085b      	lsrs	r3, r3, #1
 80068f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80068f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80068fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80068fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8006902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8006906:	bf22      	ittt	cs
 8006908:	1ab6      	subcs	r6, r6, r2
 800690a:	4675      	movcs	r5, lr
 800690c:	ea40 000c 	orrcs.w	r0, r0, ip
 8006910:	085b      	lsrs	r3, r3, #1
 8006912:	ea4f 0232 	mov.w	r2, r2, rrx
 8006916:	ebb6 0e02 	subs.w	lr, r6, r2
 800691a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800691e:	bf22      	ittt	cs
 8006920:	1ab6      	subcs	r6, r6, r2
 8006922:	4675      	movcs	r5, lr
 8006924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8006928:	085b      	lsrs	r3, r3, #1
 800692a:	ea4f 0232 	mov.w	r2, r2, rrx
 800692e:	ebb6 0e02 	subs.w	lr, r6, r2
 8006932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8006936:	bf22      	ittt	cs
 8006938:	1ab6      	subcs	r6, r6, r2
 800693a:	4675      	movcs	r5, lr
 800693c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8006940:	085b      	lsrs	r3, r3, #1
 8006942:	ea4f 0232 	mov.w	r2, r2, rrx
 8006946:	ebb6 0e02 	subs.w	lr, r6, r2
 800694a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800694e:	bf22      	ittt	cs
 8006950:	1ab6      	subcs	r6, r6, r2
 8006952:	4675      	movcs	r5, lr
 8006954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8006958:	ea55 0e06 	orrs.w	lr, r5, r6
 800695c:	d018      	beq.n	8006990 <__aeabi_ddiv+0x114>
 800695e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8006962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8006966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800696a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800696e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8006972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8006976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800697a:	d1c0      	bne.n	80068fe <__aeabi_ddiv+0x82>
 800697c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8006980:	d10b      	bne.n	800699a <__aeabi_ddiv+0x11e>
 8006982:	ea41 0100 	orr.w	r1, r1, r0
 8006986:	f04f 0000 	mov.w	r0, #0
 800698a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800698e:	e7b6      	b.n	80068fe <__aeabi_ddiv+0x82>
 8006990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8006994:	bf04      	itt	eq
 8006996:	4301      	orreq	r1, r0
 8006998:	2000      	moveq	r0, #0
 800699a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800699e:	bf88      	it	hi
 80069a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80069a4:	f63f aeaf 	bhi.w	8006706 <__aeabi_dmul+0xde>
 80069a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80069ac:	bf04      	itt	eq
 80069ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80069b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80069b6:	f150 0000 	adcs.w	r0, r0, #0
 80069ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80069be:	bd70      	pop	{r4, r5, r6, pc}
 80069c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80069c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80069c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80069cc:	bfc2      	ittt	gt
 80069ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80069d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80069d6:	bd70      	popgt	{r4, r5, r6, pc}
 80069d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80069dc:	f04f 0e00 	mov.w	lr, #0
 80069e0:	3c01      	subs	r4, #1
 80069e2:	e690      	b.n	8006706 <__aeabi_dmul+0xde>
 80069e4:	ea45 0e06 	orr.w	lr, r5, r6
 80069e8:	e68d      	b.n	8006706 <__aeabi_dmul+0xde>
 80069ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80069ee:	ea94 0f0c 	teq	r4, ip
 80069f2:	bf08      	it	eq
 80069f4:	ea95 0f0c 	teqeq	r5, ip
 80069f8:	f43f af3b 	beq.w	8006872 <__aeabi_dmul+0x24a>
 80069fc:	ea94 0f0c 	teq	r4, ip
 8006a00:	d10a      	bne.n	8006a18 <__aeabi_ddiv+0x19c>
 8006a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8006a06:	f47f af34 	bne.w	8006872 <__aeabi_dmul+0x24a>
 8006a0a:	ea95 0f0c 	teq	r5, ip
 8006a0e:	f47f af25 	bne.w	800685c <__aeabi_dmul+0x234>
 8006a12:	4610      	mov	r0, r2
 8006a14:	4619      	mov	r1, r3
 8006a16:	e72c      	b.n	8006872 <__aeabi_dmul+0x24a>
 8006a18:	ea95 0f0c 	teq	r5, ip
 8006a1c:	d106      	bne.n	8006a2c <__aeabi_ddiv+0x1b0>
 8006a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8006a22:	f43f aefd 	beq.w	8006820 <__aeabi_dmul+0x1f8>
 8006a26:	4610      	mov	r0, r2
 8006a28:	4619      	mov	r1, r3
 8006a2a:	e722      	b.n	8006872 <__aeabi_dmul+0x24a>
 8006a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8006a30:	bf18      	it	ne
 8006a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8006a36:	f47f aec5 	bne.w	80067c4 <__aeabi_dmul+0x19c>
 8006a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8006a3e:	f47f af0d 	bne.w	800685c <__aeabi_dmul+0x234>
 8006a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8006a46:	f47f aeeb 	bne.w	8006820 <__aeabi_dmul+0x1f8>
 8006a4a:	e712      	b.n	8006872 <__aeabi_dmul+0x24a>

08006a4c <__gedf2>:
 8006a4c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8006a50:	e006      	b.n	8006a60 <__cmpdf2+0x4>
 8006a52:	bf00      	nop

08006a54 <__ledf2>:
 8006a54:	f04f 0c01 	mov.w	ip, #1
 8006a58:	e002      	b.n	8006a60 <__cmpdf2+0x4>
 8006a5a:	bf00      	nop

08006a5c <__cmpdf2>:
 8006a5c:	f04f 0c01 	mov.w	ip, #1
 8006a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8006a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8006a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8006a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8006a70:	bf18      	it	ne
 8006a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8006a76:	d01b      	beq.n	8006ab0 <__cmpdf2+0x54>
 8006a78:	b001      	add	sp, #4
 8006a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8006a7e:	bf0c      	ite	eq
 8006a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8006a84:	ea91 0f03 	teqne	r1, r3
 8006a88:	bf02      	ittt	eq
 8006a8a:	ea90 0f02 	teqeq	r0, r2
 8006a8e:	2000      	moveq	r0, #0
 8006a90:	4770      	bxeq	lr
 8006a92:	f110 0f00 	cmn.w	r0, #0
 8006a96:	ea91 0f03 	teq	r1, r3
 8006a9a:	bf58      	it	pl
 8006a9c:	4299      	cmppl	r1, r3
 8006a9e:	bf08      	it	eq
 8006aa0:	4290      	cmpeq	r0, r2
 8006aa2:	bf2c      	ite	cs
 8006aa4:	17d8      	asrcs	r0, r3, #31
 8006aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8006aaa:	f040 0001 	orr.w	r0, r0, #1
 8006aae:	4770      	bx	lr
 8006ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8006ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8006ab8:	d102      	bne.n	8006ac0 <__cmpdf2+0x64>
 8006aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8006abe:	d107      	bne.n	8006ad0 <__cmpdf2+0x74>
 8006ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8006ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8006ac8:	d1d6      	bne.n	8006a78 <__cmpdf2+0x1c>
 8006aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8006ace:	d0d3      	beq.n	8006a78 <__cmpdf2+0x1c>
 8006ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8006ad4:	4770      	bx	lr
 8006ad6:	bf00      	nop

08006ad8 <__aeabi_cdrcmple>:
 8006ad8:	4684      	mov	ip, r0
 8006ada:	4610      	mov	r0, r2
 8006adc:	4662      	mov	r2, ip
 8006ade:	468c      	mov	ip, r1
 8006ae0:	4619      	mov	r1, r3
 8006ae2:	4663      	mov	r3, ip
 8006ae4:	e000      	b.n	8006ae8 <__aeabi_cdcmpeq>
 8006ae6:	bf00      	nop

08006ae8 <__aeabi_cdcmpeq>:
 8006ae8:	b501      	push	{r0, lr}
 8006aea:	f7ff ffb7 	bl	8006a5c <__cmpdf2>
 8006aee:	2800      	cmp	r0, #0
 8006af0:	bf48      	it	mi
 8006af2:	f110 0f00 	cmnmi.w	r0, #0
 8006af6:	bd01      	pop	{r0, pc}

08006af8 <__aeabi_dcmpeq>:
 8006af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8006afc:	f7ff fff4 	bl	8006ae8 <__aeabi_cdcmpeq>
 8006b00:	bf0c      	ite	eq
 8006b02:	2001      	moveq	r0, #1
 8006b04:	2000      	movne	r0, #0
 8006b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8006b0a:	bf00      	nop

08006b0c <__aeabi_dcmplt>:
 8006b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8006b10:	f7ff ffea 	bl	8006ae8 <__aeabi_cdcmpeq>
 8006b14:	bf34      	ite	cc
 8006b16:	2001      	movcc	r0, #1
 8006b18:	2000      	movcs	r0, #0
 8006b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8006b1e:	bf00      	nop

08006b20 <__aeabi_dcmple>:
 8006b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8006b24:	f7ff ffe0 	bl	8006ae8 <__aeabi_cdcmpeq>
 8006b28:	bf94      	ite	ls
 8006b2a:	2001      	movls	r0, #1
 8006b2c:	2000      	movhi	r0, #0
 8006b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8006b32:	bf00      	nop

08006b34 <__aeabi_dcmpge>:
 8006b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8006b38:	f7ff ffce 	bl	8006ad8 <__aeabi_cdrcmple>
 8006b3c:	bf94      	ite	ls
 8006b3e:	2001      	movls	r0, #1
 8006b40:	2000      	movhi	r0, #0
 8006b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8006b46:	bf00      	nop

08006b48 <__aeabi_dcmpgt>:
 8006b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8006b4c:	f7ff ffc4 	bl	8006ad8 <__aeabi_cdrcmple>
 8006b50:	bf34      	ite	cc
 8006b52:	2001      	movcc	r0, #1
 8006b54:	2000      	movcs	r0, #0
 8006b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8006b5a:	bf00      	nop

08006b5c <__aeabi_dcmpun>:
 8006b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8006b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8006b64:	d102      	bne.n	8006b6c <__aeabi_dcmpun+0x10>
 8006b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8006b6a:	d10a      	bne.n	8006b82 <__aeabi_dcmpun+0x26>
 8006b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8006b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8006b74:	d102      	bne.n	8006b7c <__aeabi_dcmpun+0x20>
 8006b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8006b7a:	d102      	bne.n	8006b82 <__aeabi_dcmpun+0x26>
 8006b7c:	f04f 0000 	mov.w	r0, #0
 8006b80:	4770      	bx	lr
 8006b82:	f04f 0001 	mov.w	r0, #1
 8006b86:	4770      	bx	lr

08006b88 <__aeabi_d2iz>:
 8006b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8006b8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8006b90:	d215      	bcs.n	8006bbe <__aeabi_d2iz+0x36>
 8006b92:	d511      	bpl.n	8006bb8 <__aeabi_d2iz+0x30>
 8006b94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8006b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8006b9c:	d912      	bls.n	8006bc4 <__aeabi_d2iz+0x3c>
 8006b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8006ba2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8006baa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8006bae:	fa23 f002 	lsr.w	r0, r3, r2
 8006bb2:	bf18      	it	ne
 8006bb4:	4240      	negne	r0, r0
 8006bb6:	4770      	bx	lr
 8006bb8:	f04f 0000 	mov.w	r0, #0
 8006bbc:	4770      	bx	lr
 8006bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8006bc2:	d105      	bne.n	8006bd0 <__aeabi_d2iz+0x48>
 8006bc4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8006bc8:	bf08      	it	eq
 8006bca:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8006bce:	4770      	bx	lr
 8006bd0:	f04f 0000 	mov.w	r0, #0
 8006bd4:	4770      	bx	lr
 8006bd6:	bf00      	nop

08006bd8 <__aeabi_d2f>:
 8006bd8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8006bdc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8006be0:	bf24      	itt	cs
 8006be2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8006be6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8006bea:	d90d      	bls.n	8006c08 <__aeabi_d2f+0x30>
 8006bec:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8006bf0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8006bf4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8006bf8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8006bfc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8006c00:	bf08      	it	eq
 8006c02:	f020 0001 	biceq.w	r0, r0, #1
 8006c06:	4770      	bx	lr
 8006c08:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8006c0c:	d121      	bne.n	8006c52 <__aeabi_d2f+0x7a>
 8006c0e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8006c12:	bfbc      	itt	lt
 8006c14:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8006c18:	4770      	bxlt	lr
 8006c1a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8006c1e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8006c22:	f1c2 0218 	rsb	r2, r2, #24
 8006c26:	f1c2 0c20 	rsb	ip, r2, #32
 8006c2a:	fa10 f30c 	lsls.w	r3, r0, ip
 8006c2e:	fa20 f002 	lsr.w	r0, r0, r2
 8006c32:	bf18      	it	ne
 8006c34:	f040 0001 	orrne.w	r0, r0, #1
 8006c38:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8006c3c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8006c40:	fa03 fc0c 	lsl.w	ip, r3, ip
 8006c44:	ea40 000c 	orr.w	r0, r0, ip
 8006c48:	fa23 f302 	lsr.w	r3, r3, r2
 8006c4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006c50:	e7cc      	b.n	8006bec <__aeabi_d2f+0x14>
 8006c52:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8006c56:	d107      	bne.n	8006c68 <__aeabi_d2f+0x90>
 8006c58:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8006c5c:	bf1e      	ittt	ne
 8006c5e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8006c62:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8006c66:	4770      	bxne	lr
 8006c68:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8006c6c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8006c70:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8006c74:	4770      	bx	lr
 8006c76:	bf00      	nop

08006c78 <__aeabi_uldivmod>:
 8006c78:	b953      	cbnz	r3, 8006c90 <__aeabi_uldivmod+0x18>
 8006c7a:	b94a      	cbnz	r2, 8006c90 <__aeabi_uldivmod+0x18>
 8006c7c:	2900      	cmp	r1, #0
 8006c7e:	bf08      	it	eq
 8006c80:	2800      	cmpeq	r0, #0
 8006c82:	bf1c      	itt	ne
 8006c84:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8006c88:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8006c8c:	f001 b8f6 	b.w	8007e7c <__aeabi_idiv0>
 8006c90:	f1ad 0c08 	sub.w	ip, sp, #8
 8006c94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8006c98:	f000 f806 	bl	8006ca8 <__udivmoddi4>
 8006c9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8006ca0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006ca4:	b004      	add	sp, #16
 8006ca6:	4770      	bx	lr

08006ca8 <__udivmoddi4>:
 8006ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006cac:	9d08      	ldr	r5, [sp, #32]
 8006cae:	460c      	mov	r4, r1
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d14e      	bne.n	8006d52 <__udivmoddi4+0xaa>
 8006cb4:	4694      	mov	ip, r2
 8006cb6:	458c      	cmp	ip, r1
 8006cb8:	4686      	mov	lr, r0
 8006cba:	fab2 f282 	clz	r2, r2
 8006cbe:	d962      	bls.n	8006d86 <__udivmoddi4+0xde>
 8006cc0:	b14a      	cbz	r2, 8006cd6 <__udivmoddi4+0x2e>
 8006cc2:	f1c2 0320 	rsb	r3, r2, #32
 8006cc6:	4091      	lsls	r1, r2
 8006cc8:	fa20 f303 	lsr.w	r3, r0, r3
 8006ccc:	fa0c fc02 	lsl.w	ip, ip, r2
 8006cd0:	4319      	orrs	r1, r3
 8006cd2:	fa00 fe02 	lsl.w	lr, r0, r2
 8006cd6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8006cda:	fa1f f68c 	uxth.w	r6, ip
 8006cde:	fbb1 f4f7 	udiv	r4, r1, r7
 8006ce2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8006ce6:	fb07 1114 	mls	r1, r7, r4, r1
 8006cea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8006cee:	fb04 f106 	mul.w	r1, r4, r6
 8006cf2:	4299      	cmp	r1, r3
 8006cf4:	d90a      	bls.n	8006d0c <__udivmoddi4+0x64>
 8006cf6:	eb1c 0303 	adds.w	r3, ip, r3
 8006cfa:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8006cfe:	f080 8112 	bcs.w	8006f26 <__udivmoddi4+0x27e>
 8006d02:	4299      	cmp	r1, r3
 8006d04:	f240 810f 	bls.w	8006f26 <__udivmoddi4+0x27e>
 8006d08:	3c02      	subs	r4, #2
 8006d0a:	4463      	add	r3, ip
 8006d0c:	1a59      	subs	r1, r3, r1
 8006d0e:	fa1f f38e 	uxth.w	r3, lr
 8006d12:	fbb1 f0f7 	udiv	r0, r1, r7
 8006d16:	fb07 1110 	mls	r1, r7, r0, r1
 8006d1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8006d1e:	fb00 f606 	mul.w	r6, r0, r6
 8006d22:	429e      	cmp	r6, r3
 8006d24:	d90a      	bls.n	8006d3c <__udivmoddi4+0x94>
 8006d26:	eb1c 0303 	adds.w	r3, ip, r3
 8006d2a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8006d2e:	f080 80fc 	bcs.w	8006f2a <__udivmoddi4+0x282>
 8006d32:	429e      	cmp	r6, r3
 8006d34:	f240 80f9 	bls.w	8006f2a <__udivmoddi4+0x282>
 8006d38:	4463      	add	r3, ip
 8006d3a:	3802      	subs	r0, #2
 8006d3c:	1b9b      	subs	r3, r3, r6
 8006d3e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8006d42:	2100      	movs	r1, #0
 8006d44:	b11d      	cbz	r5, 8006d4e <__udivmoddi4+0xa6>
 8006d46:	40d3      	lsrs	r3, r2
 8006d48:	2200      	movs	r2, #0
 8006d4a:	e9c5 3200 	strd	r3, r2, [r5]
 8006d4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d52:	428b      	cmp	r3, r1
 8006d54:	d905      	bls.n	8006d62 <__udivmoddi4+0xba>
 8006d56:	b10d      	cbz	r5, 8006d5c <__udivmoddi4+0xb4>
 8006d58:	e9c5 0100 	strd	r0, r1, [r5]
 8006d5c:	2100      	movs	r1, #0
 8006d5e:	4608      	mov	r0, r1
 8006d60:	e7f5      	b.n	8006d4e <__udivmoddi4+0xa6>
 8006d62:	fab3 f183 	clz	r1, r3
 8006d66:	2900      	cmp	r1, #0
 8006d68:	d146      	bne.n	8006df8 <__udivmoddi4+0x150>
 8006d6a:	42a3      	cmp	r3, r4
 8006d6c:	d302      	bcc.n	8006d74 <__udivmoddi4+0xcc>
 8006d6e:	4290      	cmp	r0, r2
 8006d70:	f0c0 80f0 	bcc.w	8006f54 <__udivmoddi4+0x2ac>
 8006d74:	1a86      	subs	r6, r0, r2
 8006d76:	eb64 0303 	sbc.w	r3, r4, r3
 8006d7a:	2001      	movs	r0, #1
 8006d7c:	2d00      	cmp	r5, #0
 8006d7e:	d0e6      	beq.n	8006d4e <__udivmoddi4+0xa6>
 8006d80:	e9c5 6300 	strd	r6, r3, [r5]
 8006d84:	e7e3      	b.n	8006d4e <__udivmoddi4+0xa6>
 8006d86:	2a00      	cmp	r2, #0
 8006d88:	f040 8090 	bne.w	8006eac <__udivmoddi4+0x204>
 8006d8c:	eba1 040c 	sub.w	r4, r1, ip
 8006d90:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8006d94:	fa1f f78c 	uxth.w	r7, ip
 8006d98:	2101      	movs	r1, #1
 8006d9a:	fbb4 f6f8 	udiv	r6, r4, r8
 8006d9e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8006da2:	fb08 4416 	mls	r4, r8, r6, r4
 8006da6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006daa:	fb07 f006 	mul.w	r0, r7, r6
 8006dae:	4298      	cmp	r0, r3
 8006db0:	d908      	bls.n	8006dc4 <__udivmoddi4+0x11c>
 8006db2:	eb1c 0303 	adds.w	r3, ip, r3
 8006db6:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8006dba:	d202      	bcs.n	8006dc2 <__udivmoddi4+0x11a>
 8006dbc:	4298      	cmp	r0, r3
 8006dbe:	f200 80cd 	bhi.w	8006f5c <__udivmoddi4+0x2b4>
 8006dc2:	4626      	mov	r6, r4
 8006dc4:	1a1c      	subs	r4, r3, r0
 8006dc6:	fa1f f38e 	uxth.w	r3, lr
 8006dca:	fbb4 f0f8 	udiv	r0, r4, r8
 8006dce:	fb08 4410 	mls	r4, r8, r0, r4
 8006dd2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006dd6:	fb00 f707 	mul.w	r7, r0, r7
 8006dda:	429f      	cmp	r7, r3
 8006ddc:	d908      	bls.n	8006df0 <__udivmoddi4+0x148>
 8006dde:	eb1c 0303 	adds.w	r3, ip, r3
 8006de2:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8006de6:	d202      	bcs.n	8006dee <__udivmoddi4+0x146>
 8006de8:	429f      	cmp	r7, r3
 8006dea:	f200 80b0 	bhi.w	8006f4e <__udivmoddi4+0x2a6>
 8006dee:	4620      	mov	r0, r4
 8006df0:	1bdb      	subs	r3, r3, r7
 8006df2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8006df6:	e7a5      	b.n	8006d44 <__udivmoddi4+0x9c>
 8006df8:	f1c1 0620 	rsb	r6, r1, #32
 8006dfc:	408b      	lsls	r3, r1
 8006dfe:	fa22 f706 	lsr.w	r7, r2, r6
 8006e02:	431f      	orrs	r7, r3
 8006e04:	fa20 fc06 	lsr.w	ip, r0, r6
 8006e08:	fa04 f301 	lsl.w	r3, r4, r1
 8006e0c:	ea43 030c 	orr.w	r3, r3, ip
 8006e10:	40f4      	lsrs	r4, r6
 8006e12:	fa00 f801 	lsl.w	r8, r0, r1
 8006e16:	0c38      	lsrs	r0, r7, #16
 8006e18:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8006e1c:	fbb4 fef0 	udiv	lr, r4, r0
 8006e20:	fa1f fc87 	uxth.w	ip, r7
 8006e24:	fb00 441e 	mls	r4, r0, lr, r4
 8006e28:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8006e2c:	fb0e f90c 	mul.w	r9, lr, ip
 8006e30:	45a1      	cmp	r9, r4
 8006e32:	fa02 f201 	lsl.w	r2, r2, r1
 8006e36:	d90a      	bls.n	8006e4e <__udivmoddi4+0x1a6>
 8006e38:	193c      	adds	r4, r7, r4
 8006e3a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8006e3e:	f080 8084 	bcs.w	8006f4a <__udivmoddi4+0x2a2>
 8006e42:	45a1      	cmp	r9, r4
 8006e44:	f240 8081 	bls.w	8006f4a <__udivmoddi4+0x2a2>
 8006e48:	f1ae 0e02 	sub.w	lr, lr, #2
 8006e4c:	443c      	add	r4, r7
 8006e4e:	eba4 0409 	sub.w	r4, r4, r9
 8006e52:	fa1f f983 	uxth.w	r9, r3
 8006e56:	fbb4 f3f0 	udiv	r3, r4, r0
 8006e5a:	fb00 4413 	mls	r4, r0, r3, r4
 8006e5e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8006e62:	fb03 fc0c 	mul.w	ip, r3, ip
 8006e66:	45a4      	cmp	ip, r4
 8006e68:	d907      	bls.n	8006e7a <__udivmoddi4+0x1d2>
 8006e6a:	193c      	adds	r4, r7, r4
 8006e6c:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8006e70:	d267      	bcs.n	8006f42 <__udivmoddi4+0x29a>
 8006e72:	45a4      	cmp	ip, r4
 8006e74:	d965      	bls.n	8006f42 <__udivmoddi4+0x29a>
 8006e76:	3b02      	subs	r3, #2
 8006e78:	443c      	add	r4, r7
 8006e7a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8006e7e:	fba0 9302 	umull	r9, r3, r0, r2
 8006e82:	eba4 040c 	sub.w	r4, r4, ip
 8006e86:	429c      	cmp	r4, r3
 8006e88:	46ce      	mov	lr, r9
 8006e8a:	469c      	mov	ip, r3
 8006e8c:	d351      	bcc.n	8006f32 <__udivmoddi4+0x28a>
 8006e8e:	d04e      	beq.n	8006f2e <__udivmoddi4+0x286>
 8006e90:	b155      	cbz	r5, 8006ea8 <__udivmoddi4+0x200>
 8006e92:	ebb8 030e 	subs.w	r3, r8, lr
 8006e96:	eb64 040c 	sbc.w	r4, r4, ip
 8006e9a:	fa04 f606 	lsl.w	r6, r4, r6
 8006e9e:	40cb      	lsrs	r3, r1
 8006ea0:	431e      	orrs	r6, r3
 8006ea2:	40cc      	lsrs	r4, r1
 8006ea4:	e9c5 6400 	strd	r6, r4, [r5]
 8006ea8:	2100      	movs	r1, #0
 8006eaa:	e750      	b.n	8006d4e <__udivmoddi4+0xa6>
 8006eac:	f1c2 0320 	rsb	r3, r2, #32
 8006eb0:	fa20 f103 	lsr.w	r1, r0, r3
 8006eb4:	fa0c fc02 	lsl.w	ip, ip, r2
 8006eb8:	fa24 f303 	lsr.w	r3, r4, r3
 8006ebc:	4094      	lsls	r4, r2
 8006ebe:	430c      	orrs	r4, r1
 8006ec0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8006ec4:	fa00 fe02 	lsl.w	lr, r0, r2
 8006ec8:	fa1f f78c 	uxth.w	r7, ip
 8006ecc:	fbb3 f0f8 	udiv	r0, r3, r8
 8006ed0:	fb08 3110 	mls	r1, r8, r0, r3
 8006ed4:	0c23      	lsrs	r3, r4, #16
 8006ed6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8006eda:	fb00 f107 	mul.w	r1, r0, r7
 8006ede:	4299      	cmp	r1, r3
 8006ee0:	d908      	bls.n	8006ef4 <__udivmoddi4+0x24c>
 8006ee2:	eb1c 0303 	adds.w	r3, ip, r3
 8006ee6:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8006eea:	d22c      	bcs.n	8006f46 <__udivmoddi4+0x29e>
 8006eec:	4299      	cmp	r1, r3
 8006eee:	d92a      	bls.n	8006f46 <__udivmoddi4+0x29e>
 8006ef0:	3802      	subs	r0, #2
 8006ef2:	4463      	add	r3, ip
 8006ef4:	1a5b      	subs	r3, r3, r1
 8006ef6:	b2a4      	uxth	r4, r4
 8006ef8:	fbb3 f1f8 	udiv	r1, r3, r8
 8006efc:	fb08 3311 	mls	r3, r8, r1, r3
 8006f00:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8006f04:	fb01 f307 	mul.w	r3, r1, r7
 8006f08:	42a3      	cmp	r3, r4
 8006f0a:	d908      	bls.n	8006f1e <__udivmoddi4+0x276>
 8006f0c:	eb1c 0404 	adds.w	r4, ip, r4
 8006f10:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8006f14:	d213      	bcs.n	8006f3e <__udivmoddi4+0x296>
 8006f16:	42a3      	cmp	r3, r4
 8006f18:	d911      	bls.n	8006f3e <__udivmoddi4+0x296>
 8006f1a:	3902      	subs	r1, #2
 8006f1c:	4464      	add	r4, ip
 8006f1e:	1ae4      	subs	r4, r4, r3
 8006f20:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006f24:	e739      	b.n	8006d9a <__udivmoddi4+0xf2>
 8006f26:	4604      	mov	r4, r0
 8006f28:	e6f0      	b.n	8006d0c <__udivmoddi4+0x64>
 8006f2a:	4608      	mov	r0, r1
 8006f2c:	e706      	b.n	8006d3c <__udivmoddi4+0x94>
 8006f2e:	45c8      	cmp	r8, r9
 8006f30:	d2ae      	bcs.n	8006e90 <__udivmoddi4+0x1e8>
 8006f32:	ebb9 0e02 	subs.w	lr, r9, r2
 8006f36:	eb63 0c07 	sbc.w	ip, r3, r7
 8006f3a:	3801      	subs	r0, #1
 8006f3c:	e7a8      	b.n	8006e90 <__udivmoddi4+0x1e8>
 8006f3e:	4631      	mov	r1, r6
 8006f40:	e7ed      	b.n	8006f1e <__udivmoddi4+0x276>
 8006f42:	4603      	mov	r3, r0
 8006f44:	e799      	b.n	8006e7a <__udivmoddi4+0x1d2>
 8006f46:	4630      	mov	r0, r6
 8006f48:	e7d4      	b.n	8006ef4 <__udivmoddi4+0x24c>
 8006f4a:	46d6      	mov	lr, sl
 8006f4c:	e77f      	b.n	8006e4e <__udivmoddi4+0x1a6>
 8006f4e:	4463      	add	r3, ip
 8006f50:	3802      	subs	r0, #2
 8006f52:	e74d      	b.n	8006df0 <__udivmoddi4+0x148>
 8006f54:	4606      	mov	r6, r0
 8006f56:	4623      	mov	r3, r4
 8006f58:	4608      	mov	r0, r1
 8006f5a:	e70f      	b.n	8006d7c <__udivmoddi4+0xd4>
 8006f5c:	3e02      	subs	r6, #2
 8006f5e:	4463      	add	r3, ip
 8006f60:	e730      	b.n	8006dc4 <__udivmoddi4+0x11c>
 8006f62:	bf00      	nop

08006f64 <selfrel_offset31>:
 8006f64:	6803      	ldr	r3, [r0, #0]
 8006f66:	005a      	lsls	r2, r3, #1
 8006f68:	bf4c      	ite	mi
 8006f6a:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8006f6e:	f023 4300 	bicpl.w	r3, r3, #2147483648	@ 0x80000000
 8006f72:	4418      	add	r0, r3
 8006f74:	4770      	bx	lr
 8006f76:	bf00      	nop

08006f78 <search_EIT_table>:
 8006f78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f7c:	b349      	cbz	r1, 8006fd2 <search_EIT_table+0x5a>
 8006f7e:	1e4f      	subs	r7, r1, #1
 8006f80:	4604      	mov	r4, r0
 8006f82:	4615      	mov	r5, r2
 8006f84:	463e      	mov	r6, r7
 8006f86:	f04f 0900 	mov.w	r9, #0
 8006f8a:	eb09 0106 	add.w	r1, r9, r6
 8006f8e:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 8006f92:	1049      	asrs	r1, r1, #1
 8006f94:	eb04 08c1 	add.w	r8, r4, r1, lsl #3
 8006f98:	4640      	mov	r0, r8
 8006f9a:	f7ff ffe3 	bl	8006f64 <selfrel_offset31>
 8006f9e:	428f      	cmp	r7, r1
 8006fa0:	4603      	mov	r3, r0
 8006fa2:	ea4f 00c1 	mov.w	r0, r1, lsl #3
 8006fa6:	d00f      	beq.n	8006fc8 <search_EIT_table+0x50>
 8006fa8:	3008      	adds	r0, #8
 8006faa:	42ab      	cmp	r3, r5
 8006fac:	4420      	add	r0, r4
 8006fae:	d807      	bhi.n	8006fc0 <search_EIT_table+0x48>
 8006fb0:	f7ff ffd8 	bl	8006f64 <selfrel_offset31>
 8006fb4:	3801      	subs	r0, #1
 8006fb6:	42a8      	cmp	r0, r5
 8006fb8:	d208      	bcs.n	8006fcc <search_EIT_table+0x54>
 8006fba:	f101 0901 	add.w	r9, r1, #1
 8006fbe:	e7e4      	b.n	8006f8a <search_EIT_table+0x12>
 8006fc0:	4589      	cmp	r9, r1
 8006fc2:	d006      	beq.n	8006fd2 <search_EIT_table+0x5a>
 8006fc4:	1e4e      	subs	r6, r1, #1
 8006fc6:	e7e0      	b.n	8006f8a <search_EIT_table+0x12>
 8006fc8:	42ab      	cmp	r3, r5
 8006fca:	d8f9      	bhi.n	8006fc0 <search_EIT_table+0x48>
 8006fcc:	4640      	mov	r0, r8
 8006fce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006fd2:	f04f 0800 	mov.w	r8, #0
 8006fd6:	4640      	mov	r0, r8
 8006fd8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08006fdc <__gnu_unwind_get_pr_addr>:
 8006fdc:	2801      	cmp	r0, #1
 8006fde:	d007      	beq.n	8006ff0 <__gnu_unwind_get_pr_addr+0x14>
 8006fe0:	2802      	cmp	r0, #2
 8006fe2:	d007      	beq.n	8006ff4 <__gnu_unwind_get_pr_addr+0x18>
 8006fe4:	4b04      	ldr	r3, [pc, #16]	@ (8006ff8 <__gnu_unwind_get_pr_addr+0x1c>)
 8006fe6:	2800      	cmp	r0, #0
 8006fe8:	bf0c      	ite	eq
 8006fea:	4618      	moveq	r0, r3
 8006fec:	2000      	movne	r0, #0
 8006fee:	4770      	bx	lr
 8006ff0:	4802      	ldr	r0, [pc, #8]	@ (8006ffc <__gnu_unwind_get_pr_addr+0x20>)
 8006ff2:	4770      	bx	lr
 8006ff4:	4802      	ldr	r0, [pc, #8]	@ (8007000 <__gnu_unwind_get_pr_addr+0x24>)
 8006ff6:	4770      	bx	lr
 8006ff8:	080076a5 	.word	0x080076a5
 8006ffc:	080076a9 	.word	0x080076a9
 8007000:	080076ad 	.word	0x080076ad

08007004 <get_eit_entry>:
 8007004:	b530      	push	{r4, r5, lr}
 8007006:	4b21      	ldr	r3, [pc, #132]	@ (800708c <get_eit_entry+0x88>)
 8007008:	b083      	sub	sp, #12
 800700a:	4604      	mov	r4, r0
 800700c:	1e8d      	subs	r5, r1, #2
 800700e:	b31b      	cbz	r3, 8007058 <get_eit_entry+0x54>
 8007010:	a901      	add	r1, sp, #4
 8007012:	4628      	mov	r0, r5
 8007014:	f3af 8000 	nop.w
 8007018:	b388      	cbz	r0, 800707e <get_eit_entry+0x7a>
 800701a:	9901      	ldr	r1, [sp, #4]
 800701c:	462a      	mov	r2, r5
 800701e:	f7ff ffab 	bl	8006f78 <search_EIT_table>
 8007022:	4601      	mov	r1, r0
 8007024:	b358      	cbz	r0, 800707e <get_eit_entry+0x7a>
 8007026:	f7ff ff9d 	bl	8006f64 <selfrel_offset31>
 800702a:	684b      	ldr	r3, [r1, #4]
 800702c:	64a0      	str	r0, [r4, #72]	@ 0x48
 800702e:	2b01      	cmp	r3, #1
 8007030:	d028      	beq.n	8007084 <get_eit_entry+0x80>
 8007032:	2b00      	cmp	r3, #0
 8007034:	f101 0004 	add.w	r0, r1, #4
 8007038:	db1f      	blt.n	800707a <get_eit_entry+0x76>
 800703a:	f7ff ff93 	bl	8006f64 <selfrel_offset31>
 800703e:	2300      	movs	r3, #0
 8007040:	6523      	str	r3, [r4, #80]	@ 0x50
 8007042:	6803      	ldr	r3, [r0, #0]
 8007044:	64e0      	str	r0, [r4, #76]	@ 0x4c
 8007046:	2b00      	cmp	r3, #0
 8007048:	db0d      	blt.n	8007066 <get_eit_entry+0x62>
 800704a:	f7ff ff8b 	bl	8006f64 <selfrel_offset31>
 800704e:	4603      	mov	r3, r0
 8007050:	2000      	movs	r0, #0
 8007052:	6123      	str	r3, [r4, #16]
 8007054:	b003      	add	sp, #12
 8007056:	bd30      	pop	{r4, r5, pc}
 8007058:	4b0d      	ldr	r3, [pc, #52]	@ (8007090 <get_eit_entry+0x8c>)
 800705a:	490e      	ldr	r1, [pc, #56]	@ (8007094 <get_eit_entry+0x90>)
 800705c:	1ac9      	subs	r1, r1, r3
 800705e:	10c9      	asrs	r1, r1, #3
 8007060:	4618      	mov	r0, r3
 8007062:	9101      	str	r1, [sp, #4]
 8007064:	e7da      	b.n	800701c <get_eit_entry+0x18>
 8007066:	f3c3 6003 	ubfx	r0, r3, #24, #4
 800706a:	f7ff ffb7 	bl	8006fdc <__gnu_unwind_get_pr_addr>
 800706e:	4603      	mov	r3, r0
 8007070:	b128      	cbz	r0, 800707e <get_eit_entry+0x7a>
 8007072:	2000      	movs	r0, #0
 8007074:	6123      	str	r3, [r4, #16]
 8007076:	b003      	add	sp, #12
 8007078:	bd30      	pop	{r4, r5, pc}
 800707a:	2301      	movs	r3, #1
 800707c:	e7e0      	b.n	8007040 <get_eit_entry+0x3c>
 800707e:	2300      	movs	r3, #0
 8007080:	2009      	movs	r0, #9
 8007082:	e7e6      	b.n	8007052 <get_eit_entry+0x4e>
 8007084:	2300      	movs	r3, #0
 8007086:	2005      	movs	r0, #5
 8007088:	e7e3      	b.n	8007052 <get_eit_entry+0x4e>
 800708a:	bf00      	nop
 800708c:	00000000 	.word	0x00000000
 8007090:	080afdf4 	.word	0x080afdf4
 8007094:	080aff8c 	.word	0x080aff8c

08007098 <restore_non_core_regs>:
 8007098:	6803      	ldr	r3, [r0, #0]
 800709a:	07da      	lsls	r2, r3, #31
 800709c:	b510      	push	{r4, lr}
 800709e:	4604      	mov	r4, r0
 80070a0:	d406      	bmi.n	80070b0 <restore_non_core_regs+0x18>
 80070a2:	079b      	lsls	r3, r3, #30
 80070a4:	f100 0048 	add.w	r0, r0, #72	@ 0x48
 80070a8:	d509      	bpl.n	80070be <restore_non_core_regs+0x26>
 80070aa:	f000 fc69 	bl	8007980 <__gnu_Unwind_Restore_VFP_D>
 80070ae:	6823      	ldr	r3, [r4, #0]
 80070b0:	0759      	lsls	r1, r3, #29
 80070b2:	d509      	bpl.n	80070c8 <restore_non_core_regs+0x30>
 80070b4:	071a      	lsls	r2, r3, #28
 80070b6:	d50e      	bpl.n	80070d6 <restore_non_core_regs+0x3e>
 80070b8:	06db      	lsls	r3, r3, #27
 80070ba:	d513      	bpl.n	80070e4 <restore_non_core_regs+0x4c>
 80070bc:	bd10      	pop	{r4, pc}
 80070be:	f000 fc57 	bl	8007970 <__gnu_Unwind_Restore_VFP>
 80070c2:	6823      	ldr	r3, [r4, #0]
 80070c4:	0759      	lsls	r1, r3, #29
 80070c6:	d4f5      	bmi.n	80070b4 <restore_non_core_regs+0x1c>
 80070c8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80070cc:	f000 fc60 	bl	8007990 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 80070d0:	6823      	ldr	r3, [r4, #0]
 80070d2:	071a      	lsls	r2, r3, #28
 80070d4:	d4f0      	bmi.n	80070b8 <restore_non_core_regs+0x20>
 80070d6:	f504 70a8 	add.w	r0, r4, #336	@ 0x150
 80070da:	f000 fc61 	bl	80079a0 <__gnu_Unwind_Restore_WMMXD>
 80070de:	6823      	ldr	r3, [r4, #0]
 80070e0:	06db      	lsls	r3, r3, #27
 80070e2:	d4eb      	bmi.n	80070bc <restore_non_core_regs+0x24>
 80070e4:	f504 70e8 	add.w	r0, r4, #464	@ 0x1d0
 80070e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80070ec:	f000 bc9c 	b.w	8007a28 <__gnu_Unwind_Restore_WMMXC>

080070f0 <__gnu_unwind_24bit.constprop.0>:
 80070f0:	2009      	movs	r0, #9
 80070f2:	4770      	bx	lr

080070f4 <_Unwind_decode_typeinfo_ptr.constprop.0>:
 80070f4:	4603      	mov	r3, r0
 80070f6:	6800      	ldr	r0, [r0, #0]
 80070f8:	b100      	cbz	r0, 80070fc <_Unwind_decode_typeinfo_ptr.constprop.0+0x8>
 80070fa:	4418      	add	r0, r3
 80070fc:	4770      	bx	lr
 80070fe:	bf00      	nop

08007100 <_Unwind_DebugHook>:
 8007100:	4770      	bx	lr
 8007102:	bf00      	nop

08007104 <unwind_phase2>:
 8007104:	b570      	push	{r4, r5, r6, lr}
 8007106:	4604      	mov	r4, r0
 8007108:	460e      	mov	r6, r1
 800710a:	6c31      	ldr	r1, [r6, #64]	@ 0x40
 800710c:	4620      	mov	r0, r4
 800710e:	f7ff ff79 	bl	8007004 <get_eit_entry>
 8007112:	4605      	mov	r5, r0
 8007114:	b988      	cbnz	r0, 800713a <unwind_phase2+0x36>
 8007116:	6c32      	ldr	r2, [r6, #64]	@ 0x40
 8007118:	6162      	str	r2, [r4, #20]
 800711a:	6923      	ldr	r3, [r4, #16]
 800711c:	4632      	mov	r2, r6
 800711e:	4621      	mov	r1, r4
 8007120:	2001      	movs	r0, #1
 8007122:	4798      	blx	r3
 8007124:	2808      	cmp	r0, #8
 8007126:	d0f0      	beq.n	800710a <unwind_phase2+0x6>
 8007128:	2807      	cmp	r0, #7
 800712a:	d106      	bne.n	800713a <unwind_phase2+0x36>
 800712c:	4628      	mov	r0, r5
 800712e:	6c31      	ldr	r1, [r6, #64]	@ 0x40
 8007130:	f7ff ffe6 	bl	8007100 <_Unwind_DebugHook>
 8007134:	1d30      	adds	r0, r6, #4
 8007136:	f000 fc0f 	bl	8007958 <__restore_core_regs>
 800713a:	f01b fe09 	bl	8022d50 <abort>
 800713e:	bf00      	nop

08007140 <unwind_phase2_forced>:
 8007140:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007144:	1d0d      	adds	r5, r1, #4
 8007146:	f8d0 800c 	ldr.w	r8, [r0, #12]
 800714a:	f8d0 9018 	ldr.w	r9, [r0, #24]
 800714e:	4607      	mov	r7, r0
 8007150:	4614      	mov	r4, r2
 8007152:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007154:	f5ad 7d72 	sub.w	sp, sp, #968	@ 0x3c8
 8007158:	f10d 0c0c 	add.w	ip, sp, #12
 800715c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8007160:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007162:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8007166:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007168:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800716c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8007170:	ae02      	add	r6, sp, #8
 8007172:	f04f 0e00 	mov.w	lr, #0
 8007176:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 800717a:	f8c6 e000 	str.w	lr, [r6]
 800717e:	e020      	b.n	80071c2 <unwind_phase2_forced+0x82>
 8007180:	6c33      	ldr	r3, [r6, #64]	@ 0x40
 8007182:	617b      	str	r3, [r7, #20]
 8007184:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8007188:	4631      	mov	r1, r6
 800718a:	a87a      	add	r0, sp, #488	@ 0x1e8
 800718c:	f01c fe46 	bl	8023e1c <memcpy>
 8007190:	693b      	ldr	r3, [r7, #16]
 8007192:	aa7a      	add	r2, sp, #488	@ 0x1e8
 8007194:	4639      	mov	r1, r7
 8007196:	4650      	mov	r0, sl
 8007198:	4798      	blx	r3
 800719a:	9b88      	ldr	r3, [sp, #544]	@ 0x220
 800719c:	6473      	str	r3, [r6, #68]	@ 0x44
 800719e:	4621      	mov	r1, r4
 80071a0:	e9cd 6900 	strd	r6, r9, [sp]
 80071a4:	4605      	mov	r5, r0
 80071a6:	463b      	mov	r3, r7
 80071a8:	463a      	mov	r2, r7
 80071aa:	2001      	movs	r0, #1
 80071ac:	47c0      	blx	r8
 80071ae:	4604      	mov	r4, r0
 80071b0:	bb18      	cbnz	r0, 80071fa <unwind_phase2_forced+0xba>
 80071b2:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 80071b6:	a97a      	add	r1, sp, #488	@ 0x1e8
 80071b8:	4630      	mov	r0, r6
 80071ba:	f01c fe2f 	bl	8023e1c <memcpy>
 80071be:	2d08      	cmp	r5, #8
 80071c0:	d119      	bne.n	80071f6 <unwind_phase2_forced+0xb6>
 80071c2:	6c31      	ldr	r1, [r6, #64]	@ 0x40
 80071c4:	4638      	mov	r0, r7
 80071c6:	f7ff ff1d 	bl	8007004 <get_eit_entry>
 80071ca:	3409      	adds	r4, #9
 80071cc:	fa5f fa84 	uxtb.w	sl, r4
 80071d0:	4605      	mov	r5, r0
 80071d2:	2800      	cmp	r0, #0
 80071d4:	d0d4      	beq.n	8007180 <unwind_phase2_forced+0x40>
 80071d6:	6bb3      	ldr	r3, [r6, #56]	@ 0x38
 80071d8:	6473      	str	r3, [r6, #68]	@ 0x44
 80071da:	463a      	mov	r2, r7
 80071dc:	e9cd 6900 	strd	r6, r9, [sp]
 80071e0:	463b      	mov	r3, r7
 80071e2:	f04a 0110 	orr.w	r1, sl, #16
 80071e6:	2001      	movs	r0, #1
 80071e8:	47c0      	blx	r8
 80071ea:	b930      	cbnz	r0, 80071fa <unwind_phase2_forced+0xba>
 80071ec:	4628      	mov	r0, r5
 80071ee:	f50d 7d72 	add.w	sp, sp, #968	@ 0x3c8
 80071f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071f6:	2d07      	cmp	r5, #7
 80071f8:	d005      	beq.n	8007206 <unwind_phase2_forced+0xc6>
 80071fa:	2509      	movs	r5, #9
 80071fc:	4628      	mov	r0, r5
 80071fe:	f50d 7d72 	add.w	sp, sp, #968	@ 0x3c8
 8007202:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007206:	4620      	mov	r0, r4
 8007208:	6c31      	ldr	r1, [r6, #64]	@ 0x40
 800720a:	f7ff ff79 	bl	8007100 <_Unwind_DebugHook>
 800720e:	a803      	add	r0, sp, #12
 8007210:	f000 fba2 	bl	8007958 <__restore_core_regs>

08007214 <_Unwind_GetCFA>:
 8007214:	6c40      	ldr	r0, [r0, #68]	@ 0x44
 8007216:	4770      	bx	lr

08007218 <__gnu_Unwind_RaiseException>:
 8007218:	b5f0      	push	{r4, r5, r6, r7, lr}
 800721a:	6bcb      	ldr	r3, [r1, #60]	@ 0x3c
 800721c:	640b      	str	r3, [r1, #64]	@ 0x40
 800721e:	f101 0c04 	add.w	ip, r1, #4
 8007222:	460e      	mov	r6, r1
 8007224:	4605      	mov	r5, r0
 8007226:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800722a:	b0f9      	sub	sp, #484	@ 0x1e4
 800722c:	ac01      	add	r4, sp, #4
 800722e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007230:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8007234:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007236:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800723a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800723c:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8007240:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8007244:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8007248:	9700      	str	r7, [sp, #0]
 800724a:	e006      	b.n	800725a <__gnu_Unwind_RaiseException+0x42>
 800724c:	692b      	ldr	r3, [r5, #16]
 800724e:	466a      	mov	r2, sp
 8007250:	4629      	mov	r1, r5
 8007252:	4798      	blx	r3
 8007254:	2808      	cmp	r0, #8
 8007256:	4604      	mov	r4, r0
 8007258:	d108      	bne.n	800726c <__gnu_Unwind_RaiseException+0x54>
 800725a:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800725c:	4628      	mov	r0, r5
 800725e:	f7ff fed1 	bl	8007004 <get_eit_entry>
 8007262:	2800      	cmp	r0, #0
 8007264:	d0f2      	beq.n	800724c <__gnu_Unwind_RaiseException+0x34>
 8007266:	2009      	movs	r0, #9
 8007268:	b079      	add	sp, #484	@ 0x1e4
 800726a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800726c:	4668      	mov	r0, sp
 800726e:	f7ff ff13 	bl	8007098 <restore_non_core_regs>
 8007272:	2c06      	cmp	r4, #6
 8007274:	d1f7      	bne.n	8007266 <__gnu_Unwind_RaiseException+0x4e>
 8007276:	4631      	mov	r1, r6
 8007278:	4628      	mov	r0, r5
 800727a:	f7ff ff43 	bl	8007104 <unwind_phase2>
 800727e:	bf00      	nop

08007280 <__gnu_Unwind_ForcedUnwind>:
 8007280:	60c1      	str	r1, [r0, #12]
 8007282:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8007284:	6182      	str	r2, [r0, #24]
 8007286:	6419      	str	r1, [r3, #64]	@ 0x40
 8007288:	2200      	movs	r2, #0
 800728a:	4619      	mov	r1, r3
 800728c:	e758      	b.n	8007140 <unwind_phase2_forced>
 800728e:	bf00      	nop

08007290 <__gnu_Unwind_Resume>:
 8007290:	b570      	push	{r4, r5, r6, lr}
 8007292:	68c6      	ldr	r6, [r0, #12]
 8007294:	6943      	ldr	r3, [r0, #20]
 8007296:	640b      	str	r3, [r1, #64]	@ 0x40
 8007298:	b9ae      	cbnz	r6, 80072c6 <__gnu_Unwind_Resume+0x36>
 800729a:	6903      	ldr	r3, [r0, #16]
 800729c:	460a      	mov	r2, r1
 800729e:	4604      	mov	r4, r0
 80072a0:	460d      	mov	r5, r1
 80072a2:	4601      	mov	r1, r0
 80072a4:	2002      	movs	r0, #2
 80072a6:	4798      	blx	r3
 80072a8:	2807      	cmp	r0, #7
 80072aa:	d005      	beq.n	80072b8 <__gnu_Unwind_Resume+0x28>
 80072ac:	2808      	cmp	r0, #8
 80072ae:	d10f      	bne.n	80072d0 <__gnu_Unwind_Resume+0x40>
 80072b0:	4629      	mov	r1, r5
 80072b2:	4620      	mov	r0, r4
 80072b4:	f7ff ff26 	bl	8007104 <unwind_phase2>
 80072b8:	4630      	mov	r0, r6
 80072ba:	6c29      	ldr	r1, [r5, #64]	@ 0x40
 80072bc:	f7ff ff20 	bl	8007100 <_Unwind_DebugHook>
 80072c0:	1d28      	adds	r0, r5, #4
 80072c2:	f000 fb49 	bl	8007958 <__restore_core_regs>
 80072c6:	2201      	movs	r2, #1
 80072c8:	f7ff ff3a 	bl	8007140 <unwind_phase2_forced>
 80072cc:	f01b fd40 	bl	8022d50 <abort>
 80072d0:	f01b fd3e 	bl	8022d50 <abort>

080072d4 <__gnu_Unwind_Resume_or_Rethrow>:
 80072d4:	68c2      	ldr	r2, [r0, #12]
 80072d6:	b11a      	cbz	r2, 80072e0 <__gnu_Unwind_Resume_or_Rethrow+0xc>
 80072d8:	6bca      	ldr	r2, [r1, #60]	@ 0x3c
 80072da:	640a      	str	r2, [r1, #64]	@ 0x40
 80072dc:	2200      	movs	r2, #0
 80072de:	e72f      	b.n	8007140 <unwind_phase2_forced>
 80072e0:	e79a      	b.n	8007218 <__gnu_Unwind_RaiseException>
 80072e2:	bf00      	nop

080072e4 <_Unwind_Complete>:
 80072e4:	4770      	bx	lr
 80072e6:	bf00      	nop

080072e8 <_Unwind_DeleteException>:
 80072e8:	6883      	ldr	r3, [r0, #8]
 80072ea:	4601      	mov	r1, r0
 80072ec:	b10b      	cbz	r3, 80072f2 <_Unwind_DeleteException+0xa>
 80072ee:	2001      	movs	r0, #1
 80072f0:	4718      	bx	r3
 80072f2:	4770      	bx	lr

080072f4 <_Unwind_VRS_Get>:
 80072f4:	2901      	cmp	r1, #1
 80072f6:	d010      	beq.n	800731a <_Unwind_VRS_Get+0x26>
 80072f8:	d809      	bhi.n	800730e <_Unwind_VRS_Get+0x1a>
 80072fa:	b983      	cbnz	r3, 800731e <_Unwind_VRS_Get+0x2a>
 80072fc:	2a0f      	cmp	r2, #15
 80072fe:	d80e      	bhi.n	800731e <_Unwind_VRS_Get+0x2a>
 8007300:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8007304:	4618      	mov	r0, r3
 8007306:	6853      	ldr	r3, [r2, #4]
 8007308:	9a00      	ldr	r2, [sp, #0]
 800730a:	6013      	str	r3, [r2, #0]
 800730c:	4770      	bx	lr
 800730e:	3903      	subs	r1, #3
 8007310:	2901      	cmp	r1, #1
 8007312:	bf8c      	ite	hi
 8007314:	2002      	movhi	r0, #2
 8007316:	2001      	movls	r0, #1
 8007318:	4770      	bx	lr
 800731a:	4608      	mov	r0, r1
 800731c:	4770      	bx	lr
 800731e:	2002      	movs	r0, #2
 8007320:	4770      	bx	lr
 8007322:	bf00      	nop

08007324 <_Unwind_GetGR>:
 8007324:	b500      	push	{lr}
 8007326:	b085      	sub	sp, #20
 8007328:	460a      	mov	r2, r1
 800732a:	2300      	movs	r3, #0
 800732c:	a903      	add	r1, sp, #12
 800732e:	9100      	str	r1, [sp, #0]
 8007330:	4619      	mov	r1, r3
 8007332:	f7ff ffdf 	bl	80072f4 <_Unwind_VRS_Get>
 8007336:	9803      	ldr	r0, [sp, #12]
 8007338:	b005      	add	sp, #20
 800733a:	f85d fb04 	ldr.w	pc, [sp], #4
 800733e:	bf00      	nop

08007340 <_Unwind_VRS_Set>:
 8007340:	2901      	cmp	r1, #1
 8007342:	d010      	beq.n	8007366 <_Unwind_VRS_Set+0x26>
 8007344:	d809      	bhi.n	800735a <_Unwind_VRS_Set+0x1a>
 8007346:	b983      	cbnz	r3, 800736a <_Unwind_VRS_Set+0x2a>
 8007348:	2a0f      	cmp	r2, #15
 800734a:	d80e      	bhi.n	800736a <_Unwind_VRS_Set+0x2a>
 800734c:	9900      	ldr	r1, [sp, #0]
 800734e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8007352:	6809      	ldr	r1, [r1, #0]
 8007354:	6051      	str	r1, [r2, #4]
 8007356:	4618      	mov	r0, r3
 8007358:	4770      	bx	lr
 800735a:	3903      	subs	r1, #3
 800735c:	2901      	cmp	r1, #1
 800735e:	bf8c      	ite	hi
 8007360:	2002      	movhi	r0, #2
 8007362:	2001      	movls	r0, #1
 8007364:	4770      	bx	lr
 8007366:	4608      	mov	r0, r1
 8007368:	4770      	bx	lr
 800736a:	2002      	movs	r0, #2
 800736c:	4770      	bx	lr
 800736e:	bf00      	nop

08007370 <_Unwind_SetGR>:
 8007370:	b510      	push	{r4, lr}
 8007372:	b084      	sub	sp, #16
 8007374:	2300      	movs	r3, #0
 8007376:	ac03      	add	r4, sp, #12
 8007378:	9203      	str	r2, [sp, #12]
 800737a:	9400      	str	r4, [sp, #0]
 800737c:	460a      	mov	r2, r1
 800737e:	4619      	mov	r1, r3
 8007380:	f7ff ffde 	bl	8007340 <_Unwind_VRS_Set>
 8007384:	b004      	add	sp, #16
 8007386:	bd10      	pop	{r4, pc}

08007388 <__gnu_Unwind_Backtrace>:
 8007388:	b570      	push	{r4, r5, r6, lr}
 800738a:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
 800738c:	6413      	str	r3, [r2, #64]	@ 0x40
 800738e:	f102 0c04 	add.w	ip, r2, #4
 8007392:	4605      	mov	r5, r0
 8007394:	460c      	mov	r4, r1
 8007396:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800739a:	f5ad 7d0e 	sub.w	sp, sp, #568	@ 0x238
 800739e:	f10d 0e5c 	add.w	lr, sp, #92	@ 0x5c
 80073a2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80073a6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80073aa:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80073ae:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80073b2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80073b6:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 80073ba:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 80073be:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 80073c2:	9616      	str	r6, [sp, #88]	@ 0x58
 80073c4:	e010      	b.n	80073e8 <__gnu_Unwind_Backtrace+0x60>
 80073c6:	f7ff ffd3 	bl	8007370 <_Unwind_SetGR>
 80073ca:	4621      	mov	r1, r4
 80073cc:	a816      	add	r0, sp, #88	@ 0x58
 80073ce:	47a8      	blx	r5
 80073d0:	4603      	mov	r3, r0
 80073d2:	aa16      	add	r2, sp, #88	@ 0x58
 80073d4:	4669      	mov	r1, sp
 80073d6:	2008      	movs	r0, #8
 80073d8:	b983      	cbnz	r3, 80073fc <__gnu_Unwind_Backtrace+0x74>
 80073da:	9b04      	ldr	r3, [sp, #16]
 80073dc:	4798      	blx	r3
 80073de:	2805      	cmp	r0, #5
 80073e0:	4606      	mov	r6, r0
 80073e2:	d00c      	beq.n	80073fe <__gnu_Unwind_Backtrace+0x76>
 80073e4:	2809      	cmp	r0, #9
 80073e6:	d009      	beq.n	80073fc <__gnu_Unwind_Backtrace+0x74>
 80073e8:	9926      	ldr	r1, [sp, #152]	@ 0x98
 80073ea:	4668      	mov	r0, sp
 80073ec:	f7ff fe0a 	bl	8007004 <get_eit_entry>
 80073f0:	4603      	mov	r3, r0
 80073f2:	466a      	mov	r2, sp
 80073f4:	210c      	movs	r1, #12
 80073f6:	a816      	add	r0, sp, #88	@ 0x58
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d0e4      	beq.n	80073c6 <__gnu_Unwind_Backtrace+0x3e>
 80073fc:	2609      	movs	r6, #9
 80073fe:	a816      	add	r0, sp, #88	@ 0x58
 8007400:	f7ff fe4a 	bl	8007098 <restore_non_core_regs>
 8007404:	4630      	mov	r0, r6
 8007406:	f50d 7d0e 	add.w	sp, sp, #568	@ 0x238
 800740a:	bd70      	pop	{r4, r5, r6, pc}

0800740c <__gnu_unwind_pr_common>:
 800740c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007410:	4693      	mov	fp, r2
 8007412:	6cca      	ldr	r2, [r1, #76]	@ 0x4c
 8007414:	b089      	sub	sp, #36	@ 0x24
 8007416:	460d      	mov	r5, r1
 8007418:	f852 1b04 	ldr.w	r1, [r2], #4
 800741c:	9206      	str	r2, [sp, #24]
 800741e:	f000 0c03 	and.w	ip, r0, #3
 8007422:	2b00      	cmp	r3, #0
 8007424:	d079      	beq.n	800751a <__gnu_unwind_pr_common+0x10e>
 8007426:	0c0c      	lsrs	r4, r1, #16
 8007428:	f88d 401d 	strb.w	r4, [sp, #29]
 800742c:	0409      	lsls	r1, r1, #16
 800742e:	b2e4      	uxtb	r4, r4
 8007430:	9105      	str	r1, [sp, #20]
 8007432:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8007436:	2102      	movs	r1, #2
 8007438:	6d2f      	ldr	r7, [r5, #80]	@ 0x50
 800743a:	f88d 101c 	strb.w	r1, [sp, #28]
 800743e:	f1bc 0f02 	cmp.w	ip, #2
 8007442:	bf08      	it	eq
 8007444:	6baa      	ldreq	r2, [r5, #56]	@ 0x38
 8007446:	f017 0701 	ands.w	r7, r7, #1
 800744a:	d00c      	beq.n	8007466 <__gnu_unwind_pr_common+0x5a>
 800744c:	a905      	add	r1, sp, #20
 800744e:	4658      	mov	r0, fp
 8007450:	f000 fb84 	bl	8007b5c <__gnu_unwind_execute>
 8007454:	b918      	cbnz	r0, 800745e <__gnu_unwind_pr_common+0x52>
 8007456:	2008      	movs	r0, #8
 8007458:	b009      	add	sp, #36	@ 0x24
 800745a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800745e:	2009      	movs	r0, #9
 8007460:	b009      	add	sp, #36	@ 0x24
 8007462:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007466:	6816      	ldr	r6, [r2, #0]
 8007468:	2e00      	cmp	r6, #0
 800746a:	d0ef      	beq.n	800744c <__gnu_unwind_pr_common+0x40>
 800746c:	f000 0108 	and.w	r1, r0, #8
 8007470:	9101      	str	r1, [sp, #4]
 8007472:	46b2      	mov	sl, r6
 8007474:	9702      	str	r7, [sp, #8]
 8007476:	4664      	mov	r4, ip
 8007478:	4699      	mov	r9, r3
 800747a:	f1b9 0f02 	cmp.w	r9, #2
 800747e:	d048      	beq.n	8007512 <__gnu_unwind_pr_common+0x106>
 8007480:	f8b2 a000 	ldrh.w	sl, [r2]
 8007484:	8856      	ldrh	r6, [r2, #2]
 8007486:	f102 0804 	add.w	r8, r2, #4
 800748a:	6caa      	ldr	r2, [r5, #72]	@ 0x48
 800748c:	f026 0301 	bic.w	r3, r6, #1
 8007490:	210f      	movs	r1, #15
 8007492:	4658      	mov	r0, fp
 8007494:	189f      	adds	r7, r3, r2
 8007496:	f7ff ff45 	bl	8007324 <_Unwind_GetGR>
 800749a:	4287      	cmp	r7, r0
 800749c:	d837      	bhi.n	800750e <__gnu_unwind_pr_common+0x102>
 800749e:	f02a 0201 	bic.w	r2, sl, #1
 80074a2:	443a      	add	r2, r7
 80074a4:	4282      	cmp	r2, r0
 80074a6:	bf94      	ite	ls
 80074a8:	2200      	movls	r2, #0
 80074aa:	2201      	movhi	r2, #1
 80074ac:	0073      	lsls	r3, r6, #1
 80074ae:	f003 0302 	and.w	r3, r3, #2
 80074b2:	f00a 0a01 	and.w	sl, sl, #1
 80074b6:	ea43 030a 	orr.w	r3, r3, sl
 80074ba:	2b01      	cmp	r3, #1
 80074bc:	d047      	beq.n	800754e <__gnu_unwind_pr_common+0x142>
 80074be:	2b02      	cmp	r3, #2
 80074c0:	d031      	beq.n	8007526 <__gnu_unwind_pr_common+0x11a>
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d1cb      	bne.n	800745e <__gnu_unwind_pr_common+0x52>
 80074c6:	b114      	cbz	r4, 80074ce <__gnu_unwind_pr_common+0xc2>
 80074c8:	2a00      	cmp	r2, #0
 80074ca:	f040 80c9 	bne.w	8007660 <__gnu_unwind_pr_common+0x254>
 80074ce:	f108 0204 	add.w	r2, r8, #4
 80074d2:	f8d2 a000 	ldr.w	sl, [r2]
 80074d6:	f1ba 0f00 	cmp.w	sl, #0
 80074da:	d1ce      	bne.n	800747a <__gnu_unwind_pr_common+0x6e>
 80074dc:	a905      	add	r1, sp, #20
 80074de:	4658      	mov	r0, fp
 80074e0:	9f02      	ldr	r7, [sp, #8]
 80074e2:	f000 fb3b 	bl	8007b5c <__gnu_unwind_execute>
 80074e6:	2800      	cmp	r0, #0
 80074e8:	d1b9      	bne.n	800745e <__gnu_unwind_pr_common+0x52>
 80074ea:	2f00      	cmp	r7, #0
 80074ec:	d0b3      	beq.n	8007456 <__gnu_unwind_pr_common+0x4a>
 80074ee:	210f      	movs	r1, #15
 80074f0:	4658      	mov	r0, fp
 80074f2:	f7ff ff17 	bl	8007324 <_Unwind_GetGR>
 80074f6:	210e      	movs	r1, #14
 80074f8:	4602      	mov	r2, r0
 80074fa:	4658      	mov	r0, fp
 80074fc:	f7ff ff38 	bl	8007370 <_Unwind_SetGR>
 8007500:	4a67      	ldr	r2, [pc, #412]	@ (80076a0 <__gnu_unwind_pr_common+0x294>)
 8007502:	210f      	movs	r1, #15
 8007504:	4658      	mov	r0, fp
 8007506:	f7ff ff33 	bl	8007370 <_Unwind_SetGR>
 800750a:	2007      	movs	r0, #7
 800750c:	e7a8      	b.n	8007460 <__gnu_unwind_pr_common+0x54>
 800750e:	2200      	movs	r2, #0
 8007510:	e7cc      	b.n	80074ac <__gnu_unwind_pr_common+0xa0>
 8007512:	6856      	ldr	r6, [r2, #4]
 8007514:	f102 0808 	add.w	r8, r2, #8
 8007518:	e7b7      	b.n	800748a <__gnu_unwind_pr_common+0x7e>
 800751a:	0209      	lsls	r1, r1, #8
 800751c:	9105      	str	r1, [sp, #20]
 800751e:	f88d 301d 	strb.w	r3, [sp, #29]
 8007522:	2103      	movs	r1, #3
 8007524:	e788      	b.n	8007438 <__gnu_unwind_pr_common+0x2c>
 8007526:	f8d8 6000 	ldr.w	r6, [r8]
 800752a:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800752e:	2c00      	cmp	r4, #0
 8007530:	d144      	bne.n	80075bc <__gnu_unwind_pr_common+0x1b0>
 8007532:	b122      	cbz	r2, 800753e <__gnu_unwind_pr_common+0x132>
 8007534:	9a01      	ldr	r2, [sp, #4]
 8007536:	2a00      	cmp	r2, #0
 8007538:	d05a      	beq.n	80075f0 <__gnu_unwind_pr_common+0x1e4>
 800753a:	2b00      	cmp	r3, #0
 800753c:	d058      	beq.n	80075f0 <__gnu_unwind_pr_common+0x1e4>
 800753e:	2e00      	cmp	r6, #0
 8007540:	da01      	bge.n	8007546 <__gnu_unwind_pr_common+0x13a>
 8007542:	f108 0804 	add.w	r8, r8, #4
 8007546:	3301      	adds	r3, #1
 8007548:	eb08 0283 	add.w	r2, r8, r3, lsl #2
 800754c:	e7c1      	b.n	80074d2 <__gnu_unwind_pr_common+0xc6>
 800754e:	b9ec      	cbnz	r4, 800758c <__gnu_unwind_pr_common+0x180>
 8007550:	b1ca      	cbz	r2, 8007586 <__gnu_unwind_pr_common+0x17a>
 8007552:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007556:	f8d8 2000 	ldr.w	r2, [r8]
 800755a:	1c99      	adds	r1, r3, #2
 800755c:	ea4f 72d2 	mov.w	r2, r2, lsr #31
 8007560:	f43f af7d 	beq.w	800745e <__gnu_unwind_pr_common+0x52>
 8007564:	f105 0158 	add.w	r1, r5, #88	@ 0x58
 8007568:	3301      	adds	r3, #1
 800756a:	9104      	str	r1, [sp, #16]
 800756c:	f000 808b 	beq.w	8007686 <__gnu_unwind_pr_common+0x27a>
 8007570:	f108 0004 	add.w	r0, r8, #4
 8007574:	f7ff fdbe 	bl	80070f4 <_Unwind_decode_typeinfo_ptr.constprop.0>
 8007578:	ab04      	add	r3, sp, #16
 800757a:	4601      	mov	r1, r0
 800757c:	4628      	mov	r0, r5
 800757e:	f01a faa5 	bl	8021acc <__cxa_type_match>
 8007582:	2800      	cmp	r0, #0
 8007584:	d157      	bne.n	8007636 <__gnu_unwind_pr_common+0x22a>
 8007586:	f108 0208 	add.w	r2, r8, #8
 800758a:	e7a2      	b.n	80074d2 <__gnu_unwind_pr_common+0xc6>
 800758c:	210d      	movs	r1, #13
 800758e:	4658      	mov	r0, fp
 8007590:	f7ff fec8 	bl	8007324 <_Unwind_GetGR>
 8007594:	6a2b      	ldr	r3, [r5, #32]
 8007596:	4283      	cmp	r3, r0
 8007598:	d1f5      	bne.n	8007586 <__gnu_unwind_pr_common+0x17a>
 800759a:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 800759c:	4598      	cmp	r8, r3
 800759e:	d1f2      	bne.n	8007586 <__gnu_unwind_pr_common+0x17a>
 80075a0:	4640      	mov	r0, r8
 80075a2:	f7ff fcdf 	bl	8006f64 <selfrel_offset31>
 80075a6:	210f      	movs	r1, #15
 80075a8:	4602      	mov	r2, r0
 80075aa:	4658      	mov	r0, fp
 80075ac:	f7ff fee0 	bl	8007370 <_Unwind_SetGR>
 80075b0:	462a      	mov	r2, r5
 80075b2:	2100      	movs	r1, #0
 80075b4:	4658      	mov	r0, fp
 80075b6:	f7ff fedb 	bl	8007370 <_Unwind_SetGR>
 80075ba:	e7a6      	b.n	800750a <__gnu_unwind_pr_common+0xfe>
 80075bc:	210d      	movs	r1, #13
 80075be:	4658      	mov	r0, fp
 80075c0:	9303      	str	r3, [sp, #12]
 80075c2:	f7ff feaf 	bl	8007324 <_Unwind_GetGR>
 80075c6:	6a2a      	ldr	r2, [r5, #32]
 80075c8:	9b03      	ldr	r3, [sp, #12]
 80075ca:	4282      	cmp	r2, r0
 80075cc:	d1b7      	bne.n	800753e <__gnu_unwind_pr_common+0x132>
 80075ce:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
 80075d0:	4590      	cmp	r8, r2
 80075d2:	d1b4      	bne.n	800753e <__gnu_unwind_pr_common+0x132>
 80075d4:	2700      	movs	r7, #0
 80075d6:	2204      	movs	r2, #4
 80075d8:	e9c5 720b 	strd	r7, r2, [r5, #44]	@ 0x2c
 80075dc:	4442      	add	r2, r8
 80075de:	62ab      	str	r3, [r5, #40]	@ 0x28
 80075e0:	636a      	str	r2, [r5, #52]	@ 0x34
 80075e2:	f8d8 2000 	ldr.w	r2, [r8]
 80075e6:	42ba      	cmp	r2, r7
 80075e8:	db55      	blt.n	8007696 <__gnu_unwind_pr_common+0x28a>
 80075ea:	2201      	movs	r2, #1
 80075ec:	9202      	str	r2, [sp, #8]
 80075ee:	e7aa      	b.n	8007546 <__gnu_unwind_pr_common+0x13a>
 80075f0:	9403      	str	r4, [sp, #12]
 80075f2:	f108 0a04 	add.w	sl, r8, #4
 80075f6:	2600      	movs	r6, #0
 80075f8:	f105 0758 	add.w	r7, r5, #88	@ 0x58
 80075fc:	461c      	mov	r4, r3
 80075fe:	e00d      	b.n	800761c <__gnu_unwind_pr_common+0x210>
 8007600:	4650      	mov	r0, sl
 8007602:	9704      	str	r7, [sp, #16]
 8007604:	f7ff fd76 	bl	80070f4 <_Unwind_decode_typeinfo_ptr.constprop.0>
 8007608:	2200      	movs	r2, #0
 800760a:	4601      	mov	r1, r0
 800760c:	ab04      	add	r3, sp, #16
 800760e:	4628      	mov	r0, r5
 8007610:	3601      	adds	r6, #1
 8007612:	f10a 0a04 	add.w	sl, sl, #4
 8007616:	f01a fa59 	bl	8021acc <__cxa_type_match>
 800761a:	b9e0      	cbnz	r0, 8007656 <__gnu_unwind_pr_common+0x24a>
 800761c:	42a6      	cmp	r6, r4
 800761e:	d1ef      	bne.n	8007600 <__gnu_unwind_pr_common+0x1f4>
 8007620:	210d      	movs	r1, #13
 8007622:	4658      	mov	r0, fp
 8007624:	f7ff fe7e 	bl	8007324 <_Unwind_GetGR>
 8007628:	9b04      	ldr	r3, [sp, #16]
 800762a:	f8c5 8028 	str.w	r8, [r5, #40]	@ 0x28
 800762e:	e9c5 0308 	strd	r0, r3, [r5, #32]
 8007632:	2006      	movs	r0, #6
 8007634:	e714      	b.n	8007460 <__gnu_unwind_pr_common+0x54>
 8007636:	4604      	mov	r4, r0
 8007638:	210d      	movs	r1, #13
 800763a:	4658      	mov	r0, fp
 800763c:	f7ff fe72 	bl	8007324 <_Unwind_GetGR>
 8007640:	9e04      	ldr	r6, [sp, #16]
 8007642:	6228      	str	r0, [r5, #32]
 8007644:	2c02      	cmp	r4, #2
 8007646:	bf04      	itt	eq
 8007648:	62ee      	streq	r6, [r5, #44]	@ 0x2c
 800764a:	f105 062c 	addeq.w	r6, r5, #44	@ 0x2c
 800764e:	e9c5 6809 	strd	r6, r8, [r5, #36]	@ 0x24
 8007652:	2006      	movs	r0, #6
 8007654:	e704      	b.n	8007460 <__gnu_unwind_pr_common+0x54>
 8007656:	4623      	mov	r3, r4
 8007658:	f8d8 6000 	ldr.w	r6, [r8]
 800765c:	9c03      	ldr	r4, [sp, #12]
 800765e:	e76e      	b.n	800753e <__gnu_unwind_pr_common+0x132>
 8007660:	4640      	mov	r0, r8
 8007662:	f7ff fc7f 	bl	8006f64 <selfrel_offset31>
 8007666:	f108 0204 	add.w	r2, r8, #4
 800766a:	4604      	mov	r4, r0
 800766c:	63aa      	str	r2, [r5, #56]	@ 0x38
 800766e:	4628      	mov	r0, r5
 8007670:	f01a fa80 	bl	8021b74 <__cxa_begin_cleanup>
 8007674:	2800      	cmp	r0, #0
 8007676:	f43f aef2 	beq.w	800745e <__gnu_unwind_pr_common+0x52>
 800767a:	4622      	mov	r2, r4
 800767c:	210f      	movs	r1, #15
 800767e:	4658      	mov	r0, fp
 8007680:	f7ff fe76 	bl	8007370 <_Unwind_SetGR>
 8007684:	e741      	b.n	800750a <__gnu_unwind_pr_common+0xfe>
 8007686:	460c      	mov	r4, r1
 8007688:	4658      	mov	r0, fp
 800768a:	210d      	movs	r1, #13
 800768c:	f7ff fe4a 	bl	8007324 <_Unwind_GetGR>
 8007690:	4626      	mov	r6, r4
 8007692:	6228      	str	r0, [r5, #32]
 8007694:	e7db      	b.n	800764e <__gnu_unwind_pr_common+0x242>
 8007696:	1c58      	adds	r0, r3, #1
 8007698:	eb08 0080 	add.w	r0, r8, r0, lsl #2
 800769c:	e781      	b.n	80075a2 <__gnu_unwind_pr_common+0x196>
 800769e:	bf00      	nop
 80076a0:	080223dd 	.word	0x080223dd

080076a4 <__aeabi_unwind_cpp_pr0>:
 80076a4:	2300      	movs	r3, #0
 80076a6:	e6b1      	b.n	800740c <__gnu_unwind_pr_common>

080076a8 <__aeabi_unwind_cpp_pr1>:
 80076a8:	2301      	movs	r3, #1
 80076aa:	e6af      	b.n	800740c <__gnu_unwind_pr_common>

080076ac <__aeabi_unwind_cpp_pr2>:
 80076ac:	2302      	movs	r3, #2
 80076ae:	e6ad      	b.n	800740c <__gnu_unwind_pr_common>

080076b0 <_Unwind_VRS_Pop>:
 80076b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80076b4:	4606      	mov	r6, r0
 80076b6:	b0c3      	sub	sp, #268	@ 0x10c
 80076b8:	4615      	mov	r5, r2
 80076ba:	461c      	mov	r4, r3
 80076bc:	2904      	cmp	r1, #4
 80076be:	f200 80d1 	bhi.w	8007864 <_Unwind_VRS_Pop+0x1b4>
 80076c2:	e8df f001 	tbb	[pc, r1]
 80076c6:	51ac      	.short	0x51ac
 80076c8:	2acf      	.short	0x2acf
 80076ca:	03          	.byte	0x03
 80076cb:	00          	.byte	0x00
 80076cc:	2c00      	cmp	r4, #0
 80076ce:	f040 80c9 	bne.w	8007864 <_Unwind_VRS_Pop+0x1b4>
 80076d2:	2a10      	cmp	r2, #16
 80076d4:	f200 80c6 	bhi.w	8007864 <_Unwind_VRS_Pop+0x1b4>
 80076d8:	6803      	ldr	r3, [r0, #0]
 80076da:	06dc      	lsls	r4, r3, #27
 80076dc:	f100 80e7 	bmi.w	80078ae <_Unwind_VRS_Pop+0x1fe>
 80076e0:	af20      	add	r7, sp, #128	@ 0x80
 80076e2:	4638      	mov	r0, r7
 80076e4:	f000 f9aa 	bl	8007a3c <__gnu_Unwind_Save_WMMXC>
 80076e8:	6bb4      	ldr	r4, [r6, #56]	@ 0x38
 80076ea:	4639      	mov	r1, r7
 80076ec:	2300      	movs	r3, #0
 80076ee:	f04f 0c01 	mov.w	ip, #1
 80076f2:	fa0c f203 	lsl.w	r2, ip, r3
 80076f6:	422a      	tst	r2, r5
 80076f8:	4620      	mov	r0, r4
 80076fa:	f103 0301 	add.w	r3, r3, #1
 80076fe:	d003      	beq.n	8007708 <_Unwind_VRS_Pop+0x58>
 8007700:	f850 2b04 	ldr.w	r2, [r0], #4
 8007704:	600a      	str	r2, [r1, #0]
 8007706:	4604      	mov	r4, r0
 8007708:	2b04      	cmp	r3, #4
 800770a:	f101 0104 	add.w	r1, r1, #4
 800770e:	d1f0      	bne.n	80076f2 <_Unwind_VRS_Pop+0x42>
 8007710:	63b4      	str	r4, [r6, #56]	@ 0x38
 8007712:	4638      	mov	r0, r7
 8007714:	f000 f988 	bl	8007a28 <__gnu_Unwind_Restore_WMMXC>
 8007718:	e099      	b.n	800784e <_Unwind_VRS_Pop+0x19e>
 800771a:	2c03      	cmp	r4, #3
 800771c:	f040 80a2 	bne.w	8007864 <_Unwind_VRS_Pop+0x1b4>
 8007720:	b294      	uxth	r4, r2
 8007722:	eb04 4312 	add.w	r3, r4, r2, lsr #16
 8007726:	2b10      	cmp	r3, #16
 8007728:	ea4f 4512 	mov.w	r5, r2, lsr #16
 800772c:	f200 809a 	bhi.w	8007864 <_Unwind_VRS_Pop+0x1b4>
 8007730:	6803      	ldr	r3, [r0, #0]
 8007732:	071f      	lsls	r7, r3, #28
 8007734:	f100 80c3 	bmi.w	80078be <_Unwind_VRS_Pop+0x20e>
 8007738:	af20      	add	r7, sp, #128	@ 0x80
 800773a:	4638      	mov	r0, r7
 800773c:	f000 f952 	bl	80079e4 <__gnu_Unwind_Save_WMMXD>
 8007740:	6bb2      	ldr	r2, [r6, #56]	@ 0x38
 8007742:	eb07 01c5 	add.w	r1, r7, r5, lsl #3
 8007746:	b154      	cbz	r4, 800775e <_Unwind_VRS_Pop+0xae>
 8007748:	460b      	mov	r3, r1
 800774a:	1ad0      	subs	r0, r2, r3
 800774c:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 8007750:	00e4      	lsls	r4, r4, #3
 8007752:	581d      	ldr	r5, [r3, r0]
 8007754:	f843 5b04 	str.w	r5, [r3], #4
 8007758:	428b      	cmp	r3, r1
 800775a:	d1fa      	bne.n	8007752 <_Unwind_VRS_Pop+0xa2>
 800775c:	4422      	add	r2, r4
 800775e:	63b2      	str	r2, [r6, #56]	@ 0x38
 8007760:	4638      	mov	r0, r7
 8007762:	f000 f91d 	bl	80079a0 <__gnu_Unwind_Restore_WMMXD>
 8007766:	e072      	b.n	800784e <_Unwind_VRS_Pop+0x19e>
 8007768:	2c01      	cmp	r4, #1
 800776a:	ea4f 4812 	mov.w	r8, r2, lsr #16
 800776e:	b295      	uxth	r5, r2
 8007770:	d071      	beq.n	8007856 <_Unwind_VRS_Pop+0x1a6>
 8007772:	2c05      	cmp	r4, #5
 8007774:	d176      	bne.n	8007864 <_Unwind_VRS_Pop+0x1b4>
 8007776:	eb08 0905 	add.w	r9, r8, r5
 800777a:	f1b9 0f20 	cmp.w	r9, #32
 800777e:	d871      	bhi.n	8007864 <_Unwind_VRS_Pop+0x1b4>
 8007780:	f1b8 0f0f 	cmp.w	r8, #15
 8007784:	d872      	bhi.n	800786c <_Unwind_VRS_Pop+0x1bc>
 8007786:	f1b9 0f10 	cmp.w	r9, #16
 800778a:	6803      	ldr	r3, [r0, #0]
 800778c:	f200 809f 	bhi.w	80078ce <_Unwind_VRS_Pop+0x21e>
 8007790:	07d9      	lsls	r1, r3, #31
 8007792:	d508      	bpl.n	80077a6 <_Unwind_VRS_Pop+0xf6>
 8007794:	f023 0301 	bic.w	r3, r3, #1
 8007798:	4630      	mov	r0, r6
 800779a:	f043 0302 	orr.w	r3, r3, #2
 800779e:	f840 3b48 	str.w	r3, [r0], #72
 80077a2:	f000 f8f1 	bl	8007988 <__gnu_Unwind_Save_VFP_D>
 80077a6:	af20      	add	r7, sp, #128	@ 0x80
 80077a8:	4638      	mov	r0, r7
 80077aa:	f000 f8ed 	bl	8007988 <__gnu_Unwind_Save_VFP_D>
 80077ae:	6bb3      	ldr	r3, [r6, #56]	@ 0x38
 80077b0:	2d00      	cmp	r5, #0
 80077b2:	f000 80b9 	beq.w	8007928 <_Unwind_VRS_Pop+0x278>
 80077b6:	006d      	lsls	r5, r5, #1
 80077b8:	1e6a      	subs	r2, r5, #1
 80077ba:	eb07 01c8 	add.w	r1, r7, r8, lsl #3
 80077be:	2500      	movs	r5, #0
 80077c0:	3201      	adds	r2, #1
 80077c2:	3904      	subs	r1, #4
 80077c4:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 80077c8:	f853 0b04 	ldr.w	r0, [r3], #4
 80077cc:	f841 0f04 	str.w	r0, [r1, #4]!
 80077d0:	4293      	cmp	r3, r2
 80077d2:	d1f9      	bne.n	80077c8 <_Unwind_VRS_Pop+0x118>
 80077d4:	2d00      	cmp	r5, #0
 80077d6:	f000 80a1 	beq.w	800791c <_Unwind_VRS_Pop+0x26c>
 80077da:	4641      	mov	r1, r8
 80077dc:	2910      	cmp	r1, #16
 80077de:	bf38      	it	cc
 80077e0:	2110      	movcc	r1, #16
 80077e2:	006b      	lsls	r3, r5, #1
 80077e4:	3910      	subs	r1, #16
 80077e6:	466f      	mov	r7, sp
 80077e8:	3b01      	subs	r3, #1
 80077ea:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
 80077ee:	3301      	adds	r3, #1
 80077f0:	3904      	subs	r1, #4
 80077f2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80077f6:	f852 0b04 	ldr.w	r0, [r2], #4
 80077fa:	f841 0f04 	str.w	r0, [r1, #4]!
 80077fe:	429a      	cmp	r2, r3
 8007800:	d1f9      	bne.n	80077f6 <_Unwind_VRS_Pop+0x146>
 8007802:	2c01      	cmp	r4, #1
 8007804:	f000 8088 	beq.w	8007918 <_Unwind_VRS_Pop+0x268>
 8007808:	f1b8 0f0f 	cmp.w	r8, #15
 800780c:	63b2      	str	r2, [r6, #56]	@ 0x38
 800780e:	d802      	bhi.n	8007816 <_Unwind_VRS_Pop+0x166>
 8007810:	a820      	add	r0, sp, #128	@ 0x80
 8007812:	f000 f8b5 	bl	8007980 <__gnu_Unwind_Restore_VFP_D>
 8007816:	4638      	mov	r0, r7
 8007818:	f000 f8ba 	bl	8007990 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 800781c:	e017      	b.n	800784e <_Unwind_VRS_Pop+0x19e>
 800781e:	bb0c      	cbnz	r4, 8007864 <_Unwind_VRS_Pop+0x1b4>
 8007820:	6b80      	ldr	r0, [r0, #56]	@ 0x38
 8007822:	4623      	mov	r3, r4
 8007824:	fa1f fc82 	uxth.w	ip, r2
 8007828:	2401      	movs	r4, #1
 800782a:	1d37      	adds	r7, r6, #4
 800782c:	fa04 f103 	lsl.w	r1, r4, r3
 8007830:	ea11 0f0c 	tst.w	r1, ip
 8007834:	4602      	mov	r2, r0
 8007836:	d004      	beq.n	8007842 <_Unwind_VRS_Pop+0x192>
 8007838:	f852 1b04 	ldr.w	r1, [r2], #4
 800783c:	f847 1023 	str.w	r1, [r7, r3, lsl #2]
 8007840:	4610      	mov	r0, r2
 8007842:	3301      	adds	r3, #1
 8007844:	2b10      	cmp	r3, #16
 8007846:	d1f1      	bne.n	800782c <_Unwind_VRS_Pop+0x17c>
 8007848:	04ac      	lsls	r4, r5, #18
 800784a:	d400      	bmi.n	800784e <_Unwind_VRS_Pop+0x19e>
 800784c:	63b0      	str	r0, [r6, #56]	@ 0x38
 800784e:	2000      	movs	r0, #0
 8007850:	b043      	add	sp, #268	@ 0x10c
 8007852:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007856:	eb08 0305 	add.w	r3, r8, r5
 800785a:	2b10      	cmp	r3, #16
 800785c:	d802      	bhi.n	8007864 <_Unwind_VRS_Pop+0x1b4>
 800785e:	f1b8 0f10 	cmp.w	r8, #16
 8007862:	d114      	bne.n	800788e <_Unwind_VRS_Pop+0x1de>
 8007864:	2002      	movs	r0, #2
 8007866:	b043      	add	sp, #268	@ 0x10c
 8007868:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800786c:	2d00      	cmp	r5, #0
 800786e:	d0ee      	beq.n	800784e <_Unwind_VRS_Pop+0x19e>
 8007870:	6803      	ldr	r3, [r0, #0]
 8007872:	075a      	lsls	r2, r3, #29
 8007874:	d45c      	bmi.n	8007930 <_Unwind_VRS_Pop+0x280>
 8007876:	466f      	mov	r7, sp
 8007878:	4638      	mov	r0, r7
 800787a:	f000 f88d 	bl	8007998 <__gnu_Unwind_Save_VFP_D_16_to_31>
 800787e:	6bb2      	ldr	r2, [r6, #56]	@ 0x38
 8007880:	006b      	lsls	r3, r5, #1
 8007882:	f1a8 0110 	sub.w	r1, r8, #16
 8007886:	3b01      	subs	r3, #1
 8007888:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
 800788c:	e7af      	b.n	80077ee <_Unwind_VRS_Pop+0x13e>
 800788e:	6803      	ldr	r3, [r0, #0]
 8007890:	07da      	lsls	r2, r3, #31
 8007892:	d459      	bmi.n	8007948 <_Unwind_VRS_Pop+0x298>
 8007894:	af20      	add	r7, sp, #128	@ 0x80
 8007896:	4638      	mov	r0, r7
 8007898:	f000 f86e 	bl	8007978 <__gnu_Unwind_Save_VFP>
 800789c:	6bb3      	ldr	r3, [r6, #56]	@ 0x38
 800789e:	2d00      	cmp	r5, #0
 80078a0:	d189      	bne.n	80077b6 <_Unwind_VRS_Pop+0x106>
 80078a2:	3304      	adds	r3, #4
 80078a4:	63b3      	str	r3, [r6, #56]	@ 0x38
 80078a6:	4638      	mov	r0, r7
 80078a8:	f000 f862 	bl	8007970 <__gnu_Unwind_Restore_VFP>
 80078ac:	e7cf      	b.n	800784e <_Unwind_VRS_Pop+0x19e>
 80078ae:	f023 0310 	bic.w	r3, r3, #16
 80078b2:	6003      	str	r3, [r0, #0]
 80078b4:	f500 70e8 	add.w	r0, r0, #464	@ 0x1d0
 80078b8:	f000 f8c0 	bl	8007a3c <__gnu_Unwind_Save_WMMXC>
 80078bc:	e710      	b.n	80076e0 <_Unwind_VRS_Pop+0x30>
 80078be:	f023 0308 	bic.w	r3, r3, #8
 80078c2:	6003      	str	r3, [r0, #0]
 80078c4:	f500 70a8 	add.w	r0, r0, #336	@ 0x150
 80078c8:	f000 f88c 	bl	80079e4 <__gnu_Unwind_Save_WMMXD>
 80078cc:	e734      	b.n	8007738 <_Unwind_VRS_Pop+0x88>
 80078ce:	07d9      	lsls	r1, r3, #31
 80078d0:	d508      	bpl.n	80078e4 <_Unwind_VRS_Pop+0x234>
 80078d2:	f023 0301 	bic.w	r3, r3, #1
 80078d6:	f043 0302 	orr.w	r3, r3, #2
 80078da:	f840 3b48 	str.w	r3, [r0], #72
 80078de:	f000 f853 	bl	8007988 <__gnu_Unwind_Save_VFP_D>
 80078e2:	6833      	ldr	r3, [r6, #0]
 80078e4:	0758      	lsls	r0, r3, #29
 80078e6:	d506      	bpl.n	80078f6 <_Unwind_VRS_Pop+0x246>
 80078e8:	4630      	mov	r0, r6
 80078ea:	f023 0304 	bic.w	r3, r3, #4
 80078ee:	f840 3bd0 	str.w	r3, [r0], #208
 80078f2:	f000 f851 	bl	8007998 <__gnu_Unwind_Save_VFP_D_16_to_31>
 80078f6:	af20      	add	r7, sp, #128	@ 0x80
 80078f8:	4638      	mov	r0, r7
 80078fa:	f000 f845 	bl	8007988 <__gnu_Unwind_Save_VFP_D>
 80078fe:	4668      	mov	r0, sp
 8007900:	f000 f84a 	bl	8007998 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8007904:	f1c8 0210 	rsb	r2, r8, #16
 8007908:	0052      	lsls	r2, r2, #1
 800790a:	6bb3      	ldr	r3, [r6, #56]	@ 0x38
 800790c:	f1a9 0510 	sub.w	r5, r9, #16
 8007910:	3a01      	subs	r2, #1
 8007912:	eb07 01c8 	add.w	r1, r7, r8, lsl #3
 8007916:	e753      	b.n	80077c0 <_Unwind_VRS_Pop+0x110>
 8007918:	af20      	add	r7, sp, #128	@ 0x80
 800791a:	e7c2      	b.n	80078a2 <_Unwind_VRS_Pop+0x1f2>
 800791c:	2c01      	cmp	r4, #1
 800791e:	d0c0      	beq.n	80078a2 <_Unwind_VRS_Pop+0x1f2>
 8007920:	f1b8 0f0f 	cmp.w	r8, #15
 8007924:	63b3      	str	r3, [r6, #56]	@ 0x38
 8007926:	d892      	bhi.n	800784e <_Unwind_VRS_Pop+0x19e>
 8007928:	4638      	mov	r0, r7
 800792a:	f000 f829 	bl	8007980 <__gnu_Unwind_Restore_VFP_D>
 800792e:	e78e      	b.n	800784e <_Unwind_VRS_Pop+0x19e>
 8007930:	f023 0304 	bic.w	r3, r3, #4
 8007934:	f840 3bd0 	str.w	r3, [r0], #208
 8007938:	466f      	mov	r7, sp
 800793a:	f000 f82d 	bl	8007998 <__gnu_Unwind_Save_VFP_D_16_to_31>
 800793e:	4638      	mov	r0, r7
 8007940:	f000 f82a 	bl	8007998 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8007944:	6bb2      	ldr	r2, [r6, #56]	@ 0x38
 8007946:	e79b      	b.n	8007880 <_Unwind_VRS_Pop+0x1d0>
 8007948:	4630      	mov	r0, r6
 800794a:	f023 0303 	bic.w	r3, r3, #3
 800794e:	f840 3b48 	str.w	r3, [r0], #72
 8007952:	f000 f811 	bl	8007978 <__gnu_Unwind_Save_VFP>
 8007956:	e79d      	b.n	8007894 <_Unwind_VRS_Pop+0x1e4>

08007958 <__restore_core_regs>:
 8007958:	f100 0134 	add.w	r1, r0, #52	@ 0x34
 800795c:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
 8007960:	469c      	mov	ip, r3
 8007962:	46a6      	mov	lr, r4
 8007964:	f84c 5d04 	str.w	r5, [ip, #-4]!
 8007968:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 800796c:	46e5      	mov	sp, ip
 800796e:	bd00      	pop	{pc}

08007970 <__gnu_Unwind_Restore_VFP>:
 8007970:	ec90 0b21 	fldmiax	r0, {d0-d15}	@ Deprecated
 8007974:	4770      	bx	lr
 8007976:	bf00      	nop

08007978 <__gnu_Unwind_Save_VFP>:
 8007978:	ec80 0b21 	fstmiax	r0, {d0-d15}	@ Deprecated
 800797c:	4770      	bx	lr
 800797e:	bf00      	nop

08007980 <__gnu_Unwind_Restore_VFP_D>:
 8007980:	ec90 0b20 	vldmia	r0, {d0-d15}
 8007984:	4770      	bx	lr
 8007986:	bf00      	nop

08007988 <__gnu_Unwind_Save_VFP_D>:
 8007988:	ec80 0b20 	vstmia	r0, {d0-d15}
 800798c:	4770      	bx	lr
 800798e:	bf00      	nop

08007990 <__gnu_Unwind_Restore_VFP_D_16_to_31>:
 8007990:	ecd0 0b20 	vldmia	r0, {d16-d31}
 8007994:	4770      	bx	lr
 8007996:	bf00      	nop

08007998 <__gnu_Unwind_Save_VFP_D_16_to_31>:
 8007998:	ecc0 0b20 	vstmia	r0, {d16-d31}
 800799c:	4770      	bx	lr
 800799e:	bf00      	nop

080079a0 <__gnu_Unwind_Restore_WMMXD>:
 80079a0:	ecf0 0102 	ldfe	f0, [r0], #8
 80079a4:	ecf0 1102 	ldfe	f1, [r0], #8
 80079a8:	ecf0 2102 	ldfe	f2, [r0], #8
 80079ac:	ecf0 3102 	ldfe	f3, [r0], #8
 80079b0:	ecf0 4102 	ldfe	f4, [r0], #8
 80079b4:	ecf0 5102 	ldfe	f5, [r0], #8
 80079b8:	ecf0 6102 	ldfe	f6, [r0], #8
 80079bc:	ecf0 7102 	ldfe	f7, [r0], #8
 80079c0:	ecf0 8102 	ldfp	f0, [r0], #8
 80079c4:	ecf0 9102 	ldfp	f1, [r0], #8
 80079c8:	ecf0 a102 	ldfp	f2, [r0], #8
 80079cc:	ecf0 b102 	ldfp	f3, [r0], #8
 80079d0:	ecf0 c102 	ldfp	f4, [r0], #8
 80079d4:	ecf0 d102 	ldfp	f5, [r0], #8
 80079d8:	ecf0 e102 	ldfp	f6, [r0], #8
 80079dc:	ecf0 f102 	ldfp	f7, [r0], #8
 80079e0:	4770      	bx	lr
 80079e2:	bf00      	nop

080079e4 <__gnu_Unwind_Save_WMMXD>:
 80079e4:	ece0 0102 	stfe	f0, [r0], #8
 80079e8:	ece0 1102 	stfe	f1, [r0], #8
 80079ec:	ece0 2102 	stfe	f2, [r0], #8
 80079f0:	ece0 3102 	stfe	f3, [r0], #8
 80079f4:	ece0 4102 	stfe	f4, [r0], #8
 80079f8:	ece0 5102 	stfe	f5, [r0], #8
 80079fc:	ece0 6102 	stfe	f6, [r0], #8
 8007a00:	ece0 7102 	stfe	f7, [r0], #8
 8007a04:	ece0 8102 	stfp	f0, [r0], #8
 8007a08:	ece0 9102 	stfp	f1, [r0], #8
 8007a0c:	ece0 a102 	stfp	f2, [r0], #8
 8007a10:	ece0 b102 	stfp	f3, [r0], #8
 8007a14:	ece0 c102 	stfp	f4, [r0], #8
 8007a18:	ece0 d102 	stfp	f5, [r0], #8
 8007a1c:	ece0 e102 	stfp	f6, [r0], #8
 8007a20:	ece0 f102 	stfp	f7, [r0], #8
 8007a24:	4770      	bx	lr
 8007a26:	bf00      	nop

08007a28 <__gnu_Unwind_Restore_WMMXC>:
 8007a28:	fcb0 8101 	ldc2	1, cr8, [r0], #4
 8007a2c:	fcb0 9101 	ldc2	1, cr9, [r0], #4
 8007a30:	fcb0 a101 	ldc2	1, cr10, [r0], #4
 8007a34:	fcb0 b101 	ldc2	1, cr11, [r0], #4
 8007a38:	4770      	bx	lr
 8007a3a:	bf00      	nop

08007a3c <__gnu_Unwind_Save_WMMXC>:
 8007a3c:	fca0 8101 	stc2	1, cr8, [r0], #4
 8007a40:	fca0 9101 	stc2	1, cr9, [r0], #4
 8007a44:	fca0 a101 	stc2	1, cr10, [r0], #4
 8007a48:	fca0 b101 	stc2	1, cr11, [r0], #4
 8007a4c:	4770      	bx	lr
 8007a4e:	bf00      	nop

08007a50 <_Unwind_RaiseException>:
 8007a50:	46ec      	mov	ip, sp
 8007a52:	b500      	push	{lr}
 8007a54:	e92d 5000 	stmdb	sp!, {ip, lr}
 8007a58:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8007a5c:	f04f 0300 	mov.w	r3, #0
 8007a60:	e92d 000c 	stmdb	sp!, {r2, r3}
 8007a64:	a901      	add	r1, sp, #4
 8007a66:	f7ff fbd7 	bl	8007218 <__gnu_Unwind_RaiseException>
 8007a6a:	f8dd e040 	ldr.w	lr, [sp, #64]	@ 0x40
 8007a6e:	b012      	add	sp, #72	@ 0x48
 8007a70:	4770      	bx	lr
 8007a72:	bf00      	nop

08007a74 <_Unwind_Resume>:
 8007a74:	46ec      	mov	ip, sp
 8007a76:	b500      	push	{lr}
 8007a78:	e92d 5000 	stmdb	sp!, {ip, lr}
 8007a7c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8007a80:	f04f 0300 	mov.w	r3, #0
 8007a84:	e92d 000c 	stmdb	sp!, {r2, r3}
 8007a88:	a901      	add	r1, sp, #4
 8007a8a:	f7ff fc01 	bl	8007290 <__gnu_Unwind_Resume>
 8007a8e:	f8dd e040 	ldr.w	lr, [sp, #64]	@ 0x40
 8007a92:	b012      	add	sp, #72	@ 0x48
 8007a94:	4770      	bx	lr
 8007a96:	bf00      	nop

08007a98 <_Unwind_Resume_or_Rethrow>:
 8007a98:	46ec      	mov	ip, sp
 8007a9a:	b500      	push	{lr}
 8007a9c:	e92d 5000 	stmdb	sp!, {ip, lr}
 8007aa0:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8007aa4:	f04f 0300 	mov.w	r3, #0
 8007aa8:	e92d 000c 	stmdb	sp!, {r2, r3}
 8007aac:	a901      	add	r1, sp, #4
 8007aae:	f7ff fc11 	bl	80072d4 <__gnu_Unwind_Resume_or_Rethrow>
 8007ab2:	f8dd e040 	ldr.w	lr, [sp, #64]	@ 0x40
 8007ab6:	b012      	add	sp, #72	@ 0x48
 8007ab8:	4770      	bx	lr
 8007aba:	bf00      	nop

08007abc <_Unwind_ForcedUnwind>:
 8007abc:	46ec      	mov	ip, sp
 8007abe:	b500      	push	{lr}
 8007ac0:	e92d 5000 	stmdb	sp!, {ip, lr}
 8007ac4:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8007ac8:	f04f 0300 	mov.w	r3, #0
 8007acc:	e92d 000c 	stmdb	sp!, {r2, r3}
 8007ad0:	ab01      	add	r3, sp, #4
 8007ad2:	f7ff fbd5 	bl	8007280 <__gnu_Unwind_ForcedUnwind>
 8007ad6:	f8dd e040 	ldr.w	lr, [sp, #64]	@ 0x40
 8007ada:	b012      	add	sp, #72	@ 0x48
 8007adc:	4770      	bx	lr
 8007ade:	bf00      	nop

08007ae0 <_Unwind_Backtrace>:
 8007ae0:	46ec      	mov	ip, sp
 8007ae2:	b500      	push	{lr}
 8007ae4:	e92d 5000 	stmdb	sp!, {ip, lr}
 8007ae8:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8007aec:	f04f 0300 	mov.w	r3, #0
 8007af0:	e92d 000c 	stmdb	sp!, {r2, r3}
 8007af4:	aa01      	add	r2, sp, #4
 8007af6:	f7ff fc47 	bl	8007388 <__gnu_Unwind_Backtrace>
 8007afa:	f8dd e040 	ldr.w	lr, [sp, #64]	@ 0x40
 8007afe:	b012      	add	sp, #72	@ 0x48
 8007b00:	4770      	bx	lr
 8007b02:	bf00      	nop

08007b04 <next_unwind_byte>:
 8007b04:	7a02      	ldrb	r2, [r0, #8]
 8007b06:	4603      	mov	r3, r0
 8007b08:	b97a      	cbnz	r2, 8007b2a <next_unwind_byte+0x26>
 8007b0a:	7a42      	ldrb	r2, [r0, #9]
 8007b0c:	b1a2      	cbz	r2, 8007b38 <next_unwind_byte+0x34>
 8007b0e:	6841      	ldr	r1, [r0, #4]
 8007b10:	3a01      	subs	r2, #1
 8007b12:	b410      	push	{r4}
 8007b14:	7242      	strb	r2, [r0, #9]
 8007b16:	6808      	ldr	r0, [r1, #0]
 8007b18:	2203      	movs	r2, #3
 8007b1a:	1d0c      	adds	r4, r1, #4
 8007b1c:	721a      	strb	r2, [r3, #8]
 8007b1e:	0202      	lsls	r2, r0, #8
 8007b20:	605c      	str	r4, [r3, #4]
 8007b22:	0e00      	lsrs	r0, r0, #24
 8007b24:	bc10      	pop	{r4}
 8007b26:	601a      	str	r2, [r3, #0]
 8007b28:	4770      	bx	lr
 8007b2a:	6800      	ldr	r0, [r0, #0]
 8007b2c:	3a01      	subs	r2, #1
 8007b2e:	721a      	strb	r2, [r3, #8]
 8007b30:	0202      	lsls	r2, r0, #8
 8007b32:	601a      	str	r2, [r3, #0]
 8007b34:	0e00      	lsrs	r0, r0, #24
 8007b36:	4770      	bx	lr
 8007b38:	20b0      	movs	r0, #176	@ 0xb0
 8007b3a:	4770      	bx	lr

08007b3c <_Unwind_GetGR.constprop.0>:
 8007b3c:	b500      	push	{lr}
 8007b3e:	b085      	sub	sp, #20
 8007b40:	2300      	movs	r3, #0
 8007b42:	aa03      	add	r2, sp, #12
 8007b44:	9200      	str	r2, [sp, #0]
 8007b46:	4619      	mov	r1, r3
 8007b48:	220c      	movs	r2, #12
 8007b4a:	f7ff fbd3 	bl	80072f4 <_Unwind_VRS_Get>
 8007b4e:	9803      	ldr	r0, [sp, #12]
 8007b50:	b005      	add	sp, #20
 8007b52:	f85d fb04 	ldr.w	pc, [sp], #4
 8007b56:	bf00      	nop

08007b58 <unwind_UCB_from_context>:
 8007b58:	e7f0      	b.n	8007b3c <_Unwind_GetGR.constprop.0>
 8007b5a:	bf00      	nop

08007b5c <__gnu_unwind_execute>:
 8007b5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007b60:	4606      	mov	r6, r0
 8007b62:	b085      	sub	sp, #20
 8007b64:	460d      	mov	r5, r1
 8007b66:	f04f 0800 	mov.w	r8, #0
 8007b6a:	4628      	mov	r0, r5
 8007b6c:	f7ff ffca 	bl	8007b04 <next_unwind_byte>
 8007b70:	28b0      	cmp	r0, #176	@ 0xb0
 8007b72:	4604      	mov	r4, r0
 8007b74:	f000 80da 	beq.w	8007d2c <__gnu_unwind_execute+0x1d0>
 8007b78:	0607      	lsls	r7, r0, #24
 8007b7a:	d546      	bpl.n	8007c0a <__gnu_unwind_execute+0xae>
 8007b7c:	f000 03f0 	and.w	r3, r0, #240	@ 0xf0
 8007b80:	2b80      	cmp	r3, #128	@ 0x80
 8007b82:	d05e      	beq.n	8007c42 <__gnu_unwind_execute+0xe6>
 8007b84:	2bb0      	cmp	r3, #176	@ 0xb0
 8007b86:	d073      	beq.n	8007c70 <__gnu_unwind_execute+0x114>
 8007b88:	d81b      	bhi.n	8007bc2 <__gnu_unwind_execute+0x66>
 8007b8a:	2b90      	cmp	r3, #144	@ 0x90
 8007b8c:	f000 809b 	beq.w	8007cc6 <__gnu_unwind_execute+0x16a>
 8007b90:	2ba0      	cmp	r3, #160	@ 0xa0
 8007b92:	d112      	bne.n	8007bba <__gnu_unwind_execute+0x5e>
 8007b94:	43c3      	mvns	r3, r0
 8007b96:	f003 0307 	and.w	r3, r3, #7
 8007b9a:	f44f 627f 	mov.w	r2, #4080	@ 0xff0
 8007b9e:	411a      	asrs	r2, r3
 8007ba0:	0701      	lsls	r1, r0, #28
 8007ba2:	f402 627f 	and.w	r2, r2, #4080	@ 0xff0
 8007ba6:	d501      	bpl.n	8007bac <__gnu_unwind_execute+0x50>
 8007ba8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007bac:	2300      	movs	r3, #0
 8007bae:	4619      	mov	r1, r3
 8007bb0:	4630      	mov	r0, r6
 8007bb2:	f7ff fd7d 	bl	80076b0 <_Unwind_VRS_Pop>
 8007bb6:	2800      	cmp	r0, #0
 8007bb8:	d0d7      	beq.n	8007b6a <__gnu_unwind_execute+0xe>
 8007bba:	2009      	movs	r0, #9
 8007bbc:	b005      	add	sp, #20
 8007bbe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007bc2:	2bc0      	cmp	r3, #192	@ 0xc0
 8007bc4:	d16d      	bne.n	8007ca2 <__gnu_unwind_execute+0x146>
 8007bc6:	28c6      	cmp	r0, #198	@ 0xc6
 8007bc8:	f000 8093 	beq.w	8007cf2 <__gnu_unwind_execute+0x196>
 8007bcc:	28c7      	cmp	r0, #199	@ 0xc7
 8007bce:	f000 80b2 	beq.w	8007d36 <__gnu_unwind_execute+0x1da>
 8007bd2:	f000 03f8 	and.w	r3, r0, #248	@ 0xf8
 8007bd6:	2bc0      	cmp	r3, #192	@ 0xc0
 8007bd8:	f000 80d2 	beq.w	8007d80 <__gnu_unwind_execute+0x224>
 8007bdc:	28c8      	cmp	r0, #200	@ 0xc8
 8007bde:	f000 80dd 	beq.w	8007d9c <__gnu_unwind_execute+0x240>
 8007be2:	28c9      	cmp	r0, #201	@ 0xc9
 8007be4:	d1e9      	bne.n	8007bba <__gnu_unwind_execute+0x5e>
 8007be6:	4628      	mov	r0, r5
 8007be8:	f7ff ff8c 	bl	8007b04 <next_unwind_byte>
 8007bec:	0302      	lsls	r2, r0, #12
 8007bee:	f000 000f 	and.w	r0, r0, #15
 8007bf2:	f402 2270 	and.w	r2, r2, #983040	@ 0xf0000
 8007bf6:	3001      	adds	r0, #1
 8007bf8:	4302      	orrs	r2, r0
 8007bfa:	2101      	movs	r1, #1
 8007bfc:	2305      	movs	r3, #5
 8007bfe:	4630      	mov	r0, r6
 8007c00:	f7ff fd56 	bl	80076b0 <_Unwind_VRS_Pop>
 8007c04:	2800      	cmp	r0, #0
 8007c06:	d0b0      	beq.n	8007b6a <__gnu_unwind_execute+0xe>
 8007c08:	e7d7      	b.n	8007bba <__gnu_unwind_execute+0x5e>
 8007c0a:	0083      	lsls	r3, r0, #2
 8007c0c:	b2db      	uxtb	r3, r3
 8007c0e:	1d1f      	adds	r7, r3, #4
 8007c10:	f10d 090c 	add.w	r9, sp, #12
 8007c14:	2300      	movs	r3, #0
 8007c16:	4619      	mov	r1, r3
 8007c18:	f8cd 9000 	str.w	r9, [sp]
 8007c1c:	220d      	movs	r2, #13
 8007c1e:	4630      	mov	r0, r6
 8007c20:	f7ff fb68 	bl	80072f4 <_Unwind_VRS_Get>
 8007c24:	9b03      	ldr	r3, [sp, #12]
 8007c26:	f8cd 9000 	str.w	r9, [sp]
 8007c2a:	0660      	lsls	r0, r4, #25
 8007c2c:	bf4c      	ite	mi
 8007c2e:	1bdf      	submi	r7, r3, r7
 8007c30:	18ff      	addpl	r7, r7, r3
 8007c32:	2300      	movs	r3, #0
 8007c34:	220d      	movs	r2, #13
 8007c36:	4619      	mov	r1, r3
 8007c38:	4630      	mov	r0, r6
 8007c3a:	9703      	str	r7, [sp, #12]
 8007c3c:	f7ff fb80 	bl	8007340 <_Unwind_VRS_Set>
 8007c40:	e793      	b.n	8007b6a <__gnu_unwind_execute+0xe>
 8007c42:	4628      	mov	r0, r5
 8007c44:	f7ff ff5e 	bl	8007b04 <next_unwind_byte>
 8007c48:	0224      	lsls	r4, r4, #8
 8007c4a:	4320      	orrs	r0, r4
 8007c4c:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8007c50:	d0b3      	beq.n	8007bba <__gnu_unwind_execute+0x5e>
 8007c52:	0104      	lsls	r4, r0, #4
 8007c54:	2300      	movs	r3, #0
 8007c56:	b2a2      	uxth	r2, r4
 8007c58:	4619      	mov	r1, r3
 8007c5a:	4630      	mov	r0, r6
 8007c5c:	f7ff fd28 	bl	80076b0 <_Unwind_VRS_Pop>
 8007c60:	2800      	cmp	r0, #0
 8007c62:	d1aa      	bne.n	8007bba <__gnu_unwind_execute+0x5e>
 8007c64:	f414 4f00 	tst.w	r4, #32768	@ 0x8000
 8007c68:	bf18      	it	ne
 8007c6a:	f04f 0801 	movne.w	r8, #1
 8007c6e:	e77c      	b.n	8007b6a <__gnu_unwind_execute+0xe>
 8007c70:	28b1      	cmp	r0, #177	@ 0xb1
 8007c72:	d051      	beq.n	8007d18 <__gnu_unwind_execute+0x1bc>
 8007c74:	28b2      	cmp	r0, #178	@ 0xb2
 8007c76:	f000 80ad 	beq.w	8007dd4 <__gnu_unwind_execute+0x278>
 8007c7a:	28b3      	cmp	r0, #179	@ 0xb3
 8007c7c:	d06d      	beq.n	8007d5a <__gnu_unwind_execute+0x1fe>
 8007c7e:	f000 03fc 	and.w	r3, r0, #252	@ 0xfc
 8007c82:	2bb4      	cmp	r3, #180	@ 0xb4
 8007c84:	d099      	beq.n	8007bba <__gnu_unwind_execute+0x5e>
 8007c86:	f000 0207 	and.w	r2, r0, #7
 8007c8a:	3201      	adds	r2, #1
 8007c8c:	2301      	movs	r3, #1
 8007c8e:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 8007c92:	4619      	mov	r1, r3
 8007c94:	4630      	mov	r0, r6
 8007c96:	f7ff fd0b 	bl	80076b0 <_Unwind_VRS_Pop>
 8007c9a:	2800      	cmp	r0, #0
 8007c9c:	f43f af65 	beq.w	8007b6a <__gnu_unwind_execute+0xe>
 8007ca0:	e78b      	b.n	8007bba <__gnu_unwind_execute+0x5e>
 8007ca2:	f000 03f8 	and.w	r3, r0, #248	@ 0xf8
 8007ca6:	2bd0      	cmp	r3, #208	@ 0xd0
 8007ca8:	d187      	bne.n	8007bba <__gnu_unwind_execute+0x5e>
 8007caa:	f000 0207 	and.w	r2, r0, #7
 8007cae:	3201      	adds	r2, #1
 8007cb0:	2305      	movs	r3, #5
 8007cb2:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 8007cb6:	2101      	movs	r1, #1
 8007cb8:	4630      	mov	r0, r6
 8007cba:	f7ff fcf9 	bl	80076b0 <_Unwind_VRS_Pop>
 8007cbe:	2800      	cmp	r0, #0
 8007cc0:	f43f af53 	beq.w	8007b6a <__gnu_unwind_execute+0xe>
 8007cc4:	e779      	b.n	8007bba <__gnu_unwind_execute+0x5e>
 8007cc6:	f000 030d 	and.w	r3, r0, #13
 8007cca:	2b0d      	cmp	r3, #13
 8007ccc:	f43f af75 	beq.w	8007bba <__gnu_unwind_execute+0x5e>
 8007cd0:	af03      	add	r7, sp, #12
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	f000 020f 	and.w	r2, r0, #15
 8007cd8:	4619      	mov	r1, r3
 8007cda:	9700      	str	r7, [sp, #0]
 8007cdc:	4630      	mov	r0, r6
 8007cde:	f7ff fb09 	bl	80072f4 <_Unwind_VRS_Get>
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	9700      	str	r7, [sp, #0]
 8007ce6:	220d      	movs	r2, #13
 8007ce8:	4619      	mov	r1, r3
 8007cea:	4630      	mov	r0, r6
 8007cec:	f7ff fb28 	bl	8007340 <_Unwind_VRS_Set>
 8007cf0:	e73b      	b.n	8007b6a <__gnu_unwind_execute+0xe>
 8007cf2:	4628      	mov	r0, r5
 8007cf4:	f7ff ff06 	bl	8007b04 <next_unwind_byte>
 8007cf8:	0302      	lsls	r2, r0, #12
 8007cfa:	f000 000f 	and.w	r0, r0, #15
 8007cfe:	3001      	adds	r0, #1
 8007d00:	f402 2270 	and.w	r2, r2, #983040	@ 0xf0000
 8007d04:	2303      	movs	r3, #3
 8007d06:	4302      	orrs	r2, r0
 8007d08:	4619      	mov	r1, r3
 8007d0a:	4630      	mov	r0, r6
 8007d0c:	f7ff fcd0 	bl	80076b0 <_Unwind_VRS_Pop>
 8007d10:	2800      	cmp	r0, #0
 8007d12:	f43f af2a 	beq.w	8007b6a <__gnu_unwind_execute+0xe>
 8007d16:	e750      	b.n	8007bba <__gnu_unwind_execute+0x5e>
 8007d18:	4628      	mov	r0, r5
 8007d1a:	f7ff fef3 	bl	8007b04 <next_unwind_byte>
 8007d1e:	1e43      	subs	r3, r0, #1
 8007d20:	b2db      	uxtb	r3, r3
 8007d22:	2b0e      	cmp	r3, #14
 8007d24:	4602      	mov	r2, r0
 8007d26:	f67f af41 	bls.w	8007bac <__gnu_unwind_execute+0x50>
 8007d2a:	e746      	b.n	8007bba <__gnu_unwind_execute+0x5e>
 8007d2c:	f1b8 0f00 	cmp.w	r8, #0
 8007d30:	d040      	beq.n	8007db4 <__gnu_unwind_execute+0x258>
 8007d32:	2000      	movs	r0, #0
 8007d34:	e742      	b.n	8007bbc <__gnu_unwind_execute+0x60>
 8007d36:	4628      	mov	r0, r5
 8007d38:	f7ff fee4 	bl	8007b04 <next_unwind_byte>
 8007d3c:	1e43      	subs	r3, r0, #1
 8007d3e:	b2db      	uxtb	r3, r3
 8007d40:	2b0e      	cmp	r3, #14
 8007d42:	4602      	mov	r2, r0
 8007d44:	f63f af39 	bhi.w	8007bba <__gnu_unwind_execute+0x5e>
 8007d48:	2300      	movs	r3, #0
 8007d4a:	2104      	movs	r1, #4
 8007d4c:	4630      	mov	r0, r6
 8007d4e:	f7ff fcaf 	bl	80076b0 <_Unwind_VRS_Pop>
 8007d52:	2800      	cmp	r0, #0
 8007d54:	f43f af09 	beq.w	8007b6a <__gnu_unwind_execute+0xe>
 8007d58:	e72f      	b.n	8007bba <__gnu_unwind_execute+0x5e>
 8007d5a:	4628      	mov	r0, r5
 8007d5c:	f7ff fed2 	bl	8007b04 <next_unwind_byte>
 8007d60:	0302      	lsls	r2, r0, #12
 8007d62:	f000 000f 	and.w	r0, r0, #15
 8007d66:	3001      	adds	r0, #1
 8007d68:	f402 2270 	and.w	r2, r2, #983040	@ 0xf0000
 8007d6c:	2301      	movs	r3, #1
 8007d6e:	4302      	orrs	r2, r0
 8007d70:	4619      	mov	r1, r3
 8007d72:	4630      	mov	r0, r6
 8007d74:	f7ff fc9c 	bl	80076b0 <_Unwind_VRS_Pop>
 8007d78:	2800      	cmp	r0, #0
 8007d7a:	f43f aef6 	beq.w	8007b6a <__gnu_unwind_execute+0xe>
 8007d7e:	e71c      	b.n	8007bba <__gnu_unwind_execute+0x5e>
 8007d80:	f000 020f 	and.w	r2, r0, #15
 8007d84:	3201      	adds	r2, #1
 8007d86:	2303      	movs	r3, #3
 8007d88:	f442 2220 	orr.w	r2, r2, #655360	@ 0xa0000
 8007d8c:	4619      	mov	r1, r3
 8007d8e:	4630      	mov	r0, r6
 8007d90:	f7ff fc8e 	bl	80076b0 <_Unwind_VRS_Pop>
 8007d94:	2800      	cmp	r0, #0
 8007d96:	f43f aee8 	beq.w	8007b6a <__gnu_unwind_execute+0xe>
 8007d9a:	e70e      	b.n	8007bba <__gnu_unwind_execute+0x5e>
 8007d9c:	4628      	mov	r0, r5
 8007d9e:	f7ff feb1 	bl	8007b04 <next_unwind_byte>
 8007da2:	f000 02f0 	and.w	r2, r0, #240	@ 0xf0
 8007da6:	f000 030f 	and.w	r3, r0, #15
 8007daa:	3210      	adds	r2, #16
 8007dac:	3301      	adds	r3, #1
 8007dae:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
 8007db2:	e722      	b.n	8007bfa <__gnu_unwind_execute+0x9e>
 8007db4:	ac03      	add	r4, sp, #12
 8007db6:	4643      	mov	r3, r8
 8007db8:	4641      	mov	r1, r8
 8007dba:	220e      	movs	r2, #14
 8007dbc:	9400      	str	r4, [sp, #0]
 8007dbe:	4630      	mov	r0, r6
 8007dc0:	f7ff fa98 	bl	80072f4 <_Unwind_VRS_Get>
 8007dc4:	9400      	str	r4, [sp, #0]
 8007dc6:	4643      	mov	r3, r8
 8007dc8:	220f      	movs	r2, #15
 8007dca:	4641      	mov	r1, r8
 8007dcc:	4630      	mov	r0, r6
 8007dce:	f7ff fab7 	bl	8007340 <_Unwind_VRS_Set>
 8007dd2:	e7ae      	b.n	8007d32 <__gnu_unwind_execute+0x1d6>
 8007dd4:	2300      	movs	r3, #0
 8007dd6:	f10d 090c 	add.w	r9, sp, #12
 8007dda:	220d      	movs	r2, #13
 8007ddc:	4619      	mov	r1, r3
 8007dde:	f8cd 9000 	str.w	r9, [sp]
 8007de2:	4630      	mov	r0, r6
 8007de4:	f7ff fa86 	bl	80072f4 <_Unwind_VRS_Get>
 8007de8:	4628      	mov	r0, r5
 8007dea:	f7ff fe8b 	bl	8007b04 <next_unwind_byte>
 8007dee:	0602      	lsls	r2, r0, #24
 8007df0:	9c03      	ldr	r4, [sp, #12]
 8007df2:	f04f 0702 	mov.w	r7, #2
 8007df6:	d50b      	bpl.n	8007e10 <__gnu_unwind_execute+0x2b4>
 8007df8:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
 8007dfc:	40b8      	lsls	r0, r7
 8007dfe:	4404      	add	r4, r0
 8007e00:	4628      	mov	r0, r5
 8007e02:	9403      	str	r4, [sp, #12]
 8007e04:	f7ff fe7e 	bl	8007b04 <next_unwind_byte>
 8007e08:	0603      	lsls	r3, r0, #24
 8007e0a:	f107 0707 	add.w	r7, r7, #7
 8007e0e:	d4f3      	bmi.n	8007df8 <__gnu_unwind_execute+0x29c>
 8007e10:	fa00 f207 	lsl.w	r2, r0, r7
 8007e14:	f504 7401 	add.w	r4, r4, #516	@ 0x204
 8007e18:	4422      	add	r2, r4
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	9203      	str	r2, [sp, #12]
 8007e1e:	f8cd 9000 	str.w	r9, [sp]
 8007e22:	220d      	movs	r2, #13
 8007e24:	4619      	mov	r1, r3
 8007e26:	4630      	mov	r0, r6
 8007e28:	f7ff fa8a 	bl	8007340 <_Unwind_VRS_Set>
 8007e2c:	e69d      	b.n	8007b6a <__gnu_unwind_execute+0xe>
 8007e2e:	bf00      	nop

08007e30 <__gnu_unwind_frame>:
 8007e30:	b510      	push	{r4, lr}
 8007e32:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 8007e34:	6853      	ldr	r3, [r2, #4]
 8007e36:	b084      	sub	sp, #16
 8007e38:	f04f 0c03 	mov.w	ip, #3
 8007e3c:	3208      	adds	r2, #8
 8007e3e:	021c      	lsls	r4, r3, #8
 8007e40:	4608      	mov	r0, r1
 8007e42:	0e1b      	lsrs	r3, r3, #24
 8007e44:	a901      	add	r1, sp, #4
 8007e46:	9401      	str	r4, [sp, #4]
 8007e48:	9202      	str	r2, [sp, #8]
 8007e4a:	f88d c00c 	strb.w	ip, [sp, #12]
 8007e4e:	f88d 300d 	strb.w	r3, [sp, #13]
 8007e52:	f7ff fe83 	bl	8007b5c <__gnu_unwind_execute>
 8007e56:	b004      	add	sp, #16
 8007e58:	bd10      	pop	{r4, pc}
 8007e5a:	bf00      	nop

08007e5c <_Unwind_GetRegionStart>:
 8007e5c:	b508      	push	{r3, lr}
 8007e5e:	f7ff fe7b 	bl	8007b58 <unwind_UCB_from_context>
 8007e62:	6c80      	ldr	r0, [r0, #72]	@ 0x48
 8007e64:	bd08      	pop	{r3, pc}
 8007e66:	bf00      	nop

08007e68 <_Unwind_GetLanguageSpecificData>:
 8007e68:	b508      	push	{r3, lr}
 8007e6a:	f7ff fe75 	bl	8007b58 <unwind_UCB_from_context>
 8007e6e:	6cc0      	ldr	r0, [r0, #76]	@ 0x4c
 8007e70:	79c3      	ldrb	r3, [r0, #7]
 8007e72:	3302      	adds	r3, #2
 8007e74:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8007e78:	bd08      	pop	{r3, pc}
 8007e7a:	bf00      	nop

08007e7c <__aeabi_idiv0>:
 8007e7c:	4770      	bx	lr
 8007e7e:	bf00      	nop

08007e80 <BSP_PB_Init>:
  *       are mapped on the same push button named "User"
  *       on the board serigraphy.
  * @retval None
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8007e80:	b530      	push	{r4, r5, lr}
 8007e82:	b089      	sub	sp, #36	@ 0x24
 8007e84:	460c      	mov	r4, r1
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the BUTTON clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8007e86:	4605      	mov	r5, r0
 8007e88:	b970      	cbnz	r0, 8007ea8 <BSP_PB_Init+0x28>
 8007e8a:	4b2b      	ldr	r3, [pc, #172]	@ (8007f38 <BSP_PB_Init+0xb8>)
 8007e8c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007e8e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007e92:	631a      	str	r2, [r3, #48]	@ 0x30
 8007e94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007e9a:	9300      	str	r3, [sp, #0]
 8007e9c:	9b00      	ldr	r3, [sp, #0]
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 8007e9e:	b1dc      	cbz	r4, 8007ed8 <BSP_PB_Init+0x58>
    gpio_init_structure.Pull = GPIO_NOPULL;
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
  }
  
  if(ButtonMode == BUTTON_MODE_EXTI)
 8007ea0:	2c01      	cmp	r4, #1
 8007ea2:	d029      	beq.n	8007ef8 <BSP_PB_Init+0x78>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
  }
}
 8007ea4:	b009      	add	sp, #36	@ 0x24
 8007ea6:	bd30      	pop	{r4, r5, pc}
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8007ea8:	2801      	cmp	r0, #1
 8007eaa:	d00a      	beq.n	8007ec2 <BSP_PB_Init+0x42>
 8007eac:	4b22      	ldr	r3, [pc, #136]	@ (8007f38 <BSP_PB_Init+0xb8>)
 8007eae:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007eb0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007eb4:	631a      	str	r2, [r3, #48]	@ 0x30
 8007eb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007eb8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007ebc:	9302      	str	r3, [sp, #8]
 8007ebe:	9b02      	ldr	r3, [sp, #8]
 8007ec0:	e7ed      	b.n	8007e9e <BSP_PB_Init+0x1e>
 8007ec2:	4b1d      	ldr	r3, [pc, #116]	@ (8007f38 <BSP_PB_Init+0xb8>)
 8007ec4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007ec6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007eca:	631a      	str	r2, [r3, #48]	@ 0x30
 8007ecc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ece:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007ed2:	9301      	str	r3, [sp, #4]
 8007ed4:	9b01      	ldr	r3, [sp, #4]
 8007ed6:	e7e2      	b.n	8007e9e <BSP_PB_Init+0x1e>
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 8007ed8:	4b18      	ldr	r3, [pc, #96]	@ (8007f3c <BSP_PB_Init+0xbc>)
 8007eda:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
 8007ede:	9303      	str	r3, [sp, #12]
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8007ee0:	2300      	movs	r3, #0
 8007ee2:	9304      	str	r3, [sp, #16]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8007ee4:	9305      	str	r3, [sp, #20]
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8007ee6:	2302      	movs	r3, #2
 8007ee8:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8007eea:	a903      	add	r1, sp, #12
 8007eec:	4b14      	ldr	r3, [pc, #80]	@ (8007f40 <BSP_PB_Init+0xc0>)
 8007eee:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007ef2:	f001 f825 	bl	8008f40 <HAL_GPIO_Init>
 8007ef6:	e7d3      	b.n	8007ea0 <BSP_PB_Init+0x20>
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 8007ef8:	4b10      	ldr	r3, [pc, #64]	@ (8007f3c <BSP_PB_Init+0xbc>)
 8007efa:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
 8007efe:	9303      	str	r3, [sp, #12]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8007f00:	2300      	movs	r3, #0
 8007f02:	9305      	str	r3, [sp, #20]
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8007f04:	2302      	movs	r3, #2
 8007f06:	9306      	str	r3, [sp, #24]
    if(Button != BUTTON_WAKEUP)
 8007f08:	b19d      	cbz	r5, 8007f32 <BSP_PB_Init+0xb2>
      gpio_init_structure.Mode = GPIO_MODE_IT_FALLING; 
 8007f0a:	4b0e      	ldr	r3, [pc, #56]	@ (8007f44 <BSP_PB_Init+0xc4>)
 8007f0c:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8007f0e:	a903      	add	r1, sp, #12
 8007f10:	4b0b      	ldr	r3, [pc, #44]	@ (8007f40 <BSP_PB_Init+0xc0>)
 8007f12:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007f16:	f001 f813 	bl	8008f40 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8007f1a:	4b0b      	ldr	r3, [pc, #44]	@ (8007f48 <BSP_PB_Init+0xc8>)
 8007f1c:	f913 4015 	ldrsb.w	r4, [r3, r5, lsl #1]
 8007f20:	2200      	movs	r2, #0
 8007f22:	210f      	movs	r1, #15
 8007f24:	4620      	mov	r0, r4
 8007f26:	f000 fd4d 	bl	80089c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8007f2a:	4620      	mov	r0, r4
 8007f2c:	f000 fd5a 	bl	80089e4 <HAL_NVIC_EnableIRQ>
}
 8007f30:	e7b8      	b.n	8007ea4 <BSP_PB_Init+0x24>
      gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8007f32:	4b06      	ldr	r3, [pc, #24]	@ (8007f4c <BSP_PB_Init+0xcc>)
 8007f34:	9304      	str	r3, [sp, #16]
 8007f36:	e7ea      	b.n	8007f0e <BSP_PB_Init+0x8e>
 8007f38:	40023800 	.word	0x40023800
 8007f3c:	0802d404 	.word	0x0802d404
 8007f40:	20000004 	.word	0x20000004
 8007f44:	10210000 	.word	0x10210000
 8007f48:	0802d3fc 	.word	0x0802d3fc
 8007f4c:	10110000 	.word	0x10110000

08007f50 <BSP_PB_GetState>:
  *       are mapped on the same push button named "User"
  *       on the board serigraphy.
  * @retval The Button GPIO pin value
  */
uint32_t BSP_PB_GetState(Button_TypeDef Button)
{
 8007f50:	b508      	push	{r3, lr}
  return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 8007f52:	4b04      	ldr	r3, [pc, #16]	@ (8007f64 <BSP_PB_GetState+0x14>)
 8007f54:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
 8007f58:	4b03      	ldr	r3, [pc, #12]	@ (8007f68 <BSP_PB_GetState+0x18>)
 8007f5a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8007f5e:	f001 f8e1 	bl	8009124 <HAL_GPIO_ReadPin>
}
 8007f62:	bd08      	pop	{r3, pc}
 8007f64:	0802d404 	.word	0x0802d404
 8007f68:	20000004 	.word	0x20000004

08007f6c <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8007f6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f70:	b082      	sub	sp, #8
 8007f72:	4605      	mov	r5, r0
 8007f74:	460e      	mov	r6, r1
 8007f76:	4617      	mov	r7, r2
 8007f78:	4698      	mov	r8, r3
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 8007f7a:	4b1a      	ldr	r3, [pc, #104]	@ (8007fe4 <LL_FillBuffer+0x78>)
 8007f7c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8007f80:	605a      	str	r2, [r3, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8007f82:	4b19      	ldr	r3, [pc, #100]	@ (8007fe8 <LL_FillBuffer+0x7c>)
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	4c19      	ldr	r4, [pc, #100]	@ (8007fec <LL_FillBuffer+0x80>)
 8007f88:	2234      	movs	r2, #52	@ 0x34
 8007f8a:	fb02 4c03 	mla	ip, r2, r3, r4
 8007f8e:	f8dc 3048 	ldr.w	r3, [ip, #72]	@ 0x48
 8007f92:	2b02      	cmp	r3, #2
 8007f94:	d00d      	beq.n	8007fb2 <LL_FillBuffer+0x46>
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8007f96:	4b13      	ldr	r3, [pc, #76]	@ (8007fe4 <LL_FillBuffer+0x78>)
 8007f98:	2200      	movs	r2, #0
 8007f9a:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 8007f9c:	4811      	ldr	r0, [pc, #68]	@ (8007fe4 <LL_FillBuffer+0x78>)
 8007f9e:	9b08      	ldr	r3, [sp, #32]
 8007fa0:	60c3      	str	r3, [r0, #12]
  
  hDma2dHandler.Instance = DMA2D;
 8007fa2:	4b13      	ldr	r3, [pc, #76]	@ (8007ff0 <LL_FillBuffer+0x84>)
 8007fa4:	6003      	str	r3, [r0, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 8007fa6:	f000 fe7f 	bl	8008ca8 <HAL_DMA2D_Init>
 8007faa:	b130      	cbz	r0, 8007fba <LL_FillBuffer+0x4e>
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
      }
    }
  } 
}
 8007fac:	b002      	add	sp, #8
 8007fae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
 8007fb2:	4b0c      	ldr	r3, [pc, #48]	@ (8007fe4 <LL_FillBuffer+0x78>)
 8007fb4:	2202      	movs	r2, #2
 8007fb6:	609a      	str	r2, [r3, #8]
 8007fb8:	e7f0      	b.n	8007f9c <LL_FillBuffer+0x30>
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 8007fba:	4629      	mov	r1, r5
 8007fbc:	4809      	ldr	r0, [pc, #36]	@ (8007fe4 <LL_FillBuffer+0x78>)
 8007fbe:	f000 ff5d 	bl	8008e7c <HAL_DMA2D_ConfigLayer>
 8007fc2:	2800      	cmp	r0, #0
 8007fc4:	d1f2      	bne.n	8007fac <LL_FillBuffer+0x40>
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8007fc6:	f8cd 8000 	str.w	r8, [sp]
 8007fca:	463b      	mov	r3, r7
 8007fcc:	4632      	mov	r2, r6
 8007fce:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007fd0:	4804      	ldr	r0, [pc, #16]	@ (8007fe4 <LL_FillBuffer+0x78>)
 8007fd2:	f000 fe97 	bl	8008d04 <HAL_DMA2D_Start>
 8007fd6:	2800      	cmp	r0, #0
 8007fd8:	d1e8      	bne.n	8007fac <LL_FillBuffer+0x40>
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 8007fda:	210a      	movs	r1, #10
 8007fdc:	4801      	ldr	r0, [pc, #4]	@ (8007fe4 <LL_FillBuffer+0x78>)
 8007fde:	f000 fead 	bl	8008d3c <HAL_DMA2D_PollForTransfer>
}
 8007fe2:	e7e3      	b.n	8007fac <LL_FillBuffer+0x40>
 8007fe4:	20008b9c 	.word	0x20008b9c
 8007fe8:	20008b98 	.word	0x20008b98
 8007fec:	20008bdc 	.word	0x20008bdc
 8007ff0:	4002b000 	.word	0x4002b000

08007ff4 <BSP_LCD_GetXSize>:
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8007ff4:	4b03      	ldr	r3, [pc, #12]	@ (8008004 <BSP_LCD_GetXSize+0x10>)
 8007ff6:	681a      	ldr	r2, [r3, #0]
 8007ff8:	4b03      	ldr	r3, [pc, #12]	@ (8008008 <BSP_LCD_GetXSize+0x14>)
 8007ffa:	2134      	movs	r1, #52	@ 0x34
 8007ffc:	fb01 3302 	mla	r3, r1, r2, r3
}
 8008000:	6e18      	ldr	r0, [r3, #96]	@ 0x60
 8008002:	4770      	bx	lr
 8008004:	20008b98 	.word	0x20008b98
 8008008:	20008bdc 	.word	0x20008bdc

0800800c <BSP_LCD_GetYSize>:
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 800800c:	4b03      	ldr	r3, [pc, #12]	@ (800801c <BSP_LCD_GetYSize+0x10>)
 800800e:	681a      	ldr	r2, [r3, #0]
 8008010:	4b03      	ldr	r3, [pc, #12]	@ (8008020 <BSP_LCD_GetYSize+0x14>)
 8008012:	2134      	movs	r1, #52	@ 0x34
 8008014:	fb01 3302 	mla	r3, r1, r2, r3
}
 8008018:	6e58      	ldr	r0, [r3, #100]	@ 0x64
 800801a:	4770      	bx	lr
 800801c:	20008b98 	.word	0x20008b98
 8008020:	20008bdc 	.word	0x20008bdc

08008024 <BSP_LCD_LayerRgb565Init>:
{     
 8008024:	b570      	push	{r4, r5, r6, lr}
 8008026:	b08e      	sub	sp, #56	@ 0x38
 8008028:	4604      	mov	r4, r0
 800802a:	460e      	mov	r6, r1
  layer_cfg.WindowX0 = 0;
 800802c:	2500      	movs	r5, #0
 800802e:	9501      	str	r5, [sp, #4]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 8008030:	f7ff ffe0 	bl	8007ff4 <BSP_LCD_GetXSize>
 8008034:	9002      	str	r0, [sp, #8]
  layer_cfg.WindowY0 = 0;
 8008036:	9503      	str	r5, [sp, #12]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 8008038:	f7ff ffe8 	bl	800800c <BSP_LCD_GetYSize>
 800803c:	9004      	str	r0, [sp, #16]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 800803e:	2302      	movs	r3, #2
 8008040:	9305      	str	r3, [sp, #20]
  layer_cfg.FBStartAdress = FB_Address;
 8008042:	960a      	str	r6, [sp, #40]	@ 0x28
  layer_cfg.Alpha = 255;
 8008044:	23ff      	movs	r3, #255	@ 0xff
 8008046:	9306      	str	r3, [sp, #24]
  layer_cfg.Alpha0 = 0;
 8008048:	9507      	str	r5, [sp, #28]
  layer_cfg.Backcolor.Blue = 0;
 800804a:	f88d 5034 	strb.w	r5, [sp, #52]	@ 0x34
  layer_cfg.Backcolor.Green = 0;
 800804e:	f88d 5035 	strb.w	r5, [sp, #53]	@ 0x35
  layer_cfg.Backcolor.Red = 0;
 8008052:	f88d 5036 	strb.w	r5, [sp, #54]	@ 0x36
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8008056:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800805a:	9308      	str	r3, [sp, #32]
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800805c:	2307      	movs	r3, #7
 800805e:	9309      	str	r3, [sp, #36]	@ 0x24
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 8008060:	f7ff ffc8 	bl	8007ff4 <BSP_LCD_GetXSize>
 8008064:	900b      	str	r0, [sp, #44]	@ 0x2c
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 8008066:	f7ff ffd1 	bl	800800c <BSP_LCD_GetYSize>
 800806a:	900c      	str	r0, [sp, #48]	@ 0x30
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 800806c:	4622      	mov	r2, r4
 800806e:	a901      	add	r1, sp, #4
 8008070:	480a      	ldr	r0, [pc, #40]	@ (800809c <BSP_LCD_LayerRgb565Init+0x78>)
 8008072:	f001 fd07 	bl	8009a84 <HAL_LTDC_ConfigLayer>
  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8008076:	4a0a      	ldr	r2, [pc, #40]	@ (80080a0 <BSP_LCD_LayerRgb565Init+0x7c>)
 8008078:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800807c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008080:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8008084:	6059      	str	r1, [r3, #4]
  DrawProp[LayerIndex].pFont     = &Font24;
 8008086:	4907      	ldr	r1, [pc, #28]	@ (80080a4 <BSP_LCD_LayerRgb565Init+0x80>)
 8008088:	6099      	str	r1, [r3, #8]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 800808a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 800808e:	f04f 437f 	mov.w	r3, #4278190080	@ 0xff000000
 8008092:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
}
 8008096:	b00e      	add	sp, #56	@ 0x38
 8008098:	bd70      	pop	{r4, r5, r6, pc}
 800809a:	bf00      	nop
 800809c:	20008bdc 	.word	0x20008bdc
 80080a0:	20008b80 	.word	0x20008b80
 80080a4:	20008420 	.word	0x20008420

080080a8 <BSP_LCD_SelectLayer>:
  ActiveLayer = LayerIndex;
 80080a8:	4b01      	ldr	r3, [pc, #4]	@ (80080b0 <BSP_LCD_SelectLayer+0x8>)
 80080aa:	6018      	str	r0, [r3, #0]
} 
 80080ac:	4770      	bx	lr
 80080ae:	bf00      	nop
 80080b0:	20008b98 	.word	0x20008b98

080080b4 <BSP_LCD_SetTransparency>:
{    
 80080b4:	b508      	push	{r3, lr}
 80080b6:	4602      	mov	r2, r0
  HAL_LTDC_SetAlpha(&hLtdcHandler, Transparency, LayerIndex);
 80080b8:	4801      	ldr	r0, [pc, #4]	@ (80080c0 <BSP_LCD_SetTransparency+0xc>)
 80080ba:	f001 fd17 	bl	8009aec <HAL_LTDC_SetAlpha>
}
 80080be:	bd08      	pop	{r3, pc}
 80080c0:	20008bdc 	.word	0x20008bdc

080080c4 <BSP_LCD_SetTextColor>:
  DrawProp[ActiveLayer].TextColor = Color;
 80080c4:	4b03      	ldr	r3, [pc, #12]	@ (80080d4 <BSP_LCD_SetTextColor+0x10>)
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80080cc:	4a02      	ldr	r2, [pc, #8]	@ (80080d8 <BSP_LCD_SetTextColor+0x14>)
 80080ce:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
 80080d2:	4770      	bx	lr
 80080d4:	20008b98 	.word	0x20008b98
 80080d8:	20008b80 	.word	0x20008b80

080080dc <BSP_LCD_SetFont>:
  DrawProp[ActiveLayer].pFont = fonts;
 80080dc:	4b04      	ldr	r3, [pc, #16]	@ (80080f0 <BSP_LCD_SetFont+0x14>)
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80080e4:	4a03      	ldr	r2, [pc, #12]	@ (80080f4 <BSP_LCD_SetFont+0x18>)
 80080e6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80080ea:	6098      	str	r0, [r3, #8]
}
 80080ec:	4770      	bx	lr
 80080ee:	bf00      	nop
 80080f0:	20008b98 	.word	0x20008b98
 80080f4:	20008b80 	.word	0x20008b80

080080f8 <BSP_LCD_Clear>:
{ 
 80080f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80080fa:	b083      	sub	sp, #12
 80080fc:	4605      	mov	r5, r0
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 80080fe:	4b0b      	ldr	r3, [pc, #44]	@ (800812c <BSP_LCD_Clear+0x34>)
 8008100:	681e      	ldr	r6, [r3, #0]
 8008102:	4b0b      	ldr	r3, [pc, #44]	@ (8008130 <BSP_LCD_Clear+0x38>)
 8008104:	2234      	movs	r2, #52	@ 0x34
 8008106:	fb02 3306 	mla	r3, r2, r6, r3
 800810a:	6ddf      	ldr	r7, [r3, #92]	@ 0x5c
 800810c:	f7ff ff72 	bl	8007ff4 <BSP_LCD_GetXSize>
 8008110:	4604      	mov	r4, r0
 8008112:	f7ff ff7b 	bl	800800c <BSP_LCD_GetYSize>
 8008116:	4603      	mov	r3, r0
 8008118:	9501      	str	r5, [sp, #4]
 800811a:	2200      	movs	r2, #0
 800811c:	9200      	str	r2, [sp, #0]
 800811e:	4622      	mov	r2, r4
 8008120:	4639      	mov	r1, r7
 8008122:	4630      	mov	r0, r6
 8008124:	f7ff ff22 	bl	8007f6c <LL_FillBuffer>
}
 8008128:	b003      	add	sp, #12
 800812a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800812c:	20008b98 	.word	0x20008b98
 8008130:	20008bdc 	.word	0x20008bdc

08008134 <BSP_LCD_DrawPixel>:
{
 8008134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008136:	4604      	mov	r4, r0
 8008138:	460d      	mov	r5, r1
 800813a:	4616      	mov	r6, r2
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 800813c:	4b10      	ldr	r3, [pc, #64]	@ (8008180 <BSP_LCD_DrawPixel+0x4c>)
 800813e:	681a      	ldr	r2, [r3, #0]
 8008140:	4b10      	ldr	r3, [pc, #64]	@ (8008184 <BSP_LCD_DrawPixel+0x50>)
 8008142:	2134      	movs	r1, #52	@ 0x34
 8008144:	fb01 3302 	mla	r3, r1, r2, r3
 8008148:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800814a:	2b02      	cmp	r3, #2
 800814c:	d00b      	beq.n	8008166 <BSP_LCD_DrawPixel+0x32>
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 800814e:	4b0d      	ldr	r3, [pc, #52]	@ (8008184 <BSP_LCD_DrawPixel+0x50>)
 8008150:	2134      	movs	r1, #52	@ 0x34
 8008152:	fb01 3302 	mla	r3, r1, r2, r3
 8008156:	6ddf      	ldr	r7, [r3, #92]	@ 0x5c
 8008158:	f7ff ff4c 	bl	8007ff4 <BSP_LCD_GetXSize>
 800815c:	fb00 4405 	mla	r4, r0, r5, r4
 8008160:	f847 6024 	str.w	r6, [r7, r4, lsl #2]
}
 8008164:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 8008166:	4b07      	ldr	r3, [pc, #28]	@ (8008184 <BSP_LCD_DrawPixel+0x50>)
 8008168:	fb01 3302 	mla	r3, r1, r2, r3
 800816c:	6ddf      	ldr	r7, [r3, #92]	@ 0x5c
 800816e:	f7ff ff41 	bl	8007ff4 <BSP_LCD_GetXSize>
 8008172:	fb00 4005 	mla	r0, r0, r5, r4
 8008176:	b2b6      	uxth	r6, r6
 8008178:	f827 6010 	strh.w	r6, [r7, r0, lsl #1]
 800817c:	e7f2      	b.n	8008164 <BSP_LCD_DrawPixel+0x30>
 800817e:	bf00      	nop
 8008180:	20008b98 	.word	0x20008b98
 8008184:	20008bdc 	.word	0x20008bdc

08008188 <DrawChar>:
{
 8008188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800818c:	b083      	sub	sp, #12
 800818e:	4680      	mov	r8, r0
 8008190:	468b      	mov	fp, r1
 8008192:	9200      	str	r2, [sp, #0]
  height = DrawProp[ActiveLayer].pFont->Height;
 8008194:	4b34      	ldr	r3, [pc, #208]	@ (8008268 <DrawChar+0xe0>)
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800819c:	4a33      	ldr	r2, [pc, #204]	@ (800826c <DrawChar+0xe4>)
 800819e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80081a2:	689b      	ldr	r3, [r3, #8]
 80081a4:	88da      	ldrh	r2, [r3, #6]
 80081a6:	9201      	str	r2, [sp, #4]
  width  = DrawProp[ActiveLayer].pFont->Width;
 80081a8:	889d      	ldrh	r5, [r3, #4]
  offset =  8 *((width + 7)/8) -  width ;
 80081aa:	1de9      	adds	r1, r5, #7
 80081ac:	ea4f 09e1 	mov.w	r9, r1, asr #3
 80081b0:	ea4f 07c9 	mov.w	r7, r9, lsl #3
 80081b4:	b2ff      	uxtb	r7, r7
 80081b6:	b2eb      	uxtb	r3, r5
 80081b8:	1aff      	subs	r7, r7, r3
 80081ba:	b2ff      	uxtb	r7, r7
  for(i = 0; i < height; i++)
 80081bc:	f04f 0a00 	mov.w	sl, #0
 80081c0:	4653      	mov	r3, sl
 80081c2:	46ca      	mov	sl, r9
 80081c4:	4699      	mov	r9, r3
 80081c6:	e036      	b.n	8008236 <DrawChar+0xae>
      line =  pchar[0];      
 80081c8:	9a00      	ldr	r2, [sp, #0]
 80081ca:	5cd6      	ldrb	r6, [r2, r3]
    for (j = 0; j < width; j++)
 80081cc:	2400      	movs	r4, #0
 80081ce:	e014      	b.n	80081fa <DrawChar+0x72>
      line =  (pchar[0]<< 8) | pchar[1];      
 80081d0:	9a00      	ldr	r2, [sp, #0]
 80081d2:	5cd3      	ldrb	r3, [r2, r3]
 80081d4:	7846      	ldrb	r6, [r0, #1]
 80081d6:	ea46 2603 	orr.w	r6, r6, r3, lsl #8
      break;
 80081da:	e7f7      	b.n	80081cc <DrawChar+0x44>
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 80081dc:	4b22      	ldr	r3, [pc, #136]	@ (8008268 <DrawChar+0xe0>)
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80081e4:	4a21      	ldr	r2, [pc, #132]	@ (800826c <DrawChar+0xe4>)
 80081e6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80081ea:	eb08 0004 	add.w	r0, r8, r4
 80081ee:	685a      	ldr	r2, [r3, #4]
 80081f0:	4659      	mov	r1, fp
 80081f2:	b280      	uxth	r0, r0
 80081f4:	f7ff ff9e 	bl	8008134 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 80081f8:	3401      	adds	r4, #1
 80081fa:	42a5      	cmp	r5, r4
 80081fc:	d915      	bls.n	800822a <DrawChar+0xa2>
      if(line & (1 << (width- j + offset- 1))) 
 80081fe:	1b2b      	subs	r3, r5, r4
 8008200:	443b      	add	r3, r7
 8008202:	3b01      	subs	r3, #1
 8008204:	2201      	movs	r2, #1
 8008206:	fa02 f303 	lsl.w	r3, r2, r3
 800820a:	4233      	tst	r3, r6
 800820c:	d0e6      	beq.n	80081dc <DrawChar+0x54>
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 800820e:	4b16      	ldr	r3, [pc, #88]	@ (8008268 <DrawChar+0xe0>)
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8008216:	eb08 0004 	add.w	r0, r8, r4
 800821a:	4a14      	ldr	r2, [pc, #80]	@ (800826c <DrawChar+0xe4>)
 800821c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8008220:	4659      	mov	r1, fp
 8008222:	b280      	uxth	r0, r0
 8008224:	f7ff ff86 	bl	8008134 <BSP_LCD_DrawPixel>
 8008228:	e7e6      	b.n	80081f8 <DrawChar+0x70>
    Ypos++;
 800822a:	f10b 0b01 	add.w	fp, fp, #1
 800822e:	fa1f fb8b 	uxth.w	fp, fp
  for(i = 0; i < height; i++)
 8008232:	f109 0901 	add.w	r9, r9, #1
 8008236:	9b01      	ldr	r3, [sp, #4]
 8008238:	454b      	cmp	r3, r9
 800823a:	d912      	bls.n	8008262 <DrawChar+0xda>
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 800823c:	fb09 f30a 	mul.w	r3, r9, sl
 8008240:	9a00      	ldr	r2, [sp, #0]
 8008242:	18d0      	adds	r0, r2, r3
    switch(((width + 7)/8))
 8008244:	f1ba 0f01 	cmp.w	sl, #1
 8008248:	d0be      	beq.n	80081c8 <DrawChar+0x40>
 800824a:	f1ba 0f02 	cmp.w	sl, #2
 800824e:	d0bf      	beq.n	80081d0 <DrawChar+0x48>
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 8008250:	9a00      	ldr	r2, [sp, #0]
 8008252:	5cd3      	ldrb	r3, [r2, r3]
 8008254:	7846      	ldrb	r6, [r0, #1]
 8008256:	0236      	lsls	r6, r6, #8
 8008258:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
 800825c:	7883      	ldrb	r3, [r0, #2]
 800825e:	431e      	orrs	r6, r3
      break;
 8008260:	e7b4      	b.n	80081cc <DrawChar+0x44>
}
 8008262:	b003      	add	sp, #12
 8008264:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008268:	20008b98 	.word	0x20008b98
 800826c:	20008b80 	.word	0x20008b80

08008270 <BSP_LCD_DisplayChar>:
{
 8008270:	b538      	push	{r3, r4, r5, lr}
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8008272:	4b0b      	ldr	r3, [pc, #44]	@ (80082a0 <BSP_LCD_DisplayChar+0x30>)
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800827a:	4c0a      	ldr	r4, [pc, #40]	@ (80082a4 <BSP_LCD_DisplayChar+0x34>)
 800827c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008280:	689c      	ldr	r4, [r3, #8]
 8008282:	6825      	ldr	r5, [r4, #0]
 8008284:	f1a2 0320 	sub.w	r3, r2, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8008288:	88e2      	ldrh	r2, [r4, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 800828a:	fb02 f303 	mul.w	r3, r2, r3
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 800828e:	88a2      	ldrh	r2, [r4, #4]
 8008290:	3207      	adds	r2, #7
 8008292:	10d2      	asrs	r2, r2, #3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8008294:	fb02 5203 	mla	r2, r2, r3, r5
 8008298:	f7ff ff76 	bl	8008188 <DrawChar>
}
 800829c:	bd38      	pop	{r3, r4, r5, pc}
 800829e:	bf00      	nop
 80082a0:	20008b98 	.word	0x20008b98
 80082a4:	20008b80 	.word	0x20008b80

080082a8 <BSP_LCD_DisplayStringAt>:
{
 80082a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80082ac:	4604      	mov	r4, r0
 80082ae:	460e      	mov	r6, r1
 80082b0:	4615      	mov	r5, r2
 80082b2:	4698      	mov	r8, r3
  uint8_t  *ptr = Text;
 80082b4:	4694      	mov	ip, r2
  uint32_t size = 0, xsize = 0; 
 80082b6:	2700      	movs	r7, #0
  while (*ptr++) size ++ ;
 80082b8:	e000      	b.n	80082bc <BSP_LCD_DisplayStringAt+0x14>
 80082ba:	3701      	adds	r7, #1
 80082bc:	f81c 2b01 	ldrb.w	r2, [ip], #1
 80082c0:	2a00      	cmp	r2, #0
 80082c2:	d1fa      	bne.n	80082ba <BSP_LCD_DisplayStringAt+0x12>
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 80082c4:	f7ff fe96 	bl	8007ff4 <BSP_LCD_GetXSize>
 80082c8:	4b2a      	ldr	r3, [pc, #168]	@ (8008374 <BSP_LCD_DisplayStringAt+0xcc>)
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80082d0:	4a29      	ldr	r2, [pc, #164]	@ (8008378 <BSP_LCD_DisplayStringAt+0xd0>)
 80082d2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80082d6:	689b      	ldr	r3, [r3, #8]
 80082d8:	889a      	ldrh	r2, [r3, #4]
 80082da:	fbb0 f0f2 	udiv	r0, r0, r2
  switch (Mode)
 80082de:	f1b8 0f01 	cmp.w	r8, #1
 80082e2:	d007      	beq.n	80082f4 <BSP_LCD_DisplayStringAt+0x4c>
 80082e4:	f1b8 0f02 	cmp.w	r8, #2
 80082e8:	d00c      	beq.n	8008304 <BSP_LCD_DisplayStringAt+0x5c>
  if ((ref_column < 1) || (ref_column >= 0x8000))
 80082ea:	b223      	sxth	r3, r4
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	dd3e      	ble.n	800836e <BSP_LCD_DisplayStringAt+0xc6>
    ref_column = 1;
 80082f0:	2700      	movs	r7, #0
 80082f2:	e021      	b.n	8008338 <BSP_LCD_DisplayStringAt+0x90>
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 80082f4:	1bc0      	subs	r0, r0, r7
 80082f6:	fb00 f302 	mul.w	r3, r0, r2
 80082fa:	f3c3 034f 	ubfx	r3, r3, #1, #16
 80082fe:	4423      	add	r3, r4
 8008300:	b29c      	uxth	r4, r3
      break;
 8008302:	e7f2      	b.n	80082ea <BSP_LCD_DisplayStringAt+0x42>
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8008304:	1bc3      	subs	r3, r0, r7
 8008306:	fb13 f302 	smulbb	r3, r3, r2
 800830a:	b29b      	uxth	r3, r3
 800830c:	1b1b      	subs	r3, r3, r4
 800830e:	b29c      	uxth	r4, r3
      break;
 8008310:	e7eb      	b.n	80082ea <BSP_LCD_DisplayStringAt+0x42>
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 8008312:	4642      	mov	r2, r8
 8008314:	4631      	mov	r1, r6
 8008316:	4620      	mov	r0, r4
 8008318:	f7ff ffaa 	bl	8008270 <BSP_LCD_DisplayChar>
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 800831c:	4b15      	ldr	r3, [pc, #84]	@ (8008374 <BSP_LCD_DisplayStringAt+0xcc>)
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8008324:	4a14      	ldr	r2, [pc, #80]	@ (8008378 <BSP_LCD_DisplayStringAt+0xd0>)
 8008326:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800832a:	689b      	ldr	r3, [r3, #8]
 800832c:	889b      	ldrh	r3, [r3, #4]
 800832e:	4423      	add	r3, r4
 8008330:	b29c      	uxth	r4, r3
    Text++;
 8008332:	3501      	adds	r5, #1
    i++;
 8008334:	3701      	adds	r7, #1
 8008336:	b2bf      	uxth	r7, r7
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8008338:	f895 8000 	ldrb.w	r8, [r5]
 800833c:	f7ff fe5a 	bl	8007ff4 <BSP_LCD_GetXSize>
 8008340:	4b0c      	ldr	r3, [pc, #48]	@ (8008374 <BSP_LCD_DisplayStringAt+0xcc>)
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8008348:	4a0b      	ldr	r2, [pc, #44]	@ (8008378 <BSP_LCD_DisplayStringAt+0xd0>)
 800834a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800834e:	689b      	ldr	r3, [r3, #8]
 8008350:	889a      	ldrh	r2, [r3, #4]
 8008352:	fb02 0317 	mls	r3, r2, r7, r0
 8008356:	b29b      	uxth	r3, r3
 8008358:	f1b8 0100 	subs.w	r1, r8, #0
 800835c:	bf18      	it	ne
 800835e:	2101      	movne	r1, #1
 8008360:	4293      	cmp	r3, r2
 8008362:	bf38      	it	cc
 8008364:	2100      	movcc	r1, #0
 8008366:	2900      	cmp	r1, #0
 8008368:	d1d3      	bne.n	8008312 <BSP_LCD_DisplayStringAt+0x6a>
}
 800836a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ref_column = 1;
 800836e:	2401      	movs	r4, #1
 8008370:	e7be      	b.n	80082f0 <BSP_LCD_DisplayStringAt+0x48>
 8008372:	bf00      	nop
 8008374:	20008b98 	.word	0x20008b98
 8008378:	20008b80 	.word	0x20008b80

0800837c <BSP_LCD_DisplayOn>:
{
 800837c:	b508      	push	{r3, lr}
  __HAL_LTDC_ENABLE(&hLtdcHandler);
 800837e:	4b09      	ldr	r3, [pc, #36]	@ (80083a4 <BSP_LCD_DisplayOn+0x28>)
 8008380:	681a      	ldr	r2, [r3, #0]
 8008382:	6993      	ldr	r3, [r2, #24]
 8008384:	f043 0301 	orr.w	r3, r3, #1
 8008388:	6193      	str	r3, [r2, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 800838a:	2201      	movs	r2, #1
 800838c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8008390:	4805      	ldr	r0, [pc, #20]	@ (80083a8 <BSP_LCD_DisplayOn+0x2c>)
 8008392:	f000 fece 	bl	8009132 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 8008396:	2201      	movs	r2, #1
 8008398:	2108      	movs	r1, #8
 800839a:	4804      	ldr	r0, [pc, #16]	@ (80083ac <BSP_LCD_DisplayOn+0x30>)
 800839c:	f000 fec9 	bl	8009132 <HAL_GPIO_WritePin>
}
 80083a0:	bd08      	pop	{r3, pc}
 80083a2:	bf00      	nop
 80083a4:	20008bdc 	.word	0x20008bdc
 80083a8:	40022000 	.word	0x40022000
 80083ac:	40022800 	.word	0x40022800

080083b0 <BSP_LCD_MspInit>:
{
 80083b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80083b2:	b08f      	sub	sp, #60	@ 0x3c
  __HAL_RCC_LTDC_CLK_ENABLE();
 80083b4:	4b4a      	ldr	r3, [pc, #296]	@ (80084e0 <BSP_LCD_MspInit+0x130>)
 80083b6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80083b8:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 80083bc:	645a      	str	r2, [r3, #68]	@ 0x44
 80083be:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80083c0:	f002 6280 	and.w	r2, r2, #67108864	@ 0x4000000
 80083c4:	9200      	str	r2, [sp, #0]
 80083c6:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_DMA2D_CLK_ENABLE();
 80083c8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80083ca:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80083ce:	631a      	str	r2, [r3, #48]	@ 0x30
 80083d0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80083d2:	f402 0200 	and.w	r2, r2, #8388608	@ 0x800000
 80083d6:	9201      	str	r2, [sp, #4]
 80083d8:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80083da:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80083dc:	f042 0210 	orr.w	r2, r2, #16
 80083e0:	631a      	str	r2, [r3, #48]	@ 0x30
 80083e2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80083e4:	f002 0210 	and.w	r2, r2, #16
 80083e8:	9202      	str	r2, [sp, #8]
 80083ea:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80083ec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80083ee:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80083f2:	631a      	str	r2, [r3, #48]	@ 0x30
 80083f4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80083f6:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 80083fa:	9203      	str	r2, [sp, #12]
 80083fc:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80083fe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008400:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008404:	631a      	str	r2, [r3, #48]	@ 0x30
 8008406:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008408:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 800840c:	9204      	str	r2, [sp, #16]
 800840e:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8008410:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008412:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008416:	631a      	str	r2, [r3, #48]	@ 0x30
 8008418:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800841a:	f402 7200 	and.w	r2, r2, #512	@ 0x200
 800841e:	9205      	str	r2, [sp, #20]
 8008420:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8008422:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008424:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008428:	631a      	str	r2, [r3, #48]	@ 0x30
 800842a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800842c:	f402 6280 	and.w	r2, r2, #1024	@ 0x400
 8008430:	9206      	str	r2, [sp, #24]
 8008432:	9a06      	ldr	r2, [sp, #24]
  LCD_DISP_GPIO_CLK_ENABLE();
 8008434:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008436:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800843a:	631a      	str	r2, [r3, #48]	@ 0x30
 800843c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800843e:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 8008442:	9207      	str	r2, [sp, #28]
 8008444:	9a07      	ldr	r2, [sp, #28]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8008446:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008448:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800844c:	631a      	str	r2, [r3, #48]	@ 0x30
 800844e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008450:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008454:	9308      	str	r3, [sp, #32]
 8008456:	9b08      	ldr	r3, [sp, #32]
  gpio_init_structure.Pin       = GPIO_PIN_4;
 8008458:	2310      	movs	r3, #16
 800845a:	9309      	str	r3, [sp, #36]	@ 0x24
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800845c:	2402      	movs	r4, #2
 800845e:	940a      	str	r4, [sp, #40]	@ 0x28
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8008460:	2300      	movs	r3, #0
 8008462:	930b      	str	r3, [sp, #44]	@ 0x2c
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8008464:	940c      	str	r4, [sp, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 8008466:	250e      	movs	r5, #14
 8008468:	950d      	str	r5, [sp, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800846a:	a909      	add	r1, sp, #36	@ 0x24
 800846c:	481d      	ldr	r0, [pc, #116]	@ (80084e4 <BSP_LCD_MspInit+0x134>)
 800846e:	f000 fd67 	bl	8008f40 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = GPIO_PIN_12;
 8008472:	f44f 5780 	mov.w	r7, #4096	@ 0x1000
 8008476:	9709      	str	r7, [sp, #36]	@ 0x24
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8008478:	940a      	str	r4, [sp, #40]	@ 0x28
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 800847a:	2309      	movs	r3, #9
 800847c:	930d      	str	r3, [sp, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 800847e:	a909      	add	r1, sp, #36	@ 0x24
 8008480:	4819      	ldr	r0, [pc, #100]	@ (80084e8 <BSP_LCD_MspInit+0x138>)
 8008482:	f000 fd5d 	bl	8008f40 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | \
 8008486:	f44f 4367 	mov.w	r3, #59136	@ 0xe700
 800848a:	9309      	str	r3, [sp, #36]	@ 0x24
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800848c:	940a      	str	r4, [sp, #40]	@ 0x28
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 800848e:	950d      	str	r5, [sp, #52]	@ 0x34
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8008490:	4e16      	ldr	r6, [pc, #88]	@ (80084ec <BSP_LCD_MspInit+0x13c>)
 8008492:	a909      	add	r1, sp, #36	@ 0x24
 8008494:	4630      	mov	r0, r6
 8008496:	f000 fd53 	bl	8008f40 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 800849a:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 800849e:	9309      	str	r3, [sp, #36]	@ 0x24
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80084a0:	940a      	str	r4, [sp, #40]	@ 0x28
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80084a2:	950d      	str	r5, [sp, #52]	@ 0x34
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 80084a4:	a909      	add	r1, sp, #36	@ 0x24
 80084a6:	4812      	ldr	r0, [pc, #72]	@ (80084f0 <BSP_LCD_MspInit+0x140>)
 80084a8:	f000 fd4a 	bl	8008f40 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 80084ac:	23f7      	movs	r3, #247	@ 0xf7
 80084ae:	9309      	str	r3, [sp, #36]	@ 0x24
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80084b0:	940a      	str	r4, [sp, #40]	@ 0x28
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80084b2:	950d      	str	r5, [sp, #52]	@ 0x34
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 80084b4:	4c0f      	ldr	r4, [pc, #60]	@ (80084f4 <BSP_LCD_MspInit+0x144>)
 80084b6:	a909      	add	r1, sp, #36	@ 0x24
 80084b8:	4620      	mov	r0, r4
 80084ba:	f000 fd41 	bl	8008f40 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 80084be:	9709      	str	r7, [sp, #36]	@ 0x24
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 80084c0:	2501      	movs	r5, #1
 80084c2:	950a      	str	r5, [sp, #40]	@ 0x28
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 80084c4:	a909      	add	r1, sp, #36	@ 0x24
 80084c6:	4630      	mov	r0, r6
 80084c8:	f000 fd3a 	bl	8008f40 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 80084cc:	2308      	movs	r3, #8
 80084ce:	9309      	str	r3, [sp, #36]	@ 0x24
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 80084d0:	950a      	str	r5, [sp, #40]	@ 0x28
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 80084d2:	a909      	add	r1, sp, #36	@ 0x24
 80084d4:	4620      	mov	r0, r4
 80084d6:	f000 fd33 	bl	8008f40 <HAL_GPIO_Init>
}
 80084da:	b00f      	add	sp, #60	@ 0x3c
 80084dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80084de:	bf00      	nop
 80084e0:	40023800 	.word	0x40023800
 80084e4:	40021000 	.word	0x40021000
 80084e8:	40021800 	.word	0x40021800
 80084ec:	40022000 	.word	0x40022000
 80084f0:	40022400 	.word	0x40022400
 80084f4:	40022800 	.word	0x40022800

080084f8 <BSP_LCD_ClockConfig>:
{
 80084f8:	b508      	push	{r3, lr}
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80084fa:	4806      	ldr	r0, [pc, #24]	@ (8008514 <BSP_LCD_ClockConfig+0x1c>)
 80084fc:	2308      	movs	r3, #8
 80084fe:	6003      	str	r3, [r0, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 8008500:	23c0      	movs	r3, #192	@ 0xc0
 8008502:	6143      	str	r3, [r0, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 8008504:	2305      	movs	r3, #5
 8008506:	61c3      	str	r3, [r0, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8008508:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800850c:	62c3      	str	r3, [r0, #44]	@ 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 800850e:	f001 fe65 	bl	800a1dc <HAL_RCCEx_PeriphCLKConfig>
}
 8008512:	bd08      	pop	{r3, pc}
 8008514:	20008afc 	.word	0x20008afc

08008518 <BSP_LCD_Init>:
{    
 8008518:	b510      	push	{r4, lr}
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 800851a:	4c25      	ldr	r4, [pc, #148]	@ (80085b0 <BSP_LCD_Init+0x98>)
 800851c:	2328      	movs	r3, #40	@ 0x28
 800851e:	6163      	str	r3, [r4, #20]
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 8008520:	2309      	movs	r3, #9
 8008522:	61a3      	str	r3, [r4, #24]
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8008524:	2335      	movs	r3, #53	@ 0x35
 8008526:	61e3      	str	r3, [r4, #28]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8008528:	230b      	movs	r3, #11
 800852a:	6223      	str	r3, [r4, #32]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 800852c:	f240 131b 	movw	r3, #283	@ 0x11b
 8008530:	62a3      	str	r3, [r4, #40]	@ 0x28
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8008532:	f240 2315 	movw	r3, #533	@ 0x215
 8008536:	6263      	str	r3, [r4, #36]	@ 0x24
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 8008538:	f240 131d 	movw	r3, #285	@ 0x11d
 800853c:	6323      	str	r3, [r4, #48]	@ 0x30
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 800853e:	f240 2335 	movw	r3, #565	@ 0x235
 8008542:	62e3      	str	r3, [r4, #44]	@ 0x2c
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 8008544:	2100      	movs	r1, #0
 8008546:	4620      	mov	r0, r4
 8008548:	f7ff ffd6 	bl	80084f8 <BSP_LCD_ClockConfig>
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 800854c:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8008550:	6623      	str	r3, [r4, #96]	@ 0x60
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 8008552:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8008556:	6663      	str	r3, [r4, #100]	@ 0x64
  hLtdcHandler.Init.Backcolor.Blue = 0;
 8008558:	2300      	movs	r3, #0
 800855a:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
 800855e:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
  hLtdcHandler.Init.Backcolor.Red = 0;
 8008562:	f884 3036 	strb.w	r3, [r4, #54]	@ 0x36
  hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8008566:	6063      	str	r3, [r4, #4]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 8008568:	60a3      	str	r3, [r4, #8]
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 800856a:	60e3      	str	r3, [r4, #12]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800856c:	6123      	str	r3, [r4, #16]
  hLtdcHandler.Instance = LTDC;
 800856e:	4b11      	ldr	r3, [pc, #68]	@ (80085b4 <BSP_LCD_Init+0x9c>)
 8008570:	6023      	str	r3, [r4, #0]
  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 8008572:	4620      	mov	r0, r4
 8008574:	f001 fadb 	bl	8009b2e <HAL_LTDC_GetState>
 8008578:	b1a0      	cbz	r0, 80085a4 <BSP_LCD_Init+0x8c>
  HAL_LTDC_Init(&hLtdcHandler);
 800857a:	480d      	ldr	r0, [pc, #52]	@ (80085b0 <BSP_LCD_Init+0x98>)
 800857c:	f001 fa04 	bl	8009988 <HAL_LTDC_Init>
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 8008580:	2201      	movs	r2, #1
 8008582:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8008586:	480c      	ldr	r0, [pc, #48]	@ (80085b8 <BSP_LCD_Init+0xa0>)
 8008588:	f000 fdd3 	bl	8009132 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 800858c:	2201      	movs	r2, #1
 800858e:	2108      	movs	r1, #8
 8008590:	480a      	ldr	r0, [pc, #40]	@ (80085bc <BSP_LCD_Init+0xa4>)
 8008592:	f000 fdce 	bl	8009132 <HAL_GPIO_WritePin>
  BSP_SDRAM_Init();
 8008596:	f000 f91f 	bl	80087d8 <BSP_SDRAM_Init>
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 800859a:	4809      	ldr	r0, [pc, #36]	@ (80085c0 <BSP_LCD_Init+0xa8>)
 800859c:	f7ff fd9e 	bl	80080dc <BSP_LCD_SetFont>
}
 80085a0:	2000      	movs	r0, #0
 80085a2:	bd10      	pop	{r4, pc}
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 80085a4:	2100      	movs	r1, #0
 80085a6:	4620      	mov	r0, r4
 80085a8:	f7ff ff02 	bl	80083b0 <BSP_LCD_MspInit>
 80085ac:	e7e5      	b.n	800857a <BSP_LCD_Init+0x62>
 80085ae:	bf00      	nop
 80085b0:	20008bdc 	.word	0x20008bdc
 80085b4:	40016800 	.word	0x40016800
 80085b8:	40022000 	.word	0x40022000
 80085bc:	40022800 	.word	0x40022800
 80085c0:	20008420 	.word	0x20008420

080085c4 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 80085c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80085c8:	b083      	sub	sp, #12
 80085ca:	4681      	mov	r9, r0
  __IO uint32_t tmpmrd = 0;
 80085cc:	f04f 0800 	mov.w	r8, #0
 80085d0:	f8cd 8004 	str.w	r8, [sp, #4]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 80085d4:	4c20      	ldr	r4, [pc, #128]	@ (8008658 <BSP_SDRAM_Initialization_sequence+0x94>)
 80085d6:	2601      	movs	r6, #1
 80085d8:	6026      	str	r6, [r4, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80085da:	2710      	movs	r7, #16
 80085dc:	6067      	str	r7, [r4, #4]
  Command.AutoRefreshNumber      = 1;
 80085de:	60a6      	str	r6, [r4, #8]
  Command.ModeRegisterDefinition = 0;
 80085e0:	f8c4 800c 	str.w	r8, [r4, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80085e4:	4d1d      	ldr	r5, [pc, #116]	@ (800865c <BSP_SDRAM_Initialization_sequence+0x98>)
 80085e6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80085ea:	4621      	mov	r1, r4
 80085ec:	4628      	mov	r0, r5
 80085ee:	f002 f8ee 	bl	800a7ce <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 80085f2:	4630      	mov	r0, r6
 80085f4:	f000 f980 	bl	80088f8 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 80085f8:	2302      	movs	r3, #2
 80085fa:	6023      	str	r3, [r4, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80085fc:	6067      	str	r7, [r4, #4]
  Command.AutoRefreshNumber      = 1;
 80085fe:	60a6      	str	r6, [r4, #8]
  Command.ModeRegisterDefinition = 0;
 8008600:	f8c4 800c 	str.w	r8, [r4, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8008604:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008608:	4621      	mov	r1, r4
 800860a:	4628      	mov	r0, r5
 800860c:	f002 f8df 	bl	800a7ce <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8008610:	2303      	movs	r3, #3
 8008612:	6023      	str	r3, [r4, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8008614:	6067      	str	r7, [r4, #4]
  Command.AutoRefreshNumber      = 8;
 8008616:	2308      	movs	r3, #8
 8008618:	60a3      	str	r3, [r4, #8]
  Command.ModeRegisterDefinition = 0;
 800861a:	f8c4 800c 	str.w	r8, [r4, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 800861e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008622:	4621      	mov	r1, r4
 8008624:	4628      	mov	r0, r5
 8008626:	f002 f8d2 	bl	800a7ce <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 800862a:	f44f 7308 	mov.w	r3, #544	@ 0x220
 800862e:	9301      	str	r3, [sp, #4]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8008630:	2304      	movs	r3, #4
 8008632:	6023      	str	r3, [r4, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8008634:	6067      	str	r7, [r4, #4]
  Command.AutoRefreshNumber      = 1;
 8008636:	60a6      	str	r6, [r4, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8008638:	9b01      	ldr	r3, [sp, #4]
 800863a:	60e3      	str	r3, [r4, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 800863c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008640:	4621      	mov	r1, r4
 8008642:	4628      	mov	r0, r5
 8008644:	f002 f8c3 	bl	800a7ce <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8008648:	4649      	mov	r1, r9
 800864a:	4628      	mov	r0, r5
 800864c:	f002 f8da 	bl	800a804 <HAL_SDRAM_ProgramRefreshRate>
}
 8008650:	b003      	add	sp, #12
 8008652:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008656:	bf00      	nop
 8008658:	20008ce4 	.word	0x20008ce4
 800865c:	20008d10 	.word	0x20008d10

08008660 <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 8008660:	b570      	push	{r4, r5, r6, lr}
 8008662:	b08e      	sub	sp, #56	@ 0x38
 8008664:	4606      	mov	r6, r0
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8008666:	4b53      	ldr	r3, [pc, #332]	@ (80087b4 <BSP_SDRAM_MspInit+0x154>)
 8008668:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800866a:	f042 0201 	orr.w	r2, r2, #1
 800866e:	639a      	str	r2, [r3, #56]	@ 0x38
 8008670:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008672:	f002 0201 	and.w	r2, r2, #1
 8008676:	9201      	str	r2, [sp, #4]
 8008678:	9a01      	ldr	r2, [sp, #4]
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 800867a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800867c:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 8008680:	631a      	str	r2, [r3, #48]	@ 0x30
 8008682:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008684:	f402 0280 	and.w	r2, r2, #4194304	@ 0x400000
 8008688:	9202      	str	r2, [sp, #8]
 800868a:	9a02      	ldr	r2, [sp, #8]

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800868c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800868e:	f042 0204 	orr.w	r2, r2, #4
 8008692:	631a      	str	r2, [r3, #48]	@ 0x30
 8008694:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008696:	f002 0204 	and.w	r2, r2, #4
 800869a:	9203      	str	r2, [sp, #12]
 800869c:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800869e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80086a0:	f042 0208 	orr.w	r2, r2, #8
 80086a4:	631a      	str	r2, [r3, #48]	@ 0x30
 80086a6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80086a8:	f002 0208 	and.w	r2, r2, #8
 80086ac:	9204      	str	r2, [sp, #16]
 80086ae:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80086b0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80086b2:	f042 0210 	orr.w	r2, r2, #16
 80086b6:	631a      	str	r2, [r3, #48]	@ 0x30
 80086b8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80086ba:	f002 0210 	and.w	r2, r2, #16
 80086be:	9205      	str	r2, [sp, #20]
 80086c0:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80086c2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80086c4:	f042 0220 	orr.w	r2, r2, #32
 80086c8:	631a      	str	r2, [r3, #48]	@ 0x30
 80086ca:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80086cc:	f002 0220 	and.w	r2, r2, #32
 80086d0:	9206      	str	r2, [sp, #24]
 80086d2:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80086d4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80086d6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80086da:	631a      	str	r2, [r3, #48]	@ 0x30
 80086dc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80086de:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 80086e2:	9207      	str	r2, [sp, #28]
 80086e4:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80086e6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80086e8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80086ec:	631a      	str	r2, [r3, #48]	@ 0x30
 80086ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80086f4:	9308      	str	r3, [sp, #32]
 80086f6:	9b08      	ldr	r3, [sp, #32]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80086f8:	2302      	movs	r3, #2
 80086fa:	930a      	str	r3, [sp, #40]	@ 0x28
  gpio_init_structure.Pull      = GPIO_PULLUP;
 80086fc:	2201      	movs	r2, #1
 80086fe:	920b      	str	r2, [sp, #44]	@ 0x2c
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8008700:	930c      	str	r3, [sp, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8008702:	230c      	movs	r3, #12
 8008704:	930d      	str	r3, [sp, #52]	@ 0x34
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 8008706:	2308      	movs	r3, #8
 8008708:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 800870a:	a909      	add	r1, sp, #36	@ 0x24
 800870c:	482a      	ldr	r0, [pc, #168]	@ (80087b8 <BSP_SDRAM_MspInit+0x158>)
 800870e:	f000 fc17 	bl	8008f40 <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_3 | GPIO_PIN_8 | GPIO_PIN_9 |
 8008712:	f24c 730b 	movw	r3, #50955	@ 0xc70b
 8008716:	9309      	str	r3, [sp, #36]	@ 0x24
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8008718:	a909      	add	r1, sp, #36	@ 0x24
 800871a:	4828      	ldr	r0, [pc, #160]	@ (80087bc <BSP_SDRAM_MspInit+0x15c>)
 800871c:	f000 fc10 	bl	8008f40 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8008720:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8008724:	9309      	str	r3, [sp, #36]	@ 0x24
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8008726:	a909      	add	r1, sp, #36	@ 0x24
 8008728:	4825      	ldr	r0, [pc, #148]	@ (80087c0 <BSP_SDRAM_MspInit+0x160>)
 800872a:	f000 fc09 	bl	8008f40 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 800872e:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8008732:	9309      	str	r3, [sp, #36]	@ 0x24
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8008734:	a909      	add	r1, sp, #36	@ 0x24
 8008736:	4823      	ldr	r0, [pc, #140]	@ (80087c4 <BSP_SDRAM_MspInit+0x164>)
 8008738:	f000 fc02 	bl	8008f40 <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 800873c:	f248 1333 	movw	r3, #33075	@ 0x8133
 8008740:	9309      	str	r3, [sp, #36]	@ 0x24
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8008742:	a909      	add	r1, sp, #36	@ 0x24
 8008744:	4820      	ldr	r0, [pc, #128]	@ (80087c8 <BSP_SDRAM_MspInit+0x168>)
 8008746:	f000 fbfb 	bl	8008f40 <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 800874a:	2328      	movs	r3, #40	@ 0x28
 800874c:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 800874e:	a909      	add	r1, sp, #36	@ 0x24
 8008750:	481e      	ldr	r0, [pc, #120]	@ (80087cc <BSP_SDRAM_MspInit+0x16c>)
 8008752:	f000 fbf5 	bl	8008f40 <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8008756:	4c1e      	ldr	r4, [pc, #120]	@ (80087d0 <BSP_SDRAM_MspInit+0x170>)
 8008758:	2500      	movs	r5, #0
 800875a:	6065      	str	r5, [r4, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 800875c:	2380      	movs	r3, #128	@ 0x80
 800875e:	60a3      	str	r3, [r4, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8008760:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008764:	60e3      	str	r3, [r4, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8008766:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800876a:	6123      	str	r3, [r4, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800876c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008770:	6163      	str	r3, [r4, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8008772:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8008776:	61a3      	str	r3, [r4, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 8008778:	61e5      	str	r5, [r4, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 800877a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800877e:	6223      	str	r3, [r4, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 8008780:	6265      	str	r5, [r4, #36]	@ 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8008782:	2303      	movs	r3, #3
 8008784:	62a3      	str	r3, [r4, #40]	@ 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8008786:	62e5      	str	r5, [r4, #44]	@ 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8008788:	6325      	str	r5, [r4, #48]	@ 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 800878a:	4b12      	ldr	r3, [pc, #72]	@ (80087d4 <BSP_SDRAM_MspInit+0x174>)
 800878c:	6023      	str	r3, [r4, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 800878e:	6334      	str	r4, [r6, #48]	@ 0x30
 8008790:	63a6      	str	r6, [r4, #56]	@ 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 8008792:	4620      	mov	r0, r4
 8008794:	f000 fa0c 	bl	8008bb0 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 8008798:	4620      	mov	r0, r4
 800879a:	f000 f9a3 	bl	8008ae4 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 5, 0);
 800879e:	462a      	mov	r2, r5
 80087a0:	2105      	movs	r1, #5
 80087a2:	2038      	movs	r0, #56	@ 0x38
 80087a4:	f000 f90e 	bl	80089c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 80087a8:	2038      	movs	r0, #56	@ 0x38
 80087aa:	f000 f91b 	bl	80089e4 <HAL_NVIC_EnableIRQ>
}
 80087ae:	b00e      	add	sp, #56	@ 0x38
 80087b0:	bd70      	pop	{r4, r5, r6, pc}
 80087b2:	bf00      	nop
 80087b4:	40023800 	.word	0x40023800
 80087b8:	40020800 	.word	0x40020800
 80087bc:	40020c00 	.word	0x40020c00
 80087c0:	40021000 	.word	0x40021000
 80087c4:	40021400 	.word	0x40021400
 80087c8:	40021800 	.word	0x40021800
 80087cc:	40021c00 	.word	0x40021c00
 80087d0:	20008c84 	.word	0x20008c84
 80087d4:	40026410 	.word	0x40026410

080087d8 <BSP_SDRAM_Init>:
{ 
 80087d8:	b538      	push	{r3, r4, r5, lr}
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 80087da:	4c1b      	ldr	r4, [pc, #108]	@ (8008848 <BSP_SDRAM_Init+0x70>)
 80087dc:	4b1b      	ldr	r3, [pc, #108]	@ (800884c <BSP_SDRAM_Init+0x74>)
 80087de:	6023      	str	r3, [r4, #0]
  Timing.LoadToActiveDelay    = 2;
 80087e0:	4d1b      	ldr	r5, [pc, #108]	@ (8008850 <BSP_SDRAM_Init+0x78>)
 80087e2:	2302      	movs	r3, #2
 80087e4:	602b      	str	r3, [r5, #0]
  Timing.ExitSelfRefreshDelay = 7;
 80087e6:	2107      	movs	r1, #7
 80087e8:	6069      	str	r1, [r5, #4]
  Timing.SelfRefreshTime      = 4;
 80087ea:	2204      	movs	r2, #4
 80087ec:	60aa      	str	r2, [r5, #8]
  Timing.RowCycleDelay        = 7;
 80087ee:	60e9      	str	r1, [r5, #12]
  Timing.WriteRecoveryTime    = 2;
 80087f0:	612b      	str	r3, [r5, #16]
  Timing.RPDelay              = 2;
 80087f2:	616b      	str	r3, [r5, #20]
  Timing.RCDDelay             = 2;
 80087f4:	61ab      	str	r3, [r5, #24]
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 80087f6:	2100      	movs	r1, #0
 80087f8:	6061      	str	r1, [r4, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80087fa:	60a1      	str	r1, [r4, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 80087fc:	60e2      	str	r2, [r4, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 80087fe:	2310      	movs	r3, #16
 8008800:	6123      	str	r3, [r4, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8008802:	2340      	movs	r3, #64	@ 0x40
 8008804:	6163      	str	r3, [r4, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 8008806:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800880a:	61a3      	str	r3, [r4, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800880c:	61e1      	str	r1, [r4, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 800880e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8008812:	6223      	str	r3, [r4, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8008814:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008818:	6263      	str	r3, [r4, #36]	@ 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 800881a:	62a1      	str	r1, [r4, #40]	@ 0x28
  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 800881c:	4620      	mov	r0, r4
 800881e:	f7ff ff1f 	bl	8008660 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 8008822:	4629      	mov	r1, r5
 8008824:	4620      	mov	r0, r4
 8008826:	f001 ffb2 	bl	800a78e <HAL_SDRAM_Init>
 800882a:	b148      	cbz	r0, 8008840 <BSP_SDRAM_Init+0x68>
    sdramstatus = SDRAM_ERROR;
 800882c:	4b09      	ldr	r3, [pc, #36]	@ (8008854 <BSP_SDRAM_Init+0x7c>)
 800882e:	2201      	movs	r2, #1
 8008830:	701a      	strb	r2, [r3, #0]
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8008832:	f240 6003 	movw	r0, #1539	@ 0x603
 8008836:	f7ff fec5 	bl	80085c4 <BSP_SDRAM_Initialization_sequence>
}
 800883a:	4b06      	ldr	r3, [pc, #24]	@ (8008854 <BSP_SDRAM_Init+0x7c>)
 800883c:	7818      	ldrb	r0, [r3, #0]
 800883e:	bd38      	pop	{r3, r4, r5, pc}
    sdramstatus = SDRAM_OK;
 8008840:	4b04      	ldr	r3, [pc, #16]	@ (8008854 <BSP_SDRAM_Init+0x7c>)
 8008842:	2200      	movs	r2, #0
 8008844:	701a      	strb	r2, [r3, #0]
 8008846:	e7f4      	b.n	8008832 <BSP_SDRAM_Init+0x5a>
 8008848:	20008d10 	.word	0x20008d10
 800884c:	a0000140 	.word	0xa0000140
 8008850:	20008cf4 	.word	0x20008cf4
 8008854:	20000010 	.word	0x20000010

08008858 <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8008858:	4770      	bx	lr
	...

0800885c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800885c:	b510      	push	{r4, lr}
 800885e:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8008860:	4b0e      	ldr	r3, [pc, #56]	@ (800889c <HAL_InitTick+0x40>)
 8008862:	781a      	ldrb	r2, [r3, #0]
 8008864:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8008868:	fbb3 f3f2 	udiv	r3, r3, r2
 800886c:	4a0c      	ldr	r2, [pc, #48]	@ (80088a0 <HAL_InitTick+0x44>)
 800886e:	6810      	ldr	r0, [r2, #0]
 8008870:	fbb0 f0f3 	udiv	r0, r0, r3
 8008874:	f000 f8ba 	bl	80089ec <HAL_SYSTICK_Config>
 8008878:	b968      	cbnz	r0, 8008896 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800887a:	2c0f      	cmp	r4, #15
 800887c:	d901      	bls.n	8008882 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 800887e:	2001      	movs	r0, #1
 8008880:	e00a      	b.n	8008898 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008882:	2200      	movs	r2, #0
 8008884:	4621      	mov	r1, r4
 8008886:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800888a:	f000 f89b 	bl	80089c4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800888e:	4b05      	ldr	r3, [pc, #20]	@ (80088a4 <HAL_InitTick+0x48>)
 8008890:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008892:	2000      	movs	r0, #0
 8008894:	e000      	b.n	8008898 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8008896:	2001      	movs	r0, #1
}
 8008898:	bd10      	pop	{r4, pc}
 800889a:	bf00      	nop
 800889c:	20000011 	.word	0x20000011
 80088a0:	2000001c 	.word	0x2000001c
 80088a4:	20000014 	.word	0x20000014

080088a8 <HAL_Init>:
{
 80088a8:	b508      	push	{r3, lr}
   __HAL_FLASH_ART_ENABLE();
 80088aa:	4b09      	ldr	r3, [pc, #36]	@ (80088d0 <HAL_Init+0x28>)
 80088ac:	681a      	ldr	r2, [r3, #0]
 80088ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80088b2:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80088b4:	681a      	ldr	r2, [r3, #0]
 80088b6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80088ba:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80088bc:	2003      	movs	r0, #3
 80088be:	f000 f86f 	bl	80089a0 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80088c2:	2000      	movs	r0, #0
 80088c4:	f7ff ffca 	bl	800885c <HAL_InitTick>
  HAL_MspInit();
 80088c8:	f7ff ffc6 	bl	8008858 <HAL_MspInit>
}
 80088cc:	2000      	movs	r0, #0
 80088ce:	bd08      	pop	{r3, pc}
 80088d0:	40023c00 	.word	0x40023c00

080088d4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80088d4:	4a03      	ldr	r2, [pc, #12]	@ (80088e4 <HAL_IncTick+0x10>)
 80088d6:	6811      	ldr	r1, [r2, #0]
 80088d8:	4b03      	ldr	r3, [pc, #12]	@ (80088e8 <HAL_IncTick+0x14>)
 80088da:	781b      	ldrb	r3, [r3, #0]
 80088dc:	440b      	add	r3, r1
 80088de:	6013      	str	r3, [r2, #0]
}
 80088e0:	4770      	bx	lr
 80088e2:	bf00      	nop
 80088e4:	20008d44 	.word	0x20008d44
 80088e8:	20000011 	.word	0x20000011

080088ec <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80088ec:	4b01      	ldr	r3, [pc, #4]	@ (80088f4 <HAL_GetTick+0x8>)
 80088ee:	6818      	ldr	r0, [r3, #0]
}
 80088f0:	4770      	bx	lr
 80088f2:	bf00      	nop
 80088f4:	20008d44 	.word	0x20008d44

080088f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80088f8:	b538      	push	{r3, r4, r5, lr}
 80088fa:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80088fc:	f7ff fff6 	bl	80088ec <HAL_GetTick>
 8008900:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008902:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 8008906:	d002      	beq.n	800890e <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8008908:	4b04      	ldr	r3, [pc, #16]	@ (800891c <HAL_Delay+0x24>)
 800890a:	781b      	ldrb	r3, [r3, #0]
 800890c:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800890e:	f7ff ffed 	bl	80088ec <HAL_GetTick>
 8008912:	1b40      	subs	r0, r0, r5
 8008914:	42a0      	cmp	r0, r4
 8008916:	d3fa      	bcc.n	800890e <HAL_Delay+0x16>
  {
  }
}
 8008918:	bd38      	pop	{r3, r4, r5, pc}
 800891a:	bf00      	nop
 800891c:	20000011 	.word	0x20000011

08008920 <__NVIC_EnableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 8008920:	2800      	cmp	r0, #0
 8008922:	db07      	blt.n	8008934 <__NVIC_EnableIRQ+0x14>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008924:	f000 021f 	and.w	r2, r0, #31
 8008928:	0940      	lsrs	r0, r0, #5
 800892a:	2301      	movs	r3, #1
 800892c:	4093      	lsls	r3, r2
 800892e:	4a02      	ldr	r2, [pc, #8]	@ (8008938 <__NVIC_EnableIRQ+0x18>)
 8008930:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8008934:	4770      	bx	lr
 8008936:	bf00      	nop
 8008938:	e000e100 	.word	0xe000e100

0800893c <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 800893c:	2800      	cmp	r0, #0
 800893e:	db04      	blt.n	800894a <__NVIC_SetPriority+0xe>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008940:	0109      	lsls	r1, r1, #4
 8008942:	b2c9      	uxtb	r1, r1
 8008944:	4b04      	ldr	r3, [pc, #16]	@ (8008958 <__NVIC_SetPriority+0x1c>)
 8008946:	5419      	strb	r1, [r3, r0]
 8008948:	4770      	bx	lr
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800894a:	f000 000f 	and.w	r0, r0, #15
 800894e:	0109      	lsls	r1, r1, #4
 8008950:	b2c9      	uxtb	r1, r1
 8008952:	4b02      	ldr	r3, [pc, #8]	@ (800895c <__NVIC_SetPriority+0x20>)
 8008954:	5419      	strb	r1, [r3, r0]
  }
}
 8008956:	4770      	bx	lr
 8008958:	e000e400 	.word	0xe000e400
 800895c:	e000ed14 	.word	0xe000ed14

08008960 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008960:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008962:	f000 0007 	and.w	r0, r0, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008966:	f1c0 0c07 	rsb	ip, r0, #7
 800896a:	f1bc 0f04 	cmp.w	ip, #4
 800896e:	bf28      	it	cs
 8008970:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008974:	1d03      	adds	r3, r0, #4
 8008976:	2b06      	cmp	r3, #6
 8008978:	d90f      	bls.n	800899a <NVIC_EncodePriority+0x3a>
 800897a:	1ec3      	subs	r3, r0, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800897c:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 8008980:	fa0e f00c 	lsl.w	r0, lr, ip
 8008984:	ea21 0100 	bic.w	r1, r1, r0
 8008988:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800898a:	fa0e fe03 	lsl.w	lr, lr, r3
 800898e:	ea22 020e 	bic.w	r2, r2, lr
         );
}
 8008992:	ea41 0002 	orr.w	r0, r1, r2
 8008996:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800899a:	2300      	movs	r3, #0
 800899c:	e7ee      	b.n	800897c <NVIC_EncodePriority+0x1c>
	...

080089a0 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80089a0:	4906      	ldr	r1, [pc, #24]	@ (80089bc <HAL_NVIC_SetPriorityGrouping+0x1c>)
 80089a2:	68cb      	ldr	r3, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80089a4:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80089a8:	041b      	lsls	r3, r3, #16
 80089aa:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80089ac:	0200      	lsls	r0, r0, #8
 80089ae:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80089b2:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 80089b4:	4a02      	ldr	r2, [pc, #8]	@ (80089c0 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80089b6:	431a      	orrs	r2, r3
  SCB->AIRCR =  reg_value;
 80089b8:	60ca      	str	r2, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80089ba:	4770      	bx	lr
 80089bc:	e000ed00 	.word	0xe000ed00
 80089c0:	05fa0000 	.word	0x05fa0000

080089c4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80089c4:	b510      	push	{r4, lr}
 80089c6:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80089c8:	4b05      	ldr	r3, [pc, #20]	@ (80089e0 <HAL_NVIC_SetPriority+0x1c>)
 80089ca:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80089cc:	f3c0 2002 	ubfx	r0, r0, #8, #3
 80089d0:	f7ff ffc6 	bl	8008960 <NVIC_EncodePriority>
 80089d4:	4601      	mov	r1, r0
 80089d6:	4620      	mov	r0, r4
 80089d8:	f7ff ffb0 	bl	800893c <__NVIC_SetPriority>
}
 80089dc:	bd10      	pop	{r4, pc}
 80089de:	bf00      	nop
 80089e0:	e000ed00 	.word	0xe000ed00

080089e4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80089e4:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80089e6:	f7ff ff9b 	bl	8008920 <__NVIC_EnableIRQ>
}
 80089ea:	bd08      	pop	{r3, pc}

080089ec <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80089ec:	3801      	subs	r0, #1
 80089ee:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80089f2:	d20b      	bcs.n	8008a0c <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80089f4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80089f8:	6158      	str	r0, [r3, #20]
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80089fa:	4a05      	ldr	r2, [pc, #20]	@ (8008a10 <HAL_SYSTICK_Config+0x24>)
 80089fc:	21f0      	movs	r1, #240	@ 0xf0
 80089fe:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008a02:	2000      	movs	r0, #0
 8008a04:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008a06:	2207      	movs	r2, #7
 8008a08:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008a0a:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8008a0c:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8008a0e:	4770      	bx	lr
 8008a10:	e000ed00 	.word	0xe000ed00

08008a14 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008a14:	b410      	push	{r4}
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8008a16:	6801      	ldr	r1, [r0, #0]
 8008a18:	b2ca      	uxtb	r2, r1
 8008a1a:	3a10      	subs	r2, #16
 8008a1c:	4b0a      	ldr	r3, [pc, #40]	@ (8008a48 <DMA_CalcBaseAndBitshift+0x34>)
 8008a1e:	fba3 4302 	umull	r4, r3, r3, r2
 8008a22:	091b      	lsrs	r3, r3, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8008a24:	4c09      	ldr	r4, [pc, #36]	@ (8008a4c <DMA_CalcBaseAndBitshift+0x38>)
 8008a26:	5ce3      	ldrb	r3, [r4, r3]
 8008a28:	65c3      	str	r3, [r0, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8008a2a:	2a5f      	cmp	r2, #95	@ 0x5f
 8008a2c:	d907      	bls.n	8008a3e <DMA_CalcBaseAndBitshift+0x2a>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8008a2e:	4b08      	ldr	r3, [pc, #32]	@ (8008a50 <DMA_CalcBaseAndBitshift+0x3c>)
 8008a30:	400b      	ands	r3, r1
 8008a32:	3304      	adds	r3, #4
 8008a34:	6583      	str	r3, [r0, #88]	@ 0x58
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 8008a36:	6d80      	ldr	r0, [r0, #88]	@ 0x58
 8008a38:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008a3c:	4770      	bx	lr
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8008a3e:	4b04      	ldr	r3, [pc, #16]	@ (8008a50 <DMA_CalcBaseAndBitshift+0x3c>)
 8008a40:	400b      	ands	r3, r1
 8008a42:	6583      	str	r3, [r0, #88]	@ 0x58
 8008a44:	e7f7      	b.n	8008a36 <DMA_CalcBaseAndBitshift+0x22>
 8008a46:	bf00      	nop
 8008a48:	aaaaaaab 	.word	0xaaaaaaab
 8008a4c:	0802d40c 	.word	0x0802d40c
 8008a50:	fffffc00 	.word	0xfffffc00

08008a54 <DMA_CheckFifoParam>:
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8008a54:	6a83      	ldr	r3, [r0, #40]	@ 0x28
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8008a56:	6982      	ldr	r2, [r0, #24]
 8008a58:	b992      	cbnz	r2, 8008a80 <DMA_CheckFifoParam+0x2c>
  {
    switch (tmp)
 8008a5a:	2b01      	cmp	r3, #1
 8008a5c:	d00a      	beq.n	8008a74 <DMA_CheckFifoParam+0x20>
 8008a5e:	2b02      	cmp	r3, #2
 8008a60:	d002      	beq.n	8008a68 <DMA_CheckFifoParam+0x14>
 8008a62:	b10b      	cbz	r3, 8008a68 <DMA_CheckFifoParam+0x14>
 8008a64:	2000      	movs	r0, #0
 8008a66:	4770      	bx	lr
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008a68:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8008a6a:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 8008a6e:	d128      	bne.n	8008ac2 <DMA_CheckFifoParam+0x6e>
  HAL_StatusTypeDef status = HAL_OK;
 8008a70:	2000      	movs	r0, #0
 8008a72:	4770      	bx	lr
      {
        status = HAL_ERROR;
      }
      break;
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008a74:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8008a76:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8008a7a:	d024      	beq.n	8008ac6 <DMA_CheckFifoParam+0x72>
  HAL_StatusTypeDef status = HAL_OK;
 8008a7c:	2000      	movs	r0, #0
 8008a7e:	4770      	bx	lr
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008a80:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 8008a84:	d009      	beq.n	8008a9a <DMA_CheckFifoParam+0x46>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8008a86:	2b02      	cmp	r3, #2
 8008a88:	d925      	bls.n	8008ad6 <DMA_CheckFifoParam+0x82>
 8008a8a:	2b03      	cmp	r3, #3
 8008a8c:	d125      	bne.n	8008ada <DMA_CheckFifoParam+0x86>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008a8e:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8008a90:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 8008a94:	d123      	bne.n	8008ade <DMA_CheckFifoParam+0x8a>
  HAL_StatusTypeDef status = HAL_OK;
 8008a96:	2000      	movs	r0, #0
 8008a98:	4770      	bx	lr
    switch (tmp)
 8008a9a:	2b03      	cmp	r3, #3
 8008a9c:	d803      	bhi.n	8008aa6 <DMA_CheckFifoParam+0x52>
 8008a9e:	e8df f003 	tbb	[pc, r3]
 8008aa2:	0414      	.short	0x0414
 8008aa4:	0a14      	.short	0x0a14
 8008aa6:	2000      	movs	r0, #0
 8008aa8:	4770      	bx	lr
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008aaa:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8008aac:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 8008ab0:	d10d      	bne.n	8008ace <DMA_CheckFifoParam+0x7a>
  HAL_StatusTypeDef status = HAL_OK;
 8008ab2:	2000      	movs	r0, #0
 8008ab4:	4770      	bx	lr
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008ab6:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8008ab8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8008abc:	d009      	beq.n	8008ad2 <DMA_CheckFifoParam+0x7e>
  HAL_StatusTypeDef status = HAL_OK;
 8008abe:	2000      	movs	r0, #0
 8008ac0:	4770      	bx	lr
        status = HAL_ERROR;
 8008ac2:	2001      	movs	r0, #1
 8008ac4:	4770      	bx	lr
        status = HAL_ERROR;
 8008ac6:	2001      	movs	r0, #1
 8008ac8:	4770      	bx	lr
      status = HAL_ERROR;
 8008aca:	2001      	movs	r0, #1
 8008acc:	4770      	bx	lr
        status = HAL_ERROR;
 8008ace:	2001      	movs	r0, #1
 8008ad0:	4770      	bx	lr
        status = HAL_ERROR;
 8008ad2:	2001      	movs	r0, #1
 8008ad4:	4770      	bx	lr
      status = HAL_ERROR;
 8008ad6:	2001      	movs	r0, #1
 8008ad8:	4770      	bx	lr
    switch (tmp)
 8008ada:	2000      	movs	r0, #0
 8008adc:	4770      	bx	lr
      {
        status = HAL_ERROR;
 8008ade:	2001      	movs	r0, #1
      break;
    }
  } 
  
  return status; 
}
 8008ae0:	4770      	bx	lr
	...

08008ae4 <HAL_DMA_Init>:
{
 8008ae4:	b570      	push	{r4, r5, r6, lr}
 8008ae6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8008ae8:	f7ff ff00 	bl	80088ec <HAL_GetTick>
  if(hdma == NULL)
 8008aec:	2c00      	cmp	r4, #0
 8008aee:	d05b      	beq.n	8008ba8 <HAL_DMA_Init+0xc4>
 8008af0:	4605      	mov	r5, r0
  __HAL_UNLOCK(hdma);
 8008af2:	2300      	movs	r3, #0
 8008af4:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
  hdma->State = HAL_DMA_STATE_BUSY;
 8008af8:	2302      	movs	r3, #2
 8008afa:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
  __HAL_DMA_DISABLE(hdma);
 8008afe:	6822      	ldr	r2, [r4, #0]
 8008b00:	6813      	ldr	r3, [r2, #0]
 8008b02:	f023 0301 	bic.w	r3, r3, #1
 8008b06:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008b08:	6823      	ldr	r3, [r4, #0]
 8008b0a:	681a      	ldr	r2, [r3, #0]
 8008b0c:	f012 0f01 	tst.w	r2, #1
 8008b10:	d00a      	beq.n	8008b28 <HAL_DMA_Init+0x44>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8008b12:	f7ff feeb 	bl	80088ec <HAL_GetTick>
 8008b16:	1b43      	subs	r3, r0, r5
 8008b18:	2b05      	cmp	r3, #5
 8008b1a:	d9f5      	bls.n	8008b08 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008b1c:	2320      	movs	r3, #32
 8008b1e:	6563      	str	r3, [r4, #84]	@ 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8008b20:	2003      	movs	r0, #3
 8008b22:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
}
 8008b26:	bd70      	pop	{r4, r5, r6, pc}
  tmp = hdma->Instance->CR;
 8008b28:	681a      	ldr	r2, [r3, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8008b2a:	4920      	ldr	r1, [pc, #128]	@ (8008bac <HAL_DMA_Init+0xc8>)
 8008b2c:	4011      	ands	r1, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008b2e:	6862      	ldr	r2, [r4, #4]
 8008b30:	68a0      	ldr	r0, [r4, #8]
 8008b32:	4302      	orrs	r2, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008b34:	68e0      	ldr	r0, [r4, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008b36:	4302      	orrs	r2, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008b38:	6920      	ldr	r0, [r4, #16]
 8008b3a:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008b3c:	6960      	ldr	r0, [r4, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008b3e:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008b40:	69a0      	ldr	r0, [r4, #24]
 8008b42:	4302      	orrs	r2, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8008b44:	69e0      	ldr	r0, [r4, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008b46:	4302      	orrs	r2, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8008b48:	6a20      	ldr	r0, [r4, #32]
 8008b4a:	4302      	orrs	r2, r0
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008b4c:	430a      	orrs	r2, r1
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008b4e:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8008b50:	2904      	cmp	r1, #4
 8008b52:	d01e      	beq.n	8008b92 <HAL_DMA_Init+0xae>
  hdma->Instance->CR = tmp;  
 8008b54:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 8008b56:	6826      	ldr	r6, [r4, #0]
 8008b58:	6975      	ldr	r5, [r6, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8008b5a:	f025 0507 	bic.w	r5, r5, #7
  tmp |= hdma->Init.FIFOMode;
 8008b5e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8008b60:	431d      	orrs	r5, r3
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008b62:	2b04      	cmp	r3, #4
 8008b64:	d107      	bne.n	8008b76 <HAL_DMA_Init+0x92>
    tmp |= hdma->Init.FIFOThreshold;
 8008b66:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8008b68:	431d      	orrs	r5, r3
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8008b6a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8008b6c:	b11b      	cbz	r3, 8008b76 <HAL_DMA_Init+0x92>
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8008b6e:	4620      	mov	r0, r4
 8008b70:	f7ff ff70 	bl	8008a54 <DMA_CheckFifoParam>
 8008b74:	b990      	cbnz	r0, 8008b9c <HAL_DMA_Init+0xb8>
  hdma->Instance->FCR = tmp;
 8008b76:	6175      	str	r5, [r6, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8008b78:	4620      	mov	r0, r4
 8008b7a:	f7ff ff4b 	bl	8008a14 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008b7e:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8008b80:	233f      	movs	r3, #63	@ 0x3f
 8008b82:	4093      	lsls	r3, r2
 8008b84:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008b86:	2000      	movs	r0, #0
 8008b88:	6560      	str	r0, [r4, #84]	@ 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8008b8a:	2301      	movs	r3, #1
 8008b8c:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
  return HAL_OK;
 8008b90:	e7c9      	b.n	8008b26 <HAL_DMA_Init+0x42>
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8008b92:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8008b94:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8008b96:	4301      	orrs	r1, r0
 8008b98:	430a      	orrs	r2, r1
 8008b9a:	e7db      	b.n	8008b54 <HAL_DMA_Init+0x70>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8008b9c:	2340      	movs	r3, #64	@ 0x40
 8008b9e:	6563      	str	r3, [r4, #84]	@ 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8008ba0:	2001      	movs	r0, #1
 8008ba2:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
        return HAL_ERROR; 
 8008ba6:	e7be      	b.n	8008b26 <HAL_DMA_Init+0x42>
    return HAL_ERROR;
 8008ba8:	2001      	movs	r0, #1
 8008baa:	e7bc      	b.n	8008b26 <HAL_DMA_Init+0x42>
 8008bac:	f010803f 	.word	0xf010803f

08008bb0 <HAL_DMA_DeInit>:
  if(hdma == NULL)
 8008bb0:	2800      	cmp	r0, #0
 8008bb2:	d02d      	beq.n	8008c10 <HAL_DMA_DeInit+0x60>
{
 8008bb4:	b538      	push	{r3, r4, r5, lr}
 8008bb6:	4605      	mov	r5, r0
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8008bb8:	f890 0035 	ldrb.w	r0, [r0, #53]	@ 0x35
 8008bbc:	b2c0      	uxtb	r0, r0
 8008bbe:	2802      	cmp	r0, #2
 8008bc0:	d025      	beq.n	8008c0e <HAL_DMA_DeInit+0x5e>
  __HAL_DMA_DISABLE(hdma);
 8008bc2:	682a      	ldr	r2, [r5, #0]
 8008bc4:	6813      	ldr	r3, [r2, #0]
 8008bc6:	f023 0301 	bic.w	r3, r3, #1
 8008bca:	6013      	str	r3, [r2, #0]
  hdma->Instance->CR   = 0U;
 8008bcc:	682b      	ldr	r3, [r5, #0]
 8008bce:	2400      	movs	r4, #0
 8008bd0:	601c      	str	r4, [r3, #0]
  hdma->Instance->NDTR = 0U;
 8008bd2:	682b      	ldr	r3, [r5, #0]
 8008bd4:	605c      	str	r4, [r3, #4]
  hdma->Instance->PAR  = 0U;
 8008bd6:	682b      	ldr	r3, [r5, #0]
 8008bd8:	609c      	str	r4, [r3, #8]
  hdma->Instance->M0AR = 0U;
 8008bda:	682b      	ldr	r3, [r5, #0]
 8008bdc:	60dc      	str	r4, [r3, #12]
  hdma->Instance->M1AR = 0U;
 8008bde:	682b      	ldr	r3, [r5, #0]
 8008be0:	611c      	str	r4, [r3, #16]
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8008be2:	682b      	ldr	r3, [r5, #0]
 8008be4:	2221      	movs	r2, #33	@ 0x21
 8008be6:	615a      	str	r2, [r3, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8008be8:	4628      	mov	r0, r5
 8008bea:	f7ff ff13 	bl	8008a14 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008bee:	6dea      	ldr	r2, [r5, #92]	@ 0x5c
 8008bf0:	233f      	movs	r3, #63	@ 0x3f
 8008bf2:	4093      	lsls	r3, r2
 8008bf4:	6083      	str	r3, [r0, #8]
  hdma->XferCpltCallback = NULL;
 8008bf6:	63ec      	str	r4, [r5, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8008bf8:	642c      	str	r4, [r5, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 8008bfa:	646c      	str	r4, [r5, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8008bfc:	64ac      	str	r4, [r5, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 8008bfe:	64ec      	str	r4, [r5, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;  
 8008c00:	652c      	str	r4, [r5, #80]	@ 0x50
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008c02:	656c      	str	r4, [r5, #84]	@ 0x54
  hdma->State = HAL_DMA_STATE_RESET;
 8008c04:	f885 4035 	strb.w	r4, [r5, #53]	@ 0x35
  __HAL_UNLOCK(hdma);
 8008c08:	f885 4034 	strb.w	r4, [r5, #52]	@ 0x34
  return HAL_OK;
 8008c0c:	4620      	mov	r0, r4
}
 8008c0e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8008c10:	2001      	movs	r0, #1
}
 8008c12:	4770      	bx	lr

08008c14 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{  
 8008c14:	b430      	push	{r4, r5}
  uint32_t tmp2 = 0;
  uint32_t tmp3 = 0;
  uint32_t tmp4 = 0;
    
  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos))); 
 8008c16:	6805      	ldr	r5, [r0, #0]
 8008c18:	6c6c      	ldr	r4, [r5, #68]	@ 0x44
 8008c1a:	f004 4c40 	and.w	ip, r4, #3221225472	@ 0xc0000000
 8008c1e:	9c02      	ldr	r4, [sp, #8]
 8008c20:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8008c24:	ea4c 0404 	orr.w	r4, ip, r4
 8008c28:	646c      	str	r4, [r5, #68]	@ 0x44
  
  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8008c2a:	6803      	ldr	r3, [r0, #0]
 8008c2c:	63da      	str	r2, [r3, #60]	@ 0x3c
 
  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8008c2e:	6843      	ldr	r3, [r0, #4]
 8008c30:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008c34:	d003      	beq.n	8008c3e <DMA2D_SetConfig+0x2a>
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);    
  } 
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8008c36:	6803      	ldr	r3, [r0, #0]
 8008c38:	60d9      	str	r1, [r3, #12]
  }
}
 8008c3a:	bc30      	pop	{r4, r5}
 8008c3c:	4770      	bx	lr
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8008c3e:	f001 4c7f 	and.w	ip, r1, #4278190080	@ 0xff000000
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8008c42:	f401 037f 	and.w	r3, r1, #16711680	@ 0xff0000
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8008c46:	f401 457f 	and.w	r5, r1, #65280	@ 0xff00
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8008c4a:	b2ca      	uxtb	r2, r1
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8008c4c:	6884      	ldr	r4, [r0, #8]
 8008c4e:	b19c      	cbz	r4, 8008c78 <DMA2D_SetConfig+0x64>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8008c50:	2c01      	cmp	r4, #1
 8008c52:	d00f      	beq.n	8008c74 <DMA2D_SetConfig+0x60>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8008c54:	2c02      	cmp	r4, #2
 8008c56:	d012      	beq.n	8008c7e <DMA2D_SetConfig+0x6a>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8008c58:	2c03      	cmp	r4, #3
 8008c5a:	d018      	beq.n	8008c8e <DMA2D_SetConfig+0x7a>
      tmp1 = (tmp1 >> 28);
 8008c5c:	ea4f 7c1c 	mov.w	ip, ip, lsr #28
      tmp2 = (tmp2 >> 20);
 8008c60:	0d1b      	lsrs	r3, r3, #20
      tmp3 = (tmp3 >> 12);
 8008c62:	0b2d      	lsrs	r5, r5, #12
      tmp  = ((tmp3 << 4) | (tmp2 << 8) | (tmp1 << 12) | tmp4);
 8008c64:	021b      	lsls	r3, r3, #8
 8008c66:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
 8008c6a:	ea43 330c 	orr.w	r3, r3, ip, lsl #12
 8008c6e:	ea43 1112 	orr.w	r1, r3, r2, lsr #4
 8008c72:	e001      	b.n	8008c78 <DMA2D_SetConfig+0x64>
      tmp = (tmp3 | tmp2 | tmp4);  
 8008c74:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);    
 8008c78:	6803      	ldr	r3, [r0, #0]
 8008c7a:	6399      	str	r1, [r3, #56]	@ 0x38
 8008c7c:	e7dd      	b.n	8008c3a <DMA2D_SetConfig+0x26>
      tmp2 = (tmp2 >> 19);
 8008c7e:	0cdb      	lsrs	r3, r3, #19
      tmp3 = (tmp3 >> 10);
 8008c80:	0aad      	lsrs	r5, r5, #10
      tmp  = ((tmp3 << 5) | (tmp2 << 11) | tmp4); 
 8008c82:	02db      	lsls	r3, r3, #11
 8008c84:	ea43 1345 	orr.w	r3, r3, r5, lsl #5
 8008c88:	ea43 01d2 	orr.w	r1, r3, r2, lsr #3
 8008c8c:	e7f4      	b.n	8008c78 <DMA2D_SetConfig+0x64>
      tmp1 = (tmp1 >> 31);
 8008c8e:	ea4f 7cdc 	mov.w	ip, ip, lsr #31
      tmp2 = (tmp2 >> 19);
 8008c92:	0cdb      	lsrs	r3, r3, #19
      tmp3 = (tmp3 >> 11);
 8008c94:	0aed      	lsrs	r5, r5, #11
      tmp  = ((tmp3 << 5) | (tmp2 << 10) | (tmp1 << 15) | tmp4);    
 8008c96:	029b      	lsls	r3, r3, #10
 8008c98:	ea43 1345 	orr.w	r3, r3, r5, lsl #5
 8008c9c:	ea43 33cc 	orr.w	r3, r3, ip, lsl #15
 8008ca0:	ea43 01d2 	orr.w	r1, r3, r2, lsr #3
 8008ca4:	e7e8      	b.n	8008c78 <DMA2D_SetConfig+0x64>

08008ca6 <HAL_DMA2D_MspInit>:
}
 8008ca6:	4770      	bx	lr

08008ca8 <HAL_DMA2D_Init>:
  if(hdma2d == NULL)
 8008ca8:	b338      	cbz	r0, 8008cfa <HAL_DMA2D_Init+0x52>
{ 
 8008caa:	b510      	push	{r4, lr}
 8008cac:	4604      	mov	r4, r0
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8008cae:	f890 3039 	ldrb.w	r3, [r0, #57]	@ 0x39
 8008cb2:	b1eb      	cbz	r3, 8008cf0 <HAL_DMA2D_Init+0x48>
  hdma2d->State = HAL_DMA2D_STATE_BUSY;  
 8008cb4:	2302      	movs	r3, #2
 8008cb6:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8008cba:	6822      	ldr	r2, [r4, #0]
 8008cbc:	6813      	ldr	r3, [r2, #0]
 8008cbe:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8008cc2:	6861      	ldr	r1, [r4, #4]
 8008cc4:	430b      	orrs	r3, r1
 8008cc6:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8008cc8:	6822      	ldr	r2, [r4, #0]
 8008cca:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 8008ccc:	f023 0307 	bic.w	r3, r3, #7
 8008cd0:	68a1      	ldr	r1, [r4, #8]
 8008cd2:	430b      	orrs	r3, r1
 8008cd4:	6353      	str	r3, [r2, #52]	@ 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);  
 8008cd6:	6822      	ldr	r2, [r4, #0]
 8008cd8:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 8008cda:	4b09      	ldr	r3, [pc, #36]	@ (8008d00 <HAL_DMA2D_Init+0x58>)
 8008cdc:	400b      	ands	r3, r1
 8008cde:	68e1      	ldr	r1, [r4, #12]
 8008ce0:	430b      	orrs	r3, r1
 8008ce2:	6413      	str	r3, [r2, #64]	@ 0x40
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8008ce4:	2000      	movs	r0, #0
 8008ce6:	63e0      	str	r0, [r4, #60]	@ 0x3c
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8008ce8:	2301      	movs	r3, #1
 8008cea:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
}
 8008cee:	bd10      	pop	{r4, pc}
    hdma2d->Lock = HAL_UNLOCKED;
 8008cf0:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
    HAL_DMA2D_MspInit(hdma2d);
 8008cf4:	f7ff ffd7 	bl	8008ca6 <HAL_DMA2D_MspInit>
 8008cf8:	e7dc      	b.n	8008cb4 <HAL_DMA2D_Init+0xc>
     return HAL_ERROR;
 8008cfa:	2001      	movs	r0, #1
}
 8008cfc:	4770      	bx	lr
 8008cfe:	bf00      	nop
 8008d00:	ffffc000 	.word	0xffffc000

08008d04 <HAL_DMA2D_Start>:
{
 8008d04:	b510      	push	{r4, lr}
 8008d06:	b082      	sub	sp, #8
 8008d08:	4604      	mov	r4, r0
  __HAL_LOCK(hdma2d);
 8008d0a:	f890 0038 	ldrb.w	r0, [r0, #56]	@ 0x38
 8008d0e:	2801      	cmp	r0, #1
 8008d10:	d012      	beq.n	8008d38 <HAL_DMA2D_Start+0x34>
 8008d12:	2001      	movs	r0, #1
 8008d14:	f884 0038 	strb.w	r0, [r4, #56]	@ 0x38
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8008d18:	2002      	movs	r0, #2
 8008d1a:	f884 0039 	strb.w	r0, [r4, #57]	@ 0x39
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8008d1e:	9804      	ldr	r0, [sp, #16]
 8008d20:	9000      	str	r0, [sp, #0]
 8008d22:	4620      	mov	r0, r4
 8008d24:	f7ff ff76 	bl	8008c14 <DMA2D_SetConfig>
  __HAL_DMA2D_ENABLE(hdma2d);
 8008d28:	6822      	ldr	r2, [r4, #0]
 8008d2a:	6813      	ldr	r3, [r2, #0]
 8008d2c:	f043 0301 	orr.w	r3, r3, #1
 8008d30:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8008d32:	2000      	movs	r0, #0
}
 8008d34:	b002      	add	sp, #8
 8008d36:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hdma2d);
 8008d38:	2002      	movs	r0, #2
 8008d3a:	e7fb      	b.n	8008d34 <HAL_DMA2D_Start+0x30>

08008d3c <HAL_DMA2D_PollForTransfer>:
{
 8008d3c:	b570      	push	{r4, r5, r6, lr}
 8008d3e:	b082      	sub	sp, #8
 8008d40:	4604      	mov	r4, r0
 8008d42:	460d      	mov	r5, r1
  __IO uint32_t isrflags = 0x0;  
 8008d44:	2300      	movs	r3, #0
 8008d46:	9301      	str	r3, [sp, #4]
  if((hdma2d->Instance->CR & DMA2D_CR_START) != RESET)
 8008d48:	6803      	ldr	r3, [r0, #0]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	f013 0f01 	tst.w	r3, #1
 8008d50:	d12a      	bne.n	8008da8 <HAL_DMA2D_PollForTransfer+0x6c>
  if (((hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START) != RESET)  || 
 8008d52:	6823      	ldr	r3, [r4, #0]
 8008d54:	69da      	ldr	r2, [r3, #28]
 8008d56:	f012 0f20 	tst.w	r2, #32
 8008d5a:	d103      	bne.n	8008d64 <HAL_DMA2D_PollForTransfer+0x28>
      ((hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START) != RESET))
 8008d5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  if (((hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START) != RESET)  || 
 8008d5e:	f013 0f20 	tst.w	r3, #32
 8008d62:	d07f      	beq.n	8008e64 <HAL_DMA2D_PollForTransfer+0x128>
    tickstart = HAL_GetTick();
 8008d64:	f7ff fdc2 	bl	80088ec <HAL_GetTick>
 8008d68:	4606      	mov	r6, r0
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == RESET)
 8008d6a:	6823      	ldr	r3, [r4, #0]
 8008d6c:	685a      	ldr	r2, [r3, #4]
 8008d6e:	f012 0f10 	tst.w	r2, #16
 8008d72:	d177      	bne.n	8008e64 <HAL_DMA2D_PollForTransfer+0x128>
      isrflags = READ_REG(hdma2d->Instance->ISR);   
 8008d74:	685a      	ldr	r2, [r3, #4]
 8008d76:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != RESET)        
 8008d78:	9a01      	ldr	r2, [sp, #4]
 8008d7a:	f012 0f29 	tst.w	r2, #41	@ 0x29
 8008d7e:	d14f      	bne.n	8008e20 <HAL_DMA2D_PollForTransfer+0xe4>
      if(Timeout != HAL_MAX_DELAY)
 8008d80:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 8008d84:	d0f1      	beq.n	8008d6a <HAL_DMA2D_PollForTransfer+0x2e>
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8008d86:	b125      	cbz	r5, 8008d92 <HAL_DMA2D_PollForTransfer+0x56>
 8008d88:	f7ff fdb0 	bl	80088ec <HAL_GetTick>
 8008d8c:	1b80      	subs	r0, r0, r6
 8008d8e:	42a8      	cmp	r0, r5
 8008d90:	d9eb      	bls.n	8008d6a <HAL_DMA2D_PollForTransfer+0x2e>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8008d92:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8008d94:	f043 0320 	orr.w	r3, r3, #32
 8008d98:	63e3      	str	r3, [r4, #60]	@ 0x3c
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 8008d9a:	2003      	movs	r0, #3
 8008d9c:	f884 0039 	strb.w	r0, [r4, #57]	@ 0x39
          __HAL_UNLOCK(hdma2d);
 8008da0:	2300      	movs	r3, #0
 8008da2:	f884 3038 	strb.w	r3, [r4, #56]	@ 0x38
          return HAL_TIMEOUT;
 8008da6:	e066      	b.n	8008e76 <HAL_DMA2D_PollForTransfer+0x13a>
   tickstart = HAL_GetTick();
 8008da8:	f7ff fda0 	bl	80088ec <HAL_GetTick>
 8008dac:	4606      	mov	r6, r0
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == RESET)
 8008dae:	6823      	ldr	r3, [r4, #0]
 8008db0:	685a      	ldr	r2, [r3, #4]
 8008db2:	f012 0f02 	tst.w	r2, #2
 8008db6:	d1cc      	bne.n	8008d52 <HAL_DMA2D_PollForTransfer+0x16>
      isrflags = READ_REG(hdma2d->Instance->ISR); 
 8008db8:	685a      	ldr	r2, [r3, #4]
 8008dba:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != RESET)
 8008dbc:	9a01      	ldr	r2, [sp, #4]
 8008dbe:	f012 0f21 	tst.w	r2, #33	@ 0x21
 8008dc2:	d113      	bne.n	8008dec <HAL_DMA2D_PollForTransfer+0xb0>
      if(Timeout != HAL_MAX_DELAY)
 8008dc4:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 8008dc8:	d0f1      	beq.n	8008dae <HAL_DMA2D_PollForTransfer+0x72>
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8008dca:	b125      	cbz	r5, 8008dd6 <HAL_DMA2D_PollForTransfer+0x9a>
 8008dcc:	f7ff fd8e 	bl	80088ec <HAL_GetTick>
 8008dd0:	1b80      	subs	r0, r0, r6
 8008dd2:	42a8      	cmp	r0, r5
 8008dd4:	d9eb      	bls.n	8008dae <HAL_DMA2D_PollForTransfer+0x72>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8008dd6:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8008dd8:	f043 0320 	orr.w	r3, r3, #32
 8008ddc:	63e3      	str	r3, [r4, #60]	@ 0x3c
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8008dde:	2003      	movs	r0, #3
 8008de0:	f884 0039 	strb.w	r0, [r4, #57]	@ 0x39
          __HAL_UNLOCK(hdma2d);
 8008de4:	2300      	movs	r3, #0
 8008de6:	f884 3038 	strb.w	r3, [r4, #56]	@ 0x38
          return HAL_TIMEOUT;
 8008dea:	e044      	b.n	8008e76 <HAL_DMA2D_PollForTransfer+0x13a>
        if ((isrflags & DMA2D_FLAG_CE) != RESET)
 8008dec:	9a01      	ldr	r2, [sp, #4]
 8008dee:	f012 0f20 	tst.w	r2, #32
 8008df2:	d003      	beq.n	8008dfc <HAL_DMA2D_PollForTransfer+0xc0>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;        
 8008df4:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8008df6:	f042 0202 	orr.w	r2, r2, #2
 8008dfa:	63e2      	str	r2, [r4, #60]	@ 0x3c
        if ((isrflags & DMA2D_FLAG_TE) != RESET)        
 8008dfc:	9a01      	ldr	r2, [sp, #4]
 8008dfe:	f012 0f01 	tst.w	r2, #1
 8008e02:	d003      	beq.n	8008e0c <HAL_DMA2D_PollForTransfer+0xd0>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;        
 8008e04:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8008e06:	f042 0201 	orr.w	r2, r2, #1
 8008e0a:	63e2      	str	r2, [r4, #60]	@ 0x3c
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8008e0c:	2221      	movs	r2, #33	@ 0x21
 8008e0e:	609a      	str	r2, [r3, #8]
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8008e10:	2304      	movs	r3, #4
 8008e12:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
        __HAL_UNLOCK(hdma2d);
 8008e16:	2300      	movs	r3, #0
 8008e18:	f884 3038 	strb.w	r3, [r4, #56]	@ 0x38
        return HAL_ERROR;
 8008e1c:	2001      	movs	r0, #1
 8008e1e:	e02a      	b.n	8008e76 <HAL_DMA2D_PollForTransfer+0x13a>
        if ((isrflags & DMA2D_FLAG_CAE) != RESET)
 8008e20:	9a01      	ldr	r2, [sp, #4]
 8008e22:	f012 0f08 	tst.w	r2, #8
 8008e26:	d003      	beq.n	8008e30 <HAL_DMA2D_PollForTransfer+0xf4>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;        
 8008e28:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8008e2a:	f042 0204 	orr.w	r2, r2, #4
 8008e2e:	63e2      	str	r2, [r4, #60]	@ 0x3c
        if ((isrflags & DMA2D_FLAG_CE) != RESET)             
 8008e30:	9a01      	ldr	r2, [sp, #4]
 8008e32:	f012 0f20 	tst.w	r2, #32
 8008e36:	d003      	beq.n	8008e40 <HAL_DMA2D_PollForTransfer+0x104>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;        
 8008e38:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8008e3a:	f042 0202 	orr.w	r2, r2, #2
 8008e3e:	63e2      	str	r2, [r4, #60]	@ 0x3c
        if ((isrflags & DMA2D_FLAG_TE) != RESET)        
 8008e40:	9a01      	ldr	r2, [sp, #4]
 8008e42:	f012 0f01 	tst.w	r2, #1
 8008e46:	d003      	beq.n	8008e50 <HAL_DMA2D_PollForTransfer+0x114>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;        
 8008e48:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8008e4a:	f042 0201 	orr.w	r2, r2, #1
 8008e4e:	63e2      	str	r2, [r4, #60]	@ 0x3c
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8008e50:	2229      	movs	r2, #41	@ 0x29
 8008e52:	609a      	str	r2, [r3, #8]
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 8008e54:	2304      	movs	r3, #4
 8008e56:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
        __HAL_UNLOCK(hdma2d);
 8008e5a:	2300      	movs	r3, #0
 8008e5c:	f884 3038 	strb.w	r3, [r4, #56]	@ 0x38
        return HAL_ERROR;      
 8008e60:	2001      	movs	r0, #1
 8008e62:	e008      	b.n	8008e76 <HAL_DMA2D_PollForTransfer+0x13a>
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 8008e64:	6823      	ldr	r3, [r4, #0]
 8008e66:	2212      	movs	r2, #18
 8008e68:	609a      	str	r2, [r3, #8]
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8008e6a:	2301      	movs	r3, #1
 8008e6c:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
  __HAL_UNLOCK(hdma2d);
 8008e70:	2000      	movs	r0, #0
 8008e72:	f884 0038 	strb.w	r0, [r4, #56]	@ 0x38
}
 8008e76:	b002      	add	sp, #8
 8008e78:	bd70      	pop	{r4, r5, r6, pc}
	...

08008e7c <HAL_DMA2D_ConfigLayer>:
  __HAL_LOCK(hdma2d);
 8008e7c:	f890 2038 	ldrb.w	r2, [r0, #56]	@ 0x38
 8008e80:	2a01      	cmp	r2, #1
 8008e82:	d059      	beq.n	8008f38 <HAL_DMA2D_ConfigLayer+0xbc>
{ 
 8008e84:	b430      	push	{r4, r5}
 8008e86:	4603      	mov	r3, r0
  __HAL_LOCK(hdma2d);
 8008e88:	2201      	movs	r2, #1
 8008e8a:	f880 2038 	strb.w	r2, [r0, #56]	@ 0x38
  hdma2d->State = HAL_DMA2D_STATE_BUSY;  
 8008e8e:	2202      	movs	r2, #2
 8008e90:	f880 2039 	strb.w	r2, [r0, #57]	@ 0x39
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8008e94:	eb00 1201 	add.w	r2, r0, r1, lsl #4
 8008e98:	69d0      	ldr	r0, [r2, #28]
 8008e9a:	1c8a      	adds	r2, r1, #2
 8008e9c:	0112      	lsls	r2, r2, #4
 8008e9e:	589a      	ldr	r2, [r3, r2]
 8008ea0:	ea40 4202 	orr.w	r2, r0, r2, lsl #16
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8008ea4:	3809      	subs	r0, #9
 8008ea6:	2801      	cmp	r0, #1
 8008ea8:	d91d      	bls.n	8008ee6 <HAL_DMA2D_ConfigLayer+0x6a>
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8008eaa:	1c88      	adds	r0, r1, #2
 8008eac:	eb03 1000 	add.w	r0, r3, r0, lsl #4
 8008eb0:	6840      	ldr	r0, [r0, #4]
 8008eb2:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
  if(LayerIdx == 0)
 8008eb6:	bb39      	cbnz	r1, 8008f08 <HAL_DMA2D_ConfigLayer+0x8c>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8008eb8:	681c      	ldr	r4, [r3, #0]
 8008eba:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8008ebc:	481f      	ldr	r0, [pc, #124]	@ (8008f3c <HAL_DMA2D_ConfigLayer+0xc0>)
 8008ebe:	4028      	ands	r0, r5
 8008ec0:	4310      	orrs	r0, r2
 8008ec2:	6260      	str	r0, [r4, #36]	@ 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8008ec4:	6818      	ldr	r0, [r3, #0]
 8008ec6:	eb03 1201 	add.w	r2, r3, r1, lsl #4
 8008eca:	6994      	ldr	r4, [r2, #24]
 8008ecc:	6184      	str	r4, [r0, #24]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8008ece:	69d2      	ldr	r2, [r2, #28]
 8008ed0:	3a09      	subs	r2, #9
 8008ed2:	2a01      	cmp	r2, #1
 8008ed4:	d90f      	bls.n	8008ef6 <HAL_DMA2D_ConfigLayer+0x7a>
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8008ed6:	2201      	movs	r2, #1
 8008ed8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  __HAL_UNLOCK(hdma2d);  
 8008edc:	2000      	movs	r0, #0
 8008ede:	f883 0038 	strb.w	r0, [r3, #56]	@ 0x38
}
 8008ee2:	bc30      	pop	{r4, r5}
 8008ee4:	4770      	bx	lr
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8008ee6:	1c88      	adds	r0, r1, #2
 8008ee8:	eb03 1000 	add.w	r0, r3, r0, lsl #4
 8008eec:	6840      	ldr	r0, [r0, #4]
 8008eee:	f000 407f 	and.w	r0, r0, #4278190080	@ 0xff000000
 8008ef2:	4302      	orrs	r2, r0
 8008ef4:	e7df      	b.n	8008eb6 <HAL_DMA2D_ConfigLayer+0x3a>
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8008ef6:	3102      	adds	r1, #2
 8008ef8:	eb03 1101 	add.w	r1, r3, r1, lsl #4
 8008efc:	684a      	ldr	r2, [r1, #4]
 8008efe:	6819      	ldr	r1, [r3, #0]
 8008f00:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8008f04:	628a      	str	r2, [r1, #40]	@ 0x28
 8008f06:	e7e6      	b.n	8008ed6 <HAL_DMA2D_ConfigLayer+0x5a>
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8008f08:	681c      	ldr	r4, [r3, #0]
 8008f0a:	69e5      	ldr	r5, [r4, #28]
 8008f0c:	480b      	ldr	r0, [pc, #44]	@ (8008f3c <HAL_DMA2D_ConfigLayer+0xc0>)
 8008f0e:	4028      	ands	r0, r5
 8008f10:	4310      	orrs	r0, r2
 8008f12:	61e0      	str	r0, [r4, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);      
 8008f14:	6818      	ldr	r0, [r3, #0]
 8008f16:	eb03 1201 	add.w	r2, r3, r1, lsl #4
 8008f1a:	6994      	ldr	r4, [r2, #24]
 8008f1c:	6104      	str	r4, [r0, #16]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8008f1e:	69d2      	ldr	r2, [r2, #28]
 8008f20:	3a09      	subs	r2, #9
 8008f22:	2a01      	cmp	r2, #1
 8008f24:	d8d7      	bhi.n	8008ed6 <HAL_DMA2D_ConfigLayer+0x5a>
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));      
 8008f26:	3102      	adds	r1, #2
 8008f28:	eb03 1101 	add.w	r1, r3, r1, lsl #4
 8008f2c:	684a      	ldr	r2, [r1, #4]
 8008f2e:	6819      	ldr	r1, [r3, #0]
 8008f30:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8008f34:	620a      	str	r2, [r1, #32]
 8008f36:	e7ce      	b.n	8008ed6 <HAL_DMA2D_ConfigLayer+0x5a>
  __HAL_LOCK(hdma2d);
 8008f38:	2002      	movs	r0, #2
}
 8008f3a:	4770      	bx	lr
 8008f3c:	00fcfff0 	.word	0x00fcfff0

08008f40 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8008f40:	2300      	movs	r3, #0
 8008f42:	2b0f      	cmp	r3, #15
 8008f44:	f200 80e4 	bhi.w	8009110 <HAL_GPIO_Init+0x1d0>
{
 8008f48:	b570      	push	{r4, r5, r6, lr}
 8008f4a:	b082      	sub	sp, #8
 8008f4c:	e03a      	b.n	8008fc4 <HAL_GPIO_Init+0x84>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8008f4e:	2209      	movs	r2, #9
 8008f50:	e000      	b.n	8008f54 <HAL_GPIO_Init+0x14>
 8008f52:	2200      	movs	r2, #0
 8008f54:	40aa      	lsls	r2, r5
 8008f56:	4332      	orrs	r2, r6
        SYSCFG->EXTICR[position >> 2] = temp;
 8008f58:	3402      	adds	r4, #2
 8008f5a:	4d6e      	ldr	r5, [pc, #440]	@ (8009114 <HAL_GPIO_Init+0x1d4>)
 8008f5c:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008f60:	4a6d      	ldr	r2, [pc, #436]	@ (8009118 <HAL_GPIO_Init+0x1d8>)
 8008f62:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8008f64:	ea6f 020c 	mvn.w	r2, ip
 8008f68:	ea24 050c 	bic.w	r5, r4, ip
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8008f6c:	684e      	ldr	r6, [r1, #4]
 8008f6e:	f416 3f80 	tst.w	r6, #65536	@ 0x10000
 8008f72:	d001      	beq.n	8008f78 <HAL_GPIO_Init+0x38>
        {
          temp |= iocurrent;
 8008f74:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->IMR = temp;
 8008f78:	4c67      	ldr	r4, [pc, #412]	@ (8009118 <HAL_GPIO_Init+0x1d8>)
 8008f7a:	6025      	str	r5, [r4, #0]

        temp = EXTI->EMR;
 8008f7c:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8008f7e:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8008f82:	684e      	ldr	r6, [r1, #4]
 8008f84:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
 8008f88:	d001      	beq.n	8008f8e <HAL_GPIO_Init+0x4e>
        {
          temp |= iocurrent;
 8008f8a:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->EMR = temp;
 8008f8e:	4c62      	ldr	r4, [pc, #392]	@ (8009118 <HAL_GPIO_Init+0x1d8>)
 8008f90:	6065      	str	r5, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8008f92:	68a4      	ldr	r4, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 8008f94:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8008f98:	684e      	ldr	r6, [r1, #4]
 8008f9a:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
 8008f9e:	d001      	beq.n	8008fa4 <HAL_GPIO_Init+0x64>
        {
          temp |= iocurrent;
 8008fa0:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->RTSR = temp;
 8008fa4:	4c5c      	ldr	r4, [pc, #368]	@ (8009118 <HAL_GPIO_Init+0x1d8>)
 8008fa6:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 8008fa8:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8008faa:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008fac:	684d      	ldr	r5, [r1, #4]
 8008fae:	f415 1f00 	tst.w	r5, #2097152	@ 0x200000
 8008fb2:	d001      	beq.n	8008fb8 <HAL_GPIO_Init+0x78>
        {
          temp |= iocurrent;
 8008fb4:	ea4c 0204 	orr.w	r2, ip, r4
        }
        EXTI->FTSR = temp;
 8008fb8:	4c57      	ldr	r4, [pc, #348]	@ (8009118 <HAL_GPIO_Init+0x1d8>)
 8008fba:	60e2      	str	r2, [r4, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8008fbc:	3301      	adds	r3, #1
 8008fbe:	2b0f      	cmp	r3, #15
 8008fc0:	f200 80a4 	bhi.w	800910c <HAL_GPIO_Init+0x1cc>
    ioposition = ((uint32_t)0x01) << position;
 8008fc4:	2201      	movs	r2, #1
 8008fc6:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008fc8:	680c      	ldr	r4, [r1, #0]
 8008fca:	ea04 0c02 	and.w	ip, r4, r2
    if(iocurrent == ioposition)
 8008fce:	ea32 0404 	bics.w	r4, r2, r4
 8008fd2:	d1f3      	bne.n	8008fbc <HAL_GPIO_Init+0x7c>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008fd4:	684c      	ldr	r4, [r1, #4]
 8008fd6:	2c12      	cmp	r4, #18
 8008fd8:	bf18      	it	ne
 8008fda:	2c02      	cmpne	r4, #2
 8008fdc:	d112      	bne.n	8009004 <HAL_GPIO_Init+0xc4>
        temp = GPIOx->AFR[position >> 3];
 8008fde:	08dd      	lsrs	r5, r3, #3
 8008fe0:	3508      	adds	r5, #8
 8008fe2:	f850 4025 	ldr.w	r4, [r0, r5, lsl #2]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8008fe6:	f003 0607 	and.w	r6, r3, #7
 8008fea:	00b6      	lsls	r6, r6, #2
 8008fec:	f04f 0e0f 	mov.w	lr, #15
 8008ff0:	fa0e fe06 	lsl.w	lr, lr, r6
 8008ff4:	ea24 0e0e 	bic.w	lr, r4, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8008ff8:	690c      	ldr	r4, [r1, #16]
 8008ffa:	40b4      	lsls	r4, r6
 8008ffc:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3] = temp;
 8009000:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
      temp = GPIOx->MODER;
 8009004:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8009006:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 800900a:	2403      	movs	r4, #3
 800900c:	fa04 f40e 	lsl.w	r4, r4, lr
 8009010:	43e5      	mvns	r5, r4
 8009012:	ea26 0604 	bic.w	r6, r6, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8009016:	684c      	ldr	r4, [r1, #4]
 8009018:	f004 0403 	and.w	r4, r4, #3
 800901c:	fa04 f40e 	lsl.w	r4, r4, lr
 8009020:	4334      	orrs	r4, r6
      GPIOx->MODER = temp;
 8009022:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8009024:	684c      	ldr	r4, [r1, #4]
 8009026:	1e66      	subs	r6, r4, #1
 8009028:	2c11      	cmp	r4, #17
 800902a:	bf18      	it	ne
 800902c:	2e01      	cmpne	r6, #1
 800902e:	d901      	bls.n	8009034 <HAL_GPIO_Init+0xf4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8009030:	2c12      	cmp	r4, #18
 8009032:	d10f      	bne.n	8009054 <HAL_GPIO_Init+0x114>
        temp = GPIOx->OSPEEDR; 
 8009034:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8009036:	402e      	ands	r6, r5
        temp |= (GPIO_Init->Speed << (position * 2));
 8009038:	68cc      	ldr	r4, [r1, #12]
 800903a:	fa04 f40e 	lsl.w	r4, r4, lr
 800903e:	4334      	orrs	r4, r6
        GPIOx->OSPEEDR = temp;
 8009040:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8009042:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8009044:	ea24 0402 	bic.w	r4, r4, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8009048:	684a      	ldr	r2, [r1, #4]
 800904a:	f3c2 1200 	ubfx	r2, r2, #4, #1
 800904e:	409a      	lsls	r2, r3
 8009050:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 8009052:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 8009054:	68c2      	ldr	r2, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8009056:	4015      	ands	r5, r2
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8009058:	688a      	ldr	r2, [r1, #8]
 800905a:	fa02 f20e 	lsl.w	r2, r2, lr
 800905e:	432a      	orrs	r2, r5
      GPIOx->PUPDR = temp;
 8009060:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8009062:	684a      	ldr	r2, [r1, #4]
 8009064:	f012 5f80 	tst.w	r2, #268435456	@ 0x10000000
 8009068:	d0a8      	beq.n	8008fbc <HAL_GPIO_Init+0x7c>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800906a:	4a2c      	ldr	r2, [pc, #176]	@ (800911c <HAL_GPIO_Init+0x1dc>)
 800906c:	6c54      	ldr	r4, [r2, #68]	@ 0x44
 800906e:	f444 4480 	orr.w	r4, r4, #16384	@ 0x4000
 8009072:	6454      	str	r4, [r2, #68]	@ 0x44
 8009074:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8009076:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 800907a:	9201      	str	r2, [sp, #4]
 800907c:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 800907e:	089c      	lsrs	r4, r3, #2
 8009080:	1ca5      	adds	r5, r4, #2
 8009082:	4a24      	ldr	r2, [pc, #144]	@ (8009114 <HAL_GPIO_Init+0x1d4>)
 8009084:	f852 6025 	ldr.w	r6, [r2, r5, lsl #2]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8009088:	f003 0503 	and.w	r5, r3, #3
 800908c:	00ad      	lsls	r5, r5, #2
 800908e:	220f      	movs	r2, #15
 8009090:	40aa      	lsls	r2, r5
 8009092:	ea26 0602 	bic.w	r6, r6, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8009096:	4a22      	ldr	r2, [pc, #136]	@ (8009120 <HAL_GPIO_Init+0x1e0>)
 8009098:	4290      	cmp	r0, r2
 800909a:	f43f af5a 	beq.w	8008f52 <HAL_GPIO_Init+0x12>
 800909e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80090a2:	4290      	cmp	r0, r2
 80090a4:	d022      	beq.n	80090ec <HAL_GPIO_Init+0x1ac>
 80090a6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80090aa:	4290      	cmp	r0, r2
 80090ac:	d020      	beq.n	80090f0 <HAL_GPIO_Init+0x1b0>
 80090ae:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80090b2:	4290      	cmp	r0, r2
 80090b4:	d01e      	beq.n	80090f4 <HAL_GPIO_Init+0x1b4>
 80090b6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80090ba:	4290      	cmp	r0, r2
 80090bc:	d01c      	beq.n	80090f8 <HAL_GPIO_Init+0x1b8>
 80090be:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80090c2:	4290      	cmp	r0, r2
 80090c4:	d01a      	beq.n	80090fc <HAL_GPIO_Init+0x1bc>
 80090c6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80090ca:	4290      	cmp	r0, r2
 80090cc:	d018      	beq.n	8009100 <HAL_GPIO_Init+0x1c0>
 80090ce:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80090d2:	4290      	cmp	r0, r2
 80090d4:	d016      	beq.n	8009104 <HAL_GPIO_Init+0x1c4>
 80090d6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80090da:	4290      	cmp	r0, r2
 80090dc:	d014      	beq.n	8009108 <HAL_GPIO_Init+0x1c8>
 80090de:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80090e2:	4290      	cmp	r0, r2
 80090e4:	f43f af33 	beq.w	8008f4e <HAL_GPIO_Init+0xe>
 80090e8:	220a      	movs	r2, #10
 80090ea:	e733      	b.n	8008f54 <HAL_GPIO_Init+0x14>
 80090ec:	2201      	movs	r2, #1
 80090ee:	e731      	b.n	8008f54 <HAL_GPIO_Init+0x14>
 80090f0:	2202      	movs	r2, #2
 80090f2:	e72f      	b.n	8008f54 <HAL_GPIO_Init+0x14>
 80090f4:	2203      	movs	r2, #3
 80090f6:	e72d      	b.n	8008f54 <HAL_GPIO_Init+0x14>
 80090f8:	2204      	movs	r2, #4
 80090fa:	e72b      	b.n	8008f54 <HAL_GPIO_Init+0x14>
 80090fc:	2205      	movs	r2, #5
 80090fe:	e729      	b.n	8008f54 <HAL_GPIO_Init+0x14>
 8009100:	2206      	movs	r2, #6
 8009102:	e727      	b.n	8008f54 <HAL_GPIO_Init+0x14>
 8009104:	2207      	movs	r2, #7
 8009106:	e725      	b.n	8008f54 <HAL_GPIO_Init+0x14>
 8009108:	2208      	movs	r2, #8
 800910a:	e723      	b.n	8008f54 <HAL_GPIO_Init+0x14>
      }
    }
  }
}
 800910c:	b002      	add	sp, #8
 800910e:	bd70      	pop	{r4, r5, r6, pc}
 8009110:	4770      	bx	lr
 8009112:	bf00      	nop
 8009114:	40013800 	.word	0x40013800
 8009118:	40013c00 	.word	0x40013c00
 800911c:	40023800 	.word	0x40023800
 8009120:	40020000 	.word	0x40020000

08009124 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8009124:	6903      	ldr	r3, [r0, #16]
 8009126:	4219      	tst	r1, r3
 8009128:	d001      	beq.n	800912e <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
 800912a:	2001      	movs	r0, #1
 800912c:	4770      	bx	lr
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800912e:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 8009130:	4770      	bx	lr

08009132 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8009132:	b10a      	cbz	r2, 8009138 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009134:	6181      	str	r1, [r0, #24]
 8009136:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8009138:	0409      	lsls	r1, r1, #16
 800913a:	6181      	str	r1, [r0, #24]
  }
}
 800913c:	4770      	bx	lr

0800913e <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800913e:	6803      	ldr	r3, [r0, #0]
 8009140:	699a      	ldr	r2, [r3, #24]
 8009142:	f012 0f02 	tst.w	r2, #2
 8009146:	d001      	beq.n	800914c <I2C_Flush_TXDR+0xe>
  {
    hi2c->Instance->TXDR = 0x00U;
 8009148:	2200      	movs	r2, #0
 800914a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800914c:	6803      	ldr	r3, [r0, #0]
 800914e:	699a      	ldr	r2, [r3, #24]
 8009150:	f012 0f01 	tst.w	r2, #1
 8009154:	d103      	bne.n	800915e <I2C_Flush_TXDR+0x20>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8009156:	699a      	ldr	r2, [r3, #24]
 8009158:	f042 0201 	orr.w	r2, r2, #1
 800915c:	619a      	str	r2, [r3, #24]
  }
}
 800915e:	4770      	bx	lr

08009160 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c,  uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8009160:	b430      	push	{r4, r5}
 8009162:	9d02      	ldr	r5, [sp, #8]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8009164:	6804      	ldr	r4, [r0, #0]
 8009166:	6860      	ldr	r0, [r4, #4]
 8009168:	ea4f 5c55 	mov.w	ip, r5, lsr #21
 800916c:	f40c 6c80 	and.w	ip, ip, #1024	@ 0x400
 8009170:	f04c 7c7f 	orr.w	ip, ip, #66846720	@ 0x3fc0000
 8009174:	f44c 3c58 	orr.w	ip, ip, #221184	@ 0x36000
 8009178:	f44c 7c7f 	orr.w	ip, ip, #1020	@ 0x3fc
 800917c:	f04c 0c03 	orr.w	ip, ip, #3
 8009180:	ea20 000c 	bic.w	r0, r0, ip
 8009184:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8009188:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800918c:	4319      	orrs	r1, r3
 800918e:	4329      	orrs	r1, r5
 8009190:	4308      	orrs	r0, r1
 8009192:	6060      	str	r0, [r4, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8009194:	bc30      	pop	{r4, r5}
 8009196:	4770      	bx	lr

08009198 <I2C_IsAcknowledgeFailed>:
{
 8009198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800919a:	4605      	mov	r5, r0
 800919c:	460e      	mov	r6, r1
 800919e:	4617      	mov	r7, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80091a0:	6803      	ldr	r3, [r0, #0]
 80091a2:	699b      	ldr	r3, [r3, #24]
 80091a4:	f013 0f10 	tst.w	r3, #16
 80091a8:	d101      	bne.n	80091ae <I2C_IsAcknowledgeFailed+0x16>
  return HAL_OK;
 80091aa:	2000      	movs	r0, #0
}
 80091ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80091ae:	682b      	ldr	r3, [r5, #0]
 80091b0:	699c      	ldr	r4, [r3, #24]
 80091b2:	f014 0f20 	tst.w	r4, #32
 80091b6:	d112      	bne.n	80091de <I2C_IsAcknowledgeFailed+0x46>
      if (Timeout != HAL_MAX_DELAY)
 80091b8:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 80091bc:	d0f7      	beq.n	80091ae <I2C_IsAcknowledgeFailed+0x16>
        if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80091be:	b126      	cbz	r6, 80091ca <I2C_IsAcknowledgeFailed+0x32>
 80091c0:	f7ff fb94 	bl	80088ec <HAL_GetTick>
 80091c4:	1bc0      	subs	r0, r0, r7
 80091c6:	42b0      	cmp	r0, r6
 80091c8:	d9f1      	bls.n	80091ae <I2C_IsAcknowledgeFailed+0x16>
          hi2c->State = HAL_I2C_STATE_READY;
 80091ca:	2320      	movs	r3, #32
 80091cc:	f885 3041 	strb.w	r3, [r5, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80091d0:	2300      	movs	r3, #0
 80091d2:	f885 3042 	strb.w	r3, [r5, #66]	@ 0x42
          __HAL_UNLOCK(hi2c);
 80091d6:	f885 3040 	strb.w	r3, [r5, #64]	@ 0x40
          return HAL_TIMEOUT;
 80091da:	2003      	movs	r0, #3
 80091dc:	e7e6      	b.n	80091ac <I2C_IsAcknowledgeFailed+0x14>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80091de:	2210      	movs	r2, #16
 80091e0:	61da      	str	r2, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80091e2:	682b      	ldr	r3, [r5, #0]
 80091e4:	2420      	movs	r4, #32
 80091e6:	61dc      	str	r4, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 80091e8:	4628      	mov	r0, r5
 80091ea:	f7ff ffa8 	bl	800913e <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 80091ee:	682a      	ldr	r2, [r5, #0]
 80091f0:	6853      	ldr	r3, [r2, #4]
 80091f2:	f023 73ff 	bic.w	r3, r3, #33423360	@ 0x1fe0000
 80091f6:	f423 338b 	bic.w	r3, r3, #71168	@ 0x11600
 80091fa:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 80091fe:	f023 0301 	bic.w	r3, r3, #1
 8009202:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8009204:	2304      	movs	r3, #4
 8009206:	646b      	str	r3, [r5, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8009208:	f885 4041 	strb.w	r4, [r5, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800920c:	2300      	movs	r3, #0
 800920e:	f885 3042 	strb.w	r3, [r5, #66]	@ 0x42
    __HAL_UNLOCK(hi2c);
 8009212:	f885 3040 	strb.w	r3, [r5, #64]	@ 0x40
    return HAL_ERROR;
 8009216:	2001      	movs	r0, #1
 8009218:	e7c8      	b.n	80091ac <I2C_IsAcknowledgeFailed+0x14>

0800921a <I2C_WaitOnTXISFlagUntilTimeout>:
{
 800921a:	b570      	push	{r4, r5, r6, lr}
 800921c:	4604      	mov	r4, r0
 800921e:	460d      	mov	r5, r1
 8009220:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009222:	6823      	ldr	r3, [r4, #0]
 8009224:	699b      	ldr	r3, [r3, #24]
 8009226:	f013 0f02 	tst.w	r3, #2
 800922a:	d11c      	bne.n	8009266 <I2C_WaitOnTXISFlagUntilTimeout+0x4c>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800922c:	4632      	mov	r2, r6
 800922e:	4629      	mov	r1, r5
 8009230:	4620      	mov	r0, r4
 8009232:	f7ff ffb1 	bl	8009198 <I2C_IsAcknowledgeFailed>
 8009236:	b9c0      	cbnz	r0, 800926a <I2C_WaitOnTXISFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8009238:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 800923c:	d0f1      	beq.n	8009222 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800923e:	b125      	cbz	r5, 800924a <I2C_WaitOnTXISFlagUntilTimeout+0x30>
 8009240:	f7ff fb54 	bl	80088ec <HAL_GetTick>
 8009244:	1b80      	subs	r0, r0, r6
 8009246:	42a8      	cmp	r0, r5
 8009248:	d9eb      	bls.n	8009222 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800924a:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800924c:	f043 0320 	orr.w	r3, r3, #32
 8009250:	6463      	str	r3, [r4, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009252:	2320      	movs	r3, #32
 8009254:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009258:	2300      	movs	r3, #0
 800925a:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
        __HAL_UNLOCK(hi2c);
 800925e:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        return HAL_TIMEOUT;
 8009262:	2003      	movs	r0, #3
 8009264:	e000      	b.n	8009268 <I2C_WaitOnTXISFlagUntilTimeout+0x4e>
  return HAL_OK;
 8009266:	2000      	movs	r0, #0
}
 8009268:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 800926a:	2001      	movs	r0, #1
 800926c:	e7fc      	b.n	8009268 <I2C_WaitOnTXISFlagUntilTimeout+0x4e>

0800926e <I2C_WaitOnFlagUntilTimeout>:
{
 800926e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009272:	4606      	mov	r6, r0
 8009274:	4688      	mov	r8, r1
 8009276:	4617      	mov	r7, r2
 8009278:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800927a:	6834      	ldr	r4, [r6, #0]
 800927c:	69a4      	ldr	r4, [r4, #24]
 800927e:	ea38 0404 	bics.w	r4, r8, r4
 8009282:	bf0c      	ite	eq
 8009284:	2401      	moveq	r4, #1
 8009286:	2400      	movne	r4, #0
 8009288:	42bc      	cmp	r4, r7
 800928a:	d113      	bne.n	80092b4 <I2C_WaitOnFlagUntilTimeout+0x46>
    if (Timeout != HAL_MAX_DELAY)
 800928c:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 8009290:	d0f3      	beq.n	800927a <I2C_WaitOnFlagUntilTimeout+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009292:	b12d      	cbz	r5, 80092a0 <I2C_WaitOnFlagUntilTimeout+0x32>
 8009294:	f7ff fb2a 	bl	80088ec <HAL_GetTick>
 8009298:	9b06      	ldr	r3, [sp, #24]
 800929a:	1ac0      	subs	r0, r0, r3
 800929c:	42a8      	cmp	r0, r5
 800929e:	d9ec      	bls.n	800927a <I2C_WaitOnFlagUntilTimeout+0xc>
        hi2c->State = HAL_I2C_STATE_READY;
 80092a0:	2320      	movs	r3, #32
 80092a2:	f886 3041 	strb.w	r3, [r6, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80092a6:	2300      	movs	r3, #0
 80092a8:	f886 3042 	strb.w	r3, [r6, #66]	@ 0x42
        __HAL_UNLOCK(hi2c);
 80092ac:	f886 3040 	strb.w	r3, [r6, #64]	@ 0x40
        return HAL_TIMEOUT;
 80092b0:	2003      	movs	r0, #3
 80092b2:	e000      	b.n	80092b6 <I2C_WaitOnFlagUntilTimeout+0x48>
  return HAL_OK;
 80092b4:	2000      	movs	r0, #0
}
 80092b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080092ba <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 80092ba:	b570      	push	{r4, r5, r6, lr}
 80092bc:	4605      	mov	r5, r0
 80092be:	460c      	mov	r4, r1
 80092c0:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80092c2:	682b      	ldr	r3, [r5, #0]
 80092c4:	699b      	ldr	r3, [r3, #24]
 80092c6:	f013 0f20 	tst.w	r3, #32
 80092ca:	d119      	bne.n	8009300 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80092cc:	4632      	mov	r2, r6
 80092ce:	4621      	mov	r1, r4
 80092d0:	4628      	mov	r0, r5
 80092d2:	f7ff ff61 	bl	8009198 <I2C_IsAcknowledgeFailed>
 80092d6:	b9a8      	cbnz	r0, 8009304 <I2C_WaitOnSTOPFlagUntilTimeout+0x4a>
    if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80092d8:	b124      	cbz	r4, 80092e4 <I2C_WaitOnSTOPFlagUntilTimeout+0x2a>
 80092da:	f7ff fb07 	bl	80088ec <HAL_GetTick>
 80092de:	1b80      	subs	r0, r0, r6
 80092e0:	42a0      	cmp	r0, r4
 80092e2:	d9ee      	bls.n	80092c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80092e4:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 80092e6:	f043 0320 	orr.w	r3, r3, #32
 80092ea:	646b      	str	r3, [r5, #68]	@ 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80092ec:	2320      	movs	r3, #32
 80092ee:	f885 3041 	strb.w	r3, [r5, #65]	@ 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80092f2:	2300      	movs	r3, #0
 80092f4:	f885 3042 	strb.w	r3, [r5, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80092f8:	f885 3040 	strb.w	r3, [r5, #64]	@ 0x40
      return HAL_TIMEOUT;
 80092fc:	2003      	movs	r0, #3
}
 80092fe:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 8009300:	2000      	movs	r0, #0
 8009302:	e7fc      	b.n	80092fe <I2C_WaitOnSTOPFlagUntilTimeout+0x44>
      return HAL_ERROR;
 8009304:	2001      	movs	r0, #1
 8009306:	e7fa      	b.n	80092fe <I2C_WaitOnSTOPFlagUntilTimeout+0x44>

08009308 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8009308:	b570      	push	{r4, r5, r6, lr}
 800930a:	4604      	mov	r4, r0
 800930c:	460d      	mov	r5, r1
 800930e:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009310:	6823      	ldr	r3, [r4, #0]
 8009312:	699b      	ldr	r3, [r3, #24]
 8009314:	f013 0f04 	tst.w	r3, #4
 8009318:	d13d      	bne.n	8009396 <I2C_WaitOnRXNEFlagUntilTimeout+0x8e>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800931a:	4632      	mov	r2, r6
 800931c:	4629      	mov	r1, r5
 800931e:	4620      	mov	r0, r4
 8009320:	f7ff ff3a 	bl	8009198 <I2C_IsAcknowledgeFailed>
 8009324:	4601      	mov	r1, r0
 8009326:	2800      	cmp	r0, #0
 8009328:	d137      	bne.n	800939a <I2C_WaitOnRXNEFlagUntilTimeout+0x92>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800932a:	6823      	ldr	r3, [r4, #0]
 800932c:	699a      	ldr	r2, [r3, #24]
 800932e:	f012 0f20 	tst.w	r2, #32
 8009332:	d112      	bne.n	800935a <I2C_WaitOnRXNEFlagUntilTimeout+0x52>
    if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009334:	b125      	cbz	r5, 8009340 <I2C_WaitOnRXNEFlagUntilTimeout+0x38>
 8009336:	f7ff fad9 	bl	80088ec <HAL_GetTick>
 800933a:	1b80      	subs	r0, r0, r6
 800933c:	42a8      	cmp	r0, r5
 800933e:	d9e7      	bls.n	8009310 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009340:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8009342:	f043 0320 	orr.w	r3, r3, #32
 8009346:	6463      	str	r3, [r4, #68]	@ 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8009348:	2320      	movs	r3, #32
 800934a:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      __HAL_UNLOCK(hi2c);
 800934e:	2300      	movs	r3, #0
 8009350:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_TIMEOUT;
 8009354:	2103      	movs	r1, #3
}
 8009356:	4608      	mov	r0, r1
 8009358:	bd70      	pop	{r4, r5, r6, pc}
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800935a:	699a      	ldr	r2, [r3, #24]
 800935c:	f012 0f04 	tst.w	r2, #4
 8009360:	d002      	beq.n	8009368 <I2C_WaitOnRXNEFlagUntilTimeout+0x60>
 8009362:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
 8009364:	2a00      	cmp	r2, #0
 8009366:	d1f6      	bne.n	8009356 <I2C_WaitOnRXNEFlagUntilTimeout+0x4e>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009368:	2220      	movs	r2, #32
 800936a:	61da      	str	r2, [r3, #28]
        I2C_RESET_CR2(hi2c);
 800936c:	6821      	ldr	r1, [r4, #0]
 800936e:	684b      	ldr	r3, [r1, #4]
 8009370:	f023 73ff 	bic.w	r3, r3, #33423360	@ 0x1fe0000
 8009374:	f423 338b 	bic.w	r3, r3, #71168	@ 0x11600
 8009378:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 800937c:	f023 0301 	bic.w	r3, r3, #1
 8009380:	604b      	str	r3, [r1, #4]
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009382:	2300      	movs	r3, #0
 8009384:	6463      	str	r3, [r4, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009386:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800938a:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
        __HAL_UNLOCK(hi2c);
 800938e:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        return HAL_ERROR;
 8009392:	2101      	movs	r1, #1
 8009394:	e7df      	b.n	8009356 <I2C_WaitOnRXNEFlagUntilTimeout+0x4e>
  return HAL_OK;
 8009396:	2100      	movs	r1, #0
 8009398:	e7dd      	b.n	8009356 <I2C_WaitOnRXNEFlagUntilTimeout+0x4e>
      return HAL_ERROR;
 800939a:	2101      	movs	r1, #1
 800939c:	e7db      	b.n	8009356 <I2C_WaitOnRXNEFlagUntilTimeout+0x4e>
	...

080093a0 <HAL_I2C_Init>:
  if (hi2c == NULL)
 80093a0:	2800      	cmp	r0, #0
 80093a2:	d057      	beq.n	8009454 <HAL_I2C_Init+0xb4>
{
 80093a4:	b510      	push	{r4, lr}
 80093a6:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80093a8:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d041      	beq.n	8009434 <HAL_I2C_Init+0x94>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80093b0:	2324      	movs	r3, #36	@ 0x24
 80093b2:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_I2C_DISABLE(hi2c);
 80093b6:	6822      	ldr	r2, [r4, #0]
 80093b8:	6813      	ldr	r3, [r2, #0]
 80093ba:	f023 0301 	bic.w	r3, r3, #1
 80093be:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80093c0:	6863      	ldr	r3, [r4, #4]
 80093c2:	6822      	ldr	r2, [r4, #0]
 80093c4:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 80093c8:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80093ca:	6822      	ldr	r2, [r4, #0]
 80093cc:	6893      	ldr	r3, [r2, #8]
 80093ce:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80093d2:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80093d4:	68e3      	ldr	r3, [r4, #12]
 80093d6:	2b01      	cmp	r3, #1
 80093d8:	d031      	beq.n	800943e <HAL_I2C_Init+0x9e>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80093da:	68a3      	ldr	r3, [r4, #8]
 80093dc:	6822      	ldr	r2, [r4, #0]
 80093de:	f443 4304 	orr.w	r3, r3, #33792	@ 0x8400
 80093e2:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80093e4:	68e3      	ldr	r3, [r4, #12]
 80093e6:	2b02      	cmp	r3, #2
 80093e8:	d02f      	beq.n	800944a <HAL_I2C_Init+0xaa>
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80093ea:	6822      	ldr	r2, [r4, #0]
 80093ec:	6851      	ldr	r1, [r2, #4]
 80093ee:	4b1a      	ldr	r3, [pc, #104]	@ (8009458 <HAL_I2C_Init+0xb8>)
 80093f0:	430b      	orrs	r3, r1
 80093f2:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80093f4:	6822      	ldr	r2, [r4, #0]
 80093f6:	68d3      	ldr	r3, [r2, #12]
 80093f8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80093fc:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80093fe:	6923      	ldr	r3, [r4, #16]
 8009400:	6962      	ldr	r2, [r4, #20]
 8009402:	4313      	orrs	r3, r2
 8009404:	69a1      	ldr	r1, [r4, #24]
 8009406:	6822      	ldr	r2, [r4, #0]
 8009408:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800940c:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800940e:	69e3      	ldr	r3, [r4, #28]
 8009410:	6a21      	ldr	r1, [r4, #32]
 8009412:	6822      	ldr	r2, [r4, #0]
 8009414:	430b      	orrs	r3, r1
 8009416:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 8009418:	6822      	ldr	r2, [r4, #0]
 800941a:	6813      	ldr	r3, [r2, #0]
 800941c:	f043 0301 	orr.w	r3, r3, #1
 8009420:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009422:	2000      	movs	r0, #0
 8009424:	6460      	str	r0, [r4, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8009426:	2320      	movs	r3, #32
 8009428:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800942c:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800942e:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
}
 8009432:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8009434:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
    HAL_I2C_MspInit(hi2c);
 8009438:	f006 f96e 	bl	800f718 <HAL_I2C_MspInit>
 800943c:	e7b8      	b.n	80093b0 <HAL_I2C_Init+0x10>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800943e:	68a3      	ldr	r3, [r4, #8]
 8009440:	6822      	ldr	r2, [r4, #0]
 8009442:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009446:	6093      	str	r3, [r2, #8]
 8009448:	e7cc      	b.n	80093e4 <HAL_I2C_Init+0x44>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800944a:	6823      	ldr	r3, [r4, #0]
 800944c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009450:	605a      	str	r2, [r3, #4]
 8009452:	e7ca      	b.n	80093ea <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 8009454:	2001      	movs	r0, #1
}
 8009456:	4770      	bx	lr
 8009458:	02008000 	.word	0x02008000

0800945c <HAL_I2C_Master_Transmit>:
{
 800945c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009460:	b082      	sub	sp, #8
 8009462:	460f      	mov	r7, r1
 8009464:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 8009466:	f890 1041 	ldrb.w	r1, [r0, #65]	@ 0x41
 800946a:	b2c9      	uxtb	r1, r1
 800946c:	2920      	cmp	r1, #32
 800946e:	f040 80b1 	bne.w	80095d4 <HAL_I2C_Master_Transmit+0x178>
 8009472:	4604      	mov	r4, r0
 8009474:	4690      	mov	r8, r2
 8009476:	4699      	mov	r9, r3
    __HAL_LOCK(hi2c);
 8009478:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800947c:	2b01      	cmp	r3, #1
 800947e:	f000 80ad 	beq.w	80095dc <HAL_I2C_Master_Transmit+0x180>
 8009482:	f04f 0a01 	mov.w	sl, #1
 8009486:	f880 a040 	strb.w	sl, [r0, #64]	@ 0x40
    tickstart = HAL_GetTick();
 800948a:	f7ff fa2f 	bl	80088ec <HAL_GetTick>
 800948e:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009490:	9000      	str	r0, [sp, #0]
 8009492:	2319      	movs	r3, #25
 8009494:	4652      	mov	r2, sl
 8009496:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800949a:	4620      	mov	r0, r4
 800949c:	f7ff fee7 	bl	800926e <I2C_WaitOnFlagUntilTimeout>
 80094a0:	2800      	cmp	r0, #0
 80094a2:	f040 809d 	bne.w	80095e0 <HAL_I2C_Master_Transmit+0x184>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80094a6:	2321      	movs	r3, #33	@ 0x21
 80094a8:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80094ac:	2310      	movs	r3, #16
 80094ae:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80094b2:	2300      	movs	r3, #0
 80094b4:	6463      	str	r3, [r4, #68]	@ 0x44
    hi2c->pBuffPtr  = pData;
 80094b6:	f8c4 8024 	str.w	r8, [r4, #36]	@ 0x24
    hi2c->XferCount = Size;
 80094ba:	f8a4 902a 	strh.w	r9, [r4, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80094be:	6363      	str	r3, [r4, #52]	@ 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80094c0:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80094c2:	b29b      	uxth	r3, r3
 80094c4:	2bff      	cmp	r3, #255	@ 0xff
 80094c6:	d90a      	bls.n	80094de <HAL_I2C_Master_Transmit+0x82>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80094c8:	22ff      	movs	r2, #255	@ 0xff
 80094ca:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80094cc:	4b46      	ldr	r3, [pc, #280]	@ (80095e8 <HAL_I2C_Master_Transmit+0x18c>)
 80094ce:	9300      	str	r3, [sp, #0]
 80094d0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80094d4:	4639      	mov	r1, r7
 80094d6:	4620      	mov	r0, r4
 80094d8:	f7ff fe42 	bl	8009160 <I2C_TransferConfig>
 80094dc:	e01f      	b.n	800951e <HAL_I2C_Master_Transmit+0xc2>
      hi2c->XferSize = hi2c->XferCount;
 80094de:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 80094e0:	b292      	uxth	r2, r2
 80094e2:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 80094e4:	4b40      	ldr	r3, [pc, #256]	@ (80095e8 <HAL_I2C_Master_Transmit+0x18c>)
 80094e6:	9300      	str	r3, [sp, #0]
 80094e8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80094ec:	b2d2      	uxtb	r2, r2
 80094ee:	4639      	mov	r1, r7
 80094f0:	4620      	mov	r0, r4
 80094f2:	f7ff fe35 	bl	8009160 <I2C_TransferConfig>
 80094f6:	e012      	b.n	800951e <HAL_I2C_Master_Transmit+0xc2>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80094f8:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80094fa:	2b04      	cmp	r3, #4
 80094fc:	d001      	beq.n	8009502 <HAL_I2C_Master_Transmit+0xa6>
          return HAL_TIMEOUT;
 80094fe:	2003      	movs	r0, #3
 8009500:	e069      	b.n	80095d6 <HAL_I2C_Master_Transmit+0x17a>
          return HAL_ERROR;
 8009502:	2001      	movs	r0, #1
 8009504:	e067      	b.n	80095d6 <HAL_I2C_Master_Transmit+0x17a>
          hi2c->XferSize = hi2c->XferCount;
 8009506:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8009508:	b292      	uxth	r2, r2
 800950a:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800950c:	2300      	movs	r3, #0
 800950e:	9300      	str	r3, [sp, #0]
 8009510:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8009514:	b2d2      	uxtb	r2, r2
 8009516:	4639      	mov	r1, r7
 8009518:	4620      	mov	r0, r4
 800951a:	f7ff fe21 	bl	8009160 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800951e:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8009520:	b29b      	uxth	r3, r3
 8009522:	2b00      	cmp	r3, #0
 8009524:	d033      	beq.n	800958e <HAL_I2C_Master_Transmit+0x132>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009526:	462a      	mov	r2, r5
 8009528:	4631      	mov	r1, r6
 800952a:	4620      	mov	r0, r4
 800952c:	f7ff fe75 	bl	800921a <I2C_WaitOnTXISFlagUntilTimeout>
 8009530:	2800      	cmp	r0, #0
 8009532:	d1e1      	bne.n	80094f8 <HAL_I2C_Master_Transmit+0x9c>
      hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
 8009534:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8009536:	1c5a      	adds	r2, r3, #1
 8009538:	6262      	str	r2, [r4, #36]	@ 0x24
 800953a:	6822      	ldr	r2, [r4, #0]
 800953c:	781b      	ldrb	r3, [r3, #0]
 800953e:	6293      	str	r3, [r2, #40]	@ 0x28
      hi2c->XferCount--;
 8009540:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8009542:	b29b      	uxth	r3, r3
 8009544:	3b01      	subs	r3, #1
 8009546:	b29b      	uxth	r3, r3
 8009548:	8563      	strh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 800954a:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 800954c:	3b01      	subs	r3, #1
 800954e:	b29b      	uxth	r3, r3
 8009550:	8523      	strh	r3, [r4, #40]	@ 0x28
      if ((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 8009552:	2b00      	cmp	r3, #0
 8009554:	d1e3      	bne.n	800951e <HAL_I2C_Master_Transmit+0xc2>
 8009556:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8009558:	b29b      	uxth	r3, r3
 800955a:	2b00      	cmp	r3, #0
 800955c:	d0df      	beq.n	800951e <HAL_I2C_Master_Transmit+0xc2>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800955e:	9500      	str	r5, [sp, #0]
 8009560:	4633      	mov	r3, r6
 8009562:	2200      	movs	r2, #0
 8009564:	2180      	movs	r1, #128	@ 0x80
 8009566:	4620      	mov	r0, r4
 8009568:	f7ff fe81 	bl	800926e <I2C_WaitOnFlagUntilTimeout>
 800956c:	2800      	cmp	r0, #0
 800956e:	d139      	bne.n	80095e4 <HAL_I2C_Master_Transmit+0x188>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009570:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8009572:	b29b      	uxth	r3, r3
 8009574:	2bff      	cmp	r3, #255	@ 0xff
 8009576:	d9c6      	bls.n	8009506 <HAL_I2C_Master_Transmit+0xaa>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009578:	22ff      	movs	r2, #255	@ 0xff
 800957a:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800957c:	2300      	movs	r3, #0
 800957e:	9300      	str	r3, [sp, #0]
 8009580:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009584:	4639      	mov	r1, r7
 8009586:	4620      	mov	r0, r4
 8009588:	f7ff fdea 	bl	8009160 <I2C_TransferConfig>
 800958c:	e7c7      	b.n	800951e <HAL_I2C_Master_Transmit+0xc2>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800958e:	462a      	mov	r2, r5
 8009590:	4631      	mov	r1, r6
 8009592:	4620      	mov	r0, r4
 8009594:	f7ff fe91 	bl	80092ba <I2C_WaitOnSTOPFlagUntilTimeout>
 8009598:	b130      	cbz	r0, 80095a8 <HAL_I2C_Master_Transmit+0x14c>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800959a:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800959c:	2b04      	cmp	r3, #4
 800959e:	d001      	beq.n	80095a4 <HAL_I2C_Master_Transmit+0x148>
        return HAL_TIMEOUT;
 80095a0:	2003      	movs	r0, #3
 80095a2:	e018      	b.n	80095d6 <HAL_I2C_Master_Transmit+0x17a>
        return HAL_ERROR;
 80095a4:	2001      	movs	r0, #1
 80095a6:	e016      	b.n	80095d6 <HAL_I2C_Master_Transmit+0x17a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80095a8:	6823      	ldr	r3, [r4, #0]
 80095aa:	2220      	movs	r2, #32
 80095ac:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80095ae:	6821      	ldr	r1, [r4, #0]
 80095b0:	684b      	ldr	r3, [r1, #4]
 80095b2:	f023 73ff 	bic.w	r3, r3, #33423360	@ 0x1fe0000
 80095b6:	f423 338b 	bic.w	r3, r3, #71168	@ 0x11600
 80095ba:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 80095be:	f023 0301 	bic.w	r3, r3, #1
 80095c2:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80095c4:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80095c8:	2300      	movs	r3, #0
 80095ca:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    __HAL_UNLOCK(hi2c);
 80095ce:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
    return HAL_OK;
 80095d2:	e000      	b.n	80095d6 <HAL_I2C_Master_Transmit+0x17a>
    return HAL_BUSY;
 80095d4:	2002      	movs	r0, #2
}
 80095d6:	b002      	add	sp, #8
 80095d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_LOCK(hi2c);
 80095dc:	2002      	movs	r0, #2
 80095de:	e7fa      	b.n	80095d6 <HAL_I2C_Master_Transmit+0x17a>
      return HAL_TIMEOUT;
 80095e0:	2003      	movs	r0, #3
 80095e2:	e7f8      	b.n	80095d6 <HAL_I2C_Master_Transmit+0x17a>
          return HAL_TIMEOUT;
 80095e4:	2003      	movs	r0, #3
 80095e6:	e7f6      	b.n	80095d6 <HAL_I2C_Master_Transmit+0x17a>
 80095e8:	80002000 	.word	0x80002000

080095ec <HAL_I2C_Master_Receive>:
{
 80095ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80095f0:	b082      	sub	sp, #8
 80095f2:	460f      	mov	r7, r1
 80095f4:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 80095f6:	f890 1041 	ldrb.w	r1, [r0, #65]	@ 0x41
 80095fa:	b2c9      	uxtb	r1, r1
 80095fc:	2920      	cmp	r1, #32
 80095fe:	f040 80b0 	bne.w	8009762 <HAL_I2C_Master_Receive+0x176>
 8009602:	4604      	mov	r4, r0
 8009604:	4690      	mov	r8, r2
 8009606:	4699      	mov	r9, r3
    __HAL_LOCK(hi2c);
 8009608:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800960c:	2b01      	cmp	r3, #1
 800960e:	f000 80ac 	beq.w	800976a <HAL_I2C_Master_Receive+0x17e>
 8009612:	f04f 0a01 	mov.w	sl, #1
 8009616:	f880 a040 	strb.w	sl, [r0, #64]	@ 0x40
    tickstart = HAL_GetTick();
 800961a:	f7ff f967 	bl	80088ec <HAL_GetTick>
 800961e:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009620:	9000      	str	r0, [sp, #0]
 8009622:	2319      	movs	r3, #25
 8009624:	4652      	mov	r2, sl
 8009626:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800962a:	4620      	mov	r0, r4
 800962c:	f7ff fe1f 	bl	800926e <I2C_WaitOnFlagUntilTimeout>
 8009630:	2800      	cmp	r0, #0
 8009632:	f040 809c 	bne.w	800976e <HAL_I2C_Master_Receive+0x182>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009636:	2322      	movs	r3, #34	@ 0x22
 8009638:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800963c:	2310      	movs	r3, #16
 800963e:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009642:	2300      	movs	r3, #0
 8009644:	6463      	str	r3, [r4, #68]	@ 0x44
    hi2c->pBuffPtr  = pData;
 8009646:	f8c4 8024 	str.w	r8, [r4, #36]	@ 0x24
    hi2c->XferCount = Size;
 800964a:	f8a4 902a 	strh.w	r9, [r4, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800964e:	6363      	str	r3, [r4, #52]	@ 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009650:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8009652:	b29b      	uxth	r3, r3
 8009654:	2bff      	cmp	r3, #255	@ 0xff
 8009656:	d90a      	bls.n	800966e <HAL_I2C_Master_Receive+0x82>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009658:	22ff      	movs	r2, #255	@ 0xff
 800965a:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800965c:	4b46      	ldr	r3, [pc, #280]	@ (8009778 <HAL_I2C_Master_Receive+0x18c>)
 800965e:	9300      	str	r3, [sp, #0]
 8009660:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009664:	4639      	mov	r1, r7
 8009666:	4620      	mov	r0, r4
 8009668:	f7ff fd7a 	bl	8009160 <I2C_TransferConfig>
 800966c:	e01f      	b.n	80096ae <HAL_I2C_Master_Receive+0xc2>
      hi2c->XferSize = hi2c->XferCount;
 800966e:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8009670:	b292      	uxth	r2, r2
 8009672:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8009674:	4b40      	ldr	r3, [pc, #256]	@ (8009778 <HAL_I2C_Master_Receive+0x18c>)
 8009676:	9300      	str	r3, [sp, #0]
 8009678:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800967c:	b2d2      	uxtb	r2, r2
 800967e:	4639      	mov	r1, r7
 8009680:	4620      	mov	r0, r4
 8009682:	f7ff fd6d 	bl	8009160 <I2C_TransferConfig>
 8009686:	e012      	b.n	80096ae <HAL_I2C_Master_Receive+0xc2>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009688:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800968a:	2b04      	cmp	r3, #4
 800968c:	d001      	beq.n	8009692 <HAL_I2C_Master_Receive+0xa6>
          return HAL_TIMEOUT;
 800968e:	2003      	movs	r0, #3
 8009690:	e068      	b.n	8009764 <HAL_I2C_Master_Receive+0x178>
          return HAL_ERROR;
 8009692:	2001      	movs	r0, #1
 8009694:	e066      	b.n	8009764 <HAL_I2C_Master_Receive+0x178>
          hi2c->XferSize = hi2c->XferCount;
 8009696:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8009698:	b292      	uxth	r2, r2
 800969a:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800969c:	2300      	movs	r3, #0
 800969e:	9300      	str	r3, [sp, #0]
 80096a0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80096a4:	b2d2      	uxtb	r2, r2
 80096a6:	4639      	mov	r1, r7
 80096a8:	4620      	mov	r0, r4
 80096aa:	f7ff fd59 	bl	8009160 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80096ae:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80096b0:	b29b      	uxth	r3, r3
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d032      	beq.n	800971c <HAL_I2C_Master_Receive+0x130>
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80096b6:	462a      	mov	r2, r5
 80096b8:	4631      	mov	r1, r6
 80096ba:	4620      	mov	r0, r4
 80096bc:	f7ff fe24 	bl	8009308 <I2C_WaitOnRXNEFlagUntilTimeout>
 80096c0:	2800      	cmp	r0, #0
 80096c2:	d1e1      	bne.n	8009688 <HAL_I2C_Master_Receive+0x9c>
      (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
 80096c4:	6823      	ldr	r3, [r4, #0]
 80096c6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80096c8:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80096ca:	1c59      	adds	r1, r3, #1
 80096cc:	6261      	str	r1, [r4, #36]	@ 0x24
 80096ce:	701a      	strb	r2, [r3, #0]
      hi2c->XferSize--;
 80096d0:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
 80096d2:	3a01      	subs	r2, #1
 80096d4:	b292      	uxth	r2, r2
 80096d6:	8522      	strh	r2, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 80096d8:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80096da:	b29b      	uxth	r3, r3
 80096dc:	3b01      	subs	r3, #1
 80096de:	b29b      	uxth	r3, r3
 80096e0:	8563      	strh	r3, [r4, #42]	@ 0x2a
      if ((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 80096e2:	2a00      	cmp	r2, #0
 80096e4:	d1e3      	bne.n	80096ae <HAL_I2C_Master_Receive+0xc2>
 80096e6:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80096e8:	b29b      	uxth	r3, r3
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d0df      	beq.n	80096ae <HAL_I2C_Master_Receive+0xc2>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80096ee:	9500      	str	r5, [sp, #0]
 80096f0:	4633      	mov	r3, r6
 80096f2:	2180      	movs	r1, #128	@ 0x80
 80096f4:	4620      	mov	r0, r4
 80096f6:	f7ff fdba 	bl	800926e <I2C_WaitOnFlagUntilTimeout>
 80096fa:	2800      	cmp	r0, #0
 80096fc:	d139      	bne.n	8009772 <HAL_I2C_Master_Receive+0x186>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80096fe:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8009700:	b29b      	uxth	r3, r3
 8009702:	2bff      	cmp	r3, #255	@ 0xff
 8009704:	d9c7      	bls.n	8009696 <HAL_I2C_Master_Receive+0xaa>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009706:	22ff      	movs	r2, #255	@ 0xff
 8009708:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800970a:	2300      	movs	r3, #0
 800970c:	9300      	str	r3, [sp, #0]
 800970e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009712:	4639      	mov	r1, r7
 8009714:	4620      	mov	r0, r4
 8009716:	f7ff fd23 	bl	8009160 <I2C_TransferConfig>
 800971a:	e7c8      	b.n	80096ae <HAL_I2C_Master_Receive+0xc2>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800971c:	462a      	mov	r2, r5
 800971e:	4631      	mov	r1, r6
 8009720:	4620      	mov	r0, r4
 8009722:	f7ff fdca 	bl	80092ba <I2C_WaitOnSTOPFlagUntilTimeout>
 8009726:	b130      	cbz	r0, 8009736 <HAL_I2C_Master_Receive+0x14a>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009728:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800972a:	2b04      	cmp	r3, #4
 800972c:	d001      	beq.n	8009732 <HAL_I2C_Master_Receive+0x146>
        return HAL_TIMEOUT;
 800972e:	2003      	movs	r0, #3
 8009730:	e018      	b.n	8009764 <HAL_I2C_Master_Receive+0x178>
        return HAL_ERROR;
 8009732:	2001      	movs	r0, #1
 8009734:	e016      	b.n	8009764 <HAL_I2C_Master_Receive+0x178>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009736:	6823      	ldr	r3, [r4, #0]
 8009738:	2220      	movs	r2, #32
 800973a:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800973c:	6821      	ldr	r1, [r4, #0]
 800973e:	684b      	ldr	r3, [r1, #4]
 8009740:	f023 73ff 	bic.w	r3, r3, #33423360	@ 0x1fe0000
 8009744:	f423 338b 	bic.w	r3, r3, #71168	@ 0x11600
 8009748:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 800974c:	f023 0301 	bic.w	r3, r3, #1
 8009750:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8009752:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009756:	2300      	movs	r3, #0
 8009758:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    __HAL_UNLOCK(hi2c);
 800975c:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
    return HAL_OK;
 8009760:	e000      	b.n	8009764 <HAL_I2C_Master_Receive+0x178>
    return HAL_BUSY;
 8009762:	2002      	movs	r0, #2
}
 8009764:	b002      	add	sp, #8
 8009766:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_LOCK(hi2c);
 800976a:	2002      	movs	r0, #2
 800976c:	e7fa      	b.n	8009764 <HAL_I2C_Master_Receive+0x178>
      return HAL_TIMEOUT;
 800976e:	2003      	movs	r0, #3
 8009770:	e7f8      	b.n	8009764 <HAL_I2C_Master_Receive+0x178>
          return HAL_TIMEOUT;
 8009772:	2003      	movs	r0, #3
 8009774:	e7f6      	b.n	8009764 <HAL_I2C_Master_Receive+0x178>
 8009776:	bf00      	nop
 8009778:	80002400 	.word	0x80002400

0800977c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800977c:	4603      	mov	r3, r0
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800977e:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
 8009782:	b2d2      	uxtb	r2, r2
 8009784:	2a20      	cmp	r2, #32
 8009786:	d123      	bne.n	80097d0 <HAL_I2CEx_ConfigAnalogFilter+0x54>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009788:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 800978c:	2a01      	cmp	r2, #1
 800978e:	d021      	beq.n	80097d4 <HAL_I2CEx_ConfigAnalogFilter+0x58>
 8009790:	2201      	movs	r2, #1
 8009792:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009796:	2224      	movs	r2, #36	@ 0x24
 8009798:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800979c:	6800      	ldr	r0, [r0, #0]
 800979e:	6802      	ldr	r2, [r0, #0]
 80097a0:	f022 0201 	bic.w	r2, r2, #1
 80097a4:	6002      	str	r2, [r0, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80097a6:	6818      	ldr	r0, [r3, #0]
 80097a8:	6802      	ldr	r2, [r0, #0]
 80097aa:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80097ae:	6002      	str	r2, [r0, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80097b0:	6818      	ldr	r0, [r3, #0]
 80097b2:	6802      	ldr	r2, [r0, #0]
 80097b4:	4311      	orrs	r1, r2
 80097b6:	6001      	str	r1, [r0, #0]

    __HAL_I2C_ENABLE(hi2c);
 80097b8:	6819      	ldr	r1, [r3, #0]
 80097ba:	680a      	ldr	r2, [r1, #0]
 80097bc:	f042 0201 	orr.w	r2, r2, #1
 80097c0:	600a      	str	r2, [r1, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80097c2:	2220      	movs	r2, #32
 80097c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80097c8:	2000      	movs	r0, #0
 80097ca:	f883 0040 	strb.w	r0, [r3, #64]	@ 0x40

    return HAL_OK;
 80097ce:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 80097d0:	2002      	movs	r0, #2
 80097d2:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 80097d4:	2002      	movs	r0, #2
  }
}
 80097d6:	4770      	bx	lr

080097d8 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                    This parameter can be one of the following values: 0 or 1
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80097d8:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmp = 0;
  uint32_t tmp1 = 0;
  uint32_t tmp2 = 0;

  /* Configures the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
 80097da:	684d      	ldr	r5, [r1, #4]
 80097dc:	6803      	ldr	r3, [r0, #0]
 80097de:	68dc      	ldr	r4, [r3, #12]
 80097e0:	f3c4 440b 	ubfx	r4, r4, #16, #12
 80097e4:	4425      	add	r5, r4
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80097e6:	ea4f 1cc2 	mov.w	ip, r2, lsl #7
 80097ea:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 80097ee:	f8d3 4088 	ldr.w	r4, [r3, #136]	@ 0x88
 80097f2:	f404 4470 	and.w	r4, r4, #61440	@ 0xf000
 80097f6:	f8c3 4088 	str.w	r4, [r3, #136]	@ 0x88
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);
 80097fa:	680b      	ldr	r3, [r1, #0]
 80097fc:	6804      	ldr	r4, [r0, #0]
 80097fe:	68e6      	ldr	r6, [r4, #12]
 8009800:	f3c6 460b 	ubfx	r6, r6, #16, #12
 8009804:	4433      	add	r3, r6
 8009806:	3301      	adds	r3, #1
 8009808:	eb04 14c2 	add.w	r4, r4, r2, lsl #7
 800980c:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 8009810:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88

  /* Configures the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16);
 8009814:	68cd      	ldr	r5, [r1, #12]
 8009816:	6803      	ldr	r3, [r0, #0]
 8009818:	68dc      	ldr	r4, [r3, #12]
 800981a:	f3c4 040a 	ubfx	r4, r4, #0, #11
 800981e:	4425      	add	r5, r4
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8009820:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 8009824:	f8d3 408c 	ldr.w	r4, [r3, #140]	@ 0x8c
 8009828:	f404 4470 	and.w	r4, r4, #61440	@ 0xf000
 800982c:	f8c3 408c 	str.w	r4, [r3, #140]	@ 0x8c
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1) | tmp);  
 8009830:	688b      	ldr	r3, [r1, #8]
 8009832:	6804      	ldr	r4, [r0, #0]
 8009834:	68e6      	ldr	r6, [r4, #12]
 8009836:	f3c6 0e0a 	ubfx	lr, r6, #0, #11
 800983a:	4473      	add	r3, lr
 800983c:	3301      	adds	r3, #1
 800983e:	eb04 14c2 	add.w	r4, r4, r2, lsl #7
 8009842:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 8009846:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800984a:	6803      	ldr	r3, [r0, #0]
 800984c:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 8009850:	f8d3 4094 	ldr.w	r4, [r3, #148]	@ 0x94
 8009854:	f024 0407 	bic.w	r4, r4, #7
 8009858:	f8c3 4094 	str.w	r4, [r3, #148]	@ 0x94
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800985c:	6803      	ldr	r3, [r0, #0]
 800985e:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 8009862:	690c      	ldr	r4, [r1, #16]
 8009864:	f8c3 4094 	str.w	r4, [r3, #148]	@ 0x94

  /* Configures the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8);
 8009868:	f891 e031 	ldrb.w	lr, [r1, #49]	@ 0x31
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16);
 800986c:	f891 6032 	ldrb.w	r6, [r1, #50]	@ 0x32
  tmp2 = (pLayerCfg->Alpha0 << 24);  
 8009870:	698d      	ldr	r5, [r1, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8009872:	6803      	ldr	r3, [r0, #0]
 8009874:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 8009878:	f8d3 409c 	ldr.w	r4, [r3, #156]	@ 0x9c
 800987c:	2400      	movs	r4, #0
 800987e:	f8c3 409c 	str.w	r4, [r3, #156]	@ 0x9c
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2); 
 8009882:	f891 3030 	ldrb.w	r3, [r1, #48]	@ 0x30
 8009886:	ea43 230e 	orr.w	r3, r3, lr, lsl #8
 800988a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800988e:	6806      	ldr	r6, [r0, #0]
 8009890:	eb06 1ec2 	add.w	lr, r6, r2, lsl #7
 8009894:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 8009898:	f8ce 309c 	str.w	r3, [lr, #156]	@ 0x9c
 800989c:	f10e 0e84 	add.w	lr, lr, #132	@ 0x84

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80098a0:	6803      	ldr	r3, [r0, #0]
 80098a2:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 80098a6:	f8d3 5098 	ldr.w	r5, [r3, #152]	@ 0x98
 80098aa:	f025 05ff 	bic.w	r5, r5, #255	@ 0xff
 80098ae:	f8c3 5098 	str.w	r5, [r3, #152]	@ 0x98
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80098b2:	6803      	ldr	r3, [r0, #0]
 80098b4:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 80098b8:	694d      	ldr	r5, [r1, #20]
 80098ba:	f8c3 5098 	str.w	r5, [r3, #152]	@ 0x98

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80098be:	6803      	ldr	r3, [r0, #0]
 80098c0:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 80098c4:	f8d3 60a0 	ldr.w	r6, [r3, #160]	@ 0xa0
 80098c8:	4d2d      	ldr	r5, [pc, #180]	@ (8009980 <LTDC_SetConfig+0x1a8>)
 80098ca:	4035      	ands	r5, r6
 80098cc:	f8c3 50a0 	str.w	r5, [r3, #160]	@ 0xa0
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80098d0:	6a0d      	ldr	r5, [r1, #32]
 80098d2:	6803      	ldr	r3, [r0, #0]
 80098d4:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 80098d8:	69ce      	ldr	r6, [r1, #28]
 80098da:	4335      	orrs	r5, r6
 80098dc:	f8c3 50a0 	str.w	r5, [r3, #160]	@ 0xa0

  /* Configures the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80098e0:	6803      	ldr	r3, [r0, #0]
 80098e2:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 80098e6:	f8d3 50ac 	ldr.w	r5, [r3, #172]	@ 0xac
 80098ea:	f8c3 40ac 	str.w	r4, [r3, #172]	@ 0xac
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80098ee:	6803      	ldr	r3, [r0, #0]
 80098f0:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 80098f4:	6a4a      	ldr	r2, [r1, #36]	@ 0x24
 80098f6:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac

  if(pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80098fa:	690b      	ldr	r3, [r1, #16]
 80098fc:	b183      	cbz	r3, 8009920 <LTDC_SetConfig+0x148>
  {
    tmp = 4;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80098fe:	3b01      	subs	r3, #1
 8009900:	2b06      	cmp	r3, #6
 8009902:	d805      	bhi.n	8009910 <LTDC_SetConfig+0x138>
 8009904:	e8df f003 	tbb	[pc, r3]
 8009908:	0608063a 	.word	0x0608063a
 800990c:	0404      	.short	0x0404
 800990e:	0a          	.byte	0x0a
 800990f:	00          	.byte	0x00
  if(pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8009910:	2501      	movs	r5, #1
 8009912:	e006      	b.n	8009922 <LTDC_SetConfig+0x14a>
 8009914:	2502      	movs	r5, #2
 8009916:	e004      	b.n	8009922 <LTDC_SetConfig+0x14a>
 8009918:	2502      	movs	r5, #2
 800991a:	e002      	b.n	8009922 <LTDC_SetConfig+0x14a>
 800991c:	2502      	movs	r5, #2
 800991e:	e000      	b.n	8009922 <LTDC_SetConfig+0x14a>
    tmp = 4;
 8009920:	2504      	movs	r5, #4
  {
    tmp = 1;
  }

  /* Configures the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8009922:	6803      	ldr	r3, [r0, #0]
 8009924:	4463      	add	r3, ip
 8009926:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800992a:	f002 22e0 	and.w	r2, r2, #3758153728	@ 0xe000e000
 800992e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3));
 8009932:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 8009934:	fb05 f403 	mul.w	r4, r5, r3
 8009938:	684b      	ldr	r3, [r1, #4]
 800993a:	680a      	ldr	r2, [r1, #0]
 800993c:	1a9b      	subs	r3, r3, r2
 800993e:	fb05 f303 	mul.w	r3, r5, r3
 8009942:	3303      	adds	r3, #3
 8009944:	6802      	ldr	r2, [r0, #0]
 8009946:	4462      	add	r2, ip
 8009948:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800994c:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

  /* Configures the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8009950:	6803      	ldr	r3, [r0, #0]
 8009952:	4463      	add	r3, ip
 8009954:	f8d3 40b4 	ldr.w	r4, [r3, #180]	@ 0xb4
 8009958:	4a0a      	ldr	r2, [pc, #40]	@ (8009984 <LTDC_SetConfig+0x1ac>)
 800995a:	4022      	ands	r2, r4
 800995c:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8009960:	6803      	ldr	r3, [r0, #0]
 8009962:	4463      	add	r3, ip
 8009964:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 8009966:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4

  /* Enable LTDC_Layer by setting LEN bit */  
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800996a:	6803      	ldr	r3, [r0, #0]
 800996c:	4463      	add	r3, ip
 800996e:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8009972:	f042 0201 	orr.w	r2, r2, #1
 8009976:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
}
 800997a:	bd70      	pop	{r4, r5, r6, pc}
  if(pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800997c:	2503      	movs	r5, #3
 800997e:	e7d0      	b.n	8009922 <LTDC_SetConfig+0x14a>
 8009980:	fffff8f8 	.word	0xfffff8f8
 8009984:	fffff800 	.word	0xfffff800

08009988 <HAL_LTDC_Init>:
  if(hltdc == NULL)
 8009988:	2800      	cmp	r0, #0
 800998a:	d077      	beq.n	8009a7c <HAL_LTDC_Init+0xf4>
{
 800998c:	b538      	push	{r3, r4, r5, lr}
 800998e:	4604      	mov	r4, r0
  if(hltdc->State == HAL_LTDC_STATE_RESET)
 8009990:	f890 30a1 	ldrb.w	r3, [r0, #161]	@ 0xa1
 8009994:	2b00      	cmp	r3, #0
 8009996:	d06c      	beq.n	8009a72 <HAL_LTDC_Init+0xea>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8009998:	2302      	movs	r3, #2
 800999a:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800999e:	6822      	ldr	r2, [r4, #0]
 80099a0:	6993      	ldr	r3, [r2, #24]
 80099a2:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80099a6:	6193      	str	r3, [r2, #24]
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80099a8:	6821      	ldr	r1, [r4, #0]
 80099aa:	698a      	ldr	r2, [r1, #24]
 80099ac:	6863      	ldr	r3, [r4, #4]
 80099ae:	68a0      	ldr	r0, [r4, #8]
 80099b0:	4303      	orrs	r3, r0
  hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80099b2:	68e0      	ldr	r0, [r4, #12]
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80099b4:	4303      	orrs	r3, r0
  hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80099b6:	6920      	ldr	r0, [r4, #16]
 80099b8:	4303      	orrs	r3, r0
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80099ba:	4313      	orrs	r3, r2
 80099bc:	618b      	str	r3, [r1, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80099be:	6821      	ldr	r1, [r4, #0]
 80099c0:	688a      	ldr	r2, [r1, #8]
 80099c2:	4b2f      	ldr	r3, [pc, #188]	@ (8009a80 <HAL_LTDC_Init+0xf8>)
 80099c4:	401a      	ands	r2, r3
 80099c6:	608a      	str	r2, [r1, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80099c8:	6820      	ldr	r0, [r4, #0]
 80099ca:	6882      	ldr	r2, [r0, #8]
 80099cc:	69a1      	ldr	r1, [r4, #24]
 80099ce:	6965      	ldr	r5, [r4, #20]
 80099d0:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80099d4:	430a      	orrs	r2, r1
 80099d6:	6082      	str	r2, [r0, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80099d8:	6821      	ldr	r1, [r4, #0]
 80099da:	68ca      	ldr	r2, [r1, #12]
 80099dc:	401a      	ands	r2, r3
 80099de:	60ca      	str	r2, [r1, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80099e0:	6820      	ldr	r0, [r4, #0]
 80099e2:	68c2      	ldr	r2, [r0, #12]
 80099e4:	6a21      	ldr	r1, [r4, #32]
 80099e6:	69e5      	ldr	r5, [r4, #28]
 80099e8:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80099ec:	430a      	orrs	r2, r1
 80099ee:	60c2      	str	r2, [r0, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80099f0:	6821      	ldr	r1, [r4, #0]
 80099f2:	690a      	ldr	r2, [r1, #16]
 80099f4:	401a      	ands	r2, r3
 80099f6:	610a      	str	r2, [r1, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80099f8:	6820      	ldr	r0, [r4, #0]
 80099fa:	6902      	ldr	r2, [r0, #16]
 80099fc:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 80099fe:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8009a00:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8009a04:	430a      	orrs	r2, r1
 8009a06:	6102      	str	r2, [r0, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8009a08:	6821      	ldr	r1, [r4, #0]
 8009a0a:	694a      	ldr	r2, [r1, #20]
 8009a0c:	4013      	ands	r3, r2
 8009a0e:	614b      	str	r3, [r1, #20]
  tmp = (hltdc->Init.TotalWidth << 16);
 8009a10:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8009a12:	6821      	ldr	r1, [r4, #0]
 8009a14:	694b      	ldr	r3, [r1, #20]
 8009a16:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8009a18:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8009a1c:	4313      	orrs	r3, r2
 8009a1e:	614b      	str	r3, [r1, #20]
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8);
 8009a20:	f894 0035 	ldrb.w	r0, [r4, #53]	@ 0x35
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16);
 8009a24:	f894 3036 	ldrb.w	r3, [r4, #54]	@ 0x36
 8009a28:	041b      	lsls	r3, r3, #16
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8009a2a:	6821      	ldr	r1, [r4, #0]
 8009a2c:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 8009a2e:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8009a32:	62ca      	str	r2, [r1, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8009a34:	6821      	ldr	r1, [r4, #0]
 8009a36:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 8009a38:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8009a3c:	f894 0034 	ldrb.w	r0, [r4, #52]	@ 0x34
 8009a40:	4303      	orrs	r3, r0
 8009a42:	4313      	orrs	r3, r2
 8009a44:	62cb      	str	r3, [r1, #44]	@ 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE);
 8009a46:	6822      	ldr	r2, [r4, #0]
 8009a48:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 8009a4a:	f043 0304 	orr.w	r3, r3, #4
 8009a4e:	6353      	str	r3, [r2, #52]	@ 0x34
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_FU);
 8009a50:	6822      	ldr	r2, [r4, #0]
 8009a52:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 8009a54:	f043 0302 	orr.w	r3, r3, #2
 8009a58:	6353      	str	r3, [r2, #52]	@ 0x34
  __HAL_LTDC_ENABLE(hltdc);
 8009a5a:	6822      	ldr	r2, [r4, #0]
 8009a5c:	6993      	ldr	r3, [r2, #24]
 8009a5e:	f043 0301 	orr.w	r3, r3, #1
 8009a62:	6193      	str	r3, [r2, #24]
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;  
 8009a64:	2000      	movs	r0, #0
 8009a66:	f8c4 00a4 	str.w	r0, [r4, #164]	@ 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 8009a6a:	2301      	movs	r3, #1
 8009a6c:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
}
 8009a70:	bd38      	pop	{r3, r4, r5, pc}
    hltdc->Lock = HAL_UNLOCKED;
 8009a72:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
    HAL_LTDC_MspInit(hltdc);
 8009a76:	f005 ff55 	bl	800f924 <HAL_LTDC_MspInit>
 8009a7a:	e78d      	b.n	8009998 <HAL_LTDC_Init+0x10>
    return HAL_ERROR;
 8009a7c:	2001      	movs	r0, #1
}
 8009a7e:	4770      	bx	lr
 8009a80:	f000f800 	.word	0xf000f800

08009a84 <HAL_LTDC_ConfigLayer>:
{   
 8009a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hltdc);
 8009a86:	f890 30a0 	ldrb.w	r3, [r0, #160]	@ 0xa0
 8009a8a:	2b01      	cmp	r3, #1
 8009a8c:	d02c      	beq.n	8009ae8 <HAL_LTDC_ConfigLayer+0x64>
 8009a8e:	4604      	mov	r4, r0
 8009a90:	460d      	mov	r5, r1
 8009a92:	4616      	mov	r6, r2
 8009a94:	2701      	movs	r7, #1
 8009a96:	f880 70a0 	strb.w	r7, [r0, #160]	@ 0xa0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8009a9a:	2302      	movs	r3, #2
 8009a9c:	f880 30a1 	strb.w	r3, [r0, #161]	@ 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 8009aa0:	f04f 0c34 	mov.w	ip, #52	@ 0x34
 8009aa4:	fb0c 0c02 	mla	ip, ip, r2, r0
 8009aa8:	f10c 0c38 	add.w	ip, ip, #56	@ 0x38
 8009aac:	468e      	mov	lr, r1
 8009aae:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8009ab2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8009ab6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8009aba:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8009abe:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8009ac2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8009ac6:	f8de 3000 	ldr.w	r3, [lr]
 8009aca:	f8cc 3000 	str.w	r3, [ip]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8009ace:	4632      	mov	r2, r6
 8009ad0:	4629      	mov	r1, r5
 8009ad2:	4620      	mov	r0, r4
 8009ad4:	f7ff fe80 	bl	80097d8 <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8009ad8:	6823      	ldr	r3, [r4, #0]
 8009ada:	625f      	str	r7, [r3, #36]	@ 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 8009adc:	f884 70a1 	strb.w	r7, [r4, #161]	@ 0xa1
  __HAL_UNLOCK(hltdc);
 8009ae0:	2000      	movs	r0, #0
 8009ae2:	f884 00a0 	strb.w	r0, [r4, #160]	@ 0xa0
}
 8009ae6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(hltdc);
 8009ae8:	2002      	movs	r0, #2
 8009aea:	e7fc      	b.n	8009ae6 <HAL_LTDC_ConfigLayer+0x62>

08009aec <HAL_LTDC_SetAlpha>:
{
 8009aec:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hltdc);
 8009aee:	f890 30a0 	ldrb.w	r3, [r0, #160]	@ 0xa0
 8009af2:	2b01      	cmp	r3, #1
 8009af4:	d019      	beq.n	8009b2a <HAL_LTDC_SetAlpha+0x3e>
 8009af6:	4604      	mov	r4, r0
 8009af8:	2501      	movs	r5, #1
 8009afa:	f880 50a0 	strb.w	r5, [r0, #160]	@ 0xa0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8009afe:	2302      	movs	r3, #2
 8009b00:	f880 30a1 	strb.w	r3, [r0, #161]	@ 0xa1
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 8009b04:	2334      	movs	r3, #52	@ 0x34
 8009b06:	fb02 f303 	mul.w	r3, r2, r3
 8009b0a:	f103 0038 	add.w	r0, r3, #56	@ 0x38
  pLayerCfg->Alpha = Alpha;
 8009b0e:	4423      	add	r3, r4
 8009b10:	64d9      	str	r1, [r3, #76]	@ 0x4c
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8009b12:	1821      	adds	r1, r4, r0
 8009b14:	4620      	mov	r0, r4
 8009b16:	f7ff fe5f 	bl	80097d8 <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8009b1a:	6823      	ldr	r3, [r4, #0]
 8009b1c:	625d      	str	r5, [r3, #36]	@ 0x24
  hltdc->State = HAL_LTDC_STATE_READY;
 8009b1e:	f884 50a1 	strb.w	r5, [r4, #161]	@ 0xa1
  __HAL_UNLOCK(hltdc);
 8009b22:	2000      	movs	r0, #0
 8009b24:	f884 00a0 	strb.w	r0, [r4, #160]	@ 0xa0
}
 8009b28:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hltdc);
 8009b2a:	2002      	movs	r0, #2
 8009b2c:	e7fc      	b.n	8009b28 <HAL_LTDC_SetAlpha+0x3c>

08009b2e <HAL_LTDC_GetState>:
  return hltdc->State;
 8009b2e:	f890 00a1 	ldrb.w	r0, [r0, #161]	@ 0xa1
}
 8009b32:	4770      	bx	lr

08009b34 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8009b34:	b510      	push	{r4, lr}
 8009b36:	b082      	sub	sp, #8
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8009b38:	4b1b      	ldr	r3, [pc, #108]	@ (8009ba8 <HAL_PWREx_EnableOverDrive+0x74>)
 8009b3a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009b3c:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8009b40:	641a      	str	r2, [r3, #64]	@ 0x40
 8009b42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009b44:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009b48:	9301      	str	r3, [sp, #4]
 8009b4a:	9b01      	ldr	r3, [sp, #4]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8009b4c:	4a17      	ldr	r2, [pc, #92]	@ (8009bac <HAL_PWREx_EnableOverDrive+0x78>)
 8009b4e:	6813      	ldr	r3, [r2, #0]
 8009b50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009b54:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009b56:	f7fe fec9 	bl	80088ec <HAL_GetTick>
 8009b5a:	4604      	mov	r4, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8009b5c:	4b13      	ldr	r3, [pc, #76]	@ (8009bac <HAL_PWREx_EnableOverDrive+0x78>)
 8009b5e:	685b      	ldr	r3, [r3, #4]
 8009b60:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 8009b64:	d108      	bne.n	8009b78 <HAL_PWREx_EnableOverDrive+0x44>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8009b66:	f7fe fec1 	bl	80088ec <HAL_GetTick>
 8009b6a:	1b00      	subs	r0, r0, r4
 8009b6c:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8009b70:	d9f4      	bls.n	8009b5c <HAL_PWREx_EnableOverDrive+0x28>
    {
      return HAL_TIMEOUT;
 8009b72:	2003      	movs	r0, #3
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
}
 8009b74:	b002      	add	sp, #8
 8009b76:	bd10      	pop	{r4, pc}
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8009b78:	4a0c      	ldr	r2, [pc, #48]	@ (8009bac <HAL_PWREx_EnableOverDrive+0x78>)
 8009b7a:	6813      	ldr	r3, [r2, #0]
 8009b7c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009b80:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 8009b82:	f7fe feb3 	bl	80088ec <HAL_GetTick>
 8009b86:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8009b88:	4b08      	ldr	r3, [pc, #32]	@ (8009bac <HAL_PWREx_EnableOverDrive+0x78>)
 8009b8a:	685b      	ldr	r3, [r3, #4]
 8009b8c:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8009b90:	d107      	bne.n	8009ba2 <HAL_PWREx_EnableOverDrive+0x6e>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8009b92:	f7fe feab 	bl	80088ec <HAL_GetTick>
 8009b96:	1b00      	subs	r0, r0, r4
 8009b98:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8009b9c:	d9f4      	bls.n	8009b88 <HAL_PWREx_EnableOverDrive+0x54>
      return HAL_TIMEOUT;
 8009b9e:	2003      	movs	r0, #3
 8009ba0:	e7e8      	b.n	8009b74 <HAL_PWREx_EnableOverDrive+0x40>
  return HAL_OK;
 8009ba2:	2000      	movs	r0, #0
 8009ba4:	e7e6      	b.n	8009b74 <HAL_PWREx_EnableOverDrive+0x40>
 8009ba6:	bf00      	nop
 8009ba8:	40023800 	.word	0x40023800
 8009bac:	40007000 	.word	0x40007000

08009bb0 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009bb0:	2800      	cmp	r0, #0
 8009bb2:	f000 81d9 	beq.w	8009f68 <HAL_RCC_OscConfig+0x3b8>
{
 8009bb6:	b570      	push	{r4, r5, r6, lr}
 8009bb8:	b082      	sub	sp, #8
 8009bba:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009bbc:	6803      	ldr	r3, [r0, #0]
 8009bbe:	f013 0f01 	tst.w	r3, #1
 8009bc2:	d029      	beq.n	8009c18 <HAL_RCC_OscConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8009bc4:	4b95      	ldr	r3, [pc, #596]	@ (8009e1c <HAL_RCC_OscConfig+0x26c>)
 8009bc6:	689b      	ldr	r3, [r3, #8]
 8009bc8:	f003 030c 	and.w	r3, r3, #12
 8009bcc:	2b04      	cmp	r3, #4
 8009bce:	d01a      	beq.n	8009c06 <HAL_RCC_OscConfig+0x56>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009bd0:	4b92      	ldr	r3, [pc, #584]	@ (8009e1c <HAL_RCC_OscConfig+0x26c>)
 8009bd2:	689b      	ldr	r3, [r3, #8]
 8009bd4:	f003 030c 	and.w	r3, r3, #12
 8009bd8:	2b08      	cmp	r3, #8
 8009bda:	d00f      	beq.n	8009bfc <HAL_RCC_OscConfig+0x4c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009bdc:	6863      	ldr	r3, [r4, #4]
 8009bde:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009be2:	d040      	beq.n	8009c66 <HAL_RCC_OscConfig+0xb6>
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d154      	bne.n	8009c92 <HAL_RCC_OscConfig+0xe2>
 8009be8:	4b8c      	ldr	r3, [pc, #560]	@ (8009e1c <HAL_RCC_OscConfig+0x26c>)
 8009bea:	681a      	ldr	r2, [r3, #0]
 8009bec:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8009bf0:	601a      	str	r2, [r3, #0]
 8009bf2:	681a      	ldr	r2, [r3, #0]
 8009bf4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8009bf8:	601a      	str	r2, [r3, #0]
 8009bfa:	e039      	b.n	8009c70 <HAL_RCC_OscConfig+0xc0>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009bfc:	4b87      	ldr	r3, [pc, #540]	@ (8009e1c <HAL_RCC_OscConfig+0x26c>)
 8009bfe:	685b      	ldr	r3, [r3, #4]
 8009c00:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8009c04:	d0ea      	beq.n	8009bdc <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009c06:	4b85      	ldr	r3, [pc, #532]	@ (8009e1c <HAL_RCC_OscConfig+0x26c>)
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8009c0e:	d003      	beq.n	8009c18 <HAL_RCC_OscConfig+0x68>
 8009c10:	6863      	ldr	r3, [r4, #4]
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	f000 81aa 	beq.w	8009f6c <HAL_RCC_OscConfig+0x3bc>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009c18:	6823      	ldr	r3, [r4, #0]
 8009c1a:	f013 0f02 	tst.w	r3, #2
 8009c1e:	d074      	beq.n	8009d0a <HAL_RCC_OscConfig+0x15a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8009c20:	4b7e      	ldr	r3, [pc, #504]	@ (8009e1c <HAL_RCC_OscConfig+0x26c>)
 8009c22:	689b      	ldr	r3, [r3, #8]
 8009c24:	f013 0f0c 	tst.w	r3, #12
 8009c28:	d05e      	beq.n	8009ce8 <HAL_RCC_OscConfig+0x138>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009c2a:	4b7c      	ldr	r3, [pc, #496]	@ (8009e1c <HAL_RCC_OscConfig+0x26c>)
 8009c2c:	689b      	ldr	r3, [r3, #8]
 8009c2e:	f003 030c 	and.w	r3, r3, #12
 8009c32:	2b08      	cmp	r3, #8
 8009c34:	d053      	beq.n	8009cde <HAL_RCC_OscConfig+0x12e>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009c36:	68e3      	ldr	r3, [r4, #12]
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	f000 8089 	beq.w	8009d50 <HAL_RCC_OscConfig+0x1a0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009c3e:	4a77      	ldr	r2, [pc, #476]	@ (8009e1c <HAL_RCC_OscConfig+0x26c>)
 8009c40:	6813      	ldr	r3, [r2, #0]
 8009c42:	f043 0301 	orr.w	r3, r3, #1
 8009c46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009c48:	f7fe fe50 	bl	80088ec <HAL_GetTick>
 8009c4c:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009c4e:	4b73      	ldr	r3, [pc, #460]	@ (8009e1c <HAL_RCC_OscConfig+0x26c>)
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	f013 0f02 	tst.w	r3, #2
 8009c56:	d172      	bne.n	8009d3e <HAL_RCC_OscConfig+0x18e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009c58:	f7fe fe48 	bl	80088ec <HAL_GetTick>
 8009c5c:	1b40      	subs	r0, r0, r5
 8009c5e:	2802      	cmp	r0, #2
 8009c60:	d9f5      	bls.n	8009c4e <HAL_RCC_OscConfig+0x9e>
          {
            return HAL_TIMEOUT;
 8009c62:	2003      	movs	r0, #3
 8009c64:	e187      	b.n	8009f76 <HAL_RCC_OscConfig+0x3c6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009c66:	4a6d      	ldr	r2, [pc, #436]	@ (8009e1c <HAL_RCC_OscConfig+0x26c>)
 8009c68:	6813      	ldr	r3, [r2, #0]
 8009c6a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009c6e:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009c70:	6863      	ldr	r3, [r4, #4]
 8009c72:	b32b      	cbz	r3, 8009cc0 <HAL_RCC_OscConfig+0x110>
        tickstart = HAL_GetTick();
 8009c74:	f7fe fe3a 	bl	80088ec <HAL_GetTick>
 8009c78:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009c7a:	4b68      	ldr	r3, [pc, #416]	@ (8009e1c <HAL_RCC_OscConfig+0x26c>)
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8009c82:	d1c9      	bne.n	8009c18 <HAL_RCC_OscConfig+0x68>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009c84:	f7fe fe32 	bl	80088ec <HAL_GetTick>
 8009c88:	1b40      	subs	r0, r0, r5
 8009c8a:	2864      	cmp	r0, #100	@ 0x64
 8009c8c:	d9f5      	bls.n	8009c7a <HAL_RCC_OscConfig+0xca>
            return HAL_TIMEOUT;
 8009c8e:	2003      	movs	r0, #3
 8009c90:	e171      	b.n	8009f76 <HAL_RCC_OscConfig+0x3c6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009c92:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009c96:	d009      	beq.n	8009cac <HAL_RCC_OscConfig+0xfc>
 8009c98:	4b60      	ldr	r3, [pc, #384]	@ (8009e1c <HAL_RCC_OscConfig+0x26c>)
 8009c9a:	681a      	ldr	r2, [r3, #0]
 8009c9c:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8009ca0:	601a      	str	r2, [r3, #0]
 8009ca2:	681a      	ldr	r2, [r3, #0]
 8009ca4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8009ca8:	601a      	str	r2, [r3, #0]
 8009caa:	e7e1      	b.n	8009c70 <HAL_RCC_OscConfig+0xc0>
 8009cac:	4b5b      	ldr	r3, [pc, #364]	@ (8009e1c <HAL_RCC_OscConfig+0x26c>)
 8009cae:	681a      	ldr	r2, [r3, #0]
 8009cb0:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8009cb4:	601a      	str	r2, [r3, #0]
 8009cb6:	681a      	ldr	r2, [r3, #0]
 8009cb8:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8009cbc:	601a      	str	r2, [r3, #0]
 8009cbe:	e7d7      	b.n	8009c70 <HAL_RCC_OscConfig+0xc0>
        tickstart = HAL_GetTick();
 8009cc0:	f7fe fe14 	bl	80088ec <HAL_GetTick>
 8009cc4:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009cc6:	4b55      	ldr	r3, [pc, #340]	@ (8009e1c <HAL_RCC_OscConfig+0x26c>)
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8009cce:	d0a3      	beq.n	8009c18 <HAL_RCC_OscConfig+0x68>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009cd0:	f7fe fe0c 	bl	80088ec <HAL_GetTick>
 8009cd4:	1b40      	subs	r0, r0, r5
 8009cd6:	2864      	cmp	r0, #100	@ 0x64
 8009cd8:	d9f5      	bls.n	8009cc6 <HAL_RCC_OscConfig+0x116>
            return HAL_TIMEOUT;
 8009cda:	2003      	movs	r0, #3
 8009cdc:	e14b      	b.n	8009f76 <HAL_RCC_OscConfig+0x3c6>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009cde:	4b4f      	ldr	r3, [pc, #316]	@ (8009e1c <HAL_RCC_OscConfig+0x26c>)
 8009ce0:	685b      	ldr	r3, [r3, #4]
 8009ce2:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8009ce6:	d1a6      	bne.n	8009c36 <HAL_RCC_OscConfig+0x86>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009ce8:	4b4c      	ldr	r3, [pc, #304]	@ (8009e1c <HAL_RCC_OscConfig+0x26c>)
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	f013 0f02 	tst.w	r3, #2
 8009cf0:	d003      	beq.n	8009cfa <HAL_RCC_OscConfig+0x14a>
 8009cf2:	68e3      	ldr	r3, [r4, #12]
 8009cf4:	2b01      	cmp	r3, #1
 8009cf6:	f040 813b 	bne.w	8009f70 <HAL_RCC_OscConfig+0x3c0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009cfa:	4a48      	ldr	r2, [pc, #288]	@ (8009e1c <HAL_RCC_OscConfig+0x26c>)
 8009cfc:	6813      	ldr	r3, [r2, #0]
 8009cfe:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8009d02:	6921      	ldr	r1, [r4, #16]
 8009d04:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8009d08:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009d0a:	6823      	ldr	r3, [r4, #0]
 8009d0c:	f013 0f08 	tst.w	r3, #8
 8009d10:	d046      	beq.n	8009da0 <HAL_RCC_OscConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8009d12:	6963      	ldr	r3, [r4, #20]
 8009d14:	b383      	cbz	r3, 8009d78 <HAL_RCC_OscConfig+0x1c8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009d16:	4a41      	ldr	r2, [pc, #260]	@ (8009e1c <HAL_RCC_OscConfig+0x26c>)
 8009d18:	6f53      	ldr	r3, [r2, #116]	@ 0x74
 8009d1a:	f043 0301 	orr.w	r3, r3, #1
 8009d1e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009d20:	f7fe fde4 	bl	80088ec <HAL_GetTick>
 8009d24:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009d26:	4b3d      	ldr	r3, [pc, #244]	@ (8009e1c <HAL_RCC_OscConfig+0x26c>)
 8009d28:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009d2a:	f013 0f02 	tst.w	r3, #2
 8009d2e:	d137      	bne.n	8009da0 <HAL_RCC_OscConfig+0x1f0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009d30:	f7fe fddc 	bl	80088ec <HAL_GetTick>
 8009d34:	1b40      	subs	r0, r0, r5
 8009d36:	2802      	cmp	r0, #2
 8009d38:	d9f5      	bls.n	8009d26 <HAL_RCC_OscConfig+0x176>
        {
          return HAL_TIMEOUT;
 8009d3a:	2003      	movs	r0, #3
 8009d3c:	e11b      	b.n	8009f76 <HAL_RCC_OscConfig+0x3c6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009d3e:	4a37      	ldr	r2, [pc, #220]	@ (8009e1c <HAL_RCC_OscConfig+0x26c>)
 8009d40:	6813      	ldr	r3, [r2, #0]
 8009d42:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8009d46:	6921      	ldr	r1, [r4, #16]
 8009d48:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8009d4c:	6013      	str	r3, [r2, #0]
 8009d4e:	e7dc      	b.n	8009d0a <HAL_RCC_OscConfig+0x15a>
        __HAL_RCC_HSI_DISABLE();
 8009d50:	4a32      	ldr	r2, [pc, #200]	@ (8009e1c <HAL_RCC_OscConfig+0x26c>)
 8009d52:	6813      	ldr	r3, [r2, #0]
 8009d54:	f023 0301 	bic.w	r3, r3, #1
 8009d58:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8009d5a:	f7fe fdc7 	bl	80088ec <HAL_GetTick>
 8009d5e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009d60:	4b2e      	ldr	r3, [pc, #184]	@ (8009e1c <HAL_RCC_OscConfig+0x26c>)
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	f013 0f02 	tst.w	r3, #2
 8009d68:	d0cf      	beq.n	8009d0a <HAL_RCC_OscConfig+0x15a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009d6a:	f7fe fdbf 	bl	80088ec <HAL_GetTick>
 8009d6e:	1b40      	subs	r0, r0, r5
 8009d70:	2802      	cmp	r0, #2
 8009d72:	d9f5      	bls.n	8009d60 <HAL_RCC_OscConfig+0x1b0>
            return HAL_TIMEOUT;
 8009d74:	2003      	movs	r0, #3
 8009d76:	e0fe      	b.n	8009f76 <HAL_RCC_OscConfig+0x3c6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009d78:	4a28      	ldr	r2, [pc, #160]	@ (8009e1c <HAL_RCC_OscConfig+0x26c>)
 8009d7a:	6f53      	ldr	r3, [r2, #116]	@ 0x74
 8009d7c:	f023 0301 	bic.w	r3, r3, #1
 8009d80:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009d82:	f7fe fdb3 	bl	80088ec <HAL_GetTick>
 8009d86:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009d88:	4b24      	ldr	r3, [pc, #144]	@ (8009e1c <HAL_RCC_OscConfig+0x26c>)
 8009d8a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009d8c:	f013 0f02 	tst.w	r3, #2
 8009d90:	d006      	beq.n	8009da0 <HAL_RCC_OscConfig+0x1f0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009d92:	f7fe fdab 	bl	80088ec <HAL_GetTick>
 8009d96:	1b40      	subs	r0, r0, r5
 8009d98:	2802      	cmp	r0, #2
 8009d9a:	d9f5      	bls.n	8009d88 <HAL_RCC_OscConfig+0x1d8>
        {
          return HAL_TIMEOUT;
 8009d9c:	2003      	movs	r0, #3
 8009d9e:	e0ea      	b.n	8009f76 <HAL_RCC_OscConfig+0x3c6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009da0:	6823      	ldr	r3, [r4, #0]
 8009da2:	f013 0f04 	tst.w	r3, #4
 8009da6:	d07d      	beq.n	8009ea4 <HAL_RCC_OscConfig+0x2f4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009da8:	4b1c      	ldr	r3, [pc, #112]	@ (8009e1c <HAL_RCC_OscConfig+0x26c>)
 8009daa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009dac:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8009db0:	d11e      	bne.n	8009df0 <HAL_RCC_OscConfig+0x240>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8009db2:	4b1a      	ldr	r3, [pc, #104]	@ (8009e1c <HAL_RCC_OscConfig+0x26c>)
 8009db4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009db6:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8009dba:	641a      	str	r2, [r3, #64]	@ 0x40
 8009dbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009dbe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009dc2:	9301      	str	r3, [sp, #4]
 8009dc4:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8009dc6:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009dc8:	4b15      	ldr	r3, [pc, #84]	@ (8009e20 <HAL_RCC_OscConfig+0x270>)
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8009dd0:	d010      	beq.n	8009df4 <HAL_RCC_OscConfig+0x244>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009dd2:	68a3      	ldr	r3, [r4, #8]
 8009dd4:	2b01      	cmp	r3, #1
 8009dd6:	d025      	beq.n	8009e24 <HAL_RCC_OscConfig+0x274>
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d13b      	bne.n	8009e54 <HAL_RCC_OscConfig+0x2a4>
 8009ddc:	4b0f      	ldr	r3, [pc, #60]	@ (8009e1c <HAL_RCC_OscConfig+0x26c>)
 8009dde:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8009de0:	f022 0201 	bic.w	r2, r2, #1
 8009de4:	671a      	str	r2, [r3, #112]	@ 0x70
 8009de6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8009de8:	f022 0204 	bic.w	r2, r2, #4
 8009dec:	671a      	str	r2, [r3, #112]	@ 0x70
 8009dee:	e01e      	b.n	8009e2e <HAL_RCC_OscConfig+0x27e>
  FlagStatus pwrclkchanged = RESET;
 8009df0:	2500      	movs	r5, #0
 8009df2:	e7e9      	b.n	8009dc8 <HAL_RCC_OscConfig+0x218>
      PWR->CR1 |= PWR_CR1_DBP;
 8009df4:	4a0a      	ldr	r2, [pc, #40]	@ (8009e20 <HAL_RCC_OscConfig+0x270>)
 8009df6:	6813      	ldr	r3, [r2, #0]
 8009df8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009dfc:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8009dfe:	f7fe fd75 	bl	80088ec <HAL_GetTick>
 8009e02:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009e04:	4b06      	ldr	r3, [pc, #24]	@ (8009e20 <HAL_RCC_OscConfig+0x270>)
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8009e0c:	d1e1      	bne.n	8009dd2 <HAL_RCC_OscConfig+0x222>
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8009e0e:	f7fe fd6d 	bl	80088ec <HAL_GetTick>
 8009e12:	1b80      	subs	r0, r0, r6
 8009e14:	2864      	cmp	r0, #100	@ 0x64
 8009e16:	d9f5      	bls.n	8009e04 <HAL_RCC_OscConfig+0x254>
          return HAL_TIMEOUT;
 8009e18:	2003      	movs	r0, #3
 8009e1a:	e0ac      	b.n	8009f76 <HAL_RCC_OscConfig+0x3c6>
 8009e1c:	40023800 	.word	0x40023800
 8009e20:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009e24:	4a56      	ldr	r2, [pc, #344]	@ (8009f80 <HAL_RCC_OscConfig+0x3d0>)
 8009e26:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 8009e28:	f043 0301 	orr.w	r3, r3, #1
 8009e2c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009e2e:	68a3      	ldr	r3, [r4, #8]
 8009e30:	b333      	cbz	r3, 8009e80 <HAL_RCC_OscConfig+0x2d0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009e32:	f7fe fd5b 	bl	80088ec <HAL_GetTick>
 8009e36:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009e38:	4b51      	ldr	r3, [pc, #324]	@ (8009f80 <HAL_RCC_OscConfig+0x3d0>)
 8009e3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009e3c:	f013 0f02 	tst.w	r3, #2
 8009e40:	d12f      	bne.n	8009ea2 <HAL_RCC_OscConfig+0x2f2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009e42:	f7fe fd53 	bl	80088ec <HAL_GetTick>
 8009e46:	1b80      	subs	r0, r0, r6
 8009e48:	f241 3388 	movw	r3, #5000	@ 0x1388
 8009e4c:	4298      	cmp	r0, r3
 8009e4e:	d9f3      	bls.n	8009e38 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8009e50:	2003      	movs	r0, #3
 8009e52:	e090      	b.n	8009f76 <HAL_RCC_OscConfig+0x3c6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009e54:	2b05      	cmp	r3, #5
 8009e56:	d009      	beq.n	8009e6c <HAL_RCC_OscConfig+0x2bc>
 8009e58:	4b49      	ldr	r3, [pc, #292]	@ (8009f80 <HAL_RCC_OscConfig+0x3d0>)
 8009e5a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8009e5c:	f022 0201 	bic.w	r2, r2, #1
 8009e60:	671a      	str	r2, [r3, #112]	@ 0x70
 8009e62:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8009e64:	f022 0204 	bic.w	r2, r2, #4
 8009e68:	671a      	str	r2, [r3, #112]	@ 0x70
 8009e6a:	e7e0      	b.n	8009e2e <HAL_RCC_OscConfig+0x27e>
 8009e6c:	4b44      	ldr	r3, [pc, #272]	@ (8009f80 <HAL_RCC_OscConfig+0x3d0>)
 8009e6e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8009e70:	f042 0204 	orr.w	r2, r2, #4
 8009e74:	671a      	str	r2, [r3, #112]	@ 0x70
 8009e76:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8009e78:	f042 0201 	orr.w	r2, r2, #1
 8009e7c:	671a      	str	r2, [r3, #112]	@ 0x70
 8009e7e:	e7d6      	b.n	8009e2e <HAL_RCC_OscConfig+0x27e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009e80:	f7fe fd34 	bl	80088ec <HAL_GetTick>
 8009e84:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009e86:	4b3e      	ldr	r3, [pc, #248]	@ (8009f80 <HAL_RCC_OscConfig+0x3d0>)
 8009e88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009e8a:	f013 0f02 	tst.w	r3, #2
 8009e8e:	d008      	beq.n	8009ea2 <HAL_RCC_OscConfig+0x2f2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009e90:	f7fe fd2c 	bl	80088ec <HAL_GetTick>
 8009e94:	1b80      	subs	r0, r0, r6
 8009e96:	f241 3388 	movw	r3, #5000	@ 0x1388
 8009e9a:	4298      	cmp	r0, r3
 8009e9c:	d9f3      	bls.n	8009e86 <HAL_RCC_OscConfig+0x2d6>
        {
          return HAL_TIMEOUT;
 8009e9e:	2003      	movs	r0, #3
 8009ea0:	e069      	b.n	8009f76 <HAL_RCC_OscConfig+0x3c6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009ea2:	b9f5      	cbnz	r5, 8009ee2 <HAL_RCC_OscConfig+0x332>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009ea4:	69a3      	ldr	r3, [r4, #24]
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d064      	beq.n	8009f74 <HAL_RCC_OscConfig+0x3c4>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009eaa:	4a35      	ldr	r2, [pc, #212]	@ (8009f80 <HAL_RCC_OscConfig+0x3d0>)
 8009eac:	6892      	ldr	r2, [r2, #8]
 8009eae:	f002 020c 	and.w	r2, r2, #12
 8009eb2:	2a08      	cmp	r2, #8
 8009eb4:	d061      	beq.n	8009f7a <HAL_RCC_OscConfig+0x3ca>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009eb6:	2b02      	cmp	r3, #2
 8009eb8:	d019      	beq.n	8009eee <HAL_RCC_OscConfig+0x33e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009eba:	4a31      	ldr	r2, [pc, #196]	@ (8009f80 <HAL_RCC_OscConfig+0x3d0>)
 8009ebc:	6813      	ldr	r3, [r2, #0]
 8009ebe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009ec2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009ec4:	f7fe fd12 	bl	80088ec <HAL_GetTick>
 8009ec8:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009eca:	4b2d      	ldr	r3, [pc, #180]	@ (8009f80 <HAL_RCC_OscConfig+0x3d0>)
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8009ed2:	d047      	beq.n	8009f64 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009ed4:	f7fe fd0a 	bl	80088ec <HAL_GetTick>
 8009ed8:	1b00      	subs	r0, r0, r4
 8009eda:	2802      	cmp	r0, #2
 8009edc:	d9f5      	bls.n	8009eca <HAL_RCC_OscConfig+0x31a>
          {
            return HAL_TIMEOUT;
 8009ede:	2003      	movs	r0, #3
 8009ee0:	e049      	b.n	8009f76 <HAL_RCC_OscConfig+0x3c6>
      __HAL_RCC_PWR_CLK_DISABLE();
 8009ee2:	4a27      	ldr	r2, [pc, #156]	@ (8009f80 <HAL_RCC_OscConfig+0x3d0>)
 8009ee4:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8009ee6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009eea:	6413      	str	r3, [r2, #64]	@ 0x40
 8009eec:	e7da      	b.n	8009ea4 <HAL_RCC_OscConfig+0x2f4>
        __HAL_RCC_PLL_DISABLE();
 8009eee:	4a24      	ldr	r2, [pc, #144]	@ (8009f80 <HAL_RCC_OscConfig+0x3d0>)
 8009ef0:	6813      	ldr	r3, [r2, #0]
 8009ef2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009ef6:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8009ef8:	f7fe fcf8 	bl	80088ec <HAL_GetTick>
 8009efc:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009efe:	4b20      	ldr	r3, [pc, #128]	@ (8009f80 <HAL_RCC_OscConfig+0x3d0>)
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8009f06:	d006      	beq.n	8009f16 <HAL_RCC_OscConfig+0x366>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009f08:	f7fe fcf0 	bl	80088ec <HAL_GetTick>
 8009f0c:	1b40      	subs	r0, r0, r5
 8009f0e:	2802      	cmp	r0, #2
 8009f10:	d9f5      	bls.n	8009efe <HAL_RCC_OscConfig+0x34e>
            return HAL_TIMEOUT;
 8009f12:	2003      	movs	r0, #3
 8009f14:	e02f      	b.n	8009f76 <HAL_RCC_OscConfig+0x3c6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009f16:	69e3      	ldr	r3, [r4, #28]
 8009f18:	6a22      	ldr	r2, [r4, #32]
 8009f1a:	4313      	orrs	r3, r2
 8009f1c:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8009f1e:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8009f22:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8009f24:	0852      	lsrs	r2, r2, #1
 8009f26:	3a01      	subs	r2, #1
 8009f28:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009f2c:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8009f2e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8009f32:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009f36:	4a12      	ldr	r2, [pc, #72]	@ (8009f80 <HAL_RCC_OscConfig+0x3d0>)
 8009f38:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8009f3a:	6813      	ldr	r3, [r2, #0]
 8009f3c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009f40:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8009f42:	f7fe fcd3 	bl	80088ec <HAL_GetTick>
 8009f46:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009f48:	4b0d      	ldr	r3, [pc, #52]	@ (8009f80 <HAL_RCC_OscConfig+0x3d0>)
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8009f50:	d106      	bne.n	8009f60 <HAL_RCC_OscConfig+0x3b0>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009f52:	f7fe fccb 	bl	80088ec <HAL_GetTick>
 8009f56:	1b00      	subs	r0, r0, r4
 8009f58:	2802      	cmp	r0, #2
 8009f5a:	d9f5      	bls.n	8009f48 <HAL_RCC_OscConfig+0x398>
            return HAL_TIMEOUT;
 8009f5c:	2003      	movs	r0, #3
 8009f5e:	e00a      	b.n	8009f76 <HAL_RCC_OscConfig+0x3c6>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8009f60:	2000      	movs	r0, #0
 8009f62:	e008      	b.n	8009f76 <HAL_RCC_OscConfig+0x3c6>
 8009f64:	2000      	movs	r0, #0
 8009f66:	e006      	b.n	8009f76 <HAL_RCC_OscConfig+0x3c6>
    return HAL_ERROR;
 8009f68:	2001      	movs	r0, #1
}
 8009f6a:	4770      	bx	lr
        return HAL_ERROR;
 8009f6c:	2001      	movs	r0, #1
 8009f6e:	e002      	b.n	8009f76 <HAL_RCC_OscConfig+0x3c6>
        return HAL_ERROR;
 8009f70:	2001      	movs	r0, #1
 8009f72:	e000      	b.n	8009f76 <HAL_RCC_OscConfig+0x3c6>
  return HAL_OK;
 8009f74:	2000      	movs	r0, #0
}
 8009f76:	b002      	add	sp, #8
 8009f78:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8009f7a:	2001      	movs	r0, #1
 8009f7c:	e7fb      	b.n	8009f76 <HAL_RCC_OscConfig+0x3c6>
 8009f7e:	bf00      	nop
 8009f80:	40023800 	.word	0x40023800

08009f84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009f84:	b508      	push	{r3, lr}
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009f86:	4b26      	ldr	r3, [pc, #152]	@ (800a020 <HAL_RCC_GetSysClockFreq+0x9c>)
 8009f88:	689b      	ldr	r3, [r3, #8]
 8009f8a:	f003 030c 	and.w	r3, r3, #12
 8009f8e:	2b04      	cmp	r3, #4
 8009f90:	d041      	beq.n	800a016 <HAL_RCC_GetSysClockFreq+0x92>
 8009f92:	2b08      	cmp	r3, #8
 8009f94:	d141      	bne.n	800a01a <HAL_RCC_GetSysClockFreq+0x96>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009f96:	4b22      	ldr	r3, [pc, #136]	@ (800a020 <HAL_RCC_GetSysClockFreq+0x9c>)
 8009f98:	685a      	ldr	r2, [r3, #4]
 8009f9a:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8009f9e:	685b      	ldr	r3, [r3, #4]
 8009fa0:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8009fa4:	d012      	beq.n	8009fcc <HAL_RCC_GetSysClockFreq+0x48>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009fa6:	4b1e      	ldr	r3, [pc, #120]	@ (800a020 <HAL_RCC_GetSysClockFreq+0x9c>)
 8009fa8:	6859      	ldr	r1, [r3, #4]
 8009faa:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8009fae:	481d      	ldr	r0, [pc, #116]	@ (800a024 <HAL_RCC_GetSysClockFreq+0xa0>)
 8009fb0:	2300      	movs	r3, #0
 8009fb2:	fba1 0100 	umull	r0, r1, r1, r0
 8009fb6:	f7fc fe5f 	bl	8006c78 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 8009fba:	4b19      	ldr	r3, [pc, #100]	@ (800a020 <HAL_RCC_GetSysClockFreq+0x9c>)
 8009fbc:	685b      	ldr	r3, [r3, #4]
 8009fbe:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8009fc2:	3301      	adds	r3, #1
 8009fc4:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8009fc6:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8009fca:	e027      	b.n	800a01c <HAL_RCC_GetSysClockFreq+0x98>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009fcc:	4b14      	ldr	r3, [pc, #80]	@ (800a020 <HAL_RCC_GetSysClockFreq+0x9c>)
 8009fce:	6858      	ldr	r0, [r3, #4]
 8009fd0:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8009fd4:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 8009fd8:	ebbc 0c00 	subs.w	ip, ip, r0
 8009fdc:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8009fe0:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8009fe4:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 8009fe8:	ea4f 118c 	mov.w	r1, ip, lsl #6
 8009fec:	ebb1 010c 	subs.w	r1, r1, ip
 8009ff0:	eb63 030e 	sbc.w	r3, r3, lr
 8009ff4:	00db      	lsls	r3, r3, #3
 8009ff6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009ffa:	00c9      	lsls	r1, r1, #3
 8009ffc:	eb11 0c00 	adds.w	ip, r1, r0
 800a000:	f143 0300 	adc.w	r3, r3, #0
 800a004:	0299      	lsls	r1, r3, #10
 800a006:	2300      	movs	r3, #0
 800a008:	ea4f 208c 	mov.w	r0, ip, lsl #10
 800a00c:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 800a010:	f7fc fe32 	bl	8006c78 <__aeabi_uldivmod>
 800a014:	e7d1      	b.n	8009fba <HAL_RCC_GetSysClockFreq+0x36>
      sysclockfreq = HSE_VALUE;
 800a016:	4803      	ldr	r0, [pc, #12]	@ (800a024 <HAL_RCC_GetSysClockFreq+0xa0>)
 800a018:	e000      	b.n	800a01c <HAL_RCC_GetSysClockFreq+0x98>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a01a:	4803      	ldr	r0, [pc, #12]	@ (800a028 <HAL_RCC_GetSysClockFreq+0xa4>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800a01c:	bd08      	pop	{r3, pc}
 800a01e:	bf00      	nop
 800a020:	40023800 	.word	0x40023800
 800a024:	017d7840 	.word	0x017d7840
 800a028:	00f42400 	.word	0x00f42400

0800a02c <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 800a02c:	2800      	cmp	r0, #0
 800a02e:	f000 809f 	beq.w	800a170 <HAL_RCC_ClockConfig+0x144>
{
 800a032:	b570      	push	{r4, r5, r6, lr}
 800a034:	460d      	mov	r5, r1
 800a036:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800a038:	4b51      	ldr	r3, [pc, #324]	@ (800a180 <HAL_RCC_ClockConfig+0x154>)
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	f003 030f 	and.w	r3, r3, #15
 800a040:	428b      	cmp	r3, r1
 800a042:	d20b      	bcs.n	800a05c <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a044:	4a4e      	ldr	r2, [pc, #312]	@ (800a180 <HAL_RCC_ClockConfig+0x154>)
 800a046:	6813      	ldr	r3, [r2, #0]
 800a048:	f023 030f 	bic.w	r3, r3, #15
 800a04c:	430b      	orrs	r3, r1
 800a04e:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a050:	6813      	ldr	r3, [r2, #0]
 800a052:	f003 030f 	and.w	r3, r3, #15
 800a056:	428b      	cmp	r3, r1
 800a058:	f040 808c 	bne.w	800a174 <HAL_RCC_ClockConfig+0x148>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a05c:	6823      	ldr	r3, [r4, #0]
 800a05e:	f013 0f02 	tst.w	r3, #2
 800a062:	d017      	beq.n	800a094 <HAL_RCC_ClockConfig+0x68>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a064:	f013 0f04 	tst.w	r3, #4
 800a068:	d004      	beq.n	800a074 <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a06a:	4a46      	ldr	r2, [pc, #280]	@ (800a184 <HAL_RCC_ClockConfig+0x158>)
 800a06c:	6893      	ldr	r3, [r2, #8]
 800a06e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800a072:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a074:	6823      	ldr	r3, [r4, #0]
 800a076:	f013 0f08 	tst.w	r3, #8
 800a07a:	d004      	beq.n	800a086 <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800a07c:	4a41      	ldr	r2, [pc, #260]	@ (800a184 <HAL_RCC_ClockConfig+0x158>)
 800a07e:	6893      	ldr	r3, [r2, #8]
 800a080:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800a084:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a086:	4a3f      	ldr	r2, [pc, #252]	@ (800a184 <HAL_RCC_ClockConfig+0x158>)
 800a088:	6893      	ldr	r3, [r2, #8]
 800a08a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a08e:	68a1      	ldr	r1, [r4, #8]
 800a090:	430b      	orrs	r3, r1
 800a092:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a094:	6823      	ldr	r3, [r4, #0]
 800a096:	f013 0f01 	tst.w	r3, #1
 800a09a:	d031      	beq.n	800a100 <HAL_RCC_ClockConfig+0xd4>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a09c:	6863      	ldr	r3, [r4, #4]
 800a09e:	2b01      	cmp	r3, #1
 800a0a0:	d020      	beq.n	800a0e4 <HAL_RCC_ClockConfig+0xb8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a0a2:	2b02      	cmp	r3, #2
 800a0a4:	d025      	beq.n	800a0f2 <HAL_RCC_ClockConfig+0xc6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a0a6:	4a37      	ldr	r2, [pc, #220]	@ (800a184 <HAL_RCC_ClockConfig+0x158>)
 800a0a8:	6812      	ldr	r2, [r2, #0]
 800a0aa:	f012 0f02 	tst.w	r2, #2
 800a0ae:	d063      	beq.n	800a178 <HAL_RCC_ClockConfig+0x14c>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a0b0:	4934      	ldr	r1, [pc, #208]	@ (800a184 <HAL_RCC_ClockConfig+0x158>)
 800a0b2:	688a      	ldr	r2, [r1, #8]
 800a0b4:	f022 0203 	bic.w	r2, r2, #3
 800a0b8:	4313      	orrs	r3, r2
 800a0ba:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 800a0bc:	f7fe fc16 	bl	80088ec <HAL_GetTick>
 800a0c0:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a0c2:	4b30      	ldr	r3, [pc, #192]	@ (800a184 <HAL_RCC_ClockConfig+0x158>)
 800a0c4:	689b      	ldr	r3, [r3, #8]
 800a0c6:	f003 030c 	and.w	r3, r3, #12
 800a0ca:	6862      	ldr	r2, [r4, #4]
 800a0cc:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800a0d0:	d016      	beq.n	800a100 <HAL_RCC_ClockConfig+0xd4>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a0d2:	f7fe fc0b 	bl	80088ec <HAL_GetTick>
 800a0d6:	1b80      	subs	r0, r0, r6
 800a0d8:	f241 3388 	movw	r3, #5000	@ 0x1388
 800a0dc:	4298      	cmp	r0, r3
 800a0de:	d9f0      	bls.n	800a0c2 <HAL_RCC_ClockConfig+0x96>
        return HAL_TIMEOUT;
 800a0e0:	2003      	movs	r0, #3
 800a0e2:	e044      	b.n	800a16e <HAL_RCC_ClockConfig+0x142>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a0e4:	4a27      	ldr	r2, [pc, #156]	@ (800a184 <HAL_RCC_ClockConfig+0x158>)
 800a0e6:	6812      	ldr	r2, [r2, #0]
 800a0e8:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 800a0ec:	d1e0      	bne.n	800a0b0 <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 800a0ee:	2001      	movs	r0, #1
 800a0f0:	e03d      	b.n	800a16e <HAL_RCC_ClockConfig+0x142>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a0f2:	4a24      	ldr	r2, [pc, #144]	@ (800a184 <HAL_RCC_ClockConfig+0x158>)
 800a0f4:	6812      	ldr	r2, [r2, #0]
 800a0f6:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 800a0fa:	d1d9      	bne.n	800a0b0 <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 800a0fc:	2001      	movs	r0, #1
 800a0fe:	e036      	b.n	800a16e <HAL_RCC_ClockConfig+0x142>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800a100:	4b1f      	ldr	r3, [pc, #124]	@ (800a180 <HAL_RCC_ClockConfig+0x154>)
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	f003 030f 	and.w	r3, r3, #15
 800a108:	42ab      	cmp	r3, r5
 800a10a:	d90a      	bls.n	800a122 <HAL_RCC_ClockConfig+0xf6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a10c:	4a1c      	ldr	r2, [pc, #112]	@ (800a180 <HAL_RCC_ClockConfig+0x154>)
 800a10e:	6813      	ldr	r3, [r2, #0]
 800a110:	f023 030f 	bic.w	r3, r3, #15
 800a114:	432b      	orrs	r3, r5
 800a116:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a118:	6813      	ldr	r3, [r2, #0]
 800a11a:	f003 030f 	and.w	r3, r3, #15
 800a11e:	42ab      	cmp	r3, r5
 800a120:	d12c      	bne.n	800a17c <HAL_RCC_ClockConfig+0x150>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a122:	6823      	ldr	r3, [r4, #0]
 800a124:	f013 0f04 	tst.w	r3, #4
 800a128:	d006      	beq.n	800a138 <HAL_RCC_ClockConfig+0x10c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a12a:	4a16      	ldr	r2, [pc, #88]	@ (800a184 <HAL_RCC_ClockConfig+0x158>)
 800a12c:	6893      	ldr	r3, [r2, #8]
 800a12e:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 800a132:	68e1      	ldr	r1, [r4, #12]
 800a134:	430b      	orrs	r3, r1
 800a136:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a138:	6823      	ldr	r3, [r4, #0]
 800a13a:	f013 0f08 	tst.w	r3, #8
 800a13e:	d007      	beq.n	800a150 <HAL_RCC_ClockConfig+0x124>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800a140:	4a10      	ldr	r2, [pc, #64]	@ (800a184 <HAL_RCC_ClockConfig+0x158>)
 800a142:	6893      	ldr	r3, [r2, #8]
 800a144:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 800a148:	6921      	ldr	r1, [r4, #16]
 800a14a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800a14e:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800a150:	f7ff ff18 	bl	8009f84 <HAL_RCC_GetSysClockFreq>
 800a154:	4b0b      	ldr	r3, [pc, #44]	@ (800a184 <HAL_RCC_ClockConfig+0x158>)
 800a156:	689b      	ldr	r3, [r3, #8]
 800a158:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800a15c:	4a0a      	ldr	r2, [pc, #40]	@ (800a188 <HAL_RCC_ClockConfig+0x15c>)
 800a15e:	5cd3      	ldrb	r3, [r2, r3]
 800a160:	40d8      	lsrs	r0, r3
 800a162:	4b0a      	ldr	r3, [pc, #40]	@ (800a18c <HAL_RCC_ClockConfig+0x160>)
 800a164:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800a166:	2000      	movs	r0, #0
 800a168:	f7fe fb78 	bl	800885c <HAL_InitTick>
  return HAL_OK;
 800a16c:	2000      	movs	r0, #0
}
 800a16e:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 800a170:	2001      	movs	r0, #1
}
 800a172:	4770      	bx	lr
      return HAL_ERROR;
 800a174:	2001      	movs	r0, #1
 800a176:	e7fa      	b.n	800a16e <HAL_RCC_ClockConfig+0x142>
        return HAL_ERROR;
 800a178:	2001      	movs	r0, #1
 800a17a:	e7f8      	b.n	800a16e <HAL_RCC_ClockConfig+0x142>
      return HAL_ERROR;
 800a17c:	2001      	movs	r0, #1
 800a17e:	e7f6      	b.n	800a16e <HAL_RCC_ClockConfig+0x142>
 800a180:	40023c00 	.word	0x40023c00
 800a184:	40023800 	.word	0x40023800
 800a188:	0802dbac 	.word	0x0802dbac
 800a18c:	2000001c 	.word	0x2000001c

0800a190 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 800a190:	4b01      	ldr	r3, [pc, #4]	@ (800a198 <HAL_RCC_GetHCLKFreq+0x8>)
 800a192:	6818      	ldr	r0, [r3, #0]
 800a194:	4770      	bx	lr
 800a196:	bf00      	nop
 800a198:	2000001c 	.word	0x2000001c

0800a19c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a19c:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800a19e:	f7ff fff7 	bl	800a190 <HAL_RCC_GetHCLKFreq>
 800a1a2:	4b04      	ldr	r3, [pc, #16]	@ (800a1b4 <HAL_RCC_GetPCLK1Freq+0x18>)
 800a1a4:	689b      	ldr	r3, [r3, #8]
 800a1a6:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800a1aa:	4a03      	ldr	r2, [pc, #12]	@ (800a1b8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800a1ac:	5cd3      	ldrb	r3, [r2, r3]
}
 800a1ae:	40d8      	lsrs	r0, r3
 800a1b0:	bd08      	pop	{r3, pc}
 800a1b2:	bf00      	nop
 800a1b4:	40023800 	.word	0x40023800
 800a1b8:	0802dba4 	.word	0x0802dba4

0800a1bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a1bc:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800a1be:	f7ff ffe7 	bl	800a190 <HAL_RCC_GetHCLKFreq>
 800a1c2:	4b04      	ldr	r3, [pc, #16]	@ (800a1d4 <HAL_RCC_GetPCLK2Freq+0x18>)
 800a1c4:	689b      	ldr	r3, [r3, #8]
 800a1c6:	f3c3 3342 	ubfx	r3, r3, #13, #3
 800a1ca:	4a03      	ldr	r2, [pc, #12]	@ (800a1d8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800a1cc:	5cd3      	ldrb	r3, [r2, r3]
}
 800a1ce:	40d8      	lsrs	r0, r3
 800a1d0:	bd08      	pop	{r3, pc}
 800a1d2:	bf00      	nop
 800a1d4:	40023800 	.word	0x40023800
 800a1d8:	0802dba4 	.word	0x0802dba4

0800a1dc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a1dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a1de:	b083      	sub	sp, #12
 800a1e0:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800a1e2:	6806      	ldr	r6, [r0, #0]
 800a1e4:	f016 0601 	ands.w	r6, r6, #1
 800a1e8:	d00d      	beq.n	800a206 <HAL_RCCEx_PeriphCLKConfig+0x2a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800a1ea:	4baf      	ldr	r3, [pc, #700]	@ (800a4a8 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800a1ec:	689a      	ldr	r2, [r3, #8]
 800a1ee:	f422 0200 	bic.w	r2, r2, #8388608	@ 0x800000
 800a1f2:	609a      	str	r2, [r3, #8]
 800a1f4:	689a      	ldr	r2, [r3, #8]
 800a1f6:	6b41      	ldr	r1, [r0, #52]	@ 0x34
 800a1f8:	430a      	orrs	r2, r1
 800a1fa:	609a      	str	r2, [r3, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800a1fc:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	f000 812b 	beq.w	800a45a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  uint32_t plli2sused = 0;
 800a204:	2600      	movs	r6, #0
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800a206:	6825      	ldr	r5, [r4, #0]
 800a208:	f415 2500 	ands.w	r5, r5, #524288	@ 0x80000
 800a20c:	d011      	beq.n	800a232 <HAL_RCCEx_PeriphCLKConfig+0x56>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a20e:	4aa6      	ldr	r2, [pc, #664]	@ (800a4a8 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800a210:	f8d2 308c 	ldr.w	r3, [r2, #140]	@ 0x8c
 800a214:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800a218:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 800a21a:	430b      	orrs	r3, r1
 800a21c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800a220:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800a222:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a226:	f000 811a 	beq.w	800a45e <HAL_RCCEx_PeriphCLKConfig+0x282>
    {
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	f000 8119 	beq.w	800a462 <HAL_RCCEx_PeriphCLKConfig+0x286>
  uint32_t pllsaiused = 0;
 800a230:	2500      	movs	r5, #0
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800a232:	6823      	ldr	r3, [r4, #0]
 800a234:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 800a238:	d00f      	beq.n	800a25a <HAL_RCCEx_PeriphCLKConfig+0x7e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800a23a:	4a9b      	ldr	r2, [pc, #620]	@ (800a4a8 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800a23c:	f8d2 308c 	ldr.w	r3, [r2, #140]	@ 0x8c
 800a240:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800a244:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 800a246:	430b      	orrs	r3, r1
 800a248:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800a24c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a24e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a252:	f000 8108 	beq.w	800a466 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800a256:	b903      	cbnz	r3, 800a25a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      pllsaiused = 1;
 800a258:	2501      	movs	r5, #1
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800a25a:	6823      	ldr	r3, [r4, #0]
 800a25c:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 800a260:	d000      	beq.n	800a264 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
      plli2sused = 1;
 800a262:	2601      	movs	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800a264:	f013 0f20 	tst.w	r3, #32
 800a268:	f040 80ff 	bne.w	800a46a <HAL_RCCEx_PeriphCLKConfig+0x28e>
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800a26c:	6823      	ldr	r3, [r4, #0]
 800a26e:	f013 0f10 	tst.w	r3, #16
 800a272:	d00c      	beq.n	800a28e <HAL_RCCEx_PeriphCLKConfig+0xb2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a274:	4b8c      	ldr	r3, [pc, #560]	@ (800a4a8 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800a276:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 800a27a:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 800a27e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 800a282:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 800a286:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800a288:	430a      	orrs	r2, r1
 800a28a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800a28e:	6823      	ldr	r3, [r4, #0]
 800a290:	f413 4f80 	tst.w	r3, #16384	@ 0x4000
 800a294:	d008      	beq.n	800a2a8 <HAL_RCCEx_PeriphCLKConfig+0xcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800a296:	4a84      	ldr	r2, [pc, #528]	@ (800a4a8 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800a298:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 800a29c:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 800a2a0:	6e61      	ldr	r1, [r4, #100]	@ 0x64
 800a2a2:	430b      	orrs	r3, r1
 800a2a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800a2a8:	6823      	ldr	r3, [r4, #0]
 800a2aa:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 800a2ae:	d008      	beq.n	800a2c2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800a2b0:	4a7d      	ldr	r2, [pc, #500]	@ (800a4a8 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800a2b2:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 800a2b6:	f423 2340 	bic.w	r3, r3, #786432	@ 0xc0000
 800a2ba:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 800a2bc:	430b      	orrs	r3, r1
 800a2be:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800a2c2:	6823      	ldr	r3, [r4, #0]
 800a2c4:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 800a2c8:	d008      	beq.n	800a2dc <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800a2ca:	4a77      	ldr	r2, [pc, #476]	@ (800a4a8 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800a2cc:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 800a2d0:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800a2d4:	6ee1      	ldr	r1, [r4, #108]	@ 0x6c
 800a2d6:	430b      	orrs	r3, r1
 800a2d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a2dc:	6823      	ldr	r3, [r4, #0]
 800a2de:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 800a2e2:	d008      	beq.n	800a2f6 <HAL_RCCEx_PeriphCLKConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a2e4:	4a70      	ldr	r2, [pc, #448]	@ (800a4a8 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800a2e6:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 800a2ea:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800a2ee:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 800a2f0:	430b      	orrs	r3, r1
 800a2f2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800a2f6:	6823      	ldr	r3, [r4, #0]
 800a2f8:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800a2fc:	d008      	beq.n	800a310 <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800a2fe:	4a6a      	ldr	r2, [pc, #424]	@ (800a4a8 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800a300:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 800a304:	f023 0303 	bic.w	r3, r3, #3
 800a308:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800a30a:	430b      	orrs	r3, r1
 800a30c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800a310:	6823      	ldr	r3, [r4, #0]
 800a312:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a316:	d008      	beq.n	800a32a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800a318:	4a63      	ldr	r2, [pc, #396]	@ (800a4a8 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800a31a:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 800a31e:	f023 030c 	bic.w	r3, r3, #12
 800a322:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800a324:	430b      	orrs	r3, r1
 800a326:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800a32a:	6823      	ldr	r3, [r4, #0]
 800a32c:	f413 7f80 	tst.w	r3, #256	@ 0x100
 800a330:	d008      	beq.n	800a344 <HAL_RCCEx_PeriphCLKConfig+0x168>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800a332:	4a5d      	ldr	r2, [pc, #372]	@ (800a4a8 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800a334:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 800a338:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800a33c:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 800a33e:	430b      	orrs	r3, r1
 800a340:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800a344:	6823      	ldr	r3, [r4, #0]
 800a346:	f413 7f00 	tst.w	r3, #512	@ 0x200
 800a34a:	d008      	beq.n	800a35e <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800a34c:	4a56      	ldr	r2, [pc, #344]	@ (800a4a8 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800a34e:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 800a352:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800a356:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 800a358:	430b      	orrs	r3, r1
 800a35a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800a35e:	6823      	ldr	r3, [r4, #0]
 800a360:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 800a364:	d008      	beq.n	800a378 <HAL_RCCEx_PeriphCLKConfig+0x19c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800a366:	4a50      	ldr	r2, [pc, #320]	@ (800a4a8 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800a368:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 800a36c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a370:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 800a372:	430b      	orrs	r3, r1
 800a374:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800a378:	6823      	ldr	r3, [r4, #0]
 800a37a:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 800a37e:	d008      	beq.n	800a392 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800a380:	4a49      	ldr	r2, [pc, #292]	@ (800a4a8 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800a382:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 800a386:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800a38a:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 800a38c:	430b      	orrs	r3, r1
 800a38e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800a392:	6823      	ldr	r3, [r4, #0]
 800a394:	f413 5f80 	tst.w	r3, #4096	@ 0x1000
 800a398:	d008      	beq.n	800a3ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800a39a:	4a43      	ldr	r2, [pc, #268]	@ (800a4a8 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800a39c:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 800a3a0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800a3a4:	6de1      	ldr	r1, [r4, #92]	@ 0x5c
 800a3a6:	430b      	orrs	r3, r1
 800a3a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800a3ac:	6823      	ldr	r3, [r4, #0]
 800a3ae:	f413 5f00 	tst.w	r3, #8192	@ 0x2000
 800a3b2:	d008      	beq.n	800a3c6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800a3b4:	4a3c      	ldr	r2, [pc, #240]	@ (800a4a8 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800a3b6:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 800a3ba:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800a3be:	6e21      	ldr	r1, [r4, #96]	@ 0x60
 800a3c0:	430b      	orrs	r3, r1
 800a3c2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a3c6:	6823      	ldr	r3, [r4, #0]
 800a3c8:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 800a3cc:	d008      	beq.n	800a3e0 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a3ce:	4a36      	ldr	r2, [pc, #216]	@ (800a4a8 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800a3d0:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 800a3d4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a3d8:	6fa1      	ldr	r1, [r4, #120]	@ 0x78
 800a3da:	430b      	orrs	r3, r1
 800a3dc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800a3e0:	6823      	ldr	r3, [r4, #0]
 800a3e2:	f413 1f00 	tst.w	r3, #2097152	@ 0x200000
 800a3e6:	d00d      	beq.n	800a404 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800a3e8:	4a2f      	ldr	r2, [pc, #188]	@ (800a4a8 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800a3ea:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 800a3ee:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 800a3f2:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
 800a3f4:	430b      	orrs	r3, r1
 800a3f6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800a3fa:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
 800a3fc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a400:	f000 809e 	beq.w	800a540 <HAL_RCCEx_PeriphCLKConfig+0x364>
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a404:	6823      	ldr	r3, [r4, #0]
 800a406:	f013 0f08 	tst.w	r3, #8
 800a40a:	d000      	beq.n	800a40e <HAL_RCCEx_PeriphCLKConfig+0x232>
  {
    pllsaiused = 1;
 800a40c:	2501      	movs	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a40e:	f413 2f80 	tst.w	r3, #262144	@ 0x40000
 800a412:	d008      	beq.n	800a426 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a414:	4a24      	ldr	r2, [pc, #144]	@ (800a4a8 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800a416:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 800a41a:	f023 7340 	bic.w	r3, r3, #50331648	@ 0x3000000
 800a41e:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 800a420:	430b      	orrs	r3, r1
 800a422:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800a426:	6823      	ldr	r3, [r4, #0]
 800a428:	f413 0f00 	tst.w	r3, #8388608	@ 0x800000
 800a42c:	d009      	beq.n	800a442 <HAL_RCCEx_PeriphCLKConfig+0x266>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800a42e:	4a1e      	ldr	r2, [pc, #120]	@ (800a4a8 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800a430:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 800a434:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a438:	f8d4 1080 	ldr.w	r1, [r4, #128]	@ 0x80
 800a43c:	430b      	orrs	r3, r1
 800a43e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800a442:	2e00      	cmp	r6, #0
 800a444:	d17e      	bne.n	800a544 <HAL_RCCEx_PeriphCLKConfig+0x368>
 800a446:	6823      	ldr	r3, [r4, #0]
 800a448:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a44c:	d07a      	beq.n	800a544 <HAL_RCCEx_PeriphCLKConfig+0x368>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800a44e:	2d01      	cmp	r5, #1
 800a450:	f000 810b 	beq.w	800a66a <HAL_RCCEx_PeriphCLKConfig+0x48e>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 800a454:	2000      	movs	r0, #0
}
 800a456:	b003      	add	sp, #12
 800a458:	bdf0      	pop	{r4, r5, r6, r7, pc}
      plli2sused = 1;
 800a45a:	2601      	movs	r6, #1
 800a45c:	e6d3      	b.n	800a206 <HAL_RCCEx_PeriphCLKConfig+0x2a>
      plli2sused = 1;
 800a45e:	2601      	movs	r6, #1
 800a460:	e6e3      	b.n	800a22a <HAL_RCCEx_PeriphCLKConfig+0x4e>
      pllsaiused = 1;
 800a462:	2501      	movs	r5, #1
 800a464:	e6e5      	b.n	800a232 <HAL_RCCEx_PeriphCLKConfig+0x56>
      plli2sused = 1;
 800a466:	2601      	movs	r6, #1
 800a468:	e6f5      	b.n	800a256 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    __HAL_RCC_PWR_CLK_ENABLE();
 800a46a:	4b0f      	ldr	r3, [pc, #60]	@ (800a4a8 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800a46c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a46e:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800a472:	641a      	str	r2, [r3, #64]	@ 0x40
 800a474:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a476:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a47a:	9301      	str	r3, [sp, #4]
 800a47c:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 800a47e:	4a0b      	ldr	r2, [pc, #44]	@ (800a4ac <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 800a480:	6813      	ldr	r3, [r2, #0]
 800a482:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a486:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800a488:	f7fe fa30 	bl	80088ec <HAL_GetTick>
 800a48c:	4607      	mov	r7, r0
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800a48e:	4b07      	ldr	r3, [pc, #28]	@ (800a4ac <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	f413 7f80 	tst.w	r3, #256	@ 0x100
 800a496:	d10b      	bne.n	800a4b0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a498:	f7fe fa28 	bl	80088ec <HAL_GetTick>
 800a49c:	1bc0      	subs	r0, r0, r7
 800a49e:	2864      	cmp	r0, #100	@ 0x64
 800a4a0:	d9f5      	bls.n	800a48e <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        return HAL_TIMEOUT;
 800a4a2:	2003      	movs	r0, #3
 800a4a4:	e7d7      	b.n	800a456 <HAL_RCCEx_PeriphCLKConfig+0x27a>
 800a4a6:	bf00      	nop
 800a4a8:	40023800 	.word	0x40023800
 800a4ac:	40007000 	.word	0x40007000
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800a4b0:	4ba8      	ldr	r3, [pc, #672]	@ (800a754 <HAL_RCCEx_PeriphCLKConfig+0x578>)
 800a4b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800a4b4:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 800a4b8:	d015      	beq.n	800a4e6 <HAL_RCCEx_PeriphCLKConfig+0x30a>
 800a4ba:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 800a4bc:	f402 7240 	and.w	r2, r2, #768	@ 0x300
 800a4c0:	429a      	cmp	r2, r3
 800a4c2:	d010      	beq.n	800a4e6 <HAL_RCCEx_PeriphCLKConfig+0x30a>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a4c4:	4ba3      	ldr	r3, [pc, #652]	@ (800a754 <HAL_RCCEx_PeriphCLKConfig+0x578>)
 800a4c6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800a4c8:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 800a4cc:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800a4ce:	f441 3180 	orr.w	r1, r1, #65536	@ 0x10000
 800a4d2:	6719      	str	r1, [r3, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800a4d4:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800a4d6:	f421 3180 	bic.w	r1, r1, #65536	@ 0x10000
 800a4da:	6719      	str	r1, [r3, #112]	@ 0x70
      RCC->BDCR = tmpreg0;
 800a4dc:	671a      	str	r2, [r3, #112]	@ 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800a4de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a4e0:	f013 0f01 	tst.w	r3, #1
 800a4e4:	d112      	bne.n	800a50c <HAL_RCCEx_PeriphCLKConfig+0x330>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a4e6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800a4e8:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 800a4ec:	f5b2 7f40 	cmp.w	r2, #768	@ 0x300
 800a4f0:	d01d      	beq.n	800a52e <HAL_RCCEx_PeriphCLKConfig+0x352>
 800a4f2:	4a98      	ldr	r2, [pc, #608]	@ (800a754 <HAL_RCCEx_PeriphCLKConfig+0x578>)
 800a4f4:	6893      	ldr	r3, [r2, #8]
 800a4f6:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800a4fa:	6093      	str	r3, [r2, #8]
 800a4fc:	4995      	ldr	r1, [pc, #596]	@ (800a754 <HAL_RCCEx_PeriphCLKConfig+0x578>)
 800a4fe:	6f0b      	ldr	r3, [r1, #112]	@ 0x70
 800a500:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 800a502:	f3c2 020b 	ubfx	r2, r2, #0, #12
 800a506:	4313      	orrs	r3, r2
 800a508:	670b      	str	r3, [r1, #112]	@ 0x70
 800a50a:	e6af      	b.n	800a26c <HAL_RCCEx_PeriphCLKConfig+0x90>
        tickstart = HAL_GetTick();
 800a50c:	f7fe f9ee 	bl	80088ec <HAL_GetTick>
 800a510:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a512:	4b90      	ldr	r3, [pc, #576]	@ (800a754 <HAL_RCCEx_PeriphCLKConfig+0x578>)
 800a514:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a516:	f013 0f02 	tst.w	r3, #2
 800a51a:	d1e4      	bne.n	800a4e6 <HAL_RCCEx_PeriphCLKConfig+0x30a>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a51c:	f7fe f9e6 	bl	80088ec <HAL_GetTick>
 800a520:	1bc0      	subs	r0, r0, r7
 800a522:	f241 3388 	movw	r3, #5000	@ 0x1388
 800a526:	4298      	cmp	r0, r3
 800a528:	d9f3      	bls.n	800a512 <HAL_RCCEx_PeriphCLKConfig+0x336>
            return HAL_TIMEOUT;
 800a52a:	2003      	movs	r0, #3
 800a52c:	e793      	b.n	800a456 <HAL_RCCEx_PeriphCLKConfig+0x27a>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a52e:	4889      	ldr	r0, [pc, #548]	@ (800a754 <HAL_RCCEx_PeriphCLKConfig+0x578>)
 800a530:	6882      	ldr	r2, [r0, #8]
 800a532:	f422 12f8 	bic.w	r2, r2, #2031616	@ 0x1f0000
 800a536:	4988      	ldr	r1, [pc, #544]	@ (800a758 <HAL_RCCEx_PeriphCLKConfig+0x57c>)
 800a538:	4019      	ands	r1, r3
 800a53a:	430a      	orrs	r2, r1
 800a53c:	6082      	str	r2, [r0, #8]
 800a53e:	e7dd      	b.n	800a4fc <HAL_RCCEx_PeriphCLKConfig+0x320>
      pllsaiused = 1;
 800a540:	2501      	movs	r5, #1
 800a542:	e75f      	b.n	800a404 <HAL_RCCEx_PeriphCLKConfig+0x228>
    __HAL_RCC_PLLI2S_DISABLE();
 800a544:	4a83      	ldr	r2, [pc, #524]	@ (800a754 <HAL_RCCEx_PeriphCLKConfig+0x578>)
 800a546:	6813      	ldr	r3, [r2, #0]
 800a548:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a54c:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800a54e:	f7fe f9cd 	bl	80088ec <HAL_GetTick>
 800a552:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800a554:	4b7f      	ldr	r3, [pc, #508]	@ (800a754 <HAL_RCCEx_PeriphCLKConfig+0x578>)
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
 800a55c:	d006      	beq.n	800a56c <HAL_RCCEx_PeriphCLKConfig+0x390>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800a55e:	f7fe f9c5 	bl	80088ec <HAL_GetTick>
 800a562:	1b80      	subs	r0, r0, r6
 800a564:	2864      	cmp	r0, #100	@ 0x64
 800a566:	d9f5      	bls.n	800a554 <HAL_RCCEx_PeriphCLKConfig+0x378>
        return HAL_TIMEOUT;
 800a568:	2003      	movs	r0, #3
 800a56a:	e774      	b.n	800a456 <HAL_RCCEx_PeriphCLKConfig+0x27a>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800a56c:	6823      	ldr	r3, [r4, #0]
 800a56e:	f013 0f01 	tst.w	r3, #1
 800a572:	d013      	beq.n	800a59c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 800a574:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a576:	b98b      	cbnz	r3, 800a59c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800a578:	4a76      	ldr	r2, [pc, #472]	@ (800a754 <HAL_RCCEx_PeriphCLKConfig+0x578>)
 800a57a:	f8d2 3084 	ldr.w	r3, [r2, #132]	@ 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800a57e:	f8d2 1084 	ldr.w	r1, [r2, #132]	@ 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800a582:	6860      	ldr	r0, [r4, #4]
 800a584:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800a588:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800a58c:	f001 6170 	and.w	r1, r1, #251658240	@ 0xf000000
 800a590:	430b      	orrs	r3, r1
 800a592:	68a1      	ldr	r1, [r4, #8]
 800a594:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 800a598:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800a59c:	6823      	ldr	r3, [r4, #0]
 800a59e:	f413 2f00 	tst.w	r3, #524288	@ 0x80000
 800a5a2:	d003      	beq.n	800a5ac <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 800a5a4:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 800a5a6:	f5b2 1f80 	cmp.w	r2, #1048576	@ 0x100000
 800a5aa:	d006      	beq.n	800a5ba <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800a5ac:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 800a5b0:	d01e      	beq.n	800a5f0 <HAL_RCCEx_PeriphCLKConfig+0x414>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800a5b2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a5b4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a5b8:	d11a      	bne.n	800a5f0 <HAL_RCCEx_PeriphCLKConfig+0x414>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800a5ba:	4a66      	ldr	r2, [pc, #408]	@ (800a754 <HAL_RCCEx_PeriphCLKConfig+0x578>)
 800a5bc:	f8d2 3084 	ldr.w	r3, [r2, #132]	@ 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800a5c0:	f8d2 1084 	ldr.w	r1, [r2, #132]	@ 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800a5c4:	6860      	ldr	r0, [r4, #4]
 800a5c6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800a5ca:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800a5ce:	68e0      	ldr	r0, [r4, #12]
 800a5d0:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 800a5d4:	f001 41e0 	and.w	r1, r1, #1879048192	@ 0x70000000
 800a5d8:	430b      	orrs	r3, r1
 800a5da:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800a5de:	f8d2 308c 	ldr.w	r3, [r2, #140]	@ 0x8c
 800a5e2:	f023 031f 	bic.w	r3, r3, #31
 800a5e6:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800a5e8:	3901      	subs	r1, #1
 800a5ea:	430b      	orrs	r3, r1
 800a5ec:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800a5f0:	6823      	ldr	r3, [r4, #0]
 800a5f2:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 800a5f6:	d011      	beq.n	800a61c <HAL_RCCEx_PeriphCLKConfig+0x440>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800a5f8:	4a56      	ldr	r2, [pc, #344]	@ (800a754 <HAL_RCCEx_PeriphCLKConfig+0x578>)
 800a5fa:	f8d2 0084 	ldr.w	r0, [r2, #132]	@ 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800a5fe:	f8d2 1084 	ldr.w	r1, [r2, #132]	@ 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800a602:	6866      	ldr	r6, [r4, #4]
 800a604:	6923      	ldr	r3, [r4, #16]
 800a606:	041b      	lsls	r3, r3, #16
 800a608:	ea43 1386 	orr.w	r3, r3, r6, lsl #6
 800a60c:	f000 6070 	and.w	r0, r0, #251658240	@ 0xf000000
 800a610:	4303      	orrs	r3, r0
 800a612:	f001 41e0 	and.w	r1, r1, #1879048192	@ 0x70000000
 800a616:	430b      	orrs	r3, r1
 800a618:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800a61c:	6823      	ldr	r3, [r4, #0]
 800a61e:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 800a622:	d00d      	beq.n	800a640 <HAL_RCCEx_PeriphCLKConfig+0x464>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800a624:	6862      	ldr	r2, [r4, #4]
 800a626:	6923      	ldr	r3, [r4, #16]
 800a628:	041b      	lsls	r3, r3, #16
 800a62a:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800a62e:	68e2      	ldr	r2, [r4, #12]
 800a630:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800a634:	68a2      	ldr	r2, [r4, #8]
 800a636:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 800a63a:	4a46      	ldr	r2, [pc, #280]	@ (800a754 <HAL_RCCEx_PeriphCLKConfig+0x578>)
 800a63c:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 800a640:	4a44      	ldr	r2, [pc, #272]	@ (800a754 <HAL_RCCEx_PeriphCLKConfig+0x578>)
 800a642:	6813      	ldr	r3, [r2, #0]
 800a644:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800a648:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800a64a:	f7fe f94f 	bl	80088ec <HAL_GetTick>
 800a64e:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800a650:	4b40      	ldr	r3, [pc, #256]	@ (800a754 <HAL_RCCEx_PeriphCLKConfig+0x578>)
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
 800a658:	f47f aef9 	bne.w	800a44e <HAL_RCCEx_PeriphCLKConfig+0x272>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800a65c:	f7fe f946 	bl	80088ec <HAL_GetTick>
 800a660:	1b80      	subs	r0, r0, r6
 800a662:	2864      	cmp	r0, #100	@ 0x64
 800a664:	d9f4      	bls.n	800a650 <HAL_RCCEx_PeriphCLKConfig+0x474>
        return HAL_TIMEOUT;
 800a666:	2003      	movs	r0, #3
 800a668:	e6f5      	b.n	800a456 <HAL_RCCEx_PeriphCLKConfig+0x27a>
    __HAL_RCC_PLLSAI_DISABLE();
 800a66a:	4a3a      	ldr	r2, [pc, #232]	@ (800a754 <HAL_RCCEx_PeriphCLKConfig+0x578>)
 800a66c:	6813      	ldr	r3, [r2, #0]
 800a66e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a672:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800a674:	f7fe f93a 	bl	80088ec <HAL_GetTick>
 800a678:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800a67a:	4b36      	ldr	r3, [pc, #216]	@ (800a754 <HAL_RCCEx_PeriphCLKConfig+0x578>)
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	f013 5f00 	tst.w	r3, #536870912	@ 0x20000000
 800a682:	d006      	beq.n	800a692 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800a684:	f7fe f932 	bl	80088ec <HAL_GetTick>
 800a688:	1b40      	subs	r0, r0, r5
 800a68a:	2864      	cmp	r0, #100	@ 0x64
 800a68c:	d9f5      	bls.n	800a67a <HAL_RCCEx_PeriphCLKConfig+0x49e>
        return HAL_TIMEOUT;
 800a68e:	2003      	movs	r0, #3
 800a690:	e6e1      	b.n	800a456 <HAL_RCCEx_PeriphCLKConfig+0x27a>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800a692:	6823      	ldr	r3, [r4, #0]
 800a694:	f413 2f00 	tst.w	r3, #524288	@ 0x80000
 800a698:	d001      	beq.n	800a69e <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 800a69a:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 800a69c:	b122      	cbz	r2, 800a6a8 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
 800a69e:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 800a6a2:	d01d      	beq.n	800a6e0 <HAL_RCCEx_PeriphCLKConfig+0x504>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800a6a4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a6a6:	b9db      	cbnz	r3, 800a6e0 <HAL_RCCEx_PeriphCLKConfig+0x504>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800a6a8:	4a2a      	ldr	r2, [pc, #168]	@ (800a754 <HAL_RCCEx_PeriphCLKConfig+0x578>)
 800a6aa:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800a6ae:	f8d2 1088 	ldr.w	r1, [r2, #136]	@ 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800a6b2:	6960      	ldr	r0, [r4, #20]
 800a6b4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800a6b8:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800a6bc:	69a0      	ldr	r0, [r4, #24]
 800a6be:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 800a6c2:	f001 41e0 	and.w	r1, r1, #1879048192	@ 0x70000000
 800a6c6:	430b      	orrs	r3, r1
 800a6c8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800a6cc:	f8d2 308c 	ldr.w	r3, [r2, #140]	@ 0x8c
 800a6d0:	f423 53f8 	bic.w	r3, r3, #7936	@ 0x1f00
 800a6d4:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 800a6d6:	3901      	subs	r1, #1
 800a6d8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800a6dc:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800a6e0:	6823      	ldr	r3, [r4, #0]
 800a6e2:	f413 1f00 	tst.w	r3, #2097152	@ 0x200000
 800a6e6:	d003      	beq.n	800a6f0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800a6e8:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
 800a6ea:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a6ee:	d035      	beq.n	800a75c <HAL_RCCEx_PeriphCLKConfig+0x580>
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800a6f0:	6823      	ldr	r3, [r4, #0]
 800a6f2:	f013 0f08 	tst.w	r3, #8
 800a6f6:	d019      	beq.n	800a72c <HAL_RCCEx_PeriphCLKConfig+0x550>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800a6f8:	4a16      	ldr	r2, [pc, #88]	@ (800a754 <HAL_RCCEx_PeriphCLKConfig+0x578>)
 800a6fa:	f8d2 1088 	ldr.w	r1, [r2, #136]	@ 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800a6fe:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800a702:	6960      	ldr	r0, [r4, #20]
 800a704:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800a708:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800a70c:	f001 6170 	and.w	r1, r1, #251658240	@ 0xf000000
 800a710:	430b      	orrs	r3, r1
 800a712:	69e1      	ldr	r1, [r4, #28]
 800a714:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 800a718:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800a71c:	f8d2 308c 	ldr.w	r3, [r2, #140]	@ 0x8c
 800a720:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 800a724:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800a726:	430b      	orrs	r3, r1
 800a728:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
    __HAL_RCC_PLLSAI_ENABLE();
 800a72c:	4a09      	ldr	r2, [pc, #36]	@ (800a754 <HAL_RCCEx_PeriphCLKConfig+0x578>)
 800a72e:	6813      	ldr	r3, [r2, #0]
 800a730:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a734:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800a736:	f7fe f8d9 	bl	80088ec <HAL_GetTick>
 800a73a:	4604      	mov	r4, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800a73c:	4b05      	ldr	r3, [pc, #20]	@ (800a754 <HAL_RCCEx_PeriphCLKConfig+0x578>)
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	f013 5f00 	tst.w	r3, #536870912	@ 0x20000000
 800a744:	d11d      	bne.n	800a782 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800a746:	f7fe f8d1 	bl	80088ec <HAL_GetTick>
 800a74a:	1b00      	subs	r0, r0, r4
 800a74c:	2864      	cmp	r0, #100	@ 0x64
 800a74e:	d9f5      	bls.n	800a73c <HAL_RCCEx_PeriphCLKConfig+0x560>
        return HAL_TIMEOUT;
 800a750:	2003      	movs	r0, #3
 800a752:	e680      	b.n	800a456 <HAL_RCCEx_PeriphCLKConfig+0x27a>
 800a754:	40023800 	.word	0x40023800
 800a758:	0ffffcff 	.word	0x0ffffcff
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800a75c:	4a0a      	ldr	r2, [pc, #40]	@ (800a788 <HAL_RCCEx_PeriphCLKConfig+0x5ac>)
 800a75e:	f8d2 0088 	ldr.w	r0, [r2, #136]	@ 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800a762:	f8d2 1088 	ldr.w	r1, [r2, #136]	@ 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800a766:	6965      	ldr	r5, [r4, #20]
 800a768:	6a23      	ldr	r3, [r4, #32]
 800a76a:	041b      	lsls	r3, r3, #16
 800a76c:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 800a770:	f000 6070 	and.w	r0, r0, #251658240	@ 0xf000000
 800a774:	4303      	orrs	r3, r0
 800a776:	f001 41e0 	and.w	r1, r1, #1879048192	@ 0x70000000
 800a77a:	430b      	orrs	r3, r1
 800a77c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 800a780:	e7b6      	b.n	800a6f0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  return HAL_OK;
 800a782:	2000      	movs	r0, #0
 800a784:	e667      	b.n	800a456 <HAL_RCCEx_PeriphCLKConfig+0x27a>
 800a786:	bf00      	nop
 800a788:	40023800 	.word	0x40023800

0800a78c <HAL_SDRAM_MspInit>:
  UNUSED(hsdram);
 
  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */ 
}
 800a78c:	4770      	bx	lr

0800a78e <HAL_SDRAM_Init>:
  if(hsdram == NULL)
 800a78e:	b1e0      	cbz	r0, 800a7ca <HAL_SDRAM_Init+0x3c>
{   
 800a790:	b538      	push	{r3, r4, r5, lr}
 800a792:	460d      	mov	r5, r1
 800a794:	4604      	mov	r4, r0
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 800a796:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 800a79a:	b18b      	cbz	r3, 800a7c0 <HAL_SDRAM_Init+0x32>
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a79c:	2302      	movs	r3, #2
 800a79e:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800a7a2:	4621      	mov	r1, r4
 800a7a4:	f851 0b04 	ldr.w	r0, [r1], #4
 800a7a8:	f000 ff62 	bl	800b670 <FMC_SDRAM_Init>
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 800a7ac:	6862      	ldr	r2, [r4, #4]
 800a7ae:	4629      	mov	r1, r5
 800a7b0:	6820      	ldr	r0, [r4, #0]
 800a7b2:	f000 ff97 	bl	800b6e4 <FMC_SDRAM_Timing_Init>
  hsdram->State = HAL_SDRAM_STATE_READY;
 800a7b6:	2301      	movs	r3, #1
 800a7b8:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
  return HAL_OK;
 800a7bc:	2000      	movs	r0, #0
}
 800a7be:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->Lock = HAL_UNLOCKED;
 800a7c0:	f880 302d 	strb.w	r3, [r0, #45]	@ 0x2d
    HAL_SDRAM_MspInit(hsdram);
 800a7c4:	f7ff ffe2 	bl	800a78c <HAL_SDRAM_MspInit>
 800a7c8:	e7e8      	b.n	800a79c <HAL_SDRAM_Init+0xe>
    return HAL_ERROR;
 800a7ca:	2001      	movs	r0, #1
}
 800a7cc:	4770      	bx	lr

0800a7ce <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800a7ce:	b538      	push	{r3, r4, r5, lr}
 800a7d0:	4604      	mov	r4, r0
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800a7d2:	f890 002c 	ldrb.w	r0, [r0, #44]	@ 0x2c
 800a7d6:	b2c0      	uxtb	r0, r0
 800a7d8:	2802      	cmp	r0, #2
 800a7da:	d00d      	beq.n	800a7f8 <HAL_SDRAM_SendCommand+0x2a>
 800a7dc:	460d      	mov	r5, r1
  {
    return HAL_BUSY;
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a7de:	2302      	movs	r3, #2
 800a7e0:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800a7e4:	6820      	ldr	r0, [r4, #0]
 800a7e6:	f000 ffd1 	bl	800b78c <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800a7ea:	682b      	ldr	r3, [r5, #0]
 800a7ec:	2b02      	cmp	r3, #2
 800a7ee:	d004      	beq.n	800a7fa <HAL_SDRAM_SendCommand+0x2c>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 800a7f0:	2301      	movs	r3, #1
 800a7f2:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
  }
  
  return HAL_OK;  
 800a7f6:	2000      	movs	r0, #0
}
 800a7f8:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800a7fa:	2305      	movs	r3, #5
 800a7fc:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
  return HAL_OK;  
 800a800:	2000      	movs	r0, #0
 800a802:	e7f9      	b.n	800a7f8 <HAL_SDRAM_SendCommand+0x2a>

0800a804 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800a804:	b510      	push	{r4, lr}
 800a806:	4604      	mov	r4, r0
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800a808:	f890 002c 	ldrb.w	r0, [r0, #44]	@ 0x2c
 800a80c:	b2c0      	uxtb	r0, r0
 800a80e:	2802      	cmp	r0, #2
 800a810:	d009      	beq.n	800a826 <HAL_SDRAM_ProgramRefreshRate+0x22>
  {
    return HAL_BUSY;
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a812:	2302      	movs	r3, #2
 800a814:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 800a818:	6820      	ldr	r0, [r4, #0]
 800a81a:	f000 ffce 	bl	800b7ba <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800a81e:	2301      	movs	r3, #1
 800a820:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
  
  return HAL_OK;   
 800a824:	2000      	movs	r0, #0
}
 800a826:	bd10      	pop	{r4, pc}

0800a828 <SPI_WaitFlagStateUntilTimeout>:
  * @param State : flag state to check
  * @param Timeout : Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State, uint32_t Timeout)
{
 800a828:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a82c:	4606      	mov	r6, r0
 800a82e:	4688      	mov	r8, r1
 800a830:	4617      	mov	r7, r2
 800a832:	461d      	mov	r5, r3
  uint32_t tickstart = HAL_GetTick();
 800a834:	f7fe f85a 	bl	80088ec <HAL_GetTick>
 800a838:	4681      	mov	r9, r0

  while((hspi->Instance->SR & Flag) != State)
 800a83a:	6834      	ldr	r4, [r6, #0]
 800a83c:	68a4      	ldr	r4, [r4, #8]
 800a83e:	ea04 0c08 	and.w	ip, r4, r8
 800a842:	45bc      	cmp	ip, r7
 800a844:	d038      	beq.n	800a8b8 <SPI_WaitFlagStateUntilTimeout+0x90>
  {
    if(Timeout != HAL_MAX_DELAY)
 800a846:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 800a84a:	d0f6      	beq.n	800a83a <SPI_WaitFlagStateUntilTimeout+0x12>
    {
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) >= Timeout))
 800a84c:	b12d      	cbz	r5, 800a85a <SPI_WaitFlagStateUntilTimeout+0x32>
 800a84e:	f7fe f84d 	bl	80088ec <HAL_GetTick>
 800a852:	eba0 0009 	sub.w	r0, r0, r9
 800a856:	42a8      	cmp	r0, r5
 800a858:	d3ef      	bcc.n	800a83a <SPI_WaitFlagStateUntilTimeout+0x12>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a85a:	6832      	ldr	r2, [r6, #0]
 800a85c:	6853      	ldr	r3, [r2, #4]
 800a85e:	f023 03e0 	bic.w	r3, r3, #224	@ 0xe0
 800a862:	6053      	str	r3, [r2, #4]

        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a864:	6873      	ldr	r3, [r6, #4]
 800a866:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a86a:	d00b      	beq.n	800a884 <SPI_WaitFlagStateUntilTimeout+0x5c>
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
        }

        /* Reset CRC Calculation */
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a86c:	6ab3      	ldr	r3, [r6, #40]	@ 0x28
 800a86e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a872:	d014      	beq.n	800a89e <SPI_WaitFlagStateUntilTimeout+0x76>
        {
          SPI_RESET_CRC(hspi);
        }
        
        hspi->State= HAL_SPI_STATE_READY;
 800a874:	2301      	movs	r3, #1
 800a876:	f886 305d 	strb.w	r3, [r6, #93]	@ 0x5d
        
        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a87a:	2300      	movs	r3, #0
 800a87c:	f886 305c 	strb.w	r3, [r6, #92]	@ 0x5c
        
        return HAL_TIMEOUT;
 800a880:	2003      	movs	r0, #3
 800a882:	e01a      	b.n	800a8ba <SPI_WaitFlagStateUntilTimeout+0x92>
        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a884:	68b3      	ldr	r3, [r6, #8]
 800a886:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a88a:	bf18      	it	ne
 800a88c:	f5b3 4f00 	cmpne.w	r3, #32768	@ 0x8000
 800a890:	d1ec      	bne.n	800a86c <SPI_WaitFlagStateUntilTimeout+0x44>
          __HAL_SPI_DISABLE(hspi);
 800a892:	6832      	ldr	r2, [r6, #0]
 800a894:	6813      	ldr	r3, [r2, #0]
 800a896:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a89a:	6013      	str	r3, [r2, #0]
 800a89c:	e7e6      	b.n	800a86c <SPI_WaitFlagStateUntilTimeout+0x44>
          SPI_RESET_CRC(hspi);
 800a89e:	6832      	ldr	r2, [r6, #0]
 800a8a0:	6813      	ldr	r3, [r2, #0]
 800a8a2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a8a6:	041b      	lsls	r3, r3, #16
 800a8a8:	0c1b      	lsrs	r3, r3, #16
 800a8aa:	6013      	str	r3, [r2, #0]
 800a8ac:	6832      	ldr	r2, [r6, #0]
 800a8ae:	6813      	ldr	r3, [r2, #0]
 800a8b0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800a8b4:	6013      	str	r3, [r2, #0]
 800a8b6:	e7dd      	b.n	800a874 <SPI_WaitFlagStateUntilTimeout+0x4c>
      }
    }
  }
  
  return HAL_OK;      
 800a8b8:	2000      	movs	r0, #0
}
 800a8ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800a8be <SPI_WaitFifoStateUntilTimeout>:
  * @param State : Fifo state to check
  * @param Timeout : Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State, uint32_t Timeout)
{
 800a8be:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a8c2:	b082      	sub	sp, #8
 800a8c4:	4681      	mov	r9, r0
 800a8c6:	460f      	mov	r7, r1
 800a8c8:	4616      	mov	r6, r2
 800a8ca:	4698      	mov	r8, r3
  __IO uint8_t tmpreg;
  uint32_t tickstart = HAL_GetTick();
 800a8cc:	f7fe f80e 	bl	80088ec <HAL_GetTick>
 800a8d0:	4682      	mov	sl, r0

  while((hspi->Instance->SR & Fifo) != State)
 800a8d2:	e002      	b.n	800a8da <SPI_WaitFifoStateUntilTimeout+0x1c>
    {
      tmpreg = *((__IO uint8_t*)&hspi->Instance->DR);
      UNUSED(tmpreg); /* To avoid GCC warning */
    }

    if(Timeout != HAL_MAX_DELAY)
 800a8d4:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 800a8d8:	d112      	bne.n	800a900 <SPI_WaitFifoStateUntilTimeout+0x42>
  while((hspi->Instance->SR & Fifo) != State)
 800a8da:	f8d9 5000 	ldr.w	r5, [r9]
 800a8de:	68ac      	ldr	r4, [r5, #8]
 800a8e0:	ea04 0c07 	and.w	ip, r4, r7
 800a8e4:	45b4      	cmp	ip, r6
 800a8e6:	d04a      	beq.n	800a97e <SPI_WaitFifoStateUntilTimeout+0xc0>
    if((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800a8e8:	f5b7 6fc0 	cmp.w	r7, #1536	@ 0x600
 800a8ec:	bf08      	it	eq
 800a8ee:	2e00      	cmpeq	r6, #0
 800a8f0:	d1f0      	bne.n	800a8d4 <SPI_WaitFifoStateUntilTimeout+0x16>
      tmpreg = *((__IO uint8_t*)&hspi->Instance->DR);
 800a8f2:	7b2b      	ldrb	r3, [r5, #12]
 800a8f4:	b2db      	uxtb	r3, r3
 800a8f6:	f88d 3007 	strb.w	r3, [sp, #7]
      UNUSED(tmpreg); /* To avoid GCC warning */
 800a8fa:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800a8fe:	e7e9      	b.n	800a8d4 <SPI_WaitFifoStateUntilTimeout+0x16>
    {
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) >= Timeout))
 800a900:	f1b8 0f00 	cmp.w	r8, #0
 800a904:	d005      	beq.n	800a912 <SPI_WaitFifoStateUntilTimeout+0x54>
 800a906:	f7fd fff1 	bl	80088ec <HAL_GetTick>
 800a90a:	eba0 000a 	sub.w	r0, r0, sl
 800a90e:	4540      	cmp	r0, r8
 800a910:	d3e3      	bcc.n	800a8da <SPI_WaitFifoStateUntilTimeout+0x1c>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
                  on both master and slave sides in order to resynchronize the master
                 and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a912:	f8d9 2000 	ldr.w	r2, [r9]
 800a916:	6853      	ldr	r3, [r2, #4]
 800a918:	f023 03e0 	bic.w	r3, r3, #224	@ 0xe0
 800a91c:	6053      	str	r3, [r2, #4]

        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a91e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800a922:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a926:	d00c      	beq.n	800a942 <SPI_WaitFifoStateUntilTimeout+0x84>
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
        }

        /* Reset CRC Calculation */
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a928:	f8d9 3028 	ldr.w	r3, [r9, #40]	@ 0x28
 800a92c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a930:	d016      	beq.n	800a960 <SPI_WaitFifoStateUntilTimeout+0xa2>
        {
          SPI_RESET_CRC(hspi);
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a932:	2301      	movs	r3, #1
 800a934:	f889 305d 	strb.w	r3, [r9, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a938:	2300      	movs	r3, #0
 800a93a:	f889 305c 	strb.w	r3, [r9, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800a93e:	2003      	movs	r0, #3
 800a940:	e01e      	b.n	800a980 <SPI_WaitFifoStateUntilTimeout+0xc2>
        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a942:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800a946:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a94a:	bf18      	it	ne
 800a94c:	f5b3 4f00 	cmpne.w	r3, #32768	@ 0x8000
 800a950:	d1ea      	bne.n	800a928 <SPI_WaitFifoStateUntilTimeout+0x6a>
          __HAL_SPI_DISABLE(hspi);
 800a952:	f8d9 2000 	ldr.w	r2, [r9]
 800a956:	6813      	ldr	r3, [r2, #0]
 800a958:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a95c:	6013      	str	r3, [r2, #0]
 800a95e:	e7e3      	b.n	800a928 <SPI_WaitFifoStateUntilTimeout+0x6a>
          SPI_RESET_CRC(hspi);
 800a960:	f8d9 2000 	ldr.w	r2, [r9]
 800a964:	6813      	ldr	r3, [r2, #0]
 800a966:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a96a:	041b      	lsls	r3, r3, #16
 800a96c:	0c1b      	lsrs	r3, r3, #16
 800a96e:	6013      	str	r3, [r2, #0]
 800a970:	f8d9 2000 	ldr.w	r2, [r9]
 800a974:	6813      	ldr	r3, [r2, #0]
 800a976:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800a97a:	6013      	str	r3, [r2, #0]
 800a97c:	e7d9      	b.n	800a932 <SPI_WaitFifoStateUntilTimeout+0x74>
      }
    }
  }

  return HAL_OK;
 800a97e:	2000      	movs	r0, #0
}
 800a980:	b002      	add	sp, #8
 800a982:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800a986 <SPI_EndRxTxTransaction>:
  * @brief This function handles the check of the RXTX or TX transaction complete.
  * @param hspi: SPI handle
  * @param Timeout : Timeout duration
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout)
{
 800a986:	b538      	push	{r3, r4, r5, lr}
 800a988:	4604      	mov	r4, r0
 800a98a:	460d      	mov	r5, r1
  /* Procedure to check the transaction complete */
  if(SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout) != HAL_OK)
 800a98c:	460b      	mov	r3, r1
 800a98e:	2200      	movs	r2, #0
 800a990:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800a994:	f7ff ff93 	bl	800a8be <SPI_WaitFifoStateUntilTimeout>
 800a998:	b9a0      	cbnz	r0, 800a9c4 <SPI_EndRxTxTransaction+0x3e>
  {
    hspi->ErrorCode |= HAL_SPI_ERROR_FLAG;
    return HAL_TIMEOUT;
  }
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout) != HAL_OK)
 800a99a:	462b      	mov	r3, r5
 800a99c:	2200      	movs	r2, #0
 800a99e:	2180      	movs	r1, #128	@ 0x80
 800a9a0:	4620      	mov	r0, r4
 800a9a2:	f7ff ff41 	bl	800a828 <SPI_WaitFlagStateUntilTimeout>
 800a9a6:	b998      	cbnz	r0, 800a9d0 <SPI_EndRxTxTransaction+0x4a>
  {
    hspi->ErrorCode |= HAL_SPI_ERROR_FLAG;
    return HAL_TIMEOUT;
  }
  if(SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout) != HAL_OK)
 800a9a8:	462b      	mov	r3, r5
 800a9aa:	2200      	movs	r2, #0
 800a9ac:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800a9b0:	4620      	mov	r0, r4
 800a9b2:	f7ff ff84 	bl	800a8be <SPI_WaitFifoStateUntilTimeout>
 800a9b6:	b150      	cbz	r0, 800a9ce <SPI_EndRxTxTransaction+0x48>
  {
    hspi->ErrorCode |= HAL_SPI_ERROR_FLAG;
 800a9b8:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 800a9ba:	f043 0320 	orr.w	r3, r3, #32
 800a9be:	6623      	str	r3, [r4, #96]	@ 0x60
    return HAL_TIMEOUT;
 800a9c0:	2003      	movs	r0, #3
 800a9c2:	e004      	b.n	800a9ce <SPI_EndRxTxTransaction+0x48>
    hspi->ErrorCode |= HAL_SPI_ERROR_FLAG;
 800a9c4:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 800a9c6:	f043 0320 	orr.w	r3, r3, #32
 800a9ca:	6623      	str	r3, [r4, #96]	@ 0x60
    return HAL_TIMEOUT;
 800a9cc:	2003      	movs	r0, #3
  }
  return HAL_OK;
}
 800a9ce:	bd38      	pop	{r3, r4, r5, pc}
    hspi->ErrorCode |= HAL_SPI_ERROR_FLAG;
 800a9d0:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 800a9d2:	f043 0320 	orr.w	r3, r3, #32
 800a9d6:	6623      	str	r3, [r4, #96]	@ 0x60
    return HAL_TIMEOUT;
 800a9d8:	2003      	movs	r0, #3
 800a9da:	e7f8      	b.n	800a9ce <SPI_EndRxTxTransaction+0x48>

0800a9dc <HAL_SPI_Init>:
  if(hspi == NULL)
 800a9dc:	2800      	cmp	r0, #0
 800a9de:	d05d      	beq.n	800aa9c <HAL_SPI_Init+0xc0>
{
 800a9e0:	b510      	push	{r4, lr}
 800a9e2:	4604      	mov	r4, r0
  if(hspi->State == HAL_SPI_STATE_RESET)
 800a9e4:	f890 305d 	ldrb.w	r3, [r0, #93]	@ 0x5d
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d046      	beq.n	800aa7a <HAL_SPI_Init+0x9e>
  hspi->State = HAL_SPI_STATE_BUSY;
 800a9ec:	2302      	movs	r3, #2
 800a9ee:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
  __HAL_SPI_DISABLE(hspi);
 800a9f2:	6822      	ldr	r2, [r4, #0]
 800a9f4:	6813      	ldr	r3, [r2, #0]
 800a9f6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a9fa:	6013      	str	r3, [r2, #0]
  if(hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a9fc:	68e3      	ldr	r3, [r4, #12]
 800a9fe:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800aa02:	d93f      	bls.n	800aa84 <HAL_SPI_Init+0xa8>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800aa04:	2200      	movs	r2, #0
  if(( hspi->Init.DataSize != SPI_DATASIZE_16BIT ) && ( hspi->Init.DataSize != SPI_DATASIZE_8BIT ))
 800aa06:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800aa0a:	bf18      	it	ne
 800aa0c:	f5b3 6fe0 	cmpne.w	r3, #1792	@ 0x700
 800aa10:	d001      	beq.n	800aa16 <HAL_SPI_Init+0x3a>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800aa12:	2100      	movs	r1, #0
 800aa14:	62a1      	str	r1, [r4, #40]	@ 0x28
  if( hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800aa16:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800aa18:	b921      	cbnz	r1, 800aa24 <HAL_SPI_Init+0x48>
    if(hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800aa1a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800aa1e:	d934      	bls.n	800aa8a <HAL_SPI_Init+0xae>
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800aa20:	2302      	movs	r3, #2
 800aa22:	6323      	str	r3, [r4, #48]	@ 0x30
  hspi->Instance->CR1 = (hspi->Init.Mode | hspi->Init.Direction |
 800aa24:	6863      	ldr	r3, [r4, #4]
 800aa26:	68a1      	ldr	r1, [r4, #8]
 800aa28:	430b      	orrs	r3, r1
                         hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
 800aa2a:	6921      	ldr	r1, [r4, #16]
  hspi->Instance->CR1 = (hspi->Init.Mode | hspi->Init.Direction |
 800aa2c:	430b      	orrs	r3, r1
                         hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
 800aa2e:	6961      	ldr	r1, [r4, #20]
 800aa30:	430b      	orrs	r3, r1
 800aa32:	69a1      	ldr	r1, [r4, #24]
 800aa34:	f401 7100 	and.w	r1, r1, #512	@ 0x200
 800aa38:	430b      	orrs	r3, r1
                         hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation);
 800aa3a:	69e1      	ldr	r1, [r4, #28]
                         hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
 800aa3c:	430b      	orrs	r3, r1
                         hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation);
 800aa3e:	6a21      	ldr	r1, [r4, #32]
 800aa40:	430b      	orrs	r3, r1
 800aa42:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
  hspi->Instance->CR1 = (hspi->Init.Mode | hspi->Init.Direction |
 800aa44:	6821      	ldr	r1, [r4, #0]
                         hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation);
 800aa46:	4303      	orrs	r3, r0
  hspi->Instance->CR1 = (hspi->Init.Mode | hspi->Init.Direction |
 800aa48:	600b      	str	r3, [r1, #0]
  if( hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 800aa4a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800aa4c:	2b02      	cmp	r3, #2
 800aa4e:	d01f      	beq.n	800aa90 <HAL_SPI_Init+0xb4>
  hspi->Instance->CR2 = (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode | hspi->Init.NSSPMode |
 800aa50:	8b63      	ldrh	r3, [r4, #26]
 800aa52:	f003 0304 	and.w	r3, r3, #4
 800aa56:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800aa58:	430b      	orrs	r3, r1
 800aa5a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800aa5c:	430b      	orrs	r3, r1
                         hspi->Init.DataSize ) | frxth;
 800aa5e:	68e1      	ldr	r1, [r4, #12]
  hspi->Instance->CR2 = (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode | hspi->Init.NSSPMode |
 800aa60:	430b      	orrs	r3, r1
 800aa62:	6821      	ldr	r1, [r4, #0]
                         hspi->Init.DataSize ) | frxth;
 800aa64:	4313      	orrs	r3, r2
  hspi->Instance->CR2 = (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode | hspi->Init.NSSPMode |
 800aa66:	604b      	str	r3, [r1, #4]
  hspi->Instance->CRCPR = hspi->Init.CRCPolynomial;
 800aa68:	6823      	ldr	r3, [r4, #0]
 800aa6a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800aa6c:	611a      	str	r2, [r3, #16]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800aa6e:	2000      	movs	r0, #0
 800aa70:	6620      	str	r0, [r4, #96]	@ 0x60
  hspi->State= HAL_SPI_STATE_READY;
 800aa72:	2301      	movs	r3, #1
 800aa74:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
}
 800aa78:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 800aa7a:	f880 305c 	strb.w	r3, [r0, #92]	@ 0x5c
    HAL_SPI_MspInit(hspi);
 800aa7e:	f004 fe8f 	bl	800f7a0 <HAL_SPI_MspInit>
 800aa82:	e7b3      	b.n	800a9ec <HAL_SPI_Init+0x10>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800aa84:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800aa88:	e7bd      	b.n	800aa06 <HAL_SPI_Init+0x2a>
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800aa8a:	2301      	movs	r3, #1
 800aa8c:	6323      	str	r3, [r4, #48]	@ 0x30
 800aa8e:	e7c9      	b.n	800aa24 <HAL_SPI_Init+0x48>
    hspi->Instance->CR1|= SPI_CR1_CRCL;
 800aa90:	6821      	ldr	r1, [r4, #0]
 800aa92:	680b      	ldr	r3, [r1, #0]
 800aa94:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800aa98:	600b      	str	r3, [r1, #0]
 800aa9a:	e7d9      	b.n	800aa50 <HAL_SPI_Init+0x74>
    return HAL_ERROR;
 800aa9c:	2001      	movs	r0, #1
}
 800aa9e:	4770      	bx	lr

0800aaa0 <HAL_SPI_Transmit>:
{
 800aaa0:	b570      	push	{r4, r5, r6, lr}
 800aaa2:	b082      	sub	sp, #8
 800aaa4:	461d      	mov	r5, r3
  __HAL_LOCK(hspi);
 800aaa6:	f890 305c 	ldrb.w	r3, [r0, #92]	@ 0x5c
 800aaaa:	2b01      	cmp	r3, #1
 800aaac:	f000 80c1 	beq.w	800ac32 <HAL_SPI_Transmit+0x192>
 800aab0:	4604      	mov	r4, r0
 800aab2:	2301      	movs	r3, #1
 800aab4:	f880 305c 	strb.w	r3, [r0, #92]	@ 0x5c
  if(hspi->State != HAL_SPI_STATE_READY)
 800aab8:	f890 605d 	ldrb.w	r6, [r0, #93]	@ 0x5d
 800aabc:	429e      	cmp	r6, r3
 800aabe:	d13a      	bne.n	800ab36 <HAL_SPI_Transmit+0x96>
  if((pData == NULL ) || (Size == 0))
 800aac0:	2a00      	cmp	r2, #0
 800aac2:	bf18      	it	ne
 800aac4:	2900      	cmpne	r1, #0
 800aac6:	d03f      	beq.n	800ab48 <HAL_SPI_Transmit+0xa8>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800aac8:	2303      	movs	r3, #3
 800aaca:	f880 305d 	strb.w	r3, [r0, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800aace:	2300      	movs	r3, #0
 800aad0:	6603      	str	r3, [r0, #96]	@ 0x60
  hspi->pTxBuffPtr  = pData;
 800aad2:	6381      	str	r1, [r0, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800aad4:	8782      	strh	r2, [r0, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800aad6:	87c2      	strh	r2, [r0, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800aad8:	6403      	str	r3, [r0, #64]	@ 0x40
  hspi->RxXferSize  = 0;
 800aada:	f8a0 3044 	strh.w	r3, [r0, #68]	@ 0x44
  hspi->RxXferCount = 0;
 800aade:	f8a0 3046 	strh.w	r3, [r0, #70]	@ 0x46
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800aae2:	6883      	ldr	r3, [r0, #8]
 800aae4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800aae8:	d035      	beq.n	800ab56 <HAL_SPI_Transmit+0xb6>
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800aaea:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800aaec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800aaf0:	d037      	beq.n	800ab62 <HAL_SPI_Transmit+0xc2>
  if((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800aaf2:	6823      	ldr	r3, [r4, #0]
 800aaf4:	681a      	ldr	r2, [r3, #0]
 800aaf6:	f012 0f40 	tst.w	r2, #64	@ 0x40
 800aafa:	d103      	bne.n	800ab04 <HAL_SPI_Transmit+0x64>
    __HAL_SPI_ENABLE(hspi);
 800aafc:	681a      	ldr	r2, [r3, #0]
 800aafe:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ab02:	601a      	str	r2, [r3, #0]
  if(hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ab04:	68e3      	ldr	r3, [r4, #12]
 800ab06:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800ab0a:	d949      	bls.n	800aba0 <HAL_SPI_Transmit+0x100>
    while (hspi->TxXferCount > 0)
 800ab0c:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d06c      	beq.n	800abec <HAL_SPI_Transmit+0x14c>
      if(SPI_WaitFlagStateUntilTimeout(hspi,SPI_FLAG_TXE,SPI_FLAG_TXE,Timeout) != HAL_OK)
 800ab12:	462b      	mov	r3, r5
 800ab14:	2202      	movs	r2, #2
 800ab16:	4611      	mov	r1, r2
 800ab18:	4620      	mov	r0, r4
 800ab1a:	f7ff fe85 	bl	800a828 <SPI_WaitFlagStateUntilTimeout>
 800ab1e:	bb68      	cbnz	r0, 800ab7c <HAL_SPI_Transmit+0xdc>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ab20:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800ab22:	6823      	ldr	r3, [r4, #0]
 800ab24:	8812      	ldrh	r2, [r2, #0]
 800ab26:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800ab28:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800ab2a:	3302      	adds	r3, #2
 800ab2c:	63a3      	str	r3, [r4, #56]	@ 0x38
      hspi->TxXferCount--;
 800ab2e:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800ab30:	3b01      	subs	r3, #1
 800ab32:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 800ab34:	e7ea      	b.n	800ab0c <HAL_SPI_Transmit+0x6c>
    hspi->State = HAL_SPI_STATE_READY;
 800ab36:	f880 305d 	strb.w	r3, [r0, #93]	@ 0x5d
   __HAL_UNLOCK(hspi);
 800ab3a:	2300      	movs	r3, #0
 800ab3c:	f880 305c 	strb.w	r3, [r0, #92]	@ 0x5c
   return HAL_BUSY;
 800ab40:	2602      	movs	r6, #2
}
 800ab42:	4630      	mov	r0, r6
 800ab44:	b002      	add	sp, #8
 800ab46:	bd70      	pop	{r4, r5, r6, pc}
    hspi->State = HAL_SPI_STATE_READY;
 800ab48:	2301      	movs	r3, #1
 800ab4a:	f880 305d 	strb.w	r3, [r0, #93]	@ 0x5d
   __HAL_UNLOCK(hspi);
 800ab4e:	2300      	movs	r3, #0
 800ab50:	f880 305c 	strb.w	r3, [r0, #92]	@ 0x5c
    return HAL_ERROR;
 800ab54:	e7f5      	b.n	800ab42 <HAL_SPI_Transmit+0xa2>
    SPI_1LINE_TX(hspi);
 800ab56:	6802      	ldr	r2, [r0, #0]
 800ab58:	6813      	ldr	r3, [r2, #0]
 800ab5a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800ab5e:	6013      	str	r3, [r2, #0]
 800ab60:	e7c3      	b.n	800aaea <HAL_SPI_Transmit+0x4a>
    SPI_RESET_CRC(hspi);
 800ab62:	6822      	ldr	r2, [r4, #0]
 800ab64:	6813      	ldr	r3, [r2, #0]
 800ab66:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800ab6a:	041b      	lsls	r3, r3, #16
 800ab6c:	0c1b      	lsrs	r3, r3, #16
 800ab6e:	6013      	str	r3, [r2, #0]
 800ab70:	6822      	ldr	r2, [r4, #0]
 800ab72:	6813      	ldr	r3, [r2, #0]
 800ab74:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800ab78:	6013      	str	r3, [r2, #0]
 800ab7a:	e7ba      	b.n	800aaf2 <HAL_SPI_Transmit+0x52>
        hspi->State = HAL_SPI_STATE_READY;
 800ab7c:	2301      	movs	r3, #1
 800ab7e:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
       __HAL_UNLOCK(hspi);
 800ab82:	2300      	movs	r3, #0
 800ab84:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
        return HAL_TIMEOUT;
 800ab88:	2603      	movs	r6, #3
 800ab8a:	e7da      	b.n	800ab42 <HAL_SPI_Transmit+0xa2>
        hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
 800ab8c:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800ab8e:	6823      	ldr	r3, [r4, #0]
 800ab90:	8812      	ldrh	r2, [r2, #0]
 800ab92:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800ab94:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800ab96:	3302      	adds	r3, #2
 800ab98:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->TxXferCount -= 2;
 800ab9a:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800ab9c:	3b02      	subs	r3, #2
 800ab9e:	87e3      	strh	r3, [r4, #62]	@ 0x3e
    while (hspi->TxXferCount > 0)
 800aba0:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 800aba2:	b31a      	cbz	r2, 800abec <HAL_SPI_Transmit+0x14c>
      if(hspi->TxXferCount != 0x1)
 800aba4:	2a01      	cmp	r2, #1
 800aba6:	d00f      	beq.n	800abc8 <HAL_SPI_Transmit+0x128>
        if(SPI_WaitFlagStateUntilTimeout(hspi,SPI_FLAG_TXE,SPI_FLAG_TXE,Timeout) != HAL_OK)
 800aba8:	462b      	mov	r3, r5
 800abaa:	2202      	movs	r2, #2
 800abac:	4611      	mov	r1, r2
 800abae:	4620      	mov	r0, r4
 800abb0:	f7ff fe3a 	bl	800a828 <SPI_WaitFlagStateUntilTimeout>
 800abb4:	2800      	cmp	r0, #0
 800abb6:	d0e9      	beq.n	800ab8c <HAL_SPI_Transmit+0xec>
          hspi->State = HAL_SPI_STATE_READY;
 800abb8:	2301      	movs	r3, #1
 800abba:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800abbe:	2300      	movs	r3, #0
 800abc0:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800abc4:	2603      	movs	r6, #3
 800abc6:	e7bc      	b.n	800ab42 <HAL_SPI_Transmit+0xa2>
        if(SPI_WaitFlagStateUntilTimeout(hspi,SPI_FLAG_TXE,SPI_FLAG_TXE,Timeout) != HAL_OK)  
 800abc8:	462b      	mov	r3, r5
 800abca:	2202      	movs	r2, #2
 800abcc:	4611      	mov	r1, r2
 800abce:	4620      	mov	r0, r4
 800abd0:	f7ff fe2a 	bl	800a828 <SPI_WaitFlagStateUntilTimeout>
 800abd4:	2800      	cmp	r0, #0
 800abd6:	d12e      	bne.n	800ac36 <HAL_SPI_Transmit+0x196>
        *((__IO uint8_t*)&hspi->Instance->DR) = (*hspi->pTxBuffPtr++);
 800abd8:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800abda:	1c5a      	adds	r2, r3, #1
 800abdc:	63a2      	str	r2, [r4, #56]	@ 0x38
 800abde:	6822      	ldr	r2, [r4, #0]
 800abe0:	781b      	ldrb	r3, [r3, #0]
 800abe2:	7313      	strb	r3, [r2, #12]
        hspi->TxXferCount--;    
 800abe4:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800abe6:	3b01      	subs	r3, #1
 800abe8:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 800abea:	e7d9      	b.n	800aba0 <HAL_SPI_Transmit+0x100>
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800abec:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800abee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800abf2:	d018      	beq.n	800ac26 <HAL_SPI_Transmit+0x186>
  if(SPI_EndRxTxTransaction(hspi,Timeout) != HAL_OK)
 800abf4:	4629      	mov	r1, r5
 800abf6:	4620      	mov	r0, r4
 800abf8:	f7ff fec5 	bl	800a986 <SPI_EndRxTxTransaction>
 800abfc:	4602      	mov	r2, r0
 800abfe:	b9e0      	cbnz	r0, 800ac3a <HAL_SPI_Transmit+0x19a>
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800ac00:	68a3      	ldr	r3, [r4, #8]
 800ac02:	b92b      	cbnz	r3, 800ac10 <HAL_SPI_Transmit+0x170>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ac04:	6823      	ldr	r3, [r4, #0]
 800ac06:	68d9      	ldr	r1, [r3, #12]
 800ac08:	9101      	str	r1, [sp, #4]
 800ac0a:	689b      	ldr	r3, [r3, #8]
 800ac0c:	9301      	str	r3, [sp, #4]
 800ac0e:	9b01      	ldr	r3, [sp, #4]
  hspi->State = HAL_SPI_STATE_READY; 
 800ac10:	2301      	movs	r3, #1
 800ac12:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
  __HAL_UNLOCK(hspi);
 800ac16:	2300      	movs	r3, #0
 800ac18:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
  if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ac1c:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d18f      	bne.n	800ab42 <HAL_SPI_Transmit+0xa2>
    return HAL_OK;
 800ac22:	4616      	mov	r6, r2
 800ac24:	e78d      	b.n	800ab42 <HAL_SPI_Transmit+0xa2>
     hspi->Instance->CR1|= SPI_CR1_CRCNEXT;
 800ac26:	6822      	ldr	r2, [r4, #0]
 800ac28:	6813      	ldr	r3, [r2, #0]
 800ac2a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800ac2e:	6013      	str	r3, [r2, #0]
 800ac30:	e7e0      	b.n	800abf4 <HAL_SPI_Transmit+0x154>
  __HAL_LOCK(hspi);
 800ac32:	2602      	movs	r6, #2
 800ac34:	e785      	b.n	800ab42 <HAL_SPI_Transmit+0xa2>
          return HAL_TIMEOUT;
 800ac36:	2603      	movs	r6, #3
 800ac38:	e783      	b.n	800ab42 <HAL_SPI_Transmit+0xa2>
    return HAL_TIMEOUT;
 800ac3a:	2603      	movs	r6, #3
 800ac3c:	e781      	b.n	800ab42 <HAL_SPI_Transmit+0xa2>

0800ac3e <HAL_SPI_TransmitReceive>:
{
 800ac3e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac42:	b082      	sub	sp, #8
 800ac44:	4604      	mov	r4, r0
 800ac46:	4689      	mov	r9, r1
 800ac48:	4692      	mov	sl, r2
 800ac4a:	4698      	mov	r8, r3
 800ac4c:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
  __IO uint16_t tmpreg = 0;
 800ac4e:	2300      	movs	r3, #0
 800ac50:	f8ad 3006 	strh.w	r3, [sp, #6]
  uint32_t tickstart = HAL_GetTick();
 800ac54:	f7fd fe4a 	bl	80088ec <HAL_GetTick>
  if(hspi->State != HAL_SPI_STATE_READY) 
 800ac58:	f894 605d 	ldrb.w	r6, [r4, #93]	@ 0x5d
 800ac5c:	2e01      	cmp	r6, #1
 800ac5e:	f040 815e 	bne.w	800af1e <HAL_SPI_TransmitReceive+0x2e0>
 800ac62:	4607      	mov	r7, r0
  if((pTxData == NULL) || (pRxData == NULL) || (Size == 0))
 800ac64:	f1ba 0f00 	cmp.w	sl, #0
 800ac68:	bf18      	it	ne
 800ac6a:	f1b9 0f00 	cmpne.w	r9, #0
 800ac6e:	f000 8157 	beq.w	800af20 <HAL_SPI_TransmitReceive+0x2e2>
 800ac72:	f1b8 0f00 	cmp.w	r8, #0
 800ac76:	f000 8153 	beq.w	800af20 <HAL_SPI_TransmitReceive+0x2e2>
  __HAL_LOCK(hspi); 
 800ac7a:	f894 305c 	ldrb.w	r3, [r4, #92]	@ 0x5c
 800ac7e:	2b01      	cmp	r3, #1
 800ac80:	f000 8152 	beq.w	800af28 <HAL_SPI_TransmitReceive+0x2ea>
 800ac84:	2301      	movs	r3, #1
 800ac86:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 800ac8a:	2305      	movs	r3, #5
 800ac8c:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ac90:	2300      	movs	r3, #0
 800ac92:	6623      	str	r3, [r4, #96]	@ 0x60
  hspi->pRxBuffPtr  = pRxData;
 800ac94:	f8c4 a040 	str.w	sl, [r4, #64]	@ 0x40
  hspi->RxXferCount = Size;
 800ac98:	f8a4 8046 	strh.w	r8, [r4, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 800ac9c:	f8a4 8044 	strh.w	r8, [r4, #68]	@ 0x44
  hspi->pTxBuffPtr  = pTxData;
 800aca0:	f8c4 9038 	str.w	r9, [r4, #56]	@ 0x38
  hspi->TxXferCount = Size;
 800aca4:	f8a4 803e 	strh.w	r8, [r4, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 800aca8:	f8a4 803c 	strh.w	r8, [r4, #60]	@ 0x3c
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800acac:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800acae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800acb2:	d01a      	beq.n	800acea <HAL_SPI_TransmitReceive+0xac>
  if((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (hspi->RxXferCount > 1))
 800acb4:	68e3      	ldr	r3, [r4, #12]
 800acb6:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800acba:	d803      	bhi.n	800acc4 <HAL_SPI_TransmitReceive+0x86>
 800acbc:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 800acc0:	2b01      	cmp	r3, #1
 800acc2:	d91f      	bls.n	800ad04 <HAL_SPI_TransmitReceive+0xc6>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800acc4:	6822      	ldr	r2, [r4, #0]
 800acc6:	6853      	ldr	r3, [r2, #4]
 800acc8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800accc:	6053      	str	r3, [r2, #4]
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 800acce:	6823      	ldr	r3, [r4, #0]
 800acd0:	681a      	ldr	r2, [r3, #0]
 800acd2:	f012 0f40 	tst.w	r2, #64	@ 0x40
 800acd6:	d103      	bne.n	800ace0 <HAL_SPI_TransmitReceive+0xa2>
    __HAL_SPI_ENABLE(hspi);
 800acd8:	681a      	ldr	r2, [r3, #0]
 800acda:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800acde:	601a      	str	r2, [r3, #0]
  if(hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ace0:	68e3      	ldr	r3, [r4, #12]
 800ace2:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800ace6:	d829      	bhi.n	800ad3c <HAL_SPI_TransmitReceive+0xfe>
 800ace8:	e076      	b.n	800add8 <HAL_SPI_TransmitReceive+0x19a>
    SPI_RESET_CRC(hspi);
 800acea:	6822      	ldr	r2, [r4, #0]
 800acec:	6813      	ldr	r3, [r2, #0]
 800acee:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800acf2:	041b      	lsls	r3, r3, #16
 800acf4:	0c1b      	lsrs	r3, r3, #16
 800acf6:	6013      	str	r3, [r2, #0]
 800acf8:	6822      	ldr	r2, [r4, #0]
 800acfa:	6813      	ldr	r3, [r2, #0]
 800acfc:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800ad00:	6013      	str	r3, [r2, #0]
 800ad02:	e7d7      	b.n	800acb4 <HAL_SPI_TransmitReceive+0x76>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800ad04:	6822      	ldr	r2, [r4, #0]
 800ad06:	6853      	ldr	r3, [r2, #4]
 800ad08:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800ad0c:	6053      	str	r3, [r2, #4]
 800ad0e:	e7de      	b.n	800acce <HAL_SPI_TransmitReceive+0x90>
      if((hspi->RxXferCount > 0) && ((hspi->Instance->SR & SPI_FLAG_RXNE) == SPI_FLAG_RXNE))
 800ad10:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 800ad14:	b17b      	cbz	r3, 800ad36 <HAL_SPI_TransmitReceive+0xf8>
 800ad16:	6823      	ldr	r3, [r4, #0]
 800ad18:	689a      	ldr	r2, [r3, #8]
 800ad1a:	f012 0f01 	tst.w	r2, #1
 800ad1e:	d00a      	beq.n	800ad36 <HAL_SPI_TransmitReceive+0xf8>
        *((uint16_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800ad20:	68da      	ldr	r2, [r3, #12]
 800ad22:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ad24:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800ad26:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ad28:	3302      	adds	r3, #2
 800ad2a:	6423      	str	r3, [r4, #64]	@ 0x40
        hspi->RxXferCount--;
 800ad2c:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 800ad30:	3b01      	subs	r3, #1
 800ad32:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
      if(Timeout != HAL_MAX_DELAY)
 800ad36:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 800ad3a:	d123      	bne.n	800ad84 <HAL_SPI_TransmitReceive+0x146>
    while ((hspi->TxXferCount > 0 ) || (hspi->RxXferCount > 0))
 800ad3c:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800ad3e:	b923      	cbnz	r3, 800ad4a <HAL_SPI_TransmitReceive+0x10c>
 800ad40:	f8b4 2046 	ldrh.w	r2, [r4, #70]	@ 0x46
 800ad44:	2a00      	cmp	r2, #0
 800ad46:	f000 8091 	beq.w	800ae6c <HAL_SPI_TransmitReceive+0x22e>
      if((hspi->TxXferCount > 0) && ((hspi->Instance->SR & SPI_FLAG_TXE) == SPI_FLAG_TXE))
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d0e0      	beq.n	800ad10 <HAL_SPI_TransmitReceive+0xd2>
 800ad4e:	6823      	ldr	r3, [r4, #0]
 800ad50:	689a      	ldr	r2, [r3, #8]
 800ad52:	f012 0f02 	tst.w	r2, #2
 800ad56:	d0db      	beq.n	800ad10 <HAL_SPI_TransmitReceive+0xd2>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ad58:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800ad5a:	8812      	ldrh	r2, [r2, #0]
 800ad5c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800ad5e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800ad60:	3302      	adds	r3, #2
 800ad62:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 800ad64:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800ad66:	3b01      	subs	r3, #1
 800ad68:	b29b      	uxth	r3, r3
 800ad6a:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        if((hspi->TxXferCount == 0) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d1cf      	bne.n	800ad10 <HAL_SPI_TransmitReceive+0xd2>
 800ad70:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800ad72:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ad76:	d1cb      	bne.n	800ad10 <HAL_SPI_TransmitReceive+0xd2>
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800ad78:	6822      	ldr	r2, [r4, #0]
 800ad7a:	6813      	ldr	r3, [r2, #0]
 800ad7c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800ad80:	6013      	str	r3, [r2, #0]
 800ad82:	e7c5      	b.n	800ad10 <HAL_SPI_TransmitReceive+0xd2>
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout)) 
 800ad84:	b125      	cbz	r5, 800ad90 <HAL_SPI_TransmitReceive+0x152>
 800ad86:	f7fd fdb1 	bl	80088ec <HAL_GetTick>
 800ad8a:	1bc0      	subs	r0, r0, r7
 800ad8c:	42a8      	cmp	r0, r5
 800ad8e:	d9d5      	bls.n	800ad3c <HAL_SPI_TransmitReceive+0xfe>
          hspi->State = HAL_SPI_STATE_READY;
 800ad90:	2301      	movs	r3, #1
 800ad92:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800ad96:	2300      	movs	r3, #0
 800ad98:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800ad9c:	2603      	movs	r6, #3
 800ad9e:	e0bf      	b.n	800af20 <HAL_SPI_TransmitReceive+0x2e2>
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr++);
 800ada0:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800ada2:	1c59      	adds	r1, r3, #1
 800ada4:	63a1      	str	r1, [r4, #56]	@ 0x38
 800ada6:	781b      	ldrb	r3, [r3, #0]
 800ada8:	7313      	strb	r3, [r2, #12]
          hspi->TxXferCount--;
 800adaa:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800adac:	3b01      	subs	r3, #1
 800adae:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 800adb0:	e029      	b.n	800ae06 <HAL_SPI_TransmitReceive+0x1c8>
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800adb2:	6822      	ldr	r2, [r4, #0]
 800adb4:	6813      	ldr	r3, [r2, #0]
 800adb6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800adba:	6013      	str	r3, [r2, #0]
 800adbc:	e029      	b.n	800ae12 <HAL_SPI_TransmitReceive+0x1d4>
          (*hspi->pRxBuffPtr++) =  *(__IO uint8_t *)&hspi->Instance->DR;
 800adbe:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800adc0:	1c59      	adds	r1, r3, #1
 800adc2:	6421      	str	r1, [r4, #64]	@ 0x40
 800adc4:	7b12      	ldrb	r2, [r2, #12]
 800adc6:	701a      	strb	r2, [r3, #0]
          hspi->RxXferCount--;
 800adc8:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 800adcc:	3b01      	subs	r3, #1
 800adce:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
      if(Timeout != HAL_MAX_DELAY)
 800add2:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 800add6:	d13b      	bne.n	800ae50 <HAL_SPI_TransmitReceive+0x212>
    while((hspi->TxXferCount > 0) || (hspi->RxXferCount > 0))
 800add8:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800adda:	b91b      	cbnz	r3, 800ade4 <HAL_SPI_TransmitReceive+0x1a6>
 800addc:	f8b4 2046 	ldrh.w	r2, [r4, #70]	@ 0x46
 800ade0:	2a00      	cmp	r2, #0
 800ade2:	d043      	beq.n	800ae6c <HAL_SPI_TransmitReceive+0x22e>
      if((hspi->TxXferCount > 0) && ((hspi->Instance->SR & SPI_FLAG_TXE) == SPI_FLAG_TXE))
 800ade4:	b1ab      	cbz	r3, 800ae12 <HAL_SPI_TransmitReceive+0x1d4>
 800ade6:	6822      	ldr	r2, [r4, #0]
 800ade8:	6891      	ldr	r1, [r2, #8]
 800adea:	f011 0f02 	tst.w	r1, #2
 800adee:	d010      	beq.n	800ae12 <HAL_SPI_TransmitReceive+0x1d4>
        if(hspi->TxXferCount > 1)
 800adf0:	2b01      	cmp	r3, #1
 800adf2:	d9d5      	bls.n	800ada0 <HAL_SPI_TransmitReceive+0x162>
          hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
 800adf4:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800adf6:	881b      	ldrh	r3, [r3, #0]
 800adf8:	60d3      	str	r3, [r2, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800adfa:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800adfc:	3302      	adds	r3, #2
 800adfe:	63a3      	str	r3, [r4, #56]	@ 0x38
          hspi->TxXferCount -= 2;
 800ae00:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800ae02:	3b02      	subs	r3, #2
 800ae04:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        if((hspi->TxXferCount == 0) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 800ae06:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800ae08:	b91b      	cbnz	r3, 800ae12 <HAL_SPI_TransmitReceive+0x1d4>
 800ae0a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800ae0c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ae10:	d0cf      	beq.n	800adb2 <HAL_SPI_TransmitReceive+0x174>
      if((hspi->RxXferCount > 0) && ((hspi->Instance->SR & SPI_FLAG_RXNE) == SPI_FLAG_RXNE))
 800ae12:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d0db      	beq.n	800add2 <HAL_SPI_TransmitReceive+0x194>
 800ae1a:	6822      	ldr	r2, [r4, #0]
 800ae1c:	6891      	ldr	r1, [r2, #8]
 800ae1e:	f011 0f01 	tst.w	r1, #1
 800ae22:	d0d6      	beq.n	800add2 <HAL_SPI_TransmitReceive+0x194>
        if(hspi->RxXferCount > 1)
 800ae24:	2b01      	cmp	r3, #1
 800ae26:	d9ca      	bls.n	800adbe <HAL_SPI_TransmitReceive+0x180>
          *((uint16_t*)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800ae28:	68d2      	ldr	r2, [r2, #12]
 800ae2a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ae2c:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800ae2e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ae30:	3302      	adds	r3, #2
 800ae32:	6423      	str	r3, [r4, #64]	@ 0x40
          hspi->RxXferCount -= 2;
 800ae34:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 800ae38:	3b02      	subs	r3, #2
 800ae3a:	b29b      	uxth	r3, r3
 800ae3c:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
          if(hspi->RxXferCount <= 1)
 800ae40:	2b01      	cmp	r3, #1
 800ae42:	d8c6      	bhi.n	800add2 <HAL_SPI_TransmitReceive+0x194>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800ae44:	6822      	ldr	r2, [r4, #0]
 800ae46:	6853      	ldr	r3, [r2, #4]
 800ae48:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800ae4c:	6053      	str	r3, [r2, #4]
 800ae4e:	e7c0      	b.n	800add2 <HAL_SPI_TransmitReceive+0x194>
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 800ae50:	b125      	cbz	r5, 800ae5c <HAL_SPI_TransmitReceive+0x21e>
 800ae52:	f7fd fd4b 	bl	80088ec <HAL_GetTick>
 800ae56:	1bc0      	subs	r0, r0, r7
 800ae58:	42a8      	cmp	r0, r5
 800ae5a:	d9bd      	bls.n	800add8 <HAL_SPI_TransmitReceive+0x19a>
          hspi->State = HAL_SPI_STATE_READY;
 800ae5c:	2301      	movs	r3, #1
 800ae5e:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800ae62:	2300      	movs	r3, #0
 800ae64:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800ae68:	2603      	movs	r6, #3
 800ae6a:	e059      	b.n	800af20 <HAL_SPI_TransmitReceive+0x2e2>
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800ae6c:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800ae6e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ae72:	d015      	beq.n	800aea0 <HAL_SPI_TransmitReceive+0x262>
  if(SPI_EndRxTxTransaction(hspi,Timeout) != HAL_OK)
 800ae74:	4629      	mov	r1, r5
 800ae76:	4620      	mov	r0, r4
 800ae78:	f7ff fd85 	bl	800a986 <SPI_EndRxTxTransaction>
 800ae7c:	2800      	cmp	r0, #0
 800ae7e:	d155      	bne.n	800af2c <HAL_SPI_TransmitReceive+0x2ee>
  hspi->State = HAL_SPI_STATE_READY;
 800ae80:	2301      	movs	r3, #1
 800ae82:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
  if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
 800ae86:	6823      	ldr	r3, [r4, #0]
 800ae88:	689a      	ldr	r2, [r3, #8]
 800ae8a:	f012 0f10 	tst.w	r2, #16
 800ae8e:	d13b      	bne.n	800af08 <HAL_SPI_TransmitReceive+0x2ca>
  __HAL_UNLOCK(hspi);
 800ae90:	2300      	movs	r3, #0
 800ae92:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
  if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ae96:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d141      	bne.n	800af20 <HAL_SPI_TransmitReceive+0x2e2>
    return HAL_OK;
 800ae9c:	4606      	mov	r6, r0
 800ae9e:	e03f      	b.n	800af20 <HAL_SPI_TransmitReceive+0x2e2>
    if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SPI_FLAG_RXNE, Timeout) != HAL_OK)
 800aea0:	462b      	mov	r3, r5
 800aea2:	2201      	movs	r2, #1
 800aea4:	4611      	mov	r1, r2
 800aea6:	4620      	mov	r0, r4
 800aea8:	f7ff fcbe 	bl	800a828 <SPI_WaitFlagStateUntilTimeout>
 800aeac:	b118      	cbz	r0, 800aeb6 <HAL_SPI_TransmitReceive+0x278>
      hspi->ErrorCode|= HAL_SPI_ERROR_CRC;
 800aeae:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 800aeb0:	f043 0302 	orr.w	r3, r3, #2
 800aeb4:	6623      	str	r3, [r4, #96]	@ 0x60
    if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800aeb6:	68e3      	ldr	r3, [r4, #12]
 800aeb8:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800aebc:	d01c      	beq.n	800aef8 <HAL_SPI_TransmitReceive+0x2ba>
      tmpreg = *(__IO uint8_t *)&hspi->Instance->DR;
 800aebe:	6823      	ldr	r3, [r4, #0]
 800aec0:	7b1b      	ldrb	r3, [r3, #12]
 800aec2:	b2db      	uxtb	r3, r3
 800aec4:	f8ad 3006 	strh.w	r3, [sp, #6]
      UNUSED(tmpreg); /* To avoid GCC warning */
 800aec8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
      if(hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 800aecc:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800aece:	2b02      	cmp	r3, #2
 800aed0:	d1d0      	bne.n	800ae74 <HAL_SPI_TransmitReceive+0x236>
        if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SPI_FLAG_RXNE, Timeout) != HAL_OK)
 800aed2:	462b      	mov	r3, r5
 800aed4:	2201      	movs	r2, #1
 800aed6:	4611      	mov	r1, r2
 800aed8:	4620      	mov	r0, r4
 800aeda:	f7ff fca5 	bl	800a828 <SPI_WaitFlagStateUntilTimeout>
 800aede:	b118      	cbz	r0, 800aee8 <HAL_SPI_TransmitReceive+0x2aa>
          hspi->ErrorCode|= HAL_SPI_ERROR_CRC;
 800aee0:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 800aee2:	f043 0302 	orr.w	r3, r3, #2
 800aee6:	6623      	str	r3, [r4, #96]	@ 0x60
        tmpreg = *(__IO uint8_t *)&hspi->Instance->DR;
 800aee8:	6823      	ldr	r3, [r4, #0]
 800aeea:	7b1b      	ldrb	r3, [r3, #12]
 800aeec:	b2db      	uxtb	r3, r3
 800aeee:	f8ad 3006 	strh.w	r3, [sp, #6]
        UNUSED(tmpreg); /* To avoid GCC warning */
 800aef2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800aef6:	e7bd      	b.n	800ae74 <HAL_SPI_TransmitReceive+0x236>
      tmpreg = hspi->Instance->DR;
 800aef8:	6823      	ldr	r3, [r4, #0]
 800aefa:	68db      	ldr	r3, [r3, #12]
 800aefc:	b29b      	uxth	r3, r3
 800aefe:	f8ad 3006 	strh.w	r3, [sp, #6]
      UNUSED(tmpreg); /* To avoid GCC warning */
 800af02:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800af06:	e7b5      	b.n	800ae74 <HAL_SPI_TransmitReceive+0x236>
    hspi->ErrorCode|= HAL_SPI_ERROR_CRC;
 800af08:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 800af0a:	f042 0202 	orr.w	r2, r2, #2
 800af0e:	6622      	str	r2, [r4, #96]	@ 0x60
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 800af10:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 800af14:	609a      	str	r2, [r3, #8]
    __HAL_UNLOCK(hspi);
 800af16:	2300      	movs	r3, #0
 800af18:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
    return HAL_ERROR;
 800af1c:	e000      	b.n	800af20 <HAL_SPI_TransmitReceive+0x2e2>
    return HAL_BUSY;
 800af1e:	2602      	movs	r6, #2
}
 800af20:	4630      	mov	r0, r6
 800af22:	b002      	add	sp, #8
 800af24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  __HAL_LOCK(hspi); 
 800af28:	2602      	movs	r6, #2
 800af2a:	e7f9      	b.n	800af20 <HAL_SPI_TransmitReceive+0x2e2>
    return HAL_TIMEOUT;
 800af2c:	2603      	movs	r6, #3
 800af2e:	e7f7      	b.n	800af20 <HAL_SPI_TransmitReceive+0x2e2>

0800af30 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800af30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800af34:	4605      	mov	r5, r0
 800af36:	460f      	mov	r7, r1
 800af38:	4616      	mov	r6, r2
 800af3a:	4699      	mov	r9, r3
 800af3c:	f8dd 8020 	ldr.w	r8, [sp, #32]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800af40:	682b      	ldr	r3, [r5, #0]
 800af42:	69dc      	ldr	r4, [r3, #28]
 800af44:	ea37 0404 	bics.w	r4, r7, r4
 800af48:	bf0c      	ite	eq
 800af4a:	2401      	moveq	r4, #1
 800af4c:	2400      	movne	r4, #0
 800af4e:	42b4      	cmp	r4, r6
 800af50:	d11f      	bne.n	800af92 <UART_WaitOnFlagUntilTimeout+0x62>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 800af52:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 800af56:	d0f3      	beq.n	800af40 <UART_WaitOnFlagUntilTimeout+0x10>
    {
      if((Timeout == 0U)||((HAL_GetTick()-Tickstart) >=  Timeout))
 800af58:	f1b8 0f00 	cmp.w	r8, #0
 800af5c:	d005      	beq.n	800af6a <UART_WaitOnFlagUntilTimeout+0x3a>
 800af5e:	f7fd fcc5 	bl	80088ec <HAL_GetTick>
 800af62:	eba0 0009 	sub.w	r0, r0, r9
 800af66:	4540      	cmp	r0, r8
 800af68:	d3ea      	bcc.n	800af40 <UART_WaitOnFlagUntilTimeout+0x10>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800af6a:	682a      	ldr	r2, [r5, #0]
 800af6c:	6813      	ldr	r3, [r2, #0]
 800af6e:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800af72:	6013      	str	r3, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800af74:	682a      	ldr	r2, [r5, #0]
 800af76:	6893      	ldr	r3, [r2, #8]
 800af78:	f023 0301 	bic.w	r3, r3, #1
 800af7c:	6093      	str	r3, [r2, #8]

        huart->gState = HAL_UART_STATE_READY;
 800af7e:	2320      	movs	r3, #32
 800af80:	f885 3069 	strb.w	r3, [r5, #105]	@ 0x69
        huart->RxState = HAL_UART_STATE_READY;
 800af84:	f885 306a 	strb.w	r3, [r5, #106]	@ 0x6a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800af88:	2300      	movs	r3, #0
 800af8a:	f885 3068 	strb.w	r3, [r5, #104]	@ 0x68
        return HAL_TIMEOUT;
 800af8e:	2003      	movs	r0, #3
 800af90:	e000      	b.n	800af94 <UART_WaitOnFlagUntilTimeout+0x64>
      }
    }
  }
  return HAL_OK;
 800af92:	2000      	movs	r0, #0
}
 800af94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800af98 <HAL_UART_Transmit>:
{
 800af98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af9c:	b082      	sub	sp, #8
 800af9e:	461e      	mov	r6, r3
  if(huart->gState == HAL_UART_STATE_READY)
 800afa0:	f890 3069 	ldrb.w	r3, [r0, #105]	@ 0x69
 800afa4:	b2db      	uxtb	r3, r3
 800afa6:	2b20      	cmp	r3, #32
 800afa8:	d14e      	bne.n	800b048 <HAL_UART_Transmit+0xb0>
 800afaa:	4604      	mov	r4, r0
 800afac:	460d      	mov	r5, r1
 800afae:	4690      	mov	r8, r2
    if((pData == NULL ) || (Size == 0U))
 800afb0:	2a00      	cmp	r2, #0
 800afb2:	bf18      	it	ne
 800afb4:	2900      	cmpne	r1, #0
 800afb6:	d04b      	beq.n	800b050 <HAL_UART_Transmit+0xb8>
    __HAL_LOCK(huart);
 800afb8:	f890 3068 	ldrb.w	r3, [r0, #104]	@ 0x68
 800afbc:	2b01      	cmp	r3, #1
 800afbe:	d049      	beq.n	800b054 <HAL_UART_Transmit+0xbc>
 800afc0:	2301      	movs	r3, #1
 800afc2:	f880 3068 	strb.w	r3, [r0, #104]	@ 0x68
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800afc6:	2300      	movs	r3, #0
 800afc8:	66c3      	str	r3, [r0, #108]	@ 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800afca:	2321      	movs	r3, #33	@ 0x21
 800afcc:	f880 3069 	strb.w	r3, [r0, #105]	@ 0x69
    tickstart = HAL_GetTick();
 800afd0:	f7fd fc8c 	bl	80088ec <HAL_GetTick>
 800afd4:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 800afd6:	f8a4 8050 	strh.w	r8, [r4, #80]	@ 0x50
    huart->TxXferCount = Size;
 800afda:	f8a4 8052 	strh.w	r8, [r4, #82]	@ 0x52
    while(huart->TxXferCount > 0U)
 800afde:	e003      	b.n	800afe8 <HAL_UART_Transmit+0x50>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 800afe0:	f815 2b01 	ldrb.w	r2, [r5], #1
 800afe4:	6823      	ldr	r3, [r4, #0]
 800afe6:	629a      	str	r2, [r3, #40]	@ 0x28
    while(huart->TxXferCount > 0U)
 800afe8:	f8b4 3052 	ldrh.w	r3, [r4, #82]	@ 0x52
 800afec:	b29b      	uxth	r3, r3
 800afee:	b1e3      	cbz	r3, 800b02a <HAL_UART_Transmit+0x92>
      huart->TxXferCount--;
 800aff0:	f8b4 2052 	ldrh.w	r2, [r4, #82]	@ 0x52
 800aff4:	b292      	uxth	r2, r2
 800aff6:	3a01      	subs	r2, #1
 800aff8:	b292      	uxth	r2, r2
 800affa:	f8a4 2052 	strh.w	r2, [r4, #82]	@ 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800affe:	9600      	str	r6, [sp, #0]
 800b000:	463b      	mov	r3, r7
 800b002:	2200      	movs	r2, #0
 800b004:	2180      	movs	r1, #128	@ 0x80
 800b006:	4620      	mov	r0, r4
 800b008:	f7ff ff92 	bl	800af30 <UART_WaitOnFlagUntilTimeout>
 800b00c:	bb20      	cbnz	r0, 800b058 <HAL_UART_Transmit+0xc0>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b00e:	68a3      	ldr	r3, [r4, #8]
 800b010:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b014:	d1e4      	bne.n	800afe0 <HAL_UART_Transmit+0x48>
 800b016:	6923      	ldr	r3, [r4, #16]
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d1e1      	bne.n	800afe0 <HAL_UART_Transmit+0x48>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 800b01c:	f835 3b02 	ldrh.w	r3, [r5], #2
 800b020:	6822      	ldr	r2, [r4, #0]
 800b022:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b026:	6293      	str	r3, [r2, #40]	@ 0x28
        pData += 2;
 800b028:	e7de      	b.n	800afe8 <HAL_UART_Transmit+0x50>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b02a:	9600      	str	r6, [sp, #0]
 800b02c:	463b      	mov	r3, r7
 800b02e:	2200      	movs	r2, #0
 800b030:	2140      	movs	r1, #64	@ 0x40
 800b032:	4620      	mov	r0, r4
 800b034:	f7ff ff7c 	bl	800af30 <UART_WaitOnFlagUntilTimeout>
 800b038:	b980      	cbnz	r0, 800b05c <HAL_UART_Transmit+0xc4>
    huart->gState = HAL_UART_STATE_READY;
 800b03a:	2320      	movs	r3, #32
 800b03c:	f884 3069 	strb.w	r3, [r4, #105]	@ 0x69
    __HAL_UNLOCK(huart);
 800b040:	2300      	movs	r3, #0
 800b042:	f884 3068 	strb.w	r3, [r4, #104]	@ 0x68
    return HAL_OK;
 800b046:	e000      	b.n	800b04a <HAL_UART_Transmit+0xb2>
    return HAL_BUSY;
 800b048:	2002      	movs	r0, #2
}
 800b04a:	b002      	add	sp, #8
 800b04c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 800b050:	2001      	movs	r0, #1
 800b052:	e7fa      	b.n	800b04a <HAL_UART_Transmit+0xb2>
    __HAL_LOCK(huart);
 800b054:	2002      	movs	r0, #2
 800b056:	e7f8      	b.n	800b04a <HAL_UART_Transmit+0xb2>
        return HAL_TIMEOUT;
 800b058:	2003      	movs	r0, #3
 800b05a:	e7f6      	b.n	800b04a <HAL_UART_Transmit+0xb2>
      return HAL_TIMEOUT;
 800b05c:	2003      	movs	r0, #3
 800b05e:	e7f4      	b.n	800b04a <HAL_UART_Transmit+0xb2>

0800b060 <HAL_UART_Receive>:
{
 800b060:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b064:	b082      	sub	sp, #8
 800b066:	461e      	mov	r6, r3
  if(huart->RxState == HAL_UART_STATE_READY)
 800b068:	f890 306a 	ldrb.w	r3, [r0, #106]	@ 0x6a
 800b06c:	b2db      	uxtb	r3, r3
 800b06e:	2b20      	cmp	r3, #32
 800b070:	d172      	bne.n	800b158 <HAL_UART_Receive+0xf8>
 800b072:	4604      	mov	r4, r0
 800b074:	460d      	mov	r5, r1
 800b076:	4690      	mov	r8, r2
    if((pData == NULL ) || (Size == 0U))
 800b078:	2a00      	cmp	r2, #0
 800b07a:	bf18      	it	ne
 800b07c:	2900      	cmpne	r1, #0
 800b07e:	d06f      	beq.n	800b160 <HAL_UART_Receive+0x100>
    __HAL_LOCK(huart);
 800b080:	f890 3068 	ldrb.w	r3, [r0, #104]	@ 0x68
 800b084:	2b01      	cmp	r3, #1
 800b086:	d06d      	beq.n	800b164 <HAL_UART_Receive+0x104>
 800b088:	2301      	movs	r3, #1
 800b08a:	f880 3068 	strb.w	r3, [r0, #104]	@ 0x68
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b08e:	2300      	movs	r3, #0
 800b090:	66c3      	str	r3, [r0, #108]	@ 0x6c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b092:	2322      	movs	r3, #34	@ 0x22
 800b094:	f880 306a 	strb.w	r3, [r0, #106]	@ 0x6a
    tickstart = HAL_GetTick();
 800b098:	f7fd fc28 	bl	80088ec <HAL_GetTick>
 800b09c:	4607      	mov	r7, r0
    huart->RxXferSize = Size;
 800b09e:	f8a4 8058 	strh.w	r8, [r4, #88]	@ 0x58
    huart->RxXferCount = Size;
 800b0a2:	f8a4 805a 	strh.w	r8, [r4, #90]	@ 0x5a
    UART_MASK_COMPUTATION(huart);
 800b0a6:	68a3      	ldr	r3, [r4, #8]
 800b0a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b0ac:	d006      	beq.n	800b0bc <HAL_UART_Receive+0x5c>
 800b0ae:	b9a3      	cbnz	r3, 800b0da <HAL_UART_Receive+0x7a>
 800b0b0:	6923      	ldr	r3, [r4, #16]
 800b0b2:	b973      	cbnz	r3, 800b0d2 <HAL_UART_Receive+0x72>
 800b0b4:	23ff      	movs	r3, #255	@ 0xff
 800b0b6:	f8a4 305c 	strh.w	r3, [r4, #92]	@ 0x5c
 800b0ba:	e011      	b.n	800b0e0 <HAL_UART_Receive+0x80>
 800b0bc:	6923      	ldr	r3, [r4, #16]
 800b0be:	b923      	cbnz	r3, 800b0ca <HAL_UART_Receive+0x6a>
 800b0c0:	f240 13ff 	movw	r3, #511	@ 0x1ff
 800b0c4:	f8a4 305c 	strh.w	r3, [r4, #92]	@ 0x5c
 800b0c8:	e00a      	b.n	800b0e0 <HAL_UART_Receive+0x80>
 800b0ca:	23ff      	movs	r3, #255	@ 0xff
 800b0cc:	f8a4 305c 	strh.w	r3, [r4, #92]	@ 0x5c
 800b0d0:	e006      	b.n	800b0e0 <HAL_UART_Receive+0x80>
 800b0d2:	237f      	movs	r3, #127	@ 0x7f
 800b0d4:	f8a4 305c 	strh.w	r3, [r4, #92]	@ 0x5c
 800b0d8:	e002      	b.n	800b0e0 <HAL_UART_Receive+0x80>
 800b0da:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b0de:	d002      	beq.n	800b0e6 <HAL_UART_Receive+0x86>
    uhMask = huart->Mask;
 800b0e0:	f8b4 805c 	ldrh.w	r8, [r4, #92]	@ 0x5c
    while(huart->RxXferCount > 0U)
 800b0e4:	e010      	b.n	800b108 <HAL_UART_Receive+0xa8>
    UART_MASK_COMPUTATION(huart);
 800b0e6:	6923      	ldr	r3, [r4, #16]
 800b0e8:	b91b      	cbnz	r3, 800b0f2 <HAL_UART_Receive+0x92>
 800b0ea:	237f      	movs	r3, #127	@ 0x7f
 800b0ec:	f8a4 305c 	strh.w	r3, [r4, #92]	@ 0x5c
 800b0f0:	e7f6      	b.n	800b0e0 <HAL_UART_Receive+0x80>
 800b0f2:	233f      	movs	r3, #63	@ 0x3f
 800b0f4:	f8a4 305c 	strh.w	r3, [r4, #92]	@ 0x5c
 800b0f8:	e7f2      	b.n	800b0e0 <HAL_UART_Receive+0x80>
        *pData++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800b0fa:	6823      	ldr	r3, [r4, #0]
 800b0fc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b0fe:	fa5f f388 	uxtb.w	r3, r8
 800b102:	4013      	ands	r3, r2
 800b104:	f805 3b01 	strb.w	r3, [r5], #1
    while(huart->RxXferCount > 0U)
 800b108:	f8b4 305a 	ldrh.w	r3, [r4, #90]	@ 0x5a
 800b10c:	b29b      	uxth	r3, r3
 800b10e:	b1e3      	cbz	r3, 800b14a <HAL_UART_Receive+0xea>
      huart->RxXferCount--;
 800b110:	f8b4 205a 	ldrh.w	r2, [r4, #90]	@ 0x5a
 800b114:	b292      	uxth	r2, r2
 800b116:	3a01      	subs	r2, #1
 800b118:	b292      	uxth	r2, r2
 800b11a:	f8a4 205a 	strh.w	r2, [r4, #90]	@ 0x5a
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800b11e:	9600      	str	r6, [sp, #0]
 800b120:	463b      	mov	r3, r7
 800b122:	2200      	movs	r2, #0
 800b124:	2120      	movs	r1, #32
 800b126:	4620      	mov	r0, r4
 800b128:	f7ff ff02 	bl	800af30 <UART_WaitOnFlagUntilTimeout>
 800b12c:	b9e0      	cbnz	r0, 800b168 <HAL_UART_Receive+0x108>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b12e:	68a3      	ldr	r3, [r4, #8]
 800b130:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b134:	d1e1      	bne.n	800b0fa <HAL_UART_Receive+0x9a>
 800b136:	6923      	ldr	r3, [r4, #16]
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d1de      	bne.n	800b0fa <HAL_UART_Receive+0x9a>
        *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 800b13c:	6823      	ldr	r3, [r4, #0]
 800b13e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b140:	ea08 0303 	and.w	r3, r8, r3
 800b144:	f825 3b02 	strh.w	r3, [r5], #2
        pData +=2U;
 800b148:	e7de      	b.n	800b108 <HAL_UART_Receive+0xa8>
    huart->RxState = HAL_UART_STATE_READY;
 800b14a:	2320      	movs	r3, #32
 800b14c:	f884 306a 	strb.w	r3, [r4, #106]	@ 0x6a
    __HAL_UNLOCK(huart);
 800b150:	2000      	movs	r0, #0
 800b152:	f884 0068 	strb.w	r0, [r4, #104]	@ 0x68
    return HAL_OK;
 800b156:	e000      	b.n	800b15a <HAL_UART_Receive+0xfa>
    return HAL_BUSY;
 800b158:	2002      	movs	r0, #2
}
 800b15a:	b002      	add	sp, #8
 800b15c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 800b160:	2001      	movs	r0, #1
 800b162:	e7fa      	b.n	800b15a <HAL_UART_Receive+0xfa>
    __HAL_LOCK(huart);
 800b164:	2002      	movs	r0, #2
 800b166:	e7f8      	b.n	800b15a <HAL_UART_Receive+0xfa>
        return HAL_TIMEOUT;
 800b168:	2003      	movs	r0, #3
 800b16a:	e7f6      	b.n	800b15a <HAL_UART_Receive+0xfa>

0800b16c <UART_SetConfig>:
  * @brief Configure the UART peripheral
  * @param huart uart handle
  * @retval None
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b16c:	b538      	push	{r3, r4, r5, lr}
 800b16e:	4604      	mov	r4, r0
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b170:	6883      	ldr	r3, [r0, #8]
 800b172:	6902      	ldr	r2, [r0, #16]
 800b174:	4313      	orrs	r3, r2
 800b176:	6942      	ldr	r2, [r0, #20]
 800b178:	4313      	orrs	r3, r2
 800b17a:	69c2      	ldr	r2, [r0, #28]
 800b17c:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 800b17e:	6801      	ldr	r1, [r0, #0]
 800b180:	6808      	ldr	r0, [r1, #0]
 800b182:	4a97      	ldr	r2, [pc, #604]	@ (800b3e0 <UART_SetConfig+0x274>)
 800b184:	4002      	ands	r2, r0
 800b186:	431a      	orrs	r2, r3
 800b188:	600a      	str	r2, [r1, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b18a:	6822      	ldr	r2, [r4, #0]
 800b18c:	6853      	ldr	r3, [r2, #4]
 800b18e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800b192:	68e1      	ldr	r1, [r4, #12]
 800b194:	430b      	orrs	r3, r1
 800b196:	6053      	str	r3, [r2, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 800b198:	69a3      	ldr	r3, [r4, #24]
 800b19a:	6a22      	ldr	r2, [r4, #32]
 800b19c:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 800b19e:	6821      	ldr	r1, [r4, #0]
 800b1a0:	688b      	ldr	r3, [r1, #8]
 800b1a2:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800b1a6:	4313      	orrs	r3, r2
 800b1a8:	608b      	str	r3, [r1, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b1aa:	6823      	ldr	r3, [r4, #0]
 800b1ac:	4a8d      	ldr	r2, [pc, #564]	@ (800b3e4 <UART_SetConfig+0x278>)
 800b1ae:	4293      	cmp	r3, r2
 800b1b0:	d019      	beq.n	800b1e6 <UART_SetConfig+0x7a>
 800b1b2:	4a8d      	ldr	r2, [pc, #564]	@ (800b3e8 <UART_SetConfig+0x27c>)
 800b1b4:	4293      	cmp	r3, r2
 800b1b6:	d02a      	beq.n	800b20e <UART_SetConfig+0xa2>
 800b1b8:	4a8c      	ldr	r2, [pc, #560]	@ (800b3ec <UART_SetConfig+0x280>)
 800b1ba:	4293      	cmp	r3, r2
 800b1bc:	d040      	beq.n	800b240 <UART_SetConfig+0xd4>
 800b1be:	4a8c      	ldr	r2, [pc, #560]	@ (800b3f0 <UART_SetConfig+0x284>)
 800b1c0:	4293      	cmp	r3, r2
 800b1c2:	d065      	beq.n	800b290 <UART_SetConfig+0x124>
 800b1c4:	4a8b      	ldr	r2, [pc, #556]	@ (800b3f4 <UART_SetConfig+0x288>)
 800b1c6:	4293      	cmp	r3, r2
 800b1c8:	d075      	beq.n	800b2b6 <UART_SetConfig+0x14a>
 800b1ca:	4a8b      	ldr	r2, [pc, #556]	@ (800b3f8 <UART_SetConfig+0x28c>)
 800b1cc:	4293      	cmp	r3, r2
 800b1ce:	f000 8088 	beq.w	800b2e2 <UART_SetConfig+0x176>
 800b1d2:	4a8a      	ldr	r2, [pc, #552]	@ (800b3fc <UART_SetConfig+0x290>)
 800b1d4:	4293      	cmp	r3, r2
 800b1d6:	f000 809a 	beq.w	800b30e <UART_SetConfig+0x1a2>
 800b1da:	4a89      	ldr	r2, [pc, #548]	@ (800b400 <UART_SetConfig+0x294>)
 800b1dc:	4293      	cmp	r3, r2
 800b1de:	f000 80ac 	beq.w	800b33a <UART_SetConfig+0x1ce>
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 800b1e2:	2510      	movs	r5, #16
 800b1e4:	e03d      	b.n	800b262 <UART_SetConfig+0xf6>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b1e6:	f502 3294 	add.w	r2, r2, #75776	@ 0x12800
 800b1ea:	f8d2 2090 	ldr.w	r2, [r2, #144]	@ 0x90
 800b1ee:	f002 0203 	and.w	r2, r2, #3
 800b1f2:	2a03      	cmp	r2, #3
 800b1f4:	d803      	bhi.n	800b1fe <UART_SetConfig+0x92>
 800b1f6:	e8df f002 	tbb	[pc, r2]
 800b1fa:	06b5      	.short	0x06b5
 800b1fc:	0804      	.short	0x0804
 800b1fe:	2510      	movs	r5, #16
 800b200:	e02f      	b.n	800b262 <UART_SetConfig+0xf6>
 800b202:	2502      	movs	r5, #2
 800b204:	e02d      	b.n	800b262 <UART_SetConfig+0xf6>
 800b206:	2504      	movs	r5, #4
 800b208:	e02b      	b.n	800b262 <UART_SetConfig+0xf6>
 800b20a:	2508      	movs	r5, #8
 800b20c:	e029      	b.n	800b262 <UART_SetConfig+0xf6>
 800b20e:	f502 32fa 	add.w	r2, r2, #128000	@ 0x1f400
 800b212:	f8d2 2090 	ldr.w	r2, [r2, #144]	@ 0x90
 800b216:	f002 020c 	and.w	r2, r2, #12
 800b21a:	2a0c      	cmp	r2, #12
 800b21c:	d808      	bhi.n	800b230 <UART_SetConfig+0xc4>
 800b21e:	e8df f002 	tbb	[pc, r2]
 800b222:	07a3      	.short	0x07a3
 800b224:	070b0707 	.word	0x070b0707
 800b228:	07090707 	.word	0x07090707
 800b22c:	0707      	.short	0x0707
 800b22e:	0d          	.byte	0x0d
 800b22f:	00          	.byte	0x00
 800b230:	2510      	movs	r5, #16
 800b232:	e016      	b.n	800b262 <UART_SetConfig+0xf6>
 800b234:	2502      	movs	r5, #2
 800b236:	e014      	b.n	800b262 <UART_SetConfig+0xf6>
 800b238:	2504      	movs	r5, #4
 800b23a:	e012      	b.n	800b262 <UART_SetConfig+0xf6>
 800b23c:	2508      	movs	r5, #8
 800b23e:	e010      	b.n	800b262 <UART_SetConfig+0xf6>
 800b240:	f502 32f8 	add.w	r2, r2, #126976	@ 0x1f000
 800b244:	f8d2 2090 	ldr.w	r2, [r2, #144]	@ 0x90
 800b248:	f002 0230 	and.w	r2, r2, #48	@ 0x30
 800b24c:	2a20      	cmp	r2, #32
 800b24e:	f000 808d 	beq.w	800b36c <UART_SetConfig+0x200>
 800b252:	d819      	bhi.n	800b288 <UART_SetConfig+0x11c>
 800b254:	2a00      	cmp	r2, #0
 800b256:	f000 808b 	beq.w	800b370 <UART_SetConfig+0x204>
 800b25a:	2a10      	cmp	r2, #16
 800b25c:	f040 808a 	bne.w	800b374 <UART_SetConfig+0x208>
 800b260:	2504      	movs	r5, #4

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b262:	69e2      	ldr	r2, [r4, #28]
 800b264:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 800b268:	f000 80b0 	beq.w	800b3cc <UART_SetConfig+0x260>
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
    huart->Instance->BRR = brrtemp;
  }
  else
  {
    switch (clocksource)
 800b26c:	2d08      	cmp	r5, #8
 800b26e:	f200 813d 	bhi.w	800b4ec <UART_SetConfig+0x380>
 800b272:	e8df f015 	tbh	[pc, r5, lsl #1]
 800b276:	0104      	.short	0x0104
 800b278:	011b010f 	.word	0x011b010f
 800b27c:	0125013b 	.word	0x0125013b
 800b280:	013b013b 	.word	0x013b013b
 800b284:	0131013b 	.word	0x0131013b
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b288:	2a30      	cmp	r2, #48	@ 0x30
 800b28a:	d175      	bne.n	800b378 <UART_SetConfig+0x20c>
 800b28c:	2508      	movs	r5, #8
 800b28e:	e7e8      	b.n	800b262 <UART_SetConfig+0xf6>
 800b290:	f502 32f6 	add.w	r2, r2, #125952	@ 0x1ec00
 800b294:	f8d2 2090 	ldr.w	r2, [r2, #144]	@ 0x90
 800b298:	f002 02c0 	and.w	r2, r2, #192	@ 0xc0
 800b29c:	2a80      	cmp	r2, #128	@ 0x80
 800b29e:	d06d      	beq.n	800b37c <UART_SetConfig+0x210>
 800b2a0:	d805      	bhi.n	800b2ae <UART_SetConfig+0x142>
 800b2a2:	2a00      	cmp	r2, #0
 800b2a4:	d06c      	beq.n	800b380 <UART_SetConfig+0x214>
 800b2a6:	2a40      	cmp	r2, #64	@ 0x40
 800b2a8:	d16c      	bne.n	800b384 <UART_SetConfig+0x218>
 800b2aa:	2504      	movs	r5, #4
 800b2ac:	e7d9      	b.n	800b262 <UART_SetConfig+0xf6>
 800b2ae:	2ac0      	cmp	r2, #192	@ 0xc0
 800b2b0:	d16a      	bne.n	800b388 <UART_SetConfig+0x21c>
 800b2b2:	2508      	movs	r5, #8
 800b2b4:	e7d5      	b.n	800b262 <UART_SetConfig+0xf6>
 800b2b6:	f502 32f4 	add.w	r2, r2, #124928	@ 0x1e800
 800b2ba:	f8d2 2090 	ldr.w	r2, [r2, #144]	@ 0x90
 800b2be:	f402 7240 	and.w	r2, r2, #768	@ 0x300
 800b2c2:	f5b2 7f00 	cmp.w	r2, #512	@ 0x200
 800b2c6:	d061      	beq.n	800b38c <UART_SetConfig+0x220>
 800b2c8:	d806      	bhi.n	800b2d8 <UART_SetConfig+0x16c>
 800b2ca:	2a00      	cmp	r2, #0
 800b2cc:	d060      	beq.n	800b390 <UART_SetConfig+0x224>
 800b2ce:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
 800b2d2:	d15f      	bne.n	800b394 <UART_SetConfig+0x228>
 800b2d4:	2504      	movs	r5, #4
 800b2d6:	e7c4      	b.n	800b262 <UART_SetConfig+0xf6>
 800b2d8:	f5b2 7f40 	cmp.w	r2, #768	@ 0x300
 800b2dc:	d15c      	bne.n	800b398 <UART_SetConfig+0x22c>
 800b2de:	2508      	movs	r5, #8
 800b2e0:	e7bf      	b.n	800b262 <UART_SetConfig+0xf6>
 800b2e2:	f502 3292 	add.w	r2, r2, #74752	@ 0x12400
 800b2e6:	f8d2 2090 	ldr.w	r2, [r2, #144]	@ 0x90
 800b2ea:	f402 6240 	and.w	r2, r2, #3072	@ 0xc00
 800b2ee:	f5b2 6f00 	cmp.w	r2, #2048	@ 0x800
 800b2f2:	d053      	beq.n	800b39c <UART_SetConfig+0x230>
 800b2f4:	d806      	bhi.n	800b304 <UART_SetConfig+0x198>
 800b2f6:	2a00      	cmp	r2, #0
 800b2f8:	d052      	beq.n	800b3a0 <UART_SetConfig+0x234>
 800b2fa:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 800b2fe:	d151      	bne.n	800b3a4 <UART_SetConfig+0x238>
 800b300:	2504      	movs	r5, #4
 800b302:	e7ae      	b.n	800b262 <UART_SetConfig+0xf6>
 800b304:	f5b2 6f40 	cmp.w	r2, #3072	@ 0xc00
 800b308:	d14e      	bne.n	800b3a8 <UART_SetConfig+0x23c>
 800b30a:	2508      	movs	r5, #8
 800b30c:	e7a9      	b.n	800b262 <UART_SetConfig+0xf6>
 800b30e:	f502 32e0 	add.w	r2, r2, #114688	@ 0x1c000
 800b312:	f8d2 2090 	ldr.w	r2, [r2, #144]	@ 0x90
 800b316:	f402 5240 	and.w	r2, r2, #12288	@ 0x3000
 800b31a:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 800b31e:	d045      	beq.n	800b3ac <UART_SetConfig+0x240>
 800b320:	d806      	bhi.n	800b330 <UART_SetConfig+0x1c4>
 800b322:	2a00      	cmp	r2, #0
 800b324:	d044      	beq.n	800b3b0 <UART_SetConfig+0x244>
 800b326:	f5b2 5f80 	cmp.w	r2, #4096	@ 0x1000
 800b32a:	d143      	bne.n	800b3b4 <UART_SetConfig+0x248>
 800b32c:	2504      	movs	r5, #4
 800b32e:	e798      	b.n	800b262 <UART_SetConfig+0xf6>
 800b330:	f5b2 5f40 	cmp.w	r2, #12288	@ 0x3000
 800b334:	d140      	bne.n	800b3b8 <UART_SetConfig+0x24c>
 800b336:	2508      	movs	r5, #8
 800b338:	e793      	b.n	800b262 <UART_SetConfig+0xf6>
 800b33a:	f502 32de 	add.w	r2, r2, #113664	@ 0x1bc00
 800b33e:	f8d2 2090 	ldr.w	r2, [r2, #144]	@ 0x90
 800b342:	f402 4240 	and.w	r2, r2, #49152	@ 0xc000
 800b346:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 800b34a:	d037      	beq.n	800b3bc <UART_SetConfig+0x250>
 800b34c:	d805      	bhi.n	800b35a <UART_SetConfig+0x1ee>
 800b34e:	b3ba      	cbz	r2, 800b3c0 <UART_SetConfig+0x254>
 800b350:	f5b2 4f80 	cmp.w	r2, #16384	@ 0x4000
 800b354:	d136      	bne.n	800b3c4 <UART_SetConfig+0x258>
 800b356:	2504      	movs	r5, #4
 800b358:	e783      	b.n	800b262 <UART_SetConfig+0xf6>
 800b35a:	f5b2 4f40 	cmp.w	r2, #49152	@ 0xc000
 800b35e:	d133      	bne.n	800b3c8 <UART_SetConfig+0x25c>
 800b360:	2508      	movs	r5, #8
 800b362:	e77e      	b.n	800b262 <UART_SetConfig+0xf6>
 800b364:	2501      	movs	r5, #1
 800b366:	e77c      	b.n	800b262 <UART_SetConfig+0xf6>
 800b368:	2500      	movs	r5, #0
 800b36a:	e77a      	b.n	800b262 <UART_SetConfig+0xf6>
 800b36c:	2502      	movs	r5, #2
 800b36e:	e778      	b.n	800b262 <UART_SetConfig+0xf6>
 800b370:	2500      	movs	r5, #0
 800b372:	e776      	b.n	800b262 <UART_SetConfig+0xf6>
 800b374:	2510      	movs	r5, #16
 800b376:	e774      	b.n	800b262 <UART_SetConfig+0xf6>
 800b378:	2510      	movs	r5, #16
 800b37a:	e772      	b.n	800b262 <UART_SetConfig+0xf6>
 800b37c:	2502      	movs	r5, #2
 800b37e:	e770      	b.n	800b262 <UART_SetConfig+0xf6>
 800b380:	2500      	movs	r5, #0
 800b382:	e76e      	b.n	800b262 <UART_SetConfig+0xf6>
 800b384:	2510      	movs	r5, #16
 800b386:	e76c      	b.n	800b262 <UART_SetConfig+0xf6>
 800b388:	2510      	movs	r5, #16
 800b38a:	e76a      	b.n	800b262 <UART_SetConfig+0xf6>
 800b38c:	2502      	movs	r5, #2
 800b38e:	e768      	b.n	800b262 <UART_SetConfig+0xf6>
 800b390:	2500      	movs	r5, #0
 800b392:	e766      	b.n	800b262 <UART_SetConfig+0xf6>
 800b394:	2510      	movs	r5, #16
 800b396:	e764      	b.n	800b262 <UART_SetConfig+0xf6>
 800b398:	2510      	movs	r5, #16
 800b39a:	e762      	b.n	800b262 <UART_SetConfig+0xf6>
 800b39c:	2502      	movs	r5, #2
 800b39e:	e760      	b.n	800b262 <UART_SetConfig+0xf6>
 800b3a0:	2501      	movs	r5, #1
 800b3a2:	e75e      	b.n	800b262 <UART_SetConfig+0xf6>
 800b3a4:	2510      	movs	r5, #16
 800b3a6:	e75c      	b.n	800b262 <UART_SetConfig+0xf6>
 800b3a8:	2510      	movs	r5, #16
 800b3aa:	e75a      	b.n	800b262 <UART_SetConfig+0xf6>
 800b3ac:	2502      	movs	r5, #2
 800b3ae:	e758      	b.n	800b262 <UART_SetConfig+0xf6>
 800b3b0:	2500      	movs	r5, #0
 800b3b2:	e756      	b.n	800b262 <UART_SetConfig+0xf6>
 800b3b4:	2510      	movs	r5, #16
 800b3b6:	e754      	b.n	800b262 <UART_SetConfig+0xf6>
 800b3b8:	2510      	movs	r5, #16
 800b3ba:	e752      	b.n	800b262 <UART_SetConfig+0xf6>
 800b3bc:	2502      	movs	r5, #2
 800b3be:	e750      	b.n	800b262 <UART_SetConfig+0xf6>
 800b3c0:	2500      	movs	r5, #0
 800b3c2:	e74e      	b.n	800b262 <UART_SetConfig+0xf6>
 800b3c4:	2510      	movs	r5, #16
 800b3c6:	e74c      	b.n	800b262 <UART_SetConfig+0xf6>
 800b3c8:	2510      	movs	r5, #16
 800b3ca:	e74a      	b.n	800b262 <UART_SetConfig+0xf6>
    switch (clocksource)
 800b3cc:	2d08      	cmp	r5, #8
 800b3ce:	d84b      	bhi.n	800b468 <UART_SetConfig+0x2fc>
 800b3d0:	e8df f005 	tbb	[pc, r5]
 800b3d4:	4a2d2218 	.word	0x4a2d2218
 800b3d8:	4a4a4a36 	.word	0x4a4a4a36
 800b3dc:	41          	.byte	0x41
 800b3dd:	00          	.byte	0x00
 800b3de:	bf00      	nop
 800b3e0:	efff69f3 	.word	0xefff69f3
 800b3e4:	40011000 	.word	0x40011000
 800b3e8:	40004400 	.word	0x40004400
 800b3ec:	40004800 	.word	0x40004800
 800b3f0:	40004c00 	.word	0x40004c00
 800b3f4:	40005000 	.word	0x40005000
 800b3f8:	40011400 	.word	0x40011400
 800b3fc:	40007800 	.word	0x40007800
 800b400:	40007c00 	.word	0x40007c00
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800b404:	f7fe feca 	bl	800a19c <HAL_RCC_GetPCLK1Freq>
 800b408:	6862      	ldr	r2, [r4, #4]
 800b40a:	0853      	lsrs	r3, r2, #1
 800b40c:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800b410:	fbb3 f3f2 	udiv	r3, r3, r2
 800b414:	b29b      	uxth	r3, r3
      break;
 800b416:	e029      	b.n	800b46c <UART_SetConfig+0x300>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800b418:	f7fe fed0 	bl	800a1bc <HAL_RCC_GetPCLK2Freq>
 800b41c:	6862      	ldr	r2, [r4, #4]
 800b41e:	0853      	lsrs	r3, r2, #1
 800b420:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800b424:	fbb3 f3f2 	udiv	r3, r3, r2
 800b428:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 800b42a:	2500      	movs	r5, #0
      break;
 800b42c:	e01e      	b.n	800b46c <UART_SetConfig+0x300>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800b42e:	6862      	ldr	r2, [r4, #4]
 800b430:	4b2f      	ldr	r3, [pc, #188]	@ (800b4f0 <UART_SetConfig+0x384>)
 800b432:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 800b436:	fbb3 f3f2 	udiv	r3, r3, r2
 800b43a:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 800b43c:	2500      	movs	r5, #0
      break;
 800b43e:	e015      	b.n	800b46c <UART_SetConfig+0x300>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800b440:	f7fe fda0 	bl	8009f84 <HAL_RCC_GetSysClockFreq>
 800b444:	6862      	ldr	r2, [r4, #4]
 800b446:	0853      	lsrs	r3, r2, #1
 800b448:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800b44c:	fbb3 f3f2 	udiv	r3, r3, r2
 800b450:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 800b452:	2500      	movs	r5, #0
      break;
 800b454:	e00a      	b.n	800b46c <UART_SetConfig+0x300>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800b456:	6862      	ldr	r2, [r4, #4]
 800b458:	0853      	lsrs	r3, r2, #1
 800b45a:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 800b45e:	fbb3 f3f2 	udiv	r3, r3, r2
 800b462:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 800b464:	2500      	movs	r5, #0
      break;
 800b466:	e001      	b.n	800b46c <UART_SetConfig+0x300>
    switch (clocksource)
 800b468:	2501      	movs	r5, #1
 800b46a:	2300      	movs	r3, #0
    brrtemp = usartdiv & 0xFFF0U;
 800b46c:	f023 020f 	bic.w	r2, r3, #15
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b470:	f3c3 0342 	ubfx	r3, r3, #1, #3
 800b474:	4313      	orrs	r3, r2
    huart->Instance->BRR = brrtemp;
 800b476:	6822      	ldr	r2, [r4, #0]
 800b478:	60d3      	str	r3, [r2, #12]
    }
  }

  return ret;

}
 800b47a:	4628      	mov	r0, r5
 800b47c:	bd38      	pop	{r3, r4, r5, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800b47e:	f7fe fe8d 	bl	800a19c <HAL_RCC_GetPCLK1Freq>
 800b482:	6862      	ldr	r2, [r4, #4]
 800b484:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 800b488:	fbb3 f3f2 	udiv	r3, r3, r2
 800b48c:	6822      	ldr	r2, [r4, #0]
 800b48e:	b29b      	uxth	r3, r3
 800b490:	60d3      	str	r3, [r2, #12]
      break;
 800b492:	e7f2      	b.n	800b47a <UART_SetConfig+0x30e>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800b494:	f7fe fe92 	bl	800a1bc <HAL_RCC_GetPCLK2Freq>
 800b498:	6862      	ldr	r2, [r4, #4]
 800b49a:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 800b49e:	fbb3 f3f2 	udiv	r3, r3, r2
 800b4a2:	6822      	ldr	r2, [r4, #0]
 800b4a4:	b29b      	uxth	r3, r3
 800b4a6:	60d3      	str	r3, [r2, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 800b4a8:	2500      	movs	r5, #0
      break;
 800b4aa:	e7e6      	b.n	800b47a <UART_SetConfig+0x30e>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800b4ac:	6861      	ldr	r1, [r4, #4]
 800b4ae:	4a11      	ldr	r2, [pc, #68]	@ (800b4f4 <UART_SetConfig+0x388>)
 800b4b0:	eb02 0251 	add.w	r2, r2, r1, lsr #1
 800b4b4:	fbb2 f2f1 	udiv	r2, r2, r1
 800b4b8:	b292      	uxth	r2, r2
 800b4ba:	60da      	str	r2, [r3, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 800b4bc:	2500      	movs	r5, #0
      break;
 800b4be:	e7dc      	b.n	800b47a <UART_SetConfig+0x30e>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800b4c0:	f7fe fd60 	bl	8009f84 <HAL_RCC_GetSysClockFreq>
 800b4c4:	6862      	ldr	r2, [r4, #4]
 800b4c6:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 800b4ca:	fbb3 f3f2 	udiv	r3, r3, r2
 800b4ce:	6822      	ldr	r2, [r4, #0]
 800b4d0:	b29b      	uxth	r3, r3
 800b4d2:	60d3      	str	r3, [r2, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 800b4d4:	2500      	movs	r5, #0
      break;
 800b4d6:	e7d0      	b.n	800b47a <UART_SetConfig+0x30e>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800b4d8:	6861      	ldr	r1, [r4, #4]
 800b4da:	084a      	lsrs	r2, r1, #1
 800b4dc:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 800b4e0:	fbb2 f2f1 	udiv	r2, r2, r1
 800b4e4:	b292      	uxth	r2, r2
 800b4e6:	60da      	str	r2, [r3, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 800b4e8:	2500      	movs	r5, #0
      break;
 800b4ea:	e7c6      	b.n	800b47a <UART_SetConfig+0x30e>
    switch (clocksource)
 800b4ec:	2501      	movs	r5, #1
 800b4ee:	e7c4      	b.n	800b47a <UART_SetConfig+0x30e>
 800b4f0:	01e84800 	.word	0x01e84800
 800b4f4:	00f42400 	.word	0x00f42400

0800b4f8 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b4f8:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800b4fa:	f013 0f01 	tst.w	r3, #1
 800b4fe:	d006      	beq.n	800b50e <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b500:	6802      	ldr	r2, [r0, #0]
 800b502:	6853      	ldr	r3, [r2, #4]
 800b504:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800b508:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800b50a:	430b      	orrs	r3, r1
 800b50c:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b50e:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800b510:	f013 0f02 	tst.w	r3, #2
 800b514:	d006      	beq.n	800b524 <UART_AdvFeatureConfig+0x2c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b516:	6802      	ldr	r2, [r0, #0]
 800b518:	6853      	ldr	r3, [r2, #4]
 800b51a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b51e:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 800b520:	430b      	orrs	r3, r1
 800b522:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b524:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800b526:	f013 0f04 	tst.w	r3, #4
 800b52a:	d006      	beq.n	800b53a <UART_AdvFeatureConfig+0x42>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b52c:	6802      	ldr	r2, [r0, #0]
 800b52e:	6853      	ldr	r3, [r2, #4]
 800b530:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800b534:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 800b536:	430b      	orrs	r3, r1
 800b538:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b53a:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800b53c:	f013 0f08 	tst.w	r3, #8
 800b540:	d006      	beq.n	800b550 <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b542:	6802      	ldr	r2, [r0, #0]
 800b544:	6853      	ldr	r3, [r2, #4]
 800b546:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800b54a:	6b41      	ldr	r1, [r0, #52]	@ 0x34
 800b54c:	430b      	orrs	r3, r1
 800b54e:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b550:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800b552:	f013 0f10 	tst.w	r3, #16
 800b556:	d006      	beq.n	800b566 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b558:	6802      	ldr	r2, [r0, #0]
 800b55a:	6893      	ldr	r3, [r2, #8]
 800b55c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b560:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 800b562:	430b      	orrs	r3, r1
 800b564:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b566:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800b568:	f013 0f20 	tst.w	r3, #32
 800b56c:	d006      	beq.n	800b57c <UART_AdvFeatureConfig+0x84>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b56e:	6802      	ldr	r2, [r0, #0]
 800b570:	6893      	ldr	r3, [r2, #8]
 800b572:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800b576:	6bc1      	ldr	r1, [r0, #60]	@ 0x3c
 800b578:	430b      	orrs	r3, r1
 800b57a:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b57c:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800b57e:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800b582:	d00a      	beq.n	800b59a <UART_AdvFeatureConfig+0xa2>
  {
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b584:	6802      	ldr	r2, [r0, #0]
 800b586:	6853      	ldr	r3, [r2, #4]
 800b588:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800b58c:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 800b58e:	430b      	orrs	r3, r1
 800b590:	6053      	str	r3, [r2, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b592:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800b594:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b598:	d00b      	beq.n	800b5b2 <UART_AdvFeatureConfig+0xba>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b59a:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800b59c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b5a0:	d006      	beq.n	800b5b0 <UART_AdvFeatureConfig+0xb8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b5a2:	6802      	ldr	r2, [r0, #0]
 800b5a4:	6853      	ldr	r3, [r2, #4]
 800b5a6:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 800b5aa:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 800b5ac:	430b      	orrs	r3, r1
 800b5ae:	6053      	str	r3, [r2, #4]
  }
}
 800b5b0:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b5b2:	6802      	ldr	r2, [r0, #0]
 800b5b4:	6853      	ldr	r3, [r2, #4]
 800b5b6:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800b5ba:	6c41      	ldr	r1, [r0, #68]	@ 0x44
 800b5bc:	430b      	orrs	r3, r1
 800b5be:	6053      	str	r3, [r2, #4]
 800b5c0:	e7eb      	b.n	800b59a <UART_AdvFeatureConfig+0xa2>

0800b5c2 <UART_CheckIdleState>:
  * @brief Check the UART Idle State
  * @param huart uart handle
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b5c2:	b510      	push	{r4, lr}
 800b5c4:	b082      	sub	sp, #8
 800b5c6:	4604      	mov	r4, r0
  uint32_t tickstart = 0U;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b5c8:	2300      	movs	r3, #0
 800b5ca:	66c3      	str	r3, [r0, #108]	@ 0x6c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800b5cc:	f7fd f98e 	bl	80088ec <HAL_GetTick>

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b5d0:	6823      	ldr	r3, [r4, #0]
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	f013 0f08 	tst.w	r3, #8
 800b5d8:	d109      	bne.n	800b5ee <UART_CheckIdleState+0x2c>
      return HAL_TIMEOUT;
    }
  }

  /* Initialize the UART State */
  huart->gState= HAL_UART_STATE_READY;
 800b5da:	2320      	movs	r3, #32
 800b5dc:	f884 3069 	strb.w	r3, [r4, #105]	@ 0x69
  huart->RxState= HAL_UART_STATE_READY;
 800b5e0:	f884 306a 	strb.w	r3, [r4, #106]	@ 0x6a

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b5e4:	2000      	movs	r0, #0
 800b5e6:	f884 0068 	strb.w	r0, [r4, #104]	@ 0x68

  return HAL_OK;
}
 800b5ea:	b002      	add	sp, #8
 800b5ec:	bd10      	pop	{r4, pc}
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b5ee:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b5f2:	9300      	str	r3, [sp, #0]
 800b5f4:	4603      	mov	r3, r0
 800b5f6:	2200      	movs	r2, #0
 800b5f8:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800b5fc:	4620      	mov	r0, r4
 800b5fe:	f7ff fc97 	bl	800af30 <UART_WaitOnFlagUntilTimeout>
 800b602:	2800      	cmp	r0, #0
 800b604:	d0e9      	beq.n	800b5da <UART_CheckIdleState+0x18>
      return HAL_TIMEOUT;
 800b606:	2003      	movs	r0, #3
 800b608:	e7ef      	b.n	800b5ea <UART_CheckIdleState+0x28>

0800b60a <HAL_UART_Init>:
  if(huart == NULL)
 800b60a:	b378      	cbz	r0, 800b66c <HAL_UART_Init+0x62>
{
 800b60c:	b510      	push	{r4, lr}
 800b60e:	4604      	mov	r4, r0
  if(huart->gState == HAL_UART_STATE_RESET)
 800b610:	f890 3069 	ldrb.w	r3, [r0, #105]	@ 0x69
 800b614:	b30b      	cbz	r3, 800b65a <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 800b616:	2324      	movs	r3, #36	@ 0x24
 800b618:	f884 3069 	strb.w	r3, [r4, #105]	@ 0x69
  __HAL_UART_DISABLE(huart);
 800b61c:	6822      	ldr	r2, [r4, #0]
 800b61e:	6813      	ldr	r3, [r2, #0]
 800b620:	f023 0301 	bic.w	r3, r3, #1
 800b624:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b626:	4620      	mov	r0, r4
 800b628:	f7ff fda0 	bl	800b16c <UART_SetConfig>
 800b62c:	2801      	cmp	r0, #1
 800b62e:	d013      	beq.n	800b658 <HAL_UART_Init+0x4e>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b630:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800b632:	b9bb      	cbnz	r3, 800b664 <HAL_UART_Init+0x5a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b634:	6822      	ldr	r2, [r4, #0]
 800b636:	6853      	ldr	r3, [r2, #4]
 800b638:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 800b63c:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b63e:	6822      	ldr	r2, [r4, #0]
 800b640:	6893      	ldr	r3, [r2, #8]
 800b642:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 800b646:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 800b648:	6822      	ldr	r2, [r4, #0]
 800b64a:	6813      	ldr	r3, [r2, #0]
 800b64c:	f043 0301 	orr.w	r3, r3, #1
 800b650:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 800b652:	4620      	mov	r0, r4
 800b654:	f7ff ffb5 	bl	800b5c2 <UART_CheckIdleState>
}
 800b658:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 800b65a:	f880 3068 	strb.w	r3, [r0, #104]	@ 0x68
    HAL_UART_MspInit(huart);
 800b65e:	f004 f8f1 	bl	800f844 <HAL_UART_MspInit>
 800b662:	e7d8      	b.n	800b616 <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 800b664:	4620      	mov	r0, r4
 800b666:	f7ff ff47 	bl	800b4f8 <UART_AdvFeatureConfig>
 800b66a:	e7e3      	b.n	800b634 <HAL_UART_Init+0x2a>
    return HAL_ERROR;
 800b66c:	2001      	movs	r0, #1
}
 800b66e:	4770      	bx	lr

0800b670 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800b670:	b430      	push	{r4, r5}
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800b672:	680b      	ldr	r3, [r1, #0]
 800b674:	2b01      	cmp	r3, #1
 800b676:	d018      	beq.n	800b6aa <FMC_SDRAM_Init+0x3a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800b678:	6803      	ldr	r3, [r0, #0]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800b67a:	4a19      	ldr	r2, [pc, #100]	@ (800b6e0 <FMC_SDRAM_Init+0x70>)
 800b67c:	401a      	ands	r2, r3
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b67e:	684b      	ldr	r3, [r1, #4]
                        Init->RowBitsNumber      |\
 800b680:	688c      	ldr	r4, [r1, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b682:	4323      	orrs	r3, r4
                        Init->MemoryDataWidth    |\
 800b684:	68cc      	ldr	r4, [r1, #12]
                        Init->RowBitsNumber      |\
 800b686:	4323      	orrs	r3, r4
                        Init->InternalBankNumber |\
 800b688:	690c      	ldr	r4, [r1, #16]
                        Init->MemoryDataWidth    |\
 800b68a:	4323      	orrs	r3, r4
                        Init->CASLatency         |\
 800b68c:	694c      	ldr	r4, [r1, #20]
                        Init->InternalBankNumber |\
 800b68e:	4323      	orrs	r3, r4
                        Init->WriteProtection    |\
 800b690:	698c      	ldr	r4, [r1, #24]
                        Init->CASLatency         |\
 800b692:	4323      	orrs	r3, r4
                        Init->SDClockPeriod      |\
 800b694:	69cc      	ldr	r4, [r1, #28]
                        Init->WriteProtection    |\
 800b696:	4323      	orrs	r3, r4
                        Init->ReadBurst          |\
 800b698:	6a0c      	ldr	r4, [r1, #32]
                        Init->SDClockPeriod      |\
 800b69a:	4323      	orrs	r3, r4
                        Init->ReadPipeDelay
 800b69c:	6a49      	ldr	r1, [r1, #36]	@ 0x24
                        Init->ReadBurst          |\
 800b69e:	430b      	orrs	r3, r1
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b6a0:	4313      	orrs	r3, r2
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800b6a2:	6003      	str	r3, [r0, #0]
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
  }
  
  return HAL_OK;
}
 800b6a4:	2000      	movs	r0, #0
 800b6a6:	bc30      	pop	{r4, r5}
 800b6a8:	4770      	bx	lr
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800b6aa:	6804      	ldr	r4, [r0, #0]
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 800b6ac:	f424 44f8 	bic.w	r4, r4, #31744	@ 0x7c00
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800b6b0:	69cb      	ldr	r3, [r1, #28]
                        Init->ReadBurst          |\
 800b6b2:	6a0a      	ldr	r2, [r1, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800b6b4:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 800b6b6:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
                        Init->ReadBurst          |\
 800b6b8:	431a      	orrs	r2, r3
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800b6ba:	4322      	orrs	r2, r4
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800b6bc:	6843      	ldr	r3, [r0, #4]
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800b6be:	4c08      	ldr	r4, [pc, #32]	@ (800b6e0 <FMC_SDRAM_Init+0x70>)
 800b6c0:	401c      	ands	r4, r3
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b6c2:	684b      	ldr	r3, [r1, #4]
 800b6c4:	688d      	ldr	r5, [r1, #8]
 800b6c6:	432b      	orrs	r3, r5
                       Init->RowBitsNumber       |\
 800b6c8:	68cd      	ldr	r5, [r1, #12]
 800b6ca:	432b      	orrs	r3, r5
                       Init->MemoryDataWidth     |\
 800b6cc:	690d      	ldr	r5, [r1, #16]
 800b6ce:	432b      	orrs	r3, r5
                       Init->InternalBankNumber  |\
 800b6d0:	694d      	ldr	r5, [r1, #20]
 800b6d2:	432b      	orrs	r3, r5
                       Init->WriteProtection);
 800b6d4:	6989      	ldr	r1, [r1, #24]
                       Init->CASLatency          |\
 800b6d6:	430b      	orrs	r3, r1
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b6d8:	4323      	orrs	r3, r4
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800b6da:	6002      	str	r2, [r0, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800b6dc:	6043      	str	r3, [r0, #4]
 800b6de:	e7e1      	b.n	800b6a4 <FMC_SDRAM_Init+0x34>
 800b6e0:	ffff8000 	.word	0xffff8000

0800b6e4 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800b6e4:	b510      	push	{r4, lr}
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800b6e6:	2a01      	cmp	r2, #1
 800b6e8:	d025      	beq.n	800b736 <FMC_SDRAM_Timing_Init+0x52>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800b6ea:	6882      	ldr	r2, [r0, #8]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800b6ec:	f002 4270 	and.w	r2, r2, #4026531840	@ 0xf0000000
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b6f0:	680b      	ldr	r3, [r1, #0]
 800b6f2:	3b01      	subs	r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800b6f4:	684c      	ldr	r4, [r1, #4]
 800b6f6:	f104 3cff 	add.w	ip, r4, #4294967295	@ 0xffffffff
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b6fa:	ea43 130c 	orr.w	r3, r3, ip, lsl #4
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800b6fe:	688c      	ldr	r4, [r1, #8]
 800b700:	f104 3cff 	add.w	ip, r4, #4294967295	@ 0xffffffff
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800b704:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800b708:	68cc      	ldr	r4, [r1, #12]
 800b70a:	f104 3cff 	add.w	ip, r4, #4294967295	@ 0xffffffff
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800b70e:	ea43 330c 	orr.w	r3, r3, ip, lsl #12
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800b712:	690c      	ldr	r4, [r1, #16]
 800b714:	f104 3cff 	add.w	ip, r4, #4294967295	@ 0xffffffff
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800b718:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
                       (((Timing->RPDelay)-1) << 20)             |\
 800b71c:	694c      	ldr	r4, [r1, #20]
 800b71e:	f104 3cff 	add.w	ip, r4, #4294967295	@ 0xffffffff
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800b722:	ea43 530c 	orr.w	r3, r3, ip, lsl #20
                       (((Timing->RCDDelay)-1) << 24));
 800b726:	6989      	ldr	r1, [r1, #24]
 800b728:	3901      	subs	r1, #1
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b72a:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800b72e:	4313      	orrs	r3, r2
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800b730:	6083      	str	r3, [r0, #8]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
  }
  
  return HAL_OK;
}
 800b732:	2000      	movs	r0, #0
 800b734:	bd10      	pop	{r4, pc}
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800b736:	6883      	ldr	r3, [r0, #8]
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800b738:	4c13      	ldr	r4, [pc, #76]	@ (800b788 <FMC_SDRAM_Timing_Init+0xa4>)
 800b73a:	401c      	ands	r4, r3
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800b73c:	68cb      	ldr	r3, [r1, #12]
 800b73e:	f103 3cff 	add.w	ip, r3, #4294967295	@ 0xffffffff
                        (((Timing->RPDelay)-1) << 20)); 
 800b742:	694b      	ldr	r3, [r1, #20]
 800b744:	1e5a      	subs	r2, r3, #1
 800b746:	0512      	lsls	r2, r2, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800b748:	ea42 320c 	orr.w	r2, r2, ip, lsl #12
 800b74c:	4322      	orrs	r2, r4
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800b74e:	68c3      	ldr	r3, [r0, #12]
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800b750:	f003 4c70 	and.w	ip, r3, #4026531840	@ 0xf0000000
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b754:	680b      	ldr	r3, [r1, #0]
 800b756:	3b01      	subs	r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800b758:	684c      	ldr	r4, [r1, #4]
 800b75a:	f104 3eff 	add.w	lr, r4, #4294967295	@ 0xffffffff
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b75e:	ea43 130e 	orr.w	r3, r3, lr, lsl #4
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800b762:	688c      	ldr	r4, [r1, #8]
 800b764:	f104 3eff 	add.w	lr, r4, #4294967295	@ 0xffffffff
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800b768:	ea43 230e 	orr.w	r3, r3, lr, lsl #8
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 800b76c:	690c      	ldr	r4, [r1, #16]
 800b76e:	f104 3eff 	add.w	lr, r4, #4294967295	@ 0xffffffff
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800b772:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
                       (((Timing->RCDDelay)-1) << 24));   
 800b776:	6989      	ldr	r1, [r1, #24]
 800b778:	3901      	subs	r1, #1
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b77a:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800b77e:	ea43 030c 	orr.w	r3, r3, ip
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800b782:	6082      	str	r2, [r0, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800b784:	60c3      	str	r3, [r0, #12]
 800b786:	e7d4      	b.n	800b732 <FMC_SDRAM_Timing_Init+0x4e>
 800b788:	ff0f0fff 	.word	0xff0f0fff

0800b78c <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800b78c:	b410      	push	{r4}
 800b78e:	b083      	sub	sp, #12
 800b790:	4602      	mov	r2, r0
  __IO uint32_t tmpr = 0;
 800b792:	2000      	movs	r0, #0
 800b794:	9001      	str	r0, [sp, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800b796:	680b      	ldr	r3, [r1, #0]
 800b798:	684c      	ldr	r4, [r1, #4]
 800b79a:	4323      	orrs	r3, r4
                    (Command->CommandTarget)                |\
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 800b79c:	688c      	ldr	r4, [r1, #8]
 800b79e:	f104 3cff 	add.w	ip, r4, #4294967295	@ 0xffffffff
                    (Command->CommandTarget)                |\
 800b7a2:	ea43 134c 	orr.w	r3, r3, ip, lsl #5
                    ((Command->ModeRegisterDefinition) << 9)
 800b7a6:	68c9      	ldr	r1, [r1, #12]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800b7a8:	ea43 2341 	orr.w	r3, r3, r1, lsl #9
 800b7ac:	9301      	str	r3, [sp, #4]
                    );
    
  Device->SDCMR = tmpr;
 800b7ae:	9b01      	ldr	r3, [sp, #4]
 800b7b0:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
}
 800b7b2:	b003      	add	sp, #12
 800b7b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b7b8:	4770      	bx	lr

0800b7ba <FMC_SDRAM_ProgramRefreshRate>:
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 800b7ba:	6943      	ldr	r3, [r0, #20]
 800b7bc:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 800b7c0:	6143      	str	r3, [r0, #20]
  
  return HAL_OK;   
}
 800b7c2:	2000      	movs	r0, #0
 800b7c4:	4770      	bx	lr
	...

0800b7c8 <_ZN11JPEGDecoder14pjpeg_callbackEPhhS0_Pv>:
}

uint8_t JPEGDecoder::pjpeg_callback(uint8_t *pBuf, uint8_t buf_size,
                                    uint8_t *pBytes_actually_read,
                                    void *pCallback_data) {
  JPEGDecoder *thisPtr = JpegDec.thisPtr;
 800b7c8:	4b0f      	ldr	r3, [pc, #60]	@ (800b808 <_ZN11JPEGDecoder14pjpeg_callbackEPhhS0_Pv+0x40>)
 800b7ca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
                                    void *pCallback_data) {
 800b7cc:	b530      	push	{r4, r5, lr}
uint8_t JPEGDecoder::pjpeg_need_bytes_callback(uint8_t *pBuf, uint8_t buf_size,
                                               uint8_t *pBytes_actually_read,
                                               void *pCallback_data) {
  uint n;

  n = jpg_min(g_nInFileSize - g_nInFileOfs, buf_size);
 800b7ce:	e9d3 450f 	ldrd	r4, r5, [r3, #60]	@ 0x3c
 800b7d2:	1b64      	subs	r4, r4, r5
 800b7d4:	42a1      	cmp	r1, r4
 800b7d6:	bf28      	it	cs
 800b7d8:	4621      	movcs	r1, r4

  if (jpg_source == JPEG_ARRAY) {
 800b7da:	f893 4059 	ldrb.w	r4, [r3, #89]	@ 0x59
 800b7de:	b96c      	cbnz	r4, 800b7fc <_ZN11JPEGDecoder14pjpeg_callbackEPhhS0_Pv+0x34>
    for (int i = 0; i < n; i++) {
 800b7e0:	b161      	cbz	r1, 800b7fc <_ZN11JPEGDecoder14pjpeg_callbackEPhhS0_Pv+0x34>
 800b7e2:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 800b7e6:	4408      	add	r0, r1
 800b7e8:	f100 3eff 	add.w	lr, r0, #4294967295	@ 0xffffffff
      pBuf[i] = *jpg_data++;
 800b7ec:	6dd8      	ldr	r0, [r3, #92]	@ 0x5c
 800b7ee:	1c44      	adds	r4, r0, #1
 800b7f0:	65dc      	str	r4, [r3, #92]	@ 0x5c
 800b7f2:	7800      	ldrb	r0, [r0, #0]
 800b7f4:	f80c 0f01 	strb.w	r0, [ip, #1]!
    for (int i = 0; i < n; i++) {
 800b7f8:	45f4      	cmp	ip, lr
 800b7fa:	d1f7      	bne.n	800b7ec <_ZN11JPEGDecoder14pjpeg_callbackEPhhS0_Pv+0x24>
#if defined(LOAD_SD_LIBRARY) || defined(LOAD_SDFAT_LIBRARY)
  if (jpg_source == JPEG_SD_FILE)
    g_pInFileSd.read(pBuf, n);
#endif

  *pBytes_actually_read = (uint8_t)(n);
 800b7fc:	7011      	strb	r1, [r2, #0]
}
 800b7fe:	2000      	movs	r0, #0
  g_nInFileOfs += n;
 800b800:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b802:	440a      	add	r2, r1
 800b804:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800b806:	bd30      	pop	{r4, r5, pc}
 800b808:	20008d48 	.word	0x20008d48

0800b80c <_ZN11JPEGDecoder4readEv>:

int JPEGDecoder::read(void) {
  int y, x;
  uint16_t *pDst_row;

  if (is_available == 0 || mcu_y >= image_info.m_MCUSPerCol) {
 800b80c:	6b03      	ldr	r3, [r0, #48]	@ 0x30
int JPEGDecoder::read(void) {
 800b80e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b812:	4604      	mov	r4, r0
 800b814:	b095      	sub	sp, #84	@ 0x54
    abort();
    return 0;
  }

  pDst_row = pImage;
 800b816:	6e00      	ldr	r0, [r0, #96]	@ 0x60
  if (is_available == 0 || mcu_y >= image_info.m_MCUSPerCol) {
 800b818:	2b00      	cmp	r3, #0
 800b81a:	f000 8142 	beq.w	800baa2 <_ZN11JPEGDecoder4readEv+0x296>
 800b81e:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
 800b820:	6963      	ldr	r3, [r4, #20]
 800b822:	429d      	cmp	r5, r3
 800b824:	f280 813d 	bge.w	800baa2 <_ZN11JPEGDecoder4readEv+0x296>
  for (y = 0; y < image_info.m_MCUHeight; y += 8) {
 800b828:	6a23      	ldr	r3, [r4, #32]
      }
    }
    pDst_row += (row_pitch * 8);
  }

  MCUx = mcu_x;
 800b82a:	6b66      	ldr	r6, [r4, #52]	@ 0x34
  for (y = 0; y < image_info.m_MCUHeight; y += 8) {
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	f340 8122 	ble.w	800ba76 <_ZN11JPEGDecoder4readEv+0x26a>
    for (x = 0; x < image_info.m_MCUWidth; x += 8) {
 800b832:	69e2      	ldr	r2, [r4, #28]
        jpg_min(8, image_info.m_height - (mcu_y * image_info.m_MCUHeight + y));
 800b834:	fb03 f705 	mul.w	r7, r3, r5
    pDst_row += (row_pitch * 8);
 800b838:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800b83a:	2a00      	cmp	r2, #0
        jpg_min(8, image_info.m_height - (mcu_y * image_info.m_MCUHeight + y));
 800b83c:	f8d4 e008 	ldr.w	lr, [r4, #8]
    pDst_row += (row_pitch * 8);
 800b840:	ea4f 1c01 	mov.w	ip, r1, lsl #4
 800b844:	f340 8117 	ble.w	800ba76 <_ZN11JPEGDecoder4readEv+0x26a>
 800b848:	3b01      	subs	r3, #1
 800b84a:	ebae 0707 	sub.w	r7, lr, r7
            *pDst++ = (*pSrcR & 0xF8) << 8 | (*pSrcR & 0xFC) << 3 | *pSrcR >> 3;
 800b84e:	9413      	str	r4, [sp, #76]	@ 0x4c
 800b850:	08db      	lsrs	r3, r3, #3
 800b852:	9702      	str	r7, [sp, #8]
 800b854:	f8df 9368 	ldr.w	r9, [pc, #872]	@ 800bbc0 <_ZN11JPEGDecoder4readEv+0x3b4>
          pDst_block += row_pitch;
 800b858:	004f      	lsls	r7, r1, #1
 800b85a:	3301      	adds	r3, #1
            *pDst++ = (*pSrcR & 0xF8) << 8 | (*pSrcR & 0xFC) << 3 | *pSrcR >> 3;
 800b85c:	9511      	str	r5, [sp, #68]	@ 0x44
 800b85e:	f8cd c038 	str.w	ip, [sp, #56]	@ 0x38
 800b862:	ea4f 1e03 	mov.w	lr, r3, lsl #4
 800b866:	1e53      	subs	r3, r2, #1
 800b868:	9612      	str	r6, [sp, #72]	@ 0x48
 800b86a:	08db      	lsrs	r3, r3, #3
 800b86c:	f8cd e03c 	str.w	lr, [sp, #60]	@ 0x3c
 800b870:	3301      	adds	r3, #1
 800b872:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800b876:	6863      	ldr	r3, [r4, #4]
 800b878:	fb06 3312 	mls	r3, r6, r2, r3
          pDst_block += row_pitch;
 800b87c:	2200      	movs	r2, #0
            *pDst++ = (*pSrcR & 0xF8) << 8 | (*pSrcR & 0xFC) << 3 | *pSrcR >> 3;
 800b87e:	f8cd 8040 	str.w	r8, [sp, #64]	@ 0x40
 800b882:	930d      	str	r3, [sp, #52]	@ 0x34
      const uint8_t *pSrcR = image_info.m_pMCUBufR + src_ofs;
 800b884:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800b886:	930a      	str	r3, [sp, #40]	@ 0x28
      const uint8_t *pSrcG = image_info.m_pMCUBufG + src_ofs;
 800b888:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800b88a:	930b      	str	r3, [sp, #44]	@ 0x2c
      const uint8_t *pSrcB = image_info.m_pMCUBufB + src_ofs;
 800b88c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800b88e:	930c      	str	r3, [sp, #48]	@ 0x30
      if (image_info.m_scanType == PJPG_GRAYSCALE) {
 800b890:	7e23      	ldrb	r3, [r4, #24]
            *pDst++ = (*pSrcR & 0xF8) << 8 | (*pSrcR & 0xFC) << 3 | *pSrcR >> 3;
 800b892:	4614      	mov	r4, r2
      if (image_info.m_scanType == PJPG_GRAYSCALE) {
 800b894:	9301      	str	r3, [sp, #4]
          pDst_block += row_pitch;
 800b896:	4613      	mov	r3, r2
            *pDst++ = (*pSrcR & 0xF8) << 8 | (*pSrcR & 0xFC) << 3 | *pSrcR >> 3;
 800b898:	4602      	mov	r2, r0
    const int by_limit =
 800b89a:	9902      	ldr	r1, [sp, #8]
 800b89c:	4692      	mov	sl, r2
 800b89e:	9309      	str	r3, [sp, #36]	@ 0x24
 800b8a0:	2908      	cmp	r1, #8
 800b8a2:	bfa8      	it	ge
 800b8a4:	2108      	movge	r1, #8
 800b8a6:	468e      	mov	lr, r1
    for (x = 0; x < image_info.m_MCUWidth; x += 8) {
 800b8a8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b8aa:	eb01 0b03 	add.w	fp, r1, r3
 800b8ae:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b8b0:	18c8      	adds	r0, r1, r3
 800b8b2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800b8b4:	4419      	add	r1, r3
 800b8b6:	9100      	str	r1, [sp, #0]
 800b8b8:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800b8ba:	4411      	add	r1, r2
 800b8bc:	9103      	str	r1, [sp, #12]
    const int by_limit =
 800b8be:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800b8c0:	e9cd 2407 	strd	r2, r4, [sp, #28]
      const int bx_limit =
 800b8c4:	2908      	cmp	r1, #8
      if (image_info.m_scanType == PJPG_GRAYSCALE) {
 800b8c6:	9c01      	ldr	r4, [sp, #4]
      const int bx_limit =
 800b8c8:	468c      	mov	ip, r1
      uint16_t *pDst_block = pDst_row + x;
 800b8ca:	4652      	mov	r2, sl
      const uint8_t *pSrcR = image_info.m_pMCUBufR + src_ofs;
 800b8cc:	465b      	mov	r3, fp
      const int bx_limit =
 800b8ce:	bfa8      	it	ge
 800b8d0:	f04f 0c08 	movge.w	ip, #8
      if (image_info.m_scanType == PJPG_GRAYSCALE) {
 800b8d4:	2c00      	cmp	r4, #0
 800b8d6:	f000 80f1 	beq.w	800babc <_ZN11JPEGDecoder4readEv+0x2b0>
        for (by = 0; by < by_limit; by++) {
 800b8da:	9c02      	ldr	r4, [sp, #8]
 800b8dc:	2c00      	cmp	r4, #0
 800b8de:	f340 80ac 	ble.w	800ba3a <_ZN11JPEGDecoder4readEv+0x22e>
 800b8e2:	2900      	cmp	r1, #0
      const uint8_t *pSrcG = image_info.m_pMCUBufG + src_ofs;
 800b8e4:	4604      	mov	r4, r0
      const uint8_t *pSrcB = image_info.m_pMCUBufB + src_ofs;
 800b8e6:	9d00      	ldr	r5, [sp, #0]
          pSrcR += (8 - bx_limit);
 800b8e8:	f1cc 0808 	rsb	r8, ip, #8
 800b8ec:	f340 80a5 	ble.w	800ba3a <_ZN11JPEGDecoder4readEv+0x22e>
        for (by = 0; by < by_limit; by++) {
 800b8f0:	2600      	movs	r6, #0
 800b8f2:	f8cd a018 	str.w	sl, [sp, #24]
 800b8f6:	e9cd 0b04 	strd	r0, fp, [sp, #16]
            *pDst++ = (*pSrcR & 0xF8) << 8 | (*pSrcG & 0xFC) << 3 | *pSrcB >> 3;
 800b8fa:	f894 a000 	ldrb.w	sl, [r4]
          for (bx = 0; bx < bx_limit; bx++) {
 800b8fe:	2901      	cmp	r1, #1
            *pDst++ = (*pSrcR & 0xF8) << 8 | (*pSrcG & 0xFC) << 3 | *pSrcB >> 3;
 800b900:	7818      	ldrb	r0, [r3, #0]
 800b902:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 800b906:	f895 b000 	ldrb.w	fp, [r5]
 800b90a:	ea09 2000 	and.w	r0, r9, r0, lsl #8
 800b90e:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 800b912:	ea40 000a 	orr.w	r0, r0, sl
 800b916:	ea40 00db 	orr.w	r0, r0, fp, lsr #3
 800b91a:	8010      	strh	r0, [r2, #0]
          for (bx = 0; bx < bx_limit; bx++) {
 800b91c:	dd7b      	ble.n	800ba16 <_ZN11JPEGDecoder4readEv+0x20a>
            *pDst++ = (*pSrcR & 0xF8) << 8 | (*pSrcG & 0xFC) << 3 | *pSrcB >> 3;
 800b91e:	f894 a001 	ldrb.w	sl, [r4, #1]
          for (bx = 0; bx < bx_limit; bx++) {
 800b922:	2902      	cmp	r1, #2
            *pDst++ = (*pSrcR & 0xF8) << 8 | (*pSrcG & 0xFC) << 3 | *pSrcB >> 3;
 800b924:	7858      	ldrb	r0, [r3, #1]
 800b926:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 800b92a:	f895 b001 	ldrb.w	fp, [r5, #1]
 800b92e:	ea09 2000 	and.w	r0, r9, r0, lsl #8
 800b932:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 800b936:	ea40 000a 	orr.w	r0, r0, sl
 800b93a:	ea40 00db 	orr.w	r0, r0, fp, lsr #3
 800b93e:	8050      	strh	r0, [r2, #2]
          for (bx = 0; bx < bx_limit; bx++) {
 800b940:	dd69      	ble.n	800ba16 <_ZN11JPEGDecoder4readEv+0x20a>
            *pDst++ = (*pSrcR & 0xF8) << 8 | (*pSrcG & 0xFC) << 3 | *pSrcB >> 3;
 800b942:	f894 a002 	ldrb.w	sl, [r4, #2]
          for (bx = 0; bx < bx_limit; bx++) {
 800b946:	2903      	cmp	r1, #3
            *pDst++ = (*pSrcR & 0xF8) << 8 | (*pSrcG & 0xFC) << 3 | *pSrcB >> 3;
 800b948:	7898      	ldrb	r0, [r3, #2]
 800b94a:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 800b94e:	f895 b002 	ldrb.w	fp, [r5, #2]
 800b952:	ea09 2000 	and.w	r0, r9, r0, lsl #8
 800b956:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 800b95a:	ea40 000a 	orr.w	r0, r0, sl
 800b95e:	ea40 00db 	orr.w	r0, r0, fp, lsr #3
 800b962:	8090      	strh	r0, [r2, #4]
          for (bx = 0; bx < bx_limit; bx++) {
 800b964:	dd57      	ble.n	800ba16 <_ZN11JPEGDecoder4readEv+0x20a>
            *pDst++ = (*pSrcR & 0xF8) << 8 | (*pSrcG & 0xFC) << 3 | *pSrcB >> 3;
 800b966:	f894 a003 	ldrb.w	sl, [r4, #3]
          for (bx = 0; bx < bx_limit; bx++) {
 800b96a:	2904      	cmp	r1, #4
            *pDst++ = (*pSrcR & 0xF8) << 8 | (*pSrcG & 0xFC) << 3 | *pSrcB >> 3;
 800b96c:	78d8      	ldrb	r0, [r3, #3]
 800b96e:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 800b972:	f895 b003 	ldrb.w	fp, [r5, #3]
 800b976:	ea09 2000 	and.w	r0, r9, r0, lsl #8
 800b97a:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 800b97e:	ea40 000a 	orr.w	r0, r0, sl
 800b982:	ea40 00db 	orr.w	r0, r0, fp, lsr #3
 800b986:	80d0      	strh	r0, [r2, #6]
          for (bx = 0; bx < bx_limit; bx++) {
 800b988:	dd45      	ble.n	800ba16 <_ZN11JPEGDecoder4readEv+0x20a>
            *pDst++ = (*pSrcR & 0xF8) << 8 | (*pSrcG & 0xFC) << 3 | *pSrcB >> 3;
 800b98a:	f894 a004 	ldrb.w	sl, [r4, #4]
          for (bx = 0; bx < bx_limit; bx++) {
 800b98e:	2905      	cmp	r1, #5
            *pDst++ = (*pSrcR & 0xF8) << 8 | (*pSrcG & 0xFC) << 3 | *pSrcB >> 3;
 800b990:	7918      	ldrb	r0, [r3, #4]
 800b992:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 800b996:	f895 b004 	ldrb.w	fp, [r5, #4]
 800b99a:	ea09 2000 	and.w	r0, r9, r0, lsl #8
 800b99e:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 800b9a2:	ea40 000a 	orr.w	r0, r0, sl
 800b9a6:	ea40 00db 	orr.w	r0, r0, fp, lsr #3
 800b9aa:	8110      	strh	r0, [r2, #8]
          for (bx = 0; bx < bx_limit; bx++) {
 800b9ac:	dd33      	ble.n	800ba16 <_ZN11JPEGDecoder4readEv+0x20a>
            *pDst++ = (*pSrcR & 0xF8) << 8 | (*pSrcG & 0xFC) << 3 | *pSrcB >> 3;
 800b9ae:	f894 a005 	ldrb.w	sl, [r4, #5]
          for (bx = 0; bx < bx_limit; bx++) {
 800b9b2:	2906      	cmp	r1, #6
            *pDst++ = (*pSrcR & 0xF8) << 8 | (*pSrcG & 0xFC) << 3 | *pSrcB >> 3;
 800b9b4:	7958      	ldrb	r0, [r3, #5]
 800b9b6:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 800b9ba:	f895 b005 	ldrb.w	fp, [r5, #5]
 800b9be:	ea09 2000 	and.w	r0, r9, r0, lsl #8
 800b9c2:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 800b9c6:	ea40 000a 	orr.w	r0, r0, sl
 800b9ca:	ea40 00db 	orr.w	r0, r0, fp, lsr #3
 800b9ce:	8150      	strh	r0, [r2, #10]
          for (bx = 0; bx < bx_limit; bx++) {
 800b9d0:	dd21      	ble.n	800ba16 <_ZN11JPEGDecoder4readEv+0x20a>
            *pDst++ = (*pSrcR & 0xF8) << 8 | (*pSrcG & 0xFC) << 3 | *pSrcB >> 3;
 800b9d2:	f894 a006 	ldrb.w	sl, [r4, #6]
          for (bx = 0; bx < bx_limit; bx++) {
 800b9d6:	2907      	cmp	r1, #7
            *pDst++ = (*pSrcR & 0xF8) << 8 | (*pSrcG & 0xFC) << 3 | *pSrcB >> 3;
 800b9d8:	7998      	ldrb	r0, [r3, #6]
 800b9da:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 800b9de:	f895 b006 	ldrb.w	fp, [r5, #6]
 800b9e2:	ea09 2000 	and.w	r0, r9, r0, lsl #8
 800b9e6:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 800b9ea:	ea40 000a 	orr.w	r0, r0, sl
 800b9ee:	ea40 00db 	orr.w	r0, r0, fp, lsr #3
 800b9f2:	8190      	strh	r0, [r2, #12]
          for (bx = 0; bx < bx_limit; bx++) {
 800b9f4:	dd0f      	ble.n	800ba16 <_ZN11JPEGDecoder4readEv+0x20a>
            *pDst++ = (*pSrcR & 0xF8) << 8 | (*pSrcG & 0xFC) << 3 | *pSrcB >> 3;
 800b9f6:	f894 a007 	ldrb.w	sl, [r4, #7]
 800b9fa:	79d8      	ldrb	r0, [r3, #7]
 800b9fc:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 800ba00:	f895 b007 	ldrb.w	fp, [r5, #7]
 800ba04:	ea09 2000 	and.w	r0, r9, r0, lsl #8
 800ba08:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 800ba0c:	ea40 000a 	orr.w	r0, r0, sl
 800ba10:	ea40 00db 	orr.w	r0, r0, fp, lsr #3
 800ba14:	81d0      	strh	r0, [r2, #14]
          for (bx = 0; bx < bx_limit; bx++) {
 800ba16:	2900      	cmp	r1, #0
        for (by = 0; by < by_limit; by++) {
 800ba18:	f106 0601 	add.w	r6, r6, #1
          pDst_block += row_pitch;
 800ba1c:	443a      	add	r2, r7
 800ba1e:	bfcc      	ite	gt
 800ba20:	4660      	movgt	r0, ip
 800ba22:	2001      	movle	r0, #1
        for (by = 0; by < by_limit; by++) {
 800ba24:	45b6      	cmp	lr, r6
          pSrcR += (8 - bx_limit);
 800ba26:	4440      	add	r0, r8
 800ba28:	4403      	add	r3, r0
          pSrcG += (8 - bx_limit);
 800ba2a:	4404      	add	r4, r0
          pSrcB += (8 - bx_limit);
 800ba2c:	4405      	add	r5, r0
        for (by = 0; by < by_limit; by++) {
 800ba2e:	f73f af64 	bgt.w	800b8fa <_ZN11JPEGDecoder4readEv+0xee>
 800ba32:	f8dd a018 	ldr.w	sl, [sp, #24]
 800ba36:	e9dd 0b04 	ldrd	r0, fp, [sp, #16]
    for (x = 0; x < image_info.m_MCUWidth; x += 8) {
 800ba3a:	9b00      	ldr	r3, [sp, #0]
 800ba3c:	f10a 0a10 	add.w	sl, sl, #16
 800ba40:	3908      	subs	r1, #8
 800ba42:	f10b 0b40 	add.w	fp, fp, #64	@ 0x40
 800ba46:	3340      	adds	r3, #64	@ 0x40
 800ba48:	3040      	adds	r0, #64	@ 0x40
 800ba4a:	9300      	str	r3, [sp, #0]
 800ba4c:	9b03      	ldr	r3, [sp, #12]
 800ba4e:	4553      	cmp	r3, sl
 800ba50:	f47f af38 	bne.w	800b8c4 <_ZN11JPEGDecoder4readEv+0xb8>
    pDst_row += (row_pitch * 8);
 800ba54:	990e      	ldr	r1, [sp, #56]	@ 0x38
  for (y = 0; y < image_info.m_MCUHeight; y += 8) {
 800ba56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ba58:	e9dd 2407 	ldrd	r2, r4, [sp, #28]
 800ba5c:	3380      	adds	r3, #128	@ 0x80
    pDst_row += (row_pitch * 8);
 800ba5e:	440a      	add	r2, r1
  for (y = 0; y < image_info.m_MCUHeight; y += 8) {
 800ba60:	9902      	ldr	r1, [sp, #8]
 800ba62:	3410      	adds	r4, #16
 800ba64:	3908      	subs	r1, #8
 800ba66:	9102      	str	r1, [sp, #8]
 800ba68:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800ba6a:	42a1      	cmp	r1, r4
 800ba6c:	f47f af15 	bne.w	800b89a <_ZN11JPEGDecoder4readEv+0x8e>
 800ba70:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 800ba72:	e9dd 5611 	ldrd	r5, r6, [sp, #68]	@ 0x44
  MCUy = mcu_y;

  mcu_x++;
 800ba76:	1c73      	adds	r3, r6, #1
  if (mcu_x == image_info.m_MCUSPerRow) {
 800ba78:	6922      	ldr	r2, [r4, #16]
 800ba7a:	4293      	cmp	r3, r2
  mcu_x++;
 800ba7c:	6363      	str	r3, [r4, #52]	@ 0x34
  MCUy = mcu_y;
 800ba7e:	e9c4 6522 	strd	r6, r5, [r4, #136]	@ 0x88
  if (mcu_x == image_info.m_MCUSPerRow) {
 800ba82:	d103      	bne.n	800ba8c <_ZN11JPEGDecoder4readEv+0x280>
    mcu_x = 0;
 800ba84:	2300      	movs	r3, #0
    mcu_y++;
 800ba86:	3501      	adds	r5, #1
 800ba88:	e9c4 350d 	strd	r3, r5, [r4, #52]	@ 0x34
  status = pjpeg_decode_mcu();
 800ba8c:	f003 fd72 	bl	800f574 <pjpeg_decode_mcu>
 800ba90:	f884 0058 	strb.w	r0, [r4, #88]	@ 0x58
  if (status) {
 800ba94:	b108      	cbz	r0, 800ba9a <_ZN11JPEGDecoder4readEv+0x28e>
    is_available = 0;
 800ba96:	2300      	movs	r3, #0
 800ba98:	6323      	str	r3, [r4, #48]	@ 0x30
  }

  if (decode_mcu() == -1)
    is_available = 0;

  return 1;
 800ba9a:	2001      	movs	r0, #1
}
 800ba9c:	b015      	add	sp, #84	@ 0x54
 800ba9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
}

void JPEGDecoder::abort(void) {

  mcu_x = 0;
  mcu_y = 0;
 800baa2:	2300      	movs	r3, #0
 800baa4:	63a3      	str	r3, [r4, #56]	@ 0x38
  is_available = 0;
 800baa6:	e9c4 330c 	strd	r3, r3, [r4, #48]	@ 0x30
  if (pImage)
 800baaa:	b108      	cbz	r0, 800bab0 <_ZN11JPEGDecoder4readEv+0x2a4>
    delete[] pImage;
 800baac:	f015 fc94 	bl	80213d8 <_ZdaPv>
  pImage = NULL;
 800bab0:	2300      	movs	r3, #0
    return 0;
 800bab2:	4618      	mov	r0, r3
  pImage = NULL;
 800bab4:	6623      	str	r3, [r4, #96]	@ 0x60
}
 800bab6:	b015      	add	sp, #84	@ 0x54
 800bab8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        for (by = 0; by < by_limit; by++) {
 800babc:	9c02      	ldr	r4, [sp, #8]
 800babe:	2c00      	cmp	r4, #0
 800bac0:	ddbb      	ble.n	800ba3a <_ZN11JPEGDecoder4readEv+0x22e>
 800bac2:	2900      	cmp	r1, #0
          pSrcR += (8 - bx_limit);
 800bac4:	f1cc 0808 	rsb	r8, ip, #8
 800bac8:	ddb7      	ble.n	800ba3a <_ZN11JPEGDecoder4readEv+0x22e>
        for (by = 0; by < by_limit; by++) {
 800baca:	9d01      	ldr	r5, [sp, #4]
 800bacc:	9004      	str	r0, [sp, #16]
            *pDst++ = (*pSrcR & 0xF8) << 8 | (*pSrcR & 0xFC) << 3 | *pSrcR >> 3;
 800bace:	781c      	ldrb	r4, [r3, #0]
          for (bx = 0; bx < bx_limit; bx++) {
 800bad0:	2901      	cmp	r1, #1
            *pDst++ = (*pSrcR & 0xF8) << 8 | (*pSrcR & 0xFC) << 3 | *pSrcR >> 3;
 800bad2:	ea4f 06c4 	mov.w	r6, r4, lsl #3
 800bad6:	ea09 2004 	and.w	r0, r9, r4, lsl #8
 800bada:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 800bade:	ea40 0006 	orr.w	r0, r0, r6
 800bae2:	ea40 00d4 	orr.w	r0, r0, r4, lsr #3
 800bae6:	8010      	strh	r0, [r2, #0]
          for (bx = 0; bx < bx_limit; bx++) {
 800bae8:	dd5d      	ble.n	800bba6 <_ZN11JPEGDecoder4readEv+0x39a>
            *pDst++ = (*pSrcR & 0xF8) << 8 | (*pSrcR & 0xFC) << 3 | *pSrcR >> 3;
 800baea:	785c      	ldrb	r4, [r3, #1]
          for (bx = 0; bx < bx_limit; bx++) {
 800baec:	2902      	cmp	r1, #2
            *pDst++ = (*pSrcR & 0xF8) << 8 | (*pSrcR & 0xFC) << 3 | *pSrcR >> 3;
 800baee:	ea4f 06c4 	mov.w	r6, r4, lsl #3
 800baf2:	ea09 2004 	and.w	r0, r9, r4, lsl #8
 800baf6:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 800bafa:	ea40 0006 	orr.w	r0, r0, r6
 800bafe:	ea40 00d4 	orr.w	r0, r0, r4, lsr #3
 800bb02:	8050      	strh	r0, [r2, #2]
          for (bx = 0; bx < bx_limit; bx++) {
 800bb04:	dd4f      	ble.n	800bba6 <_ZN11JPEGDecoder4readEv+0x39a>
            *pDst++ = (*pSrcR & 0xF8) << 8 | (*pSrcR & 0xFC) << 3 | *pSrcR >> 3;
 800bb06:	789c      	ldrb	r4, [r3, #2]
          for (bx = 0; bx < bx_limit; bx++) {
 800bb08:	2903      	cmp	r1, #3
            *pDst++ = (*pSrcR & 0xF8) << 8 | (*pSrcR & 0xFC) << 3 | *pSrcR >> 3;
 800bb0a:	ea4f 00c4 	mov.w	r0, r4, lsl #3
 800bb0e:	ea09 2604 	and.w	r6, r9, r4, lsl #8
 800bb12:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 800bb16:	ea40 0006 	orr.w	r0, r0, r6
 800bb1a:	ea40 00d4 	orr.w	r0, r0, r4, lsr #3
 800bb1e:	8090      	strh	r0, [r2, #4]
          for (bx = 0; bx < bx_limit; bx++) {
 800bb20:	dd41      	ble.n	800bba6 <_ZN11JPEGDecoder4readEv+0x39a>
            *pDst++ = (*pSrcR & 0xF8) << 8 | (*pSrcR & 0xFC) << 3 | *pSrcR >> 3;
 800bb22:	78dc      	ldrb	r4, [r3, #3]
          for (bx = 0; bx < bx_limit; bx++) {
 800bb24:	2904      	cmp	r1, #4
            *pDst++ = (*pSrcR & 0xF8) << 8 | (*pSrcR & 0xFC) << 3 | *pSrcR >> 3;
 800bb26:	ea4f 00c4 	mov.w	r0, r4, lsl #3
 800bb2a:	ea09 2604 	and.w	r6, r9, r4, lsl #8
 800bb2e:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 800bb32:	ea40 0006 	orr.w	r0, r0, r6
 800bb36:	ea40 00d4 	orr.w	r0, r0, r4, lsr #3
 800bb3a:	80d0      	strh	r0, [r2, #6]
          for (bx = 0; bx < bx_limit; bx++) {
 800bb3c:	dd33      	ble.n	800bba6 <_ZN11JPEGDecoder4readEv+0x39a>
            *pDst++ = (*pSrcR & 0xF8) << 8 | (*pSrcR & 0xFC) << 3 | *pSrcR >> 3;
 800bb3e:	791c      	ldrb	r4, [r3, #4]
          for (bx = 0; bx < bx_limit; bx++) {
 800bb40:	2905      	cmp	r1, #5
            *pDst++ = (*pSrcR & 0xF8) << 8 | (*pSrcR & 0xFC) << 3 | *pSrcR >> 3;
 800bb42:	ea4f 00c4 	mov.w	r0, r4, lsl #3
 800bb46:	ea09 2604 	and.w	r6, r9, r4, lsl #8
 800bb4a:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 800bb4e:	ea40 0006 	orr.w	r0, r0, r6
 800bb52:	ea40 00d4 	orr.w	r0, r0, r4, lsr #3
 800bb56:	8110      	strh	r0, [r2, #8]
          for (bx = 0; bx < bx_limit; bx++) {
 800bb58:	dd25      	ble.n	800bba6 <_ZN11JPEGDecoder4readEv+0x39a>
            *pDst++ = (*pSrcR & 0xF8) << 8 | (*pSrcR & 0xFC) << 3 | *pSrcR >> 3;
 800bb5a:	795c      	ldrb	r4, [r3, #5]
          for (bx = 0; bx < bx_limit; bx++) {
 800bb5c:	2906      	cmp	r1, #6
            *pDst++ = (*pSrcR & 0xF8) << 8 | (*pSrcR & 0xFC) << 3 | *pSrcR >> 3;
 800bb5e:	ea4f 00c4 	mov.w	r0, r4, lsl #3
 800bb62:	ea09 2604 	and.w	r6, r9, r4, lsl #8
 800bb66:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 800bb6a:	ea40 0006 	orr.w	r0, r0, r6
 800bb6e:	ea40 00d4 	orr.w	r0, r0, r4, lsr #3
 800bb72:	8150      	strh	r0, [r2, #10]
          for (bx = 0; bx < bx_limit; bx++) {
 800bb74:	dd17      	ble.n	800bba6 <_ZN11JPEGDecoder4readEv+0x39a>
            *pDst++ = (*pSrcR & 0xF8) << 8 | (*pSrcR & 0xFC) << 3 | *pSrcR >> 3;
 800bb76:	799c      	ldrb	r4, [r3, #6]
          for (bx = 0; bx < bx_limit; bx++) {
 800bb78:	2907      	cmp	r1, #7
            *pDst++ = (*pSrcR & 0xF8) << 8 | (*pSrcR & 0xFC) << 3 | *pSrcR >> 3;
 800bb7a:	ea4f 06c4 	mov.w	r6, r4, lsl #3
 800bb7e:	ea09 2004 	and.w	r0, r9, r4, lsl #8
 800bb82:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 800bb86:	ea40 0006 	orr.w	r0, r0, r6
 800bb8a:	ea40 00d4 	orr.w	r0, r0, r4, lsr #3
 800bb8e:	8190      	strh	r0, [r2, #12]
          for (bx = 0; bx < bx_limit; bx++) {
 800bb90:	dd09      	ble.n	800bba6 <_ZN11JPEGDecoder4readEv+0x39a>
            *pDst++ = (*pSrcR & 0xF8) << 8 | (*pSrcR & 0xFC) << 3 | *pSrcR >> 3;
 800bb92:	79dc      	ldrb	r4, [r3, #7]
 800bb94:	00e6      	lsls	r6, r4, #3
 800bb96:	ea09 2004 	and.w	r0, r9, r4, lsl #8
 800bb9a:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 800bb9e:	4330      	orrs	r0, r6
 800bba0:	ea40 00d4 	orr.w	r0, r0, r4, lsr #3
 800bba4:	81d0      	strh	r0, [r2, #14]
          pSrcR += (8 - bx_limit);
 800bba6:	2900      	cmp	r1, #0
        for (by = 0; by < by_limit; by++) {
 800bba8:	f105 0501 	add.w	r5, r5, #1
          pDst_block += row_pitch;
 800bbac:	443a      	add	r2, r7
          pSrcR += (8 - bx_limit);
 800bbae:	bfcc      	ite	gt
 800bbb0:	4660      	movgt	r0, ip
 800bbb2:	2001      	movle	r0, #1
        for (by = 0; by < by_limit; by++) {
 800bbb4:	45ae      	cmp	lr, r5
          pSrcR += (8 - bx_limit);
 800bbb6:	4440      	add	r0, r8
 800bbb8:	4403      	add	r3, r0
        for (by = 0; by < by_limit; by++) {
 800bbba:	dc88      	bgt.n	800bace <_ZN11JPEGDecoder4readEv+0x2c2>
 800bbbc:	9804      	ldr	r0, [sp, #16]
 800bbbe:	e73c      	b.n	800ba3a <_ZN11JPEGDecoder4readEv+0x22e>
 800bbc0:	fffff800 	.word	0xfffff800

0800bbc4 <_ZN11JPEGDecoder11decodeArrayEPKhm>:
int JPEGDecoder::decodeArray(const uint8_t array[], uint32_t array_size) {
 800bbc4:	b570      	push	{r4, r5, r6, lr}
  jpg_source = JPEG_ARRAY;
 800bbc6:	2500      	movs	r5, #0
int JPEGDecoder::decodeArray(const uint8_t array[], uint32_t array_size) {
 800bbc8:	4604      	mov	r4, r0
  jpg_data = (uint8_t *)array;
 800bbca:	65c1      	str	r1, [r0, #92]	@ 0x5c
  g_nInFileSize = array_size;
 800bbcc:	63c2      	str	r2, [r0, #60]	@ 0x3c
  status = pjpeg_decode_init(&image_info, pjpeg_callback, NULL, 0);
 800bbce:	462b      	mov	r3, r5
  jpg_source = JPEG_ARRAY;
 800bbd0:	f880 5059 	strb.w	r5, [r0, #89]	@ 0x59
  status = pjpeg_decode_init(&image_info, pjpeg_callback, NULL, 0);
 800bbd4:	462a      	mov	r2, r5
  g_nInFileOfs = 0;
 800bbd6:	6405      	str	r5, [r0, #64]	@ 0x40
  MCUSPerCol = 0;
 800bbd8:	6785      	str	r5, [r0, #120]	@ 0x78
  scanType = (pjpeg_scan_type_t)0;
 800bbda:	f880 507c 	strb.w	r5, [r0, #124]	@ 0x7c
  status = pjpeg_decode_init(&image_info, pjpeg_callback, NULL, 0);
 800bbde:	4927      	ldr	r1, [pc, #156]	@ (800bc7c <_ZN11JPEGDecoder11decodeArrayEPKhm+0xb8>)
  height = 0;
 800bbe0:	e9c0 551a 	strd	r5, r5, [r0, #104]	@ 0x68
  MCUSPerRow = 0;
 800bbe4:	e9c0 551c 	strd	r5, r5, [r0, #112]	@ 0x70
  MCUHeight = 0;
 800bbe8:	e9c0 5520 	strd	r5, r5, [r0, #128]	@ 0x80
  status = pjpeg_decode_init(&image_info, pjpeg_callback, NULL, 0);
 800bbec:	3004      	adds	r0, #4
 800bbee:	f003 fce1 	bl	800f5b4 <pjpeg_decode_init>
 800bbf2:	f884 0058 	strb.w	r0, [r4, #88]	@ 0x58
  if (status) {
 800bbf6:	2800      	cmp	r0, #0
 800bbf8:	d13d      	bne.n	800bc76 <_ZN11JPEGDecoder11decodeArrayEPKhm+0xb2>
  decoded_height = image_info.m_height;
 800bbfa:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
  pImage = new uint16_t[image_info.m_MCUWidth * image_info.m_MCUHeight];
 800bbfe:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
  decoded_height = image_info.m_height;
 800bc02:	64e2      	str	r2, [r4, #76]	@ 0x4c
  pImage = new uint16_t[image_info.m_MCUWidth * image_info.m_MCUHeight];
 800bc04:	fb03 f000 	mul.w	r0, r3, r0
  decoded_width = image_info.m_width;
 800bc08:	e9c4 3111 	strd	r3, r1, [r4, #68]	@ 0x44
  pImage = new uint16_t[image_info.m_MCUWidth * image_info.m_MCUHeight];
 800bc0c:	4b1c      	ldr	r3, [pc, #112]	@ (800bc80 <_ZN11JPEGDecoder11decodeArrayEPKhm+0xbc>)
 800bc0e:	4298      	cmp	r0, r3
 800bc10:	bf94      	ite	ls
 800bc12:	0040      	lslls	r0, r0, #1
 800bc14:	f04f 30ff 	movhi.w	r0, #4294967295	@ 0xffffffff
 800bc18:	f015 fbe0 	bl	80213dc <_Znaj>
  memset(pImage, 0,
 800bc1c:	2100      	movs	r1, #0
  pImage = new uint16_t[image_info.m_MCUWidth * image_info.m_MCUHeight];
 800bc1e:	6620      	str	r0, [r4, #96]	@ 0x60
         image_info.m_MCUWidth * image_info.m_MCUHeight * sizeof(*pImage));
 800bc20:	e9d4 6507 	ldrd	r6, r5, [r4, #28]
 800bc24:	fb05 f206 	mul.w	r2, r5, r6
  memset(pImage, 0,
 800bc28:	0052      	lsls	r2, r2, #1
 800bc2a:	f018 f847 	bl	8023cbc <memset>
  width = decoded_width;
 800bc2e:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
  MCUSPerRow = image_info.m_MCUSPerRow;
 800bc30:	6921      	ldr	r1, [r4, #16]
  is_available = 1;
 800bc32:	2301      	movs	r3, #1
  width = decoded_width;
 800bc34:	66e2      	str	r2, [r4, #108]	@ 0x6c
  row_blocks_per_mcu = image_info.m_MCUWidth >> 3;
 800bc36:	10f2      	asrs	r2, r6, #3
  width = decoded_width;
 800bc38:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
  row_blocks_per_mcu = image_info.m_MCUWidth >> 3;
 800bc3a:	6522      	str	r2, [r4, #80]	@ 0x50
  MCUSPerCol = image_info.m_MCUSPerCol;
 800bc3c:	6962      	ldr	r2, [r4, #20]
  MCUSPerRow = image_info.m_MCUSPerRow;
 800bc3e:	6761      	str	r1, [r4, #116]	@ 0x74
  col_blocks_per_mcu = image_info.m_MCUHeight >> 3;
 800bc40:	10e9      	asrs	r1, r5, #3
  MCUSPerCol = image_info.m_MCUSPerCol;
 800bc42:	67a2      	str	r2, [r4, #120]	@ 0x78
  scanType = image_info.m_scanType;
 800bc44:	7e22      	ldrb	r2, [r4, #24]
  MCUWidth = image_info.m_MCUWidth;
 800bc46:	f8c4 6080 	str.w	r6, [r4, #128]	@ 0x80
  width = decoded_width;
 800bc4a:	66a0      	str	r0, [r4, #104]	@ 0x68
  MCUHeight = image_info.m_MCUHeight;
 800bc4c:	f8c4 5084 	str.w	r5, [r4, #132]	@ 0x84
  col_blocks_per_mcu = image_info.m_MCUHeight >> 3;
 800bc50:	6561      	str	r1, [r4, #84]	@ 0x54
  is_available = 1;
 800bc52:	6323      	str	r3, [r4, #48]	@ 0x30
  comps = 1;
 800bc54:	6723      	str	r3, [r4, #112]	@ 0x70
  scanType = image_info.m_scanType;
 800bc56:	f884 207c 	strb.w	r2, [r4, #124]	@ 0x7c
  status = pjpeg_decode_mcu();
 800bc5a:	f003 fc8b 	bl	800f574 <pjpeg_decode_mcu>
 800bc5e:	f884 0058 	strb.w	r0, [r4, #88]	@ 0x58
  if (status) {
 800bc62:	b130      	cbz	r0, 800bc72 <_ZN11JPEGDecoder11decodeArrayEPKhm+0xae>
    is_available = 0;
 800bc64:	2300      	movs	r3, #0
    if (status != PJPG_NO_MORE_BLOCKS) {
 800bc66:	2801      	cmp	r0, #1
    is_available = 0;
 800bc68:	6323      	str	r3, [r4, #48]	@ 0x30
    if (status != PJPG_NO_MORE_BLOCKS) {
 800bc6a:	d002      	beq.n	800bc72 <_ZN11JPEGDecoder11decodeArrayEPKhm+0xae>
      return -1;
 800bc6c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
 800bc70:	bd70      	pop	{r4, r5, r6, pc}
  return 1;
 800bc72:	2001      	movs	r0, #1
}
 800bc74:	bd70      	pop	{r4, r5, r6, pc}
    return 0;
 800bc76:	4628      	mov	r0, r5
}
 800bc78:	bd70      	pop	{r4, r5, r6, pc}
 800bc7a:	bf00      	nop
 800bc7c:	0800b7c9 	.word	0x0800b7c9
 800bc80:	3ffffffc 	.word	0x3ffffffc

0800bc84 <_GLOBAL__sub_I_JpegDec>:
JPEGDecoder::JPEGDecoder() {
 800bc84:	4b05      	ldr	r3, [pc, #20]	@ (800bc9c <_GLOBAL__sub_I_JpegDec+0x18>)
 800bc86:	2200      	movs	r2, #0
  is_available = 0;
 800bc88:	2000      	movs	r0, #0
 800bc8a:	2100      	movs	r1, #0
JPEGDecoder::JPEGDecoder() {
 800bc8c:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
  mcu_y = 0;
 800bc90:	639a      	str	r2, [r3, #56]	@ 0x38
  thisPtr = this;
 800bc92:	665b      	str	r3, [r3, #100]	@ 0x64
  is_available = 0;
 800bc94:	e9c3 010c 	strd	r0, r1, [r3, #48]	@ 0x30
#if defined(LOAD_SD_LIBRARY) || defined(LOAD_SDFAT_LIBRARY)
  if (jpg_source == JPEG_SD_FILE)
    if (g_pInFileSd)
      g_pInFileSd.close();
#endif
}
 800bc98:	4770      	bx	lr
 800bc9a:	bf00      	nop
 800bc9c:	20008d48 	.word	0x20008d48

0800bca0 <_GLOBAL__sub_D_JpegDec>:
  if (pImage)
 800bca0:	4b02      	ldr	r3, [pc, #8]	@ (800bcac <_GLOBAL__sub_D_JpegDec+0xc>)
 800bca2:	6e18      	ldr	r0, [r3, #96]	@ 0x60
 800bca4:	b108      	cbz	r0, 800bcaa <_GLOBAL__sub_D_JpegDec+0xa>
    delete[] pImage;
 800bca6:	f015 bb97 	b.w	80213d8 <_ZdaPv>
}
 800bcaa:	4770      	bx	lr
 800bcac:	20008d48 	.word	0x20008d48

0800bcb0 <_Z10initCamerav>:

void start_capture(void) { camWriteReg(ARDUCHIP_FIFO, FIFO_START_MASK); }

void set_format(byte fmt) { m_fmt = fmt; }

int initCamera() {
 800bcb0:	b538      	push	{r3, r4, r5, lr}
  int camrror = camSPISetup();
 800bcb2:	f000 fba7 	bl	800c404 <_Z11camSPISetupv>
 800bcb6:	4604      	mov	r4, r0
  camrror += camI2CSetup();
 800bcb8:	f000 fab0 	bl	800c21c <_Z11camI2CSetupv>
 800bcbc:	4603      	mov	r3, r0

  wrSensorReg8_8(0xff, 0x01);
 800bcbe:	2101      	movs	r1, #1
 800bcc0:	20ff      	movs	r0, #255	@ 0xff
  camrror += camI2CSetup();
 800bcc2:	441c      	add	r4, r3
  wrSensorReg8_8(0xff, 0x01);
 800bcc4:	f000 fb1c 	bl	800c300 <_Z14wrSensorReg8_8hh>

  wrSensorReg8_8(0x12, 0x80);
 800bcc8:	2180      	movs	r1, #128	@ 0x80
 800bcca:	2012      	movs	r0, #18
 800bccc:	f000 fb18 	bl	800c300 <_Z14wrSensorReg8_8hh>

  HAL_Delay(100);
 800bcd0:	2064      	movs	r0, #100	@ 0x64
 800bcd2:	f7fc fe11 	bl	80088f8 <HAL_Delay>
  if (m_fmt == JPEG) {
 800bcd6:	4b13      	ldr	r3, [pc, #76]	@ (800bd24 <_Z10initCamerav+0x74>)
 800bcd8:	781d      	ldrb	r5, [r3, #0]
 800bcda:	2d01      	cmp	r5, #1
 800bcdc:	d00a      	beq.n	800bcf4 <_Z10initCamerav+0x44>
    wrSensorReg8_8(0x15, 0x00);
    wrSensorRegs8_8(OV2640_320x240_JPEG);
    HAL_Delay(100);

  } else {
    wrSensorRegs8_8(OV2640_QVGA);
 800bcde:	4812      	ldr	r0, [pc, #72]	@ (800bd28 <_Z10initCamerav+0x78>)
 800bce0:	f000 fb24 	bl	800c32c <_Z15wrSensorRegs8_8PK10sensor_reg>
}

void OV2640_set_JPEG_size(uint8_t size) {
  switch (size) {
  case OV2640_160x120:
    wrSensorRegs8_8(OV2640_160x120_JPEG);
 800bce4:	4811      	ldr	r0, [pc, #68]	@ (800bd2c <_Z10initCamerav+0x7c>)
 800bce6:	f000 fb21 	bl	800c32c <_Z15wrSensorRegs8_8PK10sensor_reg>
  HAL_Delay(100);
 800bcea:	2064      	movs	r0, #100	@ 0x64
 800bcec:	f7fc fe04 	bl	80088f8 <HAL_Delay>
}
 800bcf0:	4620      	mov	r0, r4
 800bcf2:	bd38      	pop	{r3, r4, r5, pc}
    wrSensorRegs8_8(OV2640_JPEG_INIT);
 800bcf4:	480e      	ldr	r0, [pc, #56]	@ (800bd30 <_Z10initCamerav+0x80>)
 800bcf6:	f000 fb19 	bl	800c32c <_Z15wrSensorRegs8_8PK10sensor_reg>
    wrSensorRegs8_8(OV2640_YUV422);
 800bcfa:	480e      	ldr	r0, [pc, #56]	@ (800bd34 <_Z10initCamerav+0x84>)
 800bcfc:	f000 fb16 	bl	800c32c <_Z15wrSensorRegs8_8PK10sensor_reg>
    wrSensorRegs8_8(OV2640_JPEG);
 800bd00:	480d      	ldr	r0, [pc, #52]	@ (800bd38 <_Z10initCamerav+0x88>)
 800bd02:	f000 fb13 	bl	800c32c <_Z15wrSensorRegs8_8PK10sensor_reg>
    wrSensorReg8_8(0xff, 0x01);
 800bd06:	4629      	mov	r1, r5
 800bd08:	20ff      	movs	r0, #255	@ 0xff
 800bd0a:	f000 faf9 	bl	800c300 <_Z14wrSensorReg8_8hh>
    wrSensorReg8_8(0x15, 0x00);
 800bd0e:	2100      	movs	r1, #0
 800bd10:	2015      	movs	r0, #21
 800bd12:	f000 faf5 	bl	800c300 <_Z14wrSensorReg8_8hh>
    wrSensorRegs8_8(OV2640_320x240_JPEG);
 800bd16:	4809      	ldr	r0, [pc, #36]	@ (800bd3c <_Z10initCamerav+0x8c>)
 800bd18:	f000 fb08 	bl	800c32c <_Z15wrSensorRegs8_8PK10sensor_reg>
    HAL_Delay(100);
 800bd1c:	2064      	movs	r0, #100	@ 0x64
 800bd1e:	f7fc fdeb 	bl	80088f8 <HAL_Delay>
 800bd22:	e7df      	b.n	800bce4 <_Z10initCamerav+0x34>
 800bd24:	20000018 	.word	0x20000018
 800bd28:	0802d718 	.word	0x0802d718
 800bd2c:	0802d520 	.word	0x0802d520
 800bd30:	0802d598 	.word	0x0802d598
 800bd34:	0802d584 	.word	0x0802d584
 800bd38:	0802d570 	.word	0x0802d570
 800bd3c:	0802d4d0 	.word	0x0802d4d0

0800bd40 <_Z22DecodeandProcessAndRGBiiPaPti>:
  }
}

int DecodeandProcessAndRGB(int image_width, int image_height,
                           int8_t *image_data, uint16_t *lcd_data,
                           int scale_factor) {
 800bd40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd44:	b095      	sub	sp, #84	@ 0x54
 800bd46:	460c      	mov	r4, r1
 800bd48:	4605      	mov	r5, r0

  JpegDec.decodeArray(imgBuf, imgLength);
 800bd4a:	499c      	ldr	r1, [pc, #624]	@ (800bfbc <_Z22DecodeandProcessAndRGBiiPaPti+0x27c>)
                           int scale_factor) {
 800bd4c:	930d      	str	r3, [sp, #52]	@ 0x34
  JpegDec.decodeArray(imgBuf, imgLength);
 800bd4e:	4b9c      	ldr	r3, [pc, #624]	@ (800bfc0 <_Z22DecodeandProcessAndRGBiiPaPti+0x280>)
                           int scale_factor) {
 800bd50:	9005      	str	r0, [sp, #20]
 800bd52:	9201      	str	r2, [sp, #4]
  JpegDec.decodeArray(imgBuf, imgLength);
 800bd54:	489b      	ldr	r0, [pc, #620]	@ (800bfc4 <_Z22DecodeandProcessAndRGBiiPaPti+0x284>)
 800bd56:	681a      	ldr	r2, [r3, #0]
                           int scale_factor) {
 800bd58:	f8dd a078 	ldr.w	sl, [sp, #120]	@ 0x78
  JpegDec.decodeArray(imgBuf, imgLength);
 800bd5c:	f7ff ff32 	bl	800bbc4 <_ZN11JPEGDecoder11decodeArrayEPKhm>

  const int keep_x_mcus = image_width / JpegDec.MCUWidth;
 800bd60:	4b98      	ldr	r3, [pc, #608]	@ (800bfc4 <_Z22DecodeandProcessAndRGBiiPaPti+0x284>)
 800bd62:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
  const int keep_y_mcus = image_height / JpegDec.MCUHeight;
 800bd66:	f8d3 1084 	ldr.w	r1, [r3, #132]	@ 0x84

  const int skip_x_mcus = JpegDec.MCUSPerRow - keep_x_mcus;
 800bd6a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
  const int keep_x_mcus = image_width / JpegDec.MCUWidth;
 800bd6c:	fb95 f2f2 	sdiv	r2, r5, r2

  const int skip_start_x_mcus = skip_x_mcus / 2;
 800bd70:	1a9b      	subs	r3, r3, r2
 800bd72:	bf48      	it	mi
 800bd74:	3301      	addmi	r3, #1
  const int keep_y_mcus = image_height / JpegDec.MCUHeight;
 800bd76:	fb94 f1f1 	sdiv	r1, r4, r1

  const int skip_end_x_mcu_index = skip_start_x_mcus + keep_x_mcus;
 800bd7a:	eb02 0263 	add.w	r2, r2, r3, asr #1
  const int skip_start_x_mcus = skip_x_mcus / 2;
 800bd7e:	105d      	asrs	r5, r3, #1

  const int skip_y_mcus = JpegDec.MCUSPerCol - keep_y_mcus;
 800bd80:	4b90      	ldr	r3, [pc, #576]	@ (800bfc4 <_Z22DecodeandProcessAndRGBiiPaPti+0x284>)
  const int skip_end_x_mcu_index = skip_start_x_mcus + keep_x_mcus;
 800bd82:	9209      	str	r2, [sp, #36]	@ 0x24
  const int skip_y_mcus = JpegDec.MCUSPerCol - keep_y_mcus;
 800bd84:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
  const int skip_start_y_mcus = skip_y_mcus / 2;
 800bd86:	1a52      	subs	r2, r2, r1
 800bd88:	bf48      	it	mi
 800bd8a:	3201      	addmi	r2, #1
  uint16_t *pImg;

  uint16_t color;

  for (int i = 0;
       i < (image_height / scale_factor) * (image_width / scale_factor) * 3;
 800bd8c:	fb94 f3fa 	sdiv	r3, r4, sl
  const int skip_end_y_mcu_index = skip_start_y_mcus + keep_y_mcus;
 800bd90:	eb01 0862 	add.w	r8, r1, r2, asr #1
  const int skip_start_y_mcus = skip_y_mcus / 2;
 800bd94:	1054      	asrs	r4, r2, #1
       i < (image_height / scale_factor) * (image_width / scale_factor) * 3;
 800bd96:	9a05      	ldr	r2, [sp, #20]
 800bd98:	fb92 f2fa 	sdiv	r2, r2, sl
 800bd9c:	fb02 f303 	mul.w	r3, r2, r3
 800bda0:	9202      	str	r2, [sp, #8]
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800bda8:	dd07      	ble.n	800bdba <_Z22DecodeandProcessAndRGBiiPaPti+0x7a>
       i++) {
    image_data[i] = -128;
 800bdaa:	2a00      	cmp	r2, #0
 800bdac:	f04f 0180 	mov.w	r1, #128	@ 0x80
 800bdb0:	9801      	ldr	r0, [sp, #4]
 800bdb2:	bfd8      	it	le
 800bdb4:	2201      	movle	r2, #1
 800bdb6:	f017 ff81 	bl	8023cbc <memset>
 800bdba:	46c3      	mov	fp, r8
 800bdbc:	4627      	mov	r7, r4
 800bdbe:	46a8      	mov	r8, r5
  }

  while (1) {
	  auto read_result = JpegDec.read();
 800bdc0:	4880      	ldr	r0, [pc, #512]	@ (800bfc4 <_Z22DecodeandProcessAndRGBiiPaPti+0x284>)
 800bdc2:	f7ff fd23 	bl	800b80c <_ZN11JPEGDecoder4readEv>
 800bdc6:	4606      	mov	r6, r0
	  char buf[20];
	  sprintf(buf, "Read result: %d\r\n", read_result);
 800bdc8:	497f      	ldr	r1, [pc, #508]	@ (800bfc8 <_Z22DecodeandProcessAndRGBiiPaPti+0x288>)
 800bdca:	a80f      	add	r0, sp, #60	@ 0x3c
 800bdcc:	4632      	mov	r2, r6
 800bdce:	f017 fc01 	bl	80235d4 <sprintf>
static int start, end;
static char buf[100];

static inline void printLog(const char *s) {
	static int is_initialized = 0;
	if (!is_initialized) {
 800bdd2:	4b7e      	ldr	r3, [pc, #504]	@ (800bfcc <_Z22DecodeandProcessAndRGBiiPaPti+0x28c>)
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	f000 80b7 	beq.w	800bf4a <_Z22DecodeandProcessAndRGBiiPaPti+0x20a>
		if (HAL_UART_Init(&UART) != HAL_OK) {
			//Error handling
		}
		is_initialized = 1;
	}
	HAL_UART_Transmit(&UART, (uint8_t*) s, strlen(s), 10);
 800bddc:	a80f      	add	r0, sp, #60	@ 0x3c
 800bdde:	f7fa fa5f 	bl	80062a0 <strlen>
 800bde2:	230a      	movs	r3, #10
 800bde4:	b282      	uxth	r2, r0
 800bde6:	a90f      	add	r1, sp, #60	@ 0x3c
 800bde8:	4879      	ldr	r0, [pc, #484]	@ (800bfd0 <_Z22DecodeandProcessAndRGBiiPaPti+0x290>)
 800bdea:	f7ff f8d5 	bl	800af98 <HAL_UART_Transmit>
	  printLog(buf);

    if (read_result == 0) {
 800bdee:	2e00      	cmp	r6, #0
 800bdf0:	f000 80c1 	beq.w	800bf76 <_Z22DecodeandProcessAndRGBiiPaPti+0x236>
      printLog("Read result is 0, breaking\r\n");
      return 0;
    }

    if (JpegDec.MCUy < skip_start_y_mcus) {
 800bdf4:	4b73      	ldr	r3, [pc, #460]	@ (800bfc4 <_Z22DecodeandProcessAndRGBiiPaPti+0x284>)
 800bdf6:	f8d3 508c 	ldr.w	r5, [r3, #140]	@ 0x8c
 800bdfa:	42bd      	cmp	r5, r7
 800bdfc:	dbe0      	blt.n	800bdc0 <_Z22DecodeandProcessAndRGBiiPaPti+0x80>
    if (JpegDec.MCUx < skip_start_x_mcus ||
        JpegDec.MCUx >= skip_end_x_mcu_index) {
      continue;
    }

    if (JpegDec.MCUy >= skip_end_y_mcu_index) {
 800bdfe:	455d      	cmp	r5, fp
    if (JpegDec.MCUx < skip_start_x_mcus ||
 800be00:	f8d3 1088 	ldr.w	r1, [r3, #136]	@ 0x88
    if (JpegDec.MCUy >= skip_end_y_mcu_index) {
 800be04:	bfb4      	ite	lt
 800be06:	2200      	movlt	r2, #0
 800be08:	2201      	movge	r2, #1
 800be0a:	4541      	cmp	r1, r8
 800be0c:	bfb8      	it	lt
 800be0e:	f042 0201 	orrlt.w	r2, r2, #1
 800be12:	2a00      	cmp	r2, #0
 800be14:	d1d4      	bne.n	800bdc0 <_Z22DecodeandProcessAndRGBiiPaPti+0x80>
 800be16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800be18:	4299      	cmp	r1, r3
 800be1a:	dad1      	bge.n	800bdc0 <_Z22DecodeandProcessAndRGBiiPaPti+0x80>
    pImg = JpegDec.pImage;

    int relative_mcu_x = JpegDec.MCUx - skip_start_x_mcus;
    int relative_mcu_y = JpegDec.MCUy - skip_start_y_mcus;

    int x_origin = relative_mcu_x * JpegDec.MCUWidth;
 800be1c:	4a69      	ldr	r2, [pc, #420]	@ (800bfc4 <_Z22DecodeandProcessAndRGBiiPaPti+0x284>)
    int relative_mcu_x = JpegDec.MCUx - skip_start_x_mcus;
 800be1e:	eba1 0108 	sub.w	r1, r1, r8
    int relative_mcu_y = JpegDec.MCUy - skip_start_y_mcus;
 800be22:	1beb      	subs	r3, r5, r7
    int x_origin = relative_mcu_x * JpegDec.MCUWidth;
 800be24:	f8d2 9080 	ldr.w	r9, [r2, #128]	@ 0x80
 800be28:	fb09 f401 	mul.w	r4, r9, r1
    int y_origin = relative_mcu_y * JpegDec.MCUHeight;
 800be2c:	4611      	mov	r1, r2
 800be2e:	f8d2 2084 	ldr.w	r2, [r2, #132]	@ 0x84
    int x_origin = relative_mcu_x * JpegDec.MCUWidth;
 800be32:	9400      	str	r4, [sp, #0]

    for (int mcu_row = 0; mcu_row < JpegDec.MCUHeight; mcu_row++) {
 800be34:	2a00      	cmp	r2, #0
    int y_origin = relative_mcu_y * JpegDec.MCUHeight;
 800be36:	fb02 f303 	mul.w	r3, r2, r3
    for (int mcu_row = 0; mcu_row < JpegDec.MCUHeight; mcu_row++) {
 800be3a:	ddc1      	ble.n	800bdc0 <_Z22DecodeandProcessAndRGBiiPaPti+0x80>
 800be3c:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 800be40:	9801      	ldr	r0, [sp, #4]
    pImg = JpegDec.pImage;
 800be42:	469e      	mov	lr, r3

      int current_y = y_origin + mcu_row;
      for (int mcu_col = 0; mcu_col < JpegDec.MCUWidth; mcu_col++) {
 800be44:	f1b9 0f00 	cmp.w	r9, #0
 800be48:	4410      	add	r0, r2
 800be4a:	9a05      	ldr	r2, [sp, #20]
    pImg = JpegDec.pImage;
 800be4c:	f8d1 c060 	ldr.w	ip, [r1, #96]	@ 0x60
 800be50:	fb03 f502 	mul.w	r5, r3, r2
 800be54:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
    for (int mcu_row = 0; mcu_row < JpegDec.MCUHeight; mcu_row++) {
 800be56:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800be5a:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 800be5e:	9306      	str	r3, [sp, #24]
        }
        if (scale_factor != 1 &&
            (current_y % scale_factor != 0 || current_x % scale_factor != 0))
          continue;

        if (image_width % scale_factor != 0)
 800be60:	9b02      	ldr	r3, [sp, #8]
 800be62:	fb0a 2313 	mls	r3, sl, r3, r2
    for (int mcu_row = 0; mcu_row < JpegDec.MCUHeight; mcu_row++) {
 800be66:	f1ce 0201 	rsb	r2, lr, #1
        if (image_width % scale_factor != 0)
 800be6a:	9304      	str	r3, [sp, #16]
    for (int mcu_row = 0; mcu_row < JpegDec.MCUHeight; mcu_row++) {
 800be6c:	e9cd 870a 	strd	r8, r7, [sp, #40]	@ 0x28
 800be70:	e9cd 0207 	strd	r0, r2, [sp, #28]
      for (int mcu_col = 0; mcu_col < JpegDec.MCUWidth; mcu_col++) {
 800be74:	dd64      	ble.n	800bf40 <_Z22DecodeandProcessAndRGBiiPaPti+0x200>
 800be76:	9b07      	ldr	r3, [sp, #28]
 800be78:	eb05 0645 	add.w	r6, r5, r5, lsl #1
 800be7c:	2400      	movs	r4, #0
 800be7e:	9503      	str	r5, [sp, #12]
 800be80:	441e      	add	r6, r3
 800be82:	9b06      	ldr	r3, [sp, #24]
 800be84:	eb03 0745 	add.w	r7, r3, r5, lsl #1
 800be88:	e023      	b.n	800bed2 <_Z22DecodeandProcessAndRGBiiPaPti+0x192>
            (current_y % scale_factor != 0 || current_x % scale_factor != 0))
 800be8a:	fb9e fbfa 	sdiv	fp, lr, sl
 800be8e:	fb0a e01b 	mls	r0, sl, fp, lr
        if (scale_factor != 1 &&
 800be92:	b9c8      	cbnz	r0, 800bec8 <_Z22DecodeandProcessAndRGBiiPaPti+0x188>
          image_data[index * 3] = r - 128;
 800be94:	3980      	subs	r1, #128	@ 0x80
          image_data[index * 3 + 1] = g - 128;
 800be96:	3a80      	subs	r2, #128	@ 0x80
          image_data[index * 3 + 2] = b - 128;
 800be98:	3b80      	subs	r3, #128	@ 0x80
        if (width > 120)
          width = 120;
        int Iindex = (current_y / scale_factor) * (image_width / scale_factor) +
                     current_x / scale_factor;

        image_data[Iindex * 3] = r - 128;
 800be9a:	b249      	sxtb	r1, r1
        image_data[Iindex * 3 + 1] = g - 128;
 800be9c:	b252      	sxtb	r2, r2
        image_data[Iindex * 3 + 2] = b - 128;
 800be9e:	b25b      	sxtb	r3, r3
            (current_y % scale_factor != 0 || current_x % scale_factor != 0))
 800bea0:	fb98 f0fa 	sdiv	r0, r8, sl
 800bea4:	fb0a 8510 	mls	r5, sl, r0, r8
 800bea8:	b975      	cbnz	r5, 800bec8 <_Z22DecodeandProcessAndRGBiiPaPti+0x188>
        if (image_width % scale_factor != 0)
 800beaa:	9d04      	ldr	r5, [sp, #16]
 800beac:	b965      	cbnz	r5, 800bec8 <_Z22DecodeandProcessAndRGBiiPaPti+0x188>
        int Iindex = (current_y / scale_factor) * (image_width / scale_factor) +
 800beae:	9d02      	ldr	r5, [sp, #8]
 800beb0:	fb05 000b 	mla	r0, r5, fp, r0
        image_data[Iindex * 3] = r - 128;
 800beb4:	9d01      	ldr	r5, [sp, #4]
 800beb6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800beba:	5429      	strb	r1, [r5, r0]
        image_data[Iindex * 3 + 1] = g - 128;
 800bebc:	4428      	add	r0, r5
        image_data[Iindex * 3 + 2] = b - 128;
 800bebe:	7083      	strb	r3, [r0, #2]
      for (int mcu_col = 0; mcu_col < JpegDec.MCUWidth; mcu_col++) {
 800bec0:	4b40      	ldr	r3, [pc, #256]	@ (800bfc4 <_Z22DecodeandProcessAndRGBiiPaPti+0x284>)
        image_data[Iindex * 3 + 1] = g - 128;
 800bec2:	7042      	strb	r2, [r0, #1]
      for (int mcu_col = 0; mcu_col < JpegDec.MCUWidth; mcu_col++) {
 800bec4:	f8d3 9080 	ldr.w	r9, [r3, #128]	@ 0x80
 800bec8:	3401      	adds	r4, #1
 800beca:	3702      	adds	r7, #2
 800becc:	3603      	adds	r6, #3
 800bece:	454c      	cmp	r4, r9
 800bed0:	da26      	bge.n	800bf20 <_Z22DecodeandProcessAndRGBiiPaPti+0x1e0>
        int current_x = x_origin + mcu_col;
 800bed2:	9b00      	ldr	r3, [sp, #0]
        if (current_y >= 120)
 800bed4:	f1be 0f77 	cmp.w	lr, #119	@ 0x77
        color = *pImg++;
 800bed8:	f10c 0c02 	add.w	ip, ip, #2
        int current_x = x_origin + mcu_col;
 800bedc:	eb04 0803 	add.w	r8, r4, r3
        if (current_y >= 120)
 800bee0:	dcf2      	bgt.n	800bec8 <_Z22DecodeandProcessAndRGBiiPaPti+0x188>
        color = *pImg++;
 800bee2:	f83c 5c02 	ldrh.w	r5, [ip, #-2]
        if (scale_factor == 1) {
 800bee6:	f1ba 0f01 	cmp.w	sl, #1
        r = ((color & 0xF800) >> 11) * 8;
 800beea:	ea4f 21d5 	mov.w	r1, r5, lsr #11
        g = ((color & 0x07E0) >> 5) * 4;
 800beee:	f3c5 1245 	ubfx	r2, r5, #5, #6
        b = ((color & 0x001F) >> 0) * 8;
 800bef2:	f005 031f 	and.w	r3, r5, #31
        lcd_data[index] = color;
 800bef6:	803d      	strh	r5, [r7, #0]
        r = ((color & 0xF800) >> 11) * 8;
 800bef8:	ea4f 01c1 	mov.w	r1, r1, lsl #3
        g = ((color & 0x07E0) >> 5) * 4;
 800befc:	ea4f 0282 	mov.w	r2, r2, lsl #2
        b = ((color & 0x001F) >> 0) * 8;
 800bf00:	ea4f 03c3 	mov.w	r3, r3, lsl #3
        if (scale_factor == 1) {
 800bf04:	d1c1      	bne.n	800be8a <_Z22DecodeandProcessAndRGBiiPaPti+0x14a>
          image_data[index * 3] = r - 128;
 800bf06:	3980      	subs	r1, #128	@ 0x80
          image_data[index * 3 + 1] = g - 128;
 800bf08:	3a80      	subs	r2, #128	@ 0x80
          image_data[index * 3 + 2] = b - 128;
 800bf0a:	3b80      	subs	r3, #128	@ 0x80
 800bf0c:	46f3      	mov	fp, lr
          image_data[index * 3] = r - 128;
 800bf0e:	b249      	sxtb	r1, r1
 800bf10:	4640      	mov	r0, r8
          image_data[index * 3 + 1] = g - 128;
 800bf12:	b252      	sxtb	r2, r2
          image_data[index * 3 + 2] = b - 128;
 800bf14:	b25b      	sxtb	r3, r3
          image_data[index * 3] = r - 128;
 800bf16:	7031      	strb	r1, [r6, #0]
          image_data[index * 3 + 1] = g - 128;
 800bf18:	7072      	strb	r2, [r6, #1]
          image_data[index * 3 + 2] = b - 128;
 800bf1a:	70b3      	strb	r3, [r6, #2]
          lcd_data[index] = color;
 800bf1c:	803d      	strh	r5, [r7, #0]
        if (image_width % scale_factor != 0)
 800bf1e:	e7c6      	b.n	800beae <_Z22DecodeandProcessAndRGBiiPaPti+0x16e>
    for (int mcu_row = 0; mcu_row < JpegDec.MCUHeight; mcu_row++) {
 800bf20:	9b08      	ldr	r3, [sp, #32]
 800bf22:	9d03      	ldr	r5, [sp, #12]
 800bf24:	eb03 010e 	add.w	r1, r3, lr
 800bf28:	4b26      	ldr	r3, [pc, #152]	@ (800bfc4 <_Z22DecodeandProcessAndRGBiiPaPti+0x284>)
 800bf2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bf2e:	4299      	cmp	r1, r3
 800bf30:	da06      	bge.n	800bf40 <_Z22DecodeandProcessAndRGBiiPaPti+0x200>
 800bf32:	9b05      	ldr	r3, [sp, #20]
      for (int mcu_col = 0; mcu_col < JpegDec.MCUWidth; mcu_col++) {
 800bf34:	f1b9 0f00 	cmp.w	r9, #0
 800bf38:	f10e 0e01 	add.w	lr, lr, #1
 800bf3c:	441d      	add	r5, r3
 800bf3e:	dc9a      	bgt.n	800be76 <_Z22DecodeandProcessAndRGBiiPaPti+0x136>
 800bf40:	f8dd b030 	ldr.w	fp, [sp, #48]	@ 0x30
 800bf44:	e9dd 870a 	ldrd	r8, r7, [sp, #40]	@ 0x28
 800bf48:	e73a      	b.n	800bdc0 <_Z22DecodeandProcessAndRGBiiPaPti+0x80>
		UART.Instance = USART1;
 800bf4a:	4a21      	ldr	r2, [pc, #132]	@ (800bfd0 <_Z22DecodeandProcessAndRGBiiPaPti+0x290>)
 800bf4c:	4921      	ldr	r1, [pc, #132]	@ (800bfd4 <_Z22DecodeandProcessAndRGBiiPaPti+0x294>)
		UART.Init.BaudRate = 115200;
 800bf4e:	6113      	str	r3, [r2, #16]
		if (HAL_UART_Init(&UART) != HAL_OK) {
 800bf50:	4610      	mov	r0, r2
		UART.Instance = USART1;
 800bf52:	6011      	str	r1, [r2, #0]
		UART.Init.BaudRate = 115200;
 800bf54:	e9c2 3302 	strd	r3, r3, [r2, #8]
 800bf58:	e9c2 3306 	strd	r3, r3, [r2, #24]
		UART.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800bf5c:	e9c2 3308 	strd	r3, r3, [r2, #32]
		UART.Init.BaudRate = 115200;
 800bf60:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 800bf64:	6053      	str	r3, [r2, #4]
 800bf66:	230c      	movs	r3, #12
 800bf68:	6153      	str	r3, [r2, #20]
		if (HAL_UART_Init(&UART) != HAL_OK) {
 800bf6a:	f7ff fb4e 	bl	800b60a <HAL_UART_Init>
		is_initialized = 1;
 800bf6e:	2301      	movs	r3, #1
 800bf70:	4a16      	ldr	r2, [pc, #88]	@ (800bfcc <_Z22DecodeandProcessAndRGBiiPaPti+0x28c>)
 800bf72:	6013      	str	r3, [r2, #0]
 800bf74:	e732      	b.n	800bddc <_Z22DecodeandProcessAndRGBiiPaPti+0x9c>
	if (!is_initialized) {
 800bf76:	4b15      	ldr	r3, [pc, #84]	@ (800bfcc <_Z22DecodeandProcessAndRGBiiPaPti+0x28c>)
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	b14b      	cbz	r3, 800bf90 <_Z22DecodeandProcessAndRGBiiPaPti+0x250>
	HAL_UART_Transmit(&UART, (uint8_t*) s, strlen(s), 10);
 800bf7c:	230a      	movs	r3, #10
 800bf7e:	221c      	movs	r2, #28
 800bf80:	4915      	ldr	r1, [pc, #84]	@ (800bfd8 <_Z22DecodeandProcessAndRGBiiPaPti+0x298>)
 800bf82:	4813      	ldr	r0, [pc, #76]	@ (800bfd0 <_Z22DecodeandProcessAndRGBiiPaPti+0x290>)
 800bf84:	f7ff f808 	bl	800af98 <HAL_UART_Transmit>
      }
    }
  }
  return 0;
}
 800bf88:	2000      	movs	r0, #0
 800bf8a:	b015      	add	sp, #84	@ 0x54
 800bf8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		UART.Init.BaudRate = 115200;
 800bf90:	490f      	ldr	r1, [pc, #60]	@ (800bfd0 <_Z22DecodeandProcessAndRGBiiPaPti+0x290>)
 800bf92:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
		UART.Instance = USART1;
 800bf96:	4a0f      	ldr	r2, [pc, #60]	@ (800bfd4 <_Z22DecodeandProcessAndRGBiiPaPti+0x294>)
		UART.Init.BaudRate = 115200;
 800bf98:	604b      	str	r3, [r1, #4]
 800bf9a:	230c      	movs	r3, #12
		if (HAL_UART_Init(&UART) != HAL_OK) {
 800bf9c:	4608      	mov	r0, r1
		UART.Instance = USART1;
 800bf9e:	600a      	str	r2, [r1, #0]
		UART.Init.BaudRate = 115200;
 800bfa0:	610e      	str	r6, [r1, #16]
		UART.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800bfa2:	624e      	str	r6, [r1, #36]	@ 0x24
		UART.Init.BaudRate = 115200;
 800bfa4:	e9c1 3605 	strd	r3, r6, [r1, #20]
 800bfa8:	e9c1 6602 	strd	r6, r6, [r1, #8]
 800bfac:	e9c1 6607 	strd	r6, r6, [r1, #28]
		if (HAL_UART_Init(&UART) != HAL_OK) {
 800bfb0:	f7ff fb2b 	bl	800b60a <HAL_UART_Init>
		is_initialized = 1;
 800bfb4:	2301      	movs	r3, #1
 800bfb6:	4a05      	ldr	r2, [pc, #20]	@ (800bfcc <_Z22DecodeandProcessAndRGBiiPaPti+0x28c>)
 800bfb8:	6013      	str	r3, [r2, #0]
 800bfba:	e7df      	b.n	800bf7c <_Z22DecodeandProcessAndRGBiiPaPti+0x23c>
 800bfbc:	20008de0 	.word	0x20008de0
 800bfc0:	20008ddc 	.word	0x20008ddc
 800bfc4:	20008d48 	.word	0x20008d48
 800bfc8:	0802d414 	.word	0x0802d414
 800bfcc:	2000a1e0 	.word	0x2000a1e0
 800bfd0:	2000a1e8 	.word	0x2000a1e8
 800bfd4:	40011000 	.word	0x40011000
 800bfd8:	0802d428 	.word	0x0802d428

0800bfdc <_Z12StartCapturev>:
  read_fifo_burst();

  return 0;
}

int StartCapture() {
 800bfdc:	b508      	push	{r3, lr}
void flush_fifo(void) { camWriteReg(ARDUCHIP_FIFO, FIFO_CLEAR_MASK); }
 800bfde:	2101      	movs	r1, #1
 800bfe0:	2004      	movs	r0, #4
 800bfe2:	f000 fa7b 	bl	800c4dc <_Z11camWriteReghh>

  flush_fifo();
  HAL_Delay(1);
 800bfe6:	2001      	movs	r0, #1
 800bfe8:	f7fc fc86 	bl	80088f8 <HAL_Delay>
void clear_fifo_flag(void) { camWriteReg(ARDUCHIP_FIFO, FIFO_CLEAR_MASK); }
 800bfec:	2101      	movs	r1, #1
 800bfee:	2004      	movs	r0, #4
 800bff0:	f000 fa74 	bl	800c4dc <_Z11camWriteReghh>
  clear_fifo_flag();
  HAL_Delay(1);
 800bff4:	2001      	movs	r0, #1
 800bff6:	f7fc fc7f 	bl	80088f8 <HAL_Delay>
void start_capture(void) { camWriteReg(ARDUCHIP_FIFO, FIFO_START_MASK); }
 800bffa:	2004      	movs	r0, #4
 800bffc:	2102      	movs	r1, #2
 800bffe:	f000 fa6d 	bl	800c4dc <_Z11camWriteReghh>

  start_capture();

  return 0;
}
 800c002:	2000      	movs	r0, #0
 800c004:	bd08      	pop	{r3, pc}
 800c006:	bf00      	nop

0800c008 <_Z15read_fifo_burstv>:
  read_fifo_burst();

  return 0;
}

uint8_t read_fifo_burst() {
 800c008:	b5f0      	push	{r4, r5, r6, r7, lr}
  len1 = camReadReg(FIFO_SIZE1);
 800c00a:	2042      	movs	r0, #66	@ 0x42
uint8_t read_fifo_burst() {
 800c00c:	b0a9      	sub	sp, #164	@ 0xa4
  len1 = camReadReg(FIFO_SIZE1);
 800c00e:	f000 fabd 	bl	800c58c <_Z10camReadRegh>
 800c012:	4604      	mov	r4, r0
  len2 = camReadReg(FIFO_SIZE2);
 800c014:	2043      	movs	r0, #67	@ 0x43
	if (!is_initialized) {
 800c016:	4f6d      	ldr	r7, [pc, #436]	@ (800c1cc <_Z15read_fifo_burstv+0x1c4>)
 800c018:	f000 fab8 	bl	800c58c <_Z10camReadRegh>
 800c01c:	4605      	mov	r5, r0
  len3 = camReadReg(FIFO_SIZE3) & 0x7f;
 800c01e:	2044      	movs	r0, #68	@ 0x44
		UART.Instance = USART1;
 800c020:	4e6b      	ldr	r6, [pc, #428]	@ (800c1d0 <_Z15read_fifo_burstv+0x1c8>)
 800c022:	f000 fab3 	bl	800c58c <_Z10camReadRegh>
 800c026:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
  length = ((len3 << 16) | (len2 << 8) | len1) & 0x07fffff;
 800c02a:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  uint32_t length = read_fifo_length();
  char logbuf[150];
  memset(logbuf, 0, sizeof(logbuf));  // Clear buffer
 800c02e:	2296      	movs	r2, #150	@ 0x96
 800c030:	2100      	movs	r1, #0
  length = ((len3 << 16) | (len2 << 8) | len1) & 0x07fffff;
 800c032:	ea44 4400 	orr.w	r4, r4, r0, lsl #16
  memset(logbuf, 0, sizeof(logbuf));  // Clear buffer
 800c036:	a802      	add	r0, sp, #8
 800c038:	f017 fe40 	bl	8023cbc <memset>
  snprintf(logbuf, sizeof(logbuf), "Starting FIFO read, length: %lu\r\n", length);
 800c03c:	4a65      	ldr	r2, [pc, #404]	@ (800c1d4 <_Z15read_fifo_burstv+0x1cc>)
 800c03e:	4623      	mov	r3, r4
 800c040:	2196      	movs	r1, #150	@ 0x96
 800c042:	a802      	add	r0, sp, #8
 800c044:	f017 fa92 	bl	802356c <snprintf>
	if (!is_initialized) {
 800c048:	683b      	ldr	r3, [r7, #0]
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d049      	beq.n	800c0e2 <_Z15read_fifo_burstv+0xda>
	HAL_UART_Transmit(&UART, (uint8_t*) s, strlen(s), 10);
 800c04e:	a802      	add	r0, sp, #8
 800c050:	f7fa f926 	bl	80062a0 <strlen>
 800c054:	230a      	movs	r3, #10
 800c056:	b282      	uxth	r2, r0
 800c058:	a902      	add	r1, sp, #8
 800c05a:	485d      	ldr	r0, [pc, #372]	@ (800c1d0 <_Z15read_fifo_burstv+0x1c8>)
 800c05c:	f7fe ff9c 	bl	800af98 <HAL_UART_Transmit>
  printLog(logbuf);

  if (length >= MAX_FIFO_SIZE) {
 800c060:	4b5d      	ldr	r3, [pc, #372]	@ (800c1d8 <_Z15read_fifo_burstv+0x1d0>)
 800c062:	429c      	cmp	r4, r3
 800c064:	d85d      	bhi.n	800c122 <_Z15read_fifo_burstv+0x11a>
    memset(logbuf, 0, sizeof(logbuf));
    snprintf(logbuf, sizeof(logbuf), "Error: FIFO length too large: %lu\r\n", length);
    printLog(logbuf);
    return 0;
  }
  if (length == 0) {
 800c066:	2c00      	cmp	r4, #0
 800c068:	d04f      	beq.n	800c10a <_Z15read_fifo_burstv+0x102>
    printLog("Error: FIFO length is 0\r\n");
    return 0;
  }
  ARDUCAM_CS_LOW;
 800c06a:	2200      	movs	r2, #0
 800c06c:	2101      	movs	r1, #1
 800c06e:	485b      	ldr	r0, [pc, #364]	@ (800c1dc <_Z15read_fifo_burstv+0x1d4>)
  volatile uint8_t burst = camTransfer(BURST_FIFO_READ);
  int index;

  camTransfers(imgBuf, length);
 800c070:	4d5b      	ldr	r5, [pc, #364]	@ (800c1e0 <_Z15read_fifo_burstv+0x1d8>)
  ARDUCAM_CS_LOW;
 800c072:	f7fd f85e 	bl	8009132 <HAL_GPIO_WritePin>
  volatile uint8_t burst = camTransfer(BURST_FIFO_READ);
 800c076:	203c      	movs	r0, #60	@ 0x3c
 800c078:	f000 fa54 	bl	800c524 <_Z11camTransferh>
  camTransfers(imgBuf, length);
 800c07c:	4621      	mov	r1, r4
  volatile uint8_t burst = camTransfer(BURST_FIFO_READ);
 800c07e:	f88d 0007 	strb.w	r0, [sp, #7]
  camTransfers(imgBuf, length);
 800c082:	4628      	mov	r0, r5
 800c084:	f000 fa62 	bl	800c54c <_Z12camTransfersPhm>

  for (index = length - 1; index >= 0; index--) {
 800c088:	1960      	adds	r0, r4, r5
 800c08a:	1e63      	subs	r3, r4, #1
 800c08c:	e001      	b.n	800c092 <_Z15read_fifo_burstv+0x8a>
 800c08e:	3b01      	subs	r3, #1
 800c090:	d304      	bcc.n	800c09c <_Z15read_fifo_burstv+0x94>
    if (imgBuf[index] != 0) {
 800c092:	f810 2d01 	ldrb.w	r2, [r0, #-1]!
 800c096:	2a00      	cmp	r2, #0
 800c098:	d0f9      	beq.n	800c08e <_Z15read_fifo_burstv+0x86>
      break;
    }
  }

  imgLength = index + 1;
 800c09a:	1c5a      	adds	r2, r3, #1
 800c09c:	4c51      	ldr	r4, [pc, #324]	@ (800c1e4 <_Z15read_fifo_burstv+0x1dc>)

  ARDUCAM_CS_HIGH;
 800c09e:	484f      	ldr	r0, [pc, #316]	@ (800c1dc <_Z15read_fifo_burstv+0x1d4>)
  imgLength = index + 1;
 800c0a0:	6022      	str	r2, [r4, #0]
  ARDUCAM_CS_HIGH;
 800c0a2:	2201      	movs	r2, #1
 800c0a4:	4611      	mov	r1, r2
 800c0a6:	f7fd f844 	bl	8009132 <HAL_GPIO_WritePin>

  is_header = false;
 800c0aa:	4b4f      	ldr	r3, [pc, #316]	@ (800c1e8 <_Z15read_fifo_burstv+0x1e0>)
 800c0ac:	2100      	movs	r1, #0
  memset(logbuf, 0, sizeof(logbuf));
 800c0ae:	2296      	movs	r2, #150	@ 0x96
 800c0b0:	a802      	add	r0, sp, #8
  is_header = false;
 800c0b2:	7019      	strb	r1, [r3, #0]
  memset(logbuf, 0, sizeof(logbuf));
 800c0b4:	f017 fe02 	bl	8023cbc <memset>
  snprintf(logbuf, sizeof(logbuf), "Successfully processed %lu bytes\r\n", imgLength);
 800c0b8:	6823      	ldr	r3, [r4, #0]
 800c0ba:	2196      	movs	r1, #150	@ 0x96
 800c0bc:	4a4b      	ldr	r2, [pc, #300]	@ (800c1ec <_Z15read_fifo_burstv+0x1e4>)
 800c0be:	a802      	add	r0, sp, #8
 800c0c0:	f017 fa54 	bl	802356c <snprintf>
	if (!is_initialized) {
 800c0c4:	683b      	ldr	r3, [r7, #0]
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d043      	beq.n	800c152 <_Z15read_fifo_burstv+0x14a>
	HAL_UART_Transmit(&UART, (uint8_t*) s, strlen(s), 10);
 800c0ca:	a802      	add	r0, sp, #8
 800c0cc:	f7fa f8e8 	bl	80062a0 <strlen>
 800c0d0:	230a      	movs	r3, #10
 800c0d2:	b282      	uxth	r2, r0
 800c0d4:	a902      	add	r1, sp, #8
 800c0d6:	483e      	ldr	r0, [pc, #248]	@ (800c1d0 <_Z15read_fifo_burstv+0x1c8>)
 800c0d8:	f7fe ff5e 	bl	800af98 <HAL_UART_Transmit>
  printLog(logbuf);
  return 1;
 800c0dc:	2001      	movs	r0, #1
}
 800c0de:	b029      	add	sp, #164	@ 0xa4
 800c0e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		UART.Init.BaudRate = 115200;
 800c0e2:	4a43      	ldr	r2, [pc, #268]	@ (800c1f0 <_Z15read_fifo_burstv+0x1e8>)
		if (HAL_UART_Init(&UART) != HAL_OK) {
 800c0e4:	4630      	mov	r0, r6
		UART.Init.BaudRate = 115200;
 800c0e6:	6133      	str	r3, [r6, #16]
 800c0e8:	e9c6 3302 	strd	r3, r3, [r6, #8]
 800c0ec:	e9c6 3306 	strd	r3, r3, [r6, #24]
		UART.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800c0f0:	e9c6 3308 	strd	r3, r3, [r6, #32]
		UART.Init.BaudRate = 115200;
 800c0f4:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 800c0f8:	e9c6 2300 	strd	r2, r3, [r6]
 800c0fc:	230c      	movs	r3, #12
 800c0fe:	6173      	str	r3, [r6, #20]
		if (HAL_UART_Init(&UART) != HAL_OK) {
 800c100:	f7ff fa83 	bl	800b60a <HAL_UART_Init>
		is_initialized = 1;
 800c104:	2301      	movs	r3, #1
 800c106:	603b      	str	r3, [r7, #0]
 800c108:	e7a1      	b.n	800c04e <_Z15read_fifo_burstv+0x46>
	if (!is_initialized) {
 800c10a:	683b      	ldr	r3, [r7, #0]
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d034      	beq.n	800c17a <_Z15read_fifo_burstv+0x172>
	HAL_UART_Transmit(&UART, (uint8_t*) s, strlen(s), 10);
 800c110:	230a      	movs	r3, #10
 800c112:	2219      	movs	r2, #25
 800c114:	4937      	ldr	r1, [pc, #220]	@ (800c1f4 <_Z15read_fifo_burstv+0x1ec>)
 800c116:	482e      	ldr	r0, [pc, #184]	@ (800c1d0 <_Z15read_fifo_burstv+0x1c8>)
 800c118:	f7fe ff3e 	bl	800af98 <HAL_UART_Transmit>
    return 0;
 800c11c:	2000      	movs	r0, #0
}
 800c11e:	b029      	add	sp, #164	@ 0xa4
 800c120:	bdf0      	pop	{r4, r5, r6, r7, pc}
    memset(logbuf, 0, sizeof(logbuf));
 800c122:	2296      	movs	r2, #150	@ 0x96
 800c124:	2100      	movs	r1, #0
 800c126:	a802      	add	r0, sp, #8
 800c128:	f017 fdc8 	bl	8023cbc <memset>
    snprintf(logbuf, sizeof(logbuf), "Error: FIFO length too large: %lu\r\n", length);
 800c12c:	4623      	mov	r3, r4
 800c12e:	4a32      	ldr	r2, [pc, #200]	@ (800c1f8 <_Z15read_fifo_burstv+0x1f0>)
 800c130:	2196      	movs	r1, #150	@ 0x96
 800c132:	a802      	add	r0, sp, #8
 800c134:	f017 fa1a 	bl	802356c <snprintf>
	if (!is_initialized) {
 800c138:	683b      	ldr	r3, [r7, #0]
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d031      	beq.n	800c1a2 <_Z15read_fifo_burstv+0x19a>
	HAL_UART_Transmit(&UART, (uint8_t*) s, strlen(s), 10);
 800c13e:	a802      	add	r0, sp, #8
 800c140:	f7fa f8ae 	bl	80062a0 <strlen>
 800c144:	230a      	movs	r3, #10
 800c146:	b282      	uxth	r2, r0
 800c148:	a902      	add	r1, sp, #8
 800c14a:	4821      	ldr	r0, [pc, #132]	@ (800c1d0 <_Z15read_fifo_burstv+0x1c8>)
 800c14c:	f7fe ff24 	bl	800af98 <HAL_UART_Transmit>
}
 800c150:	e7e4      	b.n	800c11c <_Z15read_fifo_burstv+0x114>
		UART.Instance = USART1;
 800c152:	4a27      	ldr	r2, [pc, #156]	@ (800c1f0 <_Z15read_fifo_burstv+0x1e8>)
		if (HAL_UART_Init(&UART) != HAL_OK) {
 800c154:	481e      	ldr	r0, [pc, #120]	@ (800c1d0 <_Z15read_fifo_burstv+0x1c8>)
		UART.Instance = USART1;
 800c156:	6032      	str	r2, [r6, #0]
		UART.Init.BaudRate = 115200;
 800c158:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800c15c:	6133      	str	r3, [r6, #16]
 800c15e:	6072      	str	r2, [r6, #4]
 800c160:	220c      	movs	r2, #12
 800c162:	e9c6 3302 	strd	r3, r3, [r6, #8]
 800c166:	e9c6 3306 	strd	r3, r3, [r6, #24]
		UART.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800c16a:	e9c6 3308 	strd	r3, r3, [r6, #32]
		UART.Init.BaudRate = 115200;
 800c16e:	6172      	str	r2, [r6, #20]
		if (HAL_UART_Init(&UART) != HAL_OK) {
 800c170:	f7ff fa4b 	bl	800b60a <HAL_UART_Init>
		is_initialized = 1;
 800c174:	2301      	movs	r3, #1
 800c176:	603b      	str	r3, [r7, #0]
 800c178:	e7a7      	b.n	800c0ca <_Z15read_fifo_burstv+0xc2>
		UART.Instance = USART1;
 800c17a:	4a1d      	ldr	r2, [pc, #116]	@ (800c1f0 <_Z15read_fifo_burstv+0x1e8>)
		UART.Init.BaudRate = 115200;
 800c17c:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
		if (HAL_UART_Init(&UART) != HAL_OK) {
 800c180:	4813      	ldr	r0, [pc, #76]	@ (800c1d0 <_Z15read_fifo_burstv+0x1c8>)
		UART.Init.BaudRate = 115200;
 800c182:	6134      	str	r4, [r6, #16]
		UART.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800c184:	6274      	str	r4, [r6, #36]	@ 0x24
		UART.Init.BaudRate = 115200;
 800c186:	e9c6 2300 	strd	r2, r3, [r6]
 800c18a:	230c      	movs	r3, #12
 800c18c:	e9c6 4402 	strd	r4, r4, [r6, #8]
 800c190:	e9c6 3405 	strd	r3, r4, [r6, #20]
 800c194:	e9c6 4407 	strd	r4, r4, [r6, #28]
		if (HAL_UART_Init(&UART) != HAL_OK) {
 800c198:	f7ff fa37 	bl	800b60a <HAL_UART_Init>
		is_initialized = 1;
 800c19c:	2301      	movs	r3, #1
 800c19e:	603b      	str	r3, [r7, #0]
 800c1a0:	e7b6      	b.n	800c110 <_Z15read_fifo_burstv+0x108>
		UART.Instance = USART1;
 800c1a2:	4a13      	ldr	r2, [pc, #76]	@ (800c1f0 <_Z15read_fifo_burstv+0x1e8>)
		if (HAL_UART_Init(&UART) != HAL_OK) {
 800c1a4:	480a      	ldr	r0, [pc, #40]	@ (800c1d0 <_Z15read_fifo_burstv+0x1c8>)
		UART.Instance = USART1;
 800c1a6:	6032      	str	r2, [r6, #0]
		UART.Init.BaudRate = 115200;
 800c1a8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800c1ac:	6133      	str	r3, [r6, #16]
 800c1ae:	6072      	str	r2, [r6, #4]
 800c1b0:	220c      	movs	r2, #12
 800c1b2:	e9c6 3302 	strd	r3, r3, [r6, #8]
 800c1b6:	e9c6 3306 	strd	r3, r3, [r6, #24]
		UART.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800c1ba:	e9c6 3308 	strd	r3, r3, [r6, #32]
		UART.Init.BaudRate = 115200;
 800c1be:	6172      	str	r2, [r6, #20]
		if (HAL_UART_Init(&UART) != HAL_OK) {
 800c1c0:	f7ff fa23 	bl	800b60a <HAL_UART_Init>
		is_initialized = 1;
 800c1c4:	2301      	movs	r3, #1
 800c1c6:	603b      	str	r3, [r7, #0]
 800c1c8:	e7b9      	b.n	800c13e <_Z15read_fifo_burstv+0x136>
 800c1ca:	bf00      	nop
 800c1cc:	2000a1e0 	.word	0x2000a1e0
 800c1d0:	2000a1e8 	.word	0x2000a1e8
 800c1d4:	0802d448 	.word	0x0802d448
 800c1d8:	0005fffe 	.word	0x0005fffe
 800c1dc:	40022000 	.word	0x40022000
 800c1e0:	20008de0 	.word	0x20008de0
 800c1e4:	20008ddc 	.word	0x20008ddc
 800c1e8:	20008dd8 	.word	0x20008dd8
 800c1ec:	0802d4ac 	.word	0x0802d4ac
 800c1f0:	40011000 	.word	0x40011000
 800c1f4:	0802d490 	.word	0x0802d490
 800c1f8:	0802d46c 	.word	0x0802d46c

0800c1fc <_Z11ReadCapturev>:
int ReadCapture() {
 800c1fc:	b508      	push	{r3, lr}
  while (!camReadRegBit(ARDUCHIP_TRIG, CAP_DONE_MASK)) {
 800c1fe:	2108      	movs	r1, #8
 800c200:	2041      	movs	r0, #65	@ 0x41
 800c202:	f000 f9e5 	bl	800c5d0 <_Z13camReadRegBithh>
 800c206:	2800      	cmp	r0, #0
 800c208:	d0f9      	beq.n	800c1fe <_Z11ReadCapturev+0x2>
void clear_fifo_flag(void) { camWriteReg(ARDUCHIP_FIFO, FIFO_CLEAR_MASK); }
 800c20a:	2101      	movs	r1, #1
 800c20c:	2004      	movs	r0, #4
 800c20e:	f000 f965 	bl	800c4dc <_Z11camWriteReghh>
  read_fifo_burst();
 800c212:	f7ff fef9 	bl	800c008 <_Z15read_fifo_burstv>
}
 800c216:	2000      	movs	r0, #0
 800c218:	bd08      	pop	{r3, pc}
 800c21a:	bf00      	nop

0800c21c <_Z11camI2CSetupv>:
  while (cycleCount--)
    ;
}

static I2C_HandleTypeDef I2cHandle;
int camI2CSetup() {
 800c21c:	b5f0      	push	{r4, r5, r6, r7, lr}
  int error = 0;

  I2cHandle.Instance = I2Cx;
 800c21e:	4a35      	ldr	r2, [pc, #212]	@ (800c2f4 <_Z11camI2CSetupv+0xd8>)
  I2cHandle.Init.Timing = I2C_TIMING;
  I2cHandle.Init.OwnAddress1 = I2C_ADDRESS;
  I2cHandle.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
  I2cHandle.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800c220:	2600      	movs	r6, #0
  I2cHandle.Instance = I2Cx;
 800c222:	4c35      	ldr	r4, [pc, #212]	@ (800c2f8 <_Z11camI2CSetupv+0xdc>)
  I2cHandle.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800c224:	2501      	movs	r5, #1
  I2cHandle.Init.Timing = I2C_TIMING;
 800c226:	4b35      	ldr	r3, [pc, #212]	@ (800c2fc <_Z11camI2CSetupv+0xe0>)
int camI2CSetup() {
 800c228:	b085      	sub	sp, #20
  I2cHandle.Instance = I2Cx;
 800c22a:	6022      	str	r2, [r4, #0]
  I2cHandle.Init.OwnAddress1 = I2C_ADDRESS;
 800c22c:	220f      	movs	r2, #15
  I2cHandle.Init.Timing = I2C_TIMING;
 800c22e:	6063      	str	r3, [r4, #4]
  I2cHandle.Init.OwnAddress2 = 0xFF;
 800c230:	23ff      	movs	r3, #255	@ 0xff
  I2cHandle.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  I2cHandle.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;

  if (HAL_I2C_Init(&I2cHandle) != HAL_OK) {
 800c232:	4620      	mov	r0, r4
  I2cHandle.Init.OwnAddress1 = I2C_ADDRESS;
 800c234:	60a2      	str	r2, [r4, #8]
  I2cHandle.Init.OwnAddress2 = 0xFF;
 800c236:	6163      	str	r3, [r4, #20]
  I2cHandle.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800c238:	6126      	str	r6, [r4, #16]
  I2cHandle.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800c23a:	61e6      	str	r6, [r4, #28]
  I2cHandle.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800c23c:	6226      	str	r6, [r4, #32]
  I2cHandle.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800c23e:	60e5      	str	r5, [r4, #12]
  if (HAL_I2C_Init(&I2cHandle) != HAL_OK) {
 800c240:	f7fd f8ae 	bl	80093a0 <HAL_I2C_Init>
 800c244:	4607      	mov	r7, r0

    error++;
  }

  HAL_I2CEx_ConfigAnalogFilter(&I2cHandle, I2C_ANALOGFILTER_ENABLE);
 800c246:	4631      	mov	r1, r6
 800c248:	4620      	mov	r0, r4
  if (HAL_I2C_Init(&I2cHandle) != HAL_OK) {
 800c24a:	1bbf      	subs	r7, r7, r6
#define TEST
int wrSensorReg8_8(uint8_t regID, uint8_t regDat) {
  uint8_t tx_buffer[2];
  tx_buffer[0] = regID & 0xFF;
  tx_buffer[1] = regDat & 0xFF;
  HAL_I2C_Master_Transmit(&I2cHandle, CAM_WRITE_ADDRESS, (uint8_t *)tx_buffer,
 800c24c:	f04f 060a 	mov.w	r6, #10
  if (HAL_I2C_Init(&I2cHandle) != HAL_OK) {
 800c250:	bf18      	it	ne
 800c252:	2701      	movne	r7, #1
  HAL_I2CEx_ConfigAnalogFilter(&I2cHandle, I2C_ANALOGFILTER_ENABLE);
 800c254:	f7fd fa92 	bl	800977c <HAL_I2CEx_ConfigAnalogFilter>
  tx_buffer[0] = regID & 0xFF;
 800c258:	f240 13ff 	movw	r3, #511	@ 0x1ff
  HAL_I2C_Master_Transmit(&I2cHandle, CAM_WRITE_ADDRESS, (uint8_t *)tx_buffer,
 800c25c:	aa03      	add	r2, sp, #12
 800c25e:	2160      	movs	r1, #96	@ 0x60
 800c260:	4620      	mov	r0, r4
  tx_buffer[0] = regID & 0xFF;
 800c262:	f8ad 300c 	strh.w	r3, [sp, #12]
  HAL_I2C_Master_Transmit(&I2cHandle, CAM_WRITE_ADDRESS, (uint8_t *)tx_buffer,
 800c266:	2302      	movs	r3, #2
 800c268:	9600      	str	r6, [sp, #0]
 800c26a:	f7fd f8f7 	bl	800945c <HAL_I2C_Master_Transmit>
                          sizeof(tx_buffer), SSCB_TIMEOUT);

  HAL_Delay(1);
 800c26e:	4628      	mov	r0, r5
 800c270:	f7fc fb42 	bl	80088f8 <HAL_Delay>

  return 1;
}

int rdSensorReg8_8(uint8_t regID, uint8_t *regDat) {
  if (HAL_I2C_Master_Transmit(&I2cHandle, CAM_WRITE_ADDRESS, &regID, 1,
 800c274:	462b      	mov	r3, r5
 800c276:	aa03      	add	r2, sp, #12
 800c278:	2160      	movs	r1, #96	@ 0x60
 800c27a:	4620      	mov	r0, r4
 800c27c:	9600      	str	r6, [sp, #0]
 800c27e:	f88d 600c 	strb.w	r6, [sp, #12]
 800c282:	f7fd f8eb 	bl	800945c <HAL_I2C_Master_Transmit>
 800c286:	b198      	cbz	r0, 800c2b0 <_Z11camI2CSetupv+0x94>
  rdSensorReg8_8(OV2640_CHIPID_LOW, &pid);
 800c288:	210b      	movs	r1, #11
  if (HAL_I2C_Master_Transmit(&I2cHandle, CAM_WRITE_ADDRESS, &regID, 1,
 800c28a:	240a      	movs	r4, #10
 800c28c:	2301      	movs	r3, #1
 800c28e:	aa03      	add	r2, sp, #12
 800c290:	f88d 100c 	strb.w	r1, [sp, #12]
 800c294:	2160      	movs	r1, #96	@ 0x60
 800c296:	4818      	ldr	r0, [pc, #96]	@ (800c2f8 <_Z11camI2CSetupv+0xdc>)
 800c298:	9400      	str	r4, [sp, #0]
 800c29a:	f7fd f8df 	bl	800945c <HAL_I2C_Master_Transmit>
 800c29e:	b1c0      	cbz	r0, 800c2d2 <_Z11camI2CSetupv+0xb6>
  if ((vid != 0x26) && ((pid != 0x41) || (pid != 0x42))) {
 800c2a0:	f89d 300a 	ldrb.w	r3, [sp, #10]
}
 800c2a4:	2b26      	cmp	r3, #38	@ 0x26
 800c2a6:	bf0c      	ite	eq
 800c2a8:	4638      	moveq	r0, r7
 800c2aa:	1c78      	addne	r0, r7, #1
 800c2ac:	b005      	add	sp, #20
 800c2ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
                              SSCB_TIMEOUT) != HAL_OK)
    return false;

  HAL_Delay(1);
 800c2b0:	4628      	mov	r0, r5
 800c2b2:	f7fc fb21 	bl	80088f8 <HAL_Delay>

  if (HAL_I2C_Master_Receive(&I2cHandle, CAM_READ_ADDRESS, (uint8_t *)regDat, 1,
 800c2b6:	4620      	mov	r0, r4
 800c2b8:	462b      	mov	r3, r5
 800c2ba:	eb0d 0206 	add.w	r2, sp, r6
 800c2be:	2161      	movs	r1, #97	@ 0x61
 800c2c0:	9600      	str	r6, [sp, #0]
 800c2c2:	f7fd f993 	bl	80095ec <HAL_I2C_Master_Receive>
 800c2c6:	2800      	cmp	r0, #0
 800c2c8:	d1de      	bne.n	800c288 <_Z11camI2CSetupv+0x6c>
                             SSCB_TIMEOUT) != HAL_OK)
    return false;

  HAL_Delay(1);
 800c2ca:	4628      	mov	r0, r5
 800c2cc:	f7fc fb14 	bl	80088f8 <HAL_Delay>
  return 1;
 800c2d0:	e7da      	b.n	800c288 <_Z11camI2CSetupv+0x6c>
  HAL_Delay(1);
 800c2d2:	2001      	movs	r0, #1
 800c2d4:	f7fc fb10 	bl	80088f8 <HAL_Delay>
  if (HAL_I2C_Master_Receive(&I2cHandle, CAM_READ_ADDRESS, (uint8_t *)regDat, 1,
 800c2d8:	2301      	movs	r3, #1
 800c2da:	f10d 020b 	add.w	r2, sp, #11
 800c2de:	2161      	movs	r1, #97	@ 0x61
 800c2e0:	4805      	ldr	r0, [pc, #20]	@ (800c2f8 <_Z11camI2CSetupv+0xdc>)
 800c2e2:	9400      	str	r4, [sp, #0]
 800c2e4:	f7fd f982 	bl	80095ec <HAL_I2C_Master_Receive>
 800c2e8:	2800      	cmp	r0, #0
 800c2ea:	d1d9      	bne.n	800c2a0 <_Z11camI2CSetupv+0x84>
  HAL_Delay(1);
 800c2ec:	2001      	movs	r0, #1
 800c2ee:	f7fc fb03 	bl	80088f8 <HAL_Delay>
  return 1;
 800c2f2:	e7d5      	b.n	800c2a0 <_Z11camI2CSetupv+0x84>
 800c2f4:	40005400 	.word	0x40005400
 800c2f8:	2000a258 	.word	0x2000a258
 800c2fc:	40912732 	.word	0x40912732

0800c300 <_Z14wrSensorReg8_8hh>:
int wrSensorReg8_8(uint8_t regID, uint8_t regDat) {
 800c300:	b510      	push	{r4, lr}
  HAL_I2C_Master_Transmit(&I2cHandle, CAM_WRITE_ADDRESS, (uint8_t *)tx_buffer,
 800c302:	240a      	movs	r4, #10
int wrSensorReg8_8(uint8_t regID, uint8_t regDat) {
 800c304:	b084      	sub	sp, #16
  HAL_I2C_Master_Transmit(&I2cHandle, CAM_WRITE_ADDRESS, (uint8_t *)tx_buffer,
 800c306:	2302      	movs	r3, #2
 800c308:	aa03      	add	r2, sp, #12
  tx_buffer[0] = regID & 0xFF;
 800c30a:	f88d 000c 	strb.w	r0, [sp, #12]
  tx_buffer[1] = regDat & 0xFF;
 800c30e:	f88d 100d 	strb.w	r1, [sp, #13]
  HAL_I2C_Master_Transmit(&I2cHandle, CAM_WRITE_ADDRESS, (uint8_t *)tx_buffer,
 800c312:	2160      	movs	r1, #96	@ 0x60
 800c314:	9400      	str	r4, [sp, #0]
 800c316:	4804      	ldr	r0, [pc, #16]	@ (800c328 <_Z14wrSensorReg8_8hh+0x28>)
 800c318:	f7fd f8a0 	bl	800945c <HAL_I2C_Master_Transmit>
  HAL_Delay(1);
 800c31c:	2001      	movs	r0, #1
 800c31e:	f7fc faeb 	bl	80088f8 <HAL_Delay>
}
 800c322:	2001      	movs	r0, #1
 800c324:	b004      	add	sp, #16
 800c326:	bd10      	pop	{r4, pc}
 800c328:	2000a258 	.word	0x2000a258

0800c32c <_Z15wrSensorRegs8_8PK10sensor_reg>:
int wrSensorRegs8_8(const struct sensor_reg reglist[]) {
 800c32c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  HAL_I2C_Master_Transmit(&I2cHandle, CAM_WRITE_ADDRESS, (uint8_t *)tx_buffer,
 800c330:	f04f 080a 	mov.w	r8, #10
int wrSensorRegs8_8(const struct sensor_reg reglist[]) {
 800c334:	b084      	sub	sp, #16
  HAL_I2C_Master_Transmit(&I2cHandle, CAM_WRITE_ADDRESS, (uint8_t *)tx_buffer,
 800c336:	4f0d      	ldr	r7, [pc, #52]	@ (800c36c <_Z15wrSensorRegs8_8PK10sensor_reg+0x40>)
int wrSensorRegs8_8(const struct sensor_reg reglist[]) {
 800c338:	4604      	mov	r4, r0
    reg_addr = next->reg;
 800c33a:	7825      	ldrb	r5, [r4, #0]
  HAL_I2C_Master_Transmit(&I2cHandle, CAM_WRITE_ADDRESS, (uint8_t *)tx_buffer,
 800c33c:	2302      	movs	r3, #2
    reg_val = next->val;
 800c33e:	7866      	ldrb	r6, [r4, #1]
  HAL_I2C_Master_Transmit(&I2cHandle, CAM_WRITE_ADDRESS, (uint8_t *)tx_buffer,
 800c340:	aa03      	add	r2, sp, #12
    reg_addr = next->reg;
 800c342:	f834 cb02 	ldrh.w	ip, [r4], #2
  HAL_I2C_Master_Transmit(&I2cHandle, CAM_WRITE_ADDRESS, (uint8_t *)tx_buffer,
 800c346:	2160      	movs	r1, #96	@ 0x60
 800c348:	4638      	mov	r0, r7
  while ((reg_addr != 0xff) | (reg_val != 0xff)) {
 800c34a:	4035      	ands	r5, r6
  HAL_I2C_Master_Transmit(&I2cHandle, CAM_WRITE_ADDRESS, (uint8_t *)tx_buffer,
 800c34c:	f8cd 8000 	str.w	r8, [sp]
  tx_buffer[0] = regID & 0xFF;
 800c350:	f8ad c00c 	strh.w	ip, [sp, #12]
  HAL_I2C_Master_Transmit(&I2cHandle, CAM_WRITE_ADDRESS, (uint8_t *)tx_buffer,
 800c354:	f7fd f882 	bl	800945c <HAL_I2C_Master_Transmit>
  HAL_Delay(1);
 800c358:	2001      	movs	r0, #1
 800c35a:	f7fc facd 	bl	80088f8 <HAL_Delay>
  while ((reg_addr != 0xff) | (reg_val != 0xff)) {
 800c35e:	2dff      	cmp	r5, #255	@ 0xff
 800c360:	d1eb      	bne.n	800c33a <_Z15wrSensorRegs8_8PK10sensor_reg+0xe>
}
 800c362:	2001      	movs	r0, #1
 800c364:	b004      	add	sp, #16
 800c366:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c36a:	bf00      	nop
 800c36c:	2000a258 	.word	0x2000a258

0800c370 <_Z15camSPIErrorTestv>:
  camSPIReset();
  error += camSPIErrorTest();
  return error;
}

int camSPIErrorTest() {
 800c370:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint8_t val = 0x55;
  volatile uint8_t rval;
  int error = 0;
 800c374:	f04f 0800 	mov.w	r8, #0
int camSPIErrorTest() {
 800c378:	b086      	sub	sp, #24
  uint8_t val = 0x55;
 800c37a:	2455      	movs	r4, #85	@ 0x55
  HAL_Delay(100);
}

void camWriteReg(const uint8_t reg, const uint8_t val) {
  uint8_t buff[2] = {reg | 0x80, val};
  ARDUCAM_CS_LOW;
 800c37c:	4d1f      	ldr	r5, [pc, #124]	@ (800c3fc <_Z15camSPIErrorTestv+0x8c>)
  HAL_SPI_Transmit(&SpiHandle, (uint8_t *)&buff, 2, 100);
 800c37e:	4e20      	ldr	r6, [pc, #128]	@ (800c400 <_Z15camSPIErrorTestv+0x90>)
    val++;
 800c380:	3401      	adds	r4, #1
  uint8_t buff[2] = {reg | 0x80, val};
 800c382:	2380      	movs	r3, #128	@ 0x80
  ARDUCAM_CS_LOW;
 800c384:	2200      	movs	r2, #0
 800c386:	2101      	movs	r1, #1
    val++;
 800c388:	b2e4      	uxtb	r4, r4
  ARDUCAM_CS_LOW;
 800c38a:	4628      	mov	r0, r5
  uint8_t buff[2] = {reg | 0x80, val};
 800c38c:	f88d 3014 	strb.w	r3, [sp, #20]

uint8_t camReadReg(const uint8_t reg) {
  uint8_t buff[2] = {reg, 0x00};
  uint8_t rbuff[2];
  ARDUCAM_CS_LOW;
  HAL_SPI_TransmitReceive(&SpiHandle, (uint8_t *)&buff, (uint8_t *)&rbuff, 2,
 800c390:	2764      	movs	r7, #100	@ 0x64
  uint8_t buff[2] = {reg | 0x80, val};
 800c392:	f88d 4015 	strb.w	r4, [sp, #21]
  ARDUCAM_CS_LOW;
 800c396:	f7fc fecc 	bl	8009132 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&SpiHandle, (uint8_t *)&buff, 2, 100);
 800c39a:	2364      	movs	r3, #100	@ 0x64
 800c39c:	2202      	movs	r2, #2
 800c39e:	a905      	add	r1, sp, #20
 800c3a0:	4630      	mov	r0, r6
 800c3a2:	f7fe fb7d 	bl	800aaa0 <HAL_SPI_Transmit>
  ARDUCAM_CS_HIGH;
 800c3a6:	2201      	movs	r2, #1
 800c3a8:	4628      	mov	r0, r5
 800c3aa:	4611      	mov	r1, r2
 800c3ac:	f7fc fec1 	bl	8009132 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 800c3b0:	2001      	movs	r0, #1
 800c3b2:	f7fc faa1 	bl	80088f8 <HAL_Delay>
  uint8_t buff[2] = {reg, 0x00};
 800c3b6:	2200      	movs	r2, #0
  ARDUCAM_CS_LOW;
 800c3b8:	2101      	movs	r1, #1
 800c3ba:	4628      	mov	r0, r5
  uint8_t buff[2] = {reg, 0x00};
 800c3bc:	f8ad 2010 	strh.w	r2, [sp, #16]
  ARDUCAM_CS_LOW;
 800c3c0:	f7fc feb7 	bl	8009132 <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(&SpiHandle, (uint8_t *)&buff, (uint8_t *)&rbuff, 2,
 800c3c4:	2302      	movs	r3, #2
 800c3c6:	aa05      	add	r2, sp, #20
 800c3c8:	a904      	add	r1, sp, #16
 800c3ca:	4630      	mov	r0, r6
 800c3cc:	9700      	str	r7, [sp, #0]
 800c3ce:	f7fe fc36 	bl	800ac3e <HAL_SPI_TransmitReceive>
                          100);
  ARDUCAM_CS_HIGH;
 800c3d2:	2201      	movs	r2, #1
 800c3d4:	4628      	mov	r0, r5
 800c3d6:	4611      	mov	r1, r2
 800c3d8:	f7fc feab 	bl	8009132 <HAL_GPIO_WritePin>

  return rbuff[1];
 800c3dc:	f89d 3015 	ldrb.w	r3, [sp, #21]
    rval = camReadReg(0x00);
 800c3e0:	f88d 300f 	strb.w	r3, [sp, #15]
    if (rval != val)
 800c3e4:	f89d 300f 	ldrb.w	r3, [sp, #15]
 800c3e8:	42a3      	cmp	r3, r4
      error++;
 800c3ea:	bf18      	it	ne
 800c3ec:	f108 0801 	addne.w	r8, r8, #1
  for (int i = 0; i < 10; i++) {
 800c3f0:	2c5f      	cmp	r4, #95	@ 0x5f
 800c3f2:	d1c5      	bne.n	800c380 <_Z15camSPIErrorTestv+0x10>
}
 800c3f4:	4640      	mov	r0, r8
 800c3f6:	b006      	add	sp, #24
 800c3f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c3fc:	40022000 	.word	0x40022000
 800c400:	2000c248 	.word	0x2000c248

0800c404 <_Z11camSPISetupv>:
int camSPISetup() {
 800c404:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800c408:	2310      	movs	r3, #16
  SpiHandle.Instance = SPIx;
 800c40a:	4c31      	ldr	r4, [pc, #196]	@ (800c4d0 <_Z11camSPISetupv+0xcc>)
  SpiHandle.Init.Direction = SPI_DIRECTION_2LINES;
 800c40c:	2600      	movs	r6, #0
  SpiHandle.Instance = SPIx;
 800c40e:	4a31      	ldr	r2, [pc, #196]	@ (800c4d4 <_Z11camSPISetupv+0xd0>)
  SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800c410:	61e3      	str	r3, [r4, #28]
  SpiHandle.Init.CRCPolynomial = 7;
 800c412:	2307      	movs	r3, #7
int camSPISetup() {
 800c414:	b087      	sub	sp, #28
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800c416:	4f30      	ldr	r7, [pc, #192]	@ (800c4d8 <_Z11camSPISetupv+0xd4>)
  SpiHandle.Init.DataSize = SPI_DATASIZE_8BIT;
 800c418:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
  SpiHandle.Instance = SPIx;
 800c41c:	6022      	str	r2, [r4, #0]
  SpiHandle.Init.NSS = SPI_NSS_SOFT;
 800c41e:	f44f 7200 	mov.w	r2, #512	@ 0x200
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800c422:	2501      	movs	r5, #1
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 800c424:	f04f 0902 	mov.w	r9, #2
  if (HAL_SPI_Init(&SpiHandle) != HAL_OK) {
 800c428:	4620      	mov	r0, r4
  SpiHandle.Init.NSS = SPI_NSS_SOFT;
 800c42a:	61a2      	str	r2, [r4, #24]
  SpiHandle.Init.DataSize = SPI_DATASIZE_8BIT;
 800c42c:	60e1      	str	r1, [r4, #12]
  SpiHandle.Init.Direction = SPI_DIRECTION_2LINES;
 800c42e:	60a6      	str	r6, [r4, #8]
  SpiHandle.Init.CRCPolynomial = 7;
 800c430:	e9c4 630a 	strd	r6, r3, [r4, #40]	@ 0x28
  SpiHandle.Init.Mode = SPI_MODE_MASTER;
 800c434:	f44f 7382 	mov.w	r3, #260	@ 0x104
  SpiHandle.Init.CLKPolarity = SPI_POLARITY_LOW;
 800c438:	e9c4 6604 	strd	r6, r6, [r4, #16]
  SpiHandle.Init.Mode = SPI_MODE_MASTER;
 800c43c:	6063      	str	r3, [r4, #4]
  SpiHandle.Init.TIMode = SPI_TIMODE_DISABLE;
 800c43e:	e9c4 6608 	strd	r6, r6, [r4, #32]
  if (HAL_SPI_Init(&SpiHandle) != HAL_OK) {
 800c442:	f7fe facb 	bl	800a9dc <HAL_SPI_Init>
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800c446:	a901      	add	r1, sp, #4
  if (HAL_SPI_Init(&SpiHandle) != HAL_OK) {
 800c448:	4680      	mov	r8, r0
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800c44a:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800c44c:	9501      	str	r5, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 800c44e:	f8cd 9010 	str.w	r9, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800c452:	e9cd 5502 	strd	r5, r5, [sp, #8]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800c456:	f7fc fd73 	bl	8008f40 <HAL_GPIO_Init>
  uint8_t buff[2] = {reg | 0x80, val};
 800c45a:	f248 0387 	movw	r3, #32903	@ 0x8087
  ARDUCAM_CS_LOW;
 800c45e:	4632      	mov	r2, r6
 800c460:	4629      	mov	r1, r5
 800c462:	4638      	mov	r0, r7
  uint8_t buff[2] = {reg | 0x80, val};
 800c464:	f8ad 3000 	strh.w	r3, [sp]
  ARDUCAM_CS_LOW;
 800c468:	f7fc fe63 	bl	8009132 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&SpiHandle, (uint8_t *)&buff, 2, 100);
 800c46c:	2364      	movs	r3, #100	@ 0x64
 800c46e:	464a      	mov	r2, r9
 800c470:	4669      	mov	r1, sp
 800c472:	4620      	mov	r0, r4
 800c474:	f7fe fb14 	bl	800aaa0 <HAL_SPI_Transmit>
  ARDUCAM_CS_HIGH;
 800c478:	462a      	mov	r2, r5
 800c47a:	4629      	mov	r1, r5
 800c47c:	4638      	mov	r0, r7
 800c47e:	f7fc fe58 	bl	8009132 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 800c482:	4628      	mov	r0, r5
 800c484:	f7fc fa38 	bl	80088f8 <HAL_Delay>
  HAL_Delay(100);
 800c488:	2064      	movs	r0, #100	@ 0x64
 800c48a:	f7fc fa35 	bl	80088f8 <HAL_Delay>
  uint8_t buff[2] = {reg | 0x80, val};
 800c48e:	2387      	movs	r3, #135	@ 0x87
  ARDUCAM_CS_LOW;
 800c490:	4632      	mov	r2, r6
 800c492:	4629      	mov	r1, r5
 800c494:	4638      	mov	r0, r7
  uint8_t buff[2] = {reg | 0x80, val};
 800c496:	f8ad 3000 	strh.w	r3, [sp]
  ARDUCAM_CS_LOW;
 800c49a:	f7fc fe4a 	bl	8009132 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&SpiHandle, (uint8_t *)&buff, 2, 100);
 800c49e:	2364      	movs	r3, #100	@ 0x64
 800c4a0:	464a      	mov	r2, r9
 800c4a2:	4669      	mov	r1, sp
 800c4a4:	4620      	mov	r0, r4
 800c4a6:	f7fe fafb 	bl	800aaa0 <HAL_SPI_Transmit>
  ARDUCAM_CS_HIGH;
 800c4aa:	462a      	mov	r2, r5
 800c4ac:	4629      	mov	r1, r5
 800c4ae:	4638      	mov	r0, r7
 800c4b0:	f7fc fe3f 	bl	8009132 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 800c4b4:	4628      	mov	r0, r5
 800c4b6:	f7fc fa1f 	bl	80088f8 <HAL_Delay>
  HAL_Delay(100);
 800c4ba:	2064      	movs	r0, #100	@ 0x64
 800c4bc:	f7fc fa1c 	bl	80088f8 <HAL_Delay>
  error += camSPIErrorTest();
 800c4c0:	f7ff ff56 	bl	800c370 <_Z15camSPIErrorTestv>
}
 800c4c4:	45b0      	cmp	r8, r6
 800c4c6:	bf18      	it	ne
 800c4c8:	3001      	addne	r0, #1
 800c4ca:	b007      	add	sp, #28
 800c4cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c4d0:	2000c248 	.word	0x2000c248
 800c4d4:	40003800 	.word	0x40003800
 800c4d8:	40022000 	.word	0x40022000

0800c4dc <_Z11camWriteReghh>:
void camWriteReg(const uint8_t reg, const uint8_t val) {
 800c4dc:	b510      	push	{r4, lr}
  uint8_t buff[2] = {reg | 0x80, val};
 800c4de:	f060 007f 	orn	r0, r0, #127	@ 0x7f
void camWriteReg(const uint8_t reg, const uint8_t val) {
 800c4e2:	b082      	sub	sp, #8
  ARDUCAM_CS_LOW;
 800c4e4:	4c0d      	ldr	r4, [pc, #52]	@ (800c51c <_Z11camWriteReghh+0x40>)
void camWriteReg(const uint8_t reg, const uint8_t val) {
 800c4e6:	460b      	mov	r3, r1
  uint8_t buff[2] = {reg | 0x80, val};
 800c4e8:	f88d 0004 	strb.w	r0, [sp, #4]
  ARDUCAM_CS_LOW;
 800c4ec:	2200      	movs	r2, #0
 800c4ee:	4620      	mov	r0, r4
 800c4f0:	2101      	movs	r1, #1
  uint8_t buff[2] = {reg | 0x80, val};
 800c4f2:	f88d 3005 	strb.w	r3, [sp, #5]
  ARDUCAM_CS_LOW;
 800c4f6:	f7fc fe1c 	bl	8009132 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&SpiHandle, (uint8_t *)&buff, 2, 100);
 800c4fa:	2364      	movs	r3, #100	@ 0x64
 800c4fc:	a901      	add	r1, sp, #4
 800c4fe:	2202      	movs	r2, #2
 800c500:	4807      	ldr	r0, [pc, #28]	@ (800c520 <_Z11camWriteReghh+0x44>)
 800c502:	f7fe facd 	bl	800aaa0 <HAL_SPI_Transmit>
  ARDUCAM_CS_HIGH;
 800c506:	2201      	movs	r2, #1
 800c508:	4620      	mov	r0, r4
 800c50a:	4611      	mov	r1, r2
 800c50c:	f7fc fe11 	bl	8009132 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 800c510:	2001      	movs	r0, #1
 800c512:	f7fc f9f1 	bl	80088f8 <HAL_Delay>
}
 800c516:	b002      	add	sp, #8
 800c518:	bd10      	pop	{r4, pc}
 800c51a:	bf00      	nop
 800c51c:	40022000 	.word	0x40022000
 800c520:	2000c248 	.word	0x2000c248

0800c524 <_Z11camTransferh>:
uint8_t camTransfer(const uint8_t val) {
 800c524:	b510      	push	{r4, lr}
  HAL_SPI_TransmitReceive(&SpiHandle, (uint8_t *)&val, (uint8_t *)&ret, 1, 100);
 800c526:	2464      	movs	r4, #100	@ 0x64
uint8_t camTransfer(const uint8_t val) {
 800c528:	b086      	sub	sp, #24
  HAL_SPI_TransmitReceive(&SpiHandle, (uint8_t *)&val, (uint8_t *)&ret, 1, 100);
 800c52a:	2301      	movs	r3, #1
uint8_t camTransfer(const uint8_t val) {
 800c52c:	f88d 000f 	strb.w	r0, [sp, #15]
  HAL_SPI_TransmitReceive(&SpiHandle, (uint8_t *)&val, (uint8_t *)&ret, 1, 100);
 800c530:	f10d 0217 	add.w	r2, sp, #23
 800c534:	f10d 010f 	add.w	r1, sp, #15
 800c538:	9400      	str	r4, [sp, #0]
 800c53a:	4803      	ldr	r0, [pc, #12]	@ (800c548 <_Z11camTransferh+0x24>)
 800c53c:	f7fe fb7f 	bl	800ac3e <HAL_SPI_TransmitReceive>
}
 800c540:	f89d 0017 	ldrb.w	r0, [sp, #23]
 800c544:	b006      	add	sp, #24
 800c546:	bd10      	pop	{r4, pc}
 800c548:	2000c248 	.word	0x2000c248

0800c54c <_Z12camTransfersPhm>:
uint8_t camTransfers(uint8_t *buf, const uint32_t length) {
 800c54c:	b570      	push	{r4, r5, r6, lr}
  if (!dummyinit) {
 800c54e:	4e0c      	ldr	r6, [pc, #48]	@ (800c580 <_Z12camTransfersPhm+0x34>)
uint8_t camTransfers(uint8_t *buf, const uint32_t length) {
 800c550:	b082      	sub	sp, #8
 800c552:	4604      	mov	r4, r0
 800c554:	460d      	mov	r5, r1
  if (!dummyinit) {
 800c556:	6833      	ldr	r3, [r6, #0]
 800c558:	b93b      	cbnz	r3, 800c56a <_Z12camTransfersPhm+0x1e>
      dummy[i] = DummyVal;
 800c55a:	4619      	mov	r1, r3
 800c55c:	f44f 52fd 	mov.w	r2, #8096	@ 0x1fa0
 800c560:	4808      	ldr	r0, [pc, #32]	@ (800c584 <_Z12camTransfersPhm+0x38>)
 800c562:	f017 fbab 	bl	8023cbc <memset>
    dummyinit = 1;
 800c566:	2301      	movs	r3, #1
 800c568:	6033      	str	r3, [r6, #0]
  HAL_SPI_TransmitReceive(&SpiHandle, (uint8_t *)dummy, (uint8_t *)buf, length,
 800c56a:	2664      	movs	r6, #100	@ 0x64
 800c56c:	b2ab      	uxth	r3, r5
 800c56e:	4622      	mov	r2, r4
 800c570:	4904      	ldr	r1, [pc, #16]	@ (800c584 <_Z12camTransfersPhm+0x38>)
 800c572:	9600      	str	r6, [sp, #0]
 800c574:	4804      	ldr	r0, [pc, #16]	@ (800c588 <_Z12camTransfersPhm+0x3c>)
 800c576:	f7fe fb62 	bl	800ac3e <HAL_SPI_TransmitReceive>
}
 800c57a:	2000      	movs	r0, #0
 800c57c:	b002      	add	sp, #8
 800c57e:	bd70      	pop	{r4, r5, r6, pc}
 800c580:	2000a2a4 	.word	0x2000a2a4
 800c584:	2000a2a8 	.word	0x2000a2a8
 800c588:	2000c248 	.word	0x2000c248

0800c58c <_Z10camReadRegh>:
uint8_t camReadReg(const uint8_t reg) {
 800c58c:	b510      	push	{r4, lr}
  ARDUCAM_CS_LOW;
 800c58e:	4c0e      	ldr	r4, [pc, #56]	@ (800c5c8 <_Z10camReadRegh+0x3c>)
uint8_t camReadReg(const uint8_t reg) {
 800c590:	b084      	sub	sp, #16
 800c592:	4603      	mov	r3, r0
  uint8_t buff[2] = {reg, 0x00};
 800c594:	2200      	movs	r2, #0
  ARDUCAM_CS_LOW;
 800c596:	4620      	mov	r0, r4
 800c598:	2101      	movs	r1, #1
  uint8_t buff[2] = {reg, 0x00};
 800c59a:	f88d 2009 	strb.w	r2, [sp, #9]
 800c59e:	f88d 3008 	strb.w	r3, [sp, #8]
  ARDUCAM_CS_LOW;
 800c5a2:	f7fc fdc6 	bl	8009132 <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(&SpiHandle, (uint8_t *)&buff, (uint8_t *)&rbuff, 2,
 800c5a6:	2064      	movs	r0, #100	@ 0x64
 800c5a8:	2302      	movs	r3, #2
 800c5aa:	aa03      	add	r2, sp, #12
 800c5ac:	a902      	add	r1, sp, #8
 800c5ae:	9000      	str	r0, [sp, #0]
 800c5b0:	4806      	ldr	r0, [pc, #24]	@ (800c5cc <_Z10camReadRegh+0x40>)
 800c5b2:	f7fe fb44 	bl	800ac3e <HAL_SPI_TransmitReceive>
  ARDUCAM_CS_HIGH;
 800c5b6:	2201      	movs	r2, #1
 800c5b8:	4620      	mov	r0, r4
 800c5ba:	4611      	mov	r1, r2
 800c5bc:	f7fc fdb9 	bl	8009132 <HAL_GPIO_WritePin>
}
 800c5c0:	f89d 000d 	ldrb.w	r0, [sp, #13]
 800c5c4:	b004      	add	sp, #16
 800c5c6:	bd10      	pop	{r4, pc}
 800c5c8:	40022000 	.word	0x40022000
 800c5cc:	2000c248 	.word	0x2000c248

0800c5d0 <_Z13camReadRegBithh>:

uint8_t camReadRegBit(uint8_t addr, uint8_t bit) {
 800c5d0:	b530      	push	{r4, r5, lr}
  ARDUCAM_CS_LOW;
 800c5d2:	4d0f      	ldr	r5, [pc, #60]	@ (800c610 <_Z13camReadRegBithh+0x40>)
uint8_t camReadRegBit(uint8_t addr, uint8_t bit) {
 800c5d4:	b085      	sub	sp, #20
  uint8_t buff[2] = {reg, 0x00};
 800c5d6:	2200      	movs	r2, #0
uint8_t camReadRegBit(uint8_t addr, uint8_t bit) {
 800c5d8:	460c      	mov	r4, r1
  uint8_t buff[2] = {reg, 0x00};
 800c5da:	f88d 0008 	strb.w	r0, [sp, #8]
  ARDUCAM_CS_LOW;
 800c5de:	2101      	movs	r1, #1
 800c5e0:	4628      	mov	r0, r5
  uint8_t buff[2] = {reg, 0x00};
 800c5e2:	f88d 2009 	strb.w	r2, [sp, #9]
  ARDUCAM_CS_LOW;
 800c5e6:	f7fc fda4 	bl	8009132 <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(&SpiHandle, (uint8_t *)&buff, (uint8_t *)&rbuff, 2,
 800c5ea:	2164      	movs	r1, #100	@ 0x64
 800c5ec:	2302      	movs	r3, #2
 800c5ee:	aa03      	add	r2, sp, #12
 800c5f0:	9100      	str	r1, [sp, #0]
 800c5f2:	a902      	add	r1, sp, #8
 800c5f4:	4807      	ldr	r0, [pc, #28]	@ (800c614 <_Z13camReadRegBithh+0x44>)
 800c5f6:	f7fe fb22 	bl	800ac3e <HAL_SPI_TransmitReceive>
  ARDUCAM_CS_HIGH;
 800c5fa:	2201      	movs	r2, #1
 800c5fc:	4628      	mov	r0, r5
 800c5fe:	4611      	mov	r1, r2
 800c600:	f7fc fd97 	bl	8009132 <HAL_GPIO_WritePin>
  return rbuff[1];
 800c604:	f89d 000d 	ldrb.w	r0, [sp, #13]
  uint8_t temp;
  temp = camReadReg(addr);
  temp = temp & bit;
  return temp;
}
 800c608:	4020      	ands	r0, r4
 800c60a:	b005      	add	sp, #20
 800c60c:	bd30      	pop	{r4, r5, pc}
 800c60e:	bf00      	nop
 800c610:	40022000 	.word	0x40022000
 800c614:	2000c248 	.word	0x2000c248

0800c618 <_Z13loadRGB565LCDmmmmPth>:
#include "stm32f7xx_hal.h"

#define TRANS 128

void loadRGB565LCD(uint32_t x, uint32_t y, uint32_t width, uint32_t height,
                   uint16_t *src, uint8_t resize) {
 800c618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c61c:	b089      	sub	sp, #36	@ 0x24
 800c61e:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 800c620:	f89d 604c 	ldrb.w	r6, [sp, #76]	@ 0x4c
  for (int i = 0; i < height; i++) {
 800c624:	2b00      	cmp	r3, #0
 800c626:	d048      	beq.n	800c6ba <_Z13loadRGB565LCDmmmmPth+0xa2>
 800c628:	2a00      	cmp	r2, #0
 800c62a:	d046      	beq.n	800c6ba <_Z13loadRGB565LCDmmmmPth+0xa2>
 800c62c:	2e00      	cmp	r6, #0
 800c62e:	d044      	beq.n	800c6ba <_Z13loadRGB565LCDmmmmPth+0xa2>
 800c630:	fa1f fa81 	uxth.w	sl, r1
 800c634:	1ea1      	subs	r1, r4, #2
    for (int j = 0; j < width; j++) {

      uint16_t color = src[i * width + j];

      for (int ti = 0; ti < resize; ti++) {
 800c636:	2400      	movs	r4, #0
 800c638:	b280      	uxth	r0, r0
 800c63a:	4625      	mov	r5, r4
 800c63c:	46a3      	mov	fp, r4
    for (int j = 0; j < width; j++) {
 800c63e:	f04f 0800 	mov.w	r8, #0
 800c642:	eb01 0745 	add.w	r7, r1, r5, lsl #1
 800c646:	9504      	str	r5, [sp, #16]
 800c648:	4644      	mov	r4, r8
 800c64a:	46b9      	mov	r9, r7
 800c64c:	4680      	mov	r8, r0
 800c64e:	9203      	str	r2, [sp, #12]
 800c650:	9107      	str	r1, [sp, #28]
 800c652:	e9cd 3005 	strd	r3, r0, [sp, #20]
      uint16_t color = src[i * width + j];
 800c656:	f839 5f02 	ldrh.w	r5, [r9, #2]!
      for (int ti = 0; ti < resize; ti++) {
 800c65a:	2700      	movs	r7, #0
 800c65c:	9401      	str	r4, [sp, #4]
 800c65e:	463c      	mov	r4, r7
 800c660:	462f      	mov	r7, r5
 800c662:	f8cd 9008 	str.w	r9, [sp, #8]
        for (int tj = 0; tj < resize; tj++) {
          BSP_LCD_DrawPixel(x + j * resize + tj, y + i * resize + ti, color);
 800c666:	eb0a 0504 	add.w	r5, sl, r4
        for (int tj = 0; tj < resize; tj++) {
 800c66a:	f04f 0900 	mov.w	r9, #0
          BSP_LCD_DrawPixel(x + j * resize + tj, y + i * resize + ti, color);
 800c66e:	b2ad      	uxth	r5, r5
 800c670:	eb08 0009 	add.w	r0, r8, r9
        for (int tj = 0; tj < resize; tj++) {
 800c674:	f109 0901 	add.w	r9, r9, #1
          BSP_LCD_DrawPixel(x + j * resize + tj, y + i * resize + ti, color);
 800c678:	463a      	mov	r2, r7
 800c67a:	4629      	mov	r1, r5
 800c67c:	b280      	uxth	r0, r0
 800c67e:	f7fb fd59 	bl	8008134 <BSP_LCD_DrawPixel>
        for (int tj = 0; tj < resize; tj++) {
 800c682:	45b1      	cmp	r9, r6
 800c684:	d1f4      	bne.n	800c670 <_Z13loadRGB565LCDmmmmPth+0x58>
      for (int ti = 0; ti < resize; ti++) {
 800c686:	3401      	adds	r4, #1
 800c688:	42b4      	cmp	r4, r6
 800c68a:	d1ec      	bne.n	800c666 <_Z13loadRGB565LCDmmmmPth+0x4e>
    for (int j = 0; j < width; j++) {
 800c68c:	eb06 0308 	add.w	r3, r6, r8
 800c690:	e9dd 4901 	ldrd	r4, r9, [sp, #4]
 800c694:	fa1f f883 	uxth.w	r8, r3
 800c698:	9b03      	ldr	r3, [sp, #12]
 800c69a:	3401      	adds	r4, #1
 800c69c:	429c      	cmp	r4, r3
 800c69e:	d1da      	bne.n	800c656 <_Z13loadRGB565LCDmmmmPth+0x3e>
  for (int i = 0; i < height; i++) {
 800c6a0:	461a      	mov	r2, r3
 800c6a2:	f10b 0b01 	add.w	fp, fp, #1
 800c6a6:	9d04      	ldr	r5, [sp, #16]
 800c6a8:	44b2      	add	sl, r6
 800c6aa:	9907      	ldr	r1, [sp, #28]
 800c6ac:	4415      	add	r5, r2
 800c6ae:	fa1f fa8a 	uxth.w	sl, sl
 800c6b2:	e9dd 3005 	ldrd	r3, r0, [sp, #20]
 800c6b6:	455b      	cmp	r3, fp
 800c6b8:	d1c1      	bne.n	800c63e <_Z13loadRGB565LCDmmmmPth+0x26>
        }
      }
    }
  }
}
 800c6ba:	b009      	add	sp, #36	@ 0x24
 800c6bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c6c0 <_Z13displaystringPcii>:
    for (int j = y1 - 1; j < y2; j++) {
      BSP_LCD_DrawPixel(i, j, black);
    }
}

void displaystring(char *buf, int x, int y) {
 800c6c0:	4694      	mov	ip, r2
  BSP_LCD_DisplayStringAt(x, y, buf, LEFT_MODE);
 800c6c2:	2303      	movs	r3, #3
 800c6c4:	4602      	mov	r2, r0
 800c6c6:	b288      	uxth	r0, r1
 800c6c8:	fa1f f18c 	uxth.w	r1, ip
 800c6cc:	f7fb bdec 	b.w	80082a8 <BSP_LCD_DisplayStringAt>

0800c6d0 <_Z14detectResponseifiii>:
#define USENEW
int unper_cnt = 0;

#ifdef USENEW
void detectResponse(int person, float ms, int training_mode, int pred,
                    int label) {
 800c6d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c6d4:	4616      	mov	r6, r2
 800c6d6:	461d      	mov	r5, r3
 800c6d8:	ed2d 8b02 	vpush	{d8}
 800c6dc:	eeb0 8a40 	vmov.f32	s16, s0
 800c6e0:	b088      	sub	sp, #32
  char buf[20];
  if (person) {
 800c6e2:	2800      	cmp	r0, #0
 800c6e4:	f000 80a6 	beq.w	800c834 <_Z14detectResponseifiii+0x164>
    unper_cnt = 0;
 800c6e8:	4bbb      	ldr	r3, [pc, #748]	@ (800c9d8 <_Z14detectResponseifiii+0x308>)
 800c6ea:	2200      	movs	r2, #0
 800c6ec:	601a      	str	r2, [r3, #0]
    if (training_mode) {
 800c6ee:	2900      	cmp	r1, #0
 800c6f0:	f000 8133 	beq.w	800c95a <_Z14detectResponseifiii+0x28a>
  for (int i = x1 - 1; i < x2; i++)
 800c6f4:	f240 180d 	movw	r8, #269	@ 0x10d
    for (int j = y1 - 1; j < y2; j++) {
 800c6f8:	fa1f f788 	uxth.w	r7, r8
 800c6fc:	2427      	movs	r4, #39	@ 0x27
      BSP_LCD_DrawPixel(i, j, green);
 800c6fe:	b2a1      	uxth	r1, r4
    for (int j = y1 - 1; j < y2; j++) {
 800c700:	3401      	adds	r4, #1
      BSP_LCD_DrawPixel(i, j, green);
 800c702:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 800c706:	4638      	mov	r0, r7
 800c708:	f7fb fd14 	bl	8008134 <BSP_LCD_DrawPixel>
    for (int j = y1 - 1; j < y2; j++) {
 800c70c:	2c64      	cmp	r4, #100	@ 0x64
 800c70e:	d1f6      	bne.n	800c6fe <_Z14detectResponseifiii+0x2e>
  for (int i = x1 - 1; i < x2; i++)
 800c710:	f108 0801 	add.w	r8, r8, #1
 800c714:	f5b8 7ff0 	cmp.w	r8, #480	@ 0x1e0
 800c718:	d1ee      	bne.n	800c6f8 <_Z14detectResponseifiii+0x28>
 800c71a:	f240 180d 	movw	r8, #269	@ 0x10d
    for (int j = y1 - 1; j < y2; j++) {
 800c71e:	fa1f f788 	uxth.w	r7, r8
 800c722:	247c      	movs	r4, #124	@ 0x7c
      BSP_LCD_DrawPixel(i, j, green);
 800c724:	b2a1      	uxth	r1, r4
    for (int j = y1 - 1; j < y2; j++) {
 800c726:	3401      	adds	r4, #1
      BSP_LCD_DrawPixel(i, j, green);
 800c728:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 800c72c:	4638      	mov	r0, r7
 800c72e:	f7fb fd01 	bl	8008134 <BSP_LCD_DrawPixel>
    for (int j = y1 - 1; j < y2; j++) {
 800c732:	2cb4      	cmp	r4, #180	@ 0xb4
 800c734:	d1f6      	bne.n	800c724 <_Z14detectResponseifiii+0x54>
  for (int i = x1 - 1; i < x2; i++)
 800c736:	f108 0801 	add.w	r8, r8, #1
 800c73a:	f5b8 7ff0 	cmp.w	r8, #480	@ 0x1e0
 800c73e:	d1ee      	bne.n	800c71e <_Z14detectResponseifiii+0x4e>
 800c740:	f240 180d 	movw	r8, #269	@ 0x10d
    for (int j = y1 - 1; j < y2; j++) {
 800c744:	fa1f f788 	uxth.w	r7, r8
 800c748:	24cc      	movs	r4, #204	@ 0xcc
      BSP_LCD_DrawPixel(i, j, green);
 800c74a:	b2a1      	uxth	r1, r4
    for (int j = y1 - 1; j < y2; j++) {
 800c74c:	3401      	adds	r4, #1
      BSP_LCD_DrawPixel(i, j, green);
 800c74e:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 800c752:	4638      	mov	r0, r7
 800c754:	f7fb fcee 	bl	8008134 <BSP_LCD_DrawPixel>
    for (int j = y1 - 1; j < y2; j++) {
 800c758:	2cfa      	cmp	r4, #250	@ 0xfa
 800c75a:	d1f6      	bne.n	800c74a <_Z14detectResponseifiii+0x7a>
  for (int i = x1 - 1; i < x2; i++)
 800c75c:	f108 0801 	add.w	r8, r8, #1
 800c760:	f5b8 7ff0 	cmp.w	r8, #480	@ 0x1e0
 800c764:	d1ee      	bne.n	800c744 <_Z14detectResponseifiii+0x74>
      drawGreenBackground(270, 480, 40, 100);
      drawGreenBackground(270, 480, 125, 180);
      drawGreenBackground(270, 480, 205, 250);
      BSP_LCD_SetTextColor(LCD_COLOR_RED);
 800c766:	489d      	ldr	r0, [pc, #628]	@ (800c9dc <_Z14detectResponseifiii+0x30c>)
      sprintf(buf, " Prediction:");
 800c768:	ac03      	add	r4, sp, #12
      BSP_LCD_SetTextColor(LCD_COLOR_RED);
 800c76a:	f7fb fcab 	bl	80080c4 <BSP_LCD_SetTextColor>
      sprintf(buf, " Prediction:");
 800c76e:	4b9c      	ldr	r3, [pc, #624]	@ (800c9e0 <_Z14detectResponseifiii+0x310>)
 800c770:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c772:	c407      	stmia	r4!, {r0, r1, r2}
      BSP_LCD_DisplayStringAt(273, 80, buf, LEFT_MODE);
 800c774:	aa03      	add	r2, sp, #12
 800c776:	2150      	movs	r1, #80	@ 0x50
 800c778:	f240 1011 	movw	r0, #273	@ 0x111
      sprintf(buf, " Prediction:");
 800c77c:	7023      	strb	r3, [r4, #0]
      BSP_LCD_DisplayStringAt(273, 80, buf, LEFT_MODE);
 800c77e:	2303      	movs	r3, #3
 800c780:	f7fb fd92 	bl	80082a8 <BSP_LCD_DisplayStringAt>
      sprintf(buf, "  class %d  ", pred);
 800c784:	4632      	mov	r2, r6
 800c786:	4997      	ldr	r1, [pc, #604]	@ (800c9e4 <_Z14detectResponseifiii+0x314>)
 800c788:	a803      	add	r0, sp, #12
 800c78a:	f016 ff23 	bl	80235d4 <sprintf>
      BSP_LCD_DisplayStringAt(273, 100, buf, LEFT_MODE);
 800c78e:	2303      	movs	r3, #3
 800c790:	aa03      	add	r2, sp, #12
 800c792:	2164      	movs	r1, #100	@ 0x64
 800c794:	f240 1011 	movw	r0, #273	@ 0x111
 800c798:	f7fb fd86 	bl	80082a8 <BSP_LCD_DisplayStringAt>
      sprintf(buf, "Ground True:");
 800c79c:	4b92      	ldr	r3, [pc, #584]	@ (800c9e8 <_Z14detectResponseifiii+0x318>)
      BSP_LCD_SetTextColor(LCD_COLOR_RED);
      sprintf(buf, " Prediction:");
      BSP_LCD_DisplayStringAt(273, 80, buf, LEFT_MODE);
      sprintf(buf, "  class %d   ", pred);
      BSP_LCD_DisplayStringAt(273, 100, buf, LEFT_MODE);
      sprintf(buf, "Ground-Truth");
 800c79e:	ae03      	add	r6, sp, #12
 800c7a0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c7a2:	c607      	stmia	r6!, {r0, r1, r2}
      BSP_LCD_DisplayStringAt(273, 120, buf, LEFT_MODE);
 800c7a4:	aa03      	add	r2, sp, #12
 800c7a6:	2178      	movs	r1, #120	@ 0x78
 800c7a8:	f240 1011 	movw	r0, #273	@ 0x111
      sprintf(buf, "Ground-Truth");
 800c7ac:	7023      	strb	r3, [r4, #0]
      BSP_LCD_DisplayStringAt(273, 120, buf, LEFT_MODE);
 800c7ae:	2303      	movs	r3, #3
 800c7b0:	f7fb fd7a 	bl	80082a8 <BSP_LCD_DisplayStringAt>
      sprintf(buf, "  class %d   ", label);
 800c7b4:	462a      	mov	r2, r5
 800c7b6:	498d      	ldr	r1, [pc, #564]	@ (800c9ec <_Z14detectResponseifiii+0x31c>)
 800c7b8:	a803      	add	r0, sp, #12
 800c7ba:	f016 ff0b 	bl	80235d4 <sprintf>
      BSP_LCD_DisplayStringAt(273, 140, buf, LEFT_MODE);
 800c7be:	2303      	movs	r3, #3
 800c7c0:	aa03      	add	r2, sp, #12
 800c7c2:	218c      	movs	r1, #140	@ 0x8c
 800c7c4:	f240 1011 	movw	r0, #273	@ 0x111
 800c7c8:	f7fb fd6e 	bl	80082a8 <BSP_LCD_DisplayStringAt>
      BSP_LCD_SetTextColor(LCD_COLOR_RED);
      BSP_LCD_DisplayStringAt(273, 100, "  No Person ", LEFT_MODE);
    }
  }

  if (ms == 0)
 800c7cc:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800c7d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c7d4:	d029      	beq.n	800c82a <_Z14detectResponseifiii+0x15a>
    return;
  BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 800c7d6:	4886      	ldr	r0, [pc, #536]	@ (800c9f0 <_Z14detectResponseifiii+0x320>)
 800c7d8:	f7fb fc74 	bl	80080c4 <BSP_LCD_SetTextColor>
  volatile float rate = 1000 / ms;
 800c7dc:	eddf 6a85 	vldr	s13, [pc, #532]	@ 800c9f4 <_Z14detectResponseifiii+0x324>
  volatile int decimal = (int)rate;
  volatile int floating = (int)((rate - (float)decimal) * 1000);
  sprintf(buf, "  fps:%d.%03d ", decimal, floating);
 800c7e0:	4985      	ldr	r1, [pc, #532]	@ (800c9f8 <_Z14detectResponseifiii+0x328>)
 800c7e2:	a803      	add	r0, sp, #12
  volatile float rate = 1000 / ms;
 800c7e4:	eec6 7a88 	vdiv.f32	s15, s13, s16
 800c7e8:	edcd 7a00 	vstr	s15, [sp]
  volatile int decimal = (int)rate;
 800c7ec:	eddd 7a00 	vldr	s15, [sp]
 800c7f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c7f4:	edcd 7a01 	vstr	s15, [sp, #4]
  volatile int floating = (int)((rate - (float)decimal) * 1000);
 800c7f8:	eddd 7a00 	vldr	s15, [sp]
 800c7fc:	ed9d 7a01 	vldr	s14, [sp, #4]
 800c800:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800c804:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c808:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800c80c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c810:	edcd 7a02 	vstr	s15, [sp, #8]
  sprintf(buf, "  fps:%d.%03d ", decimal, floating);
 800c814:	9a01      	ldr	r2, [sp, #4]
 800c816:	9b02      	ldr	r3, [sp, #8]
 800c818:	f016 fedc 	bl	80235d4 <sprintf>
  BSP_LCD_DisplayStringAt(273, 180, buf, LEFT_MODE);
 800c81c:	2303      	movs	r3, #3
 800c81e:	aa03      	add	r2, sp, #12
 800c820:	21b4      	movs	r1, #180	@ 0xb4
 800c822:	f240 1011 	movw	r0, #273	@ 0x111
 800c826:	f7fb fd3f 	bl	80082a8 <BSP_LCD_DisplayStringAt>
}
 800c82a:	b008      	add	sp, #32
 800c82c:	ecbd 8b02 	vpop	{d8}
 800c830:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (training_mode) {
 800c834:	2900      	cmp	r1, #0
 800c836:	d055      	beq.n	800c8e4 <_Z14detectResponseifiii+0x214>
  for (int i = x1 - 1; i < x2; i++)
 800c838:	f240 180d 	movw	r8, #269	@ 0x10d
    for (int j = y1 - 1; j < y2; j++) {
 800c83c:	fa1f f788 	uxth.w	r7, r8
 800c840:	2427      	movs	r4, #39	@ 0x27
      BSP_LCD_DrawPixel(i, j, red);
 800c842:	b2a1      	uxth	r1, r4
    for (int j = y1 - 1; j < y2; j++) {
 800c844:	3401      	adds	r4, #1
      BSP_LCD_DrawPixel(i, j, red);
 800c846:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 800c84a:	4638      	mov	r0, r7
 800c84c:	f7fb fc72 	bl	8008134 <BSP_LCD_DrawPixel>
    for (int j = y1 - 1; j < y2; j++) {
 800c850:	2c64      	cmp	r4, #100	@ 0x64
 800c852:	d1f6      	bne.n	800c842 <_Z14detectResponseifiii+0x172>
  for (int i = x1 - 1; i < x2; i++)
 800c854:	f108 0801 	add.w	r8, r8, #1
 800c858:	f5b8 7ff0 	cmp.w	r8, #480	@ 0x1e0
 800c85c:	d1ee      	bne.n	800c83c <_Z14detectResponseifiii+0x16c>
 800c85e:	f240 180d 	movw	r8, #269	@ 0x10d
    for (int j = y1 - 1; j < y2; j++) {
 800c862:	fa1f f788 	uxth.w	r7, r8
 800c866:	247c      	movs	r4, #124	@ 0x7c
      BSP_LCD_DrawPixel(i, j, red);
 800c868:	b2a1      	uxth	r1, r4
    for (int j = y1 - 1; j < y2; j++) {
 800c86a:	3401      	adds	r4, #1
      BSP_LCD_DrawPixel(i, j, red);
 800c86c:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 800c870:	4638      	mov	r0, r7
 800c872:	f7fb fc5f 	bl	8008134 <BSP_LCD_DrawPixel>
    for (int j = y1 - 1; j < y2; j++) {
 800c876:	2cb4      	cmp	r4, #180	@ 0xb4
 800c878:	d1f6      	bne.n	800c868 <_Z14detectResponseifiii+0x198>
  for (int i = x1 - 1; i < x2; i++)
 800c87a:	f108 0801 	add.w	r8, r8, #1
 800c87e:	f5b8 7ff0 	cmp.w	r8, #480	@ 0x1e0
 800c882:	d1ee      	bne.n	800c862 <_Z14detectResponseifiii+0x192>
 800c884:	f240 180d 	movw	r8, #269	@ 0x10d
    for (int j = y1 - 1; j < y2; j++) {
 800c888:	fa1f f788 	uxth.w	r7, r8
 800c88c:	24cc      	movs	r4, #204	@ 0xcc
      BSP_LCD_DrawPixel(i, j, red);
 800c88e:	b2a1      	uxth	r1, r4
    for (int j = y1 - 1; j < y2; j++) {
 800c890:	3401      	adds	r4, #1
      BSP_LCD_DrawPixel(i, j, red);
 800c892:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 800c896:	4638      	mov	r0, r7
 800c898:	f7fb fc4c 	bl	8008134 <BSP_LCD_DrawPixel>
    for (int j = y1 - 1; j < y2; j++) {
 800c89c:	2cfa      	cmp	r4, #250	@ 0xfa
 800c89e:	d1f6      	bne.n	800c88e <_Z14detectResponseifiii+0x1be>
  for (int i = x1 - 1; i < x2; i++)
 800c8a0:	f108 0801 	add.w	r8, r8, #1
 800c8a4:	f5b8 7ff0 	cmp.w	r8, #480	@ 0x1e0
 800c8a8:	d1ee      	bne.n	800c888 <_Z14detectResponseifiii+0x1b8>
      BSP_LCD_SetTextColor(LCD_COLOR_RED);
 800c8aa:	484c      	ldr	r0, [pc, #304]	@ (800c9dc <_Z14detectResponseifiii+0x30c>)
      sprintf(buf, " Prediction:");
 800c8ac:	ac03      	add	r4, sp, #12
      BSP_LCD_SetTextColor(LCD_COLOR_RED);
 800c8ae:	f7fb fc09 	bl	80080c4 <BSP_LCD_SetTextColor>
      sprintf(buf, " Prediction:");
 800c8b2:	4b4b      	ldr	r3, [pc, #300]	@ (800c9e0 <_Z14detectResponseifiii+0x310>)
 800c8b4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c8b6:	c407      	stmia	r4!, {r0, r1, r2}
      BSP_LCD_DisplayStringAt(273, 80, buf, LEFT_MODE);
 800c8b8:	aa03      	add	r2, sp, #12
 800c8ba:	2150      	movs	r1, #80	@ 0x50
 800c8bc:	f240 1011 	movw	r0, #273	@ 0x111
      sprintf(buf, " Prediction:");
 800c8c0:	7023      	strb	r3, [r4, #0]
      BSP_LCD_DisplayStringAt(273, 80, buf, LEFT_MODE);
 800c8c2:	2303      	movs	r3, #3
 800c8c4:	f7fb fcf0 	bl	80082a8 <BSP_LCD_DisplayStringAt>
      sprintf(buf, "  class %d   ", pred);
 800c8c8:	4632      	mov	r2, r6
 800c8ca:	4948      	ldr	r1, [pc, #288]	@ (800c9ec <_Z14detectResponseifiii+0x31c>)
 800c8cc:	a803      	add	r0, sp, #12
 800c8ce:	f016 fe81 	bl	80235d4 <sprintf>
      BSP_LCD_DisplayStringAt(273, 100, buf, LEFT_MODE);
 800c8d2:	2303      	movs	r3, #3
 800c8d4:	aa03      	add	r2, sp, #12
 800c8d6:	2164      	movs	r1, #100	@ 0x64
 800c8d8:	f240 1011 	movw	r0, #273	@ 0x111
 800c8dc:	f7fb fce4 	bl	80082a8 <BSP_LCD_DisplayStringAt>
      sprintf(buf, "Ground-Truth");
 800c8e0:	4b46      	ldr	r3, [pc, #280]	@ (800c9fc <_Z14detectResponseifiii+0x32c>)
 800c8e2:	e75c      	b.n	800c79e <_Z14detectResponseifiii+0xce>
  for (int i = x1 - 1; i < x2; i++)
 800c8e4:	f240 160d 	movw	r6, #269	@ 0x10d
    for (int j = y1 - 1; j < y2; j++) {
 800c8e8:	b2b5      	uxth	r5, r6
 800c8ea:	2427      	movs	r4, #39	@ 0x27
      BSP_LCD_DrawPixel(i, j, black);
 800c8ec:	b2a1      	uxth	r1, r4
    for (int j = y1 - 1; j < y2; j++) {
 800c8ee:	3401      	adds	r4, #1
      BSP_LCD_DrawPixel(i, j, black);
 800c8f0:	2200      	movs	r2, #0
 800c8f2:	4628      	mov	r0, r5
 800c8f4:	f7fb fc1e 	bl	8008134 <BSP_LCD_DrawPixel>
    for (int j = y1 - 1; j < y2; j++) {
 800c8f8:	2c64      	cmp	r4, #100	@ 0x64
 800c8fa:	d1f7      	bne.n	800c8ec <_Z14detectResponseifiii+0x21c>
  for (int i = x1 - 1; i < x2; i++)
 800c8fc:	3601      	adds	r6, #1
 800c8fe:	f5b6 7ff0 	cmp.w	r6, #480	@ 0x1e0
 800c902:	d1f1      	bne.n	800c8e8 <_Z14detectResponseifiii+0x218>
 800c904:	f240 160d 	movw	r6, #269	@ 0x10d
    for (int j = y1 - 1; j < y2; j++) {
 800c908:	b2b5      	uxth	r5, r6
 800c90a:	247c      	movs	r4, #124	@ 0x7c
      BSP_LCD_DrawPixel(i, j, black);
 800c90c:	b2a1      	uxth	r1, r4
    for (int j = y1 - 1; j < y2; j++) {
 800c90e:	3401      	adds	r4, #1
      BSP_LCD_DrawPixel(i, j, black);
 800c910:	2200      	movs	r2, #0
 800c912:	4628      	mov	r0, r5
 800c914:	f7fb fc0e 	bl	8008134 <BSP_LCD_DrawPixel>
    for (int j = y1 - 1; j < y2; j++) {
 800c918:	2cb4      	cmp	r4, #180	@ 0xb4
 800c91a:	d1f7      	bne.n	800c90c <_Z14detectResponseifiii+0x23c>
  for (int i = x1 - 1; i < x2; i++)
 800c91c:	3601      	adds	r6, #1
 800c91e:	f5b6 7ff0 	cmp.w	r6, #480	@ 0x1e0
 800c922:	d1f1      	bne.n	800c908 <_Z14detectResponseifiii+0x238>
 800c924:	f240 160d 	movw	r6, #269	@ 0x10d
    for (int j = y1 - 1; j < y2; j++) {
 800c928:	b2b5      	uxth	r5, r6
 800c92a:	24cc      	movs	r4, #204	@ 0xcc
      BSP_LCD_DrawPixel(i, j, black);
 800c92c:	b2a1      	uxth	r1, r4
    for (int j = y1 - 1; j < y2; j++) {
 800c92e:	3401      	adds	r4, #1
      BSP_LCD_DrawPixel(i, j, black);
 800c930:	2200      	movs	r2, #0
 800c932:	4628      	mov	r0, r5
 800c934:	f7fb fbfe 	bl	8008134 <BSP_LCD_DrawPixel>
    for (int j = y1 - 1; j < y2; j++) {
 800c938:	2cfa      	cmp	r4, #250	@ 0xfa
 800c93a:	d1f7      	bne.n	800c92c <_Z14detectResponseifiii+0x25c>
  for (int i = x1 - 1; i < x2; i++)
 800c93c:	3601      	adds	r6, #1
 800c93e:	f5b6 7ff0 	cmp.w	r6, #480	@ 0x1e0
 800c942:	d1f1      	bne.n	800c928 <_Z14detectResponseifiii+0x258>
      BSP_LCD_SetTextColor(LCD_COLOR_RED);
 800c944:	4825      	ldr	r0, [pc, #148]	@ (800c9dc <_Z14detectResponseifiii+0x30c>)
 800c946:	f7fb fbbd 	bl	80080c4 <BSP_LCD_SetTextColor>
      BSP_LCD_DisplayStringAt(273, 100, "  No Person ", LEFT_MODE);
 800c94a:	2303      	movs	r3, #3
 800c94c:	4a2c      	ldr	r2, [pc, #176]	@ (800ca00 <_Z14detectResponseifiii+0x330>)
 800c94e:	2164      	movs	r1, #100	@ 0x64
 800c950:	f240 1011 	movw	r0, #273	@ 0x111
 800c954:	f7fb fca8 	bl	80082a8 <BSP_LCD_DisplayStringAt>
 800c958:	e738      	b.n	800c7cc <_Z14detectResponseifiii+0xfc>
  for (int i = x1 - 1; i < x2; i++)
 800c95a:	f240 160d 	movw	r6, #269	@ 0x10d
    for (int j = y1 - 1; j < y2; j++) {
 800c95e:	b2b5      	uxth	r5, r6
 800c960:	2427      	movs	r4, #39	@ 0x27
      BSP_LCD_DrawPixel(i, j, blue);
 800c962:	b2a1      	uxth	r1, r4
    for (int j = y1 - 1; j < y2; j++) {
 800c964:	3401      	adds	r4, #1
      BSP_LCD_DrawPixel(i, j, blue);
 800c966:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 800c96a:	4628      	mov	r0, r5
 800c96c:	f7fb fbe2 	bl	8008134 <BSP_LCD_DrawPixel>
    for (int j = y1 - 1; j < y2; j++) {
 800c970:	2c64      	cmp	r4, #100	@ 0x64
 800c972:	d1f6      	bne.n	800c962 <_Z14detectResponseifiii+0x292>
  for (int i = x1 - 1; i < x2; i++)
 800c974:	3601      	adds	r6, #1
 800c976:	f5b6 7ff0 	cmp.w	r6, #480	@ 0x1e0
 800c97a:	d1f0      	bne.n	800c95e <_Z14detectResponseifiii+0x28e>
 800c97c:	f240 160d 	movw	r6, #269	@ 0x10d
    for (int j = y1 - 1; j < y2; j++) {
 800c980:	b2b5      	uxth	r5, r6
 800c982:	247c      	movs	r4, #124	@ 0x7c
      BSP_LCD_DrawPixel(i, j, blue);
 800c984:	b2a1      	uxth	r1, r4
    for (int j = y1 - 1; j < y2; j++) {
 800c986:	3401      	adds	r4, #1
      BSP_LCD_DrawPixel(i, j, blue);
 800c988:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 800c98c:	4628      	mov	r0, r5
 800c98e:	f7fb fbd1 	bl	8008134 <BSP_LCD_DrawPixel>
    for (int j = y1 - 1; j < y2; j++) {
 800c992:	2cb4      	cmp	r4, #180	@ 0xb4
 800c994:	d1f6      	bne.n	800c984 <_Z14detectResponseifiii+0x2b4>
  for (int i = x1 - 1; i < x2; i++)
 800c996:	3601      	adds	r6, #1
 800c998:	f5b6 7ff0 	cmp.w	r6, #480	@ 0x1e0
 800c99c:	d1f0      	bne.n	800c980 <_Z14detectResponseifiii+0x2b0>
 800c99e:	f240 160d 	movw	r6, #269	@ 0x10d
    for (int j = y1 - 1; j < y2; j++) {
 800c9a2:	b2b5      	uxth	r5, r6
 800c9a4:	24cc      	movs	r4, #204	@ 0xcc
      BSP_LCD_DrawPixel(i, j, blue);
 800c9a6:	b2a1      	uxth	r1, r4
    for (int j = y1 - 1; j < y2; j++) {
 800c9a8:	3401      	adds	r4, #1
      BSP_LCD_DrawPixel(i, j, blue);
 800c9aa:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 800c9ae:	4628      	mov	r0, r5
 800c9b0:	f7fb fbc0 	bl	8008134 <BSP_LCD_DrawPixel>
    for (int j = y1 - 1; j < y2; j++) {
 800c9b4:	2cfa      	cmp	r4, #250	@ 0xfa
 800c9b6:	d1f6      	bne.n	800c9a6 <_Z14detectResponseifiii+0x2d6>
  for (int i = x1 - 1; i < x2; i++)
 800c9b8:	3601      	adds	r6, #1
 800c9ba:	f5b6 7ff0 	cmp.w	r6, #480	@ 0x1e0
 800c9be:	d1f0      	bne.n	800c9a2 <_Z14detectResponseifiii+0x2d2>
      BSP_LCD_SetTextColor(LCD_COLOR_RED);
 800c9c0:	4806      	ldr	r0, [pc, #24]	@ (800c9dc <_Z14detectResponseifiii+0x30c>)
 800c9c2:	f7fb fb7f 	bl	80080c4 <BSP_LCD_SetTextColor>
      BSP_LCD_DisplayStringAt(273, 100, "   Person   ", LEFT_MODE);
 800c9c6:	2303      	movs	r3, #3
 800c9c8:	4a0e      	ldr	r2, [pc, #56]	@ (800ca04 <_Z14detectResponseifiii+0x334>)
 800c9ca:	2164      	movs	r1, #100	@ 0x64
 800c9cc:	f240 1011 	movw	r0, #273	@ 0x111
 800c9d0:	f7fb fc6a 	bl	80082a8 <BSP_LCD_DisplayStringAt>
 800c9d4:	e6fa      	b.n	800c7cc <_Z14detectResponseifiii+0xfc>
 800c9d6:	bf00      	nop
 800c9d8:	2000c2ac 	.word	0x2000c2ac
 800c9dc:	ffff0000 	.word	0xffff0000
 800c9e0:	0802d89c 	.word	0x0802d89c
 800c9e4:	0802d8ac 	.word	0x0802d8ac
 800c9e8:	0802d8bc 	.word	0x0802d8bc
 800c9ec:	0802d8cc 	.word	0x0802d8cc
 800c9f0:	ff0000ff 	.word	0xff0000ff
 800c9f4:	447a0000 	.word	0x447a0000
 800c9f8:	0802d90c 	.word	0x0802d90c
 800c9fc:	0802d8ec 	.word	0x0802d8ec
 800ca00:	0802d8fc 	.word	0x0802d8fc
 800ca04:	0802d8dc 	.word	0x0802d8dc

0800ca08 <_Z8lcdsetupv>:
  sprintf(buf, "  fps:%d.%03d ", decimal, floating);
  BSP_LCD_DisplayStringAt(273, 180, buf, LEFT_MODE);
}
#endif

void lcdsetup() {
 800ca08:	b510      	push	{r4, lr}
 800ca0a:	b0a2      	sub	sp, #136	@ 0x88
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;

  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 800ca0c:	2205      	movs	r2, #5
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 800ca0e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 800ca12:	21c0      	movs	r1, #192	@ 0xc0
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800ca14:	2408      	movs	r4, #8
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 800ca16:	a801      	add	r0, sp, #4
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 800ca18:	9208      	str	r2, [sp, #32]
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 800ca1a:	930c      	str	r3, [sp, #48]	@ 0x30
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 800ca1c:	9106      	str	r1, [sp, #24]
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800ca1e:	9401      	str	r4, [sp, #4]
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 800ca20:	f7fd fbdc 	bl	800a1dc <HAL_RCCEx_PeriphCLKConfig>

  BSP_LCD_Init();
 800ca24:	f7fb fd78 	bl	8008518 <BSP_LCD_Init>

  BSP_LCD_LayerRgb565Init(0, LCD_FB_START_ADDRESS);
 800ca28:	f04f 4140 	mov.w	r1, #3221225472	@ 0xc0000000
 800ca2c:	2000      	movs	r0, #0
 800ca2e:	f7fb faf9 	bl	8008024 <BSP_LCD_LayerRgb565Init>
  BSP_LCD_LayerRgb565Init(1, LCD_FB_START_ADDRESS +
                                 (BSP_LCD_GetXSize() * BSP_LCD_GetYSize() * 4));
 800ca32:	f7fb fadf 	bl	8007ff4 <BSP_LCD_GetXSize>
 800ca36:	4604      	mov	r4, r0
 800ca38:	f7fb fae8 	bl	800800c <BSP_LCD_GetYSize>
 800ca3c:	4601      	mov	r1, r0
  BSP_LCD_LayerRgb565Init(1, LCD_FB_START_ADDRESS +
 800ca3e:	2001      	movs	r0, #1
                                 (BSP_LCD_GetXSize() * BSP_LCD_GetYSize() * 4));
 800ca40:	fb04 f101 	mul.w	r1, r4, r1
  BSP_LCD_LayerRgb565Init(1, LCD_FB_START_ADDRESS +
 800ca44:	f101 5140 	add.w	r1, r1, #805306368	@ 0x30000000
 800ca48:	0089      	lsls	r1, r1, #2
 800ca4a:	f7fb faeb 	bl	8008024 <BSP_LCD_LayerRgb565Init>

  BSP_LCD_DisplayOn();
 800ca4e:	f7fb fc95 	bl	800837c <BSP_LCD_DisplayOn>

  BSP_LCD_SelectLayer(0);
 800ca52:	2000      	movs	r0, #0
 800ca54:	f7fb fb28 	bl	80080a8 <BSP_LCD_SelectLayer>

  BSP_LCD_Clear(LCD_COLOR_BLACK);
 800ca58:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 800ca5c:	f7fb fb4c 	bl	80080f8 <BSP_LCD_Clear>

  BSP_LCD_SelectLayer(1);
 800ca60:	2001      	movs	r0, #1
 800ca62:	f7fb fb21 	bl	80080a8 <BSP_LCD_SelectLayer>

  BSP_LCD_Clear(LCD_COLOR_BLACK);
 800ca66:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 800ca6a:	f7fb fb45 	bl	80080f8 <BSP_LCD_Clear>

  BSP_LCD_SetTransparency(0, 0);
 800ca6e:	2100      	movs	r1, #0
 800ca70:	4608      	mov	r0, r1
 800ca72:	f7fb fb1f 	bl	80080b4 <BSP_LCD_SetTransparency>
  BSP_LCD_SetTransparency(1, 100);
 800ca76:	2164      	movs	r1, #100	@ 0x64
 800ca78:	2001      	movs	r0, #1
 800ca7a:	f7fb fb1b 	bl	80080b4 <BSP_LCD_SetTransparency>

  BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 800ca7e:	4802      	ldr	r0, [pc, #8]	@ (800ca88 <_Z8lcdsetupv+0x80>)
 800ca80:	f7fb fb20 	bl	80080c4 <BSP_LCD_SetTextColor>
}
 800ca84:	b022      	add	sp, #136	@ 0x88
 800ca86:	bd10      	pop	{r4, pc}
 800ca88:	ff0000ff 	.word	0xff0000ff

0800ca8c <_ZL8printLogPKc>:
#define RUNS 1
static int profile_i;
static int start, end;
static char buf[100];

static inline void printLog(const char *s) {
 800ca8c:	b570      	push	{r4, r5, r6, lr}
	static int is_initialized = 0;
	if (!is_initialized) {
 800ca8e:	4d11      	ldr	r5, [pc, #68]	@ (800cad4 <_ZL8printLogPKc+0x48>)
static inline void printLog(const char *s) {
 800ca90:	4604      	mov	r4, r0
	if (!is_initialized) {
 800ca92:	682b      	ldr	r3, [r5, #0]
 800ca94:	b153      	cbz	r3, 800caac <_ZL8printLogPKc+0x20>
		if (HAL_UART_Init(&UART) != HAL_OK) {
			//Error handling
		}
		is_initialized = 1;
	}
	HAL_UART_Transmit(&UART, (uint8_t*) s, strlen(s), 10);
 800ca96:	4620      	mov	r0, r4
 800ca98:	f7f9 fc02 	bl	80062a0 <strlen>
 800ca9c:	4621      	mov	r1, r4
 800ca9e:	b282      	uxth	r2, r0
 800caa0:	230a      	movs	r3, #10
 800caa2:	480d      	ldr	r0, [pc, #52]	@ (800cad8 <_ZL8printLogPKc+0x4c>)
}
 800caa4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	HAL_UART_Transmit(&UART, (uint8_t*) s, strlen(s), 10);
 800caa8:	f7fe ba76 	b.w	800af98 <HAL_UART_Transmit>
		UART.Instance = USART1;
 800caac:	480a      	ldr	r0, [pc, #40]	@ (800cad8 <_ZL8printLogPKc+0x4c>)
 800caae:	4a0b      	ldr	r2, [pc, #44]	@ (800cadc <_ZL8printLogPKc+0x50>)
		UART.Init.BaudRate = 115200;
 800cab0:	6083      	str	r3, [r0, #8]
		UART.Instance = USART1;
 800cab2:	6002      	str	r2, [r0, #0]
		UART.Init.BaudRate = 115200;
 800cab4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800cab8:	6183      	str	r3, [r0, #24]
 800caba:	6042      	str	r2, [r0, #4]
 800cabc:	220c      	movs	r2, #12
		UART.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800cabe:	6243      	str	r3, [r0, #36]	@ 0x24
		UART.Init.BaudRate = 115200;
 800cac0:	6142      	str	r2, [r0, #20]
 800cac2:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800cac6:	e9c0 3307 	strd	r3, r3, [r0, #28]
		if (HAL_UART_Init(&UART) != HAL_OK) {
 800caca:	f7fe fd9e 	bl	800b60a <HAL_UART_Init>
		is_initialized = 1;
 800cace:	2301      	movs	r3, #1
 800cad0:	602b      	str	r3, [r5, #0]
 800cad2:	e7e0      	b.n	800ca96 <_ZL8printLogPKc+0xa>
 800cad4:	2000c2e8 	.word	0x2000c2e8
 800cad8:	2000c2f0 	.word	0x2000c2f0
 800cadc:	40011000 	.word	0x40011000

0800cae0 <main>:
uint16_t *RGBbuf;
#define ENABLE_TRAIN
int main(void) {
  static int reset_count = 0;
  char logbuf[150];
  sprintf(logbuf, "System initialization #%d starting\r\n", ++reset_count);
 800cae0:	4b3b      	ldr	r3, [pc, #236]	@ (800cbd0 <main+0xf0>)
 800cae2:	493c      	ldr	r1, [pc, #240]	@ (800cbd4 <main+0xf4>)
 800cae4:	681a      	ldr	r2, [r3, #0]
int main(void) {
 800cae6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800caea:	ed2d 8b02 	vpush	{d8}
 800caee:	b0e5      	sub	sp, #404	@ 0x194
  sprintf(logbuf, "System initialization #%d starting\r\n", ++reset_count);
 800caf0:	3201      	adds	r2, #1
 800caf2:	a818      	add	r0, sp, #96	@ 0x60
 800caf4:	601a      	str	r2, [r3, #0]
 800caf6:	f016 fd6d 	bl	80235d4 <sprintf>
  printLog(logbuf);
 800cafa:	a818      	add	r0, sp, #96	@ 0x60
 800cafc:	f7ff ffc6 	bl	800ca8c <_ZL8printLogPKc>

  char buf[150];
  char showbuf[150];

  printLog("About to initialize CPU cache\r\n");
 800cb00:	4835      	ldr	r0, [pc, #212]	@ (800cbd8 <main+0xf8>)
 800cb02:	f7ff ffc3 	bl	800ca8c <_ZL8printLogPKc>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800cb06:	4b35      	ldr	r3, [pc, #212]	@ (800cbdc <main+0xfc>)
 800cb08:	695a      	ldr	r2, [r3, #20]
 800cb0a:	f412 3200 	ands.w	r2, r2, #131072	@ 0x20000
 800cb0e:	d111      	bne.n	800cb34 <main+0x54>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800cb10:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800cb14:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800cb18:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800cb1c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800cb20:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800cb24:	695a      	ldr	r2, [r3, #20]
 800cb26:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800cb2a:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800cb2c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800cb30:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800cb34:	4b29      	ldr	r3, [pc, #164]	@ (800cbdc <main+0xfc>)
 800cb36:	695a      	ldr	r2, [r3, #20]
 800cb38:	f412 3280 	ands.w	r2, r2, #65536	@ 0x10000
 800cb3c:	d124      	bne.n	800cb88 <main+0xa8>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 800cb3e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800cb42:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 800cb46:	f8d3 1080 	ldr.w	r1, [r3, #128]	@ 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800cb4a:	f643 74e0 	movw	r4, #16352	@ 0x3fe0
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800cb4e:	f3c1 324e 	ubfx	r2, r1, #13, #15
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800cb52:	f3c1 01c9 	ubfx	r1, r1, #3, #10
 800cb56:	0152      	lsls	r2, r2, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800cb58:	ea02 0504 	and.w	r5, r2, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800cb5c:	4608      	mov	r0, r1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800cb5e:	ea45 7680 	orr.w	r6, r5, r0, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800cb62:	3801      	subs	r0, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800cb64:	f8c3 6260 	str.w	r6, [r3, #608]	@ 0x260
      } while (ways-- != 0U);
 800cb68:	1c46      	adds	r6, r0, #1
 800cb6a:	d1f8      	bne.n	800cb5e <main+0x7e>
    } while(sets-- != 0U);
 800cb6c:	3a20      	subs	r2, #32
 800cb6e:	f112 0f20 	cmn.w	r2, #32
 800cb72:	d1f1      	bne.n	800cb58 <main+0x78>
 800cb74:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800cb78:	695a      	ldr	r2, [r3, #20]
 800cb7a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800cb7e:	615a      	str	r2, [r3, #20]
 800cb80:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800cb84:	f3bf 8f6f 	isb	sy
  CPU_CACHE_Enable();
  printLog("CPU cache initialized\r\n");
 800cb88:	4815      	ldr	r0, [pc, #84]	@ (800cbe0 <main+0x100>)
  RCC_OscInitStruct.PLL.PLLM = 25;
  RCC_OscInitStruct.PLL.PLLN = 432;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 9;

  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800cb8a:	ad3e      	add	r5, sp, #248	@ 0xf8
  printLog("CPU cache initialized\r\n");
 800cb8c:	f7ff ff7e 	bl	800ca8c <_ZL8printLogPKc>
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800cb90:	f04f 0902 	mov.w	r9, #2
  HAL_Init();
 800cb94:	f7fb fe88 	bl	80088a8 <HAL_Init>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800cb98:	2001      	movs	r0, #1
 800cb9a:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800cb9e:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
  RCC_OscInitStruct.PLL.PLLM = 25;
 800cba2:	2319      	movs	r3, #25
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800cba4:	f8cd 9110 	str.w	r9, [sp, #272]	@ 0x110
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800cba8:	e9cd 013e 	strd	r0, r1, [sp, #248]	@ 0xf8
  RCC_OscInitStruct.PLL.PLLM = 25;
 800cbac:	e9cd 2345 	strd	r2, r3, [sp, #276]	@ 0x114
  RCC_OscInitStruct.PLL.PLLN = 432;
 800cbb0:	f44f 71d8 	mov.w	r1, #432	@ 0x1b0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800cbb4:	2202      	movs	r2, #2
 800cbb6:	2309      	movs	r3, #9
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800cbb8:	4628      	mov	r0, r5
  RCC_OscInitStruct.PLL.PLLN = 432;
 800cbba:	9147      	str	r1, [sp, #284]	@ 0x11c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800cbbc:	e9cd 2348 	strd	r2, r3, [sp, #288]	@ 0x120
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800cbc0:	f7fc fff6 	bl	8009bb0 <HAL_RCC_OscConfig>
  if (ret != HAL_OK) {
 800cbc4:	b100      	cbz	r0, 800cbc8 <main+0xe8>
    while (1) {
 800cbc6:	e7fe      	b.n	800cbc6 <main+0xe6>
      ;
    }
  }

  ret = HAL_PWREx_EnableOverDrive();
 800cbc8:	f7fc ffb4 	bl	8009b34 <HAL_PWREx_EnableOverDrive>
  if (ret != HAL_OK) {
 800cbcc:	b150      	cbz	r0, 800cbe4 <main+0x104>
    while (1) {
 800cbce:	e7fe      	b.n	800cbce <main+0xee>
 800cbd0:	2000c2b0 	.word	0x2000c2b0
 800cbd4:	0802d91c 	.word	0x0802d91c
 800cbd8:	0802d944 	.word	0x0802d944
 800cbdc:	e000ed00 	.word	0xe000ed00
 800cbe0:	0802d964 	.word	0x0802d964
      ;
    }
  }

  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK |
 800cbe4:	220f      	movs	r2, #15
                                 RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800cbe6:	f44f 5480 	mov.w	r4, #4096	@ 0x1000

  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7);
 800cbea:	2107      	movs	r1, #7
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800cbec:	9417      	str	r4, [sp, #92]	@ 0x5c
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK |
 800cbee:	e9cd 2913 	strd	r2, r9, [sp, #76]	@ 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800cbf2:	f44f 52a0 	mov.w	r2, #5120	@ 0x1400
 800cbf6:	e9cd 0215 	strd	r0, r2, [sp, #84]	@ 0x54
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7);
 800cbfa:	a813      	add	r0, sp, #76	@ 0x4c
 800cbfc:	f7fd fa16 	bl	800a02c <HAL_RCC_ClockConfig>
  if (ret != HAL_OK) {
 800cc00:	4680      	mov	r8, r0
 800cc02:	2800      	cmp	r0, #0
 800cc04:	f040 8320 	bne.w	800d248 <main+0x768>
}

static void MX_GPIO_Init(void) {
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  __HAL_RCC_GPIOE_CLK_ENABLE();
 800cc08:	4bc9      	ldr	r3, [pc, #804]	@ (800cf30 <main+0x450>)
  __HAL_RCC_GPIOI_CLK_ENABLE();
  __HAL_RCC_GPIOK_CLK_ENABLE();
  __HAL_RCC_GPIOF_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();

  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin,
 800cc0a:	2120      	movs	r1, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cc0c:	903e      	str	r0, [sp, #248]	@ 0xf8
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);

  GPIO_InitStruct.Pin = RMII_TXD1_Pin | RMII_TXD0_Pin | RMII_TX_EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cc0e:	f04f 0a03 	mov.w	sl, #3
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800cc12:	2701      	movs	r7, #1
        detectResponse(answer_right, 0, t_mode, p, label);
 800cc14:	ed9f 8ac7 	vldr	s16, [pc, #796]	@ 800cf34 <main+0x454>
 800cc18:	4ec7      	ldr	r6, [pc, #796]	@ (800cf38 <main+0x458>)
 800cc1a:	f8df b34c 	ldr.w	fp, [pc, #844]	@ 800cf68 <main+0x488>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cc1e:	e9c5 0001 	strd	r0, r0, [r5, #4]
 800cc22:	e9c5 0003 	strd	r0, r0, [r5, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800cc26:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin,
 800cc28:	48c4      	ldr	r0, [pc, #784]	@ (800cf3c <main+0x45c>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800cc2a:	f042 0210 	orr.w	r2, r2, #16
 800cc2e:	631a      	str	r2, [r3, #48]	@ 0x30
 800cc30:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800cc32:	f002 0210 	and.w	r2, r2, #16
 800cc36:	9209      	str	r2, [sp, #36]	@ 0x24
 800cc38:	9a09      	ldr	r2, [sp, #36]	@ 0x24
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800cc3a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800cc3c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800cc40:	631a      	str	r2, [r3, #48]	@ 0x30
 800cc42:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800cc44:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 800cc48:	920a      	str	r2, [sp, #40]	@ 0x28
 800cc4a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800cc4c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800cc4e:	f042 0202 	orr.w	r2, r2, #2
 800cc52:	631a      	str	r2, [r3, #48]	@ 0x30
 800cc54:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800cc56:	f002 0202 	and.w	r2, r2, #2
 800cc5a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800cc5c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800cc5e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800cc60:	f042 0208 	orr.w	r2, r2, #8
 800cc64:	631a      	str	r2, [r3, #48]	@ 0x30
 800cc66:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800cc68:	f002 0208 	and.w	r2, r2, #8
 800cc6c:	920c      	str	r2, [sp, #48]	@ 0x30
 800cc6e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800cc70:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800cc72:	f042 0204 	orr.w	r2, r2, #4
 800cc76:	631a      	str	r2, [r3, #48]	@ 0x30
 800cc78:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800cc7a:	f002 0204 	and.w	r2, r2, #4
 800cc7e:	920d      	str	r2, [sp, #52]	@ 0x34
 800cc80:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800cc82:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800cc84:	f042 0201 	orr.w	r2, r2, #1
 800cc88:	631a      	str	r2, [r3, #48]	@ 0x30
 800cc8a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800cc8c:	f002 0201 	and.w	r2, r2, #1
 800cc90:	920e      	str	r2, [sp, #56]	@ 0x38
 800cc92:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800cc94:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800cc96:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800cc9a:	631a      	str	r2, [r3, #48]	@ 0x30
 800cc9c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800cc9e:	f402 7200 	and.w	r2, r2, #512	@ 0x200
 800cca2:	920f      	str	r2, [sp, #60]	@ 0x3c
 800cca4:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800cca6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800cca8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800ccac:	631a      	str	r2, [r3, #48]	@ 0x30
 800ccae:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ccb0:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 800ccb4:	9210      	str	r2, [sp, #64]	@ 0x40
 800ccb6:	9a10      	ldr	r2, [sp, #64]	@ 0x40
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800ccb8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ccba:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800ccbe:	631a      	str	r2, [r3, #48]	@ 0x30
 800ccc0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ccc2:	f402 6280 	and.w	r2, r2, #1024	@ 0x400
 800ccc6:	9211      	str	r2, [sp, #68]	@ 0x44
 800ccc8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800ccca:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800cccc:	f042 0220 	orr.w	r2, r2, #32
 800ccd0:	631a      	str	r2, [r3, #48]	@ 0x30
 800ccd2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ccd4:	f002 0220 	and.w	r2, r2, #32
 800ccd8:	9212      	str	r2, [sp, #72]	@ 0x48
 800ccda:	9a12      	ldr	r2, [sp, #72]	@ 0x48
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800ccdc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ccde:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800cce2:	631a      	str	r2, [r3, #48]	@ 0x30
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin,
 800cce4:	2201      	movs	r2, #1
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800cce6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cce8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ccec:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ccee:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin,
 800ccf0:	f7fc fa1f 	bl	8009132 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin | ARDUINO_D8_Pin, GPIO_PIN_RESET);
 800ccf4:	4642      	mov	r2, r8
 800ccf6:	210c      	movs	r1, #12
 800ccf8:	4891      	ldr	r0, [pc, #580]	@ (800cf40 <main+0x460>)
 800ccfa:	f7fc fa1a 	bl	8009132 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 800ccfe:	2201      	movs	r2, #1
 800cd00:	2108      	movs	r1, #8
 800cd02:	4890      	ldr	r0, [pc, #576]	@ (800cf44 <main+0x464>)
 800cd04:	f7fc fa15 	bl	8009132 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 800cd08:	4621      	mov	r1, r4
 800cd0a:	2201      	movs	r2, #1
 800cd0c:	488c      	ldr	r0, [pc, #560]	@ (800cf40 <main+0x460>)
 800cd0e:	f7fc fa10 	bl	8009132 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 800cd12:	4642      	mov	r2, r8
 800cd14:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800cd18:	488b      	ldr	r0, [pc, #556]	@ (800cf48 <main+0x468>)
 800cd1a:	f7fc fa0a 	bl	8009132 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin | ARDUINO_D2_Pin | EXT_RST_Pin,
 800cd1e:	4642      	mov	r2, r8
 800cd20:	21c8      	movs	r1, #200	@ 0xc8
 800cd22:	488a      	ldr	r0, [pc, #552]	@ (800cf4c <main+0x46c>)
 800cd24:	f7fc fa05 	bl	8009132 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 800cd28:	2208      	movs	r2, #8
 800cd2a:	2300      	movs	r3, #0
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800cd2c:	4629      	mov	r1, r5
 800cd2e:	4888      	ldr	r0, [pc, #544]	@ (800cf50 <main+0x470>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cd30:	f8cd 8100 	str.w	r8, [sp, #256]	@ 0x100
 800cd34:	4c87      	ldr	r4, [pc, #540]	@ (800cf54 <main+0x474>)
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 800cd36:	e9cd 233e 	strd	r2, r3, [sp, #248]	@ 0xf8
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800cd3a:	f7fc f901 	bl	8008f40 <HAL_GPIO_Init>
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800cd3e:	230b      	movs	r3, #11
  GPIO_InitStruct.Pin = RMII_TXD1_Pin | RMII_TXD0_Pin | RMII_TX_EN_Pin;
 800cd40:	f44f 42d0 	mov.w	r2, #26624	@ 0x6800
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800cd44:	4629      	mov	r1, r5
 800cd46:	4881      	ldr	r0, [pc, #516]	@ (800cf4c <main+0x46c>)
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800cd48:	9342      	str	r3, [sp, #264]	@ 0x108
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cd4a:	e9cd 293e 	strd	r2, r9, [sp, #248]	@ 0xf8
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cd4e:	e9cd 8a40 	strd	r8, sl, [sp, #256]	@ 0x100
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800cd52:	f7fc f8f5 	bl	8008f40 <HAL_GPIO_Init>
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800cd56:	230a      	movs	r3, #10
  GPIO_InitStruct.Pin = ULPI_D7_Pin | ULPI_D6_Pin | ULPI_D5_Pin | ULPI_D3_Pin |
 800cd58:	f643 4223 	movw	r2, #15395	@ 0x3c23
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800cd5c:	4629      	mov	r1, r5
 800cd5e:	487e      	ldr	r0, [pc, #504]	@ (800cf58 <main+0x478>)
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800cd60:	9342      	str	r3, [sp, #264]	@ 0x108
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cd62:	f8cd a104 	str.w	sl, [sp, #260]	@ 0x104
  GPIO_InitStruct.Pin = ULPI_D7_Pin | ULPI_D6_Pin | ULPI_D5_Pin | ULPI_D3_Pin |
 800cd66:	923e      	str	r2, [sp, #248]	@ 0xf8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cd68:	e9cd 983f 	strd	r9, r8, [sp, #252]	@ 0xfc
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800cd6c:	f7fc f8e8 	bl	8008f40 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 800cd70:	2180      	movs	r1, #128	@ 0x80
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 800cd72:	2208      	movs	r2, #8
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 800cd74:	4871      	ldr	r0, [pc, #452]	@ (800cf3c <main+0x45c>)
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 800cd76:	913e      	str	r1, [sp, #248]	@ 0xf8
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 800cd78:	4629      	mov	r1, r5
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 800cd7a:	9242      	str	r2, [sp, #264]	@ 0x108
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800cd7c:	f8cd 8104 	str.w	r8, [sp, #260]	@ 0x104
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cd80:	e9cd 983f 	strd	r9, r8, [sp, #252]	@ 0xfc
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 800cd84:	f7fc f8dc 	bl	8008f40 <HAL_GPIO_Init>
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800cd88:	4629      	mov	r1, r5
 800cd8a:	4874      	ldr	r0, [pc, #464]	@ (800cf5c <main+0x47c>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cd8c:	f8cd 8100 	str.w	r8, [sp, #256]	@ 0x100
  bool changing_t_mode = false;
 800cd90:	f8cd 8008 	str.w	r8, [sp, #8]
  int t_mode = 0;
 800cd94:	f8cd 8010 	str.w	r8, [sp, #16]
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 800cd98:	ed9f 7b57 	vldr	d7, [pc, #348]	@ 800cef8 <main+0x418>
 800cd9c:	ed8d 7b3e 	vstr	d7, [sp, #248]	@ 0xf8
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800cda0:	f7fc f8ce 	bl	8008f40 <HAL_GPIO_Init>
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 800cda4:	4629      	mov	r1, r5
 800cda6:	4865      	ldr	r0, [pc, #404]	@ (800cf3c <main+0x45c>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cda8:	f8cd 8100 	str.w	r8, [sp, #256]	@ 0x100
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 800cdac:	ed9f 7b54 	vldr	d7, [pc, #336]	@ 800cf00 <main+0x420>
 800cdb0:	ed8d 7b3e 	vstr	d7, [sp, #248]	@ 0xf8
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 800cdb4:	f7fc f8c4 	bl	8008f40 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = OTG_FS_P_Pin | OTG_FS_N_Pin | OTG_FS_ID_Pin;
 800cdb8:	f44f 51e0 	mov.w	r1, #7168	@ 0x1c00
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800cdbc:	220a      	movs	r2, #10
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cdbe:	4868      	ldr	r0, [pc, #416]	@ (800cf60 <main+0x480>)
  GPIO_InitStruct.Pin = OTG_FS_P_Pin | OTG_FS_N_Pin | OTG_FS_ID_Pin;
 800cdc0:	913e      	str	r1, [sp, #248]	@ 0xf8
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cdc2:	4629      	mov	r1, r5
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800cdc4:	9242      	str	r2, [sp, #264]	@ 0x108
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cdc6:	f8cd a104 	str.w	sl, [sp, #260]	@ 0x104
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cdca:	e9cd 983f 	strd	r9, r8, [sp, #252]	@ 0xfc
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cdce:	f7fc f8b7 	bl	8008f40 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800cdd2:	2120      	movs	r1, #32
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800cdd4:	4859      	ldr	r0, [pc, #356]	@ (800cf3c <main+0x45c>)
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800cdd6:	913e      	str	r1, [sp, #248]	@ 0xf8
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800cdd8:	4629      	mov	r1, r5
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800cdda:	f8cd 8104 	str.w	r8, [sp, #260]	@ 0x104
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cdde:	e9cd 783f 	strd	r7, r8, [sp, #252]	@ 0xfc
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800cde2:	f7fc f8ad 	bl	8008f40 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = ARDUINO_D7_Pin | ARDUINO_D8_Pin | LCD_DISP_Pin;
 800cde6:	f241 010c 	movw	r1, #4108	@ 0x100c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800cdea:	4855      	ldr	r0, [pc, #340]	@ (800cf40 <main+0x460>)
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin | ARDUINO_D8_Pin | LCD_DISP_Pin;
 800cdec:	913e      	str	r1, [sp, #248]	@ 0xf8
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800cdee:	4629      	mov	r1, r5
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800cdf0:	f8cd 8104 	str.w	r8, [sp, #260]	@ 0x104
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cdf4:	e9cd 783f 	strd	r7, r8, [sp, #252]	@ 0xfc
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800cdf8:	f7fc f8a2 	bl	8008f40 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = uSD_Detect_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 800cdfc:	4629      	mov	r1, r5
 800cdfe:	4859      	ldr	r0, [pc, #356]	@ (800cf64 <main+0x484>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ce00:	f8cd 8100 	str.w	r8, [sp, #256]	@ 0x100
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 800ce04:	ed9f 7b40 	vldr	d7, [pc, #256]	@ 800cf08 <main+0x428>
 800ce08:	ed8d 7b3e 	vstr	d7, [sp, #248]	@ 0xf8
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 800ce0c:	f7fc f898 	bl	8008f40 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 800ce10:	2208      	movs	r2, #8
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 800ce12:	4629      	mov	r1, r5
 800ce14:	484b      	ldr	r0, [pc, #300]	@ (800cf44 <main+0x464>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800ce16:	e9cd 273e 	strd	r2, r7, [sp, #248]	@ 0xf8
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ce1a:	e9cd 8840 	strd	r8, r8, [sp, #256]	@ 0x100
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 800ce1e:	f7fc f88f 	bl	8008f40 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800ce22:	4629      	mov	r1, r5
 800ce24:	4845      	ldr	r0, [pc, #276]	@ (800cf3c <main+0x45c>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ce26:	f8cd 8100 	str.w	r8, [sp, #256]	@ 0x100
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800ce2a:	ed9f 7b39 	vldr	d7, [pc, #228]	@ 800cf10 <main+0x430>
 800ce2e:	ed8d 7b3e 	vstr	d7, [sp, #248]	@ 0xf8
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800ce32:	f7fc f885 	bl	8008f40 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = TP3_Pin | NC2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800ce36:	4629      	mov	r1, r5
 800ce38:	4843      	ldr	r0, [pc, #268]	@ (800cf48 <main+0x468>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ce3a:	f8cd 8100 	str.w	r8, [sp, #256]	@ 0x100
  GPIO_InitStruct.Pin = TP3_Pin | NC2_Pin;
 800ce3e:	ed9f 7b36 	vldr	d7, [pc, #216]	@ 800cf18 <main+0x438>
 800ce42:	ed8d 7b3e 	vstr	d7, [sp, #248]	@ 0xf8
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800ce46:	f7fc f87b 	bl	8008f40 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800ce4a:	2205      	movs	r2, #5
  HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 800ce4c:	4629      	mov	r1, r5
 800ce4e:	483c      	ldr	r0, [pc, #240]	@ (800cf40 <main+0x460>)
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800ce50:	9242      	str	r2, [sp, #264]	@ 0x108
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ce52:	e9cd 993e 	strd	r9, r9, [sp, #248]	@ 0xf8
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ce56:	e9cd 8840 	strd	r8, r8, [sp, #256]	@ 0x100
  HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 800ce5a:	f7fc f871 	bl	8008f40 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 800ce5e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 800ce62:	4629      	mov	r1, r5
 800ce64:	4838      	ldr	r0, [pc, #224]	@ (800cf48 <main+0x468>)
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 800ce66:	923e      	str	r2, [sp, #248]	@ 0xf8
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ce68:	f8cd 8104 	str.w	r8, [sp, #260]	@ 0x104
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ce6c:	e9cd 783f 	strd	r7, r8, [sp, #252]	@ 0xfc
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 800ce70:	f7fc f866 	bl	8008f40 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800ce74:	4629      	mov	r1, r5
 800ce76:	4832      	ldr	r0, [pc, #200]	@ (800cf40 <main+0x460>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ce78:	f8cd 8100 	str.w	r8, [sp, #256]	@ 0x100
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 800ce7c:	ed9f 7b28 	vldr	d7, [pc, #160]	@ 800cf20 <main+0x440>
 800ce80:	ed8d 7b3e 	vstr	d7, [sp, #248]	@ 0xf8
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800ce84:	f7fc f85c 	bl	8008f40 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = LCD_INT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 800ce88:	4629      	mov	r1, r5
 800ce8a:	482d      	ldr	r0, [pc, #180]	@ (800cf40 <main+0x460>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ce8c:	f8cd 8100 	str.w	r8, [sp, #256]	@ 0x100
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 800ce90:	ed9f 7b25 	vldr	d7, [pc, #148]	@ 800cf28 <main+0x448>
 800ce94:	ed8d 7b3e 	vstr	d7, [sp, #248]	@ 0xf8
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 800ce98:	f7fc f852 	bl	8008f40 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800ce9c:	220a      	movs	r2, #10
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 800ce9e:	4629      	mov	r1, r5
 800cea0:	4829      	ldr	r0, [pc, #164]	@ (800cf48 <main+0x468>)
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800cea2:	9242      	str	r2, [sp, #264]	@ 0x108
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 800cea4:	2210      	movs	r2, #16
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cea6:	f8cd a104 	str.w	sl, [sp, #260]	@ 0x104
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 800ceaa:	923e      	str	r2, [sp, #248]	@ 0xf8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ceac:	e9cd 983f 	strd	r9, r8, [sp, #252]	@ 0xfc
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 800ceb0:	f7fc f846 	bl	8008f40 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = ARDUINO_D4_Pin | ARDUINO_D2_Pin | EXT_RST_Pin;
 800ceb4:	22c8      	movs	r2, #200	@ 0xc8
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800ceb6:	4629      	mov	r1, r5
 800ceb8:	4824      	ldr	r0, [pc, #144]	@ (800cf4c <main+0x46c>)
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin | ARDUINO_D2_Pin | EXT_RST_Pin;
 800ceba:	923e      	str	r2, [sp, #248]	@ 0xf8
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800cebc:	f8cd 8104 	str.w	r8, [sp, #260]	@ 0x104
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cec0:	e9cd 783f 	strd	r7, r8, [sp, #252]	@ 0xfc
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800cec4:	f7fc f83c 	bl	8008f40 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = ULPI_STP_Pin | ULPI_DIR_Pin;
 800cec8:	2205      	movs	r2, #5
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800ceca:	4629      	mov	r1, r5
 800cecc:	4825      	ldr	r0, [pc, #148]	@ (800cf64 <main+0x484>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cece:	e9cd 293e 	strd	r2, r9, [sp, #248]	@ 0xf8
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800ced2:	220a      	movs	r2, #10
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ced4:	e9cd 8a40 	strd	r8, sl, [sp, #256]	@ 0x100
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800ced8:	9242      	str	r2, [sp, #264]	@ 0x108
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800ceda:	f7fc f831 	bl	8008f40 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = RMII_MDC_Pin | RMII_RXD0_Pin | RMII_RXD1_Pin;
 800cede:	2232      	movs	r2, #50	@ 0x32
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800cee0:	230b      	movs	r3, #11
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800cee2:	4629      	mov	r1, r5
 800cee4:	481f      	ldr	r0, [pc, #124]	@ (800cf64 <main+0x484>)
  GPIO_InitStruct.Pin = RMII_MDC_Pin | RMII_RXD0_Pin | RMII_RXD1_Pin;
 800cee6:	923e      	str	r2, [sp, #248]	@ 0xf8
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800cee8:	9342      	str	r3, [sp, #264]	@ 0x108
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ceea:	f8cd a104 	str.w	sl, [sp, #260]	@ 0x104
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ceee:	e9cd 983f 	strd	r9, r8, [sp, #252]	@ 0xfc
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800cef2:	f7fc f825 	bl	8008f40 <HAL_GPIO_Init>
 800cef6:	e039      	b.n	800cf6c <main+0x48c>
 800cef8:	00001000 	.word	0x00001000
 800cefc:	00000000 	.word	0x00000000
 800cf00:	00000040 	.word	0x00000040
 800cf04:	10120000 	.word	0x10120000
 800cf08:	00002000 	.word	0x00002000
 800cf0c:	00000000 	.word	0x00000000
 800cf10:	00000010 	.word	0x00000010
 800cf14:	00000000 	.word	0x00000000
 800cf18:	00008004 	.word	0x00008004
 800cf1c:	00000000 	.word	0x00000000
 800cf20:	00000800 	.word	0x00000800
 800cf24:	00000003 	.word	0x00000003
 800cf28:	00002000 	.word	0x00002000
 800cf2c:	10120000 	.word	0x10120000
 800cf30:	40023800 	.word	0x40023800
 800cf34:	00000000 	.word	0x00000000
 800cf38:	2000c2e8 	.word	0x2000c2e8
 800cf3c:	40020c00 	.word	0x40020c00
 800cf40:	40022000 	.word	0x40022000
 800cf44:	40022800 	.word	0x40022800
 800cf48:	40021c00 	.word	0x40021c00
 800cf4c:	40021800 	.word	0x40021800
 800cf50:	40021000 	.word	0x40021000
 800cf54:	2000c2f0 	.word	0x2000c2f0
 800cf58:	40020400 	.word	0x40020400
 800cf5c:	40022400 	.word	0x40022400
 800cf60:	40020000 	.word	0x40020000
 800cf64:	40020800 	.word	0x40020800
 800cf68:	2000c2e0 	.word	0x2000c2e0

  GPIO_InitStruct.Pin = RMII_RXER_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 800cf6c:	4629      	mov	r1, r5
 800cf6e:	48cc      	ldr	r0, [pc, #816]	@ (800d2a0 <main+0x7c0>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cf70:	f8cd 8100 	str.w	r8, [sp, #256]	@ 0x100
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 800cf74:	ed9f 7bc8 	vldr	d7, [pc, #800]	@ 800d298 <main+0x7b8>
 800cf78:	ed8d 7b3e 	vstr	d7, [sp, #248]	@ 0xf8
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 800cf7c:	f7fb ffe0 	bl	8008f40 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin | RMII_MDIO_Pin | RMII_CRS_DV_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800cf80:	230b      	movs	r3, #11
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cf82:	4629      	mov	r1, r5
 800cf84:	48c7      	ldr	r0, [pc, #796]	@ (800d2a4 <main+0x7c4>)
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800cf86:	9342      	str	r3, [sp, #264]	@ 0x108
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin | RMII_MDIO_Pin | RMII_CRS_DV_Pin;
 800cf88:	2386      	movs	r3, #134	@ 0x86
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cf8a:	f8cd a104 	str.w	sl, [sp, #260]	@ 0x104
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin | RMII_MDIO_Pin | RMII_CRS_DV_Pin;
 800cf8e:	933e      	str	r3, [sp, #248]	@ 0xf8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cf90:	e9cd 983f 	strd	r9, r8, [sp, #252]	@ 0xfc
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cf94:	f7fb ffd4 	bl	8008f40 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = ULPI_CLK_Pin | ULPI_D0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800cf98:	220a      	movs	r2, #10
  GPIO_InitStruct.Pin = ULPI_CLK_Pin | ULPI_D0_Pin;
 800cf9a:	2328      	movs	r3, #40	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cf9c:	4629      	mov	r1, r5
 800cf9e:	48c1      	ldr	r0, [pc, #772]	@ (800d2a4 <main+0x7c4>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cfa0:	f8cd a104 	str.w	sl, [sp, #260]	@ 0x104
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800cfa4:	9242      	str	r2, [sp, #264]	@ 0x108
  GPIO_InitStruct.Pin = ULPI_CLK_Pin | ULPI_D0_Pin;
 800cfa6:	933e      	str	r3, [sp, #248]	@ 0xf8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cfa8:	e9cd 983f 	strd	r9, r8, [sp, #252]	@ 0xfc
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cfac:	f7fb ffc8 	bl	8008f40 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin | ARDUINO_MOSI_PWM_D11_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800cfb0:	2205      	movs	r2, #5
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin | ARDUINO_MOSI_PWM_D11_Pin;
 800cfb2:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800cfb6:	4629      	mov	r1, r5
 800cfb8:	48bb      	ldr	r0, [pc, #748]	@ (800d2a8 <main+0x7c8>)
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800cfba:	9242      	str	r2, [sp, #264]	@ 0x108
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin | ARDUINO_MOSI_PWM_D11_Pin;
 800cfbc:	933e      	str	r3, [sp, #248]	@ 0xf8
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800cfbe:	f8cd 8104 	str.w	r8, [sp, #260]	@ 0x104
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cfc2:	e9cd 983f 	strd	r9, r8, [sp, #252]	@ 0xfc
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800cfc6:	f7fb ffbb 	bl	8008f40 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = BUTTON1_Pin;
 800cfca:	2201      	movs	r2, #1
 800cfcc:	2300      	movs	r3, #0
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(BUTTON1_GPIO_Port, &GPIO_InitStruct);
 800cfce:	4629      	mov	r1, r5
 800cfd0:	48b4      	ldr	r0, [pc, #720]	@ (800d2a4 <main+0x7c4>)
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800cfd2:	9740      	str	r7, [sp, #256]	@ 0x100
  GPIO_InitStruct.Pin = BUTTON1_Pin;
 800cfd4:	e9cd 233e 	strd	r2, r3, [sp, #248]	@ 0xf8
  HAL_GPIO_Init(BUTTON1_GPIO_Port, &GPIO_InitStruct);
 800cfd8:	f7fb ffb2 	bl	8008f40 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = BUTTON2_Pin;
 800cfdc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800cfe0:	2300      	movs	r3, #0
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(BUTTON2_GPIO_Port, &GPIO_InitStruct);
 800cfe2:	4629      	mov	r1, r5
 800cfe4:	48b1      	ldr	r0, [pc, #708]	@ (800d2ac <main+0x7cc>)
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800cfe6:	9740      	str	r7, [sp, #256]	@ 0x100
  GPIO_InitStruct.Pin = BUTTON2_Pin;
 800cfe8:	e9cd 233e 	strd	r2, r3, [sp, #248]	@ 0xf8
  HAL_GPIO_Init(BUTTON2_GPIO_Port, &GPIO_InitStruct);
 800cfec:	f7fb ffa8 	bl	8008f40 <HAL_GPIO_Init>
  BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_GPIO);
 800cff0:	4641      	mov	r1, r8
 800cff2:	4648      	mov	r0, r9
 800cff4:	f7fa ff44 	bl	8007e80 <BSP_PB_Init>
  lcdsetup();
 800cff8:	f7ff fd06 	bl	800ca08 <_Z8lcdsetupv>
  int camErr = initCamera();
 800cffc:	f7fe fe58 	bl	800bcb0 <_Z10initCamerav>
  StartCapture();
 800d000:	f7fe ffec 	bl	800bfdc <_Z12StartCapturev>
  signed char *input = getInput();
 800d004:	f005 fad8 	bl	80125b8 <getInput>
 800d008:	4682      	mov	sl, r0
  printLog("About to enter main loop\r\n");
 800d00a:	48a9      	ldr	r0, [pc, #676]	@ (800d2b0 <main+0x7d0>)
 800d00c:	f7ff fd3e 	bl	800ca8c <_ZL8printLogPKc>
  RGBbuf = (uint16_t *)&input[128 * 128 * 4];
 800d010:	f50a 4234 	add.w	r2, sl, #46080	@ 0xb400
 800d014:	f50a 3380 	add.w	r3, sl, #65536	@ 0x10000
 800d018:	f8cd a00c 	str.w	sl, [sp, #12]
 800d01c:	9206      	str	r2, [sp, #24]
 800d01e:	4aa5      	ldr	r2, [pc, #660]	@ (800d2b4 <main+0x7d4>)
 800d020:	6013      	str	r3, [r2, #0]
  bool changing_t_mode = false;
 800d022:	f50a 72c0 	add.w	r2, sl, #384	@ 0x180
 800d026:	f8dd a010 	ldr.w	sl, [sp, #16]
 800d02a:	9205      	str	r2, [sp, #20]
	if (!is_initialized) {
 800d02c:	6833      	ldr	r3, [r6, #0]
 800d02e:	2b00      	cmp	r3, #0
 800d030:	f000 80f7 	beq.w	800d222 <main+0x742>
	HAL_UART_Transmit(&UART, (uint8_t*) s, strlen(s), 10);
 800d034:	230a      	movs	r3, #10
 800d036:	2212      	movs	r2, #18
 800d038:	499f      	ldr	r1, [pc, #636]	@ (800d2b8 <main+0x7d8>)
 800d03a:	4620      	mov	r0, r4
 800d03c:	f7fd ffac 	bl	800af98 <HAL_UART_Transmit>
    starti = HAL_GetTick();
 800d040:	f7fb fc54 	bl	80088ec <HAL_GetTick>
 800d044:	9004      	str	r0, [sp, #16]
    ReadCapture();
 800d046:	f7ff f8d9 	bl	800c1fc <_Z11ReadCapturev>
    StartCapture();
 800d04a:	f7fe ffc7 	bl	800bfdc <_Z12StartCapturev>
	if (!is_initialized) {
 800d04e:	6833      	ldr	r3, [r6, #0]
 800d050:	2b00      	cmp	r3, #0
 800d052:	f000 810d 	beq.w	800d270 <main+0x790>
	HAL_UART_Transmit(&UART, (uint8_t*) s, strlen(s), 10);
 800d056:	230a      	movs	r3, #10
 800d058:	2223      	movs	r2, #35	@ 0x23
 800d05a:	4998      	ldr	r1, [pc, #608]	@ (800d2bc <main+0x7dc>)
 800d05c:	4620      	mov	r0, r4
 800d05e:	f7fd ff9b 	bl	800af98 <HAL_UART_Transmit>
    DecodeandProcessAndRGB(RES_W, RES_H, input, RGBbuf, 1);
 800d062:	4b94      	ldr	r3, [pc, #592]	@ (800d2b4 <main+0x7d4>)
 800d064:	9700      	str	r7, [sp, #0]
 800d066:	2178      	movs	r1, #120	@ 0x78
 800d068:	681b      	ldr	r3, [r3, #0]
 800d06a:	2080      	movs	r0, #128	@ 0x80
 800d06c:	9a03      	ldr	r2, [sp, #12]
 800d06e:	f7fe fe67 	bl	800bd40 <_Z22DecodeandProcessAndRGBiiPaPti>
	if (!is_initialized) {
 800d072:	6833      	ldr	r3, [r6, #0]
 800d074:	2b00      	cmp	r3, #0
 800d076:	f000 80e8 	beq.w	800d24a <main+0x76a>
	HAL_UART_Transmit(&UART, (uint8_t*) s, strlen(s), 10);
 800d07a:	230a      	movs	r3, #10
 800d07c:	221d      	movs	r2, #29
 800d07e:	4990      	ldr	r1, [pc, #576]	@ (800d2c0 <main+0x7e0>)
 800d080:	4620      	mov	r0, r4
 800d082:	f7fd ff89 	bl	800af98 <HAL_UART_Transmit>
      input[120 * 128 * 3 + i] = -128;
 800d086:	f44f 6240 	mov.w	r2, #3072	@ 0xc00
 800d08a:	2180      	movs	r1, #128	@ 0x80
 800d08c:	9806      	ldr	r0, [sp, #24]
 800d08e:	f016 fe15 	bl	8023cbc <memset>
 800d092:	4b88      	ldr	r3, [pc, #544]	@ (800d2b4 <main+0x7d4>)
 800d094:	9805      	ldr	r0, [sp, #20]
        RGBbuf[j + RES_W * i] = (uint16_t)(r | g | b);
 800d096:	f04f 0e00 	mov.w	lr, #0
 800d09a:	681b      	ldr	r3, [r3, #0]
 800d09c:	f1a3 0c02 	sub.w	ip, r3, #2
      for (int j = 0; j < RES_W; j++) {
 800d0a0:	f5a0 72c0 	sub.w	r2, r0, #384	@ 0x180
  int t_mode = 0;
 800d0a4:	4661      	mov	r1, ip
        uint8_t red = (int32_t)input[(128 * i + j) * 3] + 128;
 800d0a6:	7813      	ldrb	r3, [r2, #0]
      for (int j = 0; j < RES_W; j++) {
 800d0a8:	3203      	adds	r2, #3
        uint8_t green = (int32_t)input[(128 * i + j) * 3 + 1] + 128;
 800d0aa:	f812 8c02 	ldrb.w	r8, [r2, #-2]
        uint16_t r = ((red >> 3) & 0x1f) << 11;
 800d0ae:	f083 0380 	eor.w	r3, r3, #128	@ 0x80
        uint16_t g = ((green >> 2) & 0x3f) << 5;
 800d0b2:	f088 0880 	eor.w	r8, r8, #128	@ 0x80
        uint16_t r = ((red >> 3) & 0x1f) << 11;
 800d0b6:	08db      	lsrs	r3, r3, #3
        uint16_t g = ((green >> 2) & 0x3f) << 5;
 800d0b8:	ea4f 0898 	mov.w	r8, r8, lsr #2
        uint16_t r = ((red >> 3) & 0x1f) << 11;
 800d0bc:	02db      	lsls	r3, r3, #11
        RGBbuf[j + RES_W * i] = (uint16_t)(r | g | b);
 800d0be:	ea43 1348 	orr.w	r3, r3, r8, lsl #5
        uint8_t blue = (int32_t)input[(128 * i + j) * 3 + 2] + 128;
 800d0c2:	f812 8c01 	ldrb.w	r8, [r2, #-1]
      for (int j = 0; j < RES_W; j++) {
 800d0c6:	4282      	cmp	r2, r0
        uint16_t b = (blue >> 3) & 0x1f;
 800d0c8:	f088 0880 	eor.w	r8, r8, #128	@ 0x80
        RGBbuf[j + RES_W * i] = (uint16_t)(r | g | b);
 800d0cc:	ea43 03d8 	orr.w	r3, r3, r8, lsr #3
 800d0d0:	f821 3f02 	strh.w	r3, [r1, #2]!
      for (int j = 0; j < RES_W; j++) {
 800d0d4:	d1e7      	bne.n	800d0a6 <main+0x5c6>
    for (int i = 0; i < RES_W; i++) {
 800d0d6:	f10e 0e80 	add.w	lr, lr, #128	@ 0x80
 800d0da:	f50c 7c80 	add.w	ip, ip, #256	@ 0x100
 800d0de:	f502 70c0 	add.w	r0, r2, #384	@ 0x180
 800d0e2:	f5be 4f80 	cmp.w	lr, #16384	@ 0x4000
 800d0e6:	d1db      	bne.n	800d0a0 <main+0x5c0>
	if (!is_initialized) {
 800d0e8:	6833      	ldr	r3, [r6, #0]
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	f000 8259 	beq.w	800d5a2 <main+0xac2>
	HAL_UART_Transmit(&UART, (uint8_t*) s, strlen(s), 10);
 800d0f0:	230a      	movs	r3, #10
 800d0f2:	2218      	movs	r2, #24
 800d0f4:	4973      	ldr	r1, [pc, #460]	@ (800d2c4 <main+0x7e4>)
 800d0f6:	4620      	mov	r0, r4
 800d0f8:	f7fd ff4e 	bl	800af98 <HAL_UART_Transmit>
    loadRGB565LCD(10, 10, RES_W, RES_W, RGBbuf, 2);
 800d0fc:	4b6d      	ldr	r3, [pc, #436]	@ (800d2b4 <main+0x7d4>)
 800d0fe:	210a      	movs	r1, #10
 800d100:	2202      	movs	r2, #2
 800d102:	681b      	ldr	r3, [r3, #0]
 800d104:	4608      	mov	r0, r1
 800d106:	9201      	str	r2, [sp, #4]
 800d108:	9300      	str	r3, [sp, #0]
 800d10a:	2380      	movs	r3, #128	@ 0x80
 800d10c:	461a      	mov	r2, r3
 800d10e:	f7ff fa83 	bl	800c618 <_Z13loadRGB565LCDmmmmPth>
	if (!is_initialized) {
 800d112:	6833      	ldr	r3, [r6, #0]
 800d114:	2b00      	cmp	r3, #0
 800d116:	f000 8231 	beq.w	800d57c <main+0xa9c>
	HAL_UART_Transmit(&UART, (uint8_t*) s, strlen(s), 10);
 800d11a:	230a      	movs	r3, #10
 800d11c:	2214      	movs	r2, #20
 800d11e:	496a      	ldr	r1, [pc, #424]	@ (800d2c8 <main+0x7e8>)
 800d120:	4620      	mov	r0, r4
 800d122:	f7fd ff39 	bl	800af98 <HAL_UART_Transmit>
    endi = HAL_GetTick();
 800d126:	f7fb fbe1 	bl	80088ec <HAL_GetTick>
    uint8_t button0 = BSP_PB_GetState(BUTTON_KEY) == GPIO_PIN_SET;
 800d12a:	2002      	movs	r0, #2
 800d12c:	f7fa ff10 	bl	8007f50 <BSP_PB_GetState>
    uint8_t button1 = !HAL_GPIO_ReadPin(BUTTON1_GPIO_Port, BUTTON1_Pin);
 800d130:	2101      	movs	r1, #1
 800d132:	485c      	ldr	r0, [pc, #368]	@ (800d2a4 <main+0x7c4>)
 800d134:	f7fb fff6 	bl	8009124 <HAL_GPIO_ReadPin>
    uint8_t button2 = !HAL_GPIO_ReadPin(BUTTON2_GPIO_Port, BUTTON2_Pin);
 800d138:	f44f 6180 	mov.w	r1, #1024	@ 0x400
    uint8_t button1 = !HAL_GPIO_ReadPin(BUTTON1_GPIO_Port, BUTTON1_Pin);
 800d13c:	4681      	mov	r9, r0
    uint8_t button2 = !HAL_GPIO_ReadPin(BUTTON2_GPIO_Port, BUTTON2_Pin);
 800d13e:	485b      	ldr	r0, [pc, #364]	@ (800d2ac <main+0x7cc>)
 800d140:	f7fb fff0 	bl	8009124 <HAL_GPIO_ReadPin>
    s[0] = 'c';
 800d144:	2363      	movs	r3, #99	@ 0x63
    uint8_t button2 = !HAL_GPIO_ReadPin(BUTTON2_GPIO_Port, BUTTON2_Pin);
 800d146:	4680      	mov	r8, r0
    s[0] = 'c';
 800d148:	f88d 3020 	strb.w	r3, [sp, #32]

static inline void recieveChar(char *s) {
	static int is_initialized = 0;
	if (!is_initialized) {
 800d14c:	4b5f      	ldr	r3, [pc, #380]	@ (800d2cc <main+0x7ec>)
 800d14e:	681b      	ldr	r3, [r3, #0]
 800d150:	2b00      	cmp	r3, #0
 800d152:	f000 81ec 	beq.w	800d52e <main+0xa4e>
		if (HAL_UART_Init(&UART) != HAL_OK) {
			//Error handling
		}
		is_initialized = 1;
	}
	HAL_UART_Receive(&UART, (uint8_t*) s, 1, 10);
 800d156:	230a      	movs	r3, #10
 800d158:	2201      	movs	r2, #1
 800d15a:	a908      	add	r1, sp, #32
 800d15c:	4620      	mov	r0, r4
 800d15e:	f7fd ff7f 	bl	800b060 <HAL_UART_Receive>
    if (s[0] == '3') {
 800d162:	f89d 3020 	ldrb.w	r3, [sp, #32]
 800d166:	2b33      	cmp	r3, #51	@ 0x33
 800d168:	f000 81c2 	beq.w	800d4f0 <main+0xa10>
    if (s[0] == '4') {
 800d16c:	2b34      	cmp	r3, #52	@ 0x34
 800d16e:	f000 81d3 	beq.w	800d518 <main+0xa38>
    if (t_mode) {
 800d172:	f1ba 0f00 	cmp.w	sl, #0
 800d176:	f040 80af 	bne.w	800d2d8 <main+0x7f8>
      start = HAL_GetTick();
 800d17a:	f7fb fbb7 	bl	80088ec <HAL_GetTick>
      detectResponse(person, end - starti, t_mode, 0, 0);
 800d17e:	f04f 0a00 	mov.w	sl, #0
  invoke_inf();
 800d182:	f008 f8af 	bl	80152e4 <invoke_inf>
  signed char *output = (signed char *)getOutput();
 800d186:	f005 fa1b 	bl	80125c0 <getOutput>
    out_int8[i] = output[i];
 800d18a:	f990 1002 	ldrsb.w	r1, [r0, #2]
 800d18e:	f990 3000 	ldrsb.w	r3, [r0]
 800d192:	f990 9001 	ldrsb.w	r9, [r0, #1]
 800d196:	f88b 1002 	strb.w	r1, [fp, #2]
 800d19a:	f990 1003 	ldrsb.w	r1, [r0, #3]
 800d19e:	f88b 3000 	strb.w	r3, [fp]
 800d1a2:	f88b 1003 	strb.w	r1, [fp, #3]
 800d1a6:	f990 1004 	ldrsb.w	r1, [r0, #4]
 800d1aa:	9307      	str	r3, [sp, #28]
 800d1ac:	f88b 1004 	strb.w	r1, [fp, #4]
 800d1b0:	f990 1005 	ldrsb.w	r1, [r0, #5]
 800d1b4:	f88b 9001 	strb.w	r9, [fp, #1]
 800d1b8:	f88b 1005 	strb.w	r1, [fp, #5]
 800d1bc:	f990 1006 	ldrsb.w	r1, [r0, #6]
 800d1c0:	f88b 1006 	strb.w	r1, [fp, #6]
 800d1c4:	f990 1007 	ldrsb.w	r1, [r0, #7]
 800d1c8:	f88b 1007 	strb.w	r1, [fp, #7]
 800d1cc:	f990 1008 	ldrsb.w	r1, [r0, #8]
 800d1d0:	f88b 1008 	strb.w	r1, [fp, #8]
 800d1d4:	f990 2009 	ldrsb.w	r2, [r0, #9]
 800d1d8:	f88b 2009 	strb.w	r2, [fp, #9]
      end = HAL_GetTick();
 800d1dc:	f7fb fb86 	bl	80088ec <HAL_GetTick>
      sprintf(showbuf, " Inference ");
 800d1e0:	4b3b      	ldr	r3, [pc, #236]	@ (800d2d0 <main+0x7f0>)
      end = HAL_GetTick();
 800d1e2:	4680      	mov	r8, r0
      sprintf(showbuf, " Inference ");
 800d1e4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d1e8:	e885 0007 	stmia.w	r5, {r0, r1, r2}
      displaystring(showbuf, 273, 10);
 800d1ec:	4628      	mov	r0, r5
 800d1ee:	220a      	movs	r2, #10
 800d1f0:	f240 1111 	movw	r1, #273	@ 0x111
 800d1f4:	f7ff fa64 	bl	800c6c0 <_Z13displaystringPcii>
      detectResponse(person, end - starti, t_mode, 0, 0);
 800d1f8:	9b04      	ldr	r3, [sp, #16]
 800d1fa:	4652      	mov	r2, sl
 800d1fc:	4651      	mov	r1, sl
 800d1fe:	eba8 0303 	sub.w	r3, r8, r3
 800d202:	ee00 3a10 	vmov	s0, r3
 800d206:	9b07      	ldr	r3, [sp, #28]
 800d208:	454b      	cmp	r3, r9
 800d20a:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 800d20e:	4653      	mov	r3, sl
 800d210:	bfd4      	ite	le
 800d212:	2000      	movle	r0, #0
 800d214:	2001      	movgt	r0, #1
 800d216:	f7ff fa5b 	bl	800c6d0 <_Z14detectResponseifiii>
	if (!is_initialized) {
 800d21a:	6833      	ldr	r3, [r6, #0]
 800d21c:	2b00      	cmp	r3, #0
 800d21e:	f47f af09 	bne.w	800d034 <main+0x554>
		UART.Init.Parity = UART_PARITY_NONE;
 800d222:	6123      	str	r3, [r4, #16]
		if (HAL_UART_Init(&UART) != HAL_OK) {
 800d224:	4620      	mov	r0, r4
		UART.Instance = USART1;
 800d226:	4a2b      	ldr	r2, [pc, #172]	@ (800d2d4 <main+0x7f4>)
		UART.Init.StopBits = UART_STOPBITS_1;
 800d228:	e9c4 3302 	strd	r3, r3, [r4, #8]
		UART.Init.OverSampling = UART_OVERSAMPLING_16;
 800d22c:	e9c4 3306 	strd	r3, r3, [r4, #24]
		UART.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800d230:	e9c4 3308 	strd	r3, r3, [r4, #32]
		UART.Init.BaudRate = 115200;
 800d234:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
		UART.Instance = USART1;
 800d238:	6022      	str	r2, [r4, #0]
		UART.Init.BaudRate = 115200;
 800d23a:	6063      	str	r3, [r4, #4]
		UART.Init.Mode = UART_MODE_TX_RX;
 800d23c:	230c      	movs	r3, #12
 800d23e:	6163      	str	r3, [r4, #20]
		if (HAL_UART_Init(&UART) != HAL_OK) {
 800d240:	f7fe f9e3 	bl	800b60a <HAL_UART_Init>
		is_initialized = 1;
 800d244:	6037      	str	r7, [r6, #0]
 800d246:	e6f5      	b.n	800d034 <main+0x554>
    while (1) {
 800d248:	e7fe      	b.n	800d248 <main+0x768>
		UART.Init.StopBits = UART_STOPBITS_1;
 800d24a:	e9c4 3302 	strd	r3, r3, [r4, #8]
		UART.Init.Parity = UART_PARITY_NONE;
 800d24e:	6123      	str	r3, [r4, #16]
		if (HAL_UART_Init(&UART) != HAL_OK) {
 800d250:	4620      	mov	r0, r4
		UART.Instance = USART1;
 800d252:	4a20      	ldr	r2, [pc, #128]	@ (800d2d4 <main+0x7f4>)
		UART.Init.OverSampling = UART_OVERSAMPLING_16;
 800d254:	e9c4 3306 	strd	r3, r3, [r4, #24]
		UART.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800d258:	e9c4 3308 	strd	r3, r3, [r4, #32]
		UART.Init.BaudRate = 115200;
 800d25c:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
		UART.Instance = USART1;
 800d260:	6022      	str	r2, [r4, #0]
		UART.Init.BaudRate = 115200;
 800d262:	6063      	str	r3, [r4, #4]
		UART.Init.Mode = UART_MODE_TX_RX;
 800d264:	230c      	movs	r3, #12
 800d266:	6163      	str	r3, [r4, #20]
		if (HAL_UART_Init(&UART) != HAL_OK) {
 800d268:	f7fe f9cf 	bl	800b60a <HAL_UART_Init>
		is_initialized = 1;
 800d26c:	6037      	str	r7, [r6, #0]
 800d26e:	e704      	b.n	800d07a <main+0x59a>
		UART.Init.StopBits = UART_STOPBITS_1;
 800d270:	e9c4 3302 	strd	r3, r3, [r4, #8]
		UART.Init.Parity = UART_PARITY_NONE;
 800d274:	6123      	str	r3, [r4, #16]
		if (HAL_UART_Init(&UART) != HAL_OK) {
 800d276:	4620      	mov	r0, r4
		UART.Instance = USART1;
 800d278:	4a16      	ldr	r2, [pc, #88]	@ (800d2d4 <main+0x7f4>)
		UART.Init.OverSampling = UART_OVERSAMPLING_16;
 800d27a:	e9c4 3306 	strd	r3, r3, [r4, #24]
		UART.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800d27e:	e9c4 3308 	strd	r3, r3, [r4, #32]
		UART.Init.BaudRate = 115200;
 800d282:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
		UART.Instance = USART1;
 800d286:	6022      	str	r2, [r4, #0]
		UART.Init.BaudRate = 115200;
 800d288:	6063      	str	r3, [r4, #4]
		UART.Init.Mode = UART_MODE_TX_RX;
 800d28a:	230c      	movs	r3, #12
 800d28c:	6163      	str	r3, [r4, #20]
		if (HAL_UART_Init(&UART) != HAL_OK) {
 800d28e:	f7fe f9bc 	bl	800b60a <HAL_UART_Init>
		is_initialized = 1;
 800d292:	6037      	str	r7, [r6, #0]
 800d294:	e6df      	b.n	800d056 <main+0x576>
 800d296:	bf00      	nop
 800d298:	00000004 	.word	0x00000004
 800d29c:	00000000 	.word	0x00000000
 800d2a0:	40021800 	.word	0x40021800
 800d2a4:	40020000 	.word	0x40020000
 800d2a8:	40020400 	.word	0x40020400
 800d2ac:	40021400 	.word	0x40021400
 800d2b0:	0802d97c 	.word	0x0802d97c
 800d2b4:	2000c2b4 	.word	0x2000c2b4
 800d2b8:	0802d998 	.word	0x0802d998
 800d2bc:	0802d9ac 	.word	0x0802d9ac
 800d2c0:	0802d9d0 	.word	0x0802d9d0
 800d2c4:	0802d9f0 	.word	0x0802d9f0
 800d2c8:	0802da0c 	.word	0x0802da0c
 800d2cc:	2000c2e4 	.word	0x2000c2e4
 800d2d0:	0802db18 	.word	0x0802db18
 800d2d4:	40011000 	.word	0x40011000
      if (changing_t_mode) {
 800d2d8:	9b02      	ldr	r3, [sp, #8]
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	f040 80f9 	bne.w	800d4d2 <main+0x9f2>
	if (!is_initialized) {
 800d2e0:	6833      	ldr	r3, [r6, #0]
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	f000 80e2 	beq.w	800d4ac <main+0x9cc>
	HAL_UART_Transmit(&UART, (uint8_t*) s, strlen(s), 10);
 800d2e8:	230a      	movs	r3, #10
 800d2ea:	220f      	movs	r2, #15
 800d2ec:	49c9      	ldr	r1, [pc, #804]	@ (800d614 <main+0xb34>)
 800d2ee:	4620      	mov	r0, r4
 800d2f0:	f7fd fe52 	bl	800af98 <HAL_UART_Transmit>
      if ((button2 || button1 || s[0] == '1' || s[0] == '2')) {
 800d2f4:	f1b9 0f00 	cmp.w	r9, #0
 800d2f8:	f000 80ca 	beq.w	800d490 <main+0x9b0>
 800d2fc:	f1b8 0f00 	cmp.w	r8, #0
 800d300:	f000 80ca 	beq.w	800d498 <main+0x9b8>
 800d304:	f89d 3020 	ldrb.w	r3, [sp, #32]
 800d308:	3b31      	subs	r3, #49	@ 0x31
 800d30a:	2b01      	cmp	r3, #1
 800d30c:	f200 80bd 	bhi.w	800d48a <main+0x9aa>
        if (button2 || s[0] == '1') {
 800d310:	f89d 3020 	ldrb.w	r3, [sp, #32]
 800d314:	2b31      	cmp	r3, #49	@ 0x31
 800d316:	f000 80bf 	beq.w	800d498 <main+0x9b8>
          sprintf(showbuf, "Train cls 0");
 800d31a:	4bbf      	ldr	r3, [pc, #764]	@ (800d618 <main+0xb38>)
 800d31c:	f04f 0801 	mov.w	r8, #1
          label = 0;
 800d320:	f04f 0900 	mov.w	r9, #0
          sprintf(showbuf, "Train cls 0");
 800d324:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d328:	e885 0007 	stmia.w	r5, {r0, r1, r2}
        start = HAL_GetTick();
 800d32c:	f7fb fade 	bl	80088ec <HAL_GetTick>
  invoke_inf();
 800d330:	f007 ffd8 	bl	80152e4 <invoke_inf>
  signed char *output = (signed char *)getOutput();
 800d334:	f005 f944 	bl	80125c0 <getOutput>
 800d338:	4603      	mov	r3, r0
    out_int8[i] = output[i];
 800d33a:	f990 0002 	ldrsb.w	r0, [r0, #2]
 800d33e:	f993 1000 	ldrsb.w	r1, [r3]
 800d342:	f993 2001 	ldrsb.w	r2, [r3, #1]
 800d346:	f88b 0002 	strb.w	r0, [fp, #2]
            answer_right = 0;
 800d34a:	4291      	cmp	r1, r2
    out_int8[i] = output[i];
 800d34c:	f88b 2001 	strb.w	r2, [fp, #1]
 800d350:	f993 2003 	ldrsb.w	r2, [r3, #3]
            answer_right = 0;
 800d354:	bfd4      	ite	le
 800d356:	46c8      	movle	r8, r9
 800d358:	f04f 0a00 	movgt.w	sl, #0
    out_int8[i] = output[i];
 800d35c:	f88b 2003 	strb.w	r2, [fp, #3]
            answer_right = 0;
 800d360:	bfd8      	it	le
 800d362:	f04f 0a01 	movle.w	sl, #1
    out_int8[i] = output[i];
 800d366:	f993 2004 	ldrsb.w	r2, [r3, #4]
 800d36a:	f88b 1000 	strb.w	r1, [fp]
 800d36e:	f88b 2004 	strb.w	r2, [fp, #4]
 800d372:	f993 2005 	ldrsb.w	r2, [r3, #5]
 800d376:	f88b 2005 	strb.w	r2, [fp, #5]
 800d37a:	f993 2006 	ldrsb.w	r2, [r3, #6]
 800d37e:	f88b 2006 	strb.w	r2, [fp, #6]
 800d382:	f993 2007 	ldrsb.w	r2, [r3, #7]
 800d386:	f88b 2007 	strb.w	r2, [fp, #7]
 800d38a:	f993 2008 	ldrsb.w	r2, [r3, #8]
 800d38e:	f88b 2008 	strb.w	r2, [fp, #8]
 800d392:	f993 3009 	ldrsb.w	r3, [r3, #9]
 800d396:	f88b 3009 	strb.w	r3, [fp, #9]
        end = HAL_GetTick();
 800d39a:	f7fb faa7 	bl	80088ec <HAL_GetTick>
        detectResponse(answer_right, 0, t_mode, p, label);
 800d39e:	464b      	mov	r3, r9
 800d3a0:	eeb0 0a48 	vmov.f32	s0, s16
 800d3a4:	4652      	mov	r2, sl
 800d3a6:	2101      	movs	r1, #1
 800d3a8:	4640      	mov	r0, r8
 800d3aa:	f7ff f991 	bl	800c6d0 <_Z14detectResponseifiii>
	if (!is_initialized) {
 800d3ae:	6833      	ldr	r3, [r6, #0]
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	f000 811c 	beq.w	800d5ee <main+0xb0e>
	HAL_UART_Transmit(&UART, (uint8_t*) s, strlen(s), 10);
 800d3b6:	230a      	movs	r3, #10
 800d3b8:	221a      	movs	r2, #26
 800d3ba:	4998      	ldr	r1, [pc, #608]	@ (800d61c <main+0xb3c>)
 800d3bc:	4620      	mov	r0, r4
 800d3be:	f7fd fdeb 	bl	800af98 <HAL_UART_Transmit>
        ReadCapture();
 800d3c2:	f7fe ff1b 	bl	800c1fc <_Z11ReadCapturev>
        StartCapture();
 800d3c6:	f7fe fe09 	bl	800bfdc <_Z12StartCapturev>
	if (!is_initialized) {
 800d3ca:	6833      	ldr	r3, [r6, #0]
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	f000 80fb 	beq.w	800d5c8 <main+0xae8>
	HAL_UART_Transmit(&UART, (uint8_t*) s, strlen(s), 10);
 800d3d2:	230a      	movs	r3, #10
 800d3d4:	222d      	movs	r2, #45	@ 0x2d
 800d3d6:	4992      	ldr	r1, [pc, #584]	@ (800d620 <main+0xb40>)
 800d3d8:	4620      	mov	r0, r4
 800d3da:	f7fd fddd 	bl	800af98 <HAL_UART_Transmit>
        DecodeandProcessAndRGB(RES_W, RES_H, input, RGBbuf, 1);
 800d3de:	4b91      	ldr	r3, [pc, #580]	@ (800d624 <main+0xb44>)
 800d3e0:	9700      	str	r7, [sp, #0]
 800d3e2:	2178      	movs	r1, #120	@ 0x78
 800d3e4:	681b      	ldr	r3, [r3, #0]
 800d3e6:	2080      	movs	r0, #128	@ 0x80
 800d3e8:	9a03      	ldr	r2, [sp, #12]
 800d3ea:	f7fe fca9 	bl	800bd40 <_Z22DecodeandProcessAndRGBiiPaPti>
	if (!is_initialized) {
 800d3ee:	6833      	ldr	r3, [r6, #0]
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	f000 812b 	beq.w	800d64c <main+0xb6c>
	HAL_UART_Transmit(&UART, (uint8_t*) s, strlen(s), 10);
 800d3f6:	230a      	movs	r3, #10
 800d3f8:	2227      	movs	r2, #39	@ 0x27
 800d3fa:	498b      	ldr	r1, [pc, #556]	@ (800d628 <main+0xb48>)
 800d3fc:	4620      	mov	r0, r4
 800d3fe:	f7fd fdcb 	bl	800af98 <HAL_UART_Transmit>
        displaystring(showbuf, 273, 10);
 800d402:	220a      	movs	r2, #10
 800d404:	f240 1111 	movw	r1, #273	@ 0x111
 800d408:	4628      	mov	r0, r5
 800d40a:	f7ff f959 	bl	800c6c0 <_Z13displaystringPcii>
        start = HAL_GetTick();
 800d40e:	f7fb fa6d 	bl	80088ec <HAL_GetTick>
      labels[i] = 0.0f;
 800d412:	4b86      	ldr	r3, [pc, #536]	@ (800d62c <main+0xb4c>)
      labels[i] = 1.0f;
 800d414:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800d418:	f1b9 0f00 	cmp.w	r9, #0
        start = HAL_GetTick();
 800d41c:	9004      	str	r0, [sp, #16]
  invoke(labels);
 800d41e:	4618      	mov	r0, r3
      labels[i] = 0.0f;
 800d420:	ed83 8a02 	vstr	s16, [r3, #8]
      labels[i] = 1.0f;
 800d424:	fe08 7a27 	vseleq.f32	s14, s16, s15
      labels[i] = 0.0f;
 800d428:	ed83 8a03 	vstr	s16, [r3, #12]
      labels[i] = 1.0f;
 800d42c:	fe47 7a88 	vseleq.f32	s15, s15, s16
 800d430:	ed83 7a01 	vstr	s14, [r3, #4]
 800d434:	edc3 7a00 	vstr	s15, [r3]
      labels[i] = 0.0f;
 800d438:	ed83 8a04 	vstr	s16, [r3, #16]
 800d43c:	ed83 8a05 	vstr	s16, [r3, #20]
 800d440:	ed83 8a06 	vstr	s16, [r3, #24]
 800d444:	ed83 8a07 	vstr	s16, [r3, #28]
 800d448:	ed83 8a08 	vstr	s16, [r3, #32]
 800d44c:	ed83 8a09 	vstr	s16, [r3, #36]	@ 0x24
  invoke(labels);
 800d450:	f005 f8ba 	bl	80125c8 <invoke>
        end = HAL_GetTick();
 800d454:	f7fb fa4a 	bl	80088ec <HAL_GetTick>
        sprintf(showbuf, "Train done ");
 800d458:	4b75      	ldr	r3, [pc, #468]	@ (800d630 <main+0xb50>)
        end = HAL_GetTick();
 800d45a:	9007      	str	r0, [sp, #28]
        sprintf(showbuf, "Train done ");
 800d45c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d460:	e885 0007 	stmia.w	r5, {r0, r1, r2}
        displaystring(showbuf, 273, 10);
 800d464:	4628      	mov	r0, r5
 800d466:	220a      	movs	r2, #10
 800d468:	f240 1111 	movw	r1, #273	@ 0x111
 800d46c:	f7ff f928 	bl	800c6c0 <_Z13displaystringPcii>
        detectResponse(answer_right, end - start, t_mode, p, label);
 800d470:	9a04      	ldr	r2, [sp, #16]
 800d472:	9b07      	ldr	r3, [sp, #28]
 800d474:	4640      	mov	r0, r8
 800d476:	2101      	movs	r1, #1
 800d478:	1a9b      	subs	r3, r3, r2
 800d47a:	4652      	mov	r2, sl
 800d47c:	ee00 3a10 	vmov	s0, r3
 800d480:	464b      	mov	r3, r9
 800d482:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 800d486:	f7ff f923 	bl	800c6d0 <_Z14detectResponseifiii>
      labels[i] = 0.0f;
 800d48a:	f04f 0a01 	mov.w	sl, #1
 800d48e:	e5cd      	b.n	800d02c <main+0x54c>
        if (button2 || s[0] == '1') {
 800d490:	f1b8 0f00 	cmp.w	r8, #0
 800d494:	f47f af3c 	bne.w	800d310 <main+0x830>
          sprintf(showbuf, "Train cls 1");
 800d498:	4b66      	ldr	r3, [pc, #408]	@ (800d634 <main+0xb54>)
          label = 1;
 800d49a:	f04f 0800 	mov.w	r8, #0
 800d49e:	f04f 0901 	mov.w	r9, #1
          sprintf(showbuf, "Train cls 1");
 800d4a2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d4a6:	e885 0007 	stmia.w	r5, {r0, r1, r2}
          label = 1;
 800d4aa:	e73f      	b.n	800d32c <main+0x84c>
		UART.Init.StopBits = UART_STOPBITS_1;
 800d4ac:	e9c4 3302 	strd	r3, r3, [r4, #8]
		UART.Init.Parity = UART_PARITY_NONE;
 800d4b0:	6123      	str	r3, [r4, #16]
		if (HAL_UART_Init(&UART) != HAL_OK) {
 800d4b2:	4620      	mov	r0, r4
		UART.Instance = USART1;
 800d4b4:	4a60      	ldr	r2, [pc, #384]	@ (800d638 <main+0xb58>)
		UART.Init.OverSampling = UART_OVERSAMPLING_16;
 800d4b6:	e9c4 3306 	strd	r3, r3, [r4, #24]
		UART.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800d4ba:	e9c4 3308 	strd	r3, r3, [r4, #32]
		UART.Init.BaudRate = 115200;
 800d4be:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
		UART.Instance = USART1;
 800d4c2:	6022      	str	r2, [r4, #0]
		UART.Init.BaudRate = 115200;
 800d4c4:	6063      	str	r3, [r4, #4]
		UART.Init.Mode = UART_MODE_TX_RX;
 800d4c6:	230c      	movs	r3, #12
 800d4c8:	6163      	str	r3, [r4, #20]
		if (HAL_UART_Init(&UART) != HAL_OK) {
 800d4ca:	f7fe f89e 	bl	800b60a <HAL_UART_Init>
		is_initialized = 1;
 800d4ce:	6037      	str	r7, [r6, #0]
 800d4d0:	e70a      	b.n	800d2e8 <main+0x808>
        sprintf(showbuf, " Training ");
 800d4d2:	4a5a      	ldr	r2, [pc, #360]	@ (800d63c <main+0xb5c>)
 800d4d4:	462b      	mov	r3, r5
 800d4d6:	ca07      	ldmia	r2, {r0, r1, r2}
 800d4d8:	c303      	stmia	r3!, {r0, r1}
 800d4da:	f823 2b02 	strh.w	r2, [r3], #2
 800d4de:	0c12      	lsrs	r2, r2, #16
        displaystring(showbuf, 273, 10);
 800d4e0:	f240 1111 	movw	r1, #273	@ 0x111
 800d4e4:	4628      	mov	r0, r5
        sprintf(showbuf, " Training ");
 800d4e6:	701a      	strb	r2, [r3, #0]
        displaystring(showbuf, 273, 10);
 800d4e8:	220a      	movs	r2, #10
 800d4ea:	f7ff f8e9 	bl	800c6c0 <_Z13displaystringPcii>
 800d4ee:	e6f7      	b.n	800d2e0 <main+0x800>
      changing_t_mode = t_mode != 1;
 800d4f0:	f08a 0301 	eor.w	r3, sl, #1
 800d4f4:	9302      	str	r3, [sp, #8]
	if (!is_initialized) {
 800d4f6:	6833      	ldr	r3, [r6, #0]
 800d4f8:	2b00      	cmp	r3, #0
 800d4fa:	f000 80ba 	beq.w	800d672 <main+0xb92>
	HAL_UART_Transmit(&UART, (uint8_t*) s, strlen(s), 10);
 800d4fe:	230a      	movs	r3, #10
 800d500:	221c      	movs	r2, #28
 800d502:	494f      	ldr	r1, [pc, #316]	@ (800d640 <main+0xb60>)
 800d504:	4620      	mov	r0, r4
 800d506:	f7fd fd47 	bl	800af98 <HAL_UART_Transmit>
    if (s[0] == '4') {
 800d50a:	f89d 3020 	ldrb.w	r3, [sp, #32]
 800d50e:	2b34      	cmp	r3, #52	@ 0x34
 800d510:	f47f aee2 	bne.w	800d2d8 <main+0x7f8>
      t_mode = 1;
 800d514:	f04f 0a01 	mov.w	sl, #1
	if (!is_initialized) {
 800d518:	6833      	ldr	r3, [r6, #0]
      changing_t_mode = t_mode != 0;
 800d51a:	f8cd a008 	str.w	sl, [sp, #8]
 800d51e:	b1d3      	cbz	r3, 800d556 <main+0xa76>
	HAL_UART_Transmit(&UART, (uint8_t*) s, strlen(s), 10);
 800d520:	230a      	movs	r3, #10
 800d522:	221d      	movs	r2, #29
 800d524:	4947      	ldr	r1, [pc, #284]	@ (800d644 <main+0xb64>)
 800d526:	4620      	mov	r0, r4
 800d528:	f7fd fd36 	bl	800af98 <HAL_UART_Transmit>
}
 800d52c:	e625      	b.n	800d17a <main+0x69a>
		UART.Init.StopBits = UART_STOPBITS_1;
 800d52e:	e9c4 3302 	strd	r3, r3, [r4, #8]
		UART.Init.Parity = UART_PARITY_NONE;
 800d532:	6123      	str	r3, [r4, #16]
		if (HAL_UART_Init(&UART) != HAL_OK) {
 800d534:	4620      	mov	r0, r4
		UART.Instance = USART1;
 800d536:	4a40      	ldr	r2, [pc, #256]	@ (800d638 <main+0xb58>)
		UART.Init.OverSampling = UART_OVERSAMPLING_16;
 800d538:	e9c4 3306 	strd	r3, r3, [r4, #24]
		UART.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800d53c:	e9c4 3308 	strd	r3, r3, [r4, #32]
		UART.Init.BaudRate = 115200;
 800d540:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
		UART.Instance = USART1;
 800d544:	6022      	str	r2, [r4, #0]
		UART.Init.BaudRate = 115200;
 800d546:	6063      	str	r3, [r4, #4]
		UART.Init.Mode = UART_MODE_TX_RX;
 800d548:	230c      	movs	r3, #12
 800d54a:	6163      	str	r3, [r4, #20]
		if (HAL_UART_Init(&UART) != HAL_OK) {
 800d54c:	f7fe f85d 	bl	800b60a <HAL_UART_Init>
		is_initialized = 1;
 800d550:	4b3d      	ldr	r3, [pc, #244]	@ (800d648 <main+0xb68>)
 800d552:	601f      	str	r7, [r3, #0]
 800d554:	e5ff      	b.n	800d156 <main+0x676>
		UART.Init.StopBits = UART_STOPBITS_1;
 800d556:	e9c4 3302 	strd	r3, r3, [r4, #8]
		UART.Init.Parity = UART_PARITY_NONE;
 800d55a:	6123      	str	r3, [r4, #16]
		if (HAL_UART_Init(&UART) != HAL_OK) {
 800d55c:	4620      	mov	r0, r4
		UART.Instance = USART1;
 800d55e:	4a36      	ldr	r2, [pc, #216]	@ (800d638 <main+0xb58>)
		UART.Init.OverSampling = UART_OVERSAMPLING_16;
 800d560:	e9c4 3306 	strd	r3, r3, [r4, #24]
		UART.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800d564:	e9c4 3308 	strd	r3, r3, [r4, #32]
		UART.Init.BaudRate = 115200;
 800d568:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
		UART.Instance = USART1;
 800d56c:	6022      	str	r2, [r4, #0]
		UART.Init.BaudRate = 115200;
 800d56e:	6063      	str	r3, [r4, #4]
		UART.Init.Mode = UART_MODE_TX_RX;
 800d570:	230c      	movs	r3, #12
 800d572:	6163      	str	r3, [r4, #20]
		if (HAL_UART_Init(&UART) != HAL_OK) {
 800d574:	f7fe f849 	bl	800b60a <HAL_UART_Init>
		is_initialized = 1;
 800d578:	6037      	str	r7, [r6, #0]
 800d57a:	e7d1      	b.n	800d520 <main+0xa40>
		UART.Init.StopBits = UART_STOPBITS_1;
 800d57c:	e9c4 3302 	strd	r3, r3, [r4, #8]
		UART.Init.Parity = UART_PARITY_NONE;
 800d580:	6123      	str	r3, [r4, #16]
		if (HAL_UART_Init(&UART) != HAL_OK) {
 800d582:	4620      	mov	r0, r4
		UART.Instance = USART1;
 800d584:	4a2c      	ldr	r2, [pc, #176]	@ (800d638 <main+0xb58>)
		UART.Init.OverSampling = UART_OVERSAMPLING_16;
 800d586:	e9c4 3306 	strd	r3, r3, [r4, #24]
		UART.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800d58a:	e9c4 3308 	strd	r3, r3, [r4, #32]
		UART.Init.BaudRate = 115200;
 800d58e:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
		UART.Instance = USART1;
 800d592:	6022      	str	r2, [r4, #0]
		UART.Init.BaudRate = 115200;
 800d594:	6063      	str	r3, [r4, #4]
		UART.Init.Mode = UART_MODE_TX_RX;
 800d596:	230c      	movs	r3, #12
 800d598:	6163      	str	r3, [r4, #20]
		if (HAL_UART_Init(&UART) != HAL_OK) {
 800d59a:	f7fe f836 	bl	800b60a <HAL_UART_Init>
		is_initialized = 1;
 800d59e:	6037      	str	r7, [r6, #0]
 800d5a0:	e5bb      	b.n	800d11a <main+0x63a>
		UART.Init.StopBits = UART_STOPBITS_1;
 800d5a2:	e9c4 3302 	strd	r3, r3, [r4, #8]
		UART.Init.Parity = UART_PARITY_NONE;
 800d5a6:	6123      	str	r3, [r4, #16]
		if (HAL_UART_Init(&UART) != HAL_OK) {
 800d5a8:	4620      	mov	r0, r4
		UART.Instance = USART1;
 800d5aa:	4a23      	ldr	r2, [pc, #140]	@ (800d638 <main+0xb58>)
		UART.Init.OverSampling = UART_OVERSAMPLING_16;
 800d5ac:	e9c4 3306 	strd	r3, r3, [r4, #24]
		UART.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800d5b0:	e9c4 3308 	strd	r3, r3, [r4, #32]
		UART.Init.BaudRate = 115200;
 800d5b4:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
		UART.Instance = USART1;
 800d5b8:	6022      	str	r2, [r4, #0]
		UART.Init.BaudRate = 115200;
 800d5ba:	6063      	str	r3, [r4, #4]
		UART.Init.Mode = UART_MODE_TX_RX;
 800d5bc:	230c      	movs	r3, #12
 800d5be:	6163      	str	r3, [r4, #20]
		if (HAL_UART_Init(&UART) != HAL_OK) {
 800d5c0:	f7fe f823 	bl	800b60a <HAL_UART_Init>
		is_initialized = 1;
 800d5c4:	6037      	str	r7, [r6, #0]
 800d5c6:	e593      	b.n	800d0f0 <main+0x610>
		UART.Init.StopBits = UART_STOPBITS_1;
 800d5c8:	e9c4 3302 	strd	r3, r3, [r4, #8]
		UART.Init.Parity = UART_PARITY_NONE;
 800d5cc:	6123      	str	r3, [r4, #16]
		if (HAL_UART_Init(&UART) != HAL_OK) {
 800d5ce:	4620      	mov	r0, r4
		UART.Instance = USART1;
 800d5d0:	4a19      	ldr	r2, [pc, #100]	@ (800d638 <main+0xb58>)
		UART.Init.OverSampling = UART_OVERSAMPLING_16;
 800d5d2:	e9c4 3306 	strd	r3, r3, [r4, #24]
		UART.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800d5d6:	e9c4 3308 	strd	r3, r3, [r4, #32]
		UART.Init.BaudRate = 115200;
 800d5da:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
		UART.Instance = USART1;
 800d5de:	6022      	str	r2, [r4, #0]
		UART.Init.BaudRate = 115200;
 800d5e0:	6063      	str	r3, [r4, #4]
		UART.Init.Mode = UART_MODE_TX_RX;
 800d5e2:	230c      	movs	r3, #12
 800d5e4:	6163      	str	r3, [r4, #20]
		if (HAL_UART_Init(&UART) != HAL_OK) {
 800d5e6:	f7fe f810 	bl	800b60a <HAL_UART_Init>
		is_initialized = 1;
 800d5ea:	6037      	str	r7, [r6, #0]
 800d5ec:	e6f1      	b.n	800d3d2 <main+0x8f2>
		UART.Init.StopBits = UART_STOPBITS_1;
 800d5ee:	e9c4 3302 	strd	r3, r3, [r4, #8]
		UART.Init.Parity = UART_PARITY_NONE;
 800d5f2:	6123      	str	r3, [r4, #16]
		if (HAL_UART_Init(&UART) != HAL_OK) {
 800d5f4:	4620      	mov	r0, r4
		UART.Instance = USART1;
 800d5f6:	4a10      	ldr	r2, [pc, #64]	@ (800d638 <main+0xb58>)
		UART.Init.OverSampling = UART_OVERSAMPLING_16;
 800d5f8:	e9c4 3306 	strd	r3, r3, [r4, #24]
		UART.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800d5fc:	e9c4 3308 	strd	r3, r3, [r4, #32]
		UART.Init.BaudRate = 115200;
 800d600:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
		UART.Instance = USART1;
 800d604:	6022      	str	r2, [r4, #0]
		UART.Init.BaudRate = 115200;
 800d606:	6063      	str	r3, [r4, #4]
		UART.Init.Mode = UART_MODE_TX_RX;
 800d608:	230c      	movs	r3, #12
 800d60a:	6163      	str	r3, [r4, #20]
		if (HAL_UART_Init(&UART) != HAL_OK) {
 800d60c:	f7fd fffd 	bl	800b60a <HAL_UART_Init>
		is_initialized = 1;
 800d610:	6037      	str	r7, [r6, #0]
 800d612:	e6d0      	b.n	800d3b6 <main+0x8d6>
 800d614:	0802da70 	.word	0x0802da70
 800d618:	0802da8c 	.word	0x0802da8c
 800d61c:	0802da98 	.word	0x0802da98
 800d620:	0802dab4 	.word	0x0802dab4
 800d624:	2000c2b4 	.word	0x2000c2b4
 800d628:	0802dae4 	.word	0x0802dae4
 800d62c:	2000c2b8 	.word	0x2000c2b8
 800d630:	0802db0c 	.word	0x0802db0c
 800d634:	0802da80 	.word	0x0802da80
 800d638:	40011000 	.word	0x40011000
 800d63c:	0802da64 	.word	0x0802da64
 800d640:	0802da24 	.word	0x0802da24
 800d644:	0802da44 	.word	0x0802da44
 800d648:	2000c2e4 	.word	0x2000c2e4
		UART.Init.StopBits = UART_STOPBITS_1;
 800d64c:	e9c4 3302 	strd	r3, r3, [r4, #8]
		UART.Init.Parity = UART_PARITY_NONE;
 800d650:	6123      	str	r3, [r4, #16]
		if (HAL_UART_Init(&UART) != HAL_OK) {
 800d652:	4620      	mov	r0, r4
		UART.Instance = USART1;
 800d654:	4a10      	ldr	r2, [pc, #64]	@ (800d698 <main+0xbb8>)
		UART.Init.OverSampling = UART_OVERSAMPLING_16;
 800d656:	e9c4 3306 	strd	r3, r3, [r4, #24]
		UART.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800d65a:	e9c4 3308 	strd	r3, r3, [r4, #32]
		UART.Init.BaudRate = 115200;
 800d65e:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
		UART.Instance = USART1;
 800d662:	6022      	str	r2, [r4, #0]
		UART.Init.BaudRate = 115200;
 800d664:	6063      	str	r3, [r4, #4]
		UART.Init.Mode = UART_MODE_TX_RX;
 800d666:	230c      	movs	r3, #12
 800d668:	6163      	str	r3, [r4, #20]
		if (HAL_UART_Init(&UART) != HAL_OK) {
 800d66a:	f7fd ffce 	bl	800b60a <HAL_UART_Init>
		is_initialized = 1;
 800d66e:	6037      	str	r7, [r6, #0]
 800d670:	e6c1      	b.n	800d3f6 <main+0x916>
		UART.Init.StopBits = UART_STOPBITS_1;
 800d672:	e9c4 3302 	strd	r3, r3, [r4, #8]
		UART.Init.Parity = UART_PARITY_NONE;
 800d676:	6123      	str	r3, [r4, #16]
		if (HAL_UART_Init(&UART) != HAL_OK) {
 800d678:	4620      	mov	r0, r4
		UART.Instance = USART1;
 800d67a:	4a07      	ldr	r2, [pc, #28]	@ (800d698 <main+0xbb8>)
		UART.Init.OverSampling = UART_OVERSAMPLING_16;
 800d67c:	e9c4 3306 	strd	r3, r3, [r4, #24]
		UART.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800d680:	e9c4 3308 	strd	r3, r3, [r4, #32]
		UART.Init.BaudRate = 115200;
 800d684:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
		UART.Instance = USART1;
 800d688:	6022      	str	r2, [r4, #0]
		UART.Init.BaudRate = 115200;
 800d68a:	6063      	str	r3, [r4, #4]
		UART.Init.Mode = UART_MODE_TX_RX;
 800d68c:	230c      	movs	r3, #12
 800d68e:	6163      	str	r3, [r4, #20]
		if (HAL_UART_Init(&UART) != HAL_OK) {
 800d690:	f7fd ffbb 	bl	800b60a <HAL_UART_Init>
		is_initialized = 1;
 800d694:	6037      	str	r7, [r6, #0]
 800d696:	e732      	b.n	800d4fe <main+0xa1e>
 800d698:	40011000 	.word	0x40011000

0800d69c <replicateSignBit16>:
typedef signed char int8;
typedef signed short int16;

#if PJPG_RIGHT_SHIFT_IS_ALWAYS_UNSIGNED
static int16 replicateSignBit16(int8 n) {
  switch (n) {
 800d69c:	280f      	cmp	r0, #15
 800d69e:	d82f      	bhi.n	800d700 <replicateSignBit16+0x64>
 800d6a0:	e8df f000 	tbb	[pc, r0]
 800d6a4:	0c0a3108 	.word	0x0c0a3108
 800d6a8:	1412100e 	.word	0x1412100e
 800d6ac:	1f1c1916 	.word	0x1f1c1916
 800d6b0:	2b282522 	.word	0x2b282522
 800d6b4:	2000      	movs	r0, #0
 800d6b6:	4770      	bx	lr
  case 0:
    return 0x0000;
  case 1:
    return 0x8000;
  case 2:
    return 0xC000;
 800d6b8:	4814      	ldr	r0, [pc, #80]	@ (800d70c <replicateSignBit16+0x70>)
 800d6ba:	4770      	bx	lr
  case 3:
    return 0xE000;
 800d6bc:	4814      	ldr	r0, [pc, #80]	@ (800d710 <replicateSignBit16+0x74>)
 800d6be:	4770      	bx	lr
  case 4:
    return 0xF000;
 800d6c0:	4814      	ldr	r0, [pc, #80]	@ (800d714 <replicateSignBit16+0x78>)
 800d6c2:	4770      	bx	lr
  case 5:
    return 0xF800;
 800d6c4:	4814      	ldr	r0, [pc, #80]	@ (800d718 <replicateSignBit16+0x7c>)
 800d6c6:	4770      	bx	lr
  case 6:
    return 0xFC00;
 800d6c8:	4814      	ldr	r0, [pc, #80]	@ (800d71c <replicateSignBit16+0x80>)
 800d6ca:	4770      	bx	lr
  case 7:
    return 0xFE00;
 800d6cc:	4814      	ldr	r0, [pc, #80]	@ (800d720 <replicateSignBit16+0x84>)
 800d6ce:	4770      	bx	lr
  case 8:
    return 0xFF00;
 800d6d0:	f06f 00ff 	mvn.w	r0, #255	@ 0xff
 800d6d4:	4770      	bx	lr
  case 9:
    return 0xFF80;
 800d6d6:	f06f 007f 	mvn.w	r0, #127	@ 0x7f
 800d6da:	4770      	bx	lr
  case 10:
    return 0xFFC0;
 800d6dc:	f06f 003f 	mvn.w	r0, #63	@ 0x3f
 800d6e0:	4770      	bx	lr
  case 11:
    return 0xFFE0;
 800d6e2:	f06f 001f 	mvn.w	r0, #31
 800d6e6:	4770      	bx	lr
  case 12:
    return 0xFFF0;
 800d6e8:	f06f 000f 	mvn.w	r0, #15
 800d6ec:	4770      	bx	lr
  case 13:
    return 0xFFF8;
 800d6ee:	f06f 0007 	mvn.w	r0, #7
 800d6f2:	4770      	bx	lr
  case 14:
    return 0xFFFC;
 800d6f4:	f06f 0003 	mvn.w	r0, #3
 800d6f8:	4770      	bx	lr
  case 15:
    return 0xFFFE;
 800d6fa:	f06f 0001 	mvn.w	r0, #1
 800d6fe:	4770      	bx	lr
  default:
    return 0xFFFF;
 800d700:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d704:	4770      	bx	lr
    return 0x8000;
 800d706:	4807      	ldr	r0, [pc, #28]	@ (800d724 <replicateSignBit16+0x88>)
  }
}
 800d708:	4770      	bx	lr
 800d70a:	bf00      	nop
 800d70c:	ffffc000 	.word	0xffffc000
 800d710:	ffffe000 	.word	0xffffe000
 800d714:	fffff000 	.word	0xfffff000
 800d718:	fffff800 	.word	0xfffff800
 800d71c:	fffffc00 	.word	0xfffffc00
 800d720:	fffffe00 	.word	0xfffffe00
 800d724:	ffff8000 	.word	0xffff8000

0800d728 <arithmeticRightShiftN16>:
static PJPG_INLINE int16 arithmeticRightShiftN16(int16 x, int8 n) {
 800d728:	b510      	push	{r4, lr}
  int16 r = (uint16)x >> (uint8)n;
 800d72a:	b284      	uxth	r4, r0
 800d72c:	b2ca      	uxtb	r2, r1
 800d72e:	4114      	asrs	r4, r2
 800d730:	b224      	sxth	r4, r4
  if (x < 0)
 800d732:	2800      	cmp	r0, #0
 800d734:	db01      	blt.n	800d73a <arithmeticRightShiftN16+0x12>
    r |= replicateSignBit16(n);
  return r;
}
 800d736:	4620      	mov	r0, r4
 800d738:	bd10      	pop	{r4, pc}
    r |= replicateSignBit16(n);
 800d73a:	4608      	mov	r0, r1
 800d73c:	f7ff ffae 	bl	800d69c <replicateSignBit16>
 800d740:	4304      	orrs	r4, r0
 800d742:	b224      	sxth	r4, r4
 800d744:	e7f7      	b.n	800d736 <arithmeticRightShiftN16+0xe>

0800d746 <arithmeticRightShift8L>:
static PJPG_INLINE long arithmeticRightShift8L(long x) {
 800d746:	4603      	mov	r3, r0
  long r = (unsigned long)x >> 8U;
 800d748:	0a02      	lsrs	r2, r0, #8
 800d74a:	4610      	mov	r0, r2
  if (x < 0)
 800d74c:	2b00      	cmp	r3, #0
 800d74e:	db00      	blt.n	800d752 <arithmeticRightShift8L+0xc>
    r |= ~(~(unsigned long)0U >> 8U);
  return r;
}
 800d750:	4770      	bx	lr
    r |= ~(~(unsigned long)0U >> 8U);
 800d752:	f042 407f 	orr.w	r0, r2, #4278190080	@ 0xff000000
  return r;
 800d756:	e7fb      	b.n	800d750 <arithmeticRightShift8L+0xa>

0800d758 <fillInBuf>:
static pjpeg_need_bytes_callback_t g_pNeedBytesCallback;
static void *g_pCallback_data;
static uint8 gCallbackStatus;
static uint8 gReduce;

static void fillInBuf(void) {
 800d758:	b510      	push	{r4, lr}
  unsigned char status;

  gInBufOfs = 4;
 800d75a:	4b08      	ldr	r3, [pc, #32]	@ (800d77c <fillInBuf+0x24>)
 800d75c:	2204      	movs	r2, #4
 800d75e:	701a      	strb	r2, [r3, #0]
  gInBufLeft = 0;
 800d760:	4a07      	ldr	r2, [pc, #28]	@ (800d780 <fillInBuf+0x28>)
 800d762:	2300      	movs	r3, #0
 800d764:	7013      	strb	r3, [r2, #0]

  status = (*g_pNeedBytesCallback)(gInBuf + gInBufOfs,
 800d766:	4b07      	ldr	r3, [pc, #28]	@ (800d784 <fillInBuf+0x2c>)
 800d768:	681c      	ldr	r4, [r3, #0]
 800d76a:	4b07      	ldr	r3, [pc, #28]	@ (800d788 <fillInBuf+0x30>)
 800d76c:	681b      	ldr	r3, [r3, #0]
 800d76e:	21fc      	movs	r1, #252	@ 0xfc
 800d770:	4806      	ldr	r0, [pc, #24]	@ (800d78c <fillInBuf+0x34>)
 800d772:	47a0      	blx	r4
                                   PJPG_MAX_IN_BUF_SIZE - gInBufOfs,
                                   &gInBufLeft, g_pCallback_data);
  if (status) {
 800d774:	b108      	cbz	r0, 800d77a <fillInBuf+0x22>

    gCallbackStatus = status;
 800d776:	4a06      	ldr	r2, [pc, #24]	@ (800d790 <fillInBuf+0x38>)
 800d778:	7010      	strb	r0, [r2, #0]
  }
}
 800d77a:	bd10      	pop	{r4, pc}
 800d77c:	2000c3a9 	.word	0x2000c3a9
 800d780:	2000c3a8 	.word	0x2000c3a8
 800d784:	2000c368 	.word	0x2000c368
 800d788:	2000c364 	.word	0x2000c364
 800d78c:	2000c3b0 	.word	0x2000c3b0
 800d790:	2000c361 	.word	0x2000c361

0800d794 <getChar>:

static PJPG_INLINE uint8 getChar(void) {
 800d794:	b508      	push	{r3, lr}
  if (!gInBufLeft) {
 800d796:	4b0f      	ldr	r3, [pc, #60]	@ (800d7d4 <getChar+0x40>)
 800d798:	781b      	ldrb	r3, [r3, #0]
 800d79a:	b153      	cbz	r3, 800d7b2 <getChar+0x1e>
      gTemFlag = ~gTemFlag;
      return gTemFlag ? 0xFF : 0xD9;
    }
  }

  gInBufLeft--;
 800d79c:	4a0d      	ldr	r2, [pc, #52]	@ (800d7d4 <getChar+0x40>)
 800d79e:	7813      	ldrb	r3, [r2, #0]
 800d7a0:	3b01      	subs	r3, #1
 800d7a2:	7013      	strb	r3, [r2, #0]
  return gInBuf[gInBufOfs++];
 800d7a4:	4a0c      	ldr	r2, [pc, #48]	@ (800d7d8 <getChar+0x44>)
 800d7a6:	7813      	ldrb	r3, [r2, #0]
 800d7a8:	1c59      	adds	r1, r3, #1
 800d7aa:	7011      	strb	r1, [r2, #0]
 800d7ac:	4a0b      	ldr	r2, [pc, #44]	@ (800d7dc <getChar+0x48>)
 800d7ae:	5cd0      	ldrb	r0, [r2, r3]
}
 800d7b0:	bd08      	pop	{r3, pc}
    fillInBuf();
 800d7b2:	f7ff ffd1 	bl	800d758 <fillInBuf>
    if (!gInBufLeft) {
 800d7b6:	4b07      	ldr	r3, [pc, #28]	@ (800d7d4 <getChar+0x40>)
 800d7b8:	781b      	ldrb	r3, [r3, #0]
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	d1ee      	bne.n	800d79c <getChar+0x8>
      gTemFlag = ~gTemFlag;
 800d7be:	4a08      	ldr	r2, [pc, #32]	@ (800d7e0 <getChar+0x4c>)
 800d7c0:	7813      	ldrb	r3, [r2, #0]
 800d7c2:	43db      	mvns	r3, r3
 800d7c4:	b2db      	uxtb	r3, r3
 800d7c6:	7013      	strb	r3, [r2, #0]
      return gTemFlag ? 0xFF : 0xD9;
 800d7c8:	b10b      	cbz	r3, 800d7ce <getChar+0x3a>
 800d7ca:	20ff      	movs	r0, #255	@ 0xff
 800d7cc:	e7f0      	b.n	800d7b0 <getChar+0x1c>
 800d7ce:	20d9      	movs	r0, #217	@ 0xd9
 800d7d0:	e7ee      	b.n	800d7b0 <getChar+0x1c>
 800d7d2:	bf00      	nop
 800d7d4:	2000c3a8 	.word	0x2000c3a8
 800d7d8:	2000c3a9 	.word	0x2000c3a9
 800d7dc:	2000c3ac 	.word	0x2000c3ac
 800d7e0:	2000c4ac 	.word	0x2000c4ac

0800d7e4 <stuffChar>:

static PJPG_INLINE void stuffChar(uint8 i) {
  gInBufOfs--;
 800d7e4:	4a05      	ldr	r2, [pc, #20]	@ (800d7fc <stuffChar+0x18>)
 800d7e6:	7813      	ldrb	r3, [r2, #0]
 800d7e8:	3b01      	subs	r3, #1
 800d7ea:	b2db      	uxtb	r3, r3
 800d7ec:	7013      	strb	r3, [r2, #0]
  gInBuf[gInBufOfs] = i;
 800d7ee:	4a04      	ldr	r2, [pc, #16]	@ (800d800 <stuffChar+0x1c>)
 800d7f0:	54d0      	strb	r0, [r2, r3]
  gInBufLeft++;
 800d7f2:	4a04      	ldr	r2, [pc, #16]	@ (800d804 <stuffChar+0x20>)
 800d7f4:	7813      	ldrb	r3, [r2, #0]
 800d7f6:	3301      	adds	r3, #1
 800d7f8:	7013      	strb	r3, [r2, #0]
}
 800d7fa:	4770      	bx	lr
 800d7fc:	2000c3a9 	.word	0x2000c3a9
 800d800:	2000c3ac 	.word	0x2000c3ac
 800d804:	2000c3a8 	.word	0x2000c3a8

0800d808 <getOctet>:

static PJPG_INLINE uint8 getOctet(uint8 FFCheck) {
 800d808:	b538      	push	{r3, r4, r5, lr}
 800d80a:	4604      	mov	r4, r0
  uint8 c = getChar();
 800d80c:	f7ff ffc2 	bl	800d794 <getChar>
 800d810:	4605      	mov	r5, r0

  if ((FFCheck) && (c == 0xFF)) {
 800d812:	3c00      	subs	r4, #0
 800d814:	bf18      	it	ne
 800d816:	2401      	movne	r4, #1
 800d818:	28ff      	cmp	r0, #255	@ 0xff
 800d81a:	bf18      	it	ne
 800d81c:	2400      	movne	r4, #0
 800d81e:	b90c      	cbnz	r4, 800d824 <getOctet+0x1c>
      stuffChar(0xFF);
    }
  }

  return c;
}
 800d820:	4628      	mov	r0, r5
 800d822:	bd38      	pop	{r3, r4, r5, pc}
    uint8 n = getChar();
 800d824:	f7ff ffb6 	bl	800d794 <getChar>
    if (n) {
 800d828:	2800      	cmp	r0, #0
 800d82a:	d0f9      	beq.n	800d820 <getOctet+0x18>
      stuffChar(n);
 800d82c:	f7ff ffda 	bl	800d7e4 <stuffChar>
      stuffChar(0xFF);
 800d830:	20ff      	movs	r0, #255	@ 0xff
 800d832:	f7ff ffd7 	bl	800d7e4 <stuffChar>
 800d836:	e7f3      	b.n	800d820 <getOctet+0x18>

0800d838 <getBits>:

static uint16 getBits(uint8 numBits, uint8 FFCheck) {
 800d838:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d83c:	4604      	mov	r4, r0
 800d83e:	460f      	mov	r7, r1
  uint8 origBits = numBits;
  uint16 ret = gBitBuf;
 800d840:	4b29      	ldr	r3, [pc, #164]	@ (800d8e8 <getBits+0xb0>)
 800d842:	881d      	ldrh	r5, [r3, #0]

  if (numBits > 8) {
 800d844:	2808      	cmp	r0, #8
 800d846:	d812      	bhi.n	800d86e <getBits+0x36>
 800d848:	4606      	mov	r6, r0
    gBitBuf <<= (8 - gBitsLeft);

    ret = (ret & 0xFF00) | (gBitBuf >> 8);
  }

  if (gBitsLeft < numBits) {
 800d84a:	4b28      	ldr	r3, [pc, #160]	@ (800d8ec <getBits+0xb4>)
 800d84c:	781b      	ldrb	r3, [r3, #0]
 800d84e:	42b3      	cmp	r3, r6
 800d850:	d32f      	bcc.n	800d8b2 <getBits+0x7a>

    gBitBuf <<= (numBits - gBitsLeft);

    gBitsLeft = 8 - (numBits - gBitsLeft);
  } else {
    gBitsLeft = (uint8)(gBitsLeft - numBits);
 800d852:	1b9b      	subs	r3, r3, r6
 800d854:	4a25      	ldr	r2, [pc, #148]	@ (800d8ec <getBits+0xb4>)
 800d856:	7013      	strb	r3, [r2, #0]
    gBitBuf <<= numBits;
 800d858:	4a23      	ldr	r2, [pc, #140]	@ (800d8e8 <getBits+0xb0>)
 800d85a:	8813      	ldrh	r3, [r2, #0]
 800d85c:	40b3      	lsls	r3, r6
 800d85e:	8013      	strh	r3, [r2, #0]
  }

  return ret >> (16 - origBits);
 800d860:	f1c4 0410 	rsb	r4, r4, #16
 800d864:	fa45 f004 	asr.w	r0, r5, r4
}
 800d868:	b280      	uxth	r0, r0
 800d86a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    numBits -= 8;
 800d86e:	f1a0 0608 	sub.w	r6, r0, #8
 800d872:	b2f6      	uxtb	r6, r6
    gBitBuf <<= gBitsLeft;
 800d874:	4698      	mov	r8, r3
 800d876:	f8df 9074 	ldr.w	r9, [pc, #116]	@ 800d8ec <getBits+0xb4>
 800d87a:	f899 3000 	ldrb.w	r3, [r9]
 800d87e:	fa05 f303 	lsl.w	r3, r5, r3
 800d882:	f8a8 3000 	strh.w	r3, [r8]
    gBitBuf |= getOctet(FFCheck);
 800d886:	4608      	mov	r0, r1
 800d888:	f7ff ffbe 	bl	800d808 <getOctet>
 800d88c:	f8b8 3000 	ldrh.w	r3, [r8]
 800d890:	4303      	orrs	r3, r0
 800d892:	b29b      	uxth	r3, r3
 800d894:	f8a8 3000 	strh.w	r3, [r8]
    gBitBuf <<= (8 - gBitsLeft);
 800d898:	f899 2000 	ldrb.w	r2, [r9]
 800d89c:	f1c2 0208 	rsb	r2, r2, #8
 800d8a0:	4093      	lsls	r3, r2
 800d8a2:	b29b      	uxth	r3, r3
 800d8a4:	f8a8 3000 	strh.w	r3, [r8]
    ret = (ret & 0xFF00) | (gBitBuf >> 8);
 800d8a8:	f025 05ff 	bic.w	r5, r5, #255	@ 0xff
 800d8ac:	ea45 2513 	orr.w	r5, r5, r3, lsr #8
 800d8b0:	e7cb      	b.n	800d84a <getBits+0x12>
    gBitBuf <<= gBitsLeft;
 800d8b2:	f8df 8034 	ldr.w	r8, [pc, #52]	@ 800d8e8 <getBits+0xb0>
 800d8b6:	f8b8 2000 	ldrh.w	r2, [r8]
 800d8ba:	fa02 f303 	lsl.w	r3, r2, r3
 800d8be:	f8a8 3000 	strh.w	r3, [r8]
    gBitBuf |= getOctet(FFCheck);
 800d8c2:	4638      	mov	r0, r7
 800d8c4:	f7ff ffa0 	bl	800d808 <getOctet>
 800d8c8:	f8b8 3000 	ldrh.w	r3, [r8]
 800d8cc:	4318      	orrs	r0, r3
 800d8ce:	b280      	uxth	r0, r0
 800d8d0:	f8a8 0000 	strh.w	r0, [r8]
    gBitBuf <<= (numBits - gBitsLeft);
 800d8d4:	4a05      	ldr	r2, [pc, #20]	@ (800d8ec <getBits+0xb4>)
 800d8d6:	7813      	ldrb	r3, [r2, #0]
 800d8d8:	1af1      	subs	r1, r6, r3
 800d8da:	4088      	lsls	r0, r1
 800d8dc:	f8a8 0000 	strh.w	r0, [r8]
    gBitsLeft = 8 - (numBits - gBitsLeft);
 800d8e0:	1b9b      	subs	r3, r3, r6
 800d8e2:	3308      	adds	r3, #8
 800d8e4:	7013      	strb	r3, [r2, #0]
 800d8e6:	e7bb      	b.n	800d860 <getBits+0x28>
 800d8e8:	2000c3a6 	.word	0x2000c3a6
 800d8ec:	2000c3a4 	.word	0x2000c3a4

0800d8f0 <getBits1>:

static PJPG_INLINE uint16 getBits1(uint8 numBits) {
 800d8f0:	b508      	push	{r3, lr}
  return getBits(numBits, 0);
 800d8f2:	2100      	movs	r1, #0
 800d8f4:	f7ff ffa0 	bl	800d838 <getBits>
}
 800d8f8:	bd08      	pop	{r3, pc}

0800d8fa <getBits2>:

static PJPG_INLINE uint16 getBits2(uint8 numBits) {
 800d8fa:	b508      	push	{r3, lr}
  return getBits(numBits, 1);
 800d8fc:	2101      	movs	r1, #1
 800d8fe:	f7ff ff9b 	bl	800d838 <getBits>
}
 800d902:	bd08      	pop	{r3, pc}

0800d904 <getBit>:

static PJPG_INLINE uint8 getBit(void) {
 800d904:	b510      	push	{r4, lr}
  uint8 ret = 0;
  if (gBitBuf & 0x8000)
 800d906:	4b10      	ldr	r3, [pc, #64]	@ (800d948 <getBit+0x44>)
 800d908:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	db0d      	blt.n	800d92c <getBit+0x28>
  uint8 ret = 0;
 800d910:	2400      	movs	r4, #0
    ret = 1;

  if (!gBitsLeft) {
 800d912:	4b0e      	ldr	r3, [pc, #56]	@ (800d94c <getBit+0x48>)
 800d914:	781b      	ldrb	r3, [r3, #0]
 800d916:	b15b      	cbz	r3, 800d930 <getBit+0x2c>
    gBitBuf |= getOctet(1);

    gBitsLeft += 8;
  }

  gBitsLeft--;
 800d918:	4a0c      	ldr	r2, [pc, #48]	@ (800d94c <getBit+0x48>)
 800d91a:	7813      	ldrb	r3, [r2, #0]
 800d91c:	3b01      	subs	r3, #1
 800d91e:	7013      	strb	r3, [r2, #0]
  gBitBuf <<= 1;
 800d920:	4a09      	ldr	r2, [pc, #36]	@ (800d948 <getBit+0x44>)
 800d922:	8813      	ldrh	r3, [r2, #0]
 800d924:	005b      	lsls	r3, r3, #1
 800d926:	8013      	strh	r3, [r2, #0]

  return ret;
}
 800d928:	4620      	mov	r0, r4
 800d92a:	bd10      	pop	{r4, pc}
    ret = 1;
 800d92c:	2401      	movs	r4, #1
 800d92e:	e7f0      	b.n	800d912 <getBit+0xe>
    gBitBuf |= getOctet(1);
 800d930:	2001      	movs	r0, #1
 800d932:	f7ff ff69 	bl	800d808 <getOctet>
 800d936:	4b04      	ldr	r3, [pc, #16]	@ (800d948 <getBit+0x44>)
 800d938:	881a      	ldrh	r2, [r3, #0]
 800d93a:	4310      	orrs	r0, r2
 800d93c:	8018      	strh	r0, [r3, #0]
    gBitsLeft += 8;
 800d93e:	4a03      	ldr	r2, [pc, #12]	@ (800d94c <getBit+0x48>)
 800d940:	7813      	ldrb	r3, [r2, #0]
 800d942:	3308      	adds	r3, #8
 800d944:	7013      	strb	r3, [r2, #0]
 800d946:	e7e7      	b.n	800d918 <getBit+0x14>
 800d948:	2000c3a6 	.word	0x2000c3a6
 800d94c:	2000c3a4 	.word	0x2000c3a4

0800d950 <getExtendTest>:

static uint16 getExtendTest(uint8 i) {
  switch (i) {
 800d950:	3801      	subs	r0, #1
 800d952:	280e      	cmp	r0, #14
 800d954:	d809      	bhi.n	800d96a <getExtendTest+0x1a>
 800d956:	e8df f000 	tbb	[pc, r0]
 800d95a:	0a2d      	.short	0x0a2d
 800d95c:	12100e0c 	.word	0x12100e0c
 800d960:	1b181614 	.word	0x1b181614
 800d964:	2724211e 	.word	0x2724211e
 800d968:	2a          	.byte	0x2a
 800d969:	00          	.byte	0x00
 800d96a:	2000      	movs	r0, #0
 800d96c:	4770      	bx	lr
  case 0:
    return 0;
  case 1:
    return 0x0001;
  case 2:
    return 0x0002;
 800d96e:	2002      	movs	r0, #2
 800d970:	4770      	bx	lr
  case 3:
    return 0x0004;
 800d972:	2004      	movs	r0, #4
 800d974:	4770      	bx	lr
  case 4:
    return 0x0008;
 800d976:	2008      	movs	r0, #8
 800d978:	4770      	bx	lr
  case 5:
    return 0x0010;
 800d97a:	2010      	movs	r0, #16
 800d97c:	4770      	bx	lr
  case 6:
    return 0x0020;
 800d97e:	2020      	movs	r0, #32
 800d980:	4770      	bx	lr
  case 7:
    return 0x0040;
 800d982:	2040      	movs	r0, #64	@ 0x40
 800d984:	4770      	bx	lr
  case 8:
    return 0x0080;
 800d986:	2080      	movs	r0, #128	@ 0x80
 800d988:	4770      	bx	lr
  case 9:
    return 0x0100;
 800d98a:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800d98e:	4770      	bx	lr
  case 10:
    return 0x0200;
 800d990:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800d994:	4770      	bx	lr
  case 11:
    return 0x0400;
 800d996:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800d99a:	4770      	bx	lr
  case 12:
    return 0x0800;
 800d99c:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800d9a0:	4770      	bx	lr
  case 13:
    return 0x1000;
 800d9a2:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800d9a6:	4770      	bx	lr
  case 14:
    return 0x2000;
 800d9a8:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800d9ac:	4770      	bx	lr
  case 15:
    return 0x4000;
 800d9ae:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800d9b2:	4770      	bx	lr
    return 0x0001;
 800d9b4:	2001      	movs	r0, #1
  default:
    return 0;
  }
}
 800d9b6:	4770      	bx	lr

0800d9b8 <getExtendOffset>:

static int16 getExtendOffset(uint8 i) {
  switch (i) {
 800d9b8:	3801      	subs	r0, #1
 800d9ba:	280e      	cmp	r0, #14
 800d9bc:	d809      	bhi.n	800d9d2 <getExtendOffset+0x1a>
 800d9be:	e8df f000 	tbb	[pc, r0]
 800d9c2:	0a2e      	.short	0x0a2e
 800d9c4:	1613100d 	.word	0x1613100d
 800d9c8:	221f1c19 	.word	0x221f1c19
 800d9cc:	2a282624 	.word	0x2a282624
 800d9d0:	2c          	.byte	0x2c
 800d9d1:	00          	.byte	0x00
 800d9d2:	2000      	movs	r0, #0
 800d9d4:	4770      	bx	lr
  case 0:
    return 0;
  case 1:
    return ((-1) << 1) + 1;
  case 2:
    return ((-1) << 2) + 1;
 800d9d6:	f06f 0002 	mvn.w	r0, #2
 800d9da:	4770      	bx	lr
  case 3:
    return ((-1) << 3) + 1;
 800d9dc:	f06f 0006 	mvn.w	r0, #6
 800d9e0:	4770      	bx	lr
  case 4:
    return ((-1) << 4) + 1;
 800d9e2:	f06f 000e 	mvn.w	r0, #14
 800d9e6:	4770      	bx	lr
  case 5:
    return ((-1) << 5) + 1;
 800d9e8:	f06f 001e 	mvn.w	r0, #30
 800d9ec:	4770      	bx	lr
  case 6:
    return ((-1) << 6) + 1;
 800d9ee:	f06f 003e 	mvn.w	r0, #62	@ 0x3e
 800d9f2:	4770      	bx	lr
  case 7:
    return ((-1) << 7) + 1;
 800d9f4:	f06f 007e 	mvn.w	r0, #126	@ 0x7e
 800d9f8:	4770      	bx	lr
  case 8:
    return ((-1) << 8) + 1;
 800d9fa:	f06f 00fe 	mvn.w	r0, #254	@ 0xfe
 800d9fe:	4770      	bx	lr
  case 9:
    return ((-1) << 9) + 1;
 800da00:	f46f 70ff 	mvn.w	r0, #510	@ 0x1fe
 800da04:	4770      	bx	lr
  case 10:
    return ((-1) << 10) + 1;
 800da06:	4807      	ldr	r0, [pc, #28]	@ (800da24 <getExtendOffset+0x6c>)
 800da08:	4770      	bx	lr
  case 11:
    return ((-1) << 11) + 1;
 800da0a:	4807      	ldr	r0, [pc, #28]	@ (800da28 <getExtendOffset+0x70>)
 800da0c:	4770      	bx	lr
  case 12:
    return ((-1) << 12) + 1;
 800da0e:	4807      	ldr	r0, [pc, #28]	@ (800da2c <getExtendOffset+0x74>)
 800da10:	4770      	bx	lr
  case 13:
    return ((-1) << 13) + 1;
 800da12:	4807      	ldr	r0, [pc, #28]	@ (800da30 <getExtendOffset+0x78>)
 800da14:	4770      	bx	lr
  case 14:
    return ((-1) << 14) + 1;
 800da16:	4807      	ldr	r0, [pc, #28]	@ (800da34 <getExtendOffset+0x7c>)
 800da18:	4770      	bx	lr
  case 15:
    return ((-1) << 15) + 1;
 800da1a:	4807      	ldr	r0, [pc, #28]	@ (800da38 <getExtendOffset+0x80>)
 800da1c:	4770      	bx	lr
    return ((-1) << 1) + 1;
 800da1e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
  default:
    return 0;
  }
};
 800da22:	4770      	bx	lr
 800da24:	fffffc01 	.word	0xfffffc01
 800da28:	fffff801 	.word	0xfffff801
 800da2c:	fffff001 	.word	0xfffff001
 800da30:	ffffe001 	.word	0xffffe001
 800da34:	ffffc001 	.word	0xffffc001
 800da38:	ffff8001 	.word	0xffff8001

0800da3c <huffExtend>:

static PJPG_INLINE int16 huffExtend(uint16 x, uint8 s) {
 800da3c:	b538      	push	{r3, r4, r5, lr}
 800da3e:	4604      	mov	r4, r0
 800da40:	460d      	mov	r5, r1
  return ((x < getExtendTest(s)) ? ((int16)x + getExtendOffset(s)) : (int16)x);
 800da42:	4608      	mov	r0, r1
 800da44:	f7ff ff84 	bl	800d950 <getExtendTest>
 800da48:	42a0      	cmp	r0, r4
 800da4a:	d906      	bls.n	800da5a <huffExtend+0x1e>
 800da4c:	4628      	mov	r0, r5
 800da4e:	f7ff ffb3 	bl	800d9b8 <getExtendOffset>
 800da52:	fa14 f080 	uxtah	r0, r4, r0
 800da56:	b200      	sxth	r0, r0
}
 800da58:	bd38      	pop	{r3, r4, r5, pc}
  return ((x < getExtendTest(s)) ? ((int16)x + getExtendOffset(s)) : (int16)x);
 800da5a:	b220      	sxth	r0, r4
 800da5c:	e7fc      	b.n	800da58 <huffExtend+0x1c>

0800da5e <huffDecode>:

static PJPG_INLINE uint8 huffDecode(const HuffTable *pHuffTable,
                                    const uint8 *pHuffVal) {
 800da5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da60:	4607      	mov	r7, r0
 800da62:	460d      	mov	r5, r1
  uint8 i = 0;
  uint8 j;
  uint16 code = getBit();
 800da64:	f7ff ff4e 	bl	800d904 <getBit>
  uint8 i = 0;
 800da68:	2600      	movs	r6, #0

  for (;;) {
    uint16 maxCode;

    if (i == 16)
 800da6a:	2e10      	cmp	r6, #16
 800da6c:	d021      	beq.n	800dab2 <huffDecode+0x54>
      return 0;

    maxCode = pHuffTable->mMaxCode[i];
 800da6e:	f106 0310 	add.w	r3, r6, #16
 800da72:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
    if ((code <= maxCode) && (maxCode != 0xFFFF))
 800da76:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800da7a:	4298      	cmp	r0, r3
 800da7c:	bf8c      	ite	hi
 800da7e:	2200      	movhi	r2, #0
 800da80:	2201      	movls	r2, #1
 800da82:	428b      	cmp	r3, r1
 800da84:	bf08      	it	eq
 800da86:	2200      	moveq	r2, #0
 800da88:	b942      	cbnz	r2, 800da9c <huffDecode+0x3e>
      break;

    i++;
 800da8a:	3601      	adds	r6, #1
 800da8c:	b2f6      	uxtb	r6, r6
    code <<= 1;
 800da8e:	0040      	lsls	r0, r0, #1
 800da90:	b284      	uxth	r4, r0
    code |= getBit();
 800da92:	f7ff ff37 	bl	800d904 <getBit>
 800da96:	4320      	orrs	r0, r4
 800da98:	b280      	uxth	r0, r0
  for (;;) {
 800da9a:	e7e6      	b.n	800da6a <huffDecode+0xc>
  }

  j = pHuffTable->mValPtr[i];
 800da9c:	19bb      	adds	r3, r7, r6
 800da9e:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
  j = (uint8)(j + (code - pHuffTable->mMinCode[i]));
 800daa2:	f837 3016 	ldrh.w	r3, [r7, r6, lsl #1]
 800daa6:	1ac3      	subs	r3, r0, r3
 800daa8:	fa52 f383 	uxtab	r3, r2, r3
 800daac:	b2db      	uxtb	r3, r3

  return pHuffVal[j];
 800daae:	5ce8      	ldrb	r0, [r5, r3]
 800dab0:	e000      	b.n	800dab4 <huffDecode+0x56>
      return 0;
 800dab2:	2000      	movs	r0, #0
}
 800dab4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800dab6 <huffCreate>:

static void huffCreate(const uint8 *pBits, HuffTable *pHuffTable) {
 800dab6:	b530      	push	{r4, r5, lr}
  uint8 i = 0;
  uint8 j = 0;

  uint16 code = 0;
 800dab8:	2200      	movs	r2, #0
  uint8 j = 0;
 800daba:	4694      	mov	ip, r2
  uint8 i = 0;
 800dabc:	4613      	mov	r3, r2
 800dabe:	e012      	b.n	800dae6 <huffCreate+0x30>

  for (;;) {
    uint8 num = pBits[i];

    if (!num) {
      pHuffTable->mMinCode[i] = 0x0000;
 800dac0:	f04f 0e00 	mov.w	lr, #0
 800dac4:	f821 e013 	strh.w	lr, [r1, r3, lsl #1]
      pHuffTable->mMaxCode[i] = 0xFFFF;
 800dac8:	f103 0410 	add.w	r4, r3, #16
 800dacc:	f64f 75ff 	movw	r5, #65535	@ 0xffff
 800dad0:	f821 5014 	strh.w	r5, [r1, r4, lsl #1]
      pHuffTable->mValPtr[i] = 0;
 800dad4:	18cc      	adds	r4, r1, r3
 800dad6:	f884 e040 	strb.w	lr, [r4, #64]	@ 0x40
      j = (uint8)(j + num);

      code = (uint16)(code + num);
    }

    code <<= 1;
 800dada:	0052      	lsls	r2, r2, #1
 800dadc:	b292      	uxth	r2, r2

    i++;
 800dade:	3301      	adds	r3, #1
 800dae0:	b2db      	uxtb	r3, r3
    if (i > 15)
 800dae2:	2b0f      	cmp	r3, #15
 800dae4:	d813      	bhi.n	800db0e <huffCreate+0x58>
    uint8 num = pBits[i];
 800dae6:	5cc4      	ldrb	r4, [r0, r3]
    if (!num) {
 800dae8:	2c00      	cmp	r4, #0
 800daea:	d0e9      	beq.n	800dac0 <huffCreate+0xa>
      pHuffTable->mMinCode[i] = code;
 800daec:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
      pHuffTable->mMaxCode[i] = code + num - 1;
 800daf0:	4422      	add	r2, r4
 800daf2:	b292      	uxth	r2, r2
 800daf4:	1e55      	subs	r5, r2, #1
 800daf6:	f103 0e10 	add.w	lr, r3, #16
 800dafa:	f821 501e 	strh.w	r5, [r1, lr, lsl #1]
      pHuffTable->mValPtr[i] = j;
 800dafe:	eb01 0e03 	add.w	lr, r1, r3
 800db02:	f88e c040 	strb.w	ip, [lr, #64]	@ 0x40
      j = (uint8)(j + num);
 800db06:	4464      	add	r4, ip
 800db08:	fa5f fc84 	uxtb.w	ip, r4
      code = (uint16)(code + num);
 800db0c:	e7e5      	b.n	800dada <huffCreate+0x24>
      break;
  }
}
 800db0e:	bd30      	pop	{r4, r5, pc}

0800db10 <getHuffTable>:

static HuffTable *getHuffTable(uint8 index) {

  switch (index) {
 800db10:	2803      	cmp	r0, #3
 800db12:	d809      	bhi.n	800db28 <getHuffTable+0x18>
 800db14:	e8df f000 	tbb	[pc, r0]
 800db18:	06040a02 	.word	0x06040a02
 800db1c:	4804      	ldr	r0, [pc, #16]	@ (800db30 <getHuffTable+0x20>)
 800db1e:	4770      	bx	lr
  case 0:
    return &gHuffTab0;
  case 1:
    return &gHuffTab1;
  case 2:
    return &gHuffTab2;
 800db20:	4804      	ldr	r0, [pc, #16]	@ (800db34 <getHuffTable+0x24>)
 800db22:	4770      	bx	lr
  case 3:
    return &gHuffTab3;
 800db24:	4804      	ldr	r0, [pc, #16]	@ (800db38 <getHuffTable+0x28>)
 800db26:	4770      	bx	lr
  default:
    return 0;
 800db28:	2000      	movs	r0, #0
 800db2a:	4770      	bx	lr
    return &gHuffTab1;
 800db2c:	4803      	ldr	r0, [pc, #12]	@ (800db3c <getHuffTable+0x2c>)
  }
}
 800db2e:	4770      	bx	lr
 800db30:	2000c7c0 	.word	0x2000c7c0
 800db34:	2000c700 	.word	0x2000c700
 800db38:	2000c5b0 	.word	0x2000c5b0
 800db3c:	2000c760 	.word	0x2000c760

0800db40 <getHuffVal>:

static uint8 *getHuffVal(uint8 index) {

  switch (index) {
 800db40:	2803      	cmp	r0, #3
 800db42:	d809      	bhi.n	800db58 <getHuffVal+0x18>
 800db44:	e8df f000 	tbb	[pc, r0]
 800db48:	06040a02 	.word	0x06040a02
 800db4c:	4804      	ldr	r0, [pc, #16]	@ (800db60 <getHuffVal+0x20>)
 800db4e:	4770      	bx	lr
  case 0:
    return gHuffVal0;
  case 1:
    return gHuffVal1;
  case 2:
    return gHuffVal2;
 800db50:	4804      	ldr	r0, [pc, #16]	@ (800db64 <getHuffVal+0x24>)
 800db52:	4770      	bx	lr
  case 3:
    return gHuffVal3;
 800db54:	4804      	ldr	r0, [pc, #16]	@ (800db68 <getHuffVal+0x28>)
 800db56:	4770      	bx	lr
  default:
    return 0;
 800db58:	2000      	movs	r0, #0
 800db5a:	4770      	bx	lr
    return gHuffVal1;
 800db5c:	4803      	ldr	r0, [pc, #12]	@ (800db6c <getHuffVal+0x2c>)
  }
}
 800db5e:	4770      	bx	lr
 800db60:	2000c7b0 	.word	0x2000c7b0
 800db64:	2000c600 	.word	0x2000c600
 800db68:	2000c4b0 	.word	0x2000c4b0
 800db6c:	2000c750 	.word	0x2000c750

0800db70 <getMaxHuffCodes>:

static uint16 getMaxHuffCodes(uint8 index) { return (index < 2) ? 12 : 255; }
 800db70:	2801      	cmp	r0, #1
 800db72:	d901      	bls.n	800db78 <getMaxHuffCodes+0x8>
 800db74:	20ff      	movs	r0, #255	@ 0xff
 800db76:	4770      	bx	lr
 800db78:	200c      	movs	r0, #12
 800db7a:	4770      	bx	lr

0800db7c <readDHTMarker>:

static uint8 readDHTMarker(void) {
 800db7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800db80:	b084      	sub	sp, #16
  uint8 bits[16];
  uint16 left = getBits1(16);
 800db82:	2010      	movs	r0, #16
 800db84:	f7ff feb4 	bl	800d8f0 <getBits1>

  if (left < 2)
 800db88:	2801      	cmp	r0, #1
 800db8a:	d95a      	bls.n	800dc42 <readDHTMarker+0xc6>
    return PJPG_BAD_DHT_MARKER;

  left -= 2;
 800db8c:	3802      	subs	r0, #2
 800db8e:	fa1f f880 	uxth.w	r8, r0

  while (left) {
 800db92:	e02c      	b.n	800dbee <readDHTMarker+0x72>

    gValidHuffTables |= (1 << tableIndex);

    count = 0;
    for (i = 0; i <= 15; i++) {
      uint8 n = (uint8)getBits1(8);
 800db94:	2008      	movs	r0, #8
 800db96:	f7ff feab 	bl	800d8f0 <getBits1>
 800db9a:	b2c0      	uxtb	r0, r0
      bits[i] = n;
 800db9c:	f104 0310 	add.w	r3, r4, #16
 800dba0:	446b      	add	r3, sp
 800dba2:	f803 0c10 	strb.w	r0, [r3, #-16]
      count = (uint16)(count + n);
 800dba6:	4450      	add	r0, sl
 800dba8:	fa1f fa80 	uxth.w	sl, r0
    for (i = 0; i <= 15; i++) {
 800dbac:	3401      	adds	r4, #1
 800dbae:	b2e4      	uxtb	r4, r4
 800dbb0:	2c0f      	cmp	r4, #15
 800dbb2:	d9ef      	bls.n	800db94 <readDHTMarker+0x18>
    }

    if (count > getMaxHuffCodes(tableIndex))
 800dbb4:	4630      	mov	r0, r6
 800dbb6:	f7ff ffdb 	bl	800db70 <getMaxHuffCodes>
 800dbba:	4550      	cmp	r0, sl
 800dbbc:	d207      	bcs.n	800dbce <readDHTMarker+0x52>
      return PJPG_BAD_DHT_COUNTS;
 800dbbe:	2002      	movs	r0, #2
 800dbc0:	e03c      	b.n	800dc3c <readDHTMarker+0xc0>

    for (i = 0; i < count; i++)
      pHuffVal[i] = (uint8)getBits1(8);
 800dbc2:	2008      	movs	r0, #8
 800dbc4:	f7ff fe94 	bl	800d8f0 <getBits1>
 800dbc8:	5578      	strb	r0, [r7, r5]
    for (i = 0; i < count; i++)
 800dbca:	3501      	adds	r5, #1
 800dbcc:	b2ed      	uxtb	r5, r5
 800dbce:	4555      	cmp	r5, sl
 800dbd0:	d3f7      	bcc.n	800dbc2 <readDHTMarker+0x46>

    totalRead = 1 + 16 + count;
 800dbd2:	f10a 0a11 	add.w	sl, sl, #17
 800dbd6:	fa1f fa8a 	uxth.w	sl, sl

    if (left < totalRead)
 800dbda:	45d0      	cmp	r8, sl
 800dbdc:	d337      	bcc.n	800dc4e <readDHTMarker+0xd2>
      return PJPG_BAD_DHT_MARKER;

    left = (uint16)(left - totalRead);
 800dbde:	eba8 0a0a 	sub.w	sl, r8, sl
 800dbe2:	fa1f f88a 	uxth.w	r8, sl

    huffCreate(bits, pHuffTable);
 800dbe6:	4649      	mov	r1, r9
 800dbe8:	4668      	mov	r0, sp
 800dbea:	f7ff ff64 	bl	800dab6 <huffCreate>
  while (left) {
 800dbee:	f1b8 0f00 	cmp.w	r8, #0
 800dbf2:	d022      	beq.n	800dc3a <readDHTMarker+0xbe>
    index = (uint8)getBits1(8);
 800dbf4:	2008      	movs	r0, #8
 800dbf6:	f7ff fe7b 	bl	800d8f0 <getBits1>
 800dbfa:	b2c3      	uxtb	r3, r0
    if (((index & 0xF) > 1) || ((index & 0xF0) > 0x10))
 800dbfc:	f010 050e 	ands.w	r5, r0, #14
 800dc00:	d121      	bne.n	800dc46 <readDHTMarker+0xca>
 800dc02:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800dc06:	2a10      	cmp	r2, #16
 800dc08:	d81f      	bhi.n	800dc4a <readDHTMarker+0xce>
    tableIndex = ((index >> 3) & 2) + (index & 1);
 800dc0a:	08de      	lsrs	r6, r3, #3
 800dc0c:	f000 0001 	and.w	r0, r0, #1
 800dc10:	f006 0602 	and.w	r6, r6, #2
 800dc14:	4306      	orrs	r6, r0
    pHuffTable = getHuffTable(tableIndex);
 800dc16:	4630      	mov	r0, r6
 800dc18:	f7ff ff7a 	bl	800db10 <getHuffTable>
 800dc1c:	4681      	mov	r9, r0
    pHuffVal = getHuffVal(tableIndex);
 800dc1e:	4630      	mov	r0, r6
 800dc20:	f7ff ff8e 	bl	800db40 <getHuffVal>
 800dc24:	4607      	mov	r7, r0
    gValidHuffTables |= (1 << tableIndex);
 800dc26:	2201      	movs	r2, #1
 800dc28:	40b2      	lsls	r2, r6
 800dc2a:	490a      	ldr	r1, [pc, #40]	@ (800dc54 <readDHTMarker+0xd8>)
 800dc2c:	780b      	ldrb	r3, [r1, #0]
 800dc2e:	4313      	orrs	r3, r2
 800dc30:	700b      	strb	r3, [r1, #0]
    for (i = 0; i <= 15; i++) {
 800dc32:	462c      	mov	r4, r5
    count = 0;
 800dc34:	f04f 0a00 	mov.w	sl, #0
    for (i = 0; i <= 15; i++) {
 800dc38:	e7ba      	b.n	800dbb0 <readDHTMarker+0x34>
  }

  return 0;
 800dc3a:	2000      	movs	r0, #0
}
 800dc3c:	b004      	add	sp, #16
 800dc3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return PJPG_BAD_DHT_MARKER;
 800dc42:	2004      	movs	r0, #4
 800dc44:	e7fa      	b.n	800dc3c <readDHTMarker+0xc0>
      return PJPG_BAD_DHT_INDEX;
 800dc46:	2003      	movs	r0, #3
 800dc48:	e7f8      	b.n	800dc3c <readDHTMarker+0xc0>
 800dc4a:	2003      	movs	r0, #3
 800dc4c:	e7f6      	b.n	800dc3c <readDHTMarker+0xc0>
      return PJPG_BAD_DHT_MARKER;
 800dc4e:	2004      	movs	r0, #4
 800dc50:	e7f4      	b.n	800dc3c <readDHTMarker+0xc0>
 800dc52:	bf00      	nop
 800dc54:	2000c4ae 	.word	0x2000c4ae

0800dc58 <readSOFMarker>:
  }

  return 0;
}

static uint8 readSOFMarker(void) {
 800dc58:	b510      	push	{r4, lr}
  uint8 i;
  uint16 left = getBits1(16);
 800dc5a:	2010      	movs	r0, #16
 800dc5c:	f7ff fe48 	bl	800d8f0 <getBits1>
 800dc60:	4604      	mov	r4, r0

  if (getBits1(8) != 8)
 800dc62:	2008      	movs	r0, #8
 800dc64:	f7ff fe44 	bl	800d8f0 <getBits1>
 800dc68:	2808      	cmp	r0, #8
 800dc6a:	d001      	beq.n	800dc70 <readSOFMarker+0x18>
    return PJPG_BAD_PRECISION;
 800dc6c:	2007      	movs	r0, #7
    if (gCompQuant[i] > 1)
      return PJPG_UNSUPPORTED_QUANT_TABLE;
  }

  return 0;
}
 800dc6e:	bd10      	pop	{r4, pc}
  gImageYSize = getBits1(16);
 800dc70:	2010      	movs	r0, #16
 800dc72:	f7ff fe3d 	bl	800d8f0 <getBits1>
 800dc76:	4a24      	ldr	r2, [pc, #144]	@ (800dd08 <readSOFMarker+0xb0>)
 800dc78:	8010      	strh	r0, [r2, #0]
  if ((!gImageYSize) || (gImageYSize > PJPG_MAX_HEIGHT))
 800dc7a:	1e43      	subs	r3, r0, #1
 800dc7c:	b29b      	uxth	r3, r3
 800dc7e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800dc82:	d237      	bcs.n	800dcf4 <readSOFMarker+0x9c>
  gImageXSize = getBits1(16);
 800dc84:	2010      	movs	r0, #16
 800dc86:	f7ff fe33 	bl	800d8f0 <getBits1>
 800dc8a:	4b20      	ldr	r3, [pc, #128]	@ (800dd0c <readSOFMarker+0xb4>)
 800dc8c:	8018      	strh	r0, [r3, #0]
  if ((!gImageXSize) || (gImageXSize > PJPG_MAX_WIDTH))
 800dc8e:	3801      	subs	r0, #1
 800dc90:	b280      	uxth	r0, r0
 800dc92:	f5b0 4f80 	cmp.w	r0, #16384	@ 0x4000
 800dc96:	d22f      	bcs.n	800dcf8 <readSOFMarker+0xa0>
  gCompsInFrame = (uint8)getBits1(8);
 800dc98:	2008      	movs	r0, #8
 800dc9a:	f7ff fe29 	bl	800d8f0 <getBits1>
 800dc9e:	b2c0      	uxtb	r0, r0
 800dca0:	4b1b      	ldr	r3, [pc, #108]	@ (800dd10 <readSOFMarker+0xb8>)
 800dca2:	7018      	strb	r0, [r3, #0]
  if (gCompsInFrame > 3)
 800dca4:	2803      	cmp	r0, #3
 800dca6:	d829      	bhi.n	800dcfc <readSOFMarker+0xa4>
  if (left != (gCompsInFrame + gCompsInFrame + gCompsInFrame + 8))
 800dca8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800dcac:	3008      	adds	r0, #8
 800dcae:	4284      	cmp	r4, r0
 800dcb0:	d126      	bne.n	800dd00 <readSOFMarker+0xa8>
  for (i = 0; i < gCompsInFrame; i++) {
 800dcb2:	2400      	movs	r4, #0
 800dcb4:	4b16      	ldr	r3, [pc, #88]	@ (800dd10 <readSOFMarker+0xb8>)
 800dcb6:	781b      	ldrb	r3, [r3, #0]
 800dcb8:	42a3      	cmp	r3, r4
 800dcba:	d919      	bls.n	800dcf0 <readSOFMarker+0x98>
    gCompIdent[i] = (uint8)getBits1(8);
 800dcbc:	2008      	movs	r0, #8
 800dcbe:	f7ff fe17 	bl	800d8f0 <getBits1>
 800dcc2:	4b14      	ldr	r3, [pc, #80]	@ (800dd14 <readSOFMarker+0xbc>)
 800dcc4:	5518      	strb	r0, [r3, r4]
    gCompHSamp[i] = (uint8)getBits1(4);
 800dcc6:	2004      	movs	r0, #4
 800dcc8:	f7ff fe12 	bl	800d8f0 <getBits1>
 800dccc:	4b12      	ldr	r3, [pc, #72]	@ (800dd18 <readSOFMarker+0xc0>)
 800dcce:	5518      	strb	r0, [r3, r4]
    gCompVSamp[i] = (uint8)getBits1(4);
 800dcd0:	2004      	movs	r0, #4
 800dcd2:	f7ff fe0d 	bl	800d8f0 <getBits1>
 800dcd6:	4b11      	ldr	r3, [pc, #68]	@ (800dd1c <readSOFMarker+0xc4>)
 800dcd8:	5518      	strb	r0, [r3, r4]
    gCompQuant[i] = (uint8)getBits1(8);
 800dcda:	2008      	movs	r0, #8
 800dcdc:	f7ff fe08 	bl	800d8f0 <getBits1>
 800dce0:	b2c0      	uxtb	r0, r0
 800dce2:	4b0f      	ldr	r3, [pc, #60]	@ (800dd20 <readSOFMarker+0xc8>)
 800dce4:	5518      	strb	r0, [r3, r4]
    if (gCompQuant[i] > 1)
 800dce6:	2801      	cmp	r0, #1
 800dce8:	d80c      	bhi.n	800dd04 <readSOFMarker+0xac>
  for (i = 0; i < gCompsInFrame; i++) {
 800dcea:	3401      	adds	r4, #1
 800dcec:	b2e4      	uxtb	r4, r4
 800dcee:	e7e1      	b.n	800dcb4 <readSOFMarker+0x5c>
  return 0;
 800dcf0:	2000      	movs	r0, #0
 800dcf2:	e7bc      	b.n	800dc6e <readSOFMarker+0x16>
    return PJPG_BAD_HEIGHT;
 800dcf4:	2008      	movs	r0, #8
 800dcf6:	e7ba      	b.n	800dc6e <readSOFMarker+0x16>
    return PJPG_BAD_WIDTH;
 800dcf8:	2009      	movs	r0, #9
 800dcfa:	e7b8      	b.n	800dc6e <readSOFMarker+0x16>
    return PJPG_TOO_MANY_COMPONENTS;
 800dcfc:	200a      	movs	r0, #10
 800dcfe:	e7b6      	b.n	800dc6e <readSOFMarker+0x16>
    return PJPG_BAD_SOF_LENGTH;
 800dd00:	200b      	movs	r0, #11
 800dd02:	e7b4      	b.n	800dc6e <readSOFMarker+0x16>
      return PJPG_UNSUPPORTED_QUANT_TABLE;
 800dd04:	2024      	movs	r0, #36	@ 0x24
 800dd06:	e7b2      	b.n	800dc6e <readSOFMarker+0x16>
 800dd08:	2000c3a0 	.word	0x2000c3a0
 800dd0c:	2000c3a2 	.word	0x2000c3a2
 800dd10:	2000c39f 	.word	0x2000c39f
 800dd14:	2000c39c 	.word	0x2000c39c
 800dd18:	2000c398 	.word	0x2000c398
 800dd1c:	2000c394 	.word	0x2000c394
 800dd20:	2000c390 	.word	0x2000c390

0800dd24 <skipVariableMarker>:

static uint8 skipVariableMarker(void) {
 800dd24:	b510      	push	{r4, lr}
  uint16 left = getBits1(16);
 800dd26:	2010      	movs	r0, #16
 800dd28:	f7ff fde2 	bl	800d8f0 <getBits1>

  if (left < 2)
 800dd2c:	2801      	cmp	r0, #1
 800dd2e:	d90b      	bls.n	800dd48 <skipVariableMarker+0x24>
    return PJPG_BAD_VARIABLE_MARKER;

  left -= 2;
 800dd30:	3802      	subs	r0, #2
 800dd32:	b284      	uxth	r4, r0

  while (left) {
 800dd34:	e004      	b.n	800dd40 <skipVariableMarker+0x1c>
    getBits1(8);
 800dd36:	2008      	movs	r0, #8
 800dd38:	f7ff fdda 	bl	800d8f0 <getBits1>
    left--;
 800dd3c:	3c01      	subs	r4, #1
 800dd3e:	b2a4      	uxth	r4, r4
  while (left) {
 800dd40:	2c00      	cmp	r4, #0
 800dd42:	d1f8      	bne.n	800dd36 <skipVariableMarker+0x12>
  }

  return 0;
 800dd44:	2000      	movs	r0, #0
}
 800dd46:	bd10      	pop	{r4, pc}
    return PJPG_BAD_VARIABLE_MARKER;
 800dd48:	200c      	movs	r0, #12
 800dd4a:	e7fc      	b.n	800dd46 <skipVariableMarker+0x22>

0800dd4c <readDRIMarker>:

static uint8 readDRIMarker(void) {
 800dd4c:	b508      	push	{r3, lr}
  if (getBits1(16) != 4)
 800dd4e:	2010      	movs	r0, #16
 800dd50:	f7ff fdce 	bl	800d8f0 <getBits1>
 800dd54:	2804      	cmp	r0, #4
 800dd56:	d001      	beq.n	800dd5c <readDRIMarker+0x10>
    return PJPG_BAD_DRI_LENGTH;
 800dd58:	200d      	movs	r0, #13

  gRestartInterval = getBits1(16);

  return 0;
}
 800dd5a:	bd08      	pop	{r3, pc}
  gRestartInterval = getBits1(16);
 800dd5c:	2010      	movs	r0, #16
 800dd5e:	f7ff fdc7 	bl	800d8f0 <getBits1>
 800dd62:	4b02      	ldr	r3, [pc, #8]	@ (800dd6c <readDRIMarker+0x20>)
 800dd64:	8018      	strh	r0, [r3, #0]
  return 0;
 800dd66:	2000      	movs	r0, #0
 800dd68:	e7f7      	b.n	800dd5a <readDRIMarker+0xe>
 800dd6a:	bf00      	nop
 800dd6c:	2000c38c 	.word	0x2000c38c

0800dd70 <readSOSMarker>:

static uint8 readSOSMarker(void) {
 800dd70:	b570      	push	{r4, r5, r6, lr}
  uint8 i;
  uint16 left = getBits1(16);
 800dd72:	2010      	movs	r0, #16
 800dd74:	f7ff fdbc 	bl	800d8f0 <getBits1>
 800dd78:	4605      	mov	r5, r0
  uint8 spectral_start, spectral_end, successive_high, successive_low;

  gCompsInScan = (uint8)getBits1(8);
 800dd7a:	2008      	movs	r0, #8
 800dd7c:	f7ff fdb8 	bl	800d8f0 <getBits1>
 800dd80:	b2c0      	uxtb	r0, r0
 800dd82:	4a2a      	ldr	r2, [pc, #168]	@ (800de2c <readSOSMarker+0xbc>)
 800dd84:	7010      	strb	r0, [r2, #0]

  left -= 3;
 800dd86:	3d03      	subs	r5, #3
 800dd88:	b2ad      	uxth	r5, r5

  if ((left != (gCompsInScan + gCompsInScan + 3)) || (gCompsInScan < 1) ||
 800dd8a:	0042      	lsls	r2, r0, #1
 800dd8c:	3203      	adds	r2, #3
 800dd8e:	4295      	cmp	r5, r2
 800dd90:	d144      	bne.n	800de1c <readSOSMarker+0xac>
 800dd92:	2800      	cmp	r0, #0
 800dd94:	d044      	beq.n	800de20 <readSOSMarker+0xb0>
 800dd96:	2803      	cmp	r0, #3
 800dd98:	d844      	bhi.n	800de24 <readSOSMarker+0xb4>
      (gCompsInScan > PJPG_MAXCOMPSINSCAN))
    return PJPG_BAD_SOS_LENGTH;

  for (i = 0; i < gCompsInScan; i++) {
 800dd9a:	2600      	movs	r6, #0
 800dd9c:	e00c      	b.n	800ddb8 <readSOSMarker+0x48>

    for (ci = 0; ci < gCompsInFrame; ci++)
      if (cc == gCompIdent[ci])
        break;

    if (ci >= gCompsInFrame)
 800dd9e:	429a      	cmp	r2, r3
 800dda0:	d942      	bls.n	800de28 <readSOSMarker+0xb8>
      return PJPG_BAD_SOS_COMP_ID;

    gCompList[i] = ci;
 800dda2:	4a23      	ldr	r2, [pc, #140]	@ (800de30 <readSOSMarker+0xc0>)
 800dda4:	5593      	strb	r3, [r2, r6]
    gCompDCTab[ci] = (c >> 4) & 15;
 800dda6:	0901      	lsrs	r1, r0, #4
 800dda8:	4a22      	ldr	r2, [pc, #136]	@ (800de34 <readSOSMarker+0xc4>)
 800ddaa:	54d1      	strb	r1, [r2, r3]
    gCompACTab[ci] = (c & 15);
 800ddac:	f000 000f 	and.w	r0, r0, #15
 800ddb0:	4a21      	ldr	r2, [pc, #132]	@ (800de38 <readSOSMarker+0xc8>)
 800ddb2:	54d0      	strb	r0, [r2, r3]
  for (i = 0; i < gCompsInScan; i++) {
 800ddb4:	3601      	adds	r6, #1
 800ddb6:	b2f6      	uxtb	r6, r6
 800ddb8:	4b1c      	ldr	r3, [pc, #112]	@ (800de2c <readSOSMarker+0xbc>)
 800ddba:	781b      	ldrb	r3, [r3, #0]
 800ddbc:	42b3      	cmp	r3, r6
 800ddbe:	d915      	bls.n	800ddec <readSOSMarker+0x7c>
    uint8 cc = (uint8)getBits1(8);
 800ddc0:	2008      	movs	r0, #8
 800ddc2:	f7ff fd95 	bl	800d8f0 <getBits1>
 800ddc6:	b2c4      	uxtb	r4, r0
    uint8 c = (uint8)getBits1(8);
 800ddc8:	2008      	movs	r0, #8
 800ddca:	f7ff fd91 	bl	800d8f0 <getBits1>
 800ddce:	b2c0      	uxtb	r0, r0
    left -= 2;
 800ddd0:	3d02      	subs	r5, #2
 800ddd2:	b2ad      	uxth	r5, r5
    for (ci = 0; ci < gCompsInFrame; ci++)
 800ddd4:	2300      	movs	r3, #0
 800ddd6:	4a19      	ldr	r2, [pc, #100]	@ (800de3c <readSOSMarker+0xcc>)
 800ddd8:	7812      	ldrb	r2, [r2, #0]
 800ddda:	429a      	cmp	r2, r3
 800dddc:	d9df      	bls.n	800dd9e <readSOSMarker+0x2e>
      if (cc == gCompIdent[ci])
 800ddde:	4918      	ldr	r1, [pc, #96]	@ (800de40 <readSOSMarker+0xd0>)
 800dde0:	5cc9      	ldrb	r1, [r1, r3]
 800dde2:	42a1      	cmp	r1, r4
 800dde4:	d0db      	beq.n	800dd9e <readSOSMarker+0x2e>
    for (ci = 0; ci < gCompsInFrame; ci++)
 800dde6:	3301      	adds	r3, #1
 800dde8:	b2db      	uxtb	r3, r3
 800ddea:	e7f4      	b.n	800ddd6 <readSOSMarker+0x66>
  }

  spectral_start = (uint8)getBits1(8);
 800ddec:	2008      	movs	r0, #8
 800ddee:	f7ff fd7f 	bl	800d8f0 <getBits1>
  spectral_end = (uint8)getBits1(8);
 800ddf2:	2008      	movs	r0, #8
 800ddf4:	f7ff fd7c 	bl	800d8f0 <getBits1>
  successive_high = (uint8)getBits1(4);
 800ddf8:	2004      	movs	r0, #4
 800ddfa:	f7ff fd79 	bl	800d8f0 <getBits1>
  successive_low = (uint8)getBits1(4);
 800ddfe:	2004      	movs	r0, #4
 800de00:	f7ff fd76 	bl	800d8f0 <getBits1>

  left -= 3;
 800de04:	1eec      	subs	r4, r5, #3
 800de06:	b2a4      	uxth	r4, r4

  while (left) {
 800de08:	e004      	b.n	800de14 <readSOSMarker+0xa4>
    getBits1(8);
 800de0a:	2008      	movs	r0, #8
 800de0c:	f7ff fd70 	bl	800d8f0 <getBits1>
    left--;
 800de10:	3c01      	subs	r4, #1
 800de12:	b2a4      	uxth	r4, r4
  while (left) {
 800de14:	2c00      	cmp	r4, #0
 800de16:	d1f8      	bne.n	800de0a <readSOSMarker+0x9a>
  }

  return 0;
 800de18:	2000      	movs	r0, #0
 800de1a:	e000      	b.n	800de1e <readSOSMarker+0xae>
    return PJPG_BAD_SOS_LENGTH;
 800de1c:	200e      	movs	r0, #14
}
 800de1e:	bd70      	pop	{r4, r5, r6, pc}
    return PJPG_BAD_SOS_LENGTH;
 800de20:	200e      	movs	r0, #14
 800de22:	e7fc      	b.n	800de1e <readSOSMarker+0xae>
 800de24:	200e      	movs	r0, #14
 800de26:	e7fa      	b.n	800de1e <readSOSMarker+0xae>
      return PJPG_BAD_SOS_COMP_ID;
 800de28:	200f      	movs	r0, #15
 800de2a:	e7f8      	b.n	800de1e <readSOSMarker+0xae>
 800de2c:	2000c387 	.word	0x2000c387
 800de30:	2000c384 	.word	0x2000c384
 800de34:	2000c380 	.word	0x2000c380
 800de38:	2000c37c 	.word	0x2000c37c
 800de3c:	2000c39f 	.word	0x2000c39f
 800de40:	2000c39c 	.word	0x2000c39c

0800de44 <nextMarker>:

static uint8 nextMarker(void) {
 800de44:	b508      	push	{r3, lr}

  do {
    do {
      bytes++;

      c = (uint8)getBits1(8);
 800de46:	2008      	movs	r0, #8
 800de48:	f7ff fd52 	bl	800d8f0 <getBits1>
 800de4c:	b2c0      	uxtb	r0, r0

    } while (c != 0xFF);
 800de4e:	28ff      	cmp	r0, #255	@ 0xff
 800de50:	d1f9      	bne.n	800de46 <nextMarker+0x2>

    do {
      c = (uint8)getBits1(8);
 800de52:	2008      	movs	r0, #8
 800de54:	f7ff fd4c 	bl	800d8f0 <getBits1>
 800de58:	b2c0      	uxtb	r0, r0

    } while (c == 0xFF);
 800de5a:	28ff      	cmp	r0, #255	@ 0xff
 800de5c:	d0f9      	beq.n	800de52 <nextMarker+0xe>

  } while (c == 0);
 800de5e:	2800      	cmp	r0, #0
 800de60:	d0f1      	beq.n	800de46 <nextMarker+0x2>

  return c;
}
 800de62:	bd08      	pop	{r3, pc}

0800de64 <locateSOIMarker>:
    }
    }
  }
}

static uint8 locateSOIMarker(void) {
 800de64:	b538      	push	{r3, r4, r5, lr}
  uint16 bytesleft;

  uint8 lastchar = (uint8)getBits1(8);
 800de66:	2008      	movs	r0, #8
 800de68:	f7ff fd42 	bl	800d8f0 <getBits1>
 800de6c:	b2c4      	uxtb	r4, r0

  uint8 thischar = (uint8)getBits1(8);
 800de6e:	2008      	movs	r0, #8
 800de70:	f7ff fd3e 	bl	800d8f0 <getBits1>
 800de74:	b2c5      	uxtb	r5, r0

  if ((lastchar == 0xFF) && (thischar == M_SOI))
 800de76:	2cff      	cmp	r4, #255	@ 0xff
 800de78:	bf08      	it	eq
 800de7a:	2dd8      	cmpeq	r5, #216	@ 0xd8
 800de7c:	d019      	beq.n	800deb2 <locateSOIMarker+0x4e>
    return 0;

  bytesleft = 4096;
 800de7e:	f44f 5480 	mov.w	r4, #4096	@ 0x1000
 800de82:	e000      	b.n	800de86 <locateSOIMarker+0x22>
 800de84:	4605      	mov	r5, r0

  for (;;) {
    if (--bytesleft == 0)
 800de86:	3c01      	subs	r4, #1
 800de88:	b2a4      	uxth	r4, r4
 800de8a:	b1a4      	cbz	r4, 800deb6 <locateSOIMarker+0x52>
      return PJPG_NOT_JPEG;

    lastchar = thischar;

    thischar = (uint8)getBits1(8);
 800de8c:	2008      	movs	r0, #8
 800de8e:	f7ff fd2f 	bl	800d8f0 <getBits1>
 800de92:	b2c0      	uxtb	r0, r0

    if (lastchar == 0xFF) {
 800de94:	2dff      	cmp	r5, #255	@ 0xff
 800de96:	d1f5      	bne.n	800de84 <locateSOIMarker+0x20>
      if (thischar == M_SOI)
 800de98:	28d8      	cmp	r0, #216	@ 0xd8
 800de9a:	d003      	beq.n	800dea4 <locateSOIMarker+0x40>
        break;
      else if (thischar == M_EOI)
 800de9c:	28d9      	cmp	r0, #217	@ 0xd9
 800de9e:	d00c      	beq.n	800deba <locateSOIMarker+0x56>
 800dea0:	4605      	mov	r5, r0
 800dea2:	e7f0      	b.n	800de86 <locateSOIMarker+0x22>
        return PJPG_NOT_JPEG;
    }
  }

  thischar = (uint8)((gBitBuf >> 8) & 0xFF);
 800dea4:	4b07      	ldr	r3, [pc, #28]	@ (800dec4 <locateSOIMarker+0x60>)
 800dea6:	881b      	ldrh	r3, [r3, #0]
 800dea8:	0a1b      	lsrs	r3, r3, #8

  if (thischar != 0xFF)
 800deaa:	2bff      	cmp	r3, #255	@ 0xff
 800deac:	d107      	bne.n	800debe <locateSOIMarker+0x5a>
    return PJPG_NOT_JPEG;

  return 0;
 800deae:	2000      	movs	r0, #0
 800deb0:	e000      	b.n	800deb4 <locateSOIMarker+0x50>
    return 0;
 800deb2:	2000      	movs	r0, #0
}
 800deb4:	bd38      	pop	{r3, r4, r5, pc}
      return PJPG_NOT_JPEG;
 800deb6:	2013      	movs	r0, #19
 800deb8:	e7fc      	b.n	800deb4 <locateSOIMarker+0x50>
        return PJPG_NOT_JPEG;
 800deba:	2013      	movs	r0, #19
 800debc:	e7fa      	b.n	800deb4 <locateSOIMarker+0x50>
    return PJPG_NOT_JPEG;
 800debe:	2013      	movs	r0, #19
 800dec0:	e7f8      	b.n	800deb4 <locateSOIMarker+0x50>
 800dec2:	bf00      	nop
 800dec4:	2000c3a6 	.word	0x2000c3a6

0800dec8 <init>:
    return PJPG_UNEXPECTED_MARKER;

  return readSOSMarker();
}

static uint8 init(void) {
 800dec8:	b538      	push	{r3, r4, r5, lr}
  gImageXSize = 0;
 800deca:	2400      	movs	r4, #0
 800decc:	4b10      	ldr	r3, [pc, #64]	@ (800df10 <init+0x48>)
 800dece:	801c      	strh	r4, [r3, #0]
  gImageYSize = 0;
 800ded0:	4b10      	ldr	r3, [pc, #64]	@ (800df14 <init+0x4c>)
 800ded2:	801c      	strh	r4, [r3, #0]
  gCompsInFrame = 0;
 800ded4:	4b10      	ldr	r3, [pc, #64]	@ (800df18 <init+0x50>)
 800ded6:	701c      	strb	r4, [r3, #0]
  gRestartInterval = 0;
 800ded8:	4b10      	ldr	r3, [pc, #64]	@ (800df1c <init+0x54>)
 800deda:	801c      	strh	r4, [r3, #0]
  gCompsInScan = 0;
 800dedc:	4b10      	ldr	r3, [pc, #64]	@ (800df20 <init+0x58>)
 800dede:	701c      	strb	r4, [r3, #0]
  gValidHuffTables = 0;
 800dee0:	4b10      	ldr	r3, [pc, #64]	@ (800df24 <init+0x5c>)
 800dee2:	701c      	strb	r4, [r3, #0]
  gValidQuantTables = 0;
 800dee4:	4b10      	ldr	r3, [pc, #64]	@ (800df28 <init+0x60>)
 800dee6:	701c      	strb	r4, [r3, #0]
  gTemFlag = 0;
 800dee8:	4b10      	ldr	r3, [pc, #64]	@ (800df2c <init+0x64>)
 800deea:	701c      	strb	r4, [r3, #0]
  gInBufOfs = 0;
 800deec:	4b10      	ldr	r3, [pc, #64]	@ (800df30 <init+0x68>)
 800deee:	701c      	strb	r4, [r3, #0]
  gInBufLeft = 0;
 800def0:	4b10      	ldr	r3, [pc, #64]	@ (800df34 <init+0x6c>)
 800def2:	701c      	strb	r4, [r3, #0]
  gBitBuf = 0;
 800def4:	4b10      	ldr	r3, [pc, #64]	@ (800df38 <init+0x70>)
 800def6:	801c      	strh	r4, [r3, #0]
  gBitsLeft = 8;
 800def8:	2508      	movs	r5, #8
 800defa:	4b10      	ldr	r3, [pc, #64]	@ (800df3c <init+0x74>)
 800defc:	701d      	strb	r5, [r3, #0]

  getBits1(8);
 800defe:	4628      	mov	r0, r5
 800df00:	f7ff fcf6 	bl	800d8f0 <getBits1>
  getBits1(8);
 800df04:	4628      	mov	r0, r5
 800df06:	f7ff fcf3 	bl	800d8f0 <getBits1>

  return 0;
}
 800df0a:	4620      	mov	r0, r4
 800df0c:	bd38      	pop	{r3, r4, r5, pc}
 800df0e:	bf00      	nop
 800df10:	2000c3a2 	.word	0x2000c3a2
 800df14:	2000c3a0 	.word	0x2000c3a0
 800df18:	2000c39f 	.word	0x2000c39f
 800df1c:	2000c38c 	.word	0x2000c38c
 800df20:	2000c387 	.word	0x2000c387
 800df24:	2000c4ae 	.word	0x2000c4ae
 800df28:	2000c4ad 	.word	0x2000c4ad
 800df2c:	2000c4ac 	.word	0x2000c4ac
 800df30:	2000c3a9 	.word	0x2000c3a9
 800df34:	2000c3a8 	.word	0x2000c3a8
 800df38:	2000c3a6 	.word	0x2000c3a6
 800df3c:	2000c3a4 	.word	0x2000c3a4

0800df40 <fixInBuffer>:

static void fixInBuffer(void) {
 800df40:	b510      	push	{r4, lr}

  if (gBitsLeft > 0)
 800df42:	4b0b      	ldr	r3, [pc, #44]	@ (800df70 <fixInBuffer+0x30>)
 800df44:	781b      	ldrb	r3, [r3, #0]
 800df46:	b973      	cbnz	r3, 800df66 <fixInBuffer+0x26>
    stuffChar((uint8)gBitBuf);

  stuffChar((uint8)(gBitBuf >> 8));
 800df48:	4b0a      	ldr	r3, [pc, #40]	@ (800df74 <fixInBuffer+0x34>)
 800df4a:	8818      	ldrh	r0, [r3, #0]
 800df4c:	0a00      	lsrs	r0, r0, #8
 800df4e:	f7ff fc49 	bl	800d7e4 <stuffChar>

  gBitsLeft = 8;
 800df52:	2408      	movs	r4, #8
 800df54:	4b06      	ldr	r3, [pc, #24]	@ (800df70 <fixInBuffer+0x30>)
 800df56:	701c      	strb	r4, [r3, #0]
  getBits2(8);
 800df58:	4620      	mov	r0, r4
 800df5a:	f7ff fcce 	bl	800d8fa <getBits2>
  getBits2(8);
 800df5e:	4620      	mov	r0, r4
 800df60:	f7ff fccb 	bl	800d8fa <getBits2>
}
 800df64:	bd10      	pop	{r4, pc}
    stuffChar((uint8)gBitBuf);
 800df66:	4b03      	ldr	r3, [pc, #12]	@ (800df74 <fixInBuffer+0x34>)
 800df68:	7818      	ldrb	r0, [r3, #0]
 800df6a:	f7ff fc3b 	bl	800d7e4 <stuffChar>
 800df6e:	e7eb      	b.n	800df48 <fixInBuffer+0x8>
 800df70:	2000c3a4 	.word	0x2000c3a4
 800df74:	2000c3a6 	.word	0x2000c3a6

0800df78 <processRestart>:

static uint8 processRestart(void) {
 800df78:	b538      	push	{r3, r4, r5, lr}

  uint16 i;
  uint8 c = 0;

  for (i = 1536; i > 0; i--)
 800df7a:	f44f 64c0 	mov.w	r4, #1536	@ 0x600
 800df7e:	b134      	cbz	r4, 800df8e <processRestart+0x16>
    if (getChar() == 0xFF)
 800df80:	f7ff fc08 	bl	800d794 <getChar>
 800df84:	28ff      	cmp	r0, #255	@ 0xff
 800df86:	d002      	beq.n	800df8e <processRestart+0x16>
  for (i = 1536; i > 0; i--)
 800df88:	3c01      	subs	r4, #1
 800df8a:	b2a4      	uxth	r4, r4
 800df8c:	e7f7      	b.n	800df7e <processRestart+0x6>
      break;

  if (i == 0)
 800df8e:	b354      	cbz	r4, 800dfe6 <processRestart+0x6e>
  uint8 c = 0;
 800df90:	2000      	movs	r0, #0
    return PJPG_BAD_RESTART_MARKER;

  for (; i > 0; i--)
 800df92:	b134      	cbz	r4, 800dfa2 <processRestart+0x2a>
    if ((c = getChar()) != 0xFF)
 800df94:	f7ff fbfe 	bl	800d794 <getChar>
 800df98:	28ff      	cmp	r0, #255	@ 0xff
 800df9a:	d102      	bne.n	800dfa2 <processRestart+0x2a>
  for (; i > 0; i--)
 800df9c:	3c01      	subs	r4, #1
 800df9e:	b2a4      	uxth	r4, r4
 800dfa0:	e7f7      	b.n	800df92 <processRestart+0x1a>
      break;

  if (i == 0)
 800dfa2:	b314      	cbz	r4, 800dfea <processRestart+0x72>
    return PJPG_BAD_RESTART_MARKER;

  if (c != (gNextRestartNum + M_RST0))
 800dfa4:	4b12      	ldr	r3, [pc, #72]	@ (800dff0 <processRestart+0x78>)
 800dfa6:	881b      	ldrh	r3, [r3, #0]
 800dfa8:	f103 02d0 	add.w	r2, r3, #208	@ 0xd0
 800dfac:	4290      	cmp	r0, r2
 800dfae:	d001      	beq.n	800dfb4 <processRestart+0x3c>
    return PJPG_BAD_RESTART_MARKER;
 800dfb0:	201d      	movs	r0, #29
  gBitsLeft = 8;
  getBits2(8);
  getBits2(8);

  return 0;
}
 800dfb2:	bd38      	pop	{r3, r4, r5, pc}
  gLastDC[0] = 0;
 800dfb4:	4a0f      	ldr	r2, [pc, #60]	@ (800dff4 <processRestart+0x7c>)
 800dfb6:	2400      	movs	r4, #0
 800dfb8:	8014      	strh	r4, [r2, #0]
  gLastDC[1] = 0;
 800dfba:	8054      	strh	r4, [r2, #2]
  gLastDC[2] = 0;
 800dfbc:	8094      	strh	r4, [r2, #4]
  gRestartsLeft = gRestartInterval;
 800dfbe:	4a0e      	ldr	r2, [pc, #56]	@ (800dff8 <processRestart+0x80>)
 800dfc0:	8811      	ldrh	r1, [r2, #0]
 800dfc2:	4a0e      	ldr	r2, [pc, #56]	@ (800dffc <processRestart+0x84>)
 800dfc4:	8011      	strh	r1, [r2, #0]
  gNextRestartNum = (gNextRestartNum + 1) & 7;
 800dfc6:	3301      	adds	r3, #1
 800dfc8:	f003 0307 	and.w	r3, r3, #7
 800dfcc:	4a08      	ldr	r2, [pc, #32]	@ (800dff0 <processRestart+0x78>)
 800dfce:	8013      	strh	r3, [r2, #0]
  gBitsLeft = 8;
 800dfd0:	2508      	movs	r5, #8
 800dfd2:	4b0b      	ldr	r3, [pc, #44]	@ (800e000 <processRestart+0x88>)
 800dfd4:	701d      	strb	r5, [r3, #0]
  getBits2(8);
 800dfd6:	4628      	mov	r0, r5
 800dfd8:	f7ff fc8f 	bl	800d8fa <getBits2>
  getBits2(8);
 800dfdc:	4628      	mov	r0, r5
 800dfde:	f7ff fc8c 	bl	800d8fa <getBits2>
  return 0;
 800dfe2:	4620      	mov	r0, r4
 800dfe4:	e7e5      	b.n	800dfb2 <processRestart+0x3a>
    return PJPG_BAD_RESTART_MARKER;
 800dfe6:	201d      	movs	r0, #29
 800dfe8:	e7e3      	b.n	800dfb2 <processRestart+0x3a>
    return PJPG_BAD_RESTART_MARKER;
 800dfea:	201d      	movs	r0, #29
 800dfec:	e7e1      	b.n	800dfb2 <processRestart+0x3a>
 800dfee:	bf00      	nop
 800dff0:	2000c38a 	.word	0x2000c38a
 800dff4:	2000c810 	.word	0x2000c810
 800dff8:	2000c38c 	.word	0x2000c38c
 800dffc:	2000c388 	.word	0x2000c388
 800e000:	2000c3a4 	.word	0x2000c3a4

0800e004 <checkHuffTables>:
}

static uint8 checkHuffTables(void) {
  uint8 i;

  for (i = 0; i < gCompsInScan; i++) {
 800e004:	2200      	movs	r2, #0
 800e006:	e001      	b.n	800e00c <checkHuffTables+0x8>
 800e008:	3201      	adds	r2, #1
 800e00a:	b2d2      	uxtb	r2, r2
 800e00c:	4b0e      	ldr	r3, [pc, #56]	@ (800e048 <checkHuffTables+0x44>)
 800e00e:	781b      	ldrb	r3, [r3, #0]
 800e010:	4293      	cmp	r3, r2
 800e012:	d914      	bls.n	800e03e <checkHuffTables+0x3a>
    uint8 compDCTab = gCompDCTab[gCompList[i]];
 800e014:	4b0d      	ldr	r3, [pc, #52]	@ (800e04c <checkHuffTables+0x48>)
 800e016:	5c9b      	ldrb	r3, [r3, r2]
 800e018:	490d      	ldr	r1, [pc, #52]	@ (800e050 <checkHuffTables+0x4c>)
 800e01a:	5cc8      	ldrb	r0, [r1, r3]
    uint8 compACTab = gCompACTab[gCompList[i]] + 2;
 800e01c:	490d      	ldr	r1, [pc, #52]	@ (800e054 <checkHuffTables+0x50>)
 800e01e:	5ccb      	ldrb	r3, [r1, r3]
 800e020:	3302      	adds	r3, #2
 800e022:	b2db      	uxtb	r3, r3

    if (((gValidHuffTables & (1 << compDCTab)) == 0) ||
 800e024:	490c      	ldr	r1, [pc, #48]	@ (800e058 <checkHuffTables+0x54>)
 800e026:	7809      	ldrb	r1, [r1, #0]
 800e028:	fa41 f000 	asr.w	r0, r1, r0
 800e02c:	f010 0f01 	tst.w	r0, #1
 800e030:	d007      	beq.n	800e042 <checkHuffTables+0x3e>
        ((gValidHuffTables & (1 << compACTab)) == 0))
 800e032:	4119      	asrs	r1, r3
    if (((gValidHuffTables & (1 << compDCTab)) == 0) ||
 800e034:	f011 0f01 	tst.w	r1, #1
 800e038:	d1e6      	bne.n	800e008 <checkHuffTables+0x4>
      return PJPG_UNDEFINED_HUFF_TABLE;
 800e03a:	2018      	movs	r0, #24
  }

  return 0;
}
 800e03c:	4770      	bx	lr
  return 0;
 800e03e:	2000      	movs	r0, #0
 800e040:	4770      	bx	lr
      return PJPG_UNDEFINED_HUFF_TABLE;
 800e042:	2018      	movs	r0, #24
 800e044:	4770      	bx	lr
 800e046:	bf00      	nop
 800e048:	2000c387 	.word	0x2000c387
 800e04c:	2000c384 	.word	0x2000c384
 800e050:	2000c380 	.word	0x2000c380
 800e054:	2000c37c 	.word	0x2000c37c
 800e058:	2000c4ae 	.word	0x2000c4ae

0800e05c <checkQuantTables>:

static uint8 checkQuantTables(void) {
  uint8 i;

  for (i = 0; i < gCompsInScan; i++) {
 800e05c:	2300      	movs	r3, #0
 800e05e:	e006      	b.n	800e06e <checkQuantTables+0x12>
    uint8 compQuantMask = gCompQuant[gCompList[i]] ? 2 : 1;
 800e060:	2101      	movs	r1, #1

    if ((gValidQuantTables & compQuantMask) == 0)
 800e062:	4a0b      	ldr	r2, [pc, #44]	@ (800e090 <checkQuantTables+0x34>)
 800e064:	7812      	ldrb	r2, [r2, #0]
 800e066:	4211      	tst	r1, r2
 800e068:	d00f      	beq.n	800e08a <checkQuantTables+0x2e>
  for (i = 0; i < gCompsInScan; i++) {
 800e06a:	3301      	adds	r3, #1
 800e06c:	b2db      	uxtb	r3, r3
 800e06e:	4a09      	ldr	r2, [pc, #36]	@ (800e094 <checkQuantTables+0x38>)
 800e070:	7812      	ldrb	r2, [r2, #0]
 800e072:	429a      	cmp	r2, r3
 800e074:	d907      	bls.n	800e086 <checkQuantTables+0x2a>
    uint8 compQuantMask = gCompQuant[gCompList[i]] ? 2 : 1;
 800e076:	4a08      	ldr	r2, [pc, #32]	@ (800e098 <checkQuantTables+0x3c>)
 800e078:	5cd2      	ldrb	r2, [r2, r3]
 800e07a:	4908      	ldr	r1, [pc, #32]	@ (800e09c <checkQuantTables+0x40>)
 800e07c:	5c8a      	ldrb	r2, [r1, r2]
 800e07e:	2a00      	cmp	r2, #0
 800e080:	d0ee      	beq.n	800e060 <checkQuantTables+0x4>
 800e082:	2102      	movs	r1, #2
 800e084:	e7ed      	b.n	800e062 <checkQuantTables+0x6>
      return PJPG_UNDEFINED_QUANT_TABLE;
  }

  return 0;
 800e086:	2000      	movs	r0, #0
 800e088:	4770      	bx	lr
      return PJPG_UNDEFINED_QUANT_TABLE;
 800e08a:	2017      	movs	r0, #23
}
 800e08c:	4770      	bx	lr
 800e08e:	bf00      	nop
 800e090:	2000c4ad 	.word	0x2000c4ad
 800e094:	2000c387 	.word	0x2000c387
 800e098:	2000c384 	.word	0x2000c384
 800e09c:	2000c390 	.word	0x2000c390

0800e0a0 <initFrame>:

  return 0;
}

static uint8 initFrame(void) {
  if (gCompsInFrame == 1) {
 800e0a0:	4b69      	ldr	r3, [pc, #420]	@ (800e248 <initFrame+0x1a8>)
 800e0a2:	781b      	ldrb	r3, [r3, #0]
 800e0a4:	2b01      	cmp	r3, #1
 800e0a6:	d03d      	beq.n	800e124 <initFrame+0x84>
    gMaxBlocksPerMCU = 1;
    gMCUOrg[0] = 0;

    gMaxMCUXSize = 8;
    gMaxMCUYSize = 8;
  } else if (gCompsInFrame == 3) {
 800e0a8:	2b03      	cmp	r3, #3
 800e0aa:	f040 80bf 	bne.w	800e22c <initFrame+0x18c>
    if (((gCompHSamp[1] != 1) || (gCompVSamp[1] != 1)) ||
 800e0ae:	4b67      	ldr	r3, [pc, #412]	@ (800e24c <initFrame+0x1ac>)
 800e0b0:	785b      	ldrb	r3, [r3, #1]
 800e0b2:	2b01      	cmp	r3, #1
 800e0b4:	f040 80bc 	bne.w	800e230 <initFrame+0x190>
 800e0b8:	4b65      	ldr	r3, [pc, #404]	@ (800e250 <initFrame+0x1b0>)
 800e0ba:	785b      	ldrb	r3, [r3, #1]
 800e0bc:	2b01      	cmp	r3, #1
 800e0be:	f040 80b9 	bne.w	800e234 <initFrame+0x194>
        ((gCompHSamp[2] != 1) || (gCompVSamp[2] != 1)))
 800e0c2:	4b62      	ldr	r3, [pc, #392]	@ (800e24c <initFrame+0x1ac>)
 800e0c4:	789b      	ldrb	r3, [r3, #2]
    if (((gCompHSamp[1] != 1) || (gCompVSamp[1] != 1)) ||
 800e0c6:	2b01      	cmp	r3, #1
 800e0c8:	f040 80b6 	bne.w	800e238 <initFrame+0x198>
        ((gCompHSamp[2] != 1) || (gCompVSamp[2] != 1)))
 800e0cc:	4b60      	ldr	r3, [pc, #384]	@ (800e250 <initFrame+0x1b0>)
 800e0ce:	789b      	ldrb	r3, [r3, #2]
 800e0d0:	2b01      	cmp	r3, #1
 800e0d2:	f040 80b3 	bne.w	800e23c <initFrame+0x19c>
      return PJPG_UNSUPPORTED_SAMP_FACTORS;

    if ((gCompHSamp[0] == 1) && (gCompVSamp[0] == 1)) {
 800e0d6:	4b5d      	ldr	r3, [pc, #372]	@ (800e24c <initFrame+0x1ac>)
 800e0d8:	781b      	ldrb	r3, [r3, #0]
 800e0da:	2b01      	cmp	r3, #1
 800e0dc:	d057      	beq.n	800e18e <initFrame+0xee>
      gMCUOrg[1] = 1;
      gMCUOrg[2] = 2;

      gMaxMCUXSize = 8;
      gMaxMCUYSize = 8;
    } else if ((gCompHSamp[0] == 1) && (gCompVSamp[0] == 2)) {
 800e0de:	2b01      	cmp	r3, #1
 800e0e0:	d06a      	beq.n	800e1b8 <initFrame+0x118>
      gMCUOrg[2] = 1;
      gMCUOrg[3] = 2;

      gMaxMCUXSize = 8;
      gMaxMCUYSize = 16;
    } else if ((gCompHSamp[0] == 2) && (gCompVSamp[0] == 1)) {
 800e0e2:	2b02      	cmp	r3, #2
 800e0e4:	f000 8081 	beq.w	800e1ea <initFrame+0x14a>
      gMCUOrg[2] = 1;
      gMCUOrg[3] = 2;

      gMaxMCUXSize = 16;
      gMaxMCUYSize = 8;
    } else if ((gCompHSamp[0] == 2) && (gCompVSamp[0] == 2)) {
 800e0e8:	2b02      	cmp	r3, #2
 800e0ea:	f040 80a9 	bne.w	800e240 <initFrame+0x1a0>
 800e0ee:	4b58      	ldr	r3, [pc, #352]	@ (800e250 <initFrame+0x1b0>)
 800e0f0:	781b      	ldrb	r3, [r3, #0]
 800e0f2:	2b02      	cmp	r3, #2
 800e0f4:	f040 80a6 	bne.w	800e244 <initFrame+0x1a4>
      gScanType = PJPG_YH2V2;
 800e0f8:	4b56      	ldr	r3, [pc, #344]	@ (800e254 <initFrame+0x1b4>)
 800e0fa:	2204      	movs	r2, #4
 800e0fc:	701a      	strb	r2, [r3, #0]

      gMaxBlocksPerMCU = 6;
 800e0fe:	4b56      	ldr	r3, [pc, #344]	@ (800e258 <initFrame+0x1b8>)
 800e100:	2206      	movs	r2, #6
 800e102:	701a      	strb	r2, [r3, #0]
      gMCUOrg[0] = 0;
 800e104:	4b55      	ldr	r3, [pc, #340]	@ (800e25c <initFrame+0x1bc>)
 800e106:	2200      	movs	r2, #0
 800e108:	701a      	strb	r2, [r3, #0]
      gMCUOrg[1] = 0;
 800e10a:	705a      	strb	r2, [r3, #1]
      gMCUOrg[2] = 0;
 800e10c:	709a      	strb	r2, [r3, #2]
      gMCUOrg[3] = 0;
 800e10e:	70da      	strb	r2, [r3, #3]
      gMCUOrg[4] = 1;
 800e110:	2201      	movs	r2, #1
 800e112:	711a      	strb	r2, [r3, #4]
      gMCUOrg[5] = 2;
 800e114:	2202      	movs	r2, #2
 800e116:	715a      	strb	r2, [r3, #5]

      gMaxMCUXSize = 16;
 800e118:	2310      	movs	r3, #16
 800e11a:	4a51      	ldr	r2, [pc, #324]	@ (800e260 <initFrame+0x1c0>)
 800e11c:	7013      	strb	r3, [r2, #0]
      gMaxMCUYSize = 16;
 800e11e:	4a51      	ldr	r2, [pc, #324]	@ (800e264 <initFrame+0x1c4>)
 800e120:	7013      	strb	r3, [r2, #0]
 800e122:	e014      	b.n	800e14e <initFrame+0xae>
    if ((gCompHSamp[0] != 1) || (gCompVSamp[0] != 1))
 800e124:	4b49      	ldr	r3, [pc, #292]	@ (800e24c <initFrame+0x1ac>)
 800e126:	781b      	ldrb	r3, [r3, #0]
 800e128:	2b01      	cmp	r3, #1
 800e12a:	d17b      	bne.n	800e224 <initFrame+0x184>
 800e12c:	4b48      	ldr	r3, [pc, #288]	@ (800e250 <initFrame+0x1b0>)
 800e12e:	781b      	ldrb	r3, [r3, #0]
 800e130:	2b01      	cmp	r3, #1
 800e132:	d179      	bne.n	800e228 <initFrame+0x188>
    gScanType = PJPG_GRAYSCALE;
 800e134:	2300      	movs	r3, #0
 800e136:	4a47      	ldr	r2, [pc, #284]	@ (800e254 <initFrame+0x1b4>)
 800e138:	7013      	strb	r3, [r2, #0]
    gMaxBlocksPerMCU = 1;
 800e13a:	4a47      	ldr	r2, [pc, #284]	@ (800e258 <initFrame+0x1b8>)
 800e13c:	2101      	movs	r1, #1
 800e13e:	7011      	strb	r1, [r2, #0]
    gMCUOrg[0] = 0;
 800e140:	4a46      	ldr	r2, [pc, #280]	@ (800e25c <initFrame+0x1bc>)
 800e142:	7013      	strb	r3, [r2, #0]
    gMaxMCUXSize = 8;
 800e144:	2308      	movs	r3, #8
 800e146:	4a46      	ldr	r2, [pc, #280]	@ (800e260 <initFrame+0x1c0>)
 800e148:	7013      	strb	r3, [r2, #0]
    gMaxMCUYSize = 8;
 800e14a:	4a46      	ldr	r2, [pc, #280]	@ (800e264 <initFrame+0x1c4>)
 800e14c:	7013      	strb	r3, [r2, #0]
      return PJPG_UNSUPPORTED_SAMP_FACTORS;
  } else
    return PJPG_UNSUPPORTED_COLORSPACE;

  gMaxMCUSPerRow =
      (gImageXSize + (gMaxMCUXSize - 1)) >> ((gMaxMCUXSize == 8) ? 3 : 4);
 800e14e:	4b44      	ldr	r3, [pc, #272]	@ (800e260 <initFrame+0x1c0>)
 800e150:	781a      	ldrb	r2, [r3, #0]
 800e152:	1e51      	subs	r1, r2, #1
 800e154:	4b44      	ldr	r3, [pc, #272]	@ (800e268 <initFrame+0x1c8>)
 800e156:	881b      	ldrh	r3, [r3, #0]
 800e158:	440b      	add	r3, r1
 800e15a:	2a08      	cmp	r2, #8
 800e15c:	d05e      	beq.n	800e21c <initFrame+0x17c>
 800e15e:	2204      	movs	r2, #4
 800e160:	4113      	asrs	r3, r2
  gMaxMCUSPerRow =
 800e162:	b29b      	uxth	r3, r3
 800e164:	4a41      	ldr	r2, [pc, #260]	@ (800e26c <initFrame+0x1cc>)
 800e166:	8013      	strh	r3, [r2, #0]
  gMaxMCUSPerCol =
      (gImageYSize + (gMaxMCUYSize - 1)) >> ((gMaxMCUYSize == 8) ? 3 : 4);
 800e168:	4a3e      	ldr	r2, [pc, #248]	@ (800e264 <initFrame+0x1c4>)
 800e16a:	7811      	ldrb	r1, [r2, #0]
 800e16c:	1e48      	subs	r0, r1, #1
 800e16e:	4a40      	ldr	r2, [pc, #256]	@ (800e270 <initFrame+0x1d0>)
 800e170:	8812      	ldrh	r2, [r2, #0]
 800e172:	4402      	add	r2, r0
 800e174:	2908      	cmp	r1, #8
 800e176:	d053      	beq.n	800e220 <initFrame+0x180>
 800e178:	2104      	movs	r1, #4
 800e17a:	410a      	asrs	r2, r1
  gMaxMCUSPerCol =
 800e17c:	b292      	uxth	r2, r2
 800e17e:	493d      	ldr	r1, [pc, #244]	@ (800e274 <initFrame+0x1d4>)
 800e180:	800a      	strh	r2, [r1, #0]

  gNumMCUSRemaining = gMaxMCUSPerRow * gMaxMCUSPerCol;
 800e182:	fb13 f302 	smulbb	r3, r3, r2
 800e186:	4a3c      	ldr	r2, [pc, #240]	@ (800e278 <initFrame+0x1d8>)
 800e188:	8013      	strh	r3, [r2, #0]

  return 0;
 800e18a:	2000      	movs	r0, #0
 800e18c:	4770      	bx	lr
    if ((gCompHSamp[0] == 1) && (gCompVSamp[0] == 1)) {
 800e18e:	4a30      	ldr	r2, [pc, #192]	@ (800e250 <initFrame+0x1b0>)
 800e190:	7812      	ldrb	r2, [r2, #0]
 800e192:	2a01      	cmp	r2, #1
 800e194:	d1a3      	bne.n	800e0de <initFrame+0x3e>
      gScanType = PJPG_YH1V1;
 800e196:	4b2f      	ldr	r3, [pc, #188]	@ (800e254 <initFrame+0x1b4>)
 800e198:	701a      	strb	r2, [r3, #0]
      gMaxBlocksPerMCU = 3;
 800e19a:	4b2f      	ldr	r3, [pc, #188]	@ (800e258 <initFrame+0x1b8>)
 800e19c:	2103      	movs	r1, #3
 800e19e:	7019      	strb	r1, [r3, #0]
      gMCUOrg[0] = 0;
 800e1a0:	4b2e      	ldr	r3, [pc, #184]	@ (800e25c <initFrame+0x1bc>)
 800e1a2:	2100      	movs	r1, #0
 800e1a4:	7019      	strb	r1, [r3, #0]
      gMCUOrg[1] = 1;
 800e1a6:	705a      	strb	r2, [r3, #1]
      gMCUOrg[2] = 2;
 800e1a8:	2202      	movs	r2, #2
 800e1aa:	709a      	strb	r2, [r3, #2]
      gMaxMCUXSize = 8;
 800e1ac:	2308      	movs	r3, #8
 800e1ae:	4a2c      	ldr	r2, [pc, #176]	@ (800e260 <initFrame+0x1c0>)
 800e1b0:	7013      	strb	r3, [r2, #0]
      gMaxMCUYSize = 8;
 800e1b2:	4a2c      	ldr	r2, [pc, #176]	@ (800e264 <initFrame+0x1c4>)
 800e1b4:	7013      	strb	r3, [r2, #0]
 800e1b6:	e7ca      	b.n	800e14e <initFrame+0xae>
    } else if ((gCompHSamp[0] == 1) && (gCompVSamp[0] == 2)) {
 800e1b8:	4a25      	ldr	r2, [pc, #148]	@ (800e250 <initFrame+0x1b0>)
 800e1ba:	7812      	ldrb	r2, [r2, #0]
 800e1bc:	2a02      	cmp	r2, #2
 800e1be:	d190      	bne.n	800e0e2 <initFrame+0x42>
      gScanType = PJPG_YH1V2;
 800e1c0:	4b24      	ldr	r3, [pc, #144]	@ (800e254 <initFrame+0x1b4>)
 800e1c2:	2203      	movs	r2, #3
 800e1c4:	701a      	strb	r2, [r3, #0]
      gMaxBlocksPerMCU = 4;
 800e1c6:	4b24      	ldr	r3, [pc, #144]	@ (800e258 <initFrame+0x1b8>)
 800e1c8:	2204      	movs	r2, #4
 800e1ca:	701a      	strb	r2, [r3, #0]
      gMCUOrg[0] = 0;
 800e1cc:	4b23      	ldr	r3, [pc, #140]	@ (800e25c <initFrame+0x1bc>)
 800e1ce:	2200      	movs	r2, #0
 800e1d0:	701a      	strb	r2, [r3, #0]
      gMCUOrg[1] = 0;
 800e1d2:	705a      	strb	r2, [r3, #1]
      gMCUOrg[2] = 1;
 800e1d4:	2201      	movs	r2, #1
 800e1d6:	709a      	strb	r2, [r3, #2]
      gMCUOrg[3] = 2;
 800e1d8:	2202      	movs	r2, #2
 800e1da:	70da      	strb	r2, [r3, #3]
      gMaxMCUXSize = 8;
 800e1dc:	4b20      	ldr	r3, [pc, #128]	@ (800e260 <initFrame+0x1c0>)
 800e1de:	2208      	movs	r2, #8
 800e1e0:	701a      	strb	r2, [r3, #0]
      gMaxMCUYSize = 16;
 800e1e2:	4b20      	ldr	r3, [pc, #128]	@ (800e264 <initFrame+0x1c4>)
 800e1e4:	2210      	movs	r2, #16
 800e1e6:	701a      	strb	r2, [r3, #0]
 800e1e8:	e7b1      	b.n	800e14e <initFrame+0xae>
    } else if ((gCompHSamp[0] == 2) && (gCompVSamp[0] == 1)) {
 800e1ea:	4a19      	ldr	r2, [pc, #100]	@ (800e250 <initFrame+0x1b0>)
 800e1ec:	7812      	ldrb	r2, [r2, #0]
 800e1ee:	2a01      	cmp	r2, #1
 800e1f0:	f47f af7a 	bne.w	800e0e8 <initFrame+0x48>
      gScanType = PJPG_YH2V1;
 800e1f4:	2202      	movs	r2, #2
 800e1f6:	4b17      	ldr	r3, [pc, #92]	@ (800e254 <initFrame+0x1b4>)
 800e1f8:	701a      	strb	r2, [r3, #0]
      gMaxBlocksPerMCU = 4;
 800e1fa:	4b17      	ldr	r3, [pc, #92]	@ (800e258 <initFrame+0x1b8>)
 800e1fc:	2104      	movs	r1, #4
 800e1fe:	7019      	strb	r1, [r3, #0]
      gMCUOrg[0] = 0;
 800e200:	4b16      	ldr	r3, [pc, #88]	@ (800e25c <initFrame+0x1bc>)
 800e202:	2100      	movs	r1, #0
 800e204:	7019      	strb	r1, [r3, #0]
      gMCUOrg[1] = 0;
 800e206:	7059      	strb	r1, [r3, #1]
      gMCUOrg[2] = 1;
 800e208:	2101      	movs	r1, #1
 800e20a:	7099      	strb	r1, [r3, #2]
      gMCUOrg[3] = 2;
 800e20c:	70da      	strb	r2, [r3, #3]
      gMaxMCUXSize = 16;
 800e20e:	4b14      	ldr	r3, [pc, #80]	@ (800e260 <initFrame+0x1c0>)
 800e210:	2210      	movs	r2, #16
 800e212:	701a      	strb	r2, [r3, #0]
      gMaxMCUYSize = 8;
 800e214:	4b13      	ldr	r3, [pc, #76]	@ (800e264 <initFrame+0x1c4>)
 800e216:	2208      	movs	r2, #8
 800e218:	701a      	strb	r2, [r3, #0]
 800e21a:	e798      	b.n	800e14e <initFrame+0xae>
      (gImageXSize + (gMaxMCUXSize - 1)) >> ((gMaxMCUXSize == 8) ? 3 : 4);
 800e21c:	2203      	movs	r2, #3
 800e21e:	e79f      	b.n	800e160 <initFrame+0xc0>
      (gImageYSize + (gMaxMCUYSize - 1)) >> ((gMaxMCUYSize == 8) ? 3 : 4);
 800e220:	2103      	movs	r1, #3
 800e222:	e7aa      	b.n	800e17a <initFrame+0xda>
      return PJPG_UNSUPPORTED_SAMP_FACTORS;
 800e224:	201b      	movs	r0, #27
 800e226:	4770      	bx	lr
 800e228:	201b      	movs	r0, #27
 800e22a:	4770      	bx	lr
    return PJPG_UNSUPPORTED_COLORSPACE;
 800e22c:	201a      	movs	r0, #26
 800e22e:	4770      	bx	lr
      return PJPG_UNSUPPORTED_SAMP_FACTORS;
 800e230:	201b      	movs	r0, #27
 800e232:	4770      	bx	lr
 800e234:	201b      	movs	r0, #27
 800e236:	4770      	bx	lr
 800e238:	201b      	movs	r0, #27
 800e23a:	4770      	bx	lr
 800e23c:	201b      	movs	r0, #27
 800e23e:	4770      	bx	lr
      return PJPG_UNSUPPORTED_SAMP_FACTORS;
 800e240:	201b      	movs	r0, #27
 800e242:	4770      	bx	lr
 800e244:	201b      	movs	r0, #27
}
 800e246:	4770      	bx	lr
 800e248:	2000c39f 	.word	0x2000c39f
 800e24c:	2000c398 	.word	0x2000c398
 800e250:	2000c394 	.word	0x2000c394
 800e254:	2000c37b 	.word	0x2000c37b
 800e258:	2000c37a 	.word	0x2000c37a
 800e25c:	2000c36c 	.word	0x2000c36c
 800e260:	2000c379 	.word	0x2000c379
 800e264:	2000c378 	.word	0x2000c378
 800e268:	2000c3a2 	.word	0x2000c3a2
 800e26c:	2000c376 	.word	0x2000c376
 800e270:	2000c3a0 	.word	0x2000c3a0
 800e274:	2000c374 	.word	0x2000c374
 800e278:	2000c372 	.word	0x2000c372

0800e27c <createWinogradQuant>:
};

static void createWinogradQuant(int16 *pQuant) {
  uint8 i;

  for (i = 0; i < 64; i++) {
 800e27c:	2300      	movs	r3, #0
 800e27e:	e00c      	b.n	800e29a <createWinogradQuant+0x1e>
    long x = pQuant[i];
 800e280:	f930 1013 	ldrsh.w	r1, [r0, r3, lsl #1]
    x *= gWinogradQuant[i];
 800e284:	4a06      	ldr	r2, [pc, #24]	@ (800e2a0 <createWinogradQuant+0x24>)
 800e286:	5cd2      	ldrb	r2, [r2, r3]
 800e288:	fb01 f202 	mul.w	r2, r1, r2
    pQuant[i] = (int16)((x + (1 << (PJPG_WINOGRAD_QUANT_SCALE_BITS -
 800e28c:	3204      	adds	r2, #4
 800e28e:	f342 02cf 	sbfx	r2, r2, #3, #16
 800e292:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
  for (i = 0; i < 64; i++) {
 800e296:	3301      	adds	r3, #1
 800e298:	b2db      	uxtb	r3, r3
 800e29a:	2b3f      	cmp	r3, #63	@ 0x3f
 800e29c:	d9f0      	bls.n	800e280 <createWinogradQuant+0x4>
                                    PJPG_DCT_SCALE_BITS - 1))) >>
                        (PJPG_WINOGRAD_QUANT_SCALE_BITS - PJPG_DCT_SCALE_BITS));
  }
}
 800e29e:	4770      	bx	lr
 800e2a0:	0802db24 	.word	0x0802db24

0800e2a4 <readDQTMarker>:
static uint8 readDQTMarker(void) {
 800e2a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint16 left = getBits1(16);
 800e2a8:	2010      	movs	r0, #16
 800e2aa:	f7ff fb21 	bl	800d8f0 <getBits1>
  if (left < 2)
 800e2ae:	2801      	cmp	r0, #1
 800e2b0:	d947      	bls.n	800e342 <readDQTMarker+0x9e>
  left -= 2;
 800e2b2:	3802      	subs	r0, #2
 800e2b4:	fa1f f880 	uxth.w	r8, r0
  while (left) {
 800e2b8:	e027      	b.n	800e30a <readDQTMarker+0x66>
    gValidQuantTables |= (n ? 2 : 1);
 800e2ba:	2101      	movs	r1, #1
 800e2bc:	e035      	b.n	800e32a <readDQTMarker+0x86>
        temp = (temp << 8) + getBits1(8);
 800e2be:	0200      	lsls	r0, r0, #8
 800e2c0:	b284      	uxth	r4, r0
 800e2c2:	2008      	movs	r0, #8
 800e2c4:	f7ff fb14 	bl	800d8f0 <getBits1>
 800e2c8:	4420      	add	r0, r4
 800e2ca:	b280      	uxth	r0, r0
 800e2cc:	e00b      	b.n	800e2e6 <readDQTMarker+0x42>
        gQuant0[i] = (int16)temp;
 800e2ce:	4b20      	ldr	r3, [pc, #128]	@ (800e350 <readDQTMarker+0xac>)
 800e2d0:	f823 0015 	strh.w	r0, [r3, r5, lsl #1]
    for (i = 0; i < 64; i++) {
 800e2d4:	3501      	adds	r5, #1
 800e2d6:	b2ed      	uxtb	r5, r5
 800e2d8:	2d3f      	cmp	r5, #63	@ 0x3f
 800e2da:	d80a      	bhi.n	800e2f2 <readDQTMarker+0x4e>
      uint16 temp = getBits1(8);
 800e2dc:	2008      	movs	r0, #8
 800e2de:	f7ff fb07 	bl	800d8f0 <getBits1>
      if (prec)
 800e2e2:	2f00      	cmp	r7, #0
 800e2e4:	d1eb      	bne.n	800e2be <readDQTMarker+0x1a>
      if (n)
 800e2e6:	2e00      	cmp	r6, #0
 800e2e8:	d0f1      	beq.n	800e2ce <readDQTMarker+0x2a>
        gQuant1[i] = (int16)temp;
 800e2ea:	4b1a      	ldr	r3, [pc, #104]	@ (800e354 <readDQTMarker+0xb0>)
 800e2ec:	f823 0015 	strh.w	r0, [r3, r5, lsl #1]
 800e2f0:	e7f0      	b.n	800e2d4 <readDQTMarker+0x30>
    createWinogradQuant(n ? gQuant1 : gQuant0);
 800e2f2:	b1fe      	cbz	r6, 800e334 <readDQTMarker+0x90>
 800e2f4:	4817      	ldr	r0, [pc, #92]	@ (800e354 <readDQTMarker+0xb0>)
 800e2f6:	f7ff ffc1 	bl	800e27c <createWinogradQuant>
    if (prec)
 800e2fa:	b9ef      	cbnz	r7, 800e338 <readDQTMarker+0x94>
    totalRead = 64 + 1;
 800e2fc:	2341      	movs	r3, #65	@ 0x41
    if (left < totalRead)
 800e2fe:	4598      	cmp	r8, r3
 800e300:	d323      	bcc.n	800e34a <readDQTMarker+0xa6>
    left = (uint16)(left - totalRead);
 800e302:	eba8 0303 	sub.w	r3, r8, r3
 800e306:	fa1f f883 	uxth.w	r8, r3
  while (left) {
 800e30a:	f1b8 0f00 	cmp.w	r8, #0
 800e30e:	d015      	beq.n	800e33c <readDQTMarker+0x98>
    uint8 n = (uint8)getBits1(8);
 800e310:	2008      	movs	r0, #8
 800e312:	f7ff faed 	bl	800d8f0 <getBits1>
    uint8 prec = n >> 4;
 800e316:	f3c0 1703 	ubfx	r7, r0, #4, #4
    n &= 0x0F;
 800e31a:	f000 060f 	and.w	r6, r0, #15
    if (n > 1)
 800e31e:	f010 050e 	ands.w	r5, r0, #14
 800e322:	d110      	bne.n	800e346 <readDQTMarker+0xa2>
    gValidQuantTables |= (n ? 2 : 1);
 800e324:	2e00      	cmp	r6, #0
 800e326:	d0c8      	beq.n	800e2ba <readDQTMarker+0x16>
 800e328:	2102      	movs	r1, #2
 800e32a:	4a0b      	ldr	r2, [pc, #44]	@ (800e358 <readDQTMarker+0xb4>)
 800e32c:	7813      	ldrb	r3, [r2, #0]
 800e32e:	430b      	orrs	r3, r1
 800e330:	7013      	strb	r3, [r2, #0]
    for (i = 0; i < 64; i++) {
 800e332:	e7d1      	b.n	800e2d8 <readDQTMarker+0x34>
    createWinogradQuant(n ? gQuant1 : gQuant0);
 800e334:	4806      	ldr	r0, [pc, #24]	@ (800e350 <readDQTMarker+0xac>)
 800e336:	e7de      	b.n	800e2f6 <readDQTMarker+0x52>
      totalRead += 64;
 800e338:	2381      	movs	r3, #129	@ 0x81
 800e33a:	e7e0      	b.n	800e2fe <readDQTMarker+0x5a>
  return 0;
 800e33c:	2000      	movs	r0, #0
}
 800e33e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return PJPG_BAD_DQT_MARKER;
 800e342:	2005      	movs	r0, #5
 800e344:	e7fb      	b.n	800e33e <readDQTMarker+0x9a>
      return PJPG_BAD_DQT_TABLE;
 800e346:	2006      	movs	r0, #6
 800e348:	e7f9      	b.n	800e33e <readDQTMarker+0x9a>
      return PJPG_BAD_DQT_LENGTH;
 800e34a:	2015      	movs	r0, #21
 800e34c:	e7f7      	b.n	800e33e <readDQTMarker+0x9a>
 800e34e:	bf00      	nop
 800e350:	2000c898 	.word	0x2000c898
 800e354:	2000c818 	.word	0x2000c818
 800e358:	2000c4ad 	.word	0x2000c4ad

0800e35c <processMarkers>:
static uint8 processMarkers(uint8 *pMarker) {
 800e35c:	b510      	push	{r4, lr}
 800e35e:	4604      	mov	r4, r0
    uint8 c = nextMarker();
 800e360:	f7ff fd70 	bl	800de44 <nextMarker>
    switch (c) {
 800e364:	28d7      	cmp	r0, #215	@ 0xd7
 800e366:	d821      	bhi.n	800e3ac <processMarkers+0x50>
 800e368:	28c5      	cmp	r0, #197	@ 0xc5
 800e36a:	d20e      	bcs.n	800e38a <processMarkers+0x2e>
 800e36c:	28c4      	cmp	r0, #196	@ 0xc4
 800e36e:	d02d      	beq.n	800e3cc <processMarkers+0x70>
 800e370:	d829      	bhi.n	800e3c6 <processMarkers+0x6a>
 800e372:	2801      	cmp	r0, #1
 800e374:	d030      	beq.n	800e3d8 <processMarkers+0x7c>
 800e376:	b243      	sxtb	r3, r0
 800e378:	b32b      	cbz	r3, 800e3c6 <processMarkers+0x6a>
 800e37a:	f100 0340 	add.w	r3, r0, #64	@ 0x40
 800e37e:	b2db      	uxtb	r3, r3
 800e380:	2b03      	cmp	r3, #3
 800e382:	d820      	bhi.n	800e3c6 <processMarkers+0x6a>
      *pMarker = c;
 800e384:	7020      	strb	r0, [r4, #0]
      return 0;
 800e386:	2000      	movs	r0, #0
 800e388:	e029      	b.n	800e3de <processMarkers+0x82>
    switch (c) {
 800e38a:	f100 023b 	add.w	r2, r0, #59	@ 0x3b
 800e38e:	b2d2      	uxtb	r2, r2
 800e390:	2301      	movs	r3, #1
 800e392:	4093      	lsls	r3, r2
 800e394:	4a12      	ldr	r2, [pc, #72]	@ (800e3e0 <processMarkers+0x84>)
 800e396:	4213      	tst	r3, r2
 800e398:	d120      	bne.n	800e3dc <processMarkers+0x80>
 800e39a:	f240 7277 	movw	r2, #1911	@ 0x777
 800e39e:	4213      	tst	r3, r2
 800e3a0:	d1f0      	bne.n	800e384 <processMarkers+0x28>
 800e3a2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800e3a6:	d00e      	beq.n	800e3c6 <processMarkers+0x6a>
 800e3a8:	2011      	movs	r0, #17
 800e3aa:	e018      	b.n	800e3de <processMarkers+0x82>
 800e3ac:	28db      	cmp	r0, #219	@ 0xdb
 800e3ae:	d010      	beq.n	800e3d2 <processMarkers+0x76>
 800e3b0:	d904      	bls.n	800e3bc <processMarkers+0x60>
 800e3b2:	28dd      	cmp	r0, #221	@ 0xdd
 800e3b4:	d107      	bne.n	800e3c6 <processMarkers+0x6a>
      readDRIMarker();
 800e3b6:	f7ff fcc9 	bl	800dd4c <readDRIMarker>
      break;
 800e3ba:	e7d1      	b.n	800e360 <processMarkers+0x4>
    switch (c) {
 800e3bc:	f100 0328 	add.w	r3, r0, #40	@ 0x28
 800e3c0:	b2db      	uxtb	r3, r3
 800e3c2:	2b02      	cmp	r3, #2
 800e3c4:	d9de      	bls.n	800e384 <processMarkers+0x28>
      skipVariableMarker();
 800e3c6:	f7ff fcad 	bl	800dd24 <skipVariableMarker>
      break;
 800e3ca:	e7c9      	b.n	800e360 <processMarkers+0x4>
      readDHTMarker();
 800e3cc:	f7ff fbd6 	bl	800db7c <readDHTMarker>
      break;
 800e3d0:	e7c6      	b.n	800e360 <processMarkers+0x4>
      readDQTMarker();
 800e3d2:	f7ff ff67 	bl	800e2a4 <readDQTMarker>
      break;
 800e3d6:	e7c3      	b.n	800e360 <processMarkers+0x4>
      return PJPG_UNEXPECTED_MARKER;
 800e3d8:	2012      	movs	r0, #18
 800e3da:	e000      	b.n	800e3de <processMarkers+0x82>
 800e3dc:	2012      	movs	r0, #18
}
 800e3de:	bd10      	pop	{r4, pc}
 800e3e0:	0007f808 	.word	0x0007f808

0800e3e4 <locateSOFMarker>:
static uint8 locateSOFMarker(void) {
 800e3e4:	b500      	push	{lr}
 800e3e6:	b083      	sub	sp, #12
  uint8 status = locateSOIMarker();
 800e3e8:	f7ff fd3c 	bl	800de64 <locateSOIMarker>
  if (status)
 800e3ec:	4603      	mov	r3, r0
 800e3ee:	b118      	cbz	r0, 800e3f8 <locateSOFMarker+0x14>
}
 800e3f0:	4618      	mov	r0, r3
 800e3f2:	b003      	add	sp, #12
 800e3f4:	f85d fb04 	ldr.w	pc, [sp], #4
  status = processMarkers(&c);
 800e3f8:	f10d 0007 	add.w	r0, sp, #7
 800e3fc:	f7ff ffae 	bl	800e35c <processMarkers>
  if (status)
 800e400:	4603      	mov	r3, r0
 800e402:	2800      	cmp	r0, #0
 800e404:	d1f4      	bne.n	800e3f0 <locateSOFMarker+0xc>
  switch (c) {
 800e406:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800e40a:	2bc2      	cmp	r3, #194	@ 0xc2
 800e40c:	d009      	beq.n	800e422 <locateSOFMarker+0x3e>
 800e40e:	2bc9      	cmp	r3, #201	@ 0xc9
 800e410:	d009      	beq.n	800e426 <locateSOFMarker+0x42>
 800e412:	2bc0      	cmp	r3, #192	@ 0xc0
 800e414:	d001      	beq.n	800e41a <locateSOFMarker+0x36>
    return PJPG_UNSUPPORTED_MARKER;
 800e416:	2314      	movs	r3, #20
 800e418:	e7ea      	b.n	800e3f0 <locateSOFMarker+0xc>
    status = readSOFMarker();
 800e41a:	f7ff fc1d 	bl	800dc58 <readSOFMarker>
 800e41e:	4603      	mov	r3, r0
    if (status)
 800e420:	e7e6      	b.n	800e3f0 <locateSOFMarker+0xc>
  switch (c) {
 800e422:	2325      	movs	r3, #37	@ 0x25
 800e424:	e7e4      	b.n	800e3f0 <locateSOFMarker+0xc>
    return PJPG_NO_ARITHMITIC_SUPPORT;
 800e426:	2311      	movs	r3, #17
 800e428:	e7e2      	b.n	800e3f0 <locateSOFMarker+0xc>

0800e42a <locateSOSMarker>:
static uint8 locateSOSMarker(uint8 *pFoundEOI) {
 800e42a:	b510      	push	{r4, lr}
 800e42c:	b082      	sub	sp, #8
 800e42e:	4604      	mov	r4, r0
  *pFoundEOI = 0;
 800e430:	2300      	movs	r3, #0
 800e432:	7003      	strb	r3, [r0, #0]
  status = processMarkers(&c);
 800e434:	f10d 0007 	add.w	r0, sp, #7
 800e438:	f7ff ff90 	bl	800e35c <processMarkers>
  if (status)
 800e43c:	b930      	cbnz	r0, 800e44c <locateSOSMarker+0x22>
  if (c == M_EOI) {
 800e43e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800e442:	2bd9      	cmp	r3, #217	@ 0xd9
 800e444:	d004      	beq.n	800e450 <locateSOSMarker+0x26>
  } else if (c != M_SOS)
 800e446:	2bda      	cmp	r3, #218	@ 0xda
 800e448:	d005      	beq.n	800e456 <locateSOSMarker+0x2c>
    return PJPG_UNEXPECTED_MARKER;
 800e44a:	2012      	movs	r0, #18
}
 800e44c:	b002      	add	sp, #8
 800e44e:	bd10      	pop	{r4, pc}
    *pFoundEOI = 1;
 800e450:	2301      	movs	r3, #1
 800e452:	7023      	strb	r3, [r4, #0]
    return 0;
 800e454:	e7fa      	b.n	800e44c <locateSOSMarker+0x22>
  return readSOSMarker();
 800e456:	f7ff fc8b 	bl	800dd70 <readSOSMarker>
 800e45a:	e7f7      	b.n	800e44c <locateSOSMarker+0x22>

0800e45c <initScan>:
static uint8 initScan(void) {
 800e45c:	b510      	push	{r4, lr}
 800e45e:	b082      	sub	sp, #8
  uint8 status = locateSOSMarker(&foundEOI);
 800e460:	f10d 0007 	add.w	r0, sp, #7
 800e464:	f7ff ffe1 	bl	800e42a <locateSOSMarker>
  if (status)
 800e468:	4604      	mov	r4, r0
 800e46a:	b9d8      	cbnz	r0, 800e4a4 <initScan+0x48>
  if (foundEOI)
 800e46c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800e470:	b9bb      	cbnz	r3, 800e4a2 <initScan+0x46>
  status = checkHuffTables();
 800e472:	f7ff fdc7 	bl	800e004 <checkHuffTables>
  if (status)
 800e476:	4604      	mov	r4, r0
 800e478:	b9a0      	cbnz	r0, 800e4a4 <initScan+0x48>
  status = checkQuantTables();
 800e47a:	f7ff fdef 	bl	800e05c <checkQuantTables>
  if (status)
 800e47e:	4604      	mov	r4, r0
 800e480:	b980      	cbnz	r0, 800e4a4 <initScan+0x48>
  gLastDC[0] = 0;
 800e482:	4b0a      	ldr	r3, [pc, #40]	@ (800e4ac <initScan+0x50>)
 800e484:	2200      	movs	r2, #0
 800e486:	801a      	strh	r2, [r3, #0]
  gLastDC[1] = 0;
 800e488:	805a      	strh	r2, [r3, #2]
  gLastDC[2] = 0;
 800e48a:	809a      	strh	r2, [r3, #4]
  if (gRestartInterval) {
 800e48c:	4b08      	ldr	r3, [pc, #32]	@ (800e4b0 <initScan+0x54>)
 800e48e:	881b      	ldrh	r3, [r3, #0]
 800e490:	b123      	cbz	r3, 800e49c <initScan+0x40>
    gRestartsLeft = gRestartInterval;
 800e492:	4a08      	ldr	r2, [pc, #32]	@ (800e4b4 <initScan+0x58>)
 800e494:	8013      	strh	r3, [r2, #0]
    gNextRestartNum = 0;
 800e496:	4b08      	ldr	r3, [pc, #32]	@ (800e4b8 <initScan+0x5c>)
 800e498:	2200      	movs	r2, #0
 800e49a:	801a      	strh	r2, [r3, #0]
  fixInBuffer();
 800e49c:	f7ff fd50 	bl	800df40 <fixInBuffer>
  return 0;
 800e4a0:	e000      	b.n	800e4a4 <initScan+0x48>
    return PJPG_UNEXPECTED_MARKER;
 800e4a2:	2412      	movs	r4, #18
}
 800e4a4:	4620      	mov	r0, r4
 800e4a6:	b002      	add	sp, #8
 800e4a8:	bd10      	pop	{r4, pc}
 800e4aa:	bf00      	nop
 800e4ac:	2000c810 	.word	0x2000c810
 800e4b0:	2000c38c 	.word	0x2000c38c
 800e4b4:	2000c388 	.word	0x2000c388
 800e4b8:	2000c38a 	.word	0x2000c38a

0800e4bc <imul_b1_b3>:

static PJPG_INLINE int16 imul_b1_b3(int16 w) {
 800e4bc:	b508      	push	{r3, lr}
  long x = (w * 362L);
 800e4be:	f44f 73b5 	mov.w	r3, #362	@ 0x16a
 800e4c2:	fb03 f000 	mul.w	r0, r3, r0
  x += 128L;
  return (int16)(PJPG_ARITH_SHIFT_RIGHT_8_L(x));
 800e4c6:	3080      	adds	r0, #128	@ 0x80
 800e4c8:	f7ff f93d 	bl	800d746 <arithmeticRightShift8L>
}
 800e4cc:	b200      	sxth	r0, r0
 800e4ce:	bd08      	pop	{r3, pc}

0800e4d0 <imul_b2>:

static PJPG_INLINE int16 imul_b2(int16 w) {
 800e4d0:	b508      	push	{r3, lr}
  long x = (w * 669L);
 800e4d2:	f240 239d 	movw	r3, #669	@ 0x29d
 800e4d6:	fb03 f000 	mul.w	r0, r3, r0
  x += 128L;
  return (int16)(PJPG_ARITH_SHIFT_RIGHT_8_L(x));
 800e4da:	3080      	adds	r0, #128	@ 0x80
 800e4dc:	f7ff f933 	bl	800d746 <arithmeticRightShift8L>
}
 800e4e0:	b200      	sxth	r0, r0
 800e4e2:	bd08      	pop	{r3, pc}

0800e4e4 <imul_b4>:

static PJPG_INLINE int16 imul_b4(int16 w) {
 800e4e4:	b508      	push	{r3, lr}
  long x = (w * 277L);
 800e4e6:	f240 1315 	movw	r3, #277	@ 0x115
 800e4ea:	fb03 f000 	mul.w	r0, r3, r0
  x += 128L;
  return (int16)(PJPG_ARITH_SHIFT_RIGHT_8_L(x));
 800e4ee:	3080      	adds	r0, #128	@ 0x80
 800e4f0:	f7ff f929 	bl	800d746 <arithmeticRightShift8L>
}
 800e4f4:	b200      	sxth	r0, r0
 800e4f6:	bd08      	pop	{r3, pc}

0800e4f8 <imul_b5>:

static PJPG_INLINE int16 imul_b5(int16 w) {
 800e4f8:	b508      	push	{r3, lr}
  long x = (w * 196L);
 800e4fa:	23c4      	movs	r3, #196	@ 0xc4
 800e4fc:	fb03 f000 	mul.w	r0, r3, r0
  x += 128L;
  return (int16)(PJPG_ARITH_SHIFT_RIGHT_8_L(x));
 800e500:	3080      	adds	r0, #128	@ 0x80
 800e502:	f7ff f920 	bl	800d746 <arithmeticRightShift8L>
}
 800e506:	b200      	sxth	r0, r0
 800e508:	bd08      	pop	{r3, pc}

0800e50a <clamp>:

static PJPG_INLINE uint8 clamp(int16 s) {
  if ((uint16)s > 255U) {
 800e50a:	b283      	uxth	r3, r0
 800e50c:	2bff      	cmp	r3, #255	@ 0xff
 800e50e:	d903      	bls.n	800e518 <clamp+0xe>
    if (s < 0)
 800e510:	2800      	cmp	r0, #0
 800e512:	db03      	blt.n	800e51c <clamp+0x12>
      return 0;
    else if (s > 255)
 800e514:	28ff      	cmp	r0, #255	@ 0xff
 800e516:	dc03      	bgt.n	800e520 <clamp+0x16>
      return 255;
  }

  return (uint8)s;
 800e518:	b2c0      	uxtb	r0, r0
 800e51a:	4770      	bx	lr
      return 0;
 800e51c:	2000      	movs	r0, #0
 800e51e:	4770      	bx	lr
      return 255;
 800e520:	20ff      	movs	r0, #255	@ 0xff
}
 800e522:	4770      	bx	lr

0800e524 <idctRows>:

static void idctRows(void) {
 800e524:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e528:	b085      	sub	sp, #20
  uint8 i;
  int16 *pSrc = gCoeffBuf;
 800e52a:	4c5a      	ldr	r4, [pc, #360]	@ (800e694 <idctRows+0x170>)

  for (i = 0; i < 8; i++) {
 800e52c:	2300      	movs	r3, #0
 800e52e:	9301      	str	r3, [sp, #4]
 800e530:	e087      	b.n	800e642 <idctRows+0x11e>
      *(pSrc + 6) = src0;
      *(pSrc + 7) = src0;
    } else {
      int16 src4 = *(pSrc + 5);
      int16 src7 = *(pSrc + 3);
      int16 x4 = src4 - src7;
 800e532:	b2ad      	uxth	r5, r5
 800e534:	b280      	uxth	r0, r0
 800e536:	1a2b      	subs	r3, r5, r0
 800e538:	b21f      	sxth	r7, r3
 800e53a:	9703      	str	r7, [sp, #12]
      int16 x7 = src4 + src7;
 800e53c:	4405      	add	r5, r0
 800e53e:	b2ad      	uxth	r5, r5

      int16 src5 = *(pSrc + 1);
      int16 src6 = *(pSrc + 7);
      int16 x5 = src5 + src6;
 800e540:	b289      	uxth	r1, r1
 800e542:	b292      	uxth	r2, r2
 800e544:	eb01 0b02 	add.w	fp, r1, r2
 800e548:	fa1f fb8b 	uxth.w	fp, fp
      int16 x6 = src5 - src6;
 800e54c:	eba1 0802 	sub.w	r8, r1, r2
 800e550:	fa0f f888 	sxth.w	r8, r8

      int16 tmp1 = imul_b5(x4 - x6);
 800e554:	1a52      	subs	r2, r2, r1
 800e556:	fa12 f083 	uxtah	r0, r2, r3
 800e55a:	b200      	sxth	r0, r0
 800e55c:	f7ff ffcc 	bl	800e4f8 <imul_b5>
 800e560:	4607      	mov	r7, r0
      int16 stg26 = imul_b4(x6) - tmp1;
 800e562:	4640      	mov	r0, r8
 800e564:	f7ff ffbe 	bl	800e4e4 <imul_b4>
 800e568:	b283      	uxth	r3, r0
 800e56a:	fa1f f887 	uxth.w	r8, r7
 800e56e:	9302      	str	r3, [sp, #8]
 800e570:	eba3 0308 	sub.w	r3, r3, r8
 800e574:	b29a      	uxth	r2, r3
 800e576:	4617      	mov	r7, r2

      int16 x24 = tmp1 - imul_b2(x4);
 800e578:	9803      	ldr	r0, [sp, #12]
 800e57a:	f7ff ffa9 	bl	800e4d0 <imul_b2>
 800e57e:	b280      	uxth	r0, r0
 800e580:	eba8 0000 	sub.w	r0, r8, r0
 800e584:	b282      	uxth	r2, r0
 800e586:	9203      	str	r2, [sp, #12]

      int16 x15 = x5 - x7;
 800e588:	ebab 0005 	sub.w	r0, fp, r5
      int16 x17 = x5 + x7;
 800e58c:	445d      	add	r5, fp
 800e58e:	b2ad      	uxth	r5, r5

      int16 tmp2 = stg26 - x17;
 800e590:	1b7b      	subs	r3, r7, r5
 800e592:	b29f      	uxth	r7, r3
      int16 tmp3 = imul_b1_b3(x15) - tmp2;
 800e594:	b200      	sxth	r0, r0
 800e596:	f7ff ff91 	bl	800e4bc <imul_b1_b3>
 800e59a:	9b02      	ldr	r3, [sp, #8]
 800e59c:	eba8 0803 	sub.w	r8, r8, r3
 800e5a0:	44a8      	add	r8, r5
 800e5a2:	fa1f f388 	uxth.w	r3, r8
 800e5a6:	9302      	str	r3, [sp, #8]
 800e5a8:	fa13 fb80 	uxtah	fp, r3, r0
 800e5ac:	fa1f fb8b 	uxth.w	fp, fp
      int16 x44 = tmp3 + x24;
 800e5b0:	9a03      	ldr	r2, [sp, #12]
 800e5b2:	eb02 030b 	add.w	r3, r2, fp
 800e5b6:	b298      	uxth	r0, r3
 800e5b8:	9003      	str	r0, [sp, #12]

      int16 src0 = *(pSrc + 0);
 800e5ba:	f9b4 8000 	ldrsh.w	r8, [r4]
      int16 src1 = *(pSrc + 4);
      int16 x30 = src0 + src1;
 800e5be:	fa1f f888 	uxth.w	r8, r8
 800e5c2:	fa1f f38a 	uxth.w	r3, sl
 800e5c6:	eb08 0a03 	add.w	sl, r8, r3
 800e5ca:	fa1f fa8a 	uxth.w	sl, sl
      int16 x31 = src0 - src1;
 800e5ce:	eba8 0803 	sub.w	r8, r8, r3
 800e5d2:	fa1f f888 	uxth.w	r8, r8

      int16 src2 = *(pSrc + 2);
      int16 src3 = *(pSrc + 6);
      int16 x12 = src2 - src3;
 800e5d6:	b2b6      	uxth	r6, r6
 800e5d8:	fa1f f989 	uxth.w	r9, r9
 800e5dc:	eba6 0009 	sub.w	r0, r6, r9
      int16 x13 = src2 + src3;
 800e5e0:	444e      	add	r6, r9
 800e5e2:	b2b6      	uxth	r6, r6

      int16 x32 = imul_b1_b3(x12) - x13;
 800e5e4:	b200      	sxth	r0, r0
 800e5e6:	f7ff ff69 	bl	800e4bc <imul_b1_b3>
 800e5ea:	b280      	uxth	r0, r0
 800e5ec:	1b82      	subs	r2, r0, r6

      int16 x40 = x30 + x13;
 800e5ee:	eb0a 0306 	add.w	r3, sl, r6
 800e5f2:	b29b      	uxth	r3, r3
      int16 x43 = x30 - x13;
 800e5f4:	ebaa 0a06 	sub.w	sl, sl, r6
 800e5f8:	fa1f fa8a 	uxth.w	sl, sl
      int16 x41 = x31 + x32;
 800e5fc:	fa18 f282 	uxtah	r2, r8, r2
 800e600:	b292      	uxth	r2, r2
      int16 x42 = x31 - x32;
 800e602:	1a36      	subs	r6, r6, r0
 800e604:	44b0      	add	r8, r6
 800e606:	fa1f f888 	uxth.w	r8, r8

      *(pSrc + 0) = x40 + x17;
 800e60a:	18e9      	adds	r1, r5, r3
 800e60c:	8021      	strh	r1, [r4, #0]
      *(pSrc + 1) = x41 + tmp2;
 800e60e:	18b9      	adds	r1, r7, r2
 800e610:	8061      	strh	r1, [r4, #2]
      *(pSrc + 2) = x42 + tmp3;
 800e612:	eb0b 0108 	add.w	r1, fp, r8
 800e616:	80a1      	strh	r1, [r4, #4]
      *(pSrc + 3) = x43 - x44;
 800e618:	9803      	ldr	r0, [sp, #12]
 800e61a:	ebaa 0100 	sub.w	r1, sl, r0
 800e61e:	80e1      	strh	r1, [r4, #6]
      *(pSrc + 4) = x43 + x44;
 800e620:	eb00 010a 	add.w	r1, r0, sl
 800e624:	8121      	strh	r1, [r4, #8]
      *(pSrc + 5) = x42 - tmp3;
 800e626:	eba8 080b 	sub.w	r8, r8, fp
 800e62a:	f8a4 800a 	strh.w	r8, [r4, #10]
      *(pSrc + 6) = x41 - tmp2;
 800e62e:	9902      	ldr	r1, [sp, #8]
 800e630:	440a      	add	r2, r1
 800e632:	81a2      	strh	r2, [r4, #12]
      *(pSrc + 7) = x40 - x17;
 800e634:	1b5b      	subs	r3, r3, r5
 800e636:	81e3      	strh	r3, [r4, #14]
    }

    pSrc += 8;
 800e638:	3410      	adds	r4, #16
  for (i = 0; i < 8; i++) {
 800e63a:	9f01      	ldr	r7, [sp, #4]
 800e63c:	3701      	adds	r7, #1
 800e63e:	b2fb      	uxtb	r3, r7
 800e640:	9301      	str	r3, [sp, #4]
 800e642:	9b01      	ldr	r3, [sp, #4]
 800e644:	2b07      	cmp	r3, #7
 800e646:	d822      	bhi.n	800e68e <idctRows+0x16a>
    if ((pSrc[1] | pSrc[2] | pSrc[3] | pSrc[4] | pSrc[5] | pSrc[6] | pSrc[7]) ==
 800e648:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 800e64c:	f9b4 6004 	ldrsh.w	r6, [r4, #4]
 800e650:	f9b4 0006 	ldrsh.w	r0, [r4, #6]
 800e654:	f9b4 a008 	ldrsh.w	sl, [r4, #8]
 800e658:	f9b4 500a 	ldrsh.w	r5, [r4, #10]
 800e65c:	f9b4 900c 	ldrsh.w	r9, [r4, #12]
 800e660:	f9b4 200e 	ldrsh.w	r2, [r4, #14]
 800e664:	ea41 0306 	orr.w	r3, r1, r6
 800e668:	4303      	orrs	r3, r0
 800e66a:	ea4a 0303 	orr.w	r3, sl, r3
 800e66e:	432b      	orrs	r3, r5
 800e670:	ea49 0303 	orr.w	r3, r9, r3
 800e674:	4313      	orrs	r3, r2
 800e676:	f47f af5c 	bne.w	800e532 <idctRows+0xe>
      int16 src0 = *pSrc;
 800e67a:	f9b4 3000 	ldrsh.w	r3, [r4]
      *(pSrc + 1) = src0;
 800e67e:	8063      	strh	r3, [r4, #2]
      *(pSrc + 2) = src0;
 800e680:	80a3      	strh	r3, [r4, #4]
      *(pSrc + 3) = src0;
 800e682:	80e3      	strh	r3, [r4, #6]
      *(pSrc + 4) = src0;
 800e684:	8123      	strh	r3, [r4, #8]
      *(pSrc + 5) = src0;
 800e686:	8163      	strh	r3, [r4, #10]
      *(pSrc + 6) = src0;
 800e688:	81a3      	strh	r3, [r4, #12]
      *(pSrc + 7) = src0;
 800e68a:	81e3      	strh	r3, [r4, #14]
 800e68c:	e7d4      	b.n	800e638 <idctRows+0x114>
  }
}
 800e68e:	b005      	add	sp, #20
 800e690:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e694:	2000cc18 	.word	0x2000cc18

0800e698 <idctCols>:

static void idctCols(void) {
 800e698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e69c:	b085      	sub	sp, #20
  uint8 i;

  int16 *pSrc = gCoeffBuf;
 800e69e:	4c91      	ldr	r4, [pc, #580]	@ (800e8e4 <idctCols+0x24c>)

  for (i = 0; i < 8; i++) {
 800e6a0:	2700      	movs	r7, #0
 800e6a2:	9700      	str	r7, [sp, #0]
 800e6a4:	e0e5      	b.n	800e872 <idctCols+0x1da>
      *(pSrc + 6 * 8) = c;
      *(pSrc + 7 * 8) = c;
    } else {
      int16 src4 = *(pSrc + 5 * 8);
      int16 src7 = *(pSrc + 3 * 8);
      int16 x4 = src4 - src7;
 800e6a6:	b2ad      	uxth	r5, r5
 800e6a8:	b280      	uxth	r0, r0
 800e6aa:	1a2b      	subs	r3, r5, r0
 800e6ac:	b21f      	sxth	r7, r3
 800e6ae:	9702      	str	r7, [sp, #8]
      int16 x7 = src4 + src7;
 800e6b0:	4405      	add	r5, r0
 800e6b2:	b2ad      	uxth	r5, r5

      int16 src5 = *(pSrc + 1 * 8);
      int16 src6 = *(pSrc + 7 * 8);
      int16 x5 = src5 + src6;
 800e6b4:	b289      	uxth	r1, r1
 800e6b6:	b292      	uxth	r2, r2
 800e6b8:	eb01 0b02 	add.w	fp, r1, r2
 800e6bc:	fa1f fb8b 	uxth.w	fp, fp
      int16 x6 = src5 - src6;
 800e6c0:	eba1 0802 	sub.w	r8, r1, r2
 800e6c4:	fa0f f888 	sxth.w	r8, r8

      int16 tmp1 = imul_b5(x4 - x6);
 800e6c8:	1a52      	subs	r2, r2, r1
 800e6ca:	fa12 f083 	uxtah	r0, r2, r3
 800e6ce:	b200      	sxth	r0, r0
 800e6d0:	f7ff ff12 	bl	800e4f8 <imul_b5>
 800e6d4:	4607      	mov	r7, r0
      int16 stg26 = imul_b4(x6) - tmp1;
 800e6d6:	4640      	mov	r0, r8
 800e6d8:	f7ff ff04 	bl	800e4e4 <imul_b4>
 800e6dc:	b283      	uxth	r3, r0
 800e6de:	fa1f f887 	uxth.w	r8, r7
 800e6e2:	9301      	str	r3, [sp, #4]
 800e6e4:	eba3 0308 	sub.w	r3, r3, r8
 800e6e8:	b29a      	uxth	r2, r3
 800e6ea:	4617      	mov	r7, r2

      int16 x24 = tmp1 - imul_b2(x4);
 800e6ec:	9802      	ldr	r0, [sp, #8]
 800e6ee:	f7ff feef 	bl	800e4d0 <imul_b2>
 800e6f2:	b280      	uxth	r0, r0
 800e6f4:	eba8 0000 	sub.w	r0, r8, r0
 800e6f8:	b282      	uxth	r2, r0
 800e6fa:	9202      	str	r2, [sp, #8]

      int16 x15 = x5 - x7;
 800e6fc:	ebab 0005 	sub.w	r0, fp, r5
      int16 x17 = x5 + x7;
 800e700:	445d      	add	r5, fp
 800e702:	b2ad      	uxth	r5, r5

      int16 tmp2 = stg26 - x17;
 800e704:	1b7b      	subs	r3, r7, r5
 800e706:	b29f      	uxth	r7, r3
      int16 tmp3 = imul_b1_b3(x15) - tmp2;
 800e708:	b200      	sxth	r0, r0
 800e70a:	f7ff fed7 	bl	800e4bc <imul_b1_b3>
 800e70e:	9b01      	ldr	r3, [sp, #4]
 800e710:	eba8 0303 	sub.w	r3, r8, r3
 800e714:	442b      	add	r3, r5
 800e716:	b29b      	uxth	r3, r3
 800e718:	9301      	str	r3, [sp, #4]
 800e71a:	fa13 f880 	uxtah	r8, r3, r0
 800e71e:	fa1f f888 	uxth.w	r8, r8
      int16 x44 = tmp3 + x24;
 800e722:	9a02      	ldr	r2, [sp, #8]
 800e724:	eb02 0308 	add.w	r3, r2, r8
 800e728:	b29a      	uxth	r2, r3
 800e72a:	9202      	str	r2, [sp, #8]

      int16 src0 = *(pSrc + 0 * 8);
 800e72c:	f9b4 3000 	ldrsh.w	r3, [r4]
      int16 src1 = *(pSrc + 4 * 8);
      int16 x30 = src0 + src1;
 800e730:	b29b      	uxth	r3, r3
 800e732:	fa1f fa8a 	uxth.w	sl, sl
 800e736:	eb03 0b0a 	add.w	fp, r3, sl
 800e73a:	fa1f fb8b 	uxth.w	fp, fp
      int16 x31 = src0 - src1;
 800e73e:	eba3 0a0a 	sub.w	sl, r3, sl
 800e742:	fa1f fa8a 	uxth.w	sl, sl

      int16 src2 = *(pSrc + 2 * 8);
      int16 src3 = *(pSrc + 6 * 8);
      int16 x12 = src2 - src3;
 800e746:	b2b6      	uxth	r6, r6
 800e748:	fa1f f989 	uxth.w	r9, r9
 800e74c:	eba6 0009 	sub.w	r0, r6, r9
      int16 x13 = src2 + src3;
 800e750:	444e      	add	r6, r9
 800e752:	b2b6      	uxth	r6, r6

      int16 x32 = imul_b1_b3(x12) - x13;
 800e754:	b200      	sxth	r0, r0
 800e756:	f7ff feb1 	bl	800e4bc <imul_b1_b3>
 800e75a:	b280      	uxth	r0, r0
 800e75c:	1b83      	subs	r3, r0, r6

      int16 x40 = x30 + x13;
 800e75e:	eb0b 0206 	add.w	r2, fp, r6
 800e762:	b291      	uxth	r1, r2
      int16 x43 = x30 - x13;
 800e764:	ebab 0b06 	sub.w	fp, fp, r6
 800e768:	fa1f fb8b 	uxth.w	fp, fp
      int16 x41 = x31 + x32;
 800e76c:	fa1a f383 	uxtah	r3, sl, r3
 800e770:	fa1f f983 	uxth.w	r9, r3
      int16 x42 = x31 - x32;
 800e774:	1a36      	subs	r6, r6, r0
 800e776:	44b2      	add	sl, r6
 800e778:	fa1f fa8a 	uxth.w	sl, sl

      *(pSrc + 0 * 8) = clamp(PJPG_DESCALE(x40 + x17) + 128);
 800e77c:	9103      	str	r1, [sp, #12]
 800e77e:	1868      	adds	r0, r5, r1
 800e780:	b280      	uxth	r0, r0
 800e782:	3040      	adds	r0, #64	@ 0x40
 800e784:	2107      	movs	r1, #7
 800e786:	b200      	sxth	r0, r0
 800e788:	f7fe ffce 	bl	800d728 <arithmeticRightShiftN16>
 800e78c:	b280      	uxth	r0, r0
 800e78e:	3080      	adds	r0, #128	@ 0x80
 800e790:	b200      	sxth	r0, r0
 800e792:	f7ff feba 	bl	800e50a <clamp>
 800e796:	8020      	strh	r0, [r4, #0]
      *(pSrc + 1 * 8) = clamp(PJPG_DESCALE(x41 + tmp2) + 128);
 800e798:	eb07 0009 	add.w	r0, r7, r9
 800e79c:	b280      	uxth	r0, r0
 800e79e:	3040      	adds	r0, #64	@ 0x40
 800e7a0:	2107      	movs	r1, #7
 800e7a2:	b200      	sxth	r0, r0
 800e7a4:	f7fe ffc0 	bl	800d728 <arithmeticRightShiftN16>
 800e7a8:	b280      	uxth	r0, r0
 800e7aa:	3080      	adds	r0, #128	@ 0x80
 800e7ac:	b200      	sxth	r0, r0
 800e7ae:	f7ff feac 	bl	800e50a <clamp>
 800e7b2:	8220      	strh	r0, [r4, #16]
      *(pSrc + 2 * 8) = clamp(PJPG_DESCALE(x42 + tmp3) + 128);
 800e7b4:	eb08 000a 	add.w	r0, r8, sl
 800e7b8:	b280      	uxth	r0, r0
 800e7ba:	3040      	adds	r0, #64	@ 0x40
 800e7bc:	2107      	movs	r1, #7
 800e7be:	b200      	sxth	r0, r0
 800e7c0:	f7fe ffb2 	bl	800d728 <arithmeticRightShiftN16>
 800e7c4:	b280      	uxth	r0, r0
 800e7c6:	3080      	adds	r0, #128	@ 0x80
 800e7c8:	b200      	sxth	r0, r0
 800e7ca:	f7ff fe9e 	bl	800e50a <clamp>
 800e7ce:	8420      	strh	r0, [r4, #32]
      *(pSrc + 3 * 8) = clamp(PJPG_DESCALE(x43 - x44) + 128);
 800e7d0:	9e02      	ldr	r6, [sp, #8]
 800e7d2:	ebab 0006 	sub.w	r0, fp, r6
 800e7d6:	b280      	uxth	r0, r0
 800e7d8:	3040      	adds	r0, #64	@ 0x40
 800e7da:	2107      	movs	r1, #7
 800e7dc:	b200      	sxth	r0, r0
 800e7de:	f7fe ffa3 	bl	800d728 <arithmeticRightShiftN16>
 800e7e2:	b280      	uxth	r0, r0
 800e7e4:	3080      	adds	r0, #128	@ 0x80
 800e7e6:	b200      	sxth	r0, r0
 800e7e8:	f7ff fe8f 	bl	800e50a <clamp>
 800e7ec:	8620      	strh	r0, [r4, #48]	@ 0x30
      *(pSrc + 4 * 8) = clamp(PJPG_DESCALE(x43 + x44) + 128);
 800e7ee:	eb06 000b 	add.w	r0, r6, fp
 800e7f2:	b280      	uxth	r0, r0
 800e7f4:	3040      	adds	r0, #64	@ 0x40
 800e7f6:	2107      	movs	r1, #7
 800e7f8:	b200      	sxth	r0, r0
 800e7fa:	f7fe ff95 	bl	800d728 <arithmeticRightShiftN16>
 800e7fe:	b280      	uxth	r0, r0
 800e800:	3080      	adds	r0, #128	@ 0x80
 800e802:	b200      	sxth	r0, r0
 800e804:	f7ff fe81 	bl	800e50a <clamp>
 800e808:	f8a4 0040 	strh.w	r0, [r4, #64]	@ 0x40
      *(pSrc + 5 * 8) = clamp(PJPG_DESCALE(x42 - tmp3) + 128);
 800e80c:	ebaa 0008 	sub.w	r0, sl, r8
 800e810:	b280      	uxth	r0, r0
 800e812:	3040      	adds	r0, #64	@ 0x40
 800e814:	2107      	movs	r1, #7
 800e816:	b200      	sxth	r0, r0
 800e818:	f7fe ff86 	bl	800d728 <arithmeticRightShiftN16>
 800e81c:	b280      	uxth	r0, r0
 800e81e:	3080      	adds	r0, #128	@ 0x80
 800e820:	b200      	sxth	r0, r0
 800e822:	f7ff fe72 	bl	800e50a <clamp>
 800e826:	f8a4 0050 	strh.w	r0, [r4, #80]	@ 0x50
      *(pSrc + 6 * 8) = clamp(PJPG_DESCALE(x41 - tmp2) + 128);
 800e82a:	9b01      	ldr	r3, [sp, #4]
 800e82c:	eb03 0009 	add.w	r0, r3, r9
 800e830:	b280      	uxth	r0, r0
 800e832:	3040      	adds	r0, #64	@ 0x40
 800e834:	2107      	movs	r1, #7
 800e836:	b200      	sxth	r0, r0
 800e838:	f7fe ff76 	bl	800d728 <arithmeticRightShiftN16>
 800e83c:	b280      	uxth	r0, r0
 800e83e:	3080      	adds	r0, #128	@ 0x80
 800e840:	b200      	sxth	r0, r0
 800e842:	f7ff fe62 	bl	800e50a <clamp>
 800e846:	f8a4 0060 	strh.w	r0, [r4, #96]	@ 0x60
      *(pSrc + 7 * 8) = clamp(PJPG_DESCALE(x40 - x17) + 128);
 800e84a:	9903      	ldr	r1, [sp, #12]
 800e84c:	1b48      	subs	r0, r1, r5
 800e84e:	b280      	uxth	r0, r0
 800e850:	3040      	adds	r0, #64	@ 0x40
 800e852:	2107      	movs	r1, #7
 800e854:	b200      	sxth	r0, r0
 800e856:	f7fe ff67 	bl	800d728 <arithmeticRightShiftN16>
 800e85a:	b280      	uxth	r0, r0
 800e85c:	3080      	adds	r0, #128	@ 0x80
 800e85e:	b200      	sxth	r0, r0
 800e860:	f7ff fe53 	bl	800e50a <clamp>
 800e864:	f8a4 0070 	strh.w	r0, [r4, #112]	@ 0x70
    }

    pSrc++;
 800e868:	3402      	adds	r4, #2
  for (i = 0; i < 8; i++) {
 800e86a:	9f00      	ldr	r7, [sp, #0]
 800e86c:	3701      	adds	r7, #1
 800e86e:	b2fb      	uxtb	r3, r7
 800e870:	9300      	str	r3, [sp, #0]
 800e872:	9b00      	ldr	r3, [sp, #0]
 800e874:	2b07      	cmp	r3, #7
 800e876:	d831      	bhi.n	800e8dc <idctCols+0x244>
    if ((pSrc[1 * 8] | pSrc[2 * 8] | pSrc[3 * 8] | pSrc[4 * 8] | pSrc[5 * 8] |
 800e878:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
 800e87c:	f9b4 6020 	ldrsh.w	r6, [r4, #32]
 800e880:	f9b4 0030 	ldrsh.w	r0, [r4, #48]	@ 0x30
 800e884:	f9b4 a040 	ldrsh.w	sl, [r4, #64]	@ 0x40
 800e888:	f9b4 5050 	ldrsh.w	r5, [r4, #80]	@ 0x50
         pSrc[6 * 8] | pSrc[7 * 8]) == 0) {
 800e88c:	f9b4 9060 	ldrsh.w	r9, [r4, #96]	@ 0x60
 800e890:	f9b4 2070 	ldrsh.w	r2, [r4, #112]	@ 0x70
 800e894:	ea41 0306 	orr.w	r3, r1, r6
 800e898:	4303      	orrs	r3, r0
 800e89a:	ea4a 0303 	orr.w	r3, sl, r3
 800e89e:	432b      	orrs	r3, r5
 800e8a0:	ea49 0303 	orr.w	r3, r9, r3
    if ((pSrc[1 * 8] | pSrc[2 * 8] | pSrc[3 * 8] | pSrc[4 * 8] | pSrc[5 * 8] |
 800e8a4:	4313      	orrs	r3, r2
 800e8a6:	f47f aefe 	bne.w	800e6a6 <idctCols+0xe>
      uint8 c = clamp(PJPG_DESCALE(*pSrc) + 128);
 800e8aa:	8820      	ldrh	r0, [r4, #0]
 800e8ac:	3040      	adds	r0, #64	@ 0x40
 800e8ae:	2107      	movs	r1, #7
 800e8b0:	b200      	sxth	r0, r0
 800e8b2:	f7fe ff39 	bl	800d728 <arithmeticRightShiftN16>
 800e8b6:	b280      	uxth	r0, r0
 800e8b8:	3080      	adds	r0, #128	@ 0x80
 800e8ba:	b200      	sxth	r0, r0
 800e8bc:	f7ff fe25 	bl	800e50a <clamp>
      *(pSrc + 0 * 8) = c;
 800e8c0:	b200      	sxth	r0, r0
 800e8c2:	8020      	strh	r0, [r4, #0]
      *(pSrc + 1 * 8) = c;
 800e8c4:	8220      	strh	r0, [r4, #16]
      *(pSrc + 2 * 8) = c;
 800e8c6:	8420      	strh	r0, [r4, #32]
      *(pSrc + 3 * 8) = c;
 800e8c8:	8620      	strh	r0, [r4, #48]	@ 0x30
      *(pSrc + 4 * 8) = c;
 800e8ca:	f8a4 0040 	strh.w	r0, [r4, #64]	@ 0x40
      *(pSrc + 5 * 8) = c;
 800e8ce:	f8a4 0050 	strh.w	r0, [r4, #80]	@ 0x50
      *(pSrc + 6 * 8) = c;
 800e8d2:	f8a4 0060 	strh.w	r0, [r4, #96]	@ 0x60
      *(pSrc + 7 * 8) = c;
 800e8d6:	f8a4 0070 	strh.w	r0, [r4, #112]	@ 0x70
 800e8da:	e7c5      	b.n	800e868 <idctCols+0x1d0>
  }
}
 800e8dc:	b005      	add	sp, #20
 800e8de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e8e2:	bf00      	nop
 800e8e4:	2000cc18 	.word	0x2000cc18

0800e8e8 <addAndClamp>:

static PJPG_INLINE uint8 addAndClamp(uint8 a, int16 b) {
  b = a + b;
 800e8e8:	4401      	add	r1, r0
 800e8ea:	b288      	uxth	r0, r1
 800e8ec:	b209      	sxth	r1, r1

  if ((uint16)b > 255U) {
 800e8ee:	28ff      	cmp	r0, #255	@ 0xff
 800e8f0:	d903      	bls.n	800e8fa <addAndClamp+0x12>
    if (b < 0)
 800e8f2:	2900      	cmp	r1, #0
 800e8f4:	db03      	blt.n	800e8fe <addAndClamp+0x16>
      return 0;
    else if (b > 255)
 800e8f6:	29ff      	cmp	r1, #255	@ 0xff
 800e8f8:	dc03      	bgt.n	800e902 <addAndClamp+0x1a>
      return 255;
  }

  return (uint8)b;
 800e8fa:	b2c0      	uxtb	r0, r0
 800e8fc:	4770      	bx	lr
      return 0;
 800e8fe:	2000      	movs	r0, #0
 800e900:	4770      	bx	lr
      return 255;
 800e902:	20ff      	movs	r0, #255	@ 0xff
}
 800e904:	4770      	bx	lr

0800e906 <subAndClamp>:

static PJPG_INLINE uint8 subAndClamp(uint8 a, int16 b) {
  b = a - b;
 800e906:	1a41      	subs	r1, r0, r1
 800e908:	b288      	uxth	r0, r1
 800e90a:	b209      	sxth	r1, r1

  if ((uint16)b > 255U) {
 800e90c:	28ff      	cmp	r0, #255	@ 0xff
 800e90e:	d903      	bls.n	800e918 <subAndClamp+0x12>
    if (b < 0)
 800e910:	2900      	cmp	r1, #0
 800e912:	db03      	blt.n	800e91c <subAndClamp+0x16>
      return 0;
    else if (b > 255)
 800e914:	29ff      	cmp	r1, #255	@ 0xff
 800e916:	dc03      	bgt.n	800e920 <subAndClamp+0x1a>
      return 255;
  }

  return (uint8)b;
 800e918:	b2c0      	uxtb	r0, r0
 800e91a:	4770      	bx	lr
      return 0;
 800e91c:	2000      	movs	r0, #0
 800e91e:	4770      	bx	lr
      return 255;
 800e920:	20ff      	movs	r0, #255	@ 0xff
}
 800e922:	4770      	bx	lr

0800e924 <upsampleCb>:
static void upsampleCb(uint8 srcOfs, uint8 dstOfs) {
 800e924:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

  uint8 x, y;
  int16 *pSrc = gCoeffBuf + srcOfs;
 800e928:	4b2c      	ldr	r3, [pc, #176]	@ (800e9dc <upsampleCb+0xb8>)
 800e92a:	eb03 0840 	add.w	r8, r3, r0, lsl #1
  uint8 *pDstG = gMCUBufG + dstOfs;
 800e92e:	4f2c      	ldr	r7, [pc, #176]	@ (800e9e0 <upsampleCb+0xbc>)
 800e930:	440f      	add	r7, r1
  uint8 *pDstB = gMCUBufB + dstOfs;
 800e932:	4e2c      	ldr	r6, [pc, #176]	@ (800e9e4 <upsampleCb+0xc0>)
 800e934:	440e      	add	r6, r1
  for (y = 0; y < 4; y++) {
 800e936:	f04f 0a00 	mov.w	sl, #0
 800e93a:	e046      	b.n	800e9ca <upsampleCb+0xa6>
    for (x = 0; x < 4; x++) {
      uint8 cb = (uint8)*pSrc++;
 800e93c:	f938 4b02 	ldrsh.w	r4, [r8], #2
 800e940:	b2e4      	uxtb	r4, r4
      int16 cbG, cbB;

      cbG = ((cb * 88U) >> 8U) - 44U;
 800e942:	2558      	movs	r5, #88	@ 0x58
 800e944:	fb04 f505 	mul.w	r5, r4, r5
 800e948:	0a2d      	lsrs	r5, r5, #8
 800e94a:	3d2c      	subs	r5, #44	@ 0x2c
      pDstG[0] = subAndClamp(pDstG[0], cbG);
 800e94c:	4629      	mov	r1, r5
 800e94e:	7838      	ldrb	r0, [r7, #0]
 800e950:	f7ff ffd9 	bl	800e906 <subAndClamp>
 800e954:	7038      	strb	r0, [r7, #0]
      pDstG[1] = subAndClamp(pDstG[1], cbG);
 800e956:	4629      	mov	r1, r5
 800e958:	7878      	ldrb	r0, [r7, #1]
 800e95a:	f7ff ffd4 	bl	800e906 <subAndClamp>
 800e95e:	7078      	strb	r0, [r7, #1]
      pDstG[8] = subAndClamp(pDstG[8], cbG);
 800e960:	4629      	mov	r1, r5
 800e962:	7a38      	ldrb	r0, [r7, #8]
 800e964:	f7ff ffcf 	bl	800e906 <subAndClamp>
 800e968:	7238      	strb	r0, [r7, #8]
      pDstG[9] = subAndClamp(pDstG[9], cbG);
 800e96a:	4629      	mov	r1, r5
 800e96c:	7a78      	ldrb	r0, [r7, #9]
 800e96e:	f7ff ffca 	bl	800e906 <subAndClamp>
 800e972:	7278      	strb	r0, [r7, #9]

      cbB = (cb + ((cb * 198U) >> 8U)) - 227U;
 800e974:	23c6      	movs	r3, #198	@ 0xc6
 800e976:	fb04 f303 	mul.w	r3, r4, r3
 800e97a:	eb04 2413 	add.w	r4, r4, r3, lsr #8
 800e97e:	3ce3      	subs	r4, #227	@ 0xe3
      pDstB[0] = addAndClamp(pDstB[0], cbB);
 800e980:	4621      	mov	r1, r4
 800e982:	7830      	ldrb	r0, [r6, #0]
 800e984:	f7ff ffb0 	bl	800e8e8 <addAndClamp>
 800e988:	7030      	strb	r0, [r6, #0]
      pDstB[1] = addAndClamp(pDstB[1], cbB);
 800e98a:	4621      	mov	r1, r4
 800e98c:	7870      	ldrb	r0, [r6, #1]
 800e98e:	f7ff ffab 	bl	800e8e8 <addAndClamp>
 800e992:	7070      	strb	r0, [r6, #1]
      pDstB[8] = addAndClamp(pDstB[8], cbB);
 800e994:	4621      	mov	r1, r4
 800e996:	7a30      	ldrb	r0, [r6, #8]
 800e998:	f7ff ffa6 	bl	800e8e8 <addAndClamp>
 800e99c:	7230      	strb	r0, [r6, #8]
      pDstB[9] = addAndClamp(pDstB[9], cbB);
 800e99e:	4621      	mov	r1, r4
 800e9a0:	7a70      	ldrb	r0, [r6, #9]
 800e9a2:	f7ff ffa1 	bl	800e8e8 <addAndClamp>
 800e9a6:	7270      	strb	r0, [r6, #9]

      pDstG += 2;
 800e9a8:	3702      	adds	r7, #2
      pDstB += 2;
 800e9aa:	3602      	adds	r6, #2
    for (x = 0; x < 4; x++) {
 800e9ac:	f109 0901 	add.w	r9, r9, #1
 800e9b0:	fa5f f989 	uxtb.w	r9, r9
 800e9b4:	f1b9 0f03 	cmp.w	r9, #3
 800e9b8:	d9c0      	bls.n	800e93c <upsampleCb+0x18>
    }

    pSrc = pSrc - 4 + 8;
 800e9ba:	f108 0808 	add.w	r8, r8, #8
    pDstG = pDstG - 8 + 16;
 800e9be:	3708      	adds	r7, #8
    pDstB = pDstB - 8 + 16;
 800e9c0:	3608      	adds	r6, #8
  for (y = 0; y < 4; y++) {
 800e9c2:	f10a 0a01 	add.w	sl, sl, #1
 800e9c6:	fa5f fa8a 	uxtb.w	sl, sl
 800e9ca:	f1ba 0f03 	cmp.w	sl, #3
 800e9ce:	d802      	bhi.n	800e9d6 <upsampleCb+0xb2>
    for (x = 0; x < 4; x++) {
 800e9d0:	f04f 0900 	mov.w	r9, #0
 800e9d4:	e7ee      	b.n	800e9b4 <upsampleCb+0x90>
  }
}
 800e9d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e9da:	bf00      	nop
 800e9dc:	2000cc18 	.word	0x2000cc18
 800e9e0:	2000ca18 	.word	0x2000ca18
 800e9e4:	2000c918 	.word	0x2000c918

0800e9e8 <upsampleCbH>:

static void upsampleCbH(uint8 srcOfs, uint8 dstOfs) {
 800e9e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

  uint8 x, y;
  int16 *pSrc = gCoeffBuf + srcOfs;
 800e9ec:	4d22      	ldr	r5, [pc, #136]	@ (800ea78 <upsampleCbH+0x90>)
 800e9ee:	eb05 0540 	add.w	r5, r5, r0, lsl #1
  uint8 *pDstG = gMCUBufG + dstOfs;
 800e9f2:	4f22      	ldr	r7, [pc, #136]	@ (800ea7c <upsampleCbH+0x94>)
 800e9f4:	440f      	add	r7, r1
  uint8 *pDstB = gMCUBufB + dstOfs;
 800e9f6:	4e22      	ldr	r6, [pc, #136]	@ (800ea80 <upsampleCbH+0x98>)
 800e9f8:	440e      	add	r6, r1
  for (y = 0; y < 8; y++) {
 800e9fa:	f04f 0900 	mov.w	r9, #0
 800e9fe:	e032      	b.n	800ea66 <upsampleCbH+0x7e>
    for (x = 0; x < 4; x++) {
      uint8 cb = (uint8)*pSrc++;
 800ea00:	f935 4b02 	ldrsh.w	r4, [r5], #2
 800ea04:	b2e4      	uxtb	r4, r4
      int16 cbG, cbB;

      cbG = ((cb * 88U) >> 8U) - 44U;
 800ea06:	f04f 0a58 	mov.w	sl, #88	@ 0x58
 800ea0a:	fb0a fa04 	mul.w	sl, sl, r4
 800ea0e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 800ea12:	f1aa 0a2c 	sub.w	sl, sl, #44	@ 0x2c
      pDstG[0] = subAndClamp(pDstG[0], cbG);
 800ea16:	4651      	mov	r1, sl
 800ea18:	7838      	ldrb	r0, [r7, #0]
 800ea1a:	f7ff ff74 	bl	800e906 <subAndClamp>
 800ea1e:	7038      	strb	r0, [r7, #0]
      pDstG[1] = subAndClamp(pDstG[1], cbG);
 800ea20:	4651      	mov	r1, sl
 800ea22:	7878      	ldrb	r0, [r7, #1]
 800ea24:	f7ff ff6f 	bl	800e906 <subAndClamp>
 800ea28:	7078      	strb	r0, [r7, #1]

      cbB = (cb + ((cb * 198U) >> 8U)) - 227U;
 800ea2a:	23c6      	movs	r3, #198	@ 0xc6
 800ea2c:	fb04 f303 	mul.w	r3, r4, r3
 800ea30:	eb04 2413 	add.w	r4, r4, r3, lsr #8
 800ea34:	3ce3      	subs	r4, #227	@ 0xe3
      pDstB[0] = addAndClamp(pDstB[0], cbB);
 800ea36:	4621      	mov	r1, r4
 800ea38:	7830      	ldrb	r0, [r6, #0]
 800ea3a:	f7ff ff55 	bl	800e8e8 <addAndClamp>
 800ea3e:	7030      	strb	r0, [r6, #0]
      pDstB[1] = addAndClamp(pDstB[1], cbB);
 800ea40:	4621      	mov	r1, r4
 800ea42:	7870      	ldrb	r0, [r6, #1]
 800ea44:	f7ff ff50 	bl	800e8e8 <addAndClamp>
 800ea48:	7070      	strb	r0, [r6, #1]

      pDstG += 2;
 800ea4a:	3702      	adds	r7, #2
      pDstB += 2;
 800ea4c:	3602      	adds	r6, #2
    for (x = 0; x < 4; x++) {
 800ea4e:	f108 0801 	add.w	r8, r8, #1
 800ea52:	fa5f f888 	uxtb.w	r8, r8
 800ea56:	f1b8 0f03 	cmp.w	r8, #3
 800ea5a:	d9d1      	bls.n	800ea00 <upsampleCbH+0x18>
    }

    pSrc = pSrc - 4 + 8;
 800ea5c:	3508      	adds	r5, #8
  for (y = 0; y < 8; y++) {
 800ea5e:	f109 0901 	add.w	r9, r9, #1
 800ea62:	fa5f f989 	uxtb.w	r9, r9
 800ea66:	f1b9 0f07 	cmp.w	r9, #7
 800ea6a:	d802      	bhi.n	800ea72 <upsampleCbH+0x8a>
    for (x = 0; x < 4; x++) {
 800ea6c:	f04f 0800 	mov.w	r8, #0
 800ea70:	e7f1      	b.n	800ea56 <upsampleCbH+0x6e>
  }
}
 800ea72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ea76:	bf00      	nop
 800ea78:	2000cc18 	.word	0x2000cc18
 800ea7c:	2000ca18 	.word	0x2000ca18
 800ea80:	2000c918 	.word	0x2000c918

0800ea84 <upsampleCbV>:

static void upsampleCbV(uint8 srcOfs, uint8 dstOfs) {
 800ea84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

  uint8 x, y;
  int16 *pSrc = gCoeffBuf + srcOfs;
 800ea88:	4f22      	ldr	r7, [pc, #136]	@ (800eb14 <upsampleCbV+0x90>)
 800ea8a:	eb07 0740 	add.w	r7, r7, r0, lsl #1
  uint8 *pDstG = gMCUBufG + dstOfs;
 800ea8e:	4e22      	ldr	r6, [pc, #136]	@ (800eb18 <upsampleCbV+0x94>)
 800ea90:	440e      	add	r6, r1
  uint8 *pDstB = gMCUBufB + dstOfs;
 800ea92:	4d22      	ldr	r5, [pc, #136]	@ (800eb1c <upsampleCbV+0x98>)
 800ea94:	440d      	add	r5, r1
  for (y = 0; y < 4; y++) {
 800ea96:	f04f 0900 	mov.w	r9, #0
 800ea9a:	e033      	b.n	800eb04 <upsampleCbV+0x80>
    for (x = 0; x < 8; x++) {
      uint8 cb = (uint8)*pSrc++;
 800ea9c:	f937 4b02 	ldrsh.w	r4, [r7], #2
 800eaa0:	b2e4      	uxtb	r4, r4
      int16 cbG, cbB;

      cbG = ((cb * 88U) >> 8U) - 44U;
 800eaa2:	f04f 0a58 	mov.w	sl, #88	@ 0x58
 800eaa6:	fb0a fa04 	mul.w	sl, sl, r4
 800eaaa:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 800eaae:	f1aa 0a2c 	sub.w	sl, sl, #44	@ 0x2c
      pDstG[0] = subAndClamp(pDstG[0], cbG);
 800eab2:	4651      	mov	r1, sl
 800eab4:	7830      	ldrb	r0, [r6, #0]
 800eab6:	f7ff ff26 	bl	800e906 <subAndClamp>
 800eaba:	7030      	strb	r0, [r6, #0]
      pDstG[8] = subAndClamp(pDstG[8], cbG);
 800eabc:	4651      	mov	r1, sl
 800eabe:	7a30      	ldrb	r0, [r6, #8]
 800eac0:	f7ff ff21 	bl	800e906 <subAndClamp>
 800eac4:	7230      	strb	r0, [r6, #8]

      cbB = (cb + ((cb * 198U) >> 8U)) - 227U;
 800eac6:	23c6      	movs	r3, #198	@ 0xc6
 800eac8:	fb04 f303 	mul.w	r3, r4, r3
 800eacc:	eb04 2413 	add.w	r4, r4, r3, lsr #8
 800ead0:	3ce3      	subs	r4, #227	@ 0xe3
      pDstB[0] = addAndClamp(pDstB[0], cbB);
 800ead2:	4621      	mov	r1, r4
 800ead4:	7828      	ldrb	r0, [r5, #0]
 800ead6:	f7ff ff07 	bl	800e8e8 <addAndClamp>
 800eada:	7028      	strb	r0, [r5, #0]
      pDstB[8] = addAndClamp(pDstB[8], cbB);
 800eadc:	4621      	mov	r1, r4
 800eade:	7a28      	ldrb	r0, [r5, #8]
 800eae0:	f7ff ff02 	bl	800e8e8 <addAndClamp>
 800eae4:	7228      	strb	r0, [r5, #8]

      ++pDstG;
 800eae6:	3601      	adds	r6, #1
      ++pDstB;
 800eae8:	3501      	adds	r5, #1
    for (x = 0; x < 8; x++) {
 800eaea:	f108 0801 	add.w	r8, r8, #1
 800eaee:	fa5f f888 	uxtb.w	r8, r8
 800eaf2:	f1b8 0f07 	cmp.w	r8, #7
 800eaf6:	d9d1      	bls.n	800ea9c <upsampleCbV+0x18>
    }

    pDstG = pDstG - 8 + 16;
 800eaf8:	3608      	adds	r6, #8
    pDstB = pDstB - 8 + 16;
 800eafa:	3508      	adds	r5, #8
  for (y = 0; y < 4; y++) {
 800eafc:	f109 0901 	add.w	r9, r9, #1
 800eb00:	fa5f f989 	uxtb.w	r9, r9
 800eb04:	f1b9 0f03 	cmp.w	r9, #3
 800eb08:	d802      	bhi.n	800eb10 <upsampleCbV+0x8c>
    for (x = 0; x < 8; x++) {
 800eb0a:	f04f 0800 	mov.w	r8, #0
 800eb0e:	e7f0      	b.n	800eaf2 <upsampleCbV+0x6e>
  }
}
 800eb10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eb14:	2000cc18 	.word	0x2000cc18
 800eb18:	2000ca18 	.word	0x2000ca18
 800eb1c:	2000c918 	.word	0x2000c918

0800eb20 <upsampleCr>:
static void upsampleCr(uint8 srcOfs, uint8 dstOfs) {
 800eb20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

  uint8 x, y;
  int16 *pSrc = gCoeffBuf + srcOfs;
 800eb24:	4b2c      	ldr	r3, [pc, #176]	@ (800ebd8 <upsampleCr+0xb8>)
 800eb26:	eb03 0840 	add.w	r8, r3, r0, lsl #1
  uint8 *pDstR = gMCUBufR + dstOfs;
 800eb2a:	4f2c      	ldr	r7, [pc, #176]	@ (800ebdc <upsampleCr+0xbc>)
 800eb2c:	440f      	add	r7, r1
  uint8 *pDstG = gMCUBufG + dstOfs;
 800eb2e:	4e2c      	ldr	r6, [pc, #176]	@ (800ebe0 <upsampleCr+0xc0>)
 800eb30:	440e      	add	r6, r1
  for (y = 0; y < 4; y++) {
 800eb32:	f04f 0a00 	mov.w	sl, #0
 800eb36:	e046      	b.n	800ebc6 <upsampleCr+0xa6>
    for (x = 0; x < 4; x++) {
      uint8 cr = (uint8)*pSrc++;
 800eb38:	f938 4b02 	ldrsh.w	r4, [r8], #2
 800eb3c:	b2e4      	uxtb	r4, r4
      int16 crR, crG;

      crR = (cr + ((cr * 103U) >> 8U)) - 179;
 800eb3e:	2567      	movs	r5, #103	@ 0x67
 800eb40:	fb04 f505 	mul.w	r5, r4, r5
 800eb44:	eb04 2515 	add.w	r5, r4, r5, lsr #8
 800eb48:	3db3      	subs	r5, #179	@ 0xb3
      pDstR[0] = addAndClamp(pDstR[0], crR);
 800eb4a:	4629      	mov	r1, r5
 800eb4c:	7838      	ldrb	r0, [r7, #0]
 800eb4e:	f7ff fecb 	bl	800e8e8 <addAndClamp>
 800eb52:	7038      	strb	r0, [r7, #0]
      pDstR[1] = addAndClamp(pDstR[1], crR);
 800eb54:	4629      	mov	r1, r5
 800eb56:	7878      	ldrb	r0, [r7, #1]
 800eb58:	f7ff fec6 	bl	800e8e8 <addAndClamp>
 800eb5c:	7078      	strb	r0, [r7, #1]
      pDstR[8] = addAndClamp(pDstR[8], crR);
 800eb5e:	4629      	mov	r1, r5
 800eb60:	7a38      	ldrb	r0, [r7, #8]
 800eb62:	f7ff fec1 	bl	800e8e8 <addAndClamp>
 800eb66:	7238      	strb	r0, [r7, #8]
      pDstR[9] = addAndClamp(pDstR[9], crR);
 800eb68:	4629      	mov	r1, r5
 800eb6a:	7a78      	ldrb	r0, [r7, #9]
 800eb6c:	f7ff febc 	bl	800e8e8 <addAndClamp>
 800eb70:	7278      	strb	r0, [r7, #9]

      crG = ((cr * 183U) >> 8U) - 91;
 800eb72:	23b7      	movs	r3, #183	@ 0xb7
 800eb74:	fb03 f404 	mul.w	r4, r3, r4
 800eb78:	0a24      	lsrs	r4, r4, #8
 800eb7a:	3c5b      	subs	r4, #91	@ 0x5b
      pDstG[0] = subAndClamp(pDstG[0], crG);
 800eb7c:	4621      	mov	r1, r4
 800eb7e:	7830      	ldrb	r0, [r6, #0]
 800eb80:	f7ff fec1 	bl	800e906 <subAndClamp>
 800eb84:	7030      	strb	r0, [r6, #0]
      pDstG[1] = subAndClamp(pDstG[1], crG);
 800eb86:	4621      	mov	r1, r4
 800eb88:	7870      	ldrb	r0, [r6, #1]
 800eb8a:	f7ff febc 	bl	800e906 <subAndClamp>
 800eb8e:	7070      	strb	r0, [r6, #1]
      pDstG[8] = subAndClamp(pDstG[8], crG);
 800eb90:	4621      	mov	r1, r4
 800eb92:	7a30      	ldrb	r0, [r6, #8]
 800eb94:	f7ff feb7 	bl	800e906 <subAndClamp>
 800eb98:	7230      	strb	r0, [r6, #8]
      pDstG[9] = subAndClamp(pDstG[9], crG);
 800eb9a:	4621      	mov	r1, r4
 800eb9c:	7a70      	ldrb	r0, [r6, #9]
 800eb9e:	f7ff feb2 	bl	800e906 <subAndClamp>
 800eba2:	7270      	strb	r0, [r6, #9]

      pDstR += 2;
 800eba4:	3702      	adds	r7, #2
      pDstG += 2;
 800eba6:	3602      	adds	r6, #2
    for (x = 0; x < 4; x++) {
 800eba8:	f109 0901 	add.w	r9, r9, #1
 800ebac:	fa5f f989 	uxtb.w	r9, r9
 800ebb0:	f1b9 0f03 	cmp.w	r9, #3
 800ebb4:	d9c0      	bls.n	800eb38 <upsampleCr+0x18>
    }

    pSrc = pSrc - 4 + 8;
 800ebb6:	f108 0808 	add.w	r8, r8, #8
    pDstR = pDstR - 8 + 16;
 800ebba:	3708      	adds	r7, #8
    pDstG = pDstG - 8 + 16;
 800ebbc:	3608      	adds	r6, #8
  for (y = 0; y < 4; y++) {
 800ebbe:	f10a 0a01 	add.w	sl, sl, #1
 800ebc2:	fa5f fa8a 	uxtb.w	sl, sl
 800ebc6:	f1ba 0f03 	cmp.w	sl, #3
 800ebca:	d802      	bhi.n	800ebd2 <upsampleCr+0xb2>
    for (x = 0; x < 4; x++) {
 800ebcc:	f04f 0900 	mov.w	r9, #0
 800ebd0:	e7ee      	b.n	800ebb0 <upsampleCr+0x90>
  }
}
 800ebd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ebd6:	bf00      	nop
 800ebd8:	2000cc18 	.word	0x2000cc18
 800ebdc:	2000cb18 	.word	0x2000cb18
 800ebe0:	2000ca18 	.word	0x2000ca18

0800ebe4 <upsampleCrH>:

static void upsampleCrH(uint8 srcOfs, uint8 dstOfs) {
 800ebe4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

  uint8 x, y;
  int16 *pSrc = gCoeffBuf + srcOfs;
 800ebe8:	4d21      	ldr	r5, [pc, #132]	@ (800ec70 <upsampleCrH+0x8c>)
 800ebea:	eb05 0540 	add.w	r5, r5, r0, lsl #1
  uint8 *pDstR = gMCUBufR + dstOfs;
 800ebee:	4f21      	ldr	r7, [pc, #132]	@ (800ec74 <upsampleCrH+0x90>)
 800ebf0:	440f      	add	r7, r1
  uint8 *pDstG = gMCUBufG + dstOfs;
 800ebf2:	4e21      	ldr	r6, [pc, #132]	@ (800ec78 <upsampleCrH+0x94>)
 800ebf4:	440e      	add	r6, r1
  for (y = 0; y < 8; y++) {
 800ebf6:	f04f 0900 	mov.w	r9, #0
 800ebfa:	e031      	b.n	800ec60 <upsampleCrH+0x7c>
    for (x = 0; x < 4; x++) {
      uint8 cr = (uint8)*pSrc++;
 800ebfc:	f935 4b02 	ldrsh.w	r4, [r5], #2
 800ec00:	b2e4      	uxtb	r4, r4
      int16 crR, crG;

      crR = (cr + ((cr * 103U) >> 8U)) - 179;
 800ec02:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800ec06:	fb0a fa04 	mul.w	sl, sl, r4
 800ec0a:	eb04 2a1a 	add.w	sl, r4, sl, lsr #8
 800ec0e:	f1aa 0ab3 	sub.w	sl, sl, #179	@ 0xb3
      pDstR[0] = addAndClamp(pDstR[0], crR);
 800ec12:	4651      	mov	r1, sl
 800ec14:	7838      	ldrb	r0, [r7, #0]
 800ec16:	f7ff fe67 	bl	800e8e8 <addAndClamp>
 800ec1a:	7038      	strb	r0, [r7, #0]
      pDstR[1] = addAndClamp(pDstR[1], crR);
 800ec1c:	4651      	mov	r1, sl
 800ec1e:	7878      	ldrb	r0, [r7, #1]
 800ec20:	f7ff fe62 	bl	800e8e8 <addAndClamp>
 800ec24:	7078      	strb	r0, [r7, #1]

      crG = ((cr * 183U) >> 8U) - 91;
 800ec26:	23b7      	movs	r3, #183	@ 0xb7
 800ec28:	fb03 f404 	mul.w	r4, r3, r4
 800ec2c:	0a24      	lsrs	r4, r4, #8
 800ec2e:	3c5b      	subs	r4, #91	@ 0x5b
      pDstG[0] = subAndClamp(pDstG[0], crG);
 800ec30:	4621      	mov	r1, r4
 800ec32:	7830      	ldrb	r0, [r6, #0]
 800ec34:	f7ff fe67 	bl	800e906 <subAndClamp>
 800ec38:	7030      	strb	r0, [r6, #0]
      pDstG[1] = subAndClamp(pDstG[1], crG);
 800ec3a:	4621      	mov	r1, r4
 800ec3c:	7870      	ldrb	r0, [r6, #1]
 800ec3e:	f7ff fe62 	bl	800e906 <subAndClamp>
 800ec42:	7070      	strb	r0, [r6, #1]

      pDstR += 2;
 800ec44:	3702      	adds	r7, #2
      pDstG += 2;
 800ec46:	3602      	adds	r6, #2
    for (x = 0; x < 4; x++) {
 800ec48:	f108 0801 	add.w	r8, r8, #1
 800ec4c:	fa5f f888 	uxtb.w	r8, r8
 800ec50:	f1b8 0f03 	cmp.w	r8, #3
 800ec54:	d9d2      	bls.n	800ebfc <upsampleCrH+0x18>
    }

    pSrc = pSrc - 4 + 8;
 800ec56:	3508      	adds	r5, #8
  for (y = 0; y < 8; y++) {
 800ec58:	f109 0901 	add.w	r9, r9, #1
 800ec5c:	fa5f f989 	uxtb.w	r9, r9
 800ec60:	f1b9 0f07 	cmp.w	r9, #7
 800ec64:	d802      	bhi.n	800ec6c <upsampleCrH+0x88>
    for (x = 0; x < 4; x++) {
 800ec66:	f04f 0800 	mov.w	r8, #0
 800ec6a:	e7f1      	b.n	800ec50 <upsampleCrH+0x6c>
  }
}
 800ec6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ec70:	2000cc18 	.word	0x2000cc18
 800ec74:	2000cb18 	.word	0x2000cb18
 800ec78:	2000ca18 	.word	0x2000ca18

0800ec7c <upsampleCrV>:

static void upsampleCrV(uint8 srcOfs, uint8 dstOfs) {
 800ec7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

  uint8 x, y;
  int16 *pSrc = gCoeffBuf + srcOfs;
 800ec80:	4f22      	ldr	r7, [pc, #136]	@ (800ed0c <upsampleCrV+0x90>)
 800ec82:	eb07 0740 	add.w	r7, r7, r0, lsl #1
  uint8 *pDstR = gMCUBufR + dstOfs;
 800ec86:	4e22      	ldr	r6, [pc, #136]	@ (800ed10 <upsampleCrV+0x94>)
 800ec88:	440e      	add	r6, r1
  uint8 *pDstG = gMCUBufG + dstOfs;
 800ec8a:	4d22      	ldr	r5, [pc, #136]	@ (800ed14 <upsampleCrV+0x98>)
 800ec8c:	440d      	add	r5, r1
  for (y = 0; y < 4; y++) {
 800ec8e:	f04f 0900 	mov.w	r9, #0
 800ec92:	e032      	b.n	800ecfa <upsampleCrV+0x7e>
    for (x = 0; x < 8; x++) {
      uint8 cr = (uint8)*pSrc++;
 800ec94:	f937 4b02 	ldrsh.w	r4, [r7], #2
 800ec98:	b2e4      	uxtb	r4, r4
      int16 crR, crG;

      crR = (cr + ((cr * 103U) >> 8U)) - 179;
 800ec9a:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800ec9e:	fb0a fa04 	mul.w	sl, sl, r4
 800eca2:	eb04 2a1a 	add.w	sl, r4, sl, lsr #8
 800eca6:	f1aa 0ab3 	sub.w	sl, sl, #179	@ 0xb3
      pDstR[0] = addAndClamp(pDstR[0], crR);
 800ecaa:	4651      	mov	r1, sl
 800ecac:	7830      	ldrb	r0, [r6, #0]
 800ecae:	f7ff fe1b 	bl	800e8e8 <addAndClamp>
 800ecb2:	7030      	strb	r0, [r6, #0]
      pDstR[8] = addAndClamp(pDstR[8], crR);
 800ecb4:	4651      	mov	r1, sl
 800ecb6:	7a30      	ldrb	r0, [r6, #8]
 800ecb8:	f7ff fe16 	bl	800e8e8 <addAndClamp>
 800ecbc:	7230      	strb	r0, [r6, #8]

      crG = ((cr * 183U) >> 8U) - 91;
 800ecbe:	23b7      	movs	r3, #183	@ 0xb7
 800ecc0:	fb03 f404 	mul.w	r4, r3, r4
 800ecc4:	0a24      	lsrs	r4, r4, #8
 800ecc6:	3c5b      	subs	r4, #91	@ 0x5b
      pDstG[0] = subAndClamp(pDstG[0], crG);
 800ecc8:	4621      	mov	r1, r4
 800ecca:	7828      	ldrb	r0, [r5, #0]
 800eccc:	f7ff fe1b 	bl	800e906 <subAndClamp>
 800ecd0:	7028      	strb	r0, [r5, #0]
      pDstG[8] = subAndClamp(pDstG[8], crG);
 800ecd2:	4621      	mov	r1, r4
 800ecd4:	7a28      	ldrb	r0, [r5, #8]
 800ecd6:	f7ff fe16 	bl	800e906 <subAndClamp>
 800ecda:	7228      	strb	r0, [r5, #8]

      ++pDstR;
 800ecdc:	3601      	adds	r6, #1
      ++pDstG;
 800ecde:	3501      	adds	r5, #1
    for (x = 0; x < 8; x++) {
 800ece0:	f108 0801 	add.w	r8, r8, #1
 800ece4:	fa5f f888 	uxtb.w	r8, r8
 800ece8:	f1b8 0f07 	cmp.w	r8, #7
 800ecec:	d9d2      	bls.n	800ec94 <upsampleCrV+0x18>
    }

    pDstR = pDstR - 8 + 16;
 800ecee:	3608      	adds	r6, #8
    pDstG = pDstG - 8 + 16;
 800ecf0:	3508      	adds	r5, #8
  for (y = 0; y < 4; y++) {
 800ecf2:	f109 0901 	add.w	r9, r9, #1
 800ecf6:	fa5f f989 	uxtb.w	r9, r9
 800ecfa:	f1b9 0f03 	cmp.w	r9, #3
 800ecfe:	d802      	bhi.n	800ed06 <upsampleCrV+0x8a>
    for (x = 0; x < 8; x++) {
 800ed00:	f04f 0800 	mov.w	r8, #0
 800ed04:	e7f0      	b.n	800ece8 <upsampleCrV+0x6c>
  }
}
 800ed06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ed0a:	bf00      	nop
 800ed0c:	2000cc18 	.word	0x2000cc18
 800ed10:	2000cb18 	.word	0x2000cb18
 800ed14:	2000ca18 	.word	0x2000ca18

0800ed18 <copyY>:

static void copyY(uint8 dstOfs) {
 800ed18:	b410      	push	{r4}
  uint8 i;
  uint8 *pRDst = gMCUBufR + dstOfs;
 800ed1a:	490d      	ldr	r1, [pc, #52]	@ (800ed50 <copyY+0x38>)
 800ed1c:	4401      	add	r1, r0
  uint8 *pGDst = gMCUBufG + dstOfs;
 800ed1e:	4a0d      	ldr	r2, [pc, #52]	@ (800ed54 <copyY+0x3c>)
 800ed20:	4402      	add	r2, r0
  uint8 *pBDst = gMCUBufB + dstOfs;
 800ed22:	4b0d      	ldr	r3, [pc, #52]	@ (800ed58 <copyY+0x40>)
 800ed24:	4403      	add	r3, r0
  int16 *pSrc = gCoeffBuf;
 800ed26:	480d      	ldr	r0, [pc, #52]	@ (800ed5c <copyY+0x44>)

  for (i = 64; i > 0; i--) {
 800ed28:	2440      	movs	r4, #64	@ 0x40
 800ed2a:	e00b      	b.n	800ed44 <copyY+0x2c>
    uint8 c = (uint8)*pSrc++;
 800ed2c:	f930 cb02 	ldrsh.w	ip, [r0], #2
 800ed30:	fa5f fc8c 	uxtb.w	ip, ip

    *pRDst++ = c;
 800ed34:	f801 cb01 	strb.w	ip, [r1], #1
    *pGDst++ = c;
 800ed38:	f802 cb01 	strb.w	ip, [r2], #1
    *pBDst++ = c;
 800ed3c:	f803 cb01 	strb.w	ip, [r3], #1
  for (i = 64; i > 0; i--) {
 800ed40:	3c01      	subs	r4, #1
 800ed42:	b2e4      	uxtb	r4, r4
 800ed44:	2c00      	cmp	r4, #0
 800ed46:	d1f1      	bne.n	800ed2c <copyY+0x14>
  }
}
 800ed48:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ed4c:	4770      	bx	lr
 800ed4e:	bf00      	nop
 800ed50:	2000cb18 	.word	0x2000cb18
 800ed54:	2000ca18 	.word	0x2000ca18
 800ed58:	2000c918 	.word	0x2000c918
 800ed5c:	2000cc18 	.word	0x2000cc18

0800ed60 <convertCb>:

static void convertCb(uint8 dstOfs) {
 800ed60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint8 i;
  uint8 *pDstG = gMCUBufG + dstOfs;
 800ed64:	4b13      	ldr	r3, [pc, #76]	@ (800edb4 <convertCb+0x54>)
 800ed66:	eb00 0803 	add.w	r8, r0, r3
  uint8 *pDstB = gMCUBufB + dstOfs;
 800ed6a:	4f13      	ldr	r7, [pc, #76]	@ (800edb8 <convertCb+0x58>)
 800ed6c:	4407      	add	r7, r0
  int16 *pSrc = gCoeffBuf;
 800ed6e:	4d13      	ldr	r5, [pc, #76]	@ (800edbc <convertCb+0x5c>)

  for (i = 64; i > 0; i--) {
 800ed70:	2640      	movs	r6, #64	@ 0x40
 800ed72:	e01a      	b.n	800edaa <convertCb+0x4a>
    uint8 cb = (uint8)*pSrc++;
 800ed74:	f935 4b02 	ldrsh.w	r4, [r5], #2
 800ed78:	b2e4      	uxtb	r4, r4
    int16 cbG, cbB;

    cbG = ((cb * 88U) >> 8U) - 44U;
 800ed7a:	2158      	movs	r1, #88	@ 0x58
 800ed7c:	fb04 f101 	mul.w	r1, r4, r1
 800ed80:	0a09      	lsrs	r1, r1, #8
    pDstG[0] = subAndClamp(pDstG[0], cbG);
 800ed82:	392c      	subs	r1, #44	@ 0x2c
 800ed84:	f898 0000 	ldrb.w	r0, [r8]
 800ed88:	f7ff fdbd 	bl	800e906 <subAndClamp>
 800ed8c:	f808 0b01 	strb.w	r0, [r8], #1

    cbB = (cb + ((cb * 198U) >> 8U)) - 227U;
 800ed90:	23c6      	movs	r3, #198	@ 0xc6
 800ed92:	fb04 f303 	mul.w	r3, r4, r3
 800ed96:	eb04 2113 	add.w	r1, r4, r3, lsr #8
    pDstB[0] = addAndClamp(pDstB[0], cbB);
 800ed9a:	39e3      	subs	r1, #227	@ 0xe3
 800ed9c:	7838      	ldrb	r0, [r7, #0]
 800ed9e:	f7ff fda3 	bl	800e8e8 <addAndClamp>
 800eda2:	f807 0b01 	strb.w	r0, [r7], #1
  for (i = 64; i > 0; i--) {
 800eda6:	3e01      	subs	r6, #1
 800eda8:	b2f6      	uxtb	r6, r6
 800edaa:	2e00      	cmp	r6, #0
 800edac:	d1e2      	bne.n	800ed74 <convertCb+0x14>

    ++pDstG;
    ++pDstB;
  }
}
 800edae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800edb2:	bf00      	nop
 800edb4:	2000ca18 	.word	0x2000ca18
 800edb8:	2000c918 	.word	0x2000c918
 800edbc:	2000cc18 	.word	0x2000cc18

0800edc0 <convertCr>:

static void convertCr(uint8 dstOfs) {
 800edc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint8 i;
  uint8 *pDstR = gMCUBufR + dstOfs;
 800edc4:	4b13      	ldr	r3, [pc, #76]	@ (800ee14 <convertCr+0x54>)
 800edc6:	eb00 0803 	add.w	r8, r0, r3
  uint8 *pDstG = gMCUBufG + dstOfs;
 800edca:	4f13      	ldr	r7, [pc, #76]	@ (800ee18 <convertCr+0x58>)
 800edcc:	4407      	add	r7, r0
  int16 *pSrc = gCoeffBuf;
 800edce:	4d13      	ldr	r5, [pc, #76]	@ (800ee1c <convertCr+0x5c>)

  for (i = 64; i > 0; i--) {
 800edd0:	2640      	movs	r6, #64	@ 0x40
 800edd2:	e01a      	b.n	800ee0a <convertCr+0x4a>
    uint8 cr = (uint8)*pSrc++;
 800edd4:	f935 4b02 	ldrsh.w	r4, [r5], #2
 800edd8:	b2e4      	uxtb	r4, r4
    int16 crR, crG;

    crR = (cr + ((cr * 103U) >> 8U)) - 179;
 800edda:	2167      	movs	r1, #103	@ 0x67
 800eddc:	fb04 f101 	mul.w	r1, r4, r1
 800ede0:	eb04 2111 	add.w	r1, r4, r1, lsr #8
    pDstR[0] = addAndClamp(pDstR[0], crR);
 800ede4:	39b3      	subs	r1, #179	@ 0xb3
 800ede6:	f898 0000 	ldrb.w	r0, [r8]
 800edea:	f7ff fd7d 	bl	800e8e8 <addAndClamp>
 800edee:	f808 0b01 	strb.w	r0, [r8], #1

    crG = ((cr * 183U) >> 8U) - 91;
 800edf2:	23b7      	movs	r3, #183	@ 0xb7
 800edf4:	fb03 f104 	mul.w	r1, r3, r4
 800edf8:	0a09      	lsrs	r1, r1, #8
    pDstG[0] = subAndClamp(pDstG[0], crG);
 800edfa:	395b      	subs	r1, #91	@ 0x5b
 800edfc:	7838      	ldrb	r0, [r7, #0]
 800edfe:	f7ff fd82 	bl	800e906 <subAndClamp>
 800ee02:	f807 0b01 	strb.w	r0, [r7], #1
  for (i = 64; i > 0; i--) {
 800ee06:	3e01      	subs	r6, #1
 800ee08:	b2f6      	uxtb	r6, r6
 800ee0a:	2e00      	cmp	r6, #0
 800ee0c:	d1e2      	bne.n	800edd4 <convertCr+0x14>

    ++pDstR;
    ++pDstG;
  }
}
 800ee0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee12:	bf00      	nop
 800ee14:	2000cb18 	.word	0x2000cb18
 800ee18:	2000ca18 	.word	0x2000ca18
 800ee1c:	2000cc18 	.word	0x2000cc18

0800ee20 <transformBlock>:

static void transformBlock(uint8 mcuBlock) {
 800ee20:	b510      	push	{r4, lr}
 800ee22:	4604      	mov	r4, r0
  idctRows();
 800ee24:	f7ff fb7e 	bl	800e524 <idctRows>
  idctCols();
 800ee28:	f7ff fc36 	bl	800e698 <idctCols>

  switch (gScanType) {
 800ee2c:	4b4b      	ldr	r3, [pc, #300]	@ (800ef5c <transformBlock+0x13c>)
 800ee2e:	781b      	ldrb	r3, [r3, #0]
 800ee30:	2b04      	cmp	r3, #4
 800ee32:	d807      	bhi.n	800ee44 <transformBlock+0x24>
 800ee34:	e8df f003 	tbb	[pc, r3]
 800ee38:	19390703 	.word	0x19390703
 800ee3c:	59          	.byte	0x59
 800ee3d:	00          	.byte	0x00
  case PJPG_GRAYSCALE: {

    copyY(0);
 800ee3e:	2000      	movs	r0, #0
 800ee40:	f7ff ff6a 	bl	800ed18 <copyY>
    }

    break;
  }
  }
}
 800ee44:	bd10      	pop	{r4, pc}
    switch (mcuBlock) {
 800ee46:	2c01      	cmp	r4, #1
 800ee48:	d007      	beq.n	800ee5a <transformBlock+0x3a>
 800ee4a:	2c02      	cmp	r4, #2
 800ee4c:	d009      	beq.n	800ee62 <transformBlock+0x42>
 800ee4e:	2c00      	cmp	r4, #0
 800ee50:	d1f8      	bne.n	800ee44 <transformBlock+0x24>
      copyY(0);
 800ee52:	2000      	movs	r0, #0
 800ee54:	f7ff ff60 	bl	800ed18 <copyY>
      break;
 800ee58:	e7f4      	b.n	800ee44 <transformBlock+0x24>
      convertCb(0);
 800ee5a:	2000      	movs	r0, #0
 800ee5c:	f7ff ff80 	bl	800ed60 <convertCb>
      break;
 800ee60:	e7f0      	b.n	800ee44 <transformBlock+0x24>
      convertCr(0);
 800ee62:	2000      	movs	r0, #0
 800ee64:	f7ff ffac 	bl	800edc0 <convertCr>
      break;
 800ee68:	e7ec      	b.n	800ee44 <transformBlock+0x24>
    switch (mcuBlock) {
 800ee6a:	2c03      	cmp	r4, #3
 800ee6c:	d8ea      	bhi.n	800ee44 <transformBlock+0x24>
 800ee6e:	e8df f004 	tbb	[pc, r4]
 800ee72:	0602      	.short	0x0602
 800ee74:	130a      	.short	0x130a
      copyY(0);
 800ee76:	2000      	movs	r0, #0
 800ee78:	f7ff ff4e 	bl	800ed18 <copyY>
      break;
 800ee7c:	e7e2      	b.n	800ee44 <transformBlock+0x24>
      copyY(128);
 800ee7e:	2080      	movs	r0, #128	@ 0x80
 800ee80:	f7ff ff4a 	bl	800ed18 <copyY>
      break;
 800ee84:	e7de      	b.n	800ee44 <transformBlock+0x24>
      upsampleCbV(0, 0);
 800ee86:	2100      	movs	r1, #0
 800ee88:	4608      	mov	r0, r1
 800ee8a:	f7ff fdfb 	bl	800ea84 <upsampleCbV>
      upsampleCbV(4 * 8, 128);
 800ee8e:	2180      	movs	r1, #128	@ 0x80
 800ee90:	2020      	movs	r0, #32
 800ee92:	f7ff fdf7 	bl	800ea84 <upsampleCbV>
      break;
 800ee96:	e7d5      	b.n	800ee44 <transformBlock+0x24>
      upsampleCrV(0, 0);
 800ee98:	2100      	movs	r1, #0
 800ee9a:	4608      	mov	r0, r1
 800ee9c:	f7ff feee 	bl	800ec7c <upsampleCrV>
      upsampleCrV(4 * 8, 128);
 800eea0:	2180      	movs	r1, #128	@ 0x80
 800eea2:	2020      	movs	r0, #32
 800eea4:	f7ff feea 	bl	800ec7c <upsampleCrV>
      break;
 800eea8:	e7cc      	b.n	800ee44 <transformBlock+0x24>
    switch (mcuBlock) {
 800eeaa:	2c03      	cmp	r4, #3
 800eeac:	d8ca      	bhi.n	800ee44 <transformBlock+0x24>
 800eeae:	e8df f004 	tbb	[pc, r4]
 800eeb2:	0602      	.short	0x0602
 800eeb4:	130a      	.short	0x130a
      copyY(0);
 800eeb6:	2000      	movs	r0, #0
 800eeb8:	f7ff ff2e 	bl	800ed18 <copyY>
      break;
 800eebc:	e7c2      	b.n	800ee44 <transformBlock+0x24>
      copyY(64);
 800eebe:	2040      	movs	r0, #64	@ 0x40
 800eec0:	f7ff ff2a 	bl	800ed18 <copyY>
      break;
 800eec4:	e7be      	b.n	800ee44 <transformBlock+0x24>
      upsampleCbH(0, 0);
 800eec6:	2100      	movs	r1, #0
 800eec8:	4608      	mov	r0, r1
 800eeca:	f7ff fd8d 	bl	800e9e8 <upsampleCbH>
      upsampleCbH(4, 64);
 800eece:	2140      	movs	r1, #64	@ 0x40
 800eed0:	2004      	movs	r0, #4
 800eed2:	f7ff fd89 	bl	800e9e8 <upsampleCbH>
      break;
 800eed6:	e7b5      	b.n	800ee44 <transformBlock+0x24>
      upsampleCrH(0, 0);
 800eed8:	2100      	movs	r1, #0
 800eeda:	4608      	mov	r0, r1
 800eedc:	f7ff fe82 	bl	800ebe4 <upsampleCrH>
      upsampleCrH(4, 64);
 800eee0:	2140      	movs	r1, #64	@ 0x40
 800eee2:	2004      	movs	r0, #4
 800eee4:	f7ff fe7e 	bl	800ebe4 <upsampleCrH>
      break;
 800eee8:	e7ac      	b.n	800ee44 <transformBlock+0x24>
    switch (mcuBlock) {
 800eeea:	2c05      	cmp	r4, #5
 800eeec:	d8aa      	bhi.n	800ee44 <transformBlock+0x24>
 800eeee:	e8df f004 	tbb	[pc, r4]
 800eef2:	0703      	.short	0x0703
 800eef4:	24130f0b 	.word	0x24130f0b
      copyY(0);
 800eef8:	2000      	movs	r0, #0
 800eefa:	f7ff ff0d 	bl	800ed18 <copyY>
      break;
 800eefe:	e7a1      	b.n	800ee44 <transformBlock+0x24>
      copyY(64);
 800ef00:	2040      	movs	r0, #64	@ 0x40
 800ef02:	f7ff ff09 	bl	800ed18 <copyY>
      break;
 800ef06:	e79d      	b.n	800ee44 <transformBlock+0x24>
      copyY(128);
 800ef08:	2080      	movs	r0, #128	@ 0x80
 800ef0a:	f7ff ff05 	bl	800ed18 <copyY>
      break;
 800ef0e:	e799      	b.n	800ee44 <transformBlock+0x24>
      copyY(192);
 800ef10:	20c0      	movs	r0, #192	@ 0xc0
 800ef12:	f7ff ff01 	bl	800ed18 <copyY>
      break;
 800ef16:	e795      	b.n	800ee44 <transformBlock+0x24>
      upsampleCb(0, 0);
 800ef18:	2100      	movs	r1, #0
 800ef1a:	4608      	mov	r0, r1
 800ef1c:	f7ff fd02 	bl	800e924 <upsampleCb>
      upsampleCb(4, 64);
 800ef20:	2140      	movs	r1, #64	@ 0x40
 800ef22:	2004      	movs	r0, #4
 800ef24:	f7ff fcfe 	bl	800e924 <upsampleCb>
      upsampleCb(4 * 8, 128);
 800ef28:	2180      	movs	r1, #128	@ 0x80
 800ef2a:	2020      	movs	r0, #32
 800ef2c:	f7ff fcfa 	bl	800e924 <upsampleCb>
      upsampleCb(4 + 4 * 8, 192);
 800ef30:	21c0      	movs	r1, #192	@ 0xc0
 800ef32:	2024      	movs	r0, #36	@ 0x24
 800ef34:	f7ff fcf6 	bl	800e924 <upsampleCb>
      break;
 800ef38:	e784      	b.n	800ee44 <transformBlock+0x24>
      upsampleCr(0, 0);
 800ef3a:	2100      	movs	r1, #0
 800ef3c:	4608      	mov	r0, r1
 800ef3e:	f7ff fdef 	bl	800eb20 <upsampleCr>
      upsampleCr(4, 64);
 800ef42:	2140      	movs	r1, #64	@ 0x40
 800ef44:	2004      	movs	r0, #4
 800ef46:	f7ff fdeb 	bl	800eb20 <upsampleCr>
      upsampleCr(4 * 8, 128);
 800ef4a:	2180      	movs	r1, #128	@ 0x80
 800ef4c:	2020      	movs	r0, #32
 800ef4e:	f7ff fde7 	bl	800eb20 <upsampleCr>
      upsampleCr(4 + 4 * 8, 192);
 800ef52:	21c0      	movs	r1, #192	@ 0xc0
 800ef54:	2024      	movs	r0, #36	@ 0x24
 800ef56:	f7ff fde3 	bl	800eb20 <upsampleCr>
}
 800ef5a:	e773      	b.n	800ee44 <transformBlock+0x24>
 800ef5c:	2000c37b 	.word	0x2000c37b

0800ef60 <transformBlockReduce>:

static void transformBlockReduce(uint8 mcuBlock) {
 800ef60:	b570      	push	{r4, r5, r6, lr}
 800ef62:	4605      	mov	r5, r0
  uint8 c = clamp(PJPG_DESCALE(gCoeffBuf[0]) + 128);
 800ef64:	4bac      	ldr	r3, [pc, #688]	@ (800f218 <transformBlockReduce+0x2b8>)
 800ef66:	881b      	ldrh	r3, [r3, #0]
 800ef68:	3340      	adds	r3, #64	@ 0x40
 800ef6a:	2107      	movs	r1, #7
 800ef6c:	b218      	sxth	r0, r3
 800ef6e:	f7fe fbdb 	bl	800d728 <arithmeticRightShiftN16>
 800ef72:	b283      	uxth	r3, r0
 800ef74:	3380      	adds	r3, #128	@ 0x80
 800ef76:	b218      	sxth	r0, r3
 800ef78:	f7ff fac7 	bl	800e50a <clamp>
 800ef7c:	4604      	mov	r4, r0
  int16 cbG, cbB, crR, crG;

  switch (gScanType) {
 800ef7e:	4ba7      	ldr	r3, [pc, #668]	@ (800f21c <transformBlockReduce+0x2bc>)
 800ef80:	781b      	ldrb	r3, [r3, #0]
 800ef82:	2b04      	cmp	r3, #4
 800ef84:	d808      	bhi.n	800ef98 <transformBlockReduce+0x38>
 800ef86:	e8df f013 	tbh	[pc, r3, lsl #1]
 800ef8a:	0005      	.short	0x0005
 800ef8c:	00b00008 	.word	0x00b00008
 800ef90:	011a0047 	.word	0x011a0047
  case PJPG_GRAYSCALE: {

    gMCUBufR[0] = c;
 800ef94:	4ba2      	ldr	r3, [pc, #648]	@ (800f220 <transformBlockReduce+0x2c0>)
 800ef96:	7018      	strb	r0, [r3, #0]
    }
    }
    break;
  }
  }
}
 800ef98:	bd70      	pop	{r4, r5, r6, pc}
    switch (mcuBlock) {
 800ef9a:	2d01      	cmp	r5, #1
 800ef9c:	d00a      	beq.n	800efb4 <transformBlockReduce+0x54>
 800ef9e:	2d02      	cmp	r5, #2
 800efa0:	d021      	beq.n	800efe6 <transformBlockReduce+0x86>
 800efa2:	2d00      	cmp	r5, #0
 800efa4:	d1f8      	bne.n	800ef98 <transformBlockReduce+0x38>
      gMCUBufR[0] = c;
 800efa6:	4b9e      	ldr	r3, [pc, #632]	@ (800f220 <transformBlockReduce+0x2c0>)
 800efa8:	7018      	strb	r0, [r3, #0]
      gMCUBufG[0] = c;
 800efaa:	4b9e      	ldr	r3, [pc, #632]	@ (800f224 <transformBlockReduce+0x2c4>)
 800efac:	7018      	strb	r0, [r3, #0]
      gMCUBufB[0] = c;
 800efae:	4b9e      	ldr	r3, [pc, #632]	@ (800f228 <transformBlockReduce+0x2c8>)
 800efb0:	7018      	strb	r0, [r3, #0]
      break;
 800efb2:	e7f1      	b.n	800ef98 <transformBlockReduce+0x38>
      cbG = ((c * 88U) >> 8U) - 44U;
 800efb4:	2158      	movs	r1, #88	@ 0x58
 800efb6:	fb00 f101 	mul.w	r1, r0, r1
 800efba:	0a09      	lsrs	r1, r1, #8
 800efbc:	392c      	subs	r1, #44	@ 0x2c
      gMCUBufG[0] = subAndClamp(gMCUBufG[0], cbG);
 800efbe:	4d99      	ldr	r5, [pc, #612]	@ (800f224 <transformBlockReduce+0x2c4>)
 800efc0:	b209      	sxth	r1, r1
 800efc2:	7828      	ldrb	r0, [r5, #0]
 800efc4:	f7ff fc9f 	bl	800e906 <subAndClamp>
 800efc8:	7028      	strb	r0, [r5, #0]
      cbB = (c + ((c * 198U) >> 8U)) - 227U;
 800efca:	21c6      	movs	r1, #198	@ 0xc6
 800efcc:	fb04 f101 	mul.w	r1, r4, r1
 800efd0:	eb04 2111 	add.w	r1, r4, r1, lsr #8
 800efd4:	b289      	uxth	r1, r1
 800efd6:	39e3      	subs	r1, #227	@ 0xe3
      gMCUBufB[0] = addAndClamp(gMCUBufB[0], cbB);
 800efd8:	4c93      	ldr	r4, [pc, #588]	@ (800f228 <transformBlockReduce+0x2c8>)
 800efda:	b209      	sxth	r1, r1
 800efdc:	7820      	ldrb	r0, [r4, #0]
 800efde:	f7ff fc83 	bl	800e8e8 <addAndClamp>
 800efe2:	7020      	strb	r0, [r4, #0]
      break;
 800efe4:	e7d8      	b.n	800ef98 <transformBlockReduce+0x38>
      crR = (c + ((c * 103U) >> 8U)) - 179;
 800efe6:	2167      	movs	r1, #103	@ 0x67
 800efe8:	fb00 f101 	mul.w	r1, r0, r1
 800efec:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 800eff0:	b289      	uxth	r1, r1
 800eff2:	39b3      	subs	r1, #179	@ 0xb3
      gMCUBufR[0] = addAndClamp(gMCUBufR[0], crR);
 800eff4:	4d8a      	ldr	r5, [pc, #552]	@ (800f220 <transformBlockReduce+0x2c0>)
 800eff6:	b209      	sxth	r1, r1
 800eff8:	7828      	ldrb	r0, [r5, #0]
 800effa:	f7ff fc75 	bl	800e8e8 <addAndClamp>
 800effe:	7028      	strb	r0, [r5, #0]
      crG = ((c * 183U) >> 8U) - 91;
 800f000:	21b7      	movs	r1, #183	@ 0xb7
 800f002:	fb04 f101 	mul.w	r1, r4, r1
 800f006:	0a09      	lsrs	r1, r1, #8
 800f008:	395b      	subs	r1, #91	@ 0x5b
      gMCUBufG[0] = subAndClamp(gMCUBufG[0], crG);
 800f00a:	4c86      	ldr	r4, [pc, #536]	@ (800f224 <transformBlockReduce+0x2c4>)
 800f00c:	b209      	sxth	r1, r1
 800f00e:	7820      	ldrb	r0, [r4, #0]
 800f010:	f7ff fc79 	bl	800e906 <subAndClamp>
 800f014:	7020      	strb	r0, [r4, #0]
      break;
 800f016:	e7bf      	b.n	800ef98 <transformBlockReduce+0x38>
    switch (mcuBlock) {
 800f018:	2d03      	cmp	r5, #3
 800f01a:	d8bd      	bhi.n	800ef98 <transformBlockReduce+0x38>
 800f01c:	e8df f005 	tbb	[pc, r5]
 800f020:	3c130902 	.word	0x3c130902
      gMCUBufR[0] = c;
 800f024:	4b7e      	ldr	r3, [pc, #504]	@ (800f220 <transformBlockReduce+0x2c0>)
 800f026:	7018      	strb	r0, [r3, #0]
      gMCUBufG[0] = c;
 800f028:	4b7e      	ldr	r3, [pc, #504]	@ (800f224 <transformBlockReduce+0x2c4>)
 800f02a:	7018      	strb	r0, [r3, #0]
      gMCUBufB[0] = c;
 800f02c:	4b7e      	ldr	r3, [pc, #504]	@ (800f228 <transformBlockReduce+0x2c8>)
 800f02e:	7018      	strb	r0, [r3, #0]
      break;
 800f030:	e7b2      	b.n	800ef98 <transformBlockReduce+0x38>
      gMCUBufR[128] = c;
 800f032:	4b7b      	ldr	r3, [pc, #492]	@ (800f220 <transformBlockReduce+0x2c0>)
 800f034:	f883 0080 	strb.w	r0, [r3, #128]	@ 0x80
      gMCUBufG[128] = c;
 800f038:	4b7a      	ldr	r3, [pc, #488]	@ (800f224 <transformBlockReduce+0x2c4>)
 800f03a:	f883 0080 	strb.w	r0, [r3, #128]	@ 0x80
      gMCUBufB[128] = c;
 800f03e:	4b7a      	ldr	r3, [pc, #488]	@ (800f228 <transformBlockReduce+0x2c8>)
 800f040:	f883 0080 	strb.w	r0, [r3, #128]	@ 0x80
      break;
 800f044:	e7a8      	b.n	800ef98 <transformBlockReduce+0x38>
      cbG = ((c * 88U) >> 8U) - 44U;
 800f046:	2558      	movs	r5, #88	@ 0x58
 800f048:	fb00 f505 	mul.w	r5, r0, r5
 800f04c:	0a2d      	lsrs	r5, r5, #8
 800f04e:	3d2c      	subs	r5, #44	@ 0x2c
 800f050:	b22d      	sxth	r5, r5
      gMCUBufG[0] = subAndClamp(gMCUBufG[0], cbG);
 800f052:	4e74      	ldr	r6, [pc, #464]	@ (800f224 <transformBlockReduce+0x2c4>)
 800f054:	4629      	mov	r1, r5
 800f056:	7830      	ldrb	r0, [r6, #0]
 800f058:	f7ff fc55 	bl	800e906 <subAndClamp>
 800f05c:	7030      	strb	r0, [r6, #0]
      gMCUBufG[128] = subAndClamp(gMCUBufG[128], cbG);
 800f05e:	4629      	mov	r1, r5
 800f060:	f896 0080 	ldrb.w	r0, [r6, #128]	@ 0x80
 800f064:	f7ff fc4f 	bl	800e906 <subAndClamp>
 800f068:	f886 0080 	strb.w	r0, [r6, #128]	@ 0x80
      cbB = (c + ((c * 198U) >> 8U)) - 227U;
 800f06c:	23c6      	movs	r3, #198	@ 0xc6
 800f06e:	fb04 f303 	mul.w	r3, r4, r3
 800f072:	eb04 2413 	add.w	r4, r4, r3, lsr #8
 800f076:	b2a4      	uxth	r4, r4
 800f078:	3ce3      	subs	r4, #227	@ 0xe3
 800f07a:	b224      	sxth	r4, r4
      gMCUBufB[0] = addAndClamp(gMCUBufB[0], cbB);
 800f07c:	4d6a      	ldr	r5, [pc, #424]	@ (800f228 <transformBlockReduce+0x2c8>)
 800f07e:	4621      	mov	r1, r4
 800f080:	7828      	ldrb	r0, [r5, #0]
 800f082:	f7ff fc31 	bl	800e8e8 <addAndClamp>
 800f086:	7028      	strb	r0, [r5, #0]
      gMCUBufB[128] = addAndClamp(gMCUBufB[128], cbB);
 800f088:	4621      	mov	r1, r4
 800f08a:	f895 0080 	ldrb.w	r0, [r5, #128]	@ 0x80
 800f08e:	f7ff fc2b 	bl	800e8e8 <addAndClamp>
 800f092:	f885 0080 	strb.w	r0, [r5, #128]	@ 0x80
      break;
 800f096:	e77f      	b.n	800ef98 <transformBlockReduce+0x38>
      crR = (c + ((c * 103U) >> 8U)) - 179;
 800f098:	2567      	movs	r5, #103	@ 0x67
 800f09a:	fb00 f505 	mul.w	r5, r0, r5
 800f09e:	eb00 2515 	add.w	r5, r0, r5, lsr #8
 800f0a2:	b2ad      	uxth	r5, r5
 800f0a4:	3db3      	subs	r5, #179	@ 0xb3
 800f0a6:	b22d      	sxth	r5, r5
      gMCUBufR[0] = addAndClamp(gMCUBufR[0], crR);
 800f0a8:	4e5d      	ldr	r6, [pc, #372]	@ (800f220 <transformBlockReduce+0x2c0>)
 800f0aa:	4629      	mov	r1, r5
 800f0ac:	7830      	ldrb	r0, [r6, #0]
 800f0ae:	f7ff fc1b 	bl	800e8e8 <addAndClamp>
 800f0b2:	7030      	strb	r0, [r6, #0]
      gMCUBufR[128] = addAndClamp(gMCUBufR[128], crR);
 800f0b4:	4629      	mov	r1, r5
 800f0b6:	f896 0080 	ldrb.w	r0, [r6, #128]	@ 0x80
 800f0ba:	f7ff fc15 	bl	800e8e8 <addAndClamp>
 800f0be:	f886 0080 	strb.w	r0, [r6, #128]	@ 0x80
      crG = ((c * 183U) >> 8U) - 91;
 800f0c2:	23b7      	movs	r3, #183	@ 0xb7
 800f0c4:	fb03 f404 	mul.w	r4, r3, r4
 800f0c8:	0a24      	lsrs	r4, r4, #8
 800f0ca:	3c5b      	subs	r4, #91	@ 0x5b
 800f0cc:	b224      	sxth	r4, r4
      gMCUBufG[0] = subAndClamp(gMCUBufG[0], crG);
 800f0ce:	4d55      	ldr	r5, [pc, #340]	@ (800f224 <transformBlockReduce+0x2c4>)
 800f0d0:	4621      	mov	r1, r4
 800f0d2:	7828      	ldrb	r0, [r5, #0]
 800f0d4:	f7ff fc17 	bl	800e906 <subAndClamp>
 800f0d8:	7028      	strb	r0, [r5, #0]
      gMCUBufG[128] = subAndClamp(gMCUBufG[128], crG);
 800f0da:	4621      	mov	r1, r4
 800f0dc:	f895 0080 	ldrb.w	r0, [r5, #128]	@ 0x80
 800f0e0:	f7ff fc11 	bl	800e906 <subAndClamp>
 800f0e4:	f885 0080 	strb.w	r0, [r5, #128]	@ 0x80
      break;
 800f0e8:	e756      	b.n	800ef98 <transformBlockReduce+0x38>
    switch (mcuBlock) {
 800f0ea:	2d03      	cmp	r5, #3
 800f0ec:	f63f af54 	bhi.w	800ef98 <transformBlockReduce+0x38>
 800f0f0:	e8df f005 	tbb	[pc, r5]
 800f0f4:	3c130902 	.word	0x3c130902
      gMCUBufR[0] = c;
 800f0f8:	4b49      	ldr	r3, [pc, #292]	@ (800f220 <transformBlockReduce+0x2c0>)
 800f0fa:	7018      	strb	r0, [r3, #0]
      gMCUBufG[0] = c;
 800f0fc:	4b49      	ldr	r3, [pc, #292]	@ (800f224 <transformBlockReduce+0x2c4>)
 800f0fe:	7018      	strb	r0, [r3, #0]
      gMCUBufB[0] = c;
 800f100:	4b49      	ldr	r3, [pc, #292]	@ (800f228 <transformBlockReduce+0x2c8>)
 800f102:	7018      	strb	r0, [r3, #0]
      break;
 800f104:	e748      	b.n	800ef98 <transformBlockReduce+0x38>
      gMCUBufR[64] = c;
 800f106:	4b46      	ldr	r3, [pc, #280]	@ (800f220 <transformBlockReduce+0x2c0>)
 800f108:	f883 0040 	strb.w	r0, [r3, #64]	@ 0x40
      gMCUBufG[64] = c;
 800f10c:	4b45      	ldr	r3, [pc, #276]	@ (800f224 <transformBlockReduce+0x2c4>)
 800f10e:	f883 0040 	strb.w	r0, [r3, #64]	@ 0x40
      gMCUBufB[64] = c;
 800f112:	4b45      	ldr	r3, [pc, #276]	@ (800f228 <transformBlockReduce+0x2c8>)
 800f114:	f883 0040 	strb.w	r0, [r3, #64]	@ 0x40
      break;
 800f118:	e73e      	b.n	800ef98 <transformBlockReduce+0x38>
      cbG = ((c * 88U) >> 8U) - 44U;
 800f11a:	2558      	movs	r5, #88	@ 0x58
 800f11c:	fb00 f505 	mul.w	r5, r0, r5
 800f120:	0a2d      	lsrs	r5, r5, #8
 800f122:	3d2c      	subs	r5, #44	@ 0x2c
 800f124:	b22d      	sxth	r5, r5
      gMCUBufG[0] = subAndClamp(gMCUBufG[0], cbG);
 800f126:	4e3f      	ldr	r6, [pc, #252]	@ (800f224 <transformBlockReduce+0x2c4>)
 800f128:	4629      	mov	r1, r5
 800f12a:	7830      	ldrb	r0, [r6, #0]
 800f12c:	f7ff fbeb 	bl	800e906 <subAndClamp>
 800f130:	7030      	strb	r0, [r6, #0]
      gMCUBufG[64] = subAndClamp(gMCUBufG[64], cbG);
 800f132:	4629      	mov	r1, r5
 800f134:	f896 0040 	ldrb.w	r0, [r6, #64]	@ 0x40
 800f138:	f7ff fbe5 	bl	800e906 <subAndClamp>
 800f13c:	f886 0040 	strb.w	r0, [r6, #64]	@ 0x40
      cbB = (c + ((c * 198U) >> 8U)) - 227U;
 800f140:	23c6      	movs	r3, #198	@ 0xc6
 800f142:	fb04 f303 	mul.w	r3, r4, r3
 800f146:	eb04 2413 	add.w	r4, r4, r3, lsr #8
 800f14a:	b2a4      	uxth	r4, r4
 800f14c:	3ce3      	subs	r4, #227	@ 0xe3
 800f14e:	b224      	sxth	r4, r4
      gMCUBufB[0] = addAndClamp(gMCUBufB[0], cbB);
 800f150:	4d35      	ldr	r5, [pc, #212]	@ (800f228 <transformBlockReduce+0x2c8>)
 800f152:	4621      	mov	r1, r4
 800f154:	7828      	ldrb	r0, [r5, #0]
 800f156:	f7ff fbc7 	bl	800e8e8 <addAndClamp>
 800f15a:	7028      	strb	r0, [r5, #0]
      gMCUBufB[64] = addAndClamp(gMCUBufB[64], cbB);
 800f15c:	4621      	mov	r1, r4
 800f15e:	f895 0040 	ldrb.w	r0, [r5, #64]	@ 0x40
 800f162:	f7ff fbc1 	bl	800e8e8 <addAndClamp>
 800f166:	f885 0040 	strb.w	r0, [r5, #64]	@ 0x40
      break;
 800f16a:	e715      	b.n	800ef98 <transformBlockReduce+0x38>
      crR = (c + ((c * 103U) >> 8U)) - 179;
 800f16c:	2567      	movs	r5, #103	@ 0x67
 800f16e:	fb00 f505 	mul.w	r5, r0, r5
 800f172:	eb00 2515 	add.w	r5, r0, r5, lsr #8
 800f176:	b2ad      	uxth	r5, r5
 800f178:	3db3      	subs	r5, #179	@ 0xb3
 800f17a:	b22d      	sxth	r5, r5
      gMCUBufR[0] = addAndClamp(gMCUBufR[0], crR);
 800f17c:	4e28      	ldr	r6, [pc, #160]	@ (800f220 <transformBlockReduce+0x2c0>)
 800f17e:	4629      	mov	r1, r5
 800f180:	7830      	ldrb	r0, [r6, #0]
 800f182:	f7ff fbb1 	bl	800e8e8 <addAndClamp>
 800f186:	7030      	strb	r0, [r6, #0]
      gMCUBufR[64] = addAndClamp(gMCUBufR[64], crR);
 800f188:	4629      	mov	r1, r5
 800f18a:	f896 0040 	ldrb.w	r0, [r6, #64]	@ 0x40
 800f18e:	f7ff fbab 	bl	800e8e8 <addAndClamp>
 800f192:	f886 0040 	strb.w	r0, [r6, #64]	@ 0x40
      crG = ((c * 183U) >> 8U) - 91;
 800f196:	23b7      	movs	r3, #183	@ 0xb7
 800f198:	fb03 f404 	mul.w	r4, r3, r4
 800f19c:	0a24      	lsrs	r4, r4, #8
 800f19e:	3c5b      	subs	r4, #91	@ 0x5b
 800f1a0:	b224      	sxth	r4, r4
      gMCUBufG[0] = subAndClamp(gMCUBufG[0], crG);
 800f1a2:	4d20      	ldr	r5, [pc, #128]	@ (800f224 <transformBlockReduce+0x2c4>)
 800f1a4:	4621      	mov	r1, r4
 800f1a6:	7828      	ldrb	r0, [r5, #0]
 800f1a8:	f7ff fbad 	bl	800e906 <subAndClamp>
 800f1ac:	7028      	strb	r0, [r5, #0]
      gMCUBufG[64] = subAndClamp(gMCUBufG[64], crG);
 800f1ae:	4621      	mov	r1, r4
 800f1b0:	f895 0040 	ldrb.w	r0, [r5, #64]	@ 0x40
 800f1b4:	f7ff fba7 	bl	800e906 <subAndClamp>
 800f1b8:	f885 0040 	strb.w	r0, [r5, #64]	@ 0x40
      break;
 800f1bc:	e6ec      	b.n	800ef98 <transformBlockReduce+0x38>
    switch (mcuBlock) {
 800f1be:	2d05      	cmp	r5, #5
 800f1c0:	f63f aeea 	bhi.w	800ef98 <transformBlockReduce+0x38>
 800f1c4:	e8df f005 	tbb	[pc, r5]
 800f1c8:	1e140a03 	.word	0x1e140a03
 800f1cc:	7732      	.short	0x7732
      gMCUBufR[0] = c;
 800f1ce:	4b14      	ldr	r3, [pc, #80]	@ (800f220 <transformBlockReduce+0x2c0>)
 800f1d0:	7018      	strb	r0, [r3, #0]
      gMCUBufG[0] = c;
 800f1d2:	4b14      	ldr	r3, [pc, #80]	@ (800f224 <transformBlockReduce+0x2c4>)
 800f1d4:	7018      	strb	r0, [r3, #0]
      gMCUBufB[0] = c;
 800f1d6:	4b14      	ldr	r3, [pc, #80]	@ (800f228 <transformBlockReduce+0x2c8>)
 800f1d8:	7018      	strb	r0, [r3, #0]
      break;
 800f1da:	e6dd      	b.n	800ef98 <transformBlockReduce+0x38>
      gMCUBufR[64] = c;
 800f1dc:	4b10      	ldr	r3, [pc, #64]	@ (800f220 <transformBlockReduce+0x2c0>)
 800f1de:	f883 0040 	strb.w	r0, [r3, #64]	@ 0x40
      gMCUBufG[64] = c;
 800f1e2:	4b10      	ldr	r3, [pc, #64]	@ (800f224 <transformBlockReduce+0x2c4>)
 800f1e4:	f883 0040 	strb.w	r0, [r3, #64]	@ 0x40
      gMCUBufB[64] = c;
 800f1e8:	4b0f      	ldr	r3, [pc, #60]	@ (800f228 <transformBlockReduce+0x2c8>)
 800f1ea:	f883 0040 	strb.w	r0, [r3, #64]	@ 0x40
      break;
 800f1ee:	e6d3      	b.n	800ef98 <transformBlockReduce+0x38>
      gMCUBufR[128] = c;
 800f1f0:	4b0b      	ldr	r3, [pc, #44]	@ (800f220 <transformBlockReduce+0x2c0>)
 800f1f2:	f883 0080 	strb.w	r0, [r3, #128]	@ 0x80
      gMCUBufG[128] = c;
 800f1f6:	4b0b      	ldr	r3, [pc, #44]	@ (800f224 <transformBlockReduce+0x2c4>)
 800f1f8:	f883 0080 	strb.w	r0, [r3, #128]	@ 0x80
      gMCUBufB[128] = c;
 800f1fc:	4b0a      	ldr	r3, [pc, #40]	@ (800f228 <transformBlockReduce+0x2c8>)
 800f1fe:	f883 0080 	strb.w	r0, [r3, #128]	@ 0x80
      break;
 800f202:	e6c9      	b.n	800ef98 <transformBlockReduce+0x38>
      gMCUBufR[192] = c;
 800f204:	4b06      	ldr	r3, [pc, #24]	@ (800f220 <transformBlockReduce+0x2c0>)
 800f206:	f883 00c0 	strb.w	r0, [r3, #192]	@ 0xc0
      gMCUBufG[192] = c;
 800f20a:	4b06      	ldr	r3, [pc, #24]	@ (800f224 <transformBlockReduce+0x2c4>)
 800f20c:	f883 00c0 	strb.w	r0, [r3, #192]	@ 0xc0
      gMCUBufB[192] = c;
 800f210:	4b05      	ldr	r3, [pc, #20]	@ (800f228 <transformBlockReduce+0x2c8>)
 800f212:	f883 00c0 	strb.w	r0, [r3, #192]	@ 0xc0
      break;
 800f216:	e6bf      	b.n	800ef98 <transformBlockReduce+0x38>
 800f218:	2000cc18 	.word	0x2000cc18
 800f21c:	2000c37b 	.word	0x2000c37b
 800f220:	2000cb18 	.word	0x2000cb18
 800f224:	2000ca18 	.word	0x2000ca18
 800f228:	2000c918 	.word	0x2000c918
      cbG = ((c * 88U) >> 8U) - 44U;
 800f22c:	2558      	movs	r5, #88	@ 0x58
 800f22e:	fb00 f505 	mul.w	r5, r0, r5
 800f232:	0a2d      	lsrs	r5, r5, #8
 800f234:	3d2c      	subs	r5, #44	@ 0x2c
 800f236:	b22d      	sxth	r5, r5
      gMCUBufG[0] = subAndClamp(gMCUBufG[0], cbG);
 800f238:	4e41      	ldr	r6, [pc, #260]	@ (800f340 <transformBlockReduce+0x3e0>)
 800f23a:	4629      	mov	r1, r5
 800f23c:	7830      	ldrb	r0, [r6, #0]
 800f23e:	f7ff fb62 	bl	800e906 <subAndClamp>
 800f242:	7030      	strb	r0, [r6, #0]
      gMCUBufG[64] = subAndClamp(gMCUBufG[64], cbG);
 800f244:	4629      	mov	r1, r5
 800f246:	f896 0040 	ldrb.w	r0, [r6, #64]	@ 0x40
 800f24a:	f7ff fb5c 	bl	800e906 <subAndClamp>
 800f24e:	f886 0040 	strb.w	r0, [r6, #64]	@ 0x40
      gMCUBufG[128] = subAndClamp(gMCUBufG[128], cbG);
 800f252:	4629      	mov	r1, r5
 800f254:	f896 0080 	ldrb.w	r0, [r6, #128]	@ 0x80
 800f258:	f7ff fb55 	bl	800e906 <subAndClamp>
 800f25c:	f886 0080 	strb.w	r0, [r6, #128]	@ 0x80
      gMCUBufG[192] = subAndClamp(gMCUBufG[192], cbG);
 800f260:	4629      	mov	r1, r5
 800f262:	f896 00c0 	ldrb.w	r0, [r6, #192]	@ 0xc0
 800f266:	f7ff fb4e 	bl	800e906 <subAndClamp>
 800f26a:	f886 00c0 	strb.w	r0, [r6, #192]	@ 0xc0
      cbB = (c + ((c * 198U) >> 8U)) - 227U;
 800f26e:	23c6      	movs	r3, #198	@ 0xc6
 800f270:	fb04 f303 	mul.w	r3, r4, r3
 800f274:	eb04 2413 	add.w	r4, r4, r3, lsr #8
 800f278:	b2a4      	uxth	r4, r4
 800f27a:	3ce3      	subs	r4, #227	@ 0xe3
 800f27c:	b224      	sxth	r4, r4
      gMCUBufB[0] = addAndClamp(gMCUBufB[0], cbB);
 800f27e:	4d31      	ldr	r5, [pc, #196]	@ (800f344 <transformBlockReduce+0x3e4>)
 800f280:	4621      	mov	r1, r4
 800f282:	7828      	ldrb	r0, [r5, #0]
 800f284:	f7ff fb30 	bl	800e8e8 <addAndClamp>
 800f288:	7028      	strb	r0, [r5, #0]
      gMCUBufB[64] = addAndClamp(gMCUBufB[64], cbB);
 800f28a:	4621      	mov	r1, r4
 800f28c:	f895 0040 	ldrb.w	r0, [r5, #64]	@ 0x40
 800f290:	f7ff fb2a 	bl	800e8e8 <addAndClamp>
 800f294:	f885 0040 	strb.w	r0, [r5, #64]	@ 0x40
      gMCUBufB[128] = addAndClamp(gMCUBufB[128], cbB);
 800f298:	4621      	mov	r1, r4
 800f29a:	f895 0080 	ldrb.w	r0, [r5, #128]	@ 0x80
 800f29e:	f7ff fb23 	bl	800e8e8 <addAndClamp>
 800f2a2:	f885 0080 	strb.w	r0, [r5, #128]	@ 0x80
      gMCUBufB[192] = addAndClamp(gMCUBufB[192], cbB);
 800f2a6:	4621      	mov	r1, r4
 800f2a8:	f895 00c0 	ldrb.w	r0, [r5, #192]	@ 0xc0
 800f2ac:	f7ff fb1c 	bl	800e8e8 <addAndClamp>
 800f2b0:	f885 00c0 	strb.w	r0, [r5, #192]	@ 0xc0
      break;
 800f2b4:	e670      	b.n	800ef98 <transformBlockReduce+0x38>
      crR = (c + ((c * 103U) >> 8U)) - 179;
 800f2b6:	2567      	movs	r5, #103	@ 0x67
 800f2b8:	fb00 f505 	mul.w	r5, r0, r5
 800f2bc:	eb00 2515 	add.w	r5, r0, r5, lsr #8
 800f2c0:	b2ad      	uxth	r5, r5
 800f2c2:	3db3      	subs	r5, #179	@ 0xb3
 800f2c4:	b22d      	sxth	r5, r5
      gMCUBufR[0] = addAndClamp(gMCUBufR[0], crR);
 800f2c6:	4e20      	ldr	r6, [pc, #128]	@ (800f348 <transformBlockReduce+0x3e8>)
 800f2c8:	4629      	mov	r1, r5
 800f2ca:	7830      	ldrb	r0, [r6, #0]
 800f2cc:	f7ff fb0c 	bl	800e8e8 <addAndClamp>
 800f2d0:	7030      	strb	r0, [r6, #0]
      gMCUBufR[64] = addAndClamp(gMCUBufR[64], crR);
 800f2d2:	4629      	mov	r1, r5
 800f2d4:	f896 0040 	ldrb.w	r0, [r6, #64]	@ 0x40
 800f2d8:	f7ff fb06 	bl	800e8e8 <addAndClamp>
 800f2dc:	f886 0040 	strb.w	r0, [r6, #64]	@ 0x40
      gMCUBufR[128] = addAndClamp(gMCUBufR[128], crR);
 800f2e0:	4629      	mov	r1, r5
 800f2e2:	f896 0080 	ldrb.w	r0, [r6, #128]	@ 0x80
 800f2e6:	f7ff faff 	bl	800e8e8 <addAndClamp>
 800f2ea:	f886 0080 	strb.w	r0, [r6, #128]	@ 0x80
      gMCUBufR[192] = addAndClamp(gMCUBufR[192], crR);
 800f2ee:	4629      	mov	r1, r5
 800f2f0:	f896 00c0 	ldrb.w	r0, [r6, #192]	@ 0xc0
 800f2f4:	f7ff faf8 	bl	800e8e8 <addAndClamp>
 800f2f8:	f886 00c0 	strb.w	r0, [r6, #192]	@ 0xc0
      crG = ((c * 183U) >> 8U) - 91;
 800f2fc:	23b7      	movs	r3, #183	@ 0xb7
 800f2fe:	fb03 f404 	mul.w	r4, r3, r4
 800f302:	0a24      	lsrs	r4, r4, #8
 800f304:	3c5b      	subs	r4, #91	@ 0x5b
 800f306:	b224      	sxth	r4, r4
      gMCUBufG[0] = subAndClamp(gMCUBufG[0], crG);
 800f308:	4d0d      	ldr	r5, [pc, #52]	@ (800f340 <transformBlockReduce+0x3e0>)
 800f30a:	4621      	mov	r1, r4
 800f30c:	7828      	ldrb	r0, [r5, #0]
 800f30e:	f7ff fafa 	bl	800e906 <subAndClamp>
 800f312:	7028      	strb	r0, [r5, #0]
      gMCUBufG[64] = subAndClamp(gMCUBufG[64], crG);
 800f314:	4621      	mov	r1, r4
 800f316:	f895 0040 	ldrb.w	r0, [r5, #64]	@ 0x40
 800f31a:	f7ff faf4 	bl	800e906 <subAndClamp>
 800f31e:	f885 0040 	strb.w	r0, [r5, #64]	@ 0x40
      gMCUBufG[128] = subAndClamp(gMCUBufG[128], crG);
 800f322:	4621      	mov	r1, r4
 800f324:	f895 0080 	ldrb.w	r0, [r5, #128]	@ 0x80
 800f328:	f7ff faed 	bl	800e906 <subAndClamp>
 800f32c:	f885 0080 	strb.w	r0, [r5, #128]	@ 0x80
      gMCUBufG[192] = subAndClamp(gMCUBufG[192], crG);
 800f330:	4621      	mov	r1, r4
 800f332:	f895 00c0 	ldrb.w	r0, [r5, #192]	@ 0xc0
 800f336:	f7ff fae6 	bl	800e906 <subAndClamp>
 800f33a:	f885 00c0 	strb.w	r0, [r5, #192]	@ 0xc0
}
 800f33e:	e62b      	b.n	800ef98 <transformBlockReduce+0x38>
 800f340:	2000ca18 	.word	0x2000ca18
 800f344:	2000c918 	.word	0x2000c918
 800f348:	2000cb18 	.word	0x2000cb18

0800f34c <decodeNextMCU>:

static uint8 decodeNextMCU(void) {
 800f34c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint8 status;
  uint8 mcuBlock;

  if (gRestartInterval) {
 800f350:	4b73      	ldr	r3, [pc, #460]	@ (800f520 <decodeNextMCU+0x1d4>)
 800f352:	881b      	ldrh	r3, [r3, #0]
 800f354:	b133      	cbz	r3, 800f364 <decodeNextMCU+0x18>
    if (gRestartsLeft == 0) {
 800f356:	4b73      	ldr	r3, [pc, #460]	@ (800f524 <decodeNextMCU+0x1d8>)
 800f358:	881b      	ldrh	r3, [r3, #0]
 800f35a:	b133      	cbz	r3, 800f36a <decodeNextMCU+0x1e>
      status = processRestart();
      if (status)
        return status;
    }
    gRestartsLeft--;
 800f35c:	4a71      	ldr	r2, [pc, #452]	@ (800f524 <decodeNextMCU+0x1d8>)
 800f35e:	8813      	ldrh	r3, [r2, #0]
 800f360:	3b01      	subs	r3, #1
 800f362:	8013      	strh	r3, [r2, #0]
            break;
        }
      }

      while (k < 64)
        gCoeffBuf[ZAG[k++]] = 0;
 800f364:	f04f 0800 	mov.w	r8, #0
 800f368:	e09b      	b.n	800f4a2 <decodeNextMCU+0x156>
      status = processRestart();
 800f36a:	f7fe fe05 	bl	800df78 <processRestart>
      if (status)
 800f36e:	2800      	cmp	r0, #0
 800f370:	d0f4      	beq.n	800f35c <decodeNextMCU+0x10>
 800f372:	e0d1      	b.n	800f518 <decodeNextMCU+0x1cc>
    const int16 *pQ = compQuant ? gQuant1 : gQuant0;
 800f374:	4f6c      	ldr	r7, [pc, #432]	@ (800f528 <decodeNextMCU+0x1dc>)
 800f376:	e0a3      	b.n	800f4c0 <decodeNextMCU+0x174>
    uint8 s = huffDecode(compDCTab ? &gHuffTab1 : &gHuffTab0,
 800f378:	486c      	ldr	r0, [pc, #432]	@ (800f52c <decodeNextMCU+0x1e0>)
 800f37a:	496d      	ldr	r1, [pc, #436]	@ (800f530 <decodeNextMCU+0x1e4>)
 800f37c:	e0a5      	b.n	800f4ca <decodeNextMCU+0x17e>
      r = getBits2(numExtraBits);
 800f37e:	f7fe fabc 	bl	800d8fa <getBits2>
 800f382:	e0aa      	b.n	800f4da <decodeNextMCU+0x18e>
        s = huffDecode(compACTab ? &gHuffTab3 : &gHuffTab2,
 800f384:	486b      	ldr	r0, [pc, #428]	@ (800f534 <decodeNextMCU+0x1e8>)
 800f386:	496c      	ldr	r1, [pc, #432]	@ (800f538 <decodeNextMCU+0x1ec>)
 800f388:	e012      	b.n	800f3b0 <decodeNextMCU+0x64>
          getBits2(numExtraBits);
 800f38a:	4638      	mov	r0, r7
 800f38c:	f7fe fab5 	bl	800d8fa <getBits2>
 800f390:	e014      	b.n	800f3bc <decodeNextMCU+0x70>
          if (r == 15) {
 800f392:	2c0f      	cmp	r4, #15
 800f394:	d120      	bne.n	800f3d8 <decodeNextMCU+0x8c>
            if ((k + 16) > 64)
 800f396:	2d30      	cmp	r5, #48	@ 0x30
 800f398:	f200 80bd 	bhi.w	800f516 <decodeNextMCU+0x1ca>
            k += (16 - 1);
 800f39c:	350f      	adds	r5, #15
 800f39e:	b2ed      	uxtb	r5, r5
      for (k = 1; k < 64; k++) {
 800f3a0:	3501      	adds	r5, #1
 800f3a2:	b2ed      	uxtb	r5, r5
 800f3a4:	2d3f      	cmp	r5, #63	@ 0x3f
 800f3a6:	d817      	bhi.n	800f3d8 <decodeNextMCU+0x8c>
        s = huffDecode(compACTab ? &gHuffTab3 : &gHuffTab2,
 800f3a8:	2e00      	cmp	r6, #0
 800f3aa:	d0eb      	beq.n	800f384 <decodeNextMCU+0x38>
 800f3ac:	4863      	ldr	r0, [pc, #396]	@ (800f53c <decodeNextMCU+0x1f0>)
 800f3ae:	4964      	ldr	r1, [pc, #400]	@ (800f540 <decodeNextMCU+0x1f4>)
 800f3b0:	f7fe fb55 	bl	800da5e <huffDecode>
 800f3b4:	4604      	mov	r4, r0
        if (numExtraBits)
 800f3b6:	f010 070f 	ands.w	r7, r0, #15
 800f3ba:	d1e6      	bne.n	800f38a <decodeNextMCU+0x3e>
        r = s >> 4;
 800f3bc:	f3c4 1407 	ubfx	r4, r4, #4, #8
        if (s) {
 800f3c0:	2f00      	cmp	r7, #0
 800f3c2:	d0e6      	beq.n	800f392 <decodeNextMCU+0x46>
          if (r) {
 800f3c4:	2c00      	cmp	r4, #0
 800f3c6:	d0eb      	beq.n	800f3a0 <decodeNextMCU+0x54>
            if ((k + r) > 63)
 800f3c8:	192b      	adds	r3, r5, r4
 800f3ca:	2b3f      	cmp	r3, #63	@ 0x3f
 800f3cc:	f300 80a1 	bgt.w	800f512 <decodeNextMCU+0x1c6>
            k = (uint8)(k + r);
 800f3d0:	b2dd      	uxtb	r5, r3
 800f3d2:	e7e5      	b.n	800f3a0 <decodeNextMCU+0x54>
      for (k = 1; k < 64; k++) {
 800f3d4:	2501      	movs	r5, #1
 800f3d6:	e7e5      	b.n	800f3a4 <decodeNextMCU+0x58>
      transformBlockReduce(mcuBlock);
 800f3d8:	4640      	mov	r0, r8
 800f3da:	f7ff fdc1 	bl	800ef60 <transformBlockReduce>
 800f3de:	e05c      	b.n	800f49a <decodeNextMCU+0x14e>
        s = huffDecode(compACTab ? &gHuffTab3 : &gHuffTab2,
 800f3e0:	4854      	ldr	r0, [pc, #336]	@ (800f534 <decodeNextMCU+0x1e8>)
 800f3e2:	4955      	ldr	r1, [pc, #340]	@ (800f538 <decodeNextMCU+0x1ec>)
 800f3e4:	f7fe fb3b 	bl	800da5e <huffDecode>
 800f3e8:	4605      	mov	r5, r0
        if (numExtraBits)
 800f3ea:	f010 090f 	ands.w	r9, r0, #15
 800f3ee:	d11c      	bne.n	800f42a <decodeNextMCU+0xde>
        extraBits = 0;
 800f3f0:	2000      	movs	r0, #0
        r = s >> 4;
 800f3f2:	f3c5 1507 	ubfx	r5, r5, #4, #8
 800f3f6:	462b      	mov	r3, r5
        if (s) {
 800f3f8:	f1b9 0f00 	cmp.w	r9, #0
 800f3fc:	d02b      	beq.n	800f456 <decodeNextMCU+0x10a>
          if (r) {
 800f3fe:	b9c5      	cbnz	r5, 800f432 <decodeNextMCU+0xe6>
          ac = huffExtend(extraBits, s);
 800f400:	4649      	mov	r1, r9
 800f402:	f7fe fb1b 	bl	800da3c <huffExtend>
          gCoeffBuf[ZAG[k]] = ac * pQ[k];
 800f406:	f837 3014 	ldrh.w	r3, [r7, r4, lsl #1]
 800f40a:	4a4e      	ldr	r2, [pc, #312]	@ (800f544 <decodeNextMCU+0x1f8>)
 800f40c:	5712      	ldrsb	r2, [r2, r4]
 800f40e:	fb10 f003 	smulbb	r0, r0, r3
 800f412:	4b4d      	ldr	r3, [pc, #308]	@ (800f548 <decodeNextMCU+0x1fc>)
 800f414:	f823 0012 	strh.w	r0, [r3, r2, lsl #1]
      for (k = 1; k < 64; k++) {
 800f418:	3401      	adds	r4, #1
 800f41a:	b2e4      	uxtb	r4, r4
 800f41c:	2c3f      	cmp	r4, #63	@ 0x3f
 800f41e:	d837      	bhi.n	800f490 <decodeNextMCU+0x144>
        s = huffDecode(compACTab ? &gHuffTab3 : &gHuffTab2,
 800f420:	2e00      	cmp	r6, #0
 800f422:	d0dd      	beq.n	800f3e0 <decodeNextMCU+0x94>
 800f424:	4845      	ldr	r0, [pc, #276]	@ (800f53c <decodeNextMCU+0x1f0>)
 800f426:	4946      	ldr	r1, [pc, #280]	@ (800f540 <decodeNextMCU+0x1f4>)
 800f428:	e7dc      	b.n	800f3e4 <decodeNextMCU+0x98>
          extraBits = getBits2(numExtraBits);
 800f42a:	4648      	mov	r0, r9
 800f42c:	f7fe fa65 	bl	800d8fa <getBits2>
 800f430:	e7df      	b.n	800f3f2 <decodeNextMCU+0xa6>
            if ((k + r) > 63)
 800f432:	4425      	add	r5, r4
 800f434:	2d3f      	cmp	r5, #63	@ 0x3f
 800f436:	dd0b      	ble.n	800f450 <decodeNextMCU+0x104>
              return PJPG_DECODE_ERROR;
 800f438:	201c      	movs	r0, #28
 800f43a:	e06d      	b.n	800f518 <decodeNextMCU+0x1cc>
              gCoeffBuf[ZAG[k++]] = 0;
 800f43c:	1c62      	adds	r2, r4, #1
 800f43e:	4941      	ldr	r1, [pc, #260]	@ (800f544 <decodeNextMCU+0x1f8>)
 800f440:	570c      	ldrsb	r4, [r1, r4]
 800f442:	4941      	ldr	r1, [pc, #260]	@ (800f548 <decodeNextMCU+0x1fc>)
 800f444:	2500      	movs	r5, #0
 800f446:	f821 5014 	strh.w	r5, [r1, r4, lsl #1]
              r--;
 800f44a:	3b01      	subs	r3, #1
 800f44c:	b29b      	uxth	r3, r3
              gCoeffBuf[ZAG[k++]] = 0;
 800f44e:	b2d4      	uxtb	r4, r2
            while (r) {
 800f450:	2b00      	cmp	r3, #0
 800f452:	d1f3      	bne.n	800f43c <decodeNextMCU+0xf0>
 800f454:	e7d4      	b.n	800f400 <decodeNextMCU+0xb4>
          if (r == 15) {
 800f456:	2d0f      	cmp	r5, #15
 800f458:	d11a      	bne.n	800f490 <decodeNextMCU+0x144>
            if ((k + 16) > 64)
 800f45a:	2c30      	cmp	r4, #48	@ 0x30
 800f45c:	d85e      	bhi.n	800f51c <decodeNextMCU+0x1d0>
            for (r = 16; r > 0; r--)
 800f45e:	2310      	movs	r3, #16
 800f460:	e009      	b.n	800f476 <decodeNextMCU+0x12a>
              gCoeffBuf[ZAG[k++]] = 0;
 800f462:	1c62      	adds	r2, r4, #1
 800f464:	4937      	ldr	r1, [pc, #220]	@ (800f544 <decodeNextMCU+0x1f8>)
 800f466:	5708      	ldrsb	r0, [r1, r4]
 800f468:	4937      	ldr	r1, [pc, #220]	@ (800f548 <decodeNextMCU+0x1fc>)
 800f46a:	2400      	movs	r4, #0
 800f46c:	f821 4010 	strh.w	r4, [r1, r0, lsl #1]
            for (r = 16; r > 0; r--)
 800f470:	3b01      	subs	r3, #1
 800f472:	b29b      	uxth	r3, r3
              gCoeffBuf[ZAG[k++]] = 0;
 800f474:	b2d4      	uxtb	r4, r2
            for (r = 16; r > 0; r--)
 800f476:	2b00      	cmp	r3, #0
 800f478:	d1f3      	bne.n	800f462 <decodeNextMCU+0x116>
            k--;
 800f47a:	3c01      	subs	r4, #1
 800f47c:	b2e4      	uxtb	r4, r4
 800f47e:	e7cb      	b.n	800f418 <decodeNextMCU+0xcc>
        gCoeffBuf[ZAG[k++]] = 0;
 800f480:	1c63      	adds	r3, r4, #1
 800f482:	4a30      	ldr	r2, [pc, #192]	@ (800f544 <decodeNextMCU+0x1f8>)
 800f484:	5711      	ldrsb	r1, [r2, r4]
 800f486:	4a30      	ldr	r2, [pc, #192]	@ (800f548 <decodeNextMCU+0x1fc>)
 800f488:	2000      	movs	r0, #0
 800f48a:	f822 0011 	strh.w	r0, [r2, r1, lsl #1]
 800f48e:	b2dc      	uxtb	r4, r3
      while (k < 64)
 800f490:	2c3f      	cmp	r4, #63	@ 0x3f
 800f492:	d9f5      	bls.n	800f480 <decodeNextMCU+0x134>

      transformBlock(mcuBlock);
 800f494:	4640      	mov	r0, r8
 800f496:	f7ff fcc3 	bl	800ee20 <transformBlock>
  for (mcuBlock = 0; mcuBlock < gMaxBlocksPerMCU; mcuBlock++) {
 800f49a:	f108 0801 	add.w	r8, r8, #1
 800f49e:	fa5f f888 	uxtb.w	r8, r8
 800f4a2:	4b2a      	ldr	r3, [pc, #168]	@ (800f54c <decodeNextMCU+0x200>)
 800f4a4:	781b      	ldrb	r3, [r3, #0]
 800f4a6:	4543      	cmp	r3, r8
 800f4a8:	d931      	bls.n	800f50e <decodeNextMCU+0x1c2>
    uint8 componentID = gMCUOrg[mcuBlock];
 800f4aa:	4b29      	ldr	r3, [pc, #164]	@ (800f550 <decodeNextMCU+0x204>)
 800f4ac:	f813 4008 	ldrb.w	r4, [r3, r8]
    uint8 compQuant = gCompQuant[componentID];
 800f4b0:	4b28      	ldr	r3, [pc, #160]	@ (800f554 <decodeNextMCU+0x208>)
 800f4b2:	5d1a      	ldrb	r2, [r3, r4]
    uint8 compDCTab = gCompDCTab[componentID];
 800f4b4:	4b28      	ldr	r3, [pc, #160]	@ (800f558 <decodeNextMCU+0x20c>)
 800f4b6:	5d1b      	ldrb	r3, [r3, r4]
    const int16 *pQ = compQuant ? gQuant1 : gQuant0;
 800f4b8:	2a00      	cmp	r2, #0
 800f4ba:	f43f af5b 	beq.w	800f374 <decodeNextMCU+0x28>
 800f4be:	4f27      	ldr	r7, [pc, #156]	@ (800f55c <decodeNextMCU+0x210>)
    uint8 s = huffDecode(compDCTab ? &gHuffTab1 : &gHuffTab0,
 800f4c0:	2b00      	cmp	r3, #0
 800f4c2:	f43f af59 	beq.w	800f378 <decodeNextMCU+0x2c>
 800f4c6:	4826      	ldr	r0, [pc, #152]	@ (800f560 <decodeNextMCU+0x214>)
 800f4c8:	4926      	ldr	r1, [pc, #152]	@ (800f564 <decodeNextMCU+0x218>)
 800f4ca:	f7fe fac8 	bl	800da5e <huffDecode>
 800f4ce:	4605      	mov	r5, r0
    if (numExtraBits)
 800f4d0:	f010 000f 	ands.w	r0, r0, #15
 800f4d4:	f47f af53 	bne.w	800f37e <decodeNextMCU+0x32>
    r = 0;
 800f4d8:	2000      	movs	r0, #0
    dc = huffExtend(r, s);
 800f4da:	4629      	mov	r1, r5
 800f4dc:	f7fe faae 	bl	800da3c <huffExtend>
    dc = dc + gLastDC[componentID];
 800f4e0:	4a21      	ldr	r2, [pc, #132]	@ (800f568 <decodeNextMCU+0x21c>)
 800f4e2:	f832 3014 	ldrh.w	r3, [r2, r4, lsl #1]
 800f4e6:	fa13 f380 	uxtah	r3, r3, r0
 800f4ea:	b29b      	uxth	r3, r3
    gLastDC[componentID] = dc;
 800f4ec:	f822 3014 	strh.w	r3, [r2, r4, lsl #1]
    gCoeffBuf[0] = dc * pQ[0];
 800f4f0:	f9b7 2000 	ldrsh.w	r2, [r7]
 800f4f4:	fb12 f303 	smulbb	r3, r2, r3
 800f4f8:	4a13      	ldr	r2, [pc, #76]	@ (800f548 <decodeNextMCU+0x1fc>)
 800f4fa:	8013      	strh	r3, [r2, #0]
    compACTab = gCompACTab[componentID];
 800f4fc:	4b1b      	ldr	r3, [pc, #108]	@ (800f56c <decodeNextMCU+0x220>)
 800f4fe:	5d1e      	ldrb	r6, [r3, r4]
    if (gReduce) {
 800f500:	4b1b      	ldr	r3, [pc, #108]	@ (800f570 <decodeNextMCU+0x224>)
 800f502:	781b      	ldrb	r3, [r3, #0]
 800f504:	2b00      	cmp	r3, #0
 800f506:	f47f af65 	bne.w	800f3d4 <decodeNextMCU+0x88>
      for (k = 1; k < 64; k++) {
 800f50a:	2401      	movs	r4, #1
 800f50c:	e786      	b.n	800f41c <decodeNextMCU+0xd0>
    }
  }

  return 0;
 800f50e:	2000      	movs	r0, #0
 800f510:	e002      	b.n	800f518 <decodeNextMCU+0x1cc>
              return PJPG_DECODE_ERROR;
 800f512:	201c      	movs	r0, #28
 800f514:	e000      	b.n	800f518 <decodeNextMCU+0x1cc>
              return PJPG_DECODE_ERROR;
 800f516:	201c      	movs	r0, #28
}
 800f518:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
              return PJPG_DECODE_ERROR;
 800f51c:	201c      	movs	r0, #28
 800f51e:	e7fb      	b.n	800f518 <decodeNextMCU+0x1cc>
 800f520:	2000c38c 	.word	0x2000c38c
 800f524:	2000c388 	.word	0x2000c388
 800f528:	2000c898 	.word	0x2000c898
 800f52c:	2000c7c0 	.word	0x2000c7c0
 800f530:	2000c7b0 	.word	0x2000c7b0
 800f534:	2000c700 	.word	0x2000c700
 800f538:	2000c600 	.word	0x2000c600
 800f53c:	2000c5b0 	.word	0x2000c5b0
 800f540:	2000c4b0 	.word	0x2000c4b0
 800f544:	0802db64 	.word	0x0802db64
 800f548:	2000cc18 	.word	0x2000cc18
 800f54c:	2000c37a 	.word	0x2000c37a
 800f550:	2000c36c 	.word	0x2000c36c
 800f554:	2000c390 	.word	0x2000c390
 800f558:	2000c380 	.word	0x2000c380
 800f55c:	2000c818 	.word	0x2000c818
 800f560:	2000c760 	.word	0x2000c760
 800f564:	2000c750 	.word	0x2000c750
 800f568:	2000c810 	.word	0x2000c810
 800f56c:	2000c37c 	.word	0x2000c37c
 800f570:	2000c360 	.word	0x2000c360

0800f574 <pjpeg_decode_mcu>:

unsigned char pjpeg_decode_mcu(void) {
 800f574:	b508      	push	{r3, lr}
  uint8 status;

  if (gCallbackStatus)
 800f576:	4b0d      	ldr	r3, [pc, #52]	@ (800f5ac <pjpeg_decode_mcu+0x38>)
 800f578:	7818      	ldrb	r0, [r3, #0]
 800f57a:	b918      	cbnz	r0, 800f584 <pjpeg_decode_mcu+0x10>
    return gCallbackStatus;

  if (!gNumMCUSRemaining)
 800f57c:	4b0c      	ldr	r3, [pc, #48]	@ (800f5b0 <pjpeg_decode_mcu+0x3c>)
 800f57e:	881b      	ldrh	r3, [r3, #0]
 800f580:	b90b      	cbnz	r3, 800f586 <pjpeg_decode_mcu+0x12>
    return PJPG_NO_MORE_BLOCKS;
 800f582:	2001      	movs	r0, #1
    return gCallbackStatus ? gCallbackStatus : status;

  gNumMCUSRemaining--;

  return 0;
}
 800f584:	bd08      	pop	{r3, pc}
  status = decodeNextMCU();
 800f586:	f7ff fee1 	bl	800f34c <decodeNextMCU>
  if ((status) || (gCallbackStatus))
 800f58a:	4602      	mov	r2, r0
 800f58c:	b938      	cbnz	r0, 800f59e <pjpeg_decode_mcu+0x2a>
 800f58e:	4b07      	ldr	r3, [pc, #28]	@ (800f5ac <pjpeg_decode_mcu+0x38>)
 800f590:	7818      	ldrb	r0, [r3, #0]
 800f592:	b920      	cbnz	r0, 800f59e <pjpeg_decode_mcu+0x2a>
  gNumMCUSRemaining--;
 800f594:	4a06      	ldr	r2, [pc, #24]	@ (800f5b0 <pjpeg_decode_mcu+0x3c>)
 800f596:	8813      	ldrh	r3, [r2, #0]
 800f598:	3b01      	subs	r3, #1
 800f59a:	8013      	strh	r3, [r2, #0]
  return 0;
 800f59c:	e7f2      	b.n	800f584 <pjpeg_decode_mcu+0x10>
    return gCallbackStatus ? gCallbackStatus : status;
 800f59e:	4b03      	ldr	r3, [pc, #12]	@ (800f5ac <pjpeg_decode_mcu+0x38>)
 800f5a0:	7818      	ldrb	r0, [r3, #0]
 800f5a2:	2800      	cmp	r0, #0
 800f5a4:	d1ee      	bne.n	800f584 <pjpeg_decode_mcu+0x10>
 800f5a6:	4610      	mov	r0, r2
 800f5a8:	e7ec      	b.n	800f584 <pjpeg_decode_mcu+0x10>
 800f5aa:	bf00      	nop
 800f5ac:	2000c361 	.word	0x2000c361
 800f5b0:	2000c372 	.word	0x2000c372

0800f5b4 <pjpeg_decode_init>:

unsigned char
pjpeg_decode_init(pjpeg_image_info_t *pInfo,
                  pjpeg_need_bytes_callback_t pNeed_bytes_callback,
                  void *pCallback_data, unsigned char reduce) {
 800f5b4:	b538      	push	{r3, r4, r5, lr}
 800f5b6:	4604      	mov	r4, r0
  uint8 status;

  pInfo->m_width = 0;
 800f5b8:	2000      	movs	r0, #0
 800f5ba:	6020      	str	r0, [r4, #0]
  pInfo->m_height = 0;
 800f5bc:	6060      	str	r0, [r4, #4]
  pInfo->m_comps = 0;
 800f5be:	60a0      	str	r0, [r4, #8]
  pInfo->m_MCUSPerRow = 0;
 800f5c0:	60e0      	str	r0, [r4, #12]
  pInfo->m_MCUSPerCol = 0;
 800f5c2:	6120      	str	r0, [r4, #16]
  pInfo->m_scanType = PJPG_GRAYSCALE;
 800f5c4:	7520      	strb	r0, [r4, #20]
  pInfo->m_MCUWidth = 0;
 800f5c6:	61a0      	str	r0, [r4, #24]
  pInfo->m_MCUHeight = 0;
 800f5c8:	61e0      	str	r0, [r4, #28]
  pInfo->m_pMCUBufR = (unsigned char *)0;
 800f5ca:	6220      	str	r0, [r4, #32]
  pInfo->m_pMCUBufG = (unsigned char *)0;
 800f5cc:	6260      	str	r0, [r4, #36]	@ 0x24
  pInfo->m_pMCUBufB = (unsigned char *)0;
 800f5ce:	62a0      	str	r0, [r4, #40]	@ 0x28

  g_pNeedBytesCallback = pNeed_bytes_callback;
 800f5d0:	4d2d      	ldr	r5, [pc, #180]	@ (800f688 <pjpeg_decode_init+0xd4>)
 800f5d2:	6029      	str	r1, [r5, #0]
  g_pCallback_data = pCallback_data;
 800f5d4:	492d      	ldr	r1, [pc, #180]	@ (800f68c <pjpeg_decode_init+0xd8>)
 800f5d6:	600a      	str	r2, [r1, #0]
  gCallbackStatus = 0;
 800f5d8:	4a2d      	ldr	r2, [pc, #180]	@ (800f690 <pjpeg_decode_init+0xdc>)
 800f5da:	7010      	strb	r0, [r2, #0]
  gReduce = reduce;
 800f5dc:	4a2d      	ldr	r2, [pc, #180]	@ (800f694 <pjpeg_decode_init+0xe0>)
 800f5de:	7013      	strb	r3, [r2, #0]

  status = init();
 800f5e0:	f7fe fc72 	bl	800dec8 <init>
  if ((status) || (gCallbackStatus))
 800f5e4:	4602      	mov	r2, r0
 800f5e6:	b910      	cbnz	r0, 800f5ee <pjpeg_decode_init+0x3a>
 800f5e8:	4b29      	ldr	r3, [pc, #164]	@ (800f690 <pjpeg_decode_init+0xdc>)
 800f5ea:	781b      	ldrb	r3, [r3, #0]
 800f5ec:	b123      	cbz	r3, 800f5f8 <pjpeg_decode_init+0x44>
    return gCallbackStatus ? gCallbackStatus : status;
 800f5ee:	4b28      	ldr	r3, [pc, #160]	@ (800f690 <pjpeg_decode_init+0xdc>)
 800f5f0:	7818      	ldrb	r0, [r3, #0]
 800f5f2:	b900      	cbnz	r0, 800f5f6 <pjpeg_decode_init+0x42>
 800f5f4:	4610      	mov	r0, r2
  pInfo->m_pMCUBufR = gMCUBufR;
  pInfo->m_pMCUBufG = gMCUBufG;
  pInfo->m_pMCUBufB = gMCUBufB;

  return 0;
}
 800f5f6:	bd38      	pop	{r3, r4, r5, pc}
  status = locateSOFMarker();
 800f5f8:	f7fe fef4 	bl	800e3e4 <locateSOFMarker>
  if ((status) || (gCallbackStatus))
 800f5fc:	4602      	mov	r2, r0
 800f5fe:	b910      	cbnz	r0, 800f606 <pjpeg_decode_init+0x52>
 800f600:	4b23      	ldr	r3, [pc, #140]	@ (800f690 <pjpeg_decode_init+0xdc>)
 800f602:	781b      	ldrb	r3, [r3, #0]
 800f604:	b12b      	cbz	r3, 800f612 <pjpeg_decode_init+0x5e>
    return gCallbackStatus ? gCallbackStatus : status;
 800f606:	4b22      	ldr	r3, [pc, #136]	@ (800f690 <pjpeg_decode_init+0xdc>)
 800f608:	7818      	ldrb	r0, [r3, #0]
 800f60a:	2800      	cmp	r0, #0
 800f60c:	d1f3      	bne.n	800f5f6 <pjpeg_decode_init+0x42>
 800f60e:	4610      	mov	r0, r2
 800f610:	e7f1      	b.n	800f5f6 <pjpeg_decode_init+0x42>
  status = initFrame();
 800f612:	f7fe fd45 	bl	800e0a0 <initFrame>
  if ((status) || (gCallbackStatus))
 800f616:	4602      	mov	r2, r0
 800f618:	b910      	cbnz	r0, 800f620 <pjpeg_decode_init+0x6c>
 800f61a:	4b1d      	ldr	r3, [pc, #116]	@ (800f690 <pjpeg_decode_init+0xdc>)
 800f61c:	781b      	ldrb	r3, [r3, #0]
 800f61e:	b12b      	cbz	r3, 800f62c <pjpeg_decode_init+0x78>
    return gCallbackStatus ? gCallbackStatus : status;
 800f620:	4b1b      	ldr	r3, [pc, #108]	@ (800f690 <pjpeg_decode_init+0xdc>)
 800f622:	7818      	ldrb	r0, [r3, #0]
 800f624:	2800      	cmp	r0, #0
 800f626:	d1e6      	bne.n	800f5f6 <pjpeg_decode_init+0x42>
 800f628:	4610      	mov	r0, r2
 800f62a:	e7e4      	b.n	800f5f6 <pjpeg_decode_init+0x42>
  status = initScan();
 800f62c:	f7fe ff16 	bl	800e45c <initScan>
  if ((status) || (gCallbackStatus))
 800f630:	4602      	mov	r2, r0
 800f632:	2800      	cmp	r0, #0
 800f634:	d121      	bne.n	800f67a <pjpeg_decode_init+0xc6>
 800f636:	4b16      	ldr	r3, [pc, #88]	@ (800f690 <pjpeg_decode_init+0xdc>)
 800f638:	7818      	ldrb	r0, [r3, #0]
 800f63a:	b9f0      	cbnz	r0, 800f67a <pjpeg_decode_init+0xc6>
  pInfo->m_width = gImageXSize;
 800f63c:	4b16      	ldr	r3, [pc, #88]	@ (800f698 <pjpeg_decode_init+0xe4>)
 800f63e:	881b      	ldrh	r3, [r3, #0]
 800f640:	6023      	str	r3, [r4, #0]
  pInfo->m_height = gImageYSize;
 800f642:	4b16      	ldr	r3, [pc, #88]	@ (800f69c <pjpeg_decode_init+0xe8>)
 800f644:	881b      	ldrh	r3, [r3, #0]
 800f646:	6063      	str	r3, [r4, #4]
  pInfo->m_comps = gCompsInFrame;
 800f648:	4b15      	ldr	r3, [pc, #84]	@ (800f6a0 <pjpeg_decode_init+0xec>)
 800f64a:	781b      	ldrb	r3, [r3, #0]
 800f64c:	60a3      	str	r3, [r4, #8]
  pInfo->m_scanType = gScanType;
 800f64e:	4b15      	ldr	r3, [pc, #84]	@ (800f6a4 <pjpeg_decode_init+0xf0>)
 800f650:	781b      	ldrb	r3, [r3, #0]
 800f652:	7523      	strb	r3, [r4, #20]
  pInfo->m_MCUSPerRow = gMaxMCUSPerRow;
 800f654:	4b14      	ldr	r3, [pc, #80]	@ (800f6a8 <pjpeg_decode_init+0xf4>)
 800f656:	881b      	ldrh	r3, [r3, #0]
 800f658:	60e3      	str	r3, [r4, #12]
  pInfo->m_MCUSPerCol = gMaxMCUSPerCol;
 800f65a:	4b14      	ldr	r3, [pc, #80]	@ (800f6ac <pjpeg_decode_init+0xf8>)
 800f65c:	881b      	ldrh	r3, [r3, #0]
 800f65e:	6123      	str	r3, [r4, #16]
  pInfo->m_MCUWidth = gMaxMCUXSize;
 800f660:	4b13      	ldr	r3, [pc, #76]	@ (800f6b0 <pjpeg_decode_init+0xfc>)
 800f662:	781b      	ldrb	r3, [r3, #0]
 800f664:	61a3      	str	r3, [r4, #24]
  pInfo->m_MCUHeight = gMaxMCUYSize;
 800f666:	4b13      	ldr	r3, [pc, #76]	@ (800f6b4 <pjpeg_decode_init+0x100>)
 800f668:	781b      	ldrb	r3, [r3, #0]
 800f66a:	61e3      	str	r3, [r4, #28]
  pInfo->m_pMCUBufR = gMCUBufR;
 800f66c:	4b12      	ldr	r3, [pc, #72]	@ (800f6b8 <pjpeg_decode_init+0x104>)
 800f66e:	6223      	str	r3, [r4, #32]
  pInfo->m_pMCUBufG = gMCUBufG;
 800f670:	4b12      	ldr	r3, [pc, #72]	@ (800f6bc <pjpeg_decode_init+0x108>)
 800f672:	6263      	str	r3, [r4, #36]	@ 0x24
  pInfo->m_pMCUBufB = gMCUBufB;
 800f674:	4b12      	ldr	r3, [pc, #72]	@ (800f6c0 <pjpeg_decode_init+0x10c>)
 800f676:	62a3      	str	r3, [r4, #40]	@ 0x28
  return 0;
 800f678:	e7bd      	b.n	800f5f6 <pjpeg_decode_init+0x42>
    return gCallbackStatus ? gCallbackStatus : status;
 800f67a:	4b05      	ldr	r3, [pc, #20]	@ (800f690 <pjpeg_decode_init+0xdc>)
 800f67c:	7818      	ldrb	r0, [r3, #0]
 800f67e:	2800      	cmp	r0, #0
 800f680:	d1b9      	bne.n	800f5f6 <pjpeg_decode_init+0x42>
 800f682:	4610      	mov	r0, r2
 800f684:	e7b7      	b.n	800f5f6 <pjpeg_decode_init+0x42>
 800f686:	bf00      	nop
 800f688:	2000c368 	.word	0x2000c368
 800f68c:	2000c364 	.word	0x2000c364
 800f690:	2000c361 	.word	0x2000c361
 800f694:	2000c360 	.word	0x2000c360
 800f698:	2000c3a2 	.word	0x2000c3a2
 800f69c:	2000c3a0 	.word	0x2000c3a0
 800f6a0:	2000c39f 	.word	0x2000c39f
 800f6a4:	2000c37b 	.word	0x2000c37b
 800f6a8:	2000c376 	.word	0x2000c376
 800f6ac:	2000c374 	.word	0x2000c374
 800f6b0:	2000c379 	.word	0x2000c379
 800f6b4:	2000c378 	.word	0x2000c378
 800f6b8:	2000cb18 	.word	0x2000cb18
 800f6bc:	2000ca18 	.word	0x2000ca18
 800f6c0:	2000c918 	.word	0x2000c918

0800f6c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800f6c4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800f6fc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800f6c8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800f6ca:	e003      	b.n	800f6d4 <LoopCopyDataInit>

0800f6cc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800f6cc:	4b0c      	ldr	r3, [pc, #48]	@ (800f700 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800f6ce:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800f6d0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800f6d2:	3104      	adds	r1, #4

0800f6d4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800f6d4:	480b      	ldr	r0, [pc, #44]	@ (800f704 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800f6d6:	4b0c      	ldr	r3, [pc, #48]	@ (800f708 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800f6d8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800f6da:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800f6dc:	d3f6      	bcc.n	800f6cc <CopyDataInit>
  ldr  r2, =_sbss
 800f6de:	4a0b      	ldr	r2, [pc, #44]	@ (800f70c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800f6e0:	e002      	b.n	800f6e8 <LoopFillZerobss>

0800f6e2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800f6e2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800f6e4:	f842 3b04 	str.w	r3, [r2], #4

0800f6e8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800f6e8:	4b09      	ldr	r3, [pc, #36]	@ (800f710 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800f6ea:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800f6ec:	d3f9      	bcc.n	800f6e2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800f6ee:	f000 f9bb 	bl	800fa68 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800f6f2:	f014 fb6b 	bl	8023dcc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800f6f6:	f7fd f9f3 	bl	800cae0 <main>
  bx  lr    
 800f6fa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800f6fc:	2004ffff 	.word	0x2004ffff
  ldr  r3, =_sidata
 800f700:	080affa8 	.word	0x080affa8
  ldr  r0, =_sdata
 800f704:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800f708:	20008ae0 	.word	0x20008ae0
  ldr  r2, =_sbss
 800f70c:	20008ae0 	.word	0x20008ae0
  ldr  r3, = _ebss
 800f710:	2003cff0 	.word	0x2003cff0

0800f714 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800f714:	e7fe      	b.n	800f714 <ADC_IRQHandler>
	...

0800f718 <HAL_I2C_MspInit>:
#include "camera_spi.h"
#include "main.h"
#include "stm32746g_discovery.h"
#include "stm32746g_discovery_lcd.h"
#include "stm32f7xx_hal.h"
void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c) {
 800f718:	b530      	push	{r4, r5, lr}
 800f71a:	b0ab      	sub	sp, #172	@ 0xac
  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef RCC_PeriphCLKInitStruct;

  RCC_PeriphCLKInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2Cx;
 800f71c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800f720:	9304      	str	r3, [sp, #16]
  RCC_PeriphCLKInitStruct.I2c1ClockSelection = RCC_I2CxCLKSOURCE_SYSCLK;
 800f722:	2300      	movs	r3, #0
 800f724:	931d      	str	r3, [sp, #116]	@ 0x74
  HAL_RCCEx_PeriphCLKConfig(&RCC_PeriphCLKInitStruct);
 800f726:	a804      	add	r0, sp, #16
 800f728:	f7fa fd58 	bl	800a1dc <HAL_RCCEx_PeriphCLKConfig>

  I2Cx_SCL_GPIO_CLK_ENABLE();
 800f72c:	4b1a      	ldr	r3, [pc, #104]	@ (800f798 <HAL_I2C_MspInit+0x80>)
 800f72e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f730:	f042 0202 	orr.w	r2, r2, #2
 800f734:	631a      	str	r2, [r3, #48]	@ 0x30
 800f736:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f738:	f002 0202 	and.w	r2, r2, #2
 800f73c:	9201      	str	r2, [sp, #4]
 800f73e:	9a01      	ldr	r2, [sp, #4]
  I2Cx_SDA_GPIO_CLK_ENABLE();
 800f740:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f742:	f042 0202 	orr.w	r2, r2, #2
 800f746:	631a      	str	r2, [r3, #48]	@ 0x30
 800f748:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f74a:	f002 0202 	and.w	r2, r2, #2
 800f74e:	9202      	str	r2, [sp, #8]
 800f750:	9a02      	ldr	r2, [sp, #8]

  I2Cx_CLK_ENABLE();
 800f752:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800f754:	f442 1200 	orr.w	r2, r2, #2097152	@ 0x200000
 800f758:	641a      	str	r2, [r3, #64]	@ 0x40
 800f75a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f75c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800f760:	9303      	str	r3, [sp, #12]
 800f762:	9b03      	ldr	r3, [sp, #12]

  GPIO_InitStruct.Pin = I2Cx_SCL_PIN;
 800f764:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800f768:	9325      	str	r3, [sp, #148]	@ 0x94
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800f76a:	2312      	movs	r3, #18
 800f76c:	9326      	str	r3, [sp, #152]	@ 0x98
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800f76e:	2301      	movs	r3, #1
 800f770:	9327      	str	r3, [sp, #156]	@ 0x9c
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 800f772:	2302      	movs	r3, #2
 800f774:	9328      	str	r3, [sp, #160]	@ 0xa0
  GPIO_InitStruct.Alternate = I2Cx_SCL_SDA_AF;
 800f776:	2504      	movs	r5, #4
 800f778:	9529      	str	r5, [sp, #164]	@ 0xa4
  HAL_GPIO_Init(I2Cx_SCL_GPIO_PORT, &GPIO_InitStruct);
 800f77a:	4c08      	ldr	r4, [pc, #32]	@ (800f79c <HAL_I2C_MspInit+0x84>)
 800f77c:	a925      	add	r1, sp, #148	@ 0x94
 800f77e:	4620      	mov	r0, r4
 800f780:	f7f9 fbde 	bl	8008f40 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = I2Cx_SDA_PIN;
 800f784:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800f788:	9325      	str	r3, [sp, #148]	@ 0x94
  GPIO_InitStruct.Alternate = I2Cx_SCL_SDA_AF;
 800f78a:	9529      	str	r5, [sp, #164]	@ 0xa4
  HAL_GPIO_Init(I2Cx_SDA_GPIO_PORT, &GPIO_InitStruct);
 800f78c:	a925      	add	r1, sp, #148	@ 0x94
 800f78e:	4620      	mov	r0, r4
 800f790:	f7f9 fbd6 	bl	8008f40 <HAL_GPIO_Init>
}
 800f794:	b02b      	add	sp, #172	@ 0xac
 800f796:	bd30      	pop	{r4, r5, pc}
 800f798:	40023800 	.word	0x40023800
 800f79c:	40020400 	.word	0x40020400

0800f7a0 <HAL_SPI_MspInit>:
  HAL_GPIO_DeInit(I2Cx_SDA_GPIO_PORT, I2Cx_SDA_PIN);
}
void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi) {
  GPIO_InitTypeDef GPIO_InitStruct;

  if (hspi->Instance == SPIx) {
 800f7a0:	6802      	ldr	r2, [r0, #0]
 800f7a2:	4b25      	ldr	r3, [pc, #148]	@ (800f838 <HAL_SPI_MspInit+0x98>)
 800f7a4:	429a      	cmp	r2, r3
 800f7a6:	d000      	beq.n	800f7aa <HAL_SPI_MspInit+0xa>
 800f7a8:	4770      	bx	lr
void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi) {
 800f7aa:	b530      	push	{r4, r5, lr}
 800f7ac:	b08b      	sub	sp, #44	@ 0x2c

    SPIx_SCK_GPIO_CLK_ENABLE();
 800f7ae:	f503 3300 	add.w	r3, r3, #131072	@ 0x20000
 800f7b2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f7b4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800f7b8:	631a      	str	r2, [r3, #48]	@ 0x30
 800f7ba:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f7bc:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 800f7c0:	9201      	str	r2, [sp, #4]
 800f7c2:	9a01      	ldr	r2, [sp, #4]
    SPIx_MISO_GPIO_CLK_ENABLE();
 800f7c4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f7c6:	f042 0202 	orr.w	r2, r2, #2
 800f7ca:	631a      	str	r2, [r3, #48]	@ 0x30
 800f7cc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f7ce:	f002 0202 	and.w	r2, r2, #2
 800f7d2:	9202      	str	r2, [sp, #8]
 800f7d4:	9a02      	ldr	r2, [sp, #8]
    SPIx_MOSI_GPIO_CLK_ENABLE();
 800f7d6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f7d8:	f042 0202 	orr.w	r2, r2, #2
 800f7dc:	631a      	str	r2, [r3, #48]	@ 0x30
 800f7de:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f7e0:	f002 0202 	and.w	r2, r2, #2
 800f7e4:	9203      	str	r2, [sp, #12]
 800f7e6:	9a03      	ldr	r2, [sp, #12]

    SPIx_CLK_ENABLE();
 800f7e8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800f7ea:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800f7ee:	641a      	str	r2, [r3, #64]	@ 0x40
 800f7f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f7f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800f7f6:	9304      	str	r3, [sp, #16]
 800f7f8:	9b04      	ldr	r3, [sp, #16]

    GPIO_InitStruct.Pin = SPIx_SCK_PIN;
 800f7fa:	2302      	movs	r3, #2
 800f7fc:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f7fe:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800f800:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 800f802:	2300      	movs	r3, #0
 800f804:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = SPIx_SCK_AF;
 800f806:	2405      	movs	r4, #5
 800f808:	9409      	str	r4, [sp, #36]	@ 0x24
    HAL_GPIO_Init(SPIx_SCK_GPIO_PORT, &GPIO_InitStruct);
 800f80a:	a905      	add	r1, sp, #20
 800f80c:	480b      	ldr	r0, [pc, #44]	@ (800f83c <HAL_SPI_MspInit+0x9c>)
 800f80e:	f7f9 fb97 	bl	8008f40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPIx_MISO_PIN;
 800f812:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800f816:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = SPIx_MISO_AF;
 800f818:	9409      	str	r4, [sp, #36]	@ 0x24
    HAL_GPIO_Init(SPIx_MISO_GPIO_PORT, &GPIO_InitStruct);
 800f81a:	4d09      	ldr	r5, [pc, #36]	@ (800f840 <HAL_SPI_MspInit+0xa0>)
 800f81c:	a905      	add	r1, sp, #20
 800f81e:	4628      	mov	r0, r5
 800f820:	f7f9 fb8e 	bl	8008f40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPIx_MOSI_PIN;
 800f824:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800f828:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = SPIx_MOSI_AF;
 800f82a:	9409      	str	r4, [sp, #36]	@ 0x24
    HAL_GPIO_Init(SPIx_MOSI_GPIO_PORT, &GPIO_InitStruct);
 800f82c:	a905      	add	r1, sp, #20
 800f82e:	4628      	mov	r0, r5
 800f830:	f7f9 fb86 	bl	8008f40 <HAL_GPIO_Init>
  }
}
 800f834:	b00b      	add	sp, #44	@ 0x2c
 800f836:	bd30      	pop	{r4, r5, pc}
 800f838:	40003800 	.word	0x40003800
 800f83c:	40022000 	.word	0x40022000
 800f840:	40020400 	.word	0x40020400

0800f844 <HAL_UART_MspInit>:

    HAL_GPIO_DeInit(SPIx_MOSI_GPIO_PORT, SPIx_MOSI_PIN);
  }
}

void HAL_UART_MspInit(UART_HandleTypeDef *huart) {
 800f844:	b530      	push	{r4, r5, lr}
 800f846:	b08b      	sub	sp, #44	@ 0x2c

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f848:	2300      	movs	r3, #0
 800f84a:	9305      	str	r3, [sp, #20]
 800f84c:	9306      	str	r3, [sp, #24]
 800f84e:	9307      	str	r3, [sp, #28]
 800f850:	9308      	str	r3, [sp, #32]
 800f852:	9309      	str	r3, [sp, #36]	@ 0x24
  if (huart->Instance == USART1) {
 800f854:	6803      	ldr	r3, [r0, #0]
 800f856:	4a2d      	ldr	r2, [pc, #180]	@ (800f90c <HAL_UART_MspInit+0xc8>)
 800f858:	4293      	cmp	r3, r2
 800f85a:	d004      	beq.n	800f866 <HAL_UART_MspInit+0x22>
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);

  } else if (huart->Instance == USART6) {
 800f85c:	4a2c      	ldr	r2, [pc, #176]	@ (800f910 <HAL_UART_MspInit+0xcc>)
 800f85e:	4293      	cmp	r3, r2
 800f860:	d034      	beq.n	800f8cc <HAL_UART_MspInit+0x88>
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
  }
}
 800f862:	b00b      	add	sp, #44	@ 0x2c
 800f864:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 800f866:	4b2b      	ldr	r3, [pc, #172]	@ (800f914 <HAL_UART_MspInit+0xd0>)
 800f868:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f86a:	f042 0210 	orr.w	r2, r2, #16
 800f86e:	645a      	str	r2, [r3, #68]	@ 0x44
 800f870:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f872:	f002 0210 	and.w	r2, r2, #16
 800f876:	9200      	str	r2, [sp, #0]
 800f878:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800f87a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f87c:	f042 0202 	orr.w	r2, r2, #2
 800f880:	631a      	str	r2, [r3, #48]	@ 0x30
 800f882:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f884:	f002 0202 	and.w	r2, r2, #2
 800f888:	9201      	str	r2, [sp, #4]
 800f88a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f88c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f88e:	f042 0201 	orr.w	r2, r2, #1
 800f892:	631a      	str	r2, [r3, #48]	@ 0x30
 800f894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f896:	f003 0301 	and.w	r3, r3, #1
 800f89a:	9302      	str	r3, [sp, #8]
 800f89c:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 800f89e:	2380      	movs	r3, #128	@ 0x80
 800f8a0:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f8a2:	2502      	movs	r5, #2
 800f8a4:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800f8a6:	2407      	movs	r4, #7
 800f8a8:	9409      	str	r4, [sp, #36]	@ 0x24
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800f8aa:	a905      	add	r1, sp, #20
 800f8ac:	481a      	ldr	r0, [pc, #104]	@ (800f918 <HAL_UART_MspInit+0xd4>)
 800f8ae:	f7f9 fb47 	bl	8008f40 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 800f8b2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800f8b6:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f8b8:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f8ba:	2300      	movs	r3, #0
 800f8bc:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f8be:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800f8c0:	9409      	str	r4, [sp, #36]	@ 0x24
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 800f8c2:	a905      	add	r1, sp, #20
 800f8c4:	4815      	ldr	r0, [pc, #84]	@ (800f91c <HAL_UART_MspInit+0xd8>)
 800f8c6:	f7f9 fb3b 	bl	8008f40 <HAL_GPIO_Init>
 800f8ca:	e7ca      	b.n	800f862 <HAL_UART_MspInit+0x1e>
    __HAL_RCC_USART6_CLK_ENABLE();
 800f8cc:	4b11      	ldr	r3, [pc, #68]	@ (800f914 <HAL_UART_MspInit+0xd0>)
 800f8ce:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f8d0:	f042 0220 	orr.w	r2, r2, #32
 800f8d4:	645a      	str	r2, [r3, #68]	@ 0x44
 800f8d6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f8d8:	f002 0220 	and.w	r2, r2, #32
 800f8dc:	9203      	str	r2, [sp, #12]
 800f8de:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800f8e0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f8e2:	f042 0204 	orr.w	r2, r2, #4
 800f8e6:	631a      	str	r2, [r3, #48]	@ 0x30
 800f8e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f8ea:	f003 0304 	and.w	r3, r3, #4
 800f8ee:	9304      	str	r3, [sp, #16]
 800f8f0:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin | ARDUINO_TX_D1_Pin;
 800f8f2:	23c0      	movs	r3, #192	@ 0xc0
 800f8f4:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f8f6:	2302      	movs	r3, #2
 800f8f8:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f8fa:	2303      	movs	r3, #3
 800f8fc:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800f8fe:	2308      	movs	r3, #8
 800f900:	9309      	str	r3, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800f902:	a905      	add	r1, sp, #20
 800f904:	4806      	ldr	r0, [pc, #24]	@ (800f920 <HAL_UART_MspInit+0xdc>)
 800f906:	f7f9 fb1b 	bl	8008f40 <HAL_GPIO_Init>
}
 800f90a:	e7aa      	b.n	800f862 <HAL_UART_MspInit+0x1e>
 800f90c:	40011000 	.word	0x40011000
 800f910:	40011400 	.word	0x40011400
 800f914:	40023800 	.word	0x40023800
 800f918:	40020400 	.word	0x40020400
 800f91c:	40020000 	.word	0x40020000
 800f920:	40020800 	.word	0x40020800

0800f924 <HAL_LTDC_MspInit>:
    __HAL_RCC_USART6_CLK_DISABLE();

    HAL_GPIO_DeInit(GPIOC, ARDUINO_RX_D0_Pin | ARDUINO_TX_D1_Pin);
  }
}
void HAL_LTDC_MspInit(LTDC_HandleTypeDef *hltdc) {
 800f924:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f928:	b08c      	sub	sp, #48	@ 0x30
  GPIO_InitTypeDef GPIO_Init_Structure;

  __HAL_RCC_LTDC_CLK_ENABLE();
 800f92a:	4b43      	ldr	r3, [pc, #268]	@ (800fa38 <HAL_LTDC_MspInit+0x114>)
 800f92c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f92e:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 800f932:	645a      	str	r2, [r3, #68]	@ 0x44
 800f934:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f936:	f002 6280 	and.w	r2, r2, #67108864	@ 0x4000000
 800f93a:	9201      	str	r2, [sp, #4]
 800f93c:	9a01      	ldr	r2, [sp, #4]

  __HAL_RCC_GPIOE_CLK_ENABLE();
 800f93e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f940:	f042 0210 	orr.w	r2, r2, #16
 800f944:	631a      	str	r2, [r3, #48]	@ 0x30
 800f946:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f948:	f002 0210 	and.w	r2, r2, #16
 800f94c:	9202      	str	r2, [sp, #8]
 800f94e:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800f950:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f952:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800f956:	631a      	str	r2, [r3, #48]	@ 0x30
 800f958:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f95a:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 800f95e:	9203      	str	r2, [sp, #12]
 800f960:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800f962:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f964:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800f968:	631a      	str	r2, [r3, #48]	@ 0x30
 800f96a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f96c:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 800f970:	9204      	str	r2, [sp, #16]
 800f972:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800f974:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f976:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800f97a:	631a      	str	r2, [r3, #48]	@ 0x30
 800f97c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f97e:	f402 7200 	and.w	r2, r2, #512	@ 0x200
 800f982:	9205      	str	r2, [sp, #20]
 800f984:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800f986:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f988:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800f98c:	631a      	str	r2, [r3, #48]	@ 0x30
 800f98e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f990:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800f994:	9306      	str	r3, [sp, #24]
 800f996:	9b06      	ldr	r3, [sp, #24]

  GPIO_Init_Structure.Pin = GPIO_PIN_4;
 800f998:	2310      	movs	r3, #16
 800f99a:	9307      	str	r3, [sp, #28]
  GPIO_Init_Structure.Mode = GPIO_MODE_AF_PP;
 800f99c:	2402      	movs	r4, #2
 800f99e:	9408      	str	r4, [sp, #32]
  GPIO_Init_Structure.Pull = GPIO_NOPULL;
 800f9a0:	2300      	movs	r3, #0
 800f9a2:	9309      	str	r3, [sp, #36]	@ 0x24
  GPIO_Init_Structure.Speed = GPIO_SPEED_FAST;
 800f9a4:	940a      	str	r4, [sp, #40]	@ 0x28
  GPIO_Init_Structure.Alternate = GPIO_AF14_LTDC;
 800f9a6:	250e      	movs	r5, #14
 800f9a8:	950b      	str	r5, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_Init_Structure);
 800f9aa:	a907      	add	r1, sp, #28
 800f9ac:	4823      	ldr	r0, [pc, #140]	@ (800fa3c <HAL_LTDC_MspInit+0x118>)
 800f9ae:	f7f9 fac7 	bl	8008f40 <HAL_GPIO_Init>

  GPIO_Init_Structure.Pin = GPIO_PIN_12;
 800f9b2:	f44f 5780 	mov.w	r7, #4096	@ 0x1000
 800f9b6:	9707      	str	r7, [sp, #28]
  GPIO_Init_Structure.Mode = GPIO_MODE_AF_PP;
 800f9b8:	9408      	str	r4, [sp, #32]
  GPIO_Init_Structure.Alternate = GPIO_AF9_LTDC;
 800f9ba:	2309      	movs	r3, #9
 800f9bc:	930b      	str	r3, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_Init_Structure);
 800f9be:	a907      	add	r1, sp, #28
 800f9c0:	481f      	ldr	r0, [pc, #124]	@ (800fa40 <HAL_LTDC_MspInit+0x11c>)
 800f9c2:	f7f9 fabd 	bl	8008f40 <HAL_GPIO_Init>

  GPIO_Init_Structure.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 |
 800f9c6:	f44f 4367 	mov.w	r3, #59136	@ 0xe700
 800f9ca:	9307      	str	r3, [sp, #28]
                            GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  GPIO_Init_Structure.Mode = GPIO_MODE_AF_PP;
 800f9cc:	9408      	str	r4, [sp, #32]
  GPIO_Init_Structure.Alternate = GPIO_AF14_LTDC;
 800f9ce:	950b      	str	r5, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOI, &GPIO_Init_Structure);
 800f9d0:	4e1c      	ldr	r6, [pc, #112]	@ (800fa44 <HAL_LTDC_MspInit+0x120>)
 800f9d2:	a907      	add	r1, sp, #28
 800f9d4:	4630      	mov	r0, r6
 800f9d6:	f7f9 fab3 	bl	8008f40 <HAL_GPIO_Init>

  GPIO_Init_Structure.Pin =
 800f9da:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 800f9de:	9307      	str	r3, [sp, #28]
      GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |
      GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 |
      GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  GPIO_Init_Structure.Mode = GPIO_MODE_AF_PP;
 800f9e0:	9408      	str	r4, [sp, #32]
  GPIO_Init_Structure.Alternate = GPIO_AF14_LTDC;
 800f9e2:	950b      	str	r5, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOJ, &GPIO_Init_Structure);
 800f9e4:	a907      	add	r1, sp, #28
 800f9e6:	4818      	ldr	r0, [pc, #96]	@ (800fa48 <HAL_LTDC_MspInit+0x124>)
 800f9e8:	f7f9 faaa 	bl	8008f40 <HAL_GPIO_Init>

  GPIO_Init_Structure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 |
 800f9ec:	23f7      	movs	r3, #247	@ 0xf7
 800f9ee:	9307      	str	r3, [sp, #28]
                            GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  GPIO_Init_Structure.Mode = GPIO_MODE_AF_PP;
 800f9f0:	9408      	str	r4, [sp, #32]
  GPIO_Init_Structure.Alternate = GPIO_AF14_LTDC;
 800f9f2:	950b      	str	r5, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOK, &GPIO_Init_Structure);
 800f9f4:	4d15      	ldr	r5, [pc, #84]	@ (800fa4c <HAL_LTDC_MspInit+0x128>)
 800f9f6:	a907      	add	r1, sp, #28
 800f9f8:	4628      	mov	r0, r5
 800f9fa:	f7f9 faa1 	bl	8008f40 <HAL_GPIO_Init>

  GPIO_Init_Structure.Pin = GPIO_PIN_12;
 800f9fe:	9707      	str	r7, [sp, #28]
  GPIO_Init_Structure.Mode = GPIO_MODE_OUTPUT_PP;
 800fa00:	2401      	movs	r4, #1
 800fa02:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOI, &GPIO_Init_Structure);
 800fa04:	a907      	add	r1, sp, #28
 800fa06:	4630      	mov	r0, r6
 800fa08:	f7f9 fa9a 	bl	8008f40 <HAL_GPIO_Init>

  GPIO_Init_Structure.Pin = GPIO_PIN_3;
 800fa0c:	f04f 0808 	mov.w	r8, #8
 800fa10:	f8cd 801c 	str.w	r8, [sp, #28]
  GPIO_Init_Structure.Mode = GPIO_MODE_OUTPUT_PP;
 800fa14:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOK, &GPIO_Init_Structure);
 800fa16:	a907      	add	r1, sp, #28
 800fa18:	4628      	mov	r0, r5
 800fa1a:	f7f9 fa91 	bl	8008f40 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 800fa1e:	4622      	mov	r2, r4
 800fa20:	4639      	mov	r1, r7
 800fa22:	4630      	mov	r0, r6
 800fa24:	f7f9 fb85 	bl	8009132 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 800fa28:	4622      	mov	r2, r4
 800fa2a:	4641      	mov	r1, r8
 800fa2c:	4628      	mov	r0, r5
 800fa2e:	f7f9 fb80 	bl	8009132 <HAL_GPIO_WritePin>
}
 800fa32:	b00c      	add	sp, #48	@ 0x30
 800fa34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fa38:	40023800 	.word	0x40023800
 800fa3c:	40021000 	.word	0x40021000
 800fa40:	40021800 	.word	0x40021800
 800fa44:	40022000 	.word	0x40022000
 800fa48:	40022400 	.word	0x40022400
 800fa4c:	40022800 	.word	0x40022800

0800fa50 <NMI_Handler>:
 * Target ISA:  ARMv7E-M
 * -------------------------------------------------------------------- */
  
#include "stm32f7xx_it.h"
#include "main.h"
void NMI_Handler(void) {}
 800fa50:	4770      	bx	lr

0800fa52 <HardFault_Handler>:

void HardFault_Handler(void) {

  while (1) {
 800fa52:	e7fe      	b.n	800fa52 <HardFault_Handler>

0800fa54 <MemManage_Handler>:
  }
}

void MemManage_Handler(void) {

  while (1) {
 800fa54:	e7fe      	b.n	800fa54 <MemManage_Handler>

0800fa56 <BusFault_Handler>:
  }
}

void BusFault_Handler(void) {

  while (1) {
 800fa56:	e7fe      	b.n	800fa56 <BusFault_Handler>

0800fa58 <UsageFault_Handler>:
  }
}

void UsageFault_Handler(void) {

  while (1) {
 800fa58:	e7fe      	b.n	800fa58 <UsageFault_Handler>

0800fa5a <SVC_Handler>:
  }
}

void SVC_Handler(void) {}
 800fa5a:	4770      	bx	lr

0800fa5c <DebugMon_Handler>:

void DebugMon_Handler(void) {}
 800fa5c:	4770      	bx	lr

0800fa5e <PendSV_Handler>:

void PendSV_Handler(void) {}
 800fa5e:	4770      	bx	lr

0800fa60 <SysTick_Handler>:

void SysTick_Handler(void) { HAL_IncTick(); }
 800fa60:	b508      	push	{r3, lr}
 800fa62:	f7f8 ff37 	bl	80088d4 <HAL_IncTick>
 800fa66:	bd08      	pop	{r3, pc}

0800fa68 <SystemInit>:
#define VECT_TAB_OFFSET 0x00
uint32_t SystemCoreClock = 16000000;
const uint8_t AHBPrescTable[16] = {0, 0, 0, 0, 0, 0, 0, 0,
                                   1, 2, 3, 4, 6, 7, 8, 9};
const uint8_t APBPrescTable[8] = {0, 0, 0, 0, 1, 2, 3, 4};
void SystemInit(void) {
 800fa68:	b410      	push	{r4}

#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10 * 2) | (3UL << 11 * 2));
 800fa6a:	4a0f      	ldr	r2, [pc, #60]	@ (800faa8 <SystemInit+0x40>)
 800fa6c:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800fa70:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800fa74:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif

  RCC->CR |= (uint32_t)0x00000001;
 800fa78:	4b0c      	ldr	r3, [pc, #48]	@ (800faac <SystemInit+0x44>)
 800fa7a:	6819      	ldr	r1, [r3, #0]
 800fa7c:	f041 0101 	orr.w	r1, r1, #1
 800fa80:	6019      	str	r1, [r3, #0]

  RCC->CFGR = 0x00000000;
 800fa82:	2000      	movs	r0, #0
 800fa84:	6098      	str	r0, [r3, #8]

  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800fa86:	681c      	ldr	r4, [r3, #0]
 800fa88:	4909      	ldr	r1, [pc, #36]	@ (800fab0 <SystemInit+0x48>)
 800fa8a:	4021      	ands	r1, r4
 800fa8c:	6019      	str	r1, [r3, #0]

  RCC->PLLCFGR = 0x24003010;
 800fa8e:	4909      	ldr	r1, [pc, #36]	@ (800fab4 <SystemInit+0x4c>)
 800fa90:	6059      	str	r1, [r3, #4]

  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800fa92:	6819      	ldr	r1, [r3, #0]
 800fa94:	f421 2180 	bic.w	r1, r1, #262144	@ 0x40000
 800fa98:	6019      	str	r1, [r3, #0]

  RCC->CIR = 0x00000000;
 800fa9a:	60d8      	str	r0, [r3, #12]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET;
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET;
 800fa9c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800faa0:	6093      	str	r3, [r2, #8]
#endif
}
 800faa2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800faa6:	4770      	bx	lr
 800faa8:	e000ed00 	.word	0xe000ed00
 800faac:	40023800 	.word	0x40023800
 800fab0:	fef6ffff 	.word	0xfef6ffff
 800fab4:	24003010 	.word	0x24003010

0800fab8 <depthwise_kernel3x3_stride1_inplace_kernel_CHW_fpreq>:
        const uint16_t output_y, const uint16_t output_x,
        const int32_t *bias, const int32_t *biasR, const q7_t *ksrc, const float *scales,
        q7_t *output, const int32_t output_offset,
        const int32_t activation_min, const int32_t activation_max,
        q7_t *cols_8b_iterptr, const uint16_t column_x, int channel_offset)
{
 800fab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fabc:	b085      	sub	sp, #20
 800fabe:	4682      	mov	sl, r0
 800fac0:	4696      	mov	lr, r2
 800fac2:	461e      	mov	r6, r3
 800fac4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fac6:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 800fac8:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 800faca:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800facc:	f8bd 0054 	ldrh.w	r0, [sp, #84]	@ 0x54
 800fad0:	9002      	str	r0, [sp, #8]
    #define STRIDE 1
    int i, j;
    /* MACs for each output */
    for (i = 0; i < output_y; i++) {
 800fad2:	2000      	movs	r0, #0
 800fad4:	9000      	str	r0, [sp, #0]
 800fad6:	f8cd a00c 	str.w	sl, [sp, #12]
 800fada:	e108      	b.n	800fcee <depthwise_kernel3x3_stride1_inplace_kernel_CHW_fpreq+0x236>
        for (j = 0; j < output_x / 2; j++) {
            q7_t *cols_8b = cols_8b_iterptr;

            q31_t sum0 = bias[0] + biasR[0];
 800fadc:	f8de 0000 	ldr.w	r0, [lr]
 800fae0:	9e01      	ldr	r6, [sp, #4]
 800fae2:	6837      	ldr	r7, [r6, #0]
 800fae4:	4438      	add	r0, r7
            q31_t sum1 = bias[0] + biasR[0];
            
            /* computation */
            sum0 += cols_8b[0]*ksrc[0];
 800fae6:	f992 7000 	ldrsb.w	r7, [r2]
 800faea:	f993 c000 	ldrsb.w	ip, [r3]
 800faee:	fb0c 0707 	mla	r7, ip, r7, r0
            sum1 += cols_8b[1]*ksrc[0];
 800faf2:	f992 9001 	ldrsb.w	r9, [r2, #1]
 800faf6:	fb09 000c 	mla	r0, r9, ip, r0
            sum0 += cols_8b[1]*ksrc[1];
 800fafa:	f993 c001 	ldrsb.w	ip, [r3, #1]
 800fafe:	fb0c 7709 	mla	r7, ip, r9, r7
            sum1 += cols_8b[2]*ksrc[1];
 800fb02:	f992 9002 	ldrsb.w	r9, [r2, #2]
 800fb06:	fb09 000c 	mla	r0, r9, ip, r0
            sum0 += cols_8b[2]*ksrc[2];
 800fb0a:	f993 c002 	ldrsb.w	ip, [r3, #2]
 800fb0e:	fb0c 7709 	mla	r7, ip, r9, r7
            sum1 += cols_8b[3]*ksrc[2];
 800fb12:	f992 9003 	ldrsb.w	r9, [r2, #3]
 800fb16:	fb09 000c 	mla	r0, r9, ip, r0
            cols_8b += column_x + 2;
 800fb1a:	9e02      	ldr	r6, [sp, #8]
 800fb1c:	f106 0902 	add.w	r9, r6, #2
 800fb20:	eb02 0c09 	add.w	ip, r2, r9
            sum0 += cols_8b[0]*ksrc[3];
 800fb24:	f912 b009 	ldrsb.w	fp, [r2, r9]
 800fb28:	f993 a003 	ldrsb.w	sl, [r3, #3]
 800fb2c:	fb0a 770b 	mla	r7, sl, fp, r7
            sum1 += cols_8b[1]*ksrc[3];
 800fb30:	f99c b001 	ldrsb.w	fp, [ip, #1]
 800fb34:	fb0b 000a 	mla	r0, fp, sl, r0
            sum0 += cols_8b[1]*ksrc[4];
 800fb38:	f993 a004 	ldrsb.w	sl, [r3, #4]
 800fb3c:	fb0a 770b 	mla	r7, sl, fp, r7
            sum1 += cols_8b[2]*ksrc[4];
 800fb40:	f99c b002 	ldrsb.w	fp, [ip, #2]
 800fb44:	fb0b 000a 	mla	r0, fp, sl, r0
            sum0 += cols_8b[2]*ksrc[5];
 800fb48:	f993 a005 	ldrsb.w	sl, [r3, #5]
 800fb4c:	fb0a 770b 	mla	r7, sl, fp, r7
            sum1 += cols_8b[3]*ksrc[5];
 800fb50:	f99c b003 	ldrsb.w	fp, [ip, #3]
 800fb54:	fb0b 0b0a 	mla	fp, fp, sl, r0
            cols_8b += column_x + 2;
 800fb58:	eb0c 0009 	add.w	r0, ip, r9
            sum0 += cols_8b[0]*ksrc[6];
 800fb5c:	f91c 9009 	ldrsb.w	r9, [ip, r9]
 800fb60:	f993 c006 	ldrsb.w	ip, [r3, #6]
 800fb64:	fb0c 7709 	mla	r7, ip, r9, r7
            sum1 += cols_8b[1]*ksrc[6];
 800fb68:	f990 9001 	ldrsb.w	r9, [r0, #1]
 800fb6c:	fb09 bc0c 	mla	ip, r9, ip, fp
            sum0 += cols_8b[1]*ksrc[7];
 800fb70:	f993 a007 	ldrsb.w	sl, [r3, #7]
 800fb74:	fb0a 7709 	mla	r7, sl, r9, r7
            sum1 += cols_8b[2]*ksrc[7];
 800fb78:	f990 9002 	ldrsb.w	r9, [r0, #2]
 800fb7c:	fb09 cc0a 	mla	ip, r9, sl, ip
            sum0 += cols_8b[2]*ksrc[8];
 800fb80:	f993 a008 	ldrsb.w	sl, [r3, #8]
 800fb84:	fb0a 7709 	mla	r7, sl, r9, r7
            sum1 += cols_8b[3]*ksrc[8];
 800fb88:	f990 0003 	ldrsb.w	r0, [r0, #3]
 800fb8c:	fb00 cc0a 	mla	ip, r0, sl, ip

            /* requantize */
            sum0 = (float) sum0 * *scales;
 800fb90:	ee07 7a90 	vmov	s15, r7
 800fb94:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fb98:	ed95 7a00 	vldr	s14, [r5]
 800fb9c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800fba0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800fba4:	ee17 0a90 	vmov	r0, s15
            sum0 += output_offset;
 800fba8:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 800fbaa:	4430      	add	r0, r6
            sum0 = TN_MAX(sum0, activation_min);
 800fbac:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 800fbae:	42b0      	cmp	r0, r6
 800fbb0:	bfb8      	it	lt
 800fbb2:	4630      	movlt	r0, r6
            sum0 = TN_MIN(sum0, activation_max);
 800fbb4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800fbb6:	42b0      	cmp	r0, r6
 800fbb8:	bfa8      	it	ge
 800fbba:	4630      	movge	r0, r6
            output[(i * output_x + j * 2) * channel_offset] = sum0;
 800fbbc:	9e00      	ldr	r6, [sp, #0]
 800fbbe:	fb06 f701 	mul.w	r7, r6, r1
 800fbc2:	ea4f 0948 	mov.w	r9, r8, lsl #1
 800fbc6:	eb07 0a48 	add.w	sl, r7, r8, lsl #1
 800fbca:	9e16      	ldr	r6, [sp, #88]	@ 0x58
 800fbcc:	fb06 fa0a 	mul.w	sl, r6, sl
 800fbd0:	f804 000a 	strb.w	r0, [r4, sl]

            sum1 = (float) sum1 * *scales;
 800fbd4:	ee07 ca90 	vmov	s15, ip
 800fbd8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fbdc:	ed95 7a00 	vldr	s14, [r5]
 800fbe0:	ee67 7a87 	vmul.f32	s15, s15, s14
 800fbe4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800fbe8:	ee17 0a90 	vmov	r0, s15
            sum1 += output_offset;
 800fbec:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 800fbee:	4430      	add	r0, r6
            sum1 = TN_MAX(sum1, activation_min);
 800fbf0:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 800fbf2:	42b0      	cmp	r0, r6
 800fbf4:	bfb8      	it	lt
 800fbf6:	4630      	movlt	r0, r6
            sum1 = TN_MIN(sum1, activation_max);
 800fbf8:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800fbfa:	42b0      	cmp	r0, r6
 800fbfc:	bfa8      	it	ge
 800fbfe:	4630      	movge	r0, r6
            output[(i * output_x + (j * 2 + 1)) * channel_offset] = sum1;
 800fc00:	f109 0901 	add.w	r9, r9, #1
 800fc04:	444f      	add	r7, r9
 800fc06:	9e16      	ldr	r6, [sp, #88]	@ 0x58
 800fc08:	fb06 f707 	mul.w	r7, r6, r7
 800fc0c:	55e0      	strb	r0, [r4, r7]

            cols_8b_iterptr += STRIDE * 2;
 800fc0e:	3202      	adds	r2, #2
        for (j = 0; j < output_x / 2; j++) {
 800fc10:	f108 0801 	add.w	r8, r8, #1
 800fc14:	ebb8 0f51 	cmp.w	r8, r1, lsr #1
 800fc18:	f6ff af60 	blt.w	800fadc <depthwise_kernel3x3_stride1_inplace_kernel_CHW_fpreq+0x24>
        }
        if (output_x & 1) {
 800fc1c:	9e01      	ldr	r6, [sp, #4]
 800fc1e:	f011 0f01 	tst.w	r1, #1
 800fc22:	d060      	beq.n	800fce6 <depthwise_kernel3x3_stride1_inplace_kernel_CHW_fpreq+0x22e>
            q7_t * cols_8b = cols_8b_iterptr;
            q31_t sum = bias[0] + biasR[0];
 800fc24:	f8de 0000 	ldr.w	r0, [lr]
 800fc28:	6837      	ldr	r7, [r6, #0]
 800fc2a:	4438      	add	r0, r7
            sum += cols_8b[0]*ksrc[0];
 800fc2c:	f992 7000 	ldrsb.w	r7, [r2]
 800fc30:	f993 c000 	ldrsb.w	ip, [r3]
 800fc34:	fb0c 0007 	mla	r0, ip, r7, r0
            sum += cols_8b[1]*ksrc[1];
 800fc38:	f992 7001 	ldrsb.w	r7, [r2, #1]
 800fc3c:	f993 c001 	ldrsb.w	ip, [r3, #1]
 800fc40:	fb0c 0007 	mla	r0, ip, r7, r0
            sum += cols_8b[2]*ksrc[2];
 800fc44:	f992 7002 	ldrsb.w	r7, [r2, #2]
 800fc48:	f993 c002 	ldrsb.w	ip, [r3, #2]
 800fc4c:	fb0c 0007 	mla	r0, ip, r7, r0
            cols_8b += column_x + 2;
 800fc50:	9f02      	ldr	r7, [sp, #8]
 800fc52:	3702      	adds	r7, #2
 800fc54:	eb02 0c07 	add.w	ip, r2, r7
            sum += cols_8b[0]*ksrc[3];
 800fc58:	f912 8007 	ldrsb.w	r8, [r2, r7]
 800fc5c:	f993 9003 	ldrsb.w	r9, [r3, #3]
 800fc60:	fb09 0008 	mla	r0, r9, r8, r0
            sum += cols_8b[1]*ksrc[4];
 800fc64:	f99c 8001 	ldrsb.w	r8, [ip, #1]
 800fc68:	f993 9004 	ldrsb.w	r9, [r3, #4]
 800fc6c:	fb09 0008 	mla	r0, r9, r8, r0
            sum += cols_8b[2]*ksrc[5];
 800fc70:	f99c 8002 	ldrsb.w	r8, [ip, #2]
 800fc74:	f993 9005 	ldrsb.w	r9, [r3, #5]
 800fc78:	fb09 0008 	mla	r0, r9, r8, r0
            cols_8b += column_x + 2;
 800fc7c:	eb0c 0807 	add.w	r8, ip, r7
            sum += cols_8b[0]*ksrc[6];
 800fc80:	f91c 7007 	ldrsb.w	r7, [ip, r7]
 800fc84:	f993 c006 	ldrsb.w	ip, [r3, #6]
 800fc88:	fb0c 0007 	mla	r0, ip, r7, r0
            sum += cols_8b[1]*ksrc[7];
 800fc8c:	f998 7001 	ldrsb.w	r7, [r8, #1]
 800fc90:	f993 c007 	ldrsb.w	ip, [r3, #7]
 800fc94:	fb0c 0007 	mla	r0, ip, r7, r0
            sum += cols_8b[2]*ksrc[8];
 800fc98:	f998 7002 	ldrsb.w	r7, [r8, #2]
 800fc9c:	f993 c008 	ldrsb.w	ip, [r3, #8]
 800fca0:	fb0c 0007 	mla	r0, ip, r7, r0

            sum = (float) sum * *scales;
 800fca4:	ee07 0a90 	vmov	s15, r0
 800fca8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fcac:	ed95 7a00 	vldr	s14, [r5]
 800fcb0:	ee67 7a87 	vmul.f32	s15, s15, s14
 800fcb4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800fcb8:	ee17 0a90 	vmov	r0, s15
            sum += output_offset;
 800fcbc:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 800fcbe:	4438      	add	r0, r7
            sum = TN_MAX(sum, activation_min);
 800fcc0:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 800fcc2:	42b8      	cmp	r0, r7
 800fcc4:	bfb8      	it	lt
 800fcc6:	4638      	movlt	r0, r7
            sum = TN_MIN(sum, activation_max);
 800fcc8:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 800fcca:	42b8      	cmp	r0, r7
 800fccc:	bfa8      	it	ge
 800fcce:	4638      	movge	r0, r7
 800fcd0:	4684      	mov	ip, r0
            output[(i * output_x + output_x - 1) * channel_offset] = sum;
 800fcd2:	9f00      	ldr	r7, [sp, #0]
 800fcd4:	fb07 1701 	mla	r7, r7, r1, r1
 800fcd8:	3f01      	subs	r7, #1
 800fcda:	9816      	ldr	r0, [sp, #88]	@ 0x58
 800fcdc:	fb00 f707 	mul.w	r7, r0, r7
 800fce0:	f804 c007 	strb.w	ip, [r4, r7]

            cols_8b_iterptr += STRIDE;
 800fce4:	3201      	adds	r2, #1
        }
        cols_8b_iterptr += 1 * 2;
 800fce6:	3202      	adds	r2, #2
    for (i = 0; i < output_y; i++) {
 800fce8:	9800      	ldr	r0, [sp, #0]
 800fcea:	3001      	adds	r0, #1
 800fcec:	9000      	str	r0, [sp, #0]
 800fcee:	9803      	ldr	r0, [sp, #12]
 800fcf0:	9f00      	ldr	r7, [sp, #0]
 800fcf2:	42b8      	cmp	r0, r7
 800fcf4:	dd03      	ble.n	800fcfe <depthwise_kernel3x3_stride1_inplace_kernel_CHW_fpreq+0x246>
        for (j = 0; j < output_x / 2; j++) {
 800fcf6:	f04f 0800 	mov.w	r8, #0
 800fcfa:	9601      	str	r6, [sp, #4]
 800fcfc:	e78a      	b.n	800fc14 <depthwise_kernel3x3_stride1_inplace_kernel_CHW_fpreq+0x15c>
    }
}
 800fcfe:	b005      	add	sp, #20
 800fd00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800fd04 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq>:
{
 800fd04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd08:	b08f      	sub	sp, #60	@ 0x3c
 800fd0a:	4680      	mov	r8, r0
 800fd0c:	460c      	mov	r4, r1
 800fd0e:	4616      	mov	r6, r2
 800fd10:	461d      	mov	r5, r3
 800fd12:	f8dd a060 	ldr.w	sl, [sp, #96]	@ 0x60
 800fd16:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800fd18:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 800fd1a:	f8dd e06c 	ldr.w	lr, [sp, #108]	@ 0x6c
 800fd1e:	f8bd 1084 	ldrh.w	r1, [sp, #132]	@ 0x84
 800fd22:	910c      	str	r1, [sp, #48]	@ 0x30
 800fd24:	f8bd 1088 	ldrh.w	r1, [sp, #136]	@ 0x88
 800fd28:	910d      	str	r1, [sp, #52]	@ 0x34
 800fd2a:	f8dd b090 	ldr.w	fp, [sp, #144]	@ 0x90
 800fd2e:	f99d 7094 	ldrsb.w	r7, [sp, #148]	@ 0x94
    q7_t* cols_8b = (q7_t* )cols_8b_start;
 800fd32:	4659      	mov	r1, fp
    for(i = 0; i < input_x + 2; i++){
 800fd34:	2000      	movs	r0, #0
 800fd36:	e003      	b.n	800fd40 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x3c>
        *cols_8b++ = PAD8;
 800fd38:	f801 7b01 	strb.w	r7, [r1], #1
    for(i = 0; i < input_x + 2; i++){
 800fd3c:	3001      	adds	r0, #1
 800fd3e:	b280      	uxth	r0, r0
 800fd40:	f104 0c01 	add.w	ip, r4, #1
 800fd44:	4584      	cmp	ip, r0
 800fd46:	daf7      	bge.n	800fd38 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x34>
    for(i = 0; i < input_y; i++){
 800fd48:	2000      	movs	r0, #0
 800fd4a:	e007      	b.n	800fd5c <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x58>
        *cols_8b++ = PAD8;//left
 800fd4c:	700f      	strb	r7, [r1, #0]
        cols_8b += input_x; //skip middle
 800fd4e:	f104 0901 	add.w	r9, r4, #1
        *cols_8b++ = PAD8;//right
 800fd52:	4449      	add	r1, r9
 800fd54:	f801 7b01 	strb.w	r7, [r1], #1
    for(i = 0; i < input_y; i++){
 800fd58:	3001      	adds	r0, #1
 800fd5a:	b280      	uxth	r0, r0
 800fd5c:	42b0      	cmp	r0, r6
 800fd5e:	d3f5      	bcc.n	800fd4c <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x48>
    for(i = 0; i < input_x + 2; i++){
 800fd60:	2000      	movs	r0, #0
 800fd62:	e003      	b.n	800fd6c <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x68>
        *cols_8b++ = PAD8;
 800fd64:	f801 7b01 	strb.w	r7, [r1], #1
    for(i = 0; i < input_x + 2; i++){
 800fd68:	3001      	adds	r0, #1
 800fd6a:	b280      	uxth	r0, r0
 800fd6c:	4584      	cmp	ip, r0
 800fd6e:	daf9      	bge.n	800fd64 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x60>
    for (c = 0; c < input_ch; c++){
 800fd70:	2700      	movs	r7, #0
 800fd72:	4670      	mov	r0, lr
 800fd74:	e035      	b.n	800fde2 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0xde>
                *cols_8b++ = *src;// + input_offset;
 800fd76:	f99c e000 	ldrsb.w	lr, [ip]
 800fd7a:	f801 eb01 	strb.w	lr, [r1], #1
                src += input_ch;
 800fd7e:	44ac      	add	ip, r5
            for(j = 0; j < input_x; j++){
 800fd80:	3701      	adds	r7, #1
 800fd82:	b2bf      	uxth	r7, r7
 800fd84:	42a7      	cmp	r7, r4
 800fd86:	d3f6      	bcc.n	800fd76 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x72>
            cols_8b += 1;//skip end
 800fd88:	3101      	adds	r1, #1
        for(i = 0; i < input_y; i++){
 800fd8a:	f109 0901 	add.w	r9, r9, #1
 800fd8e:	fa1f f989 	uxth.w	r9, r9
 800fd92:	45b1      	cmp	r9, r6
 800fd94:	d202      	bcs.n	800fd9c <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x98>
            cols_8b += 1;//skip front
 800fd96:	3101      	adds	r1, #1
            for(j = 0; j < input_x; j++){
 800fd98:	2700      	movs	r7, #0
 800fd9a:	e7f3      	b.n	800fd84 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x80>
        depthwise_kernel3x3_stride1_inplace_kernel_CHW_fpreq(output_y, output_x, bias++, biasR++, ksrc, scales++, inplace_out, output_offset,output_activation_min, output_activation_max,cols_8b_start, input_x, input_ch);
 800fd9c:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 800fd9e:	1d11      	adds	r1, r2, #4
 800fda0:	910a      	str	r1, [sp, #40]	@ 0x28
 800fda2:	f103 0904 	add.w	r9, r3, #4
 800fda6:	1d01      	adds	r1, r0, #4
 800fda8:	910b      	str	r1, [sp, #44]	@ 0x2c
 800fdaa:	9508      	str	r5, [sp, #32]
 800fdac:	9407      	str	r4, [sp, #28]
 800fdae:	f8cd b018 	str.w	fp, [sp, #24]
 800fdb2:	991f      	ldr	r1, [sp, #124]	@ 0x7c
 800fdb4:	9105      	str	r1, [sp, #20]
 800fdb6:	991e      	ldr	r1, [sp, #120]	@ 0x78
 800fdb8:	9104      	str	r1, [sp, #16]
 800fdba:	991c      	ldr	r1, [sp, #112]	@ 0x70
 800fdbc:	9103      	str	r1, [sp, #12]
 800fdbe:	f8cd 8008 	str.w	r8, [sp, #8]
 800fdc2:	9001      	str	r0, [sp, #4]
 800fdc4:	f8cd a000 	str.w	sl, [sp]
 800fdc8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800fdca:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800fdcc:	f7ff fe74 	bl	800fab8 <depthwise_kernel3x3_stride1_inplace_kernel_CHW_fpreq>
        ksrc += 9;
 800fdd0:	f10a 0a09 	add.w	sl, sl, #9
        input++;
 800fdd4:	f108 0801 	add.w	r8, r8, #1
    for (c = 0; c < input_ch; c++){
 800fdd8:	3701      	adds	r7, #1
 800fdda:	b2bf      	uxth	r7, r7
        depthwise_kernel3x3_stride1_inplace_kernel_CHW_fpreq(output_y, output_x, bias++, biasR++, ksrc, scales++, inplace_out, output_offset,output_activation_min, output_activation_max,cols_8b_start, input_x, input_ch);
 800fddc:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800fdde:	464b      	mov	r3, r9
 800fde0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
    for (c = 0; c < input_ch; c++){
 800fde2:	42af      	cmp	r7, r5
 800fde4:	d206      	bcs.n	800fdf4 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0xf0>
        cols_8b = (q7_t*)(cols_8b_start + 1 * (input_x) + 2); //skip 1 rows
 800fde6:	1ca1      	adds	r1, r4, #2
 800fde8:	4459      	add	r1, fp
        src = input;
 800fdea:	46c4      	mov	ip, r8
        for(i = 0; i < input_y; i++){
 800fdec:	f04f 0900 	mov.w	r9, #0
 800fdf0:	970a      	str	r7, [sp, #40]	@ 0x28
 800fdf2:	e7ce      	b.n	800fd92 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x8e>
}
 800fdf4:	2000      	movs	r0, #0
 800fdf6:	b00f      	add	sp, #60	@ 0x3c
 800fdf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800fdfc <depthwise_kernel3x3_stride1_inplace_kernel_CHW_fpreq_bitmask>:
    const uint16_t output_y, const uint16_t output_x,
    const int32_t *bias, const int32_t *biasR, const q7_t *ksrc, const float *scales,
    q7_t *output, q7_t *output_mask, const int mask_idx, const int32_t output_offset,
    const int32_t activation_min, const int32_t activation_max,
    q7_t *cols_8b_iterptr, const uint16_t column_x, int channel_offset)
{
 800fdfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe00:	b087      	sub	sp, #28
 800fe02:	4682      	mov	sl, r0
 800fe04:	468c      	mov	ip, r1
 800fe06:	9202      	str	r2, [sp, #8]
 800fe08:	9303      	str	r3, [sp, #12]
 800fe0a:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800fe0c:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 800fe0e:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 800fe10:	9e16      	ldr	r6, [sp, #88]	@ 0x58
 800fe12:	9d17      	ldr	r5, [sp, #92]	@ 0x5c
 800fe14:	9918      	ldr	r1, [sp, #96]	@ 0x60
 800fe16:	f8bd 3064 	ldrh.w	r3, [sp, #100]	@ 0x64
 800fe1a:	9304      	str	r3, [sp, #16]
    #define STRIDE 1
    int i, j;
    q7_t mask_value;
    /* MACs for each output */
    for (i = 0; i < output_y; i++) {
 800fe1c:	2300      	movs	r3, #0
 800fe1e:	9301      	str	r3, [sp, #4]
 800fe20:	f8cd a014 	str.w	sl, [sp, #20]
 800fe24:	46ba      	mov	sl, r7
 800fe26:	e17f      	b.n	8010128 <depthwise_kernel3x3_stride1_inplace_kernel_CHW_fpreq_bitmask+0x32c>
            /* requantize */
            sum0 = (float) sum0 * *scales;
            sum0 += output_offset;
            mask_value = 1;
            if (sum0 < activation_min){
                sum0 = activation_min;
 800fe28:	4632      	mov	r2, r6
                mask_value = 0;
 800fe2a:	f04f 0b00 	mov.w	fp, #0
 800fe2e:	e0ca      	b.n	800ffc6 <depthwise_kernel3x3_stride1_inplace_kernel_CHW_fpreq_bitmask+0x1ca>
                sum0 = activation_max;
                mask_value = 0;
            }
            output[(i * output_x + j * 2) * channel_offset] = sum0;
            if (mask_value == 1)
                BIT_SET(output_mask[(i * output_x + j * 2) * channel_offset / 8], mask_idx);
 800fe30:	464a      	mov	r2, r9
 800fe32:	f1b9 0f00 	cmp.w	r9, #0
 800fe36:	db0c      	blt.n	800fe52 <depthwise_kernel3x3_stride1_inplace_kernel_CHW_fpreq_bitmask+0x56>
 800fe38:	10d2      	asrs	r2, r2, #3
 800fe3a:	f914 9002 	ldrsb.w	r9, [r4, r2]
 800fe3e:	f04f 0b01 	mov.w	fp, #1
 800fe42:	9f14      	ldr	r7, [sp, #80]	@ 0x50
 800fe44:	fa0b fb07 	lsl.w	fp, fp, r7
 800fe48:	ea49 090b 	orr.w	r9, r9, fp
 800fe4c:	f804 9002 	strb.w	r9, [r4, r2]
 800fe50:	e00f      	b.n	800fe72 <depthwise_kernel3x3_stride1_inplace_kernel_CHW_fpreq_bitmask+0x76>
 800fe52:	f109 0207 	add.w	r2, r9, #7
 800fe56:	e7ef      	b.n	800fe38 <depthwise_kernel3x3_stride1_inplace_kernel_CHW_fpreq_bitmask+0x3c>
            else
                BIT_CLEAR(output_mask[(i * output_x + j * 2) * channel_offset / 8], mask_idx);
 800fe58:	ea4f 09e2 	mov.w	r9, r2, asr #3
 800fe5c:	f914 b009 	ldrsb.w	fp, [r4, r9]
 800fe60:	2201      	movs	r2, #1
 800fe62:	9f14      	ldr	r7, [sp, #80]	@ 0x50
 800fe64:	40ba      	lsls	r2, r7
 800fe66:	43d2      	mvns	r2, r2
 800fe68:	b2d2      	uxtb	r2, r2
 800fe6a:	ea0b 0b02 	and.w	fp, fp, r2
 800fe6e:	f804 b009 	strb.w	fp, [r4, r9]

            sum1 = (float) sum1 * *scales;
 800fe72:	ee07 ea90 	vmov	s15, lr
 800fe76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fe7a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800fe7c:	ed92 7a00 	vldr	s14, [r2]
 800fe80:	ee67 7a87 	vmul.f32	s15, s15, s14
 800fe84:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800fe88:	ee17 2a90 	vmov	r2, s15
            sum1 += output_offset;
 800fe8c:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 800fe8e:	443a      	add	r2, r7
            mask_value = 1;
            if (sum1 < activation_min){
 800fe90:	4296      	cmp	r6, r2
 800fe92:	f300 80b6 	bgt.w	8010002 <depthwise_kernel3x3_stride1_inplace_kernel_CHW_fpreq_bitmask+0x206>
            mask_value = 1;
 800fe96:	f04f 0e01 	mov.w	lr, #1
                sum1 = activation_min;
                mask_value = 0;
            }
            if (sum1 > activation_max){
 800fe9a:	42aa      	cmp	r2, r5
 800fe9c:	dd02      	ble.n	800fea4 <depthwise_kernel3x3_stride1_inplace_kernel_CHW_fpreq_bitmask+0xa8>
                sum1 = activation_max;
 800fe9e:	462a      	mov	r2, r5
                mask_value = 0;
 800fea0:	f04f 0e00 	mov.w	lr, #0
            }
            output[(i * output_x + (j * 2 + 1)) * channel_offset] = sum1;
 800fea4:	f10a 0a01 	add.w	sl, sl, #1
 800fea8:	4453      	add	r3, sl
 800feaa:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 800feac:	fb07 f303 	mul.w	r3, r7, r3
 800feb0:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 800feb2:	54fa      	strb	r2, [r7, r3]
            if (mask_value == 1)
 800feb4:	f1be 0f00 	cmp.w	lr, #0
 800feb8:	f040 80a7 	bne.w	801000a <depthwise_kernel3x3_stride1_inplace_kernel_CHW_fpreq_bitmask+0x20e>
                BIT_SET(output_mask[(i * output_x + (j * 2 + 1)) * channel_offset / 8], mask_idx);
            else
                BIT_CLEAR(output_mask[(i * output_x + (j * 2 + 1)) * channel_offset / 8], mask_idx);
 800febc:	461a      	mov	r2, r3
 800febe:	2b00      	cmp	r3, #0
 800fec0:	f2c0 80b3 	blt.w	801002a <depthwise_kernel3x3_stride1_inplace_kernel_CHW_fpreq_bitmask+0x22e>
 800fec4:	10d2      	asrs	r2, r2, #3
 800fec6:	f914 e002 	ldrsb.w	lr, [r4, r2]
 800feca:	2301      	movs	r3, #1
 800fecc:	9f14      	ldr	r7, [sp, #80]	@ 0x50
 800fece:	40bb      	lsls	r3, r7
 800fed0:	43db      	mvns	r3, r3
 800fed2:	b2db      	uxtb	r3, r3
 800fed4:	ea0e 0e03 	and.w	lr, lr, r3
 800fed8:	f804 e002 	strb.w	lr, [r4, r2]

            cols_8b_iterptr += STRIDE * 2;
 800fedc:	3102      	adds	r1, #2
        for (j = 0; j < output_x / 2; j++) {
 800fede:	f108 0801 	add.w	r8, r8, #1
 800fee2:	ebb8 0f5c 	cmp.w	r8, ip, lsr #1
 800fee6:	f280 80a2 	bge.w	801002e <depthwise_kernel3x3_stride1_inplace_kernel_CHW_fpreq_bitmask+0x232>
            q31_t sum0 = bias[0] + biasR[0];
 800feea:	9b02      	ldr	r3, [sp, #8]
 800feec:	681b      	ldr	r3, [r3, #0]
 800feee:	9a03      	ldr	r2, [sp, #12]
 800fef0:	6812      	ldr	r2, [r2, #0]
 800fef2:	4413      	add	r3, r2
            sum0 += cols_8b[0]*ksrc[0];
 800fef4:	f991 2000 	ldrsb.w	r2, [r1]
 800fef8:	f990 e000 	ldrsb.w	lr, [r0]
 800fefc:	fb0e 3202 	mla	r2, lr, r2, r3
            sum1 += cols_8b[1]*ksrc[0];
 800ff00:	f991 9001 	ldrsb.w	r9, [r1, #1]
 800ff04:	fb09 330e 	mla	r3, r9, lr, r3
            sum0 += cols_8b[1]*ksrc[1];
 800ff08:	f990 e001 	ldrsb.w	lr, [r0, #1]
 800ff0c:	fb0e 2209 	mla	r2, lr, r9, r2
            sum1 += cols_8b[2]*ksrc[1];
 800ff10:	f991 9002 	ldrsb.w	r9, [r1, #2]
 800ff14:	fb09 330e 	mla	r3, r9, lr, r3
            sum0 += cols_8b[2]*ksrc[2];
 800ff18:	f990 e002 	ldrsb.w	lr, [r0, #2]
 800ff1c:	fb0e 2209 	mla	r2, lr, r9, r2
            sum1 += cols_8b[3]*ksrc[2];
 800ff20:	f991 9003 	ldrsb.w	r9, [r1, #3]
 800ff24:	fb09 330e 	mla	r3, r9, lr, r3
            cols_8b += column_x + 2;
 800ff28:	9f04      	ldr	r7, [sp, #16]
 800ff2a:	f107 0902 	add.w	r9, r7, #2
 800ff2e:	eb01 0e09 	add.w	lr, r1, r9
            sum0 += cols_8b[0]*ksrc[3];
 800ff32:	f911 b009 	ldrsb.w	fp, [r1, r9]
 800ff36:	f990 a003 	ldrsb.w	sl, [r0, #3]
 800ff3a:	fb0a 220b 	mla	r2, sl, fp, r2
            sum1 += cols_8b[1]*ksrc[3];
 800ff3e:	f99e b001 	ldrsb.w	fp, [lr, #1]
 800ff42:	fb0b 330a 	mla	r3, fp, sl, r3
            sum0 += cols_8b[1]*ksrc[4];
 800ff46:	f990 a004 	ldrsb.w	sl, [r0, #4]
 800ff4a:	fb0a 220b 	mla	r2, sl, fp, r2
            sum1 += cols_8b[2]*ksrc[4];
 800ff4e:	f99e b002 	ldrsb.w	fp, [lr, #2]
 800ff52:	fb0b 330a 	mla	r3, fp, sl, r3
            sum0 += cols_8b[2]*ksrc[5];
 800ff56:	f990 a005 	ldrsb.w	sl, [r0, #5]
 800ff5a:	fb0a 220b 	mla	r2, sl, fp, r2
            sum1 += cols_8b[3]*ksrc[5];
 800ff5e:	f99e b003 	ldrsb.w	fp, [lr, #3]
 800ff62:	fb0b 3b0a 	mla	fp, fp, sl, r3
            cols_8b += column_x + 2;
 800ff66:	eb0e 0309 	add.w	r3, lr, r9
            sum0 += cols_8b[0]*ksrc[6];
 800ff6a:	f91e 9009 	ldrsb.w	r9, [lr, r9]
 800ff6e:	f990 e006 	ldrsb.w	lr, [r0, #6]
 800ff72:	fb0e 2209 	mla	r2, lr, r9, r2
            sum1 += cols_8b[1]*ksrc[6];
 800ff76:	f993 9001 	ldrsb.w	r9, [r3, #1]
 800ff7a:	fb09 be0e 	mla	lr, r9, lr, fp
            sum0 += cols_8b[1]*ksrc[7];
 800ff7e:	f990 a007 	ldrsb.w	sl, [r0, #7]
 800ff82:	fb0a 2209 	mla	r2, sl, r9, r2
            sum1 += cols_8b[2]*ksrc[7];
 800ff86:	f993 9002 	ldrsb.w	r9, [r3, #2]
 800ff8a:	fb09 ee0a 	mla	lr, r9, sl, lr
            sum0 += cols_8b[2]*ksrc[8];
 800ff8e:	f990 a008 	ldrsb.w	sl, [r0, #8]
 800ff92:	fb0a 2209 	mla	r2, sl, r9, r2
            sum1 += cols_8b[3]*ksrc[8];
 800ff96:	f993 3003 	ldrsb.w	r3, [r3, #3]
 800ff9a:	fb03 ee0a 	mla	lr, r3, sl, lr
            sum0 = (float) sum0 * *scales;
 800ff9e:	ee07 2a90 	vmov	s15, r2
 800ffa2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ffa6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800ffa8:	ed93 7a00 	vldr	s14, [r3]
 800ffac:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ffb0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ffb4:	ee17 2a90 	vmov	r2, s15
            sum0 += output_offset;
 800ffb8:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800ffba:	441a      	add	r2, r3
            if (sum0 < activation_min){
 800ffbc:	4296      	cmp	r6, r2
 800ffbe:	f73f af33 	bgt.w	800fe28 <depthwise_kernel3x3_stride1_inplace_kernel_CHW_fpreq_bitmask+0x2c>
            mask_value = 1;
 800ffc2:	f04f 0b01 	mov.w	fp, #1
            if (sum0 > activation_max){
 800ffc6:	42aa      	cmp	r2, r5
 800ffc8:	dd02      	ble.n	800ffd0 <depthwise_kernel3x3_stride1_inplace_kernel_CHW_fpreq_bitmask+0x1d4>
                sum0 = activation_max;
 800ffca:	462a      	mov	r2, r5
                mask_value = 0;
 800ffcc:	f04f 0b00 	mov.w	fp, #0
            output[(i * output_x + j * 2) * channel_offset] = sum0;
 800ffd0:	9b01      	ldr	r3, [sp, #4]
 800ffd2:	fb03 f30c 	mul.w	r3, r3, ip
 800ffd6:	ea4f 0a48 	mov.w	sl, r8, lsl #1
 800ffda:	eb03 0948 	add.w	r9, r3, r8, lsl #1
 800ffde:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 800ffe0:	fb07 f909 	mul.w	r9, r7, r9
 800ffe4:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 800ffe6:	f807 2009 	strb.w	r2, [r7, r9]
            if (mask_value == 1)
 800ffea:	f1bb 0f00 	cmp.w	fp, #0
 800ffee:	f47f af1f 	bne.w	800fe30 <depthwise_kernel3x3_stride1_inplace_kernel_CHW_fpreq_bitmask+0x34>
                BIT_CLEAR(output_mask[(i * output_x + j * 2) * channel_offset / 8], mask_idx);
 800fff2:	464a      	mov	r2, r9
 800fff4:	f1b9 0f00 	cmp.w	r9, #0
 800fff8:	f6bf af2e 	bge.w	800fe58 <depthwise_kernel3x3_stride1_inplace_kernel_CHW_fpreq_bitmask+0x5c>
 800fffc:	f109 0207 	add.w	r2, r9, #7
 8010000:	e72a      	b.n	800fe58 <depthwise_kernel3x3_stride1_inplace_kernel_CHW_fpreq_bitmask+0x5c>
                sum1 = activation_min;
 8010002:	4632      	mov	r2, r6
                mask_value = 0;
 8010004:	f04f 0e00 	mov.w	lr, #0
 8010008:	e747      	b.n	800fe9a <depthwise_kernel3x3_stride1_inplace_kernel_CHW_fpreq_bitmask+0x9e>
                BIT_SET(output_mask[(i * output_x + (j * 2 + 1)) * channel_offset / 8], mask_idx);
 801000a:	461a      	mov	r2, r3
 801000c:	2b00      	cmp	r3, #0
 801000e:	db0a      	blt.n	8010026 <depthwise_kernel3x3_stride1_inplace_kernel_CHW_fpreq_bitmask+0x22a>
 8010010:	10d3      	asrs	r3, r2, #3
 8010012:	56e2      	ldrsb	r2, [r4, r3]
 8010014:	f04f 0e01 	mov.w	lr, #1
 8010018:	9f14      	ldr	r7, [sp, #80]	@ 0x50
 801001a:	fa0e fe07 	lsl.w	lr, lr, r7
 801001e:	ea42 020e 	orr.w	r2, r2, lr
 8010022:	54e2      	strb	r2, [r4, r3]
 8010024:	e75a      	b.n	800fedc <depthwise_kernel3x3_stride1_inplace_kernel_CHW_fpreq_bitmask+0xe0>
 8010026:	1dda      	adds	r2, r3, #7
 8010028:	e7f2      	b.n	8010010 <depthwise_kernel3x3_stride1_inplace_kernel_CHW_fpreq_bitmask+0x214>
                BIT_CLEAR(output_mask[(i * output_x + (j * 2 + 1)) * channel_offset / 8], mask_idx);
 801002a:	1dda      	adds	r2, r3, #7
 801002c:	e74a      	b.n	800fec4 <depthwise_kernel3x3_stride1_inplace_kernel_CHW_fpreq_bitmask+0xc8>
        }
        if (output_x & 1) {
 801002e:	f8dd a044 	ldr.w	sl, [sp, #68]	@ 0x44
 8010032:	f01c 0f01 	tst.w	ip, #1
 8010036:	d073      	beq.n	8010120 <depthwise_kernel3x3_stride1_inplace_kernel_CHW_fpreq_bitmask+0x324>
            q7_t * cols_8b = cols_8b_iterptr;
            q31_t sum = bias[0] + biasR[0];
 8010038:	9b02      	ldr	r3, [sp, #8]
 801003a:	681b      	ldr	r3, [r3, #0]
 801003c:	9a03      	ldr	r2, [sp, #12]
 801003e:	6812      	ldr	r2, [r2, #0]
 8010040:	4413      	add	r3, r2
            sum += cols_8b[0]*ksrc[0];
 8010042:	f991 2000 	ldrsb.w	r2, [r1]
 8010046:	f990 e000 	ldrsb.w	lr, [r0]
 801004a:	fb0e 3302 	mla	r3, lr, r2, r3
            sum += cols_8b[1]*ksrc[1];
 801004e:	f991 2001 	ldrsb.w	r2, [r1, #1]
 8010052:	f990 e001 	ldrsb.w	lr, [r0, #1]
 8010056:	fb0e 3302 	mla	r3, lr, r2, r3
            sum += cols_8b[2]*ksrc[2];
 801005a:	f991 2002 	ldrsb.w	r2, [r1, #2]
 801005e:	f990 e002 	ldrsb.w	lr, [r0, #2]
 8010062:	fb0e 3302 	mla	r3, lr, r2, r3
            cols_8b += column_x + 2;
 8010066:	9a04      	ldr	r2, [sp, #16]
 8010068:	3202      	adds	r2, #2
 801006a:	eb01 0e02 	add.w	lr, r1, r2
            sum += cols_8b[0]*ksrc[3];
 801006e:	f911 8002 	ldrsb.w	r8, [r1, r2]
 8010072:	f990 9003 	ldrsb.w	r9, [r0, #3]
 8010076:	fb09 3308 	mla	r3, r9, r8, r3
            sum += cols_8b[1]*ksrc[4];
 801007a:	f99e 8001 	ldrsb.w	r8, [lr, #1]
 801007e:	f990 9004 	ldrsb.w	r9, [r0, #4]
 8010082:	fb09 3308 	mla	r3, r9, r8, r3
            sum += cols_8b[2]*ksrc[5];
 8010086:	f99e 8002 	ldrsb.w	r8, [lr, #2]
 801008a:	f990 9005 	ldrsb.w	r9, [r0, #5]
 801008e:	fb09 3308 	mla	r3, r9, r8, r3
            cols_8b += column_x + 2;
 8010092:	eb0e 0802 	add.w	r8, lr, r2
            sum += cols_8b[0]*ksrc[6];
 8010096:	f91e 2002 	ldrsb.w	r2, [lr, r2]
 801009a:	f990 e006 	ldrsb.w	lr, [r0, #6]
 801009e:	fb0e 3302 	mla	r3, lr, r2, r3
            sum += cols_8b[1]*ksrc[7];
 80100a2:	f998 2001 	ldrsb.w	r2, [r8, #1]
 80100a6:	f990 e007 	ldrsb.w	lr, [r0, #7]
 80100aa:	fb0e 3302 	mla	r3, lr, r2, r3
            sum += cols_8b[2]*ksrc[8];
 80100ae:	f998 2002 	ldrsb.w	r2, [r8, #2]
 80100b2:	f990 e008 	ldrsb.w	lr, [r0, #8]
 80100b6:	fb0e 3302 	mla	r3, lr, r2, r3

            sum = (float) sum * *scales;
 80100ba:	ee07 3a90 	vmov	s15, r3
 80100be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80100c2:	ed9a 7a00 	vldr	s14, [sl]
 80100c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80100ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80100ce:	ee17 3a90 	vmov	r3, s15
            sum += output_offset;
 80100d2:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80100d4:	4413      	add	r3, r2
            mask_value = 1;
            if (sum < activation_min){
 80100d6:	42b3      	cmp	r3, r6
 80100d8:	db2f      	blt.n	801013a <depthwise_kernel3x3_stride1_inplace_kernel_CHW_fpreq_bitmask+0x33e>
            mask_value = 1;
 80100da:	f04f 0e01 	mov.w	lr, #1
                sum = activation_min;
                mask_value = 0;
            }
            if (sum > activation_max){
 80100de:	42ab      	cmp	r3, r5
 80100e0:	dd02      	ble.n	80100e8 <depthwise_kernel3x3_stride1_inplace_kernel_CHW_fpreq_bitmask+0x2ec>
                sum = activation_max;
 80100e2:	462b      	mov	r3, r5
                mask_value = 0;
 80100e4:	f04f 0e00 	mov.w	lr, #0
            }
            output[(i * output_x + output_x - 1) * channel_offset] = sum;
 80100e8:	9a01      	ldr	r2, [sp, #4]
 80100ea:	fb02 c20c 	mla	r2, r2, ip, ip
 80100ee:	3a01      	subs	r2, #1
 80100f0:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 80100f2:	fb07 f202 	mul.w	r2, r7, r2
 80100f6:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 80100f8:	54bb      	strb	r3, [r7, r2]
            if (mask_value == 1)
 80100fa:	f1be 0f00 	cmp.w	lr, #0
 80100fe:	d120      	bne.n	8010142 <depthwise_kernel3x3_stride1_inplace_kernel_CHW_fpreq_bitmask+0x346>
                BIT_SET(output_mask[(i * output_x + output_x - 1) * channel_offset / 8], mask_idx);
            else
                BIT_CLEAR(output_mask[(i * output_x + output_x - 1) * channel_offset / 8], mask_idx);
 8010100:	4613      	mov	r3, r2
 8010102:	2a00      	cmp	r2, #0
 8010104:	db2d      	blt.n	8010162 <depthwise_kernel3x3_stride1_inplace_kernel_CHW_fpreq_bitmask+0x366>
 8010106:	10da      	asrs	r2, r3, #3
 8010108:	f914 e002 	ldrsb.w	lr, [r4, r2]
 801010c:	2301      	movs	r3, #1
 801010e:	9f14      	ldr	r7, [sp, #80]	@ 0x50
 8010110:	40bb      	lsls	r3, r7
 8010112:	43db      	mvns	r3, r3
 8010114:	b2db      	uxtb	r3, r3
 8010116:	ea0e 0e03 	and.w	lr, lr, r3
 801011a:	f804 e002 	strb.w	lr, [r4, r2]

            cols_8b_iterptr += STRIDE;
 801011e:	3101      	adds	r1, #1
        }
        cols_8b_iterptr += 1 * 2;
 8010120:	3102      	adds	r1, #2
    for (i = 0; i < output_y; i++) {
 8010122:	9b01      	ldr	r3, [sp, #4]
 8010124:	3301      	adds	r3, #1
 8010126:	9301      	str	r3, [sp, #4]
 8010128:	9b05      	ldr	r3, [sp, #20]
 801012a:	9a01      	ldr	r2, [sp, #4]
 801012c:	4293      	cmp	r3, r2
 801012e:	dd1a      	ble.n	8010166 <depthwise_kernel3x3_stride1_inplace_kernel_CHW_fpreq_bitmask+0x36a>
        for (j = 0; j < output_x / 2; j++) {
 8010130:	f04f 0800 	mov.w	r8, #0
 8010134:	f8cd a044 	str.w	sl, [sp, #68]	@ 0x44
 8010138:	e6d3      	b.n	800fee2 <depthwise_kernel3x3_stride1_inplace_kernel_CHW_fpreq_bitmask+0xe6>
                sum = activation_min;
 801013a:	4633      	mov	r3, r6
                mask_value = 0;
 801013c:	f04f 0e00 	mov.w	lr, #0
 8010140:	e7cd      	b.n	80100de <depthwise_kernel3x3_stride1_inplace_kernel_CHW_fpreq_bitmask+0x2e2>
                BIT_SET(output_mask[(i * output_x + output_x - 1) * channel_offset / 8], mask_idx);
 8010142:	4613      	mov	r3, r2
 8010144:	2a00      	cmp	r2, #0
 8010146:	db0a      	blt.n	801015e <depthwise_kernel3x3_stride1_inplace_kernel_CHW_fpreq_bitmask+0x362>
 8010148:	10db      	asrs	r3, r3, #3
 801014a:	56e2      	ldrsb	r2, [r4, r3]
 801014c:	f04f 0e01 	mov.w	lr, #1
 8010150:	9f14      	ldr	r7, [sp, #80]	@ 0x50
 8010152:	fa0e fe07 	lsl.w	lr, lr, r7
 8010156:	ea42 020e 	orr.w	r2, r2, lr
 801015a:	54e2      	strb	r2, [r4, r3]
 801015c:	e7df      	b.n	801011e <depthwise_kernel3x3_stride1_inplace_kernel_CHW_fpreq_bitmask+0x322>
 801015e:	1dd3      	adds	r3, r2, #7
 8010160:	e7f2      	b.n	8010148 <depthwise_kernel3x3_stride1_inplace_kernel_CHW_fpreq_bitmask+0x34c>
                BIT_CLEAR(output_mask[(i * output_x + output_x - 1) * channel_offset / 8], mask_idx);
 8010162:	1dd3      	adds	r3, r2, #7
 8010164:	e7cf      	b.n	8010106 <depthwise_kernel3x3_stride1_inplace_kernel_CHW_fpreq_bitmask+0x30a>
    }
}
 8010166:	b007      	add	sp, #28
 8010168:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801016c <depthwise_kernel3x3_stride1_inplace_CHW_fpreq_bitmask>:
{
 801016c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010170:	b091      	sub	sp, #68	@ 0x44
 8010172:	4680      	mov	r8, r0
 8010174:	460c      	mov	r4, r1
 8010176:	4616      	mov	r6, r2
 8010178:	461d      	mov	r5, r3
 801017a:	f8dd a068 	ldr.w	sl, [sp, #104]	@ 0x68
 801017e:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8010180:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8010182:	f8dd e074 	ldr.w	lr, [sp, #116]	@ 0x74
 8010186:	f8bd 1090 	ldrh.w	r1, [sp, #144]	@ 0x90
 801018a:	910e      	str	r1, [sp, #56]	@ 0x38
 801018c:	f8bd 1094 	ldrh.w	r1, [sp, #148]	@ 0x94
 8010190:	910f      	str	r1, [sp, #60]	@ 0x3c
 8010192:	f8dd b09c 	ldr.w	fp, [sp, #156]	@ 0x9c
 8010196:	f99d 70a0 	ldrsb.w	r7, [sp, #160]	@ 0xa0
    q7_t* cols_8b = (q7_t* )cols_8b_start;
 801019a:	4659      	mov	r1, fp
    for(i = 0; i < input_x + 2; i++){
 801019c:	2000      	movs	r0, #0
 801019e:	e003      	b.n	80101a8 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq_bitmask+0x3c>
        *cols_8b++ = PAD8;
 80101a0:	f801 7b01 	strb.w	r7, [r1], #1
    for(i = 0; i < input_x + 2; i++){
 80101a4:	3001      	adds	r0, #1
 80101a6:	b280      	uxth	r0, r0
 80101a8:	f104 0c01 	add.w	ip, r4, #1
 80101ac:	4584      	cmp	ip, r0
 80101ae:	daf7      	bge.n	80101a0 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq_bitmask+0x34>
    for(i = 0; i < input_y; i++){
 80101b0:	2000      	movs	r0, #0
 80101b2:	e007      	b.n	80101c4 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq_bitmask+0x58>
        *cols_8b++ = PAD8;//left
 80101b4:	700f      	strb	r7, [r1, #0]
        cols_8b += input_x; //skip middle
 80101b6:	f104 0901 	add.w	r9, r4, #1
        *cols_8b++ = PAD8;//right
 80101ba:	4449      	add	r1, r9
 80101bc:	f801 7b01 	strb.w	r7, [r1], #1
    for(i = 0; i < input_y; i++){
 80101c0:	3001      	adds	r0, #1
 80101c2:	b280      	uxth	r0, r0
 80101c4:	42b0      	cmp	r0, r6
 80101c6:	d3f5      	bcc.n	80101b4 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq_bitmask+0x48>
    for(i = 0; i < input_x + 2; i++){
 80101c8:	2000      	movs	r0, #0
 80101ca:	e003      	b.n	80101d4 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq_bitmask+0x68>
        *cols_8b++ = PAD8;
 80101cc:	f801 7b01 	strb.w	r7, [r1], #1
    for(i = 0; i < input_x + 2; i++){
 80101d0:	3001      	adds	r0, #1
 80101d2:	b280      	uxth	r0, r0
 80101d4:	4584      	cmp	ip, r0
 80101d6:	daf9      	bge.n	80101cc <depthwise_kernel3x3_stride1_inplace_CHW_fpreq_bitmask+0x60>
    for (c = 0; c < input_ch; c++){
 80101d8:	2700      	movs	r7, #0
 80101da:	4670      	mov	r0, lr
 80101dc:	e041      	b.n	8010262 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq_bitmask+0xf6>
                *cols_8b++ = *src;// + input_offset;
 80101de:	f99c e000 	ldrsb.w	lr, [ip]
 80101e2:	f801 eb01 	strb.w	lr, [r1], #1
                src += input_ch;
 80101e6:	44ac      	add	ip, r5
            for(j = 0; j < input_x; j++){
 80101e8:	3701      	adds	r7, #1
 80101ea:	b2bf      	uxth	r7, r7
 80101ec:	42a7      	cmp	r7, r4
 80101ee:	d3f6      	bcc.n	80101de <depthwise_kernel3x3_stride1_inplace_CHW_fpreq_bitmask+0x72>
            cols_8b += 1;//skip end
 80101f0:	3101      	adds	r1, #1
        for(i = 0; i < input_y; i++){
 80101f2:	f109 0901 	add.w	r9, r9, #1
 80101f6:	fa1f f989 	uxth.w	r9, r9
 80101fa:	45b1      	cmp	r9, r6
 80101fc:	d202      	bcs.n	8010204 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq_bitmask+0x98>
            cols_8b += 1;//skip front
 80101fe:	3101      	adds	r1, #1
            for(j = 0; j < input_x; j++){
 8010200:	2700      	movs	r7, #0
 8010202:	e7f3      	b.n	80101ec <depthwise_kernel3x3_stride1_inplace_CHW_fpreq_bitmask+0x80>
        if (c % 8 == 0 && c > 1) output_mask++;
 8010204:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 8010206:	f017 0c07 	ands.w	ip, r7, #7
 801020a:	d104      	bne.n	8010216 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq_bitmask+0xaa>
 801020c:	2f01      	cmp	r7, #1
 801020e:	d902      	bls.n	8010216 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq_bitmask+0xaa>
 8010210:	9923      	ldr	r1, [sp, #140]	@ 0x8c
 8010212:	3101      	adds	r1, #1
 8010214:	9123      	str	r1, [sp, #140]	@ 0x8c
        depthwise_kernel3x3_stride1_inplace_kernel_CHW_fpreq_bitmask(output_y, output_x, bias++, biasR++, ksrc, scales++, inplace_out, output_mask, c % 8, output_offset,output_activation_min, output_activation_max,cols_8b_start, input_x, input_ch);
 8010216:	1d11      	adds	r1, r2, #4
 8010218:	910c      	str	r1, [sp, #48]	@ 0x30
 801021a:	f103 0904 	add.w	r9, r3, #4
 801021e:	1d01      	adds	r1, r0, #4
 8010220:	910d      	str	r1, [sp, #52]	@ 0x34
 8010222:	950a      	str	r5, [sp, #40]	@ 0x28
 8010224:	9409      	str	r4, [sp, #36]	@ 0x24
 8010226:	f8cd b020 	str.w	fp, [sp, #32]
 801022a:	9921      	ldr	r1, [sp, #132]	@ 0x84
 801022c:	9107      	str	r1, [sp, #28]
 801022e:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8010230:	9106      	str	r1, [sp, #24]
 8010232:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8010234:	9105      	str	r1, [sp, #20]
 8010236:	f8cd c010 	str.w	ip, [sp, #16]
 801023a:	9923      	ldr	r1, [sp, #140]	@ 0x8c
 801023c:	9103      	str	r1, [sp, #12]
 801023e:	f8cd 8008 	str.w	r8, [sp, #8]
 8010242:	9001      	str	r0, [sp, #4]
 8010244:	f8cd a000 	str.w	sl, [sp]
 8010248:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801024a:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 801024c:	f7ff fdd6 	bl	800fdfc <depthwise_kernel3x3_stride1_inplace_kernel_CHW_fpreq_bitmask>
        ksrc += 9;
 8010250:	f10a 0a09 	add.w	sl, sl, #9
        input++;
 8010254:	f108 0801 	add.w	r8, r8, #1
    for (c = 0; c < input_ch; c++){
 8010258:	3701      	adds	r7, #1
 801025a:	b2bf      	uxth	r7, r7
        depthwise_kernel3x3_stride1_inplace_kernel_CHW_fpreq_bitmask(output_y, output_x, bias++, biasR++, ksrc, scales++, inplace_out, output_mask, c % 8, output_offset,output_activation_min, output_activation_max,cols_8b_start, input_x, input_ch);
 801025c:	980d      	ldr	r0, [sp, #52]	@ 0x34
 801025e:	464b      	mov	r3, r9
 8010260:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
    for (c = 0; c < input_ch; c++){
 8010262:	42af      	cmp	r7, r5
 8010264:	d206      	bcs.n	8010274 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq_bitmask+0x108>
        cols_8b = (q7_t*)(cols_8b_start + 1 * (input_x) + 2); //skip 1 rows
 8010266:	1ca1      	adds	r1, r4, #2
 8010268:	4459      	add	r1, fp
        src = input;
 801026a:	46c4      	mov	ip, r8
        for(i = 0; i < input_y; i++){
 801026c:	f04f 0900 	mov.w	r9, #0
 8010270:	970c      	str	r7, [sp, #48]	@ 0x30
 8010272:	e7c2      	b.n	80101fa <depthwise_kernel3x3_stride1_inplace_CHW_fpreq_bitmask+0x8e>
}
 8010274:	b011      	add	sp, #68	@ 0x44
 8010276:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801027a <depthwise_kernel3x3_stride2_inplace_kernel_CHW_fpreq>:
        const uint16_t output_y, const uint16_t output_x,
        const int32_t *bias, const int32_t *biasR, const q7_t *ksrc, const float *scales,
        q7_t *output, const int32_t output_offset,
        const int32_t activation_min, const int32_t activation_max,
        q7_t *cols_8b_iterptr, const uint16_t column_x, int channel_offset)
{
 801027a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801027e:	b085      	sub	sp, #20
 8010280:	460d      	mov	r5, r1
 8010282:	4617      	mov	r7, r2
 8010284:	4698      	mov	r8, r3
 8010286:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010288:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 801028a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801028c:	f8bd 1054 	ldrh.w	r1, [sp, #84]	@ 0x54
 8010290:	9102      	str	r1, [sp, #8]
    #define STRIDE 2
    int i, j;
    /* MACs for each output */
    for (i = 0; i < output_y; i++) {
 8010292:	2100      	movs	r1, #0
 8010294:	9100      	str	r1, [sp, #0]
 8010296:	9003      	str	r0, [sp, #12]
 8010298:	e113      	b.n	80104c2 <depthwise_kernel3x3_stride2_inplace_kernel_CHW_fpreq+0x248>
        for (j = 0; j < output_x / 2; j++) {
            q7_t *cols_8b = cols_8b_iterptr;

            q31_t sum0 = bias[0] + biasR[0];
 801029a:	9901      	ldr	r1, [sp, #4]
 801029c:	6809      	ldr	r1, [r1, #0]
 801029e:	f8d8 0000 	ldr.w	r0, [r8]
 80102a2:	180c      	adds	r4, r1, r0
            q31_t sum1 = bias[0] + biasR[0];
            
            /* computation */
            sum0 += cols_8b[0]*ksrc[0];
 80102a4:	f993 1000 	ldrsb.w	r1, [r3]
 80102a8:	f992 0000 	ldrsb.w	r0, [r2]
 80102ac:	fb00 4101 	mla	r1, r0, r1, r4
            sum1 += cols_8b[2]*ksrc[0];
 80102b0:	f993 e002 	ldrsb.w	lr, [r3, #2]
 80102b4:	fb0e 4400 	mla	r4, lr, r0, r4
            sum0 += cols_8b[1]*ksrc[1];
 80102b8:	f993 0001 	ldrsb.w	r0, [r3, #1]
 80102bc:	f992 9001 	ldrsb.w	r9, [r2, #1]
 80102c0:	fb09 1100 	mla	r1, r9, r0, r1
            sum1 += cols_8b[3]*ksrc[1];
 80102c4:	f993 0003 	ldrsb.w	r0, [r3, #3]
 80102c8:	fb00 4009 	mla	r0, r0, r9, r4
            sum0 += cols_8b[2]*ksrc[2];
 80102cc:	f992 4002 	ldrsb.w	r4, [r2, #2]
 80102d0:	fb04 110e 	mla	r1, r4, lr, r1
            sum1 += cols_8b[4]*ksrc[2];
 80102d4:	f993 e004 	ldrsb.w	lr, [r3, #4]
 80102d8:	fb0e 0004 	mla	r0, lr, r4, r0
            cols_8b += column_x + 2;
 80102dc:	9c02      	ldr	r4, [sp, #8]
 80102de:	f104 0e02 	add.w	lr, r4, #2
 80102e2:	eb03 040e 	add.w	r4, r3, lr
            sum0 += cols_8b[0]*ksrc[3];
 80102e6:	f913 900e 	ldrsb.w	r9, [r3, lr]
 80102ea:	f992 a003 	ldrsb.w	sl, [r2, #3]
 80102ee:	fb0a 1109 	mla	r1, sl, r9, r1
            sum1 += cols_8b[2]*ksrc[3];
 80102f2:	f994 9002 	ldrsb.w	r9, [r4, #2]
 80102f6:	fb09 000a 	mla	r0, r9, sl, r0
            sum0 += cols_8b[1]*ksrc[4];
 80102fa:	f994 b001 	ldrsb.w	fp, [r4, #1]
 80102fe:	f992 a004 	ldrsb.w	sl, [r2, #4]
 8010302:	fb0a 110b 	mla	r1, sl, fp, r1
            sum1 += cols_8b[3]*ksrc[4];
 8010306:	f994 b003 	ldrsb.w	fp, [r4, #3]
 801030a:	fb0b 0b0a 	mla	fp, fp, sl, r0
            sum0 += cols_8b[2]*ksrc[5];
 801030e:	f992 0005 	ldrsb.w	r0, [r2, #5]
 8010312:	fb00 1109 	mla	r1, r0, r9, r1
            sum1 += cols_8b[4]*ksrc[5];
 8010316:	f994 a004 	ldrsb.w	sl, [r4, #4]
 801031a:	fb0a ba00 	mla	sl, sl, r0, fp
            cols_8b += column_x + 2;
 801031e:	eb04 090e 	add.w	r9, r4, lr
            sum0 += cols_8b[0]*ksrc[6];
 8010322:	f914 400e 	ldrsb.w	r4, [r4, lr]
 8010326:	f992 0006 	ldrsb.w	r0, [r2, #6]
 801032a:	fb00 1404 	mla	r4, r0, r4, r1
            sum1 += cols_8b[2]*ksrc[6];
 801032e:	f999 e002 	ldrsb.w	lr, [r9, #2]
 8010332:	fb0e a000 	mla	r0, lr, r0, sl
            sum0 += cols_8b[1]*ksrc[7];
 8010336:	f999 1001 	ldrsb.w	r1, [r9, #1]
 801033a:	f992 a007 	ldrsb.w	sl, [r2, #7]
 801033e:	fb0a 4101 	mla	r1, sl, r1, r4
            sum1 += cols_8b[3]*ksrc[7];
 8010342:	f999 4003 	ldrsb.w	r4, [r9, #3]
 8010346:	fb04 000a 	mla	r0, r4, sl, r0
            sum0 += cols_8b[2]*ksrc[8];
 801034a:	f992 4008 	ldrsb.w	r4, [r2, #8]
 801034e:	fb04 110e 	mla	r1, r4, lr, r1
 8010352:	ee07 1a90 	vmov	s15, r1
            sum1 += cols_8b[4]*ksrc[8];
 8010356:	f999 e004 	ldrsb.w	lr, [r9, #4]
 801035a:	fb0e 0004 	mla	r0, lr, r4, r0

            /* requantize */
            sum0 = (float) sum0 * *scales;
 801035e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010362:	ed96 7a00 	vldr	s14, [r6]
 8010366:	ee67 7a87 	vmul.f32	s15, s15, s14
 801036a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801036e:	ee17 1a90 	vmov	r1, s15
            sum0 += output_offset;
 8010372:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8010374:	4421      	add	r1, r4
            sum0 = TN_MAX(sum0, activation_min);
 8010376:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8010378:	42a1      	cmp	r1, r4
 801037a:	bfb8      	it	lt
 801037c:	4621      	movlt	r1, r4
            sum0 = TN_MIN(sum0, activation_max);
 801037e:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8010380:	42a1      	cmp	r1, r4
 8010382:	bfa8      	it	ge
 8010384:	4621      	movge	r1, r4
            output[(i * output_x + j * 2) * channel_offset] = sum0;
 8010386:	9c00      	ldr	r4, [sp, #0]
 8010388:	fb04 f405 	mul.w	r4, r4, r5
 801038c:	ea4f 0e4c 	mov.w	lr, ip, lsl #1
 8010390:	eb04 094c 	add.w	r9, r4, ip, lsl #1
 8010394:	9f16      	ldr	r7, [sp, #88]	@ 0x58
 8010396:	fb07 f909 	mul.w	r9, r7, r9
 801039a:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 801039c:	f807 1009 	strb.w	r1, [r7, r9]

            sum1 = (float) sum1 * *scales;
 80103a0:	ee07 0a90 	vmov	s15, r0
 80103a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80103a8:	ed96 7a00 	vldr	s14, [r6]
 80103ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 80103b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80103b4:	ee17 1a90 	vmov	r1, s15
            sum1 += output_offset;
 80103b8:	9811      	ldr	r0, [sp, #68]	@ 0x44
 80103ba:	4401      	add	r1, r0
            sum1 = TN_MAX(sum1, activation_min);
 80103bc:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80103be:	4281      	cmp	r1, r0
 80103c0:	bfb8      	it	lt
 80103c2:	4601      	movlt	r1, r0
            sum1 = TN_MIN(sum1, activation_max);
 80103c4:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 80103c6:	4281      	cmp	r1, r0
 80103c8:	bfa8      	it	ge
 80103ca:	4601      	movge	r1, r0
            output[(i * output_x + (j * 2 + 1)) * channel_offset] = sum1;
 80103cc:	f10e 0e01 	add.w	lr, lr, #1
 80103d0:	4474      	add	r4, lr
 80103d2:	9816      	ldr	r0, [sp, #88]	@ 0x58
 80103d4:	fb00 f404 	mul.w	r4, r0, r4
 80103d8:	5539      	strb	r1, [r7, r4]

            cols_8b_iterptr += STRIDE * 2;
 80103da:	3304      	adds	r3, #4
        for (j = 0; j < output_x / 2; j++) {
 80103dc:	f10c 0c01 	add.w	ip, ip, #1
 80103e0:	ebbc 0f55 	cmp.w	ip, r5, lsr #1
 80103e4:	f6ff af59 	blt.w	801029a <depthwise_kernel3x3_stride2_inplace_kernel_CHW_fpreq+0x20>
        }
        if (output_x & 1) {
 80103e8:	9f01      	ldr	r7, [sp, #4]
 80103ea:	f015 0f01 	tst.w	r5, #1
 80103ee:	d05d      	beq.n	80104ac <depthwise_kernel3x3_stride2_inplace_kernel_CHW_fpreq+0x232>
            q7_t * cols_8b = cols_8b_iterptr;
            q31_t sum = bias[0] + biasR[0];
 80103f0:	6839      	ldr	r1, [r7, #0]
 80103f2:	f8d8 0000 	ldr.w	r0, [r8]
 80103f6:	4401      	add	r1, r0
            sum += cols_8b[0]*ksrc[0];
 80103f8:	f993 0000 	ldrsb.w	r0, [r3]
 80103fc:	f992 4000 	ldrsb.w	r4, [r2]
 8010400:	fb04 1100 	mla	r1, r4, r0, r1
            sum += cols_8b[1]*ksrc[1];
 8010404:	f993 0001 	ldrsb.w	r0, [r3, #1]
 8010408:	f992 4001 	ldrsb.w	r4, [r2, #1]
 801040c:	fb04 1100 	mla	r1, r4, r0, r1
            sum += cols_8b[2]*ksrc[2];
 8010410:	f993 0002 	ldrsb.w	r0, [r3, #2]
 8010414:	f992 4002 	ldrsb.w	r4, [r2, #2]
 8010418:	fb04 1100 	mla	r1, r4, r0, r1
            cols_8b += column_x + 2;
 801041c:	9802      	ldr	r0, [sp, #8]
 801041e:	3002      	adds	r0, #2
 8010420:	181c      	adds	r4, r3, r0
            sum += cols_8b[0]*ksrc[3];
 8010422:	f913 c000 	ldrsb.w	ip, [r3, r0]
 8010426:	f992 e003 	ldrsb.w	lr, [r2, #3]
 801042a:	fb0e 110c 	mla	r1, lr, ip, r1
            sum += cols_8b[1]*ksrc[4];
 801042e:	f994 c001 	ldrsb.w	ip, [r4, #1]
 8010432:	f992 e004 	ldrsb.w	lr, [r2, #4]
 8010436:	fb0e 110c 	mla	r1, lr, ip, r1
            sum += cols_8b[2]*ksrc[5];
 801043a:	f994 c002 	ldrsb.w	ip, [r4, #2]
 801043e:	f992 e005 	ldrsb.w	lr, [r2, #5]
 8010442:	fb0e 110c 	mla	r1, lr, ip, r1
            cols_8b += column_x + 2;
 8010446:	eb04 0c00 	add.w	ip, r4, r0
            sum += cols_8b[0]*ksrc[6];
 801044a:	5620      	ldrsb	r0, [r4, r0]
 801044c:	f992 4006 	ldrsb.w	r4, [r2, #6]
 8010450:	fb04 1100 	mla	r1, r4, r0, r1
            sum += cols_8b[1]*ksrc[7];
 8010454:	f99c 0001 	ldrsb.w	r0, [ip, #1]
 8010458:	f992 4007 	ldrsb.w	r4, [r2, #7]
 801045c:	fb04 1100 	mla	r1, r4, r0, r1
            sum += cols_8b[2]*ksrc[8];
 8010460:	f99c 0002 	ldrsb.w	r0, [ip, #2]
 8010464:	f992 4008 	ldrsb.w	r4, [r2, #8]
 8010468:	fb04 1100 	mla	r1, r4, r0, r1

            sum = (float) sum * *scales;
 801046c:	ee07 1a90 	vmov	s15, r1
 8010470:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010474:	ed96 7a00 	vldr	s14, [r6]
 8010478:	ee67 7a87 	vmul.f32	s15, s15, s14
 801047c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010480:	ee17 1a90 	vmov	r1, s15
            sum += output_offset;
 8010484:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8010486:	4401      	add	r1, r0
            sum = TN_MAX(sum, activation_min);
 8010488:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801048a:	4281      	cmp	r1, r0
 801048c:	bfb8      	it	lt
 801048e:	4601      	movlt	r1, r0
            sum = TN_MIN(sum, activation_max);
 8010490:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8010492:	4281      	cmp	r1, r0
 8010494:	bfa8      	it	ge
 8010496:	4601      	movge	r1, r0
            output[(i * output_x + output_x - 1) * channel_offset] = sum;
 8010498:	9800      	ldr	r0, [sp, #0]
 801049a:	fb00 5005 	mla	r0, r0, r5, r5
 801049e:	3801      	subs	r0, #1
 80104a0:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 80104a2:	fb04 f000 	mul.w	r0, r4, r0
 80104a6:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 80104a8:	5421      	strb	r1, [r4, r0]

            cols_8b_iterptr += STRIDE;
 80104aa:	3302      	adds	r3, #2
        }
        cols_8b_iterptr += 1 * 2 - (column_x & 1);
 80104ac:	9802      	ldr	r0, [sp, #8]
 80104ae:	f000 0101 	and.w	r1, r0, #1
 80104b2:	f1c1 0102 	rsb	r1, r1, #2
        cols_8b_iterptr += (STRIDE - 1) * (column_x + 1 * 2);
 80104b6:	3002      	adds	r0, #2
 80104b8:	4401      	add	r1, r0
 80104ba:	440b      	add	r3, r1
    for (i = 0; i < output_y; i++) {
 80104bc:	9900      	ldr	r1, [sp, #0]
 80104be:	3101      	adds	r1, #1
 80104c0:	9100      	str	r1, [sp, #0]
 80104c2:	9903      	ldr	r1, [sp, #12]
 80104c4:	9800      	ldr	r0, [sp, #0]
 80104c6:	4281      	cmp	r1, r0
 80104c8:	dd03      	ble.n	80104d2 <depthwise_kernel3x3_stride2_inplace_kernel_CHW_fpreq+0x258>
        for (j = 0; j < output_x / 2; j++) {
 80104ca:	f04f 0c00 	mov.w	ip, #0
 80104ce:	9701      	str	r7, [sp, #4]
 80104d0:	e786      	b.n	80103e0 <depthwise_kernel3x3_stride2_inplace_kernel_CHW_fpreq+0x166>
    }
}
 80104d2:	b005      	add	sp, #20
 80104d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080104d8 <depthwise_kernel3x3_stride2_inplace_CHW_fpreq>:
{
 80104d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80104dc:	b08f      	sub	sp, #60	@ 0x3c
 80104de:	4680      	mov	r8, r0
 80104e0:	460c      	mov	r4, r1
 80104e2:	4616      	mov	r6, r2
 80104e4:	461d      	mov	r5, r3
 80104e6:	f8dd a060 	ldr.w	sl, [sp, #96]	@ 0x60
 80104ea:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80104ec:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 80104ee:	f8dd e06c 	ldr.w	lr, [sp, #108]	@ 0x6c
 80104f2:	f8bd 1084 	ldrh.w	r1, [sp, #132]	@ 0x84
 80104f6:	910c      	str	r1, [sp, #48]	@ 0x30
 80104f8:	f8bd 1088 	ldrh.w	r1, [sp, #136]	@ 0x88
 80104fc:	910d      	str	r1, [sp, #52]	@ 0x34
 80104fe:	f8dd b090 	ldr.w	fp, [sp, #144]	@ 0x90
 8010502:	f99d 7094 	ldrsb.w	r7, [sp, #148]	@ 0x94
    q7_t* cols_8b = (q7_t* )cols_8b_start;
 8010506:	4659      	mov	r1, fp
    for(i = 0; i < input_x + 2; i++){
 8010508:	2000      	movs	r0, #0
 801050a:	e003      	b.n	8010514 <depthwise_kernel3x3_stride2_inplace_CHW_fpreq+0x3c>
        *cols_8b++ = PAD8;
 801050c:	f801 7b01 	strb.w	r7, [r1], #1
    for(i = 0; i < input_x + 2; i++){
 8010510:	3001      	adds	r0, #1
 8010512:	b280      	uxth	r0, r0
 8010514:	f104 0c01 	add.w	ip, r4, #1
 8010518:	4584      	cmp	ip, r0
 801051a:	daf7      	bge.n	801050c <depthwise_kernel3x3_stride2_inplace_CHW_fpreq+0x34>
    for(i = 0; i < input_y; i++){
 801051c:	2000      	movs	r0, #0
 801051e:	e007      	b.n	8010530 <depthwise_kernel3x3_stride2_inplace_CHW_fpreq+0x58>
        *cols_8b++ = PAD8;//left
 8010520:	700f      	strb	r7, [r1, #0]
        cols_8b += input_x; //skip middle
 8010522:	f104 0901 	add.w	r9, r4, #1
        *cols_8b++ = PAD8;//right
 8010526:	4449      	add	r1, r9
 8010528:	f801 7b01 	strb.w	r7, [r1], #1
    for(i = 0; i < input_y; i++){
 801052c:	3001      	adds	r0, #1
 801052e:	b280      	uxth	r0, r0
 8010530:	42b0      	cmp	r0, r6
 8010532:	d3f5      	bcc.n	8010520 <depthwise_kernel3x3_stride2_inplace_CHW_fpreq+0x48>
    for(i = 0; i < input_x + 2; i++){
 8010534:	2000      	movs	r0, #0
 8010536:	e003      	b.n	8010540 <depthwise_kernel3x3_stride2_inplace_CHW_fpreq+0x68>
        *cols_8b++ = PAD8;
 8010538:	f801 7b01 	strb.w	r7, [r1], #1
    for(i = 0; i < input_x + 2; i++){
 801053c:	3001      	adds	r0, #1
 801053e:	b280      	uxth	r0, r0
 8010540:	4584      	cmp	ip, r0
 8010542:	daf9      	bge.n	8010538 <depthwise_kernel3x3_stride2_inplace_CHW_fpreq+0x60>
    for (c = 0; c < input_ch; c++){
 8010544:	2700      	movs	r7, #0
 8010546:	4670      	mov	r0, lr
 8010548:	e035      	b.n	80105b6 <depthwise_kernel3x3_stride2_inplace_CHW_fpreq+0xde>
                *cols_8b++ = *src;// + input_offset;
 801054a:	f99c e000 	ldrsb.w	lr, [ip]
 801054e:	f801 eb01 	strb.w	lr, [r1], #1
                src += input_ch;
 8010552:	44ac      	add	ip, r5
            for(j = 0; j < input_x; j++){
 8010554:	3701      	adds	r7, #1
 8010556:	b2bf      	uxth	r7, r7
 8010558:	42a7      	cmp	r7, r4
 801055a:	d3f6      	bcc.n	801054a <depthwise_kernel3x3_stride2_inplace_CHW_fpreq+0x72>
            cols_8b += 1;//skip end
 801055c:	3101      	adds	r1, #1
        for(i = 0; i < input_y; i++){
 801055e:	f109 0901 	add.w	r9, r9, #1
 8010562:	fa1f f989 	uxth.w	r9, r9
 8010566:	45b1      	cmp	r9, r6
 8010568:	d202      	bcs.n	8010570 <depthwise_kernel3x3_stride2_inplace_CHW_fpreq+0x98>
            cols_8b += 1;//skip front
 801056a:	3101      	adds	r1, #1
            for(j = 0; j < input_x; j++){
 801056c:	2700      	movs	r7, #0
 801056e:	e7f3      	b.n	8010558 <depthwise_kernel3x3_stride2_inplace_CHW_fpreq+0x80>
        depthwise_kernel3x3_stride2_inplace_kernel_CHW_fpreq(output_y, output_x, bias++, biasR++, ksrc, scales++, inplace_out, output_offset,output_activation_min, output_activation_max,cols_8b_start, input_x, input_ch);
 8010570:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 8010572:	1d11      	adds	r1, r2, #4
 8010574:	910a      	str	r1, [sp, #40]	@ 0x28
 8010576:	f103 0904 	add.w	r9, r3, #4
 801057a:	1d01      	adds	r1, r0, #4
 801057c:	910b      	str	r1, [sp, #44]	@ 0x2c
 801057e:	9508      	str	r5, [sp, #32]
 8010580:	9407      	str	r4, [sp, #28]
 8010582:	f8cd b018 	str.w	fp, [sp, #24]
 8010586:	991f      	ldr	r1, [sp, #124]	@ 0x7c
 8010588:	9105      	str	r1, [sp, #20]
 801058a:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801058c:	9104      	str	r1, [sp, #16]
 801058e:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8010590:	9103      	str	r1, [sp, #12]
 8010592:	f8cd 8008 	str.w	r8, [sp, #8]
 8010596:	9001      	str	r0, [sp, #4]
 8010598:	f8cd a000 	str.w	sl, [sp]
 801059c:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801059e:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80105a0:	f7ff fe6b 	bl	801027a <depthwise_kernel3x3_stride2_inplace_kernel_CHW_fpreq>
        ksrc += 9;
 80105a4:	f10a 0a09 	add.w	sl, sl, #9
        input++;
 80105a8:	f108 0801 	add.w	r8, r8, #1
    for (c = 0; c < input_ch; c++){
 80105ac:	3701      	adds	r7, #1
 80105ae:	b2bf      	uxth	r7, r7
        depthwise_kernel3x3_stride2_inplace_kernel_CHW_fpreq(output_y, output_x, bias++, biasR++, ksrc, scales++, inplace_out, output_offset,output_activation_min, output_activation_max,cols_8b_start, input_x, input_ch);
 80105b0:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 80105b2:	464b      	mov	r3, r9
 80105b4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
    for (c = 0; c < input_ch; c++){
 80105b6:	42af      	cmp	r7, r5
 80105b8:	d206      	bcs.n	80105c8 <depthwise_kernel3x3_stride2_inplace_CHW_fpreq+0xf0>
        cols_8b = (q7_t*)(cols_8b_start + 1 * (input_x) + 2); //skip 1 rows
 80105ba:	1ca1      	adds	r1, r4, #2
 80105bc:	4459      	add	r1, fp
        src = input;
 80105be:	46c4      	mov	ip, r8
        for(i = 0; i < input_y; i++){
 80105c0:	f04f 0900 	mov.w	r9, #0
 80105c4:	970a      	str	r7, [sp, #40]	@ 0x28
 80105c6:	e7ce      	b.n	8010566 <depthwise_kernel3x3_stride2_inplace_CHW_fpreq+0x8e>
}
 80105c8:	2000      	movs	r0, #0
 80105ca:	b00f      	add	sp, #60	@ 0x3c
 80105cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080105d0 <depthwise_kernel5x5_stride1_inplace_kernel_CHW_fpreq_bitmask>:
    const uint16_t output_y, const uint16_t output_x,
    const int32_t *bias, const int32_t *biasR, const q7_t *ksrc, const float *scales,
    q7_t *output, q7_t *output_mask, const int mask_idx, const int32_t output_offset,
    const int32_t activation_min, const int32_t activation_max,
    q7_t *cols_8b_iterptr, const uint16_t column_x, int channel_offset)
{
 80105d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80105d4:	b087      	sub	sp, #28
 80105d6:	468c      	mov	ip, r1
 80105d8:	9202      	str	r2, [sp, #8]
 80105da:	9303      	str	r3, [sp, #12]
 80105dc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80105de:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 80105e0:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80105e2:	9e16      	ldr	r6, [sp, #88]	@ 0x58
 80105e4:	9d17      	ldr	r5, [sp, #92]	@ 0x5c
 80105e6:	9918      	ldr	r1, [sp, #96]	@ 0x60
 80105e8:	f8bd 2064 	ldrh.w	r2, [sp, #100]	@ 0x64
 80105ec:	9204      	str	r2, [sp, #16]
    #define STRIDE 1
    int i, j;
    q7_t mask_value;
    /* MACs for each output */
    for (i = 0; i < output_y; i++) {
 80105ee:	2200      	movs	r2, #0
 80105f0:	9201      	str	r2, [sp, #4]
 80105f2:	9005      	str	r0, [sp, #20]
 80105f4:	46ba      	mov	sl, r7
 80105f6:	e26d      	b.n	8010ad4 <depthwise_kernel5x5_stride1_inplace_kernel_CHW_fpreq_bitmask+0x504>
            /* requantize */
            sum0 = (float) sum0 * *scales;
            sum0 += output_offset;
            mask_value = 1;
            if (sum0 < activation_min){
                sum0 = activation_min;
 80105f8:	46b0      	mov	r8, r6
                mask_value = 0;
 80105fa:	2000      	movs	r0, #0
 80105fc:	e156      	b.n	80108ac <depthwise_kernel5x5_stride1_inplace_kernel_CHW_fpreq_bitmask+0x2dc>
                sum0 = activation_max;
                mask_value = 0;
            }
            output[(i * output_x + j * 2) * channel_offset] = sum0;
            if (mask_value == 1)
                BIT_SET(output_mask[(i * output_x + j * 2) * channel_offset / 8], mask_idx);
 80105fe:	46c8      	mov	r8, r9
 8010600:	f1b9 0f00 	cmp.w	r9, #0
 8010604:	db0d      	blt.n	8010622 <depthwise_kernel5x5_stride1_inplace_kernel_CHW_fpreq_bitmask+0x52>
 8010606:	ea4f 08e8 	mov.w	r8, r8, asr #3
 801060a:	f914 9008 	ldrsb.w	r9, [r4, r8]
 801060e:	f04f 0b01 	mov.w	fp, #1
 8010612:	9814      	ldr	r0, [sp, #80]	@ 0x50
 8010614:	fa0b fb00 	lsl.w	fp, fp, r0
 8010618:	ea49 090b 	orr.w	r9, r9, fp
 801061c:	f804 9008 	strb.w	r9, [r4, r8]
 8010620:	e013      	b.n	801064a <depthwise_kernel5x5_stride1_inplace_kernel_CHW_fpreq_bitmask+0x7a>
 8010622:	f109 0807 	add.w	r8, r9, #7
 8010626:	e7ee      	b.n	8010606 <depthwise_kernel5x5_stride1_inplace_kernel_CHW_fpreq_bitmask+0x36>
            else
                BIT_CLEAR(output_mask[(i * output_x + j * 2) * channel_offset / 8], mask_idx);
 8010628:	ea4f 09e8 	mov.w	r9, r8, asr #3
 801062c:	f914 b009 	ldrsb.w	fp, [r4, r9]
 8010630:	f04f 0801 	mov.w	r8, #1
 8010634:	9814      	ldr	r0, [sp, #80]	@ 0x50
 8010636:	fa08 f800 	lsl.w	r8, r8, r0
 801063a:	ea6f 0808 	mvn.w	r8, r8
 801063e:	fa5f f888 	uxtb.w	r8, r8
 8010642:	ea0b 0b08 	and.w	fp, fp, r8
 8010646:	f804 b009 	strb.w	fp, [r4, r9]

            sum1 = (float) sum1 * *scales;
 801064a:	eef8 7ae6 	vcvt.f32.s32	s15, s13
 801064e:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8010650:	ed90 7a00 	vldr	s14, [r0]
 8010654:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010658:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801065c:	ee17 0a90 	vmov	r0, s15
            sum1 += output_offset;
 8010660:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 8010662:	4438      	add	r0, r7
            mask_value = 1;
            if (sum1 < activation_min){
 8010664:	4286      	cmp	r6, r0
 8010666:	f300 813d 	bgt.w	80108e4 <depthwise_kernel5x5_stride1_inplace_kernel_CHW_fpreq_bitmask+0x314>
            mask_value = 1;
 801066a:	f04f 0801 	mov.w	r8, #1
                sum1 = activation_min;
                mask_value = 0;
            }
            if (sum1 > activation_max){
 801066e:	42a8      	cmp	r0, r5
 8010670:	dd02      	ble.n	8010678 <depthwise_kernel5x5_stride1_inplace_kernel_CHW_fpreq_bitmask+0xa8>
                sum1 = activation_max;
 8010672:	4628      	mov	r0, r5
                mask_value = 0;
 8010674:	f04f 0800 	mov.w	r8, #0
            }
            output[(i * output_x + (j * 2 + 1)) * channel_offset] = sum1;
 8010678:	f10a 0a01 	add.w	sl, sl, #1
 801067c:	4452      	add	r2, sl
 801067e:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8010680:	fb07 f202 	mul.w	r2, r7, r2
 8010684:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 8010686:	54b8      	strb	r0, [r7, r2]
            if (mask_value == 1)
 8010688:	f1b8 0f00 	cmp.w	r8, #0
 801068c:	f040 812e 	bne.w	80108ec <depthwise_kernel5x5_stride1_inplace_kernel_CHW_fpreq_bitmask+0x31c>
                BIT_SET(output_mask[(i * output_x + (j * 2 + 1)) * channel_offset / 8], mask_idx);
            else
                BIT_CLEAR(output_mask[(i * output_x + (j * 2 + 1)) * channel_offset / 8], mask_idx);
 8010690:	4610      	mov	r0, r2
 8010692:	2a00      	cmp	r2, #0
 8010694:	f2c0 813a 	blt.w	801090c <depthwise_kernel5x5_stride1_inplace_kernel_CHW_fpreq_bitmask+0x33c>
 8010698:	10c0      	asrs	r0, r0, #3
 801069a:	f914 8000 	ldrsb.w	r8, [r4, r0]
 801069e:	2201      	movs	r2, #1
 80106a0:	9f14      	ldr	r7, [sp, #80]	@ 0x50
 80106a2:	40ba      	lsls	r2, r7
 80106a4:	43d2      	mvns	r2, r2
 80106a6:	b2d2      	uxtb	r2, r2
 80106a8:	ea08 0802 	and.w	r8, r8, r2
 80106ac:	f804 8000 	strb.w	r8, [r4, r0]

            cols_8b_iterptr += STRIDE * 2;
 80106b0:	3102      	adds	r1, #2
        for (j = 0; j < output_x / 2; j++) {
 80106b2:	f10e 0e01 	add.w	lr, lr, #1
 80106b6:	ebbe 0f5c 	cmp.w	lr, ip, lsr #1
 80106ba:	f280 8129 	bge.w	8010910 <depthwise_kernel5x5_stride1_inplace_kernel_CHW_fpreq_bitmask+0x340>
            q31_t sum0 = bias[0] + biasR[0];
 80106be:	9a02      	ldr	r2, [sp, #8]
 80106c0:	6812      	ldr	r2, [r2, #0]
 80106c2:	9803      	ldr	r0, [sp, #12]
 80106c4:	6800      	ldr	r0, [r0, #0]
 80106c6:	4402      	add	r2, r0
            sum0 += cols_8b[0]*ksrc[0];
 80106c8:	f991 0000 	ldrsb.w	r0, [r1]
 80106cc:	f993 8000 	ldrsb.w	r8, [r3]
 80106d0:	fb08 2000 	mla	r0, r8, r0, r2
            sum1 += cols_8b[1]*ksrc[0];
 80106d4:	f991 9001 	ldrsb.w	r9, [r1, #1]
 80106d8:	fb09 2208 	mla	r2, r9, r8, r2
            sum0 += cols_8b[1]*ksrc[1];
 80106dc:	f993 8001 	ldrsb.w	r8, [r3, #1]
 80106e0:	fb08 0009 	mla	r0, r8, r9, r0
            sum1 += cols_8b[2]*ksrc[1];
 80106e4:	f991 9002 	ldrsb.w	r9, [r1, #2]
 80106e8:	fb09 2208 	mla	r2, r9, r8, r2
            sum0 += cols_8b[2]*ksrc[2];
 80106ec:	f993 8002 	ldrsb.w	r8, [r3, #2]
 80106f0:	fb08 0009 	mla	r0, r8, r9, r0
            sum1 += cols_8b[3]*ksrc[2];
 80106f4:	f991 9003 	ldrsb.w	r9, [r1, #3]
 80106f8:	fb09 2208 	mla	r2, r9, r8, r2
            sum0 += cols_8b[3]*ksrc[3];
 80106fc:	f993 8003 	ldrsb.w	r8, [r3, #3]
 8010700:	fb08 0009 	mla	r0, r8, r9, r0
            sum1 += cols_8b[4]*ksrc[3];
 8010704:	f991 9004 	ldrsb.w	r9, [r1, #4]
 8010708:	fb09 2208 	mla	r2, r9, r8, r2
            sum0 += cols_8b[4]*ksrc[4];
 801070c:	f993 8004 	ldrsb.w	r8, [r3, #4]
 8010710:	fb08 0009 	mla	r0, r8, r9, r0
            sum1 += cols_8b[5]*ksrc[4];
 8010714:	f991 9005 	ldrsb.w	r9, [r1, #5]
 8010718:	fb09 2208 	mla	r2, r9, r8, r2
            cols_8b += column_x + 4;
 801071c:	9f04      	ldr	r7, [sp, #16]
 801071e:	f107 0804 	add.w	r8, r7, #4
 8010722:	eb01 0a08 	add.w	sl, r1, r8
            sum0 += cols_8b[0]*ksrc[5];
 8010726:	f911 b008 	ldrsb.w	fp, [r1, r8]
 801072a:	f993 9005 	ldrsb.w	r9, [r3, #5]
 801072e:	fb09 000b 	mla	r0, r9, fp, r0
            sum1 += cols_8b[1]*ksrc[5];
 8010732:	f99a b001 	ldrsb.w	fp, [sl, #1]
 8010736:	fb0b 2209 	mla	r2, fp, r9, r2
            sum0 += cols_8b[1]*ksrc[6];
 801073a:	f993 9006 	ldrsb.w	r9, [r3, #6]
 801073e:	fb09 000b 	mla	r0, r9, fp, r0
            sum1 += cols_8b[2]*ksrc[6];
 8010742:	f99a b002 	ldrsb.w	fp, [sl, #2]
 8010746:	fb0b 2209 	mla	r2, fp, r9, r2
            sum0 += cols_8b[2]*ksrc[7];
 801074a:	f993 9007 	ldrsb.w	r9, [r3, #7]
 801074e:	fb09 000b 	mla	r0, r9, fp, r0
            sum1 += cols_8b[3]*ksrc[7];
 8010752:	f99a b003 	ldrsb.w	fp, [sl, #3]
 8010756:	fb0b 2209 	mla	r2, fp, r9, r2
            sum0 += cols_8b[3]*ksrc[8];
 801075a:	f993 9008 	ldrsb.w	r9, [r3, #8]
 801075e:	fb09 000b 	mla	r0, r9, fp, r0
            sum1 += cols_8b[4]*ksrc[8];
 8010762:	f99a b004 	ldrsb.w	fp, [sl, #4]
 8010766:	fb0b 2209 	mla	r2, fp, r9, r2
            sum0 += cols_8b[4]*ksrc[9];
 801076a:	f993 9009 	ldrsb.w	r9, [r3, #9]
 801076e:	fb09 000b 	mla	r0, r9, fp, r0
            sum1 += cols_8b[5]*ksrc[9];
 8010772:	f99a b005 	ldrsb.w	fp, [sl, #5]
 8010776:	fb0b 2b09 	mla	fp, fp, r9, r2
            cols_8b += column_x + 4;
 801077a:	eb0a 0908 	add.w	r9, sl, r8
            sum0 += cols_8b[0]*ksrc[10];
 801077e:	f91a 2008 	ldrsb.w	r2, [sl, r8]
 8010782:	f993 a00a 	ldrsb.w	sl, [r3, #10]
 8010786:	fb0a 0202 	mla	r2, sl, r2, r0
            sum1 += cols_8b[1]*ksrc[10];
 801078a:	f999 0001 	ldrsb.w	r0, [r9, #1]
 801078e:	fb00 ba0a 	mla	sl, r0, sl, fp
            sum0 += cols_8b[1]*ksrc[11];
 8010792:	f993 b00b 	ldrsb.w	fp, [r3, #11]
 8010796:	fb0b 2200 	mla	r2, fp, r0, r2
            sum1 += cols_8b[2]*ksrc[11];
 801079a:	f999 0002 	ldrsb.w	r0, [r9, #2]
 801079e:	fb00 aa0b 	mla	sl, r0, fp, sl
            sum0 += cols_8b[2]*ksrc[12];
 80107a2:	f993 b00c 	ldrsb.w	fp, [r3, #12]
 80107a6:	fb0b 2200 	mla	r2, fp, r0, r2
            sum1 += cols_8b[3]*ksrc[12];
 80107aa:	f999 0003 	ldrsb.w	r0, [r9, #3]
 80107ae:	fb00 aa0b 	mla	sl, r0, fp, sl
            sum0 += cols_8b[3]*ksrc[13];
 80107b2:	f993 b00d 	ldrsb.w	fp, [r3, #13]
 80107b6:	fb0b 2200 	mla	r2, fp, r0, r2
            sum1 += cols_8b[4]*ksrc[13];
 80107ba:	f999 0004 	ldrsb.w	r0, [r9, #4]
 80107be:	fb00 aa0b 	mla	sl, r0, fp, sl
            sum0 += cols_8b[4]*ksrc[14];
 80107c2:	f993 b00e 	ldrsb.w	fp, [r3, #14]
 80107c6:	fb0b 2200 	mla	r2, fp, r0, r2
            sum1 += cols_8b[5]*ksrc[14];
 80107ca:	f999 0005 	ldrsb.w	r0, [r9, #5]
 80107ce:	fb00 aa0b 	mla	sl, r0, fp, sl
            cols_8b += column_x + 4;
 80107d2:	eb09 0008 	add.w	r0, r9, r8
            sum0 += cols_8b[0]*ksrc[15];
 80107d6:	f919 b008 	ldrsb.w	fp, [r9, r8]
 80107da:	f993 900f 	ldrsb.w	r9, [r3, #15]
 80107de:	fb09 220b 	mla	r2, r9, fp, r2
            sum1 += cols_8b[1]*ksrc[15];
 80107e2:	f990 b001 	ldrsb.w	fp, [r0, #1]
 80107e6:	fb0b a909 	mla	r9, fp, r9, sl
            sum0 += cols_8b[1]*ksrc[16];
 80107ea:	f993 a010 	ldrsb.w	sl, [r3, #16]
 80107ee:	fb0a 220b 	mla	r2, sl, fp, r2
            sum1 += cols_8b[2]*ksrc[16];
 80107f2:	f990 b002 	ldrsb.w	fp, [r0, #2]
 80107f6:	fb0b 990a 	mla	r9, fp, sl, r9
            sum0 += cols_8b[2]*ksrc[17];
 80107fa:	f993 a011 	ldrsb.w	sl, [r3, #17]
 80107fe:	fb0a 220b 	mla	r2, sl, fp, r2
            sum1 += cols_8b[3]*ksrc[17];
 8010802:	f990 b003 	ldrsb.w	fp, [r0, #3]
 8010806:	fb0b 990a 	mla	r9, fp, sl, r9
            sum0 += cols_8b[3]*ksrc[18];
 801080a:	f993 a012 	ldrsb.w	sl, [r3, #18]
 801080e:	fb0a 220b 	mla	r2, sl, fp, r2
            sum1 += cols_8b[4]*ksrc[18];
 8010812:	f990 b004 	ldrsb.w	fp, [r0, #4]
 8010816:	fb0b 990a 	mla	r9, fp, sl, r9
            sum0 += cols_8b[4]*ksrc[19];
 801081a:	f993 a013 	ldrsb.w	sl, [r3, #19]
 801081e:	fb0a 220b 	mla	r2, sl, fp, r2
            sum1 += cols_8b[5]*ksrc[19];
 8010822:	f990 b005 	ldrsb.w	fp, [r0, #5]
 8010826:	fb0b 9b0a 	mla	fp, fp, sl, r9
            cols_8b += column_x + 4;
 801082a:	eb00 0908 	add.w	r9, r0, r8
            sum0 += cols_8b[0]*ksrc[20];
 801082e:	f910 8008 	ldrsb.w	r8, [r0, r8]
 8010832:	f993 0014 	ldrsb.w	r0, [r3, #20]
 8010836:	fb00 2208 	mla	r2, r0, r8, r2
            sum1 += cols_8b[1]*ksrc[20];
 801083a:	f999 8001 	ldrsb.w	r8, [r9, #1]
 801083e:	fb08 b000 	mla	r0, r8, r0, fp
            sum0 += cols_8b[1]*ksrc[21];
 8010842:	f993 a015 	ldrsb.w	sl, [r3, #21]
 8010846:	fb0a 2208 	mla	r2, sl, r8, r2
            sum1 += cols_8b[2]*ksrc[21];
 801084a:	f999 8002 	ldrsb.w	r8, [r9, #2]
 801084e:	fb08 000a 	mla	r0, r8, sl, r0
            sum0 += cols_8b[2]*ksrc[22];
 8010852:	f993 a016 	ldrsb.w	sl, [r3, #22]
 8010856:	fb0a 2208 	mla	r2, sl, r8, r2
            sum1 += cols_8b[3]*ksrc[22];
 801085a:	f999 8003 	ldrsb.w	r8, [r9, #3]
 801085e:	fb08 000a 	mla	r0, r8, sl, r0
            sum0 += cols_8b[3]*ksrc[23];
 8010862:	f993 a017 	ldrsb.w	sl, [r3, #23]
 8010866:	fb0a 2208 	mla	r2, sl, r8, r2
            sum1 += cols_8b[4]*ksrc[23];
 801086a:	f999 8004 	ldrsb.w	r8, [r9, #4]
 801086e:	fb08 000a 	mla	r0, r8, sl, r0
            sum0 += cols_8b[4]*ksrc[24];
 8010872:	f993 a018 	ldrsb.w	sl, [r3, #24]
 8010876:	fb0a 2208 	mla	r2, sl, r8, r2
            sum1 += cols_8b[5]*ksrc[24];
 801087a:	f999 8005 	ldrsb.w	r8, [r9, #5]
 801087e:	fb08 000a 	mla	r0, r8, sl, r0
 8010882:	ee06 0a90 	vmov	s13, r0
            sum0 = (float) sum0 * *scales;
 8010886:	ee07 2a90 	vmov	s15, r2
 801088a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801088e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8010890:	ed92 7a00 	vldr	s14, [r2]
 8010894:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010898:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801089c:	ee17 8a90 	vmov	r8, s15
            sum0 += output_offset;
 80108a0:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80108a2:	4490      	add	r8, r2
            if (sum0 < activation_min){
 80108a4:	4546      	cmp	r6, r8
 80108a6:	f73f aea7 	bgt.w	80105f8 <depthwise_kernel5x5_stride1_inplace_kernel_CHW_fpreq_bitmask+0x28>
            mask_value = 1;
 80108aa:	2001      	movs	r0, #1
            if (sum0 > activation_max){
 80108ac:	45a8      	cmp	r8, r5
 80108ae:	dd01      	ble.n	80108b4 <depthwise_kernel5x5_stride1_inplace_kernel_CHW_fpreq_bitmask+0x2e4>
                sum0 = activation_max;
 80108b0:	46a8      	mov	r8, r5
                mask_value = 0;
 80108b2:	2000      	movs	r0, #0
            output[(i * output_x + j * 2) * channel_offset] = sum0;
 80108b4:	9a01      	ldr	r2, [sp, #4]
 80108b6:	fb02 f20c 	mul.w	r2, r2, ip
 80108ba:	ea4f 0a4e 	mov.w	sl, lr, lsl #1
 80108be:	eb02 094e 	add.w	r9, r2, lr, lsl #1
 80108c2:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 80108c4:	fb07 f909 	mul.w	r9, r7, r9
 80108c8:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 80108ca:	f807 8009 	strb.w	r8, [r7, r9]
            if (mask_value == 1)
 80108ce:	2800      	cmp	r0, #0
 80108d0:	f47f ae95 	bne.w	80105fe <depthwise_kernel5x5_stride1_inplace_kernel_CHW_fpreq_bitmask+0x2e>
                BIT_CLEAR(output_mask[(i * output_x + j * 2) * channel_offset / 8], mask_idx);
 80108d4:	46c8      	mov	r8, r9
 80108d6:	f1b9 0f00 	cmp.w	r9, #0
 80108da:	f6bf aea5 	bge.w	8010628 <depthwise_kernel5x5_stride1_inplace_kernel_CHW_fpreq_bitmask+0x58>
 80108de:	f109 0807 	add.w	r8, r9, #7
 80108e2:	e6a1      	b.n	8010628 <depthwise_kernel5x5_stride1_inplace_kernel_CHW_fpreq_bitmask+0x58>
                sum1 = activation_min;
 80108e4:	4630      	mov	r0, r6
                mask_value = 0;
 80108e6:	f04f 0800 	mov.w	r8, #0
 80108ea:	e6c0      	b.n	801066e <depthwise_kernel5x5_stride1_inplace_kernel_CHW_fpreq_bitmask+0x9e>
                BIT_SET(output_mask[(i * output_x + (j * 2 + 1)) * channel_offset / 8], mask_idx);
 80108ec:	4610      	mov	r0, r2
 80108ee:	2a00      	cmp	r2, #0
 80108f0:	db0a      	blt.n	8010908 <depthwise_kernel5x5_stride1_inplace_kernel_CHW_fpreq_bitmask+0x338>
 80108f2:	10c2      	asrs	r2, r0, #3
 80108f4:	56a0      	ldrsb	r0, [r4, r2]
 80108f6:	f04f 0801 	mov.w	r8, #1
 80108fa:	9f14      	ldr	r7, [sp, #80]	@ 0x50
 80108fc:	fa08 f807 	lsl.w	r8, r8, r7
 8010900:	ea40 0008 	orr.w	r0, r0, r8
 8010904:	54a0      	strb	r0, [r4, r2]
 8010906:	e6d3      	b.n	80106b0 <depthwise_kernel5x5_stride1_inplace_kernel_CHW_fpreq_bitmask+0xe0>
 8010908:	1dd0      	adds	r0, r2, #7
 801090a:	e7f2      	b.n	80108f2 <depthwise_kernel5x5_stride1_inplace_kernel_CHW_fpreq_bitmask+0x322>
                BIT_CLEAR(output_mask[(i * output_x + (j * 2 + 1)) * channel_offset / 8], mask_idx);
 801090c:	1dd0      	adds	r0, r2, #7
 801090e:	e6c3      	b.n	8010698 <depthwise_kernel5x5_stride1_inplace_kernel_CHW_fpreq_bitmask+0xc8>
        }
        if (output_x & 1) {
 8010910:	f8dd a044 	ldr.w	sl, [sp, #68]	@ 0x44
 8010914:	f01c 0f01 	tst.w	ip, #1
 8010918:	f000 80d8 	beq.w	8010acc <depthwise_kernel5x5_stride1_inplace_kernel_CHW_fpreq_bitmask+0x4fc>
            q7_t * cols_8b = cols_8b_iterptr;
            q31_t sum = bias[0] + biasR[0];
 801091c:	9a02      	ldr	r2, [sp, #8]
 801091e:	6812      	ldr	r2, [r2, #0]
 8010920:	9803      	ldr	r0, [sp, #12]
 8010922:	6800      	ldr	r0, [r0, #0]
 8010924:	4402      	add	r2, r0
            sum += cols_8b[0]*ksrc[0];
 8010926:	f991 0000 	ldrsb.w	r0, [r1]
 801092a:	f993 e000 	ldrsb.w	lr, [r3]
 801092e:	fb0e 2200 	mla	r2, lr, r0, r2
            sum += cols_8b[1]*ksrc[1];
 8010932:	f991 0001 	ldrsb.w	r0, [r1, #1]
 8010936:	f993 e001 	ldrsb.w	lr, [r3, #1]
 801093a:	fb0e 2200 	mla	r2, lr, r0, r2
            sum += cols_8b[2]*ksrc[2];
 801093e:	f991 0002 	ldrsb.w	r0, [r1, #2]
 8010942:	f993 e002 	ldrsb.w	lr, [r3, #2]
 8010946:	fb0e 2200 	mla	r2, lr, r0, r2
            sum += cols_8b[3]*ksrc[3];
 801094a:	f991 0003 	ldrsb.w	r0, [r1, #3]
 801094e:	f993 e003 	ldrsb.w	lr, [r3, #3]
 8010952:	fb0e 2200 	mla	r2, lr, r0, r2
            sum += cols_8b[4]*ksrc[4];
 8010956:	f991 0004 	ldrsb.w	r0, [r1, #4]
 801095a:	f993 e004 	ldrsb.w	lr, [r3, #4]
 801095e:	fb0e 2200 	mla	r2, lr, r0, r2
            cols_8b += column_x + 4;
 8010962:	9804      	ldr	r0, [sp, #16]
 8010964:	3004      	adds	r0, #4
 8010966:	eb01 0e00 	add.w	lr, r1, r0
            sum += cols_8b[0]*ksrc[5];
 801096a:	f911 8000 	ldrsb.w	r8, [r1, r0]
 801096e:	f993 9005 	ldrsb.w	r9, [r3, #5]
 8010972:	fb09 2208 	mla	r2, r9, r8, r2
            sum += cols_8b[1]*ksrc[6];
 8010976:	f99e 8001 	ldrsb.w	r8, [lr, #1]
 801097a:	f993 9006 	ldrsb.w	r9, [r3, #6]
 801097e:	fb09 2208 	mla	r2, r9, r8, r2
            sum += cols_8b[2]*ksrc[7];
 8010982:	f99e 8002 	ldrsb.w	r8, [lr, #2]
 8010986:	f993 9007 	ldrsb.w	r9, [r3, #7]
 801098a:	fb09 2208 	mla	r2, r9, r8, r2
            sum += cols_8b[3]*ksrc[8];
 801098e:	f99e 8003 	ldrsb.w	r8, [lr, #3]
 8010992:	f993 9008 	ldrsb.w	r9, [r3, #8]
 8010996:	fb09 2208 	mla	r2, r9, r8, r2
            sum += cols_8b[4]*ksrc[9];
 801099a:	f99e 8004 	ldrsb.w	r8, [lr, #4]
 801099e:	f993 9009 	ldrsb.w	r9, [r3, #9]
 80109a2:	fb09 2208 	mla	r2, r9, r8, r2
            cols_8b += column_x + 4;
 80109a6:	eb0e 0800 	add.w	r8, lr, r0
            sum += cols_8b[0]*ksrc[10];
 80109aa:	f91e 9000 	ldrsb.w	r9, [lr, r0]
 80109ae:	f993 e00a 	ldrsb.w	lr, [r3, #10]
 80109b2:	fb0e 2909 	mla	r9, lr, r9, r2
            sum += cols_8b[1]*ksrc[11];
 80109b6:	f998 2001 	ldrsb.w	r2, [r8, #1]
 80109ba:	f993 e00b 	ldrsb.w	lr, [r3, #11]
 80109be:	fb0e 9902 	mla	r9, lr, r2, r9
            sum += cols_8b[2]*ksrc[12];
 80109c2:	f998 2002 	ldrsb.w	r2, [r8, #2]
 80109c6:	f993 e00c 	ldrsb.w	lr, [r3, #12]
 80109ca:	fb0e 9902 	mla	r9, lr, r2, r9
            sum += cols_8b[3]*ksrc[13];
 80109ce:	f998 2003 	ldrsb.w	r2, [r8, #3]
 80109d2:	f993 e00d 	ldrsb.w	lr, [r3, #13]
 80109d6:	fb0e 9902 	mla	r9, lr, r2, r9
            sum += cols_8b[4]*ksrc[14];
 80109da:	f998 2004 	ldrsb.w	r2, [r8, #4]
 80109de:	f993 e00e 	ldrsb.w	lr, [r3, #14]
 80109e2:	fb0e 9902 	mla	r9, lr, r2, r9
            cols_8b += column_x + 4;
 80109e6:	eb08 0e00 	add.w	lr, r8, r0
            sum += cols_8b[0]*ksrc[15];
 80109ea:	f918 2000 	ldrsb.w	r2, [r8, r0]
 80109ee:	f993 800f 	ldrsb.w	r8, [r3, #15]
 80109f2:	fb08 9202 	mla	r2, r8, r2, r9
            sum += cols_8b[1]*ksrc[16];
 80109f6:	f99e 8001 	ldrsb.w	r8, [lr, #1]
 80109fa:	f993 9010 	ldrsb.w	r9, [r3, #16]
 80109fe:	fb09 2208 	mla	r2, r9, r8, r2
            sum += cols_8b[2]*ksrc[17];
 8010a02:	f99e 8002 	ldrsb.w	r8, [lr, #2]
 8010a06:	f993 9011 	ldrsb.w	r9, [r3, #17]
 8010a0a:	fb09 2208 	mla	r2, r9, r8, r2
            sum += cols_8b[3]*ksrc[18];
 8010a0e:	f99e 8003 	ldrsb.w	r8, [lr, #3]
 8010a12:	f993 9012 	ldrsb.w	r9, [r3, #18]
 8010a16:	fb09 2208 	mla	r2, r9, r8, r2
            sum += cols_8b[4]*ksrc[19];
 8010a1a:	f99e 8004 	ldrsb.w	r8, [lr, #4]
 8010a1e:	f993 9013 	ldrsb.w	r9, [r3, #19]
 8010a22:	fb09 2908 	mla	r9, r9, r8, r2
            cols_8b += column_x + 4;
 8010a26:	eb0e 0800 	add.w	r8, lr, r0
            sum += cols_8b[0]*ksrc[20];
 8010a2a:	f91e 2000 	ldrsb.w	r2, [lr, r0]
 8010a2e:	f993 0014 	ldrsb.w	r0, [r3, #20]
 8010a32:	fb00 9202 	mla	r2, r0, r2, r9
            sum += cols_8b[1]*ksrc[21];
 8010a36:	f998 0001 	ldrsb.w	r0, [r8, #1]
 8010a3a:	f993 e015 	ldrsb.w	lr, [r3, #21]
 8010a3e:	fb0e 2200 	mla	r2, lr, r0, r2
            sum += cols_8b[2]*ksrc[22];
 8010a42:	f998 0002 	ldrsb.w	r0, [r8, #2]
 8010a46:	f993 e016 	ldrsb.w	lr, [r3, #22]
 8010a4a:	fb0e 2200 	mla	r2, lr, r0, r2
            sum += cols_8b[3]*ksrc[23];
 8010a4e:	f998 0003 	ldrsb.w	r0, [r8, #3]
 8010a52:	f993 e017 	ldrsb.w	lr, [r3, #23]
 8010a56:	fb0e 2200 	mla	r2, lr, r0, r2
            sum += cols_8b[4]*ksrc[24];
 8010a5a:	f998 0004 	ldrsb.w	r0, [r8, #4]
 8010a5e:	f993 e018 	ldrsb.w	lr, [r3, #24]
 8010a62:	fb0e 2200 	mla	r2, lr, r0, r2

            sum = (float) sum * *scales;
 8010a66:	ee07 2a90 	vmov	s15, r2
 8010a6a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010a6e:	ed9a 7a00 	vldr	s14, [sl]
 8010a72:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010a76:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010a7a:	ee17 2a90 	vmov	r2, s15
            sum += output_offset;
 8010a7e:	9815      	ldr	r0, [sp, #84]	@ 0x54
 8010a80:	4402      	add	r2, r0
            mask_value = 1;
            if (sum < activation_min){
 8010a82:	42b2      	cmp	r2, r6
 8010a84:	db2f      	blt.n	8010ae6 <depthwise_kernel5x5_stride1_inplace_kernel_CHW_fpreq_bitmask+0x516>
            mask_value = 1;
 8010a86:	f04f 0e01 	mov.w	lr, #1
                sum = activation_min;
                mask_value = 0;
            }
            if (sum > activation_max){
 8010a8a:	42aa      	cmp	r2, r5
 8010a8c:	dd02      	ble.n	8010a94 <depthwise_kernel5x5_stride1_inplace_kernel_CHW_fpreq_bitmask+0x4c4>
                sum = activation_max;
 8010a8e:	462a      	mov	r2, r5
                mask_value = 0;
 8010a90:	f04f 0e00 	mov.w	lr, #0
            }
            output[(i * output_x + output_x - 1) * channel_offset] = sum;
 8010a94:	9801      	ldr	r0, [sp, #4]
 8010a96:	fb00 c00c 	mla	r0, r0, ip, ip
 8010a9a:	3801      	subs	r0, #1
 8010a9c:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8010a9e:	fb07 f000 	mul.w	r0, r7, r0
 8010aa2:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 8010aa4:	543a      	strb	r2, [r7, r0]
            if (mask_value == 1)
 8010aa6:	f1be 0f00 	cmp.w	lr, #0
 8010aaa:	d120      	bne.n	8010aee <depthwise_kernel5x5_stride1_inplace_kernel_CHW_fpreq_bitmask+0x51e>
                BIT_SET(output_mask[(i * output_x + output_x - 1) * channel_offset / 8], mask_idx);
            else
                BIT_CLEAR(output_mask[(i * output_x + output_x - 1) * channel_offset / 8], mask_idx);
 8010aac:	4602      	mov	r2, r0
 8010aae:	2800      	cmp	r0, #0
 8010ab0:	db2d      	blt.n	8010b0e <depthwise_kernel5x5_stride1_inplace_kernel_CHW_fpreq_bitmask+0x53e>
 8010ab2:	10d0      	asrs	r0, r2, #3
 8010ab4:	f914 e000 	ldrsb.w	lr, [r4, r0]
 8010ab8:	2201      	movs	r2, #1
 8010aba:	9f14      	ldr	r7, [sp, #80]	@ 0x50
 8010abc:	40ba      	lsls	r2, r7
 8010abe:	43d2      	mvns	r2, r2
 8010ac0:	b2d2      	uxtb	r2, r2
 8010ac2:	ea0e 0e02 	and.w	lr, lr, r2
 8010ac6:	f804 e000 	strb.w	lr, [r4, r0]

            cols_8b_iterptr += STRIDE;
 8010aca:	3101      	adds	r1, #1
        }
        cols_8b_iterptr += 2 * 2;
 8010acc:	3104      	adds	r1, #4
    for (i = 0; i < output_y; i++) {
 8010ace:	9a01      	ldr	r2, [sp, #4]
 8010ad0:	3201      	adds	r2, #1
 8010ad2:	9201      	str	r2, [sp, #4]
 8010ad4:	9a05      	ldr	r2, [sp, #20]
 8010ad6:	9801      	ldr	r0, [sp, #4]
 8010ad8:	4282      	cmp	r2, r0
 8010ada:	dd1a      	ble.n	8010b12 <depthwise_kernel5x5_stride1_inplace_kernel_CHW_fpreq_bitmask+0x542>
        for (j = 0; j < output_x / 2; j++) {
 8010adc:	f04f 0e00 	mov.w	lr, #0
 8010ae0:	f8cd a044 	str.w	sl, [sp, #68]	@ 0x44
 8010ae4:	e5e7      	b.n	80106b6 <depthwise_kernel5x5_stride1_inplace_kernel_CHW_fpreq_bitmask+0xe6>
                sum = activation_min;
 8010ae6:	4632      	mov	r2, r6
                mask_value = 0;
 8010ae8:	f04f 0e00 	mov.w	lr, #0
 8010aec:	e7cd      	b.n	8010a8a <depthwise_kernel5x5_stride1_inplace_kernel_CHW_fpreq_bitmask+0x4ba>
                BIT_SET(output_mask[(i * output_x + output_x - 1) * channel_offset / 8], mask_idx);
 8010aee:	4602      	mov	r2, r0
 8010af0:	2800      	cmp	r0, #0
 8010af2:	db0a      	blt.n	8010b0a <depthwise_kernel5x5_stride1_inplace_kernel_CHW_fpreq_bitmask+0x53a>
 8010af4:	10d2      	asrs	r2, r2, #3
 8010af6:	56a0      	ldrsb	r0, [r4, r2]
 8010af8:	f04f 0e01 	mov.w	lr, #1
 8010afc:	9f14      	ldr	r7, [sp, #80]	@ 0x50
 8010afe:	fa0e fe07 	lsl.w	lr, lr, r7
 8010b02:	ea40 000e 	orr.w	r0, r0, lr
 8010b06:	54a0      	strb	r0, [r4, r2]
 8010b08:	e7df      	b.n	8010aca <depthwise_kernel5x5_stride1_inplace_kernel_CHW_fpreq_bitmask+0x4fa>
 8010b0a:	1dc2      	adds	r2, r0, #7
 8010b0c:	e7f2      	b.n	8010af4 <depthwise_kernel5x5_stride1_inplace_kernel_CHW_fpreq_bitmask+0x524>
                BIT_CLEAR(output_mask[(i * output_x + output_x - 1) * channel_offset / 8], mask_idx);
 8010b0e:	1dc2      	adds	r2, r0, #7
 8010b10:	e7cf      	b.n	8010ab2 <depthwise_kernel5x5_stride1_inplace_kernel_CHW_fpreq_bitmask+0x4e2>
    }
}
 8010b12:	b007      	add	sp, #28
 8010b14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010b18 <depthwise_kernel5x5_stride1_inplace_CHW_fpreq_bitmask>:
{
 8010b18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b1c:	b091      	sub	sp, #68	@ 0x44
 8010b1e:	4680      	mov	r8, r0
 8010b20:	460c      	mov	r4, r1
 8010b22:	4616      	mov	r6, r2
 8010b24:	461d      	mov	r5, r3
 8010b26:	f8dd a068 	ldr.w	sl, [sp, #104]	@ 0x68
 8010b2a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8010b2c:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8010b2e:	f8dd e074 	ldr.w	lr, [sp, #116]	@ 0x74
 8010b32:	f8bd 1090 	ldrh.w	r1, [sp, #144]	@ 0x90
 8010b36:	910e      	str	r1, [sp, #56]	@ 0x38
 8010b38:	f8bd 1094 	ldrh.w	r1, [sp, #148]	@ 0x94
 8010b3c:	910f      	str	r1, [sp, #60]	@ 0x3c
 8010b3e:	f8dd b09c 	ldr.w	fp, [sp, #156]	@ 0x9c
 8010b42:	f99d 00a0 	ldrsb.w	r0, [sp, #160]	@ 0xa0
    q7_t* cols_8b = (q7_t* )cols_8b_start;
 8010b46:	4659      	mov	r1, fp
    for(i = 0; i < input_x + 4; i++){
 8010b48:	2700      	movs	r7, #0
 8010b4a:	e006      	b.n	8010b5a <depthwise_kernel5x5_stride1_inplace_CHW_fpreq_bitmask+0x42>
        *cols_8b++ = PAD8;
 8010b4c:	468c      	mov	ip, r1
 8010b4e:	f80c 0b02 	strb.w	r0, [ip], #2
        *cols_8b++ = PAD8;
 8010b52:	7048      	strb	r0, [r1, #1]
    for(i = 0; i < input_x + 4; i++){
 8010b54:	3701      	adds	r7, #1
 8010b56:	b2bf      	uxth	r7, r7
        *cols_8b++ = PAD8;
 8010b58:	4661      	mov	r1, ip
    for(i = 0; i < input_x + 4; i++){
 8010b5a:	f104 0c03 	add.w	ip, r4, #3
 8010b5e:	45bc      	cmp	ip, r7
 8010b60:	daf4      	bge.n	8010b4c <depthwise_kernel5x5_stride1_inplace_CHW_fpreq_bitmask+0x34>
    for(i = 0; i < input_y; i++){
 8010b62:	2700      	movs	r7, #0
 8010b64:	f8cd c030 	str.w	ip, [sp, #48]	@ 0x30
 8010b68:	e00d      	b.n	8010b86 <depthwise_kernel5x5_stride1_inplace_CHW_fpreq_bitmask+0x6e>
        *cols_8b++ = PAD8;//left
 8010b6a:	7008      	strb	r0, [r1, #0]
        *cols_8b++ = PAD8;//left
 8010b6c:	7048      	strb	r0, [r1, #1]
        cols_8b += input_x; //skip middle
 8010b6e:	f104 0902 	add.w	r9, r4, #2
 8010b72:	eb01 0c09 	add.w	ip, r1, r9
        *cols_8b++ = PAD8;//right
 8010b76:	f801 0009 	strb.w	r0, [r1, r9]
        *cols_8b++ = PAD8;//right
 8010b7a:	f10c 0102 	add.w	r1, ip, #2
 8010b7e:	f88c 0001 	strb.w	r0, [ip, #1]
    for(i = 0; i < input_y; i++){
 8010b82:	3701      	adds	r7, #1
 8010b84:	b2bf      	uxth	r7, r7
 8010b86:	42b7      	cmp	r7, r6
 8010b88:	d3ef      	bcc.n	8010b6a <depthwise_kernel5x5_stride1_inplace_CHW_fpreq_bitmask+0x52>
    for(i = 0; i < input_x + 4; i++){
 8010b8a:	f8dd c030 	ldr.w	ip, [sp, #48]	@ 0x30
 8010b8e:	2700      	movs	r7, #0
 8010b90:	e006      	b.n	8010ba0 <depthwise_kernel5x5_stride1_inplace_CHW_fpreq_bitmask+0x88>
        *cols_8b++ = PAD8;
 8010b92:	4689      	mov	r9, r1
 8010b94:	f809 0b02 	strb.w	r0, [r9], #2
        *cols_8b++ = PAD8;
 8010b98:	7048      	strb	r0, [r1, #1]
    for(i = 0; i < input_x + 4; i++){
 8010b9a:	3701      	adds	r7, #1
 8010b9c:	b2bf      	uxth	r7, r7
        *cols_8b++ = PAD8;
 8010b9e:	4649      	mov	r1, r9
    for(i = 0; i < input_x + 4; i++){
 8010ba0:	45bc      	cmp	ip, r7
 8010ba2:	daf6      	bge.n	8010b92 <depthwise_kernel5x5_stride1_inplace_CHW_fpreq_bitmask+0x7a>
    for (c = 0; c < input_ch; c++){
 8010ba4:	2700      	movs	r7, #0
 8010ba6:	4670      	mov	r0, lr
 8010ba8:	e041      	b.n	8010c2e <depthwise_kernel5x5_stride1_inplace_CHW_fpreq_bitmask+0x116>
                *cols_8b++ = *src;// + input_offset;
 8010baa:	f99c e000 	ldrsb.w	lr, [ip]
 8010bae:	f801 eb01 	strb.w	lr, [r1], #1
                src += input_ch;
 8010bb2:	44ac      	add	ip, r5
            for(j = 0; j < input_x; j++){
 8010bb4:	3701      	adds	r7, #1
 8010bb6:	b2bf      	uxth	r7, r7
 8010bb8:	42a7      	cmp	r7, r4
 8010bba:	d3f6      	bcc.n	8010baa <depthwise_kernel5x5_stride1_inplace_CHW_fpreq_bitmask+0x92>
            cols_8b += 2;//skip end
 8010bbc:	3102      	adds	r1, #2
        for(i = 0; i < input_y; i++){
 8010bbe:	f109 0901 	add.w	r9, r9, #1
 8010bc2:	fa1f f989 	uxth.w	r9, r9
 8010bc6:	45b1      	cmp	r9, r6
 8010bc8:	d202      	bcs.n	8010bd0 <depthwise_kernel5x5_stride1_inplace_CHW_fpreq_bitmask+0xb8>
            cols_8b += 2;//skip front
 8010bca:	3102      	adds	r1, #2
            for(j = 0; j < input_x; j++){
 8010bcc:	2700      	movs	r7, #0
 8010bce:	e7f3      	b.n	8010bb8 <depthwise_kernel5x5_stride1_inplace_CHW_fpreq_bitmask+0xa0>
        if (c % 8 == 0 && c > 1) output_mask++;
 8010bd0:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 8010bd2:	f017 0c07 	ands.w	ip, r7, #7
 8010bd6:	d104      	bne.n	8010be2 <depthwise_kernel5x5_stride1_inplace_CHW_fpreq_bitmask+0xca>
 8010bd8:	2f01      	cmp	r7, #1
 8010bda:	d902      	bls.n	8010be2 <depthwise_kernel5x5_stride1_inplace_CHW_fpreq_bitmask+0xca>
 8010bdc:	9923      	ldr	r1, [sp, #140]	@ 0x8c
 8010bde:	3101      	adds	r1, #1
 8010be0:	9123      	str	r1, [sp, #140]	@ 0x8c
        depthwise_kernel5x5_stride1_inplace_kernel_CHW_fpreq_bitmask(output_y, output_x, bias++, biasR++, ksrc, scales++, inplace_out, output_mask, c % 8, output_offset,output_activation_min, output_activation_max,cols_8b_start, input_x, input_ch);
 8010be2:	1d11      	adds	r1, r2, #4
 8010be4:	910c      	str	r1, [sp, #48]	@ 0x30
 8010be6:	f103 0904 	add.w	r9, r3, #4
 8010bea:	1d01      	adds	r1, r0, #4
 8010bec:	910d      	str	r1, [sp, #52]	@ 0x34
 8010bee:	950a      	str	r5, [sp, #40]	@ 0x28
 8010bf0:	9409      	str	r4, [sp, #36]	@ 0x24
 8010bf2:	f8cd b020 	str.w	fp, [sp, #32]
 8010bf6:	9921      	ldr	r1, [sp, #132]	@ 0x84
 8010bf8:	9107      	str	r1, [sp, #28]
 8010bfa:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8010bfc:	9106      	str	r1, [sp, #24]
 8010bfe:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8010c00:	9105      	str	r1, [sp, #20]
 8010c02:	f8cd c010 	str.w	ip, [sp, #16]
 8010c06:	9923      	ldr	r1, [sp, #140]	@ 0x8c
 8010c08:	9103      	str	r1, [sp, #12]
 8010c0a:	f8cd 8008 	str.w	r8, [sp, #8]
 8010c0e:	9001      	str	r0, [sp, #4]
 8010c10:	f8cd a000 	str.w	sl, [sp]
 8010c14:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8010c16:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8010c18:	f7ff fcda 	bl	80105d0 <depthwise_kernel5x5_stride1_inplace_kernel_CHW_fpreq_bitmask>
        ksrc += 25;
 8010c1c:	f10a 0a19 	add.w	sl, sl, #25
        input++;
 8010c20:	f108 0801 	add.w	r8, r8, #1
    for (c = 0; c < input_ch; c++){
 8010c24:	3701      	adds	r7, #1
 8010c26:	b2bf      	uxth	r7, r7
        depthwise_kernel5x5_stride1_inplace_kernel_CHW_fpreq_bitmask(output_y, output_x, bias++, biasR++, ksrc, scales++, inplace_out, output_mask, c % 8, output_offset,output_activation_min, output_activation_max,cols_8b_start, input_x, input_ch);
 8010c28:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8010c2a:	464b      	mov	r3, r9
 8010c2c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
    for (c = 0; c < input_ch; c++){
 8010c2e:	42af      	cmp	r7, r5
 8010c30:	d207      	bcs.n	8010c42 <depthwise_kernel5x5_stride1_inplace_CHW_fpreq_bitmask+0x12a>
        cols_8b = (q7_t*)(cols_8b_start + 2 * (input_x) + 8); //skip 2 rows
 8010c32:	0061      	lsls	r1, r4, #1
 8010c34:	3108      	adds	r1, #8
 8010c36:	4459      	add	r1, fp
        src = input;
 8010c38:	46c4      	mov	ip, r8
        for(i = 0; i < input_y; i++){
 8010c3a:	f04f 0900 	mov.w	r9, #0
 8010c3e:	970c      	str	r7, [sp, #48]	@ 0x30
 8010c40:	e7c1      	b.n	8010bc6 <depthwise_kernel5x5_stride1_inplace_CHW_fpreq_bitmask+0xae>
}
 8010c42:	b011      	add	sp, #68	@ 0x44
 8010c44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010c48 <depthwise_kernel7x7_stride1_inplace_kernel_CHW_fpreq>:
        const uint16_t output_y, const uint16_t output_x,
        const int32_t *bias, const int32_t *biasR, const q7_t *ksrc, const float *scales,
        q7_t *output, const int32_t output_offset,
        const int32_t activation_min, const int32_t activation_max,
        q7_t *cols_8b_iterptr, const uint16_t column_x, int channel_offset)
{
 8010c48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c4c:	b085      	sub	sp, #20
 8010c4e:	4682      	mov	sl, r0
 8010c50:	4615      	mov	r5, r2
 8010c52:	461e      	mov	r6, r3
 8010c54:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8010c56:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8010c58:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8010c5a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8010c5c:	f8bd 7054 	ldrh.w	r7, [sp, #84]	@ 0x54
 8010c60:	9702      	str	r7, [sp, #8]
    #define STRIDE 1
    int i, j;
    /* MACs for each output */
    for (i = 0; i < output_y; i++) {
 8010c62:	2700      	movs	r7, #0
 8010c64:	9700      	str	r7, [sp, #0]
 8010c66:	f8cd a00c 	str.w	sl, [sp, #12]
 8010c6a:	4692      	mov	sl, r2
 8010c6c:	e352      	b.n	8011314 <depthwise_kernel7x7_stride1_inplace_kernel_CHW_fpreq+0x6cc>
        for (j = 0; j < output_x / 2; j++) {
            q7_t *cols_8b = cols_8b_iterptr;

            q31_t sum0 = bias[0] + biasR[0];
 8010c6e:	9d01      	ldr	r5, [sp, #4]
 8010c70:	682f      	ldr	r7, [r5, #0]
 8010c72:	6835      	ldr	r5, [r6, #0]
 8010c74:	442f      	add	r7, r5
            q31_t sum1 = bias[0] + biasR[0];
            
            /* computation */
            sum0 += cols_8b[0]*ksrc[0];
 8010c76:	f993 c000 	ldrsb.w	ip, [r3]
 8010c7a:	f990 8000 	ldrsb.w	r8, [r0]
 8010c7e:	fb08 7c0c 	mla	ip, r8, ip, r7
            sum1 += cols_8b[1]*ksrc[0];
 8010c82:	f993 9001 	ldrsb.w	r9, [r3, #1]
 8010c86:	fb09 7708 	mla	r7, r9, r8, r7
            sum0 += cols_8b[1]*ksrc[1];
 8010c8a:	f990 8001 	ldrsb.w	r8, [r0, #1]
 8010c8e:	fb08 cc09 	mla	ip, r8, r9, ip
            sum1 += cols_8b[2]*ksrc[1];
 8010c92:	f993 9002 	ldrsb.w	r9, [r3, #2]
 8010c96:	fb09 7708 	mla	r7, r9, r8, r7
            sum0 += cols_8b[2]*ksrc[2];
 8010c9a:	f990 8002 	ldrsb.w	r8, [r0, #2]
 8010c9e:	fb08 cc09 	mla	ip, r8, r9, ip
            sum1 += cols_8b[3]*ksrc[2];
 8010ca2:	f993 9003 	ldrsb.w	r9, [r3, #3]
 8010ca6:	fb09 7708 	mla	r7, r9, r8, r7
            sum0 += cols_8b[3]*ksrc[3];
 8010caa:	f990 8003 	ldrsb.w	r8, [r0, #3]
 8010cae:	fb08 cc09 	mla	ip, r8, r9, ip
            sum1 += cols_8b[4]*ksrc[3];
 8010cb2:	f993 9004 	ldrsb.w	r9, [r3, #4]
 8010cb6:	fb09 7708 	mla	r7, r9, r8, r7
            sum0 += cols_8b[4]*ksrc[4];
 8010cba:	f990 8004 	ldrsb.w	r8, [r0, #4]
 8010cbe:	fb08 cc09 	mla	ip, r8, r9, ip
            sum1 += cols_8b[5]*ksrc[4];
 8010cc2:	f993 9005 	ldrsb.w	r9, [r3, #5]
 8010cc6:	fb09 7708 	mla	r7, r9, r8, r7
            sum0 += cols_8b[5]*ksrc[5];
 8010cca:	f990 8005 	ldrsb.w	r8, [r0, #5]
 8010cce:	fb08 cc09 	mla	ip, r8, r9, ip
            sum1 += cols_8b[6]*ksrc[5];
 8010cd2:	f993 9006 	ldrsb.w	r9, [r3, #6]
 8010cd6:	fb09 7708 	mla	r7, r9, r8, r7
            sum0 += cols_8b[6]*ksrc[6];
 8010cda:	f990 8006 	ldrsb.w	r8, [r0, #6]
 8010cde:	fb08 cc09 	mla	ip, r8, r9, ip
            sum1 += cols_8b[7]*ksrc[6];
 8010ce2:	f993 9007 	ldrsb.w	r9, [r3, #7]
 8010ce6:	fb09 7708 	mla	r7, r9, r8, r7
            cols_8b += column_x + 6;
 8010cea:	9d02      	ldr	r5, [sp, #8]
 8010cec:	f105 0806 	add.w	r8, r5, #6
 8010cf0:	eb03 0908 	add.w	r9, r3, r8
            sum0 += cols_8b[0]*ksrc[7];
 8010cf4:	f913 b008 	ldrsb.w	fp, [r3, r8]
 8010cf8:	f990 a007 	ldrsb.w	sl, [r0, #7]
 8010cfc:	fb0a cc0b 	mla	ip, sl, fp, ip
            sum1 += cols_8b[1]*ksrc[7];
 8010d00:	f999 b001 	ldrsb.w	fp, [r9, #1]
 8010d04:	fb0b 770a 	mla	r7, fp, sl, r7
            sum0 += cols_8b[1]*ksrc[8];
 8010d08:	f990 a008 	ldrsb.w	sl, [r0, #8]
 8010d0c:	fb0a cc0b 	mla	ip, sl, fp, ip
            sum1 += cols_8b[2]*ksrc[8];
 8010d10:	f999 b002 	ldrsb.w	fp, [r9, #2]
 8010d14:	fb0b 770a 	mla	r7, fp, sl, r7
            sum0 += cols_8b[2]*ksrc[9];
 8010d18:	f990 a009 	ldrsb.w	sl, [r0, #9]
 8010d1c:	fb0a cc0b 	mla	ip, sl, fp, ip
            sum1 += cols_8b[3]*ksrc[9];
 8010d20:	f999 b003 	ldrsb.w	fp, [r9, #3]
 8010d24:	fb0b 770a 	mla	r7, fp, sl, r7
            sum0 += cols_8b[3]*ksrc[10];
 8010d28:	f990 a00a 	ldrsb.w	sl, [r0, #10]
 8010d2c:	fb0a cc0b 	mla	ip, sl, fp, ip
            sum1 += cols_8b[4]*ksrc[10];
 8010d30:	f999 b004 	ldrsb.w	fp, [r9, #4]
 8010d34:	fb0b 770a 	mla	r7, fp, sl, r7
            sum0 += cols_8b[4]*ksrc[11];
 8010d38:	f990 a00b 	ldrsb.w	sl, [r0, #11]
 8010d3c:	fb0a cc0b 	mla	ip, sl, fp, ip
            sum1 += cols_8b[5]*ksrc[11];
 8010d40:	f999 b005 	ldrsb.w	fp, [r9, #5]
 8010d44:	fb0b 770a 	mla	r7, fp, sl, r7
            sum0 += cols_8b[5]*ksrc[12];
 8010d48:	f990 a00c 	ldrsb.w	sl, [r0, #12]
 8010d4c:	fb0a cc0b 	mla	ip, sl, fp, ip
            sum1 += cols_8b[6]*ksrc[12];
 8010d50:	f999 b006 	ldrsb.w	fp, [r9, #6]
 8010d54:	fb0b 770a 	mla	r7, fp, sl, r7
            sum0 += cols_8b[6]*ksrc[13];
 8010d58:	f990 a00d 	ldrsb.w	sl, [r0, #13]
 8010d5c:	fb0a cb0b 	mla	fp, sl, fp, ip
            sum1 += cols_8b[7]*ksrc[13];
 8010d60:	f999 c007 	ldrsb.w	ip, [r9, #7]
 8010d64:	fb0c 7a0a 	mla	sl, ip, sl, r7
            cols_8b += column_x + 6;
 8010d68:	eb09 0c08 	add.w	ip, r9, r8
            sum0 += cols_8b[0]*ksrc[14];
 8010d6c:	f919 7008 	ldrsb.w	r7, [r9, r8]
 8010d70:	f990 900e 	ldrsb.w	r9, [r0, #14]
 8010d74:	fb09 b707 	mla	r7, r9, r7, fp
            sum1 += cols_8b[1]*ksrc[14];
 8010d78:	f99c b001 	ldrsb.w	fp, [ip, #1]
 8010d7c:	fb0b a909 	mla	r9, fp, r9, sl
            sum0 += cols_8b[1]*ksrc[15];
 8010d80:	f990 a00f 	ldrsb.w	sl, [r0, #15]
 8010d84:	fb0a 770b 	mla	r7, sl, fp, r7
            sum1 += cols_8b[2]*ksrc[15];
 8010d88:	f99c b002 	ldrsb.w	fp, [ip, #2]
 8010d8c:	fb0b 990a 	mla	r9, fp, sl, r9
            sum0 += cols_8b[2]*ksrc[16];
 8010d90:	f990 a010 	ldrsb.w	sl, [r0, #16]
 8010d94:	fb0a 770b 	mla	r7, sl, fp, r7
            sum1 += cols_8b[3]*ksrc[16];
 8010d98:	f99c b003 	ldrsb.w	fp, [ip, #3]
 8010d9c:	fb0b 990a 	mla	r9, fp, sl, r9
            sum0 += cols_8b[3]*ksrc[17];
 8010da0:	f990 a011 	ldrsb.w	sl, [r0, #17]
 8010da4:	fb0a 770b 	mla	r7, sl, fp, r7
            sum1 += cols_8b[4]*ksrc[17];
 8010da8:	f99c b004 	ldrsb.w	fp, [ip, #4]
 8010dac:	fb0b 990a 	mla	r9, fp, sl, r9
            sum0 += cols_8b[4]*ksrc[18];
 8010db0:	f990 a012 	ldrsb.w	sl, [r0, #18]
 8010db4:	fb0a 770b 	mla	r7, sl, fp, r7
            sum1 += cols_8b[5]*ksrc[18];
 8010db8:	f99c b005 	ldrsb.w	fp, [ip, #5]
 8010dbc:	fb0b 990a 	mla	r9, fp, sl, r9
            sum0 += cols_8b[5]*ksrc[19];
 8010dc0:	f990 a013 	ldrsb.w	sl, [r0, #19]
 8010dc4:	fb0a 770b 	mla	r7, sl, fp, r7
            sum1 += cols_8b[6]*ksrc[19];
 8010dc8:	f99c b006 	ldrsb.w	fp, [ip, #6]
 8010dcc:	fb0b 990a 	mla	r9, fp, sl, r9
            sum0 += cols_8b[6]*ksrc[20];
 8010dd0:	f990 a014 	ldrsb.w	sl, [r0, #20]
 8010dd4:	fb0a 770b 	mla	r7, sl, fp, r7
            sum1 += cols_8b[7]*ksrc[20];
 8010dd8:	f99c b007 	ldrsb.w	fp, [ip, #7]
 8010ddc:	fb0b 9a0a 	mla	sl, fp, sl, r9
            cols_8b += column_x + 6;
 8010de0:	eb0c 0908 	add.w	r9, ip, r8
            sum0 += cols_8b[0]*ksrc[21];
 8010de4:	f91c b008 	ldrsb.w	fp, [ip, r8]
 8010de8:	f990 c015 	ldrsb.w	ip, [r0, #21]
 8010dec:	fb0c 770b 	mla	r7, ip, fp, r7
            sum1 += cols_8b[1]*ksrc[21];
 8010df0:	f999 b001 	ldrsb.w	fp, [r9, #1]
 8010df4:	fb0b ac0c 	mla	ip, fp, ip, sl
            sum0 += cols_8b[1]*ksrc[22];
 8010df8:	f990 a016 	ldrsb.w	sl, [r0, #22]
 8010dfc:	fb0a 770b 	mla	r7, sl, fp, r7
            sum1 += cols_8b[2]*ksrc[22];
 8010e00:	f999 b002 	ldrsb.w	fp, [r9, #2]
 8010e04:	fb0b cc0a 	mla	ip, fp, sl, ip
            sum0 += cols_8b[2]*ksrc[23];
 8010e08:	f990 a017 	ldrsb.w	sl, [r0, #23]
 8010e0c:	fb0a 770b 	mla	r7, sl, fp, r7
            sum1 += cols_8b[3]*ksrc[23];
 8010e10:	f999 b003 	ldrsb.w	fp, [r9, #3]
 8010e14:	fb0b cc0a 	mla	ip, fp, sl, ip
            sum0 += cols_8b[3]*ksrc[24];
 8010e18:	f990 a018 	ldrsb.w	sl, [r0, #24]
 8010e1c:	fb0a 770b 	mla	r7, sl, fp, r7
            sum1 += cols_8b[4]*ksrc[24];
 8010e20:	f999 b004 	ldrsb.w	fp, [r9, #4]
 8010e24:	fb0b cc0a 	mla	ip, fp, sl, ip
            sum0 += cols_8b[4]*ksrc[25];
 8010e28:	f990 a019 	ldrsb.w	sl, [r0, #25]
 8010e2c:	fb0a 770b 	mla	r7, sl, fp, r7
            sum1 += cols_8b[5]*ksrc[25];
 8010e30:	f999 b005 	ldrsb.w	fp, [r9, #5]
 8010e34:	fb0b cc0a 	mla	ip, fp, sl, ip
            sum0 += cols_8b[5]*ksrc[26];
 8010e38:	f990 a01a 	ldrsb.w	sl, [r0, #26]
 8010e3c:	fb0a 770b 	mla	r7, sl, fp, r7
            sum1 += cols_8b[6]*ksrc[26];
 8010e40:	f999 b006 	ldrsb.w	fp, [r9, #6]
 8010e44:	fb0b cc0a 	mla	ip, fp, sl, ip
            sum0 += cols_8b[6]*ksrc[27];
 8010e48:	f990 a01b 	ldrsb.w	sl, [r0, #27]
 8010e4c:	fb0a 770b 	mla	r7, sl, fp, r7
            sum1 += cols_8b[7]*ksrc[27];
 8010e50:	f999 b007 	ldrsb.w	fp, [r9, #7]
 8010e54:	fb0b ca0a 	mla	sl, fp, sl, ip
            cols_8b += column_x + 6;
 8010e58:	eb09 0c08 	add.w	ip, r9, r8
            sum0 += cols_8b[0]*ksrc[28];
 8010e5c:	f919 b008 	ldrsb.w	fp, [r9, r8]
 8010e60:	f990 901c 	ldrsb.w	r9, [r0, #28]
 8010e64:	fb09 770b 	mla	r7, r9, fp, r7
            sum1 += cols_8b[1]*ksrc[28];
 8010e68:	f99c b001 	ldrsb.w	fp, [ip, #1]
 8010e6c:	fb0b a909 	mla	r9, fp, r9, sl
            sum0 += cols_8b[1]*ksrc[29];
 8010e70:	f990 a01d 	ldrsb.w	sl, [r0, #29]
 8010e74:	fb0a 770b 	mla	r7, sl, fp, r7
            sum1 += cols_8b[2]*ksrc[29];
 8010e78:	f99c b002 	ldrsb.w	fp, [ip, #2]
 8010e7c:	fb0b 990a 	mla	r9, fp, sl, r9
            sum0 += cols_8b[2]*ksrc[30];
 8010e80:	f990 a01e 	ldrsb.w	sl, [r0, #30]
 8010e84:	fb0a 770b 	mla	r7, sl, fp, r7
            sum1 += cols_8b[3]*ksrc[30];
 8010e88:	f99c b003 	ldrsb.w	fp, [ip, #3]
 8010e8c:	fb0b 990a 	mla	r9, fp, sl, r9
            sum0 += cols_8b[3]*ksrc[31];
 8010e90:	f990 a01f 	ldrsb.w	sl, [r0, #31]
 8010e94:	fb0a 770b 	mla	r7, sl, fp, r7
            sum1 += cols_8b[4]*ksrc[31];
 8010e98:	f99c b004 	ldrsb.w	fp, [ip, #4]
 8010e9c:	fb0b 990a 	mla	r9, fp, sl, r9
            sum0 += cols_8b[4]*ksrc[32];
 8010ea0:	f990 a020 	ldrsb.w	sl, [r0, #32]
 8010ea4:	fb0a 770b 	mla	r7, sl, fp, r7
            sum1 += cols_8b[5]*ksrc[32];
 8010ea8:	f99c b005 	ldrsb.w	fp, [ip, #5]
 8010eac:	fb0b 990a 	mla	r9, fp, sl, r9
            sum0 += cols_8b[5]*ksrc[33];
 8010eb0:	f990 a021 	ldrsb.w	sl, [r0, #33]	@ 0x21
 8010eb4:	fb0a 770b 	mla	r7, sl, fp, r7
            sum1 += cols_8b[6]*ksrc[33];
 8010eb8:	f99c b006 	ldrsb.w	fp, [ip, #6]
 8010ebc:	fb0b 990a 	mla	r9, fp, sl, r9
            sum0 += cols_8b[6]*ksrc[34];
 8010ec0:	f990 a022 	ldrsb.w	sl, [r0, #34]	@ 0x22
 8010ec4:	fb0a 770b 	mla	r7, sl, fp, r7
            sum1 += cols_8b[7]*ksrc[34];
 8010ec8:	f99c b007 	ldrsb.w	fp, [ip, #7]
 8010ecc:	fb0b 9a0a 	mla	sl, fp, sl, r9
            cols_8b += column_x + 6;
 8010ed0:	eb0c 0908 	add.w	r9, ip, r8
            sum0 += cols_8b[0]*ksrc[35];
 8010ed4:	f91c b008 	ldrsb.w	fp, [ip, r8]
 8010ed8:	f990 c023 	ldrsb.w	ip, [r0, #35]	@ 0x23
 8010edc:	fb0c 770b 	mla	r7, ip, fp, r7
            sum1 += cols_8b[1]*ksrc[35];
 8010ee0:	f999 b001 	ldrsb.w	fp, [r9, #1]
 8010ee4:	fb0b ac0c 	mla	ip, fp, ip, sl
            sum0 += cols_8b[1]*ksrc[36];
 8010ee8:	f990 a024 	ldrsb.w	sl, [r0, #36]	@ 0x24
 8010eec:	fb0a 770b 	mla	r7, sl, fp, r7
            sum1 += cols_8b[2]*ksrc[36];
 8010ef0:	f999 b002 	ldrsb.w	fp, [r9, #2]
 8010ef4:	fb0b cc0a 	mla	ip, fp, sl, ip
            sum0 += cols_8b[2]*ksrc[37];
 8010ef8:	f990 a025 	ldrsb.w	sl, [r0, #37]	@ 0x25
 8010efc:	fb0a 770b 	mla	r7, sl, fp, r7
            sum1 += cols_8b[3]*ksrc[37];
 8010f00:	f999 b003 	ldrsb.w	fp, [r9, #3]
 8010f04:	fb0b cc0a 	mla	ip, fp, sl, ip
            sum0 += cols_8b[3]*ksrc[38];
 8010f08:	f990 a026 	ldrsb.w	sl, [r0, #38]	@ 0x26
 8010f0c:	fb0a 770b 	mla	r7, sl, fp, r7
            sum1 += cols_8b[4]*ksrc[38];
 8010f10:	f999 b004 	ldrsb.w	fp, [r9, #4]
 8010f14:	fb0b cc0a 	mla	ip, fp, sl, ip
            sum0 += cols_8b[4]*ksrc[39];
 8010f18:	f990 a027 	ldrsb.w	sl, [r0, #39]	@ 0x27
 8010f1c:	fb0a 770b 	mla	r7, sl, fp, r7
            sum1 += cols_8b[5]*ksrc[39];
 8010f20:	f999 b005 	ldrsb.w	fp, [r9, #5]
 8010f24:	fb0b cc0a 	mla	ip, fp, sl, ip
            sum0 += cols_8b[5]*ksrc[40];
 8010f28:	f990 a028 	ldrsb.w	sl, [r0, #40]	@ 0x28
 8010f2c:	fb0a 770b 	mla	r7, sl, fp, r7
            sum1 += cols_8b[6]*ksrc[40];
 8010f30:	f999 b006 	ldrsb.w	fp, [r9, #6]
 8010f34:	fb0b cc0a 	mla	ip, fp, sl, ip
            sum0 += cols_8b[6]*ksrc[41];
 8010f38:	f990 a029 	ldrsb.w	sl, [r0, #41]	@ 0x29
 8010f3c:	fb0a 770b 	mla	r7, sl, fp, r7
            sum1 += cols_8b[7]*ksrc[41];
 8010f40:	f999 b007 	ldrsb.w	fp, [r9, #7]
 8010f44:	fb0b cb0a 	mla	fp, fp, sl, ip
            cols_8b += column_x + 6;
 8010f48:	eb09 0c08 	add.w	ip, r9, r8
            sum0 += cols_8b[0]*ksrc[42];
 8010f4c:	f919 9008 	ldrsb.w	r9, [r9, r8]
 8010f50:	f990 802a 	ldrsb.w	r8, [r0, #42]	@ 0x2a
 8010f54:	fb08 7709 	mla	r7, r8, r9, r7
            sum1 += cols_8b[1]*ksrc[42];
 8010f58:	f99c 9001 	ldrsb.w	r9, [ip, #1]
 8010f5c:	fb09 b808 	mla	r8, r9, r8, fp
            sum0 += cols_8b[1]*ksrc[43];
 8010f60:	f990 a02b 	ldrsb.w	sl, [r0, #43]	@ 0x2b
 8010f64:	fb0a 7709 	mla	r7, sl, r9, r7
            sum1 += cols_8b[2]*ksrc[43];
 8010f68:	f99c 9002 	ldrsb.w	r9, [ip, #2]
 8010f6c:	fb09 880a 	mla	r8, r9, sl, r8
            sum0 += cols_8b[2]*ksrc[44];
 8010f70:	f990 a02c 	ldrsb.w	sl, [r0, #44]	@ 0x2c
 8010f74:	fb0a 7709 	mla	r7, sl, r9, r7
            sum1 += cols_8b[3]*ksrc[44];
 8010f78:	f99c 9003 	ldrsb.w	r9, [ip, #3]
 8010f7c:	fb09 880a 	mla	r8, r9, sl, r8
            sum0 += cols_8b[3]*ksrc[45];
 8010f80:	f990 a02d 	ldrsb.w	sl, [r0, #45]	@ 0x2d
 8010f84:	fb0a 7709 	mla	r7, sl, r9, r7
            sum1 += cols_8b[4]*ksrc[45];
 8010f88:	f99c 9004 	ldrsb.w	r9, [ip, #4]
 8010f8c:	fb09 880a 	mla	r8, r9, sl, r8
            sum0 += cols_8b[4]*ksrc[46];
 8010f90:	f990 a02e 	ldrsb.w	sl, [r0, #46]	@ 0x2e
 8010f94:	fb0a 7709 	mla	r7, sl, r9, r7
            sum1 += cols_8b[5]*ksrc[46];
 8010f98:	f99c 9005 	ldrsb.w	r9, [ip, #5]
 8010f9c:	fb09 880a 	mla	r8, r9, sl, r8
            sum0 += cols_8b[5]*ksrc[47];
 8010fa0:	f990 a02f 	ldrsb.w	sl, [r0, #47]	@ 0x2f
 8010fa4:	fb0a 7709 	mla	r7, sl, r9, r7
            sum1 += cols_8b[6]*ksrc[47];
 8010fa8:	f99c 9006 	ldrsb.w	r9, [ip, #6]
 8010fac:	fb09 880a 	mla	r8, r9, sl, r8
            sum0 += cols_8b[6]*ksrc[48];
 8010fb0:	f990 a030 	ldrsb.w	sl, [r0, #48]	@ 0x30
 8010fb4:	fb0a 7709 	mla	r7, sl, r9, r7
            sum1 += cols_8b[7]*ksrc[48];
 8010fb8:	f99c c007 	ldrsb.w	ip, [ip, #7]
 8010fbc:	fb0c 880a 	mla	r8, ip, sl, r8

            /* requantize */
            sum0 = (float) sum0 * *scales;
 8010fc0:	ee07 7a90 	vmov	s15, r7
 8010fc4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010fc8:	ed94 7a00 	vldr	s14, [r4]
 8010fcc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010fd0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010fd4:	ee17 7a90 	vmov	r7, s15
            sum0 += output_offset;
 8010fd8:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8010fda:	442f      	add	r7, r5
            sum0 = TN_MAX(sum0, activation_min);
 8010fdc:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 8010fde:	42af      	cmp	r7, r5
 8010fe0:	bfb8      	it	lt
 8010fe2:	462f      	movlt	r7, r5
            sum0 = TN_MIN(sum0, activation_max);
 8010fe4:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 8010fe6:	42af      	cmp	r7, r5
 8010fe8:	bfa8      	it	ge
 8010fea:	462f      	movge	r7, r5
            output[(i * output_x + j * 2) * channel_offset] = sum0;
 8010fec:	9d00      	ldr	r5, [sp, #0]
 8010fee:	fb05 fc01 	mul.w	ip, r5, r1
 8010ff2:	ea4f 094e 	mov.w	r9, lr, lsl #1
 8010ff6:	eb0c 0a4e 	add.w	sl, ip, lr, lsl #1
 8010ffa:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 8010ffc:	fb05 fa0a 	mul.w	sl, r5, sl
 8011000:	f802 700a 	strb.w	r7, [r2, sl]

            sum1 = (float) sum1 * *scales;
 8011004:	ee07 8a90 	vmov	s15, r8
 8011008:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801100c:	ed94 7a00 	vldr	s14, [r4]
 8011010:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011014:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011018:	ee17 7a90 	vmov	r7, s15
            sum1 += output_offset;
 801101c:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 801101e:	442f      	add	r7, r5
            sum1 = TN_MAX(sum1, activation_min);
 8011020:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 8011022:	42af      	cmp	r7, r5
 8011024:	bfb8      	it	lt
 8011026:	462f      	movlt	r7, r5
            sum1 = TN_MIN(sum1, activation_max);
 8011028:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 801102a:	42af      	cmp	r7, r5
 801102c:	bfa8      	it	ge
 801102e:	462f      	movge	r7, r5
            output[(i * output_x + (j * 2 + 1)) * channel_offset] = sum1;
 8011030:	f109 0901 	add.w	r9, r9, #1
 8011034:	44cc      	add	ip, r9
 8011036:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 8011038:	fb05 fc0c 	mul.w	ip, r5, ip
 801103c:	f802 700c 	strb.w	r7, [r2, ip]

            cols_8b_iterptr += STRIDE * 2;
 8011040:	3302      	adds	r3, #2
        for (j = 0; j < output_x / 2; j++) {
 8011042:	f10e 0e01 	add.w	lr, lr, #1
 8011046:	ebbe 0f51 	cmp.w	lr, r1, lsr #1
 801104a:	f6ff ae10 	blt.w	8010c6e <depthwise_kernel7x7_stride1_inplace_kernel_CHW_fpreq+0x26>
        }
        if (output_x & 1) {
 801104e:	9d01      	ldr	r5, [sp, #4]
 8011050:	4692      	mov	sl, r2
 8011052:	f011 0f01 	tst.w	r1, #1
 8011056:	f000 8159 	beq.w	801130c <depthwise_kernel7x7_stride1_inplace_kernel_CHW_fpreq+0x6c4>
            q7_t * cols_8b = cols_8b_iterptr;
            q31_t sum = bias[0] + biasR[0];
 801105a:	682f      	ldr	r7, [r5, #0]
 801105c:	6832      	ldr	r2, [r6, #0]
 801105e:	4417      	add	r7, r2
            sum += cols_8b[0]*ksrc[0];
 8011060:	f993 c000 	ldrsb.w	ip, [r3]
 8011064:	f990 e000 	ldrsb.w	lr, [r0]
 8011068:	fb0e 770c 	mla	r7, lr, ip, r7
            sum += cols_8b[1]*ksrc[1];
 801106c:	f993 c001 	ldrsb.w	ip, [r3, #1]
 8011070:	f990 e001 	ldrsb.w	lr, [r0, #1]
 8011074:	fb0e 770c 	mla	r7, lr, ip, r7
            sum += cols_8b[2]*ksrc[2];
 8011078:	f993 c002 	ldrsb.w	ip, [r3, #2]
 801107c:	f990 e002 	ldrsb.w	lr, [r0, #2]
 8011080:	fb0e 770c 	mla	r7, lr, ip, r7
            sum += cols_8b[3]*ksrc[3];
 8011084:	f993 c003 	ldrsb.w	ip, [r3, #3]
 8011088:	f990 e003 	ldrsb.w	lr, [r0, #3]
 801108c:	fb0e 770c 	mla	r7, lr, ip, r7
            sum += cols_8b[4]*ksrc[4];
 8011090:	f993 c004 	ldrsb.w	ip, [r3, #4]
 8011094:	f990 e004 	ldrsb.w	lr, [r0, #4]
 8011098:	fb0e 770c 	mla	r7, lr, ip, r7
            sum += cols_8b[5]*ksrc[5];
 801109c:	f993 c005 	ldrsb.w	ip, [r3, #5]
 80110a0:	f990 e005 	ldrsb.w	lr, [r0, #5]
 80110a4:	fb0e 770c 	mla	r7, lr, ip, r7
            sum += cols_8b[6]*ksrc[6];
 80110a8:	f993 c006 	ldrsb.w	ip, [r3, #6]
 80110ac:	f990 e006 	ldrsb.w	lr, [r0, #6]
 80110b0:	fb0e 770c 	mla	r7, lr, ip, r7
            cols_8b += column_x + 6;
 80110b4:	9a02      	ldr	r2, [sp, #8]
 80110b6:	f102 0c06 	add.w	ip, r2, #6
 80110ba:	eb03 0e0c 	add.w	lr, r3, ip
            sum += cols_8b[0]*ksrc[7];
 80110be:	f913 800c 	ldrsb.w	r8, [r3, ip]
 80110c2:	f990 9007 	ldrsb.w	r9, [r0, #7]
 80110c6:	fb09 7708 	mla	r7, r9, r8, r7
            sum += cols_8b[1]*ksrc[8];
 80110ca:	f99e 8001 	ldrsb.w	r8, [lr, #1]
 80110ce:	f990 9008 	ldrsb.w	r9, [r0, #8]
 80110d2:	fb09 7708 	mla	r7, r9, r8, r7
            sum += cols_8b[2]*ksrc[9];
 80110d6:	f99e 8002 	ldrsb.w	r8, [lr, #2]
 80110da:	f990 9009 	ldrsb.w	r9, [r0, #9]
 80110de:	fb09 7708 	mla	r7, r9, r8, r7
            sum += cols_8b[3]*ksrc[10];
 80110e2:	f99e 8003 	ldrsb.w	r8, [lr, #3]
 80110e6:	f990 900a 	ldrsb.w	r9, [r0, #10]
 80110ea:	fb09 7708 	mla	r7, r9, r8, r7
            sum += cols_8b[4]*ksrc[11];
 80110ee:	f99e 8004 	ldrsb.w	r8, [lr, #4]
 80110f2:	f990 900b 	ldrsb.w	r9, [r0, #11]
 80110f6:	fb09 7708 	mla	r7, r9, r8, r7
            sum += cols_8b[5]*ksrc[12];
 80110fa:	f99e 8005 	ldrsb.w	r8, [lr, #5]
 80110fe:	f990 900c 	ldrsb.w	r9, [r0, #12]
 8011102:	fb09 7708 	mla	r7, r9, r8, r7
            sum += cols_8b[6]*ksrc[13];
 8011106:	f99e 8006 	ldrsb.w	r8, [lr, #6]
 801110a:	f990 900d 	ldrsb.w	r9, [r0, #13]
 801110e:	fb09 7708 	mla	r7, r9, r8, r7
            cols_8b += column_x + 6;
 8011112:	eb0e 080c 	add.w	r8, lr, ip
            sum += cols_8b[0]*ksrc[14];
 8011116:	f91e e00c 	ldrsb.w	lr, [lr, ip]
 801111a:	f990 900e 	ldrsb.w	r9, [r0, #14]
 801111e:	fb09 770e 	mla	r7, r9, lr, r7
            sum += cols_8b[1]*ksrc[15];
 8011122:	f998 e001 	ldrsb.w	lr, [r8, #1]
 8011126:	f990 900f 	ldrsb.w	r9, [r0, #15]
 801112a:	fb09 770e 	mla	r7, r9, lr, r7
            sum += cols_8b[2]*ksrc[16];
 801112e:	f998 e002 	ldrsb.w	lr, [r8, #2]
 8011132:	f990 9010 	ldrsb.w	r9, [r0, #16]
 8011136:	fb09 770e 	mla	r7, r9, lr, r7
            sum += cols_8b[3]*ksrc[17];
 801113a:	f998 e003 	ldrsb.w	lr, [r8, #3]
 801113e:	f990 9011 	ldrsb.w	r9, [r0, #17]
 8011142:	fb09 770e 	mla	r7, r9, lr, r7
            sum += cols_8b[4]*ksrc[18];
 8011146:	f998 e004 	ldrsb.w	lr, [r8, #4]
 801114a:	f990 9012 	ldrsb.w	r9, [r0, #18]
 801114e:	fb09 770e 	mla	r7, r9, lr, r7
            sum += cols_8b[5]*ksrc[19];
 8011152:	f998 e005 	ldrsb.w	lr, [r8, #5]
 8011156:	f990 9013 	ldrsb.w	r9, [r0, #19]
 801115a:	fb09 770e 	mla	r7, r9, lr, r7
            sum += cols_8b[6]*ksrc[20];
 801115e:	f998 e006 	ldrsb.w	lr, [r8, #6]
 8011162:	f990 9014 	ldrsb.w	r9, [r0, #20]
 8011166:	fb09 770e 	mla	r7, r9, lr, r7
            cols_8b += column_x + 6;
 801116a:	eb08 0e0c 	add.w	lr, r8, ip
            sum += cols_8b[0]*ksrc[21];
 801116e:	f918 800c 	ldrsb.w	r8, [r8, ip]
 8011172:	f990 9015 	ldrsb.w	r9, [r0, #21]
 8011176:	fb09 7708 	mla	r7, r9, r8, r7
            sum += cols_8b[1]*ksrc[22];
 801117a:	f99e 8001 	ldrsb.w	r8, [lr, #1]
 801117e:	f990 9016 	ldrsb.w	r9, [r0, #22]
 8011182:	fb09 7708 	mla	r7, r9, r8, r7
            sum += cols_8b[2]*ksrc[23];
 8011186:	f99e 8002 	ldrsb.w	r8, [lr, #2]
 801118a:	f990 9017 	ldrsb.w	r9, [r0, #23]
 801118e:	fb09 7708 	mla	r7, r9, r8, r7
            sum += cols_8b[3]*ksrc[24];
 8011192:	f99e 8003 	ldrsb.w	r8, [lr, #3]
 8011196:	f990 9018 	ldrsb.w	r9, [r0, #24]
 801119a:	fb09 7708 	mla	r7, r9, r8, r7
            sum += cols_8b[4]*ksrc[25];
 801119e:	f99e 8004 	ldrsb.w	r8, [lr, #4]
 80111a2:	f990 9019 	ldrsb.w	r9, [r0, #25]
 80111a6:	fb09 7708 	mla	r7, r9, r8, r7
            sum += cols_8b[5]*ksrc[26];
 80111aa:	f99e 8005 	ldrsb.w	r8, [lr, #5]
 80111ae:	f990 901a 	ldrsb.w	r9, [r0, #26]
 80111b2:	fb09 7708 	mla	r7, r9, r8, r7
            sum += cols_8b[6]*ksrc[27];
 80111b6:	f99e 8006 	ldrsb.w	r8, [lr, #6]
 80111ba:	f990 901b 	ldrsb.w	r9, [r0, #27]
 80111be:	fb09 7708 	mla	r7, r9, r8, r7
            cols_8b += column_x + 6;
 80111c2:	eb0e 090c 	add.w	r9, lr, ip
            sum += cols_8b[0]*ksrc[28];
 80111c6:	f91e 800c 	ldrsb.w	r8, [lr, ip]
 80111ca:	f990 e01c 	ldrsb.w	lr, [r0, #28]
 80111ce:	fb0e 7808 	mla	r8, lr, r8, r7
            sum += cols_8b[1]*ksrc[29];
 80111d2:	f999 7001 	ldrsb.w	r7, [r9, #1]
 80111d6:	f990 e01d 	ldrsb.w	lr, [r0, #29]
 80111da:	fb0e 8807 	mla	r8, lr, r7, r8
            sum += cols_8b[2]*ksrc[30];
 80111de:	f999 7002 	ldrsb.w	r7, [r9, #2]
 80111e2:	f990 e01e 	ldrsb.w	lr, [r0, #30]
 80111e6:	fb0e 8807 	mla	r8, lr, r7, r8
            sum += cols_8b[3]*ksrc[31];
 80111ea:	f999 7003 	ldrsb.w	r7, [r9, #3]
 80111ee:	f990 e01f 	ldrsb.w	lr, [r0, #31]
 80111f2:	fb0e 8807 	mla	r8, lr, r7, r8
            sum += cols_8b[4]*ksrc[32];
 80111f6:	f999 7004 	ldrsb.w	r7, [r9, #4]
 80111fa:	f990 e020 	ldrsb.w	lr, [r0, #32]
 80111fe:	fb0e 8807 	mla	r8, lr, r7, r8
            sum += cols_8b[5]*ksrc[33];
 8011202:	f999 7005 	ldrsb.w	r7, [r9, #5]
 8011206:	f990 e021 	ldrsb.w	lr, [r0, #33]	@ 0x21
 801120a:	fb0e 8807 	mla	r8, lr, r7, r8
            sum += cols_8b[6]*ksrc[34];
 801120e:	f999 7006 	ldrsb.w	r7, [r9, #6]
 8011212:	f990 e022 	ldrsb.w	lr, [r0, #34]	@ 0x22
 8011216:	fb0e 8807 	mla	r8, lr, r7, r8
            cols_8b += column_x + 6;
 801121a:	eb09 0e0c 	add.w	lr, r9, ip
            sum += cols_8b[0]*ksrc[35];
 801121e:	f919 700c 	ldrsb.w	r7, [r9, ip]
 8011222:	f990 9023 	ldrsb.w	r9, [r0, #35]	@ 0x23
 8011226:	fb09 8707 	mla	r7, r9, r7, r8
            sum += cols_8b[1]*ksrc[36];
 801122a:	f99e 8001 	ldrsb.w	r8, [lr, #1]
 801122e:	f990 9024 	ldrsb.w	r9, [r0, #36]	@ 0x24
 8011232:	fb09 7708 	mla	r7, r9, r8, r7
            sum += cols_8b[2]*ksrc[37];
 8011236:	f99e 8002 	ldrsb.w	r8, [lr, #2]
 801123a:	f990 9025 	ldrsb.w	r9, [r0, #37]	@ 0x25
 801123e:	fb09 7708 	mla	r7, r9, r8, r7
            sum += cols_8b[3]*ksrc[38];
 8011242:	f99e 8003 	ldrsb.w	r8, [lr, #3]
 8011246:	f990 9026 	ldrsb.w	r9, [r0, #38]	@ 0x26
 801124a:	fb09 7708 	mla	r7, r9, r8, r7
            sum += cols_8b[4]*ksrc[39];
 801124e:	f99e 8004 	ldrsb.w	r8, [lr, #4]
 8011252:	f990 9027 	ldrsb.w	r9, [r0, #39]	@ 0x27
 8011256:	fb09 7708 	mla	r7, r9, r8, r7
            sum += cols_8b[5]*ksrc[40];
 801125a:	f99e 8005 	ldrsb.w	r8, [lr, #5]
 801125e:	f990 9028 	ldrsb.w	r9, [r0, #40]	@ 0x28
 8011262:	fb09 7708 	mla	r7, r9, r8, r7
            sum += cols_8b[6]*ksrc[41];
 8011266:	f99e 8006 	ldrsb.w	r8, [lr, #6]
 801126a:	f990 9029 	ldrsb.w	r9, [r0, #41]	@ 0x29
 801126e:	fb09 7908 	mla	r9, r9, r8, r7
            cols_8b += column_x + 6;
 8011272:	eb0e 080c 	add.w	r8, lr, ip
            sum += cols_8b[0]*ksrc[42];
 8011276:	f91e 700c 	ldrsb.w	r7, [lr, ip]
 801127a:	f990 c02a 	ldrsb.w	ip, [r0, #42]	@ 0x2a
 801127e:	fb0c 9707 	mla	r7, ip, r7, r9
            sum += cols_8b[1]*ksrc[43];
 8011282:	f998 c001 	ldrsb.w	ip, [r8, #1]
 8011286:	f990 e02b 	ldrsb.w	lr, [r0, #43]	@ 0x2b
 801128a:	fb0e 770c 	mla	r7, lr, ip, r7
            sum += cols_8b[2]*ksrc[44];
 801128e:	f998 c002 	ldrsb.w	ip, [r8, #2]
 8011292:	f990 e02c 	ldrsb.w	lr, [r0, #44]	@ 0x2c
 8011296:	fb0e 770c 	mla	r7, lr, ip, r7
            sum += cols_8b[3]*ksrc[45];
 801129a:	f998 c003 	ldrsb.w	ip, [r8, #3]
 801129e:	f990 e02d 	ldrsb.w	lr, [r0, #45]	@ 0x2d
 80112a2:	fb0e 770c 	mla	r7, lr, ip, r7
            sum += cols_8b[4]*ksrc[46];
 80112a6:	f998 c004 	ldrsb.w	ip, [r8, #4]
 80112aa:	f990 e02e 	ldrsb.w	lr, [r0, #46]	@ 0x2e
 80112ae:	fb0e 770c 	mla	r7, lr, ip, r7
            sum += cols_8b[5]*ksrc[47];
 80112b2:	f998 c005 	ldrsb.w	ip, [r8, #5]
 80112b6:	f990 e02f 	ldrsb.w	lr, [r0, #47]	@ 0x2f
 80112ba:	fb0e 770c 	mla	r7, lr, ip, r7
            sum += cols_8b[6]*ksrc[48];
 80112be:	f998 c006 	ldrsb.w	ip, [r8, #6]
 80112c2:	f990 e030 	ldrsb.w	lr, [r0, #48]	@ 0x30
 80112c6:	fb0e 770c 	mla	r7, lr, ip, r7

            sum = (float) sum * *scales;
 80112ca:	ee07 7a90 	vmov	s15, r7
 80112ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80112d2:	ed94 7a00 	vldr	s14, [r4]
 80112d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80112da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80112de:	ee17 7a90 	vmov	r7, s15
            sum += output_offset;
 80112e2:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80112e4:	4417      	add	r7, r2
            sum = TN_MAX(sum, activation_min);
 80112e6:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80112e8:	4297      	cmp	r7, r2
 80112ea:	bfb8      	it	lt
 80112ec:	4617      	movlt	r7, r2
            sum = TN_MIN(sum, activation_max);
 80112ee:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80112f0:	4297      	cmp	r7, r2
 80112f2:	bfa8      	it	ge
 80112f4:	4617      	movge	r7, r2
            output[(i * output_x + output_x - 1) * channel_offset] = sum;
 80112f6:	9a00      	ldr	r2, [sp, #0]
 80112f8:	fb02 1c01 	mla	ip, r2, r1, r1
 80112fc:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8011300:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8011302:	fb02 fc0c 	mul.w	ip, r2, ip
 8011306:	f80a 700c 	strb.w	r7, [sl, ip]

            cols_8b_iterptr += STRIDE;
 801130a:	3301      	adds	r3, #1
        }
        cols_8b_iterptr += 3 * 2;
 801130c:	3306      	adds	r3, #6
    for (i = 0; i < output_y; i++) {
 801130e:	9f00      	ldr	r7, [sp, #0]
 8011310:	3701      	adds	r7, #1
 8011312:	9700      	str	r7, [sp, #0]
 8011314:	9f03      	ldr	r7, [sp, #12]
 8011316:	9a00      	ldr	r2, [sp, #0]
 8011318:	4297      	cmp	r7, r2
 801131a:	dd04      	ble.n	8011326 <depthwise_kernel7x7_stride1_inplace_kernel_CHW_fpreq+0x6de>
        for (j = 0; j < output_x / 2; j++) {
 801131c:	f04f 0e00 	mov.w	lr, #0
 8011320:	9501      	str	r5, [sp, #4]
 8011322:	4652      	mov	r2, sl
 8011324:	e68f      	b.n	8011046 <depthwise_kernel7x7_stride1_inplace_kernel_CHW_fpreq+0x3fe>
    }
}
 8011326:	b005      	add	sp, #20
 8011328:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801132c <depthwise_kernel7x7_stride1_inplace_CHW_fpreq>:
{
 801132c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011330:	b08f      	sub	sp, #60	@ 0x3c
 8011332:	4680      	mov	r8, r0
 8011334:	460c      	mov	r4, r1
 8011336:	4616      	mov	r6, r2
 8011338:	461d      	mov	r5, r3
 801133a:	f8dd a060 	ldr.w	sl, [sp, #96]	@ 0x60
 801133e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8011340:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8011342:	f8dd e06c 	ldr.w	lr, [sp, #108]	@ 0x6c
 8011346:	f8bd 1084 	ldrh.w	r1, [sp, #132]	@ 0x84
 801134a:	910c      	str	r1, [sp, #48]	@ 0x30
 801134c:	f8bd 1088 	ldrh.w	r1, [sp, #136]	@ 0x88
 8011350:	910d      	str	r1, [sp, #52]	@ 0x34
 8011352:	f8dd b090 	ldr.w	fp, [sp, #144]	@ 0x90
 8011356:	f99d 0094 	ldrsb.w	r0, [sp, #148]	@ 0x94
    q7_t* cols_8b = (q7_t* )cols_8b_start;
 801135a:	4659      	mov	r1, fp
    for(i = 0; i < input_x + 6; i++){
 801135c:	2700      	movs	r7, #0
 801135e:	e005      	b.n	801136c <depthwise_kernel7x7_stride1_inplace_CHW_fpreq+0x40>
        *cols_8b++ = PAD8;
 8011360:	7008      	strb	r0, [r1, #0]
        *cols_8b++ = PAD8;
 8011362:	7048      	strb	r0, [r1, #1]
        *cols_8b++ = PAD8;
 8011364:	7088      	strb	r0, [r1, #2]
    for(i = 0; i < input_x + 6; i++){
 8011366:	3701      	adds	r7, #1
 8011368:	b2bf      	uxth	r7, r7
        *cols_8b++ = PAD8;
 801136a:	3103      	adds	r1, #3
    for(i = 0; i < input_x + 6; i++){
 801136c:	f104 0905 	add.w	r9, r4, #5
 8011370:	45b9      	cmp	r9, r7
 8011372:	daf5      	bge.n	8011360 <depthwise_kernel7x7_stride1_inplace_CHW_fpreq+0x34>
    for(i = 0; i < input_y; i++){
 8011374:	2700      	movs	r7, #0
 8011376:	f8cd 9028 	str.w	r9, [sp, #40]	@ 0x28
 801137a:	e010      	b.n	801139e <depthwise_kernel7x7_stride1_inplace_CHW_fpreq+0x72>
        *cols_8b++ = PAD8;//left
 801137c:	7008      	strb	r0, [r1, #0]
        *cols_8b++ = PAD8;//left
 801137e:	7048      	strb	r0, [r1, #1]
        *cols_8b++ = PAD8;//left
 8011380:	7088      	strb	r0, [r1, #2]
        cols_8b += input_x; //skip middle
 8011382:	f104 0903 	add.w	r9, r4, #3
 8011386:	eb01 0c09 	add.w	ip, r1, r9
        *cols_8b++ = PAD8;//right
 801138a:	f801 0009 	strb.w	r0, [r1, r9]
        *cols_8b++ = PAD8;//right
 801138e:	f88c 0001 	strb.w	r0, [ip, #1]
        *cols_8b++ = PAD8;//right
 8011392:	f10c 0103 	add.w	r1, ip, #3
 8011396:	f88c 0002 	strb.w	r0, [ip, #2]
    for(i = 0; i < input_y; i++){
 801139a:	3701      	adds	r7, #1
 801139c:	b2bf      	uxth	r7, r7
 801139e:	42b7      	cmp	r7, r6
 80113a0:	d3ec      	bcc.n	801137c <depthwise_kernel7x7_stride1_inplace_CHW_fpreq+0x50>
    for(i = 0; i < input_x + 6; i++){
 80113a2:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 80113a6:	2700      	movs	r7, #0
 80113a8:	e005      	b.n	80113b6 <depthwise_kernel7x7_stride1_inplace_CHW_fpreq+0x8a>
        *cols_8b++ = PAD8;
 80113aa:	7008      	strb	r0, [r1, #0]
        *cols_8b++ = PAD8;
 80113ac:	7048      	strb	r0, [r1, #1]
        *cols_8b++ = PAD8;
 80113ae:	7088      	strb	r0, [r1, #2]
    for(i = 0; i < input_x + 6; i++){
 80113b0:	3701      	adds	r7, #1
 80113b2:	b2bf      	uxth	r7, r7
        *cols_8b++ = PAD8;
 80113b4:	3103      	adds	r1, #3
    for(i = 0; i < input_x + 6; i++){
 80113b6:	45b9      	cmp	r9, r7
 80113b8:	daf7      	bge.n	80113aa <depthwise_kernel7x7_stride1_inplace_CHW_fpreq+0x7e>
    for (c = 0; c < input_ch; c++){
 80113ba:	2700      	movs	r7, #0
 80113bc:	4670      	mov	r0, lr
 80113be:	e035      	b.n	801142c <depthwise_kernel7x7_stride1_inplace_CHW_fpreq+0x100>
                *cols_8b++ = *src;// + input_offset;
 80113c0:	f99c e000 	ldrsb.w	lr, [ip]
 80113c4:	f801 eb01 	strb.w	lr, [r1], #1
                src += input_ch;
 80113c8:	44ac      	add	ip, r5
            for(j = 0; j < input_x; j++){
 80113ca:	3701      	adds	r7, #1
 80113cc:	b2bf      	uxth	r7, r7
 80113ce:	42a7      	cmp	r7, r4
 80113d0:	d3f6      	bcc.n	80113c0 <depthwise_kernel7x7_stride1_inplace_CHW_fpreq+0x94>
            cols_8b += 3;//skip end
 80113d2:	3103      	adds	r1, #3
        for(i = 0; i < input_y; i++){
 80113d4:	f109 0901 	add.w	r9, r9, #1
 80113d8:	fa1f f989 	uxth.w	r9, r9
 80113dc:	45b1      	cmp	r9, r6
 80113de:	d202      	bcs.n	80113e6 <depthwise_kernel7x7_stride1_inplace_CHW_fpreq+0xba>
            cols_8b += 3;//skip front
 80113e0:	3103      	adds	r1, #3
            for(j = 0; j < input_x; j++){
 80113e2:	2700      	movs	r7, #0
 80113e4:	e7f3      	b.n	80113ce <depthwise_kernel7x7_stride1_inplace_CHW_fpreq+0xa2>
        depthwise_kernel7x7_stride1_inplace_kernel_CHW_fpreq(output_y, output_x, bias++, biasR++, ksrc, scales++, inplace_out, output_offset,output_activation_min, output_activation_max,cols_8b_start, input_x, input_ch);
 80113e6:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 80113e8:	1d11      	adds	r1, r2, #4
 80113ea:	910a      	str	r1, [sp, #40]	@ 0x28
 80113ec:	f103 0904 	add.w	r9, r3, #4
 80113f0:	1d01      	adds	r1, r0, #4
 80113f2:	910b      	str	r1, [sp, #44]	@ 0x2c
 80113f4:	9508      	str	r5, [sp, #32]
 80113f6:	9407      	str	r4, [sp, #28]
 80113f8:	f8cd b018 	str.w	fp, [sp, #24]
 80113fc:	991f      	ldr	r1, [sp, #124]	@ 0x7c
 80113fe:	9105      	str	r1, [sp, #20]
 8011400:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8011402:	9104      	str	r1, [sp, #16]
 8011404:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8011406:	9103      	str	r1, [sp, #12]
 8011408:	f8cd 8008 	str.w	r8, [sp, #8]
 801140c:	9001      	str	r0, [sp, #4]
 801140e:	f8cd a000 	str.w	sl, [sp]
 8011412:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8011414:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8011416:	f7ff fc17 	bl	8010c48 <depthwise_kernel7x7_stride1_inplace_kernel_CHW_fpreq>
        ksrc += 49;
 801141a:	f10a 0a31 	add.w	sl, sl, #49	@ 0x31
        input++;
 801141e:	f108 0801 	add.w	r8, r8, #1
    for (c = 0; c < input_ch; c++){
 8011422:	3701      	adds	r7, #1
 8011424:	b2bf      	uxth	r7, r7
        depthwise_kernel7x7_stride1_inplace_kernel_CHW_fpreq(output_y, output_x, bias++, biasR++, ksrc, scales++, inplace_out, output_offset,output_activation_min, output_activation_max,cols_8b_start, input_x, input_ch);
 8011426:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8011428:	464b      	mov	r3, r9
 801142a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
    for (c = 0; c < input_ch; c++){
 801142c:	42af      	cmp	r7, r5
 801142e:	d208      	bcs.n	8011442 <depthwise_kernel7x7_stride1_inplace_CHW_fpreq+0x116>
        cols_8b = (q7_t*)(cols_8b_start + 3 * (input_x) + 18); //skip 3 rows
 8011430:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 8011434:	3112      	adds	r1, #18
 8011436:	4459      	add	r1, fp
        src = input;
 8011438:	46c4      	mov	ip, r8
        for(i = 0; i < input_y; i++){
 801143a:	f04f 0900 	mov.w	r9, #0
 801143e:	970a      	str	r7, [sp, #40]	@ 0x28
 8011440:	e7cc      	b.n	80113dc <depthwise_kernel7x7_stride1_inplace_CHW_fpreq+0xb0>
}
 8011442:	2000      	movs	r0, #0
 8011444:	b00f      	add	sp, #60	@ 0x3c
 8011446:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801144a <depthwise_kernel7x7_stride2_inplace_kernel_CHW_fpreq>:
        const uint16_t output_y, const uint16_t output_x,
        const int32_t *bias, const int32_t *biasR, const q7_t *ksrc, const float *scales,
        q7_t *output, const int32_t output_offset,
        const int32_t activation_min, const int32_t activation_max,
        q7_t *cols_8b_iterptr, const uint16_t column_x, int channel_offset)
{
 801144a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801144e:	b085      	sub	sp, #20
 8011450:	4681      	mov	r9, r0
 8011452:	4696      	mov	lr, r2
 8011454:	461d      	mov	r5, r3
 8011456:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011458:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801145a:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801145c:	f8bd 0054 	ldrh.w	r0, [sp, #84]	@ 0x54
 8011460:	9002      	str	r0, [sp, #8]
    #define STRIDE 2
    int i, j;
    /* MACs for each output */
    for (i = 0; i < output_y; i++) {
 8011462:	2000      	movs	r0, #0
 8011464:	9000      	str	r0, [sp, #0]
 8011466:	f8cd 900c 	str.w	r9, [sp, #12]
 801146a:	e363      	b.n	8011b34 <depthwise_kernel7x7_stride2_inplace_kernel_CHW_fpreq+0x6ea>
        for (j = 0; j < output_x / 2; j++) {
            q7_t *cols_8b = cols_8b_iterptr;

            q31_t sum0 = bias[0] + biasR[0];
 801146c:	f8de 0000 	ldr.w	r0, [lr]
 8011470:	9d01      	ldr	r5, [sp, #4]
 8011472:	682f      	ldr	r7, [r5, #0]
 8011474:	4438      	add	r0, r7
            q31_t sum1 = bias[0] + biasR[0];
            
            /* computation */
            sum0 += cols_8b[0]*ksrc[0];
 8011476:	f992 7000 	ldrsb.w	r7, [r2]
 801147a:	f993 c000 	ldrsb.w	ip, [r3]
 801147e:	fb0c 0707 	mla	r7, ip, r7, r0
            sum1 += cols_8b[2]*ksrc[0];
 8011482:	f992 9002 	ldrsb.w	r9, [r2, #2]
 8011486:	fb09 000c 	mla	r0, r9, ip, r0
            sum0 += cols_8b[1]*ksrc[1];
 801148a:	f992 c001 	ldrsb.w	ip, [r2, #1]
 801148e:	f993 8001 	ldrsb.w	r8, [r3, #1]
 8011492:	fb08 770c 	mla	r7, r8, ip, r7
            sum1 += cols_8b[3]*ksrc[1];
 8011496:	f992 c003 	ldrsb.w	ip, [r2, #3]
 801149a:	fb0c 0008 	mla	r0, ip, r8, r0
            sum0 += cols_8b[2]*ksrc[2];
 801149e:	f993 8002 	ldrsb.w	r8, [r3, #2]
 80114a2:	fb08 7709 	mla	r7, r8, r9, r7
            sum1 += cols_8b[4]*ksrc[2];
 80114a6:	f992 9004 	ldrsb.w	r9, [r2, #4]
 80114aa:	fb09 0008 	mla	r0, r9, r8, r0
            sum0 += cols_8b[3]*ksrc[3];
 80114ae:	f993 8003 	ldrsb.w	r8, [r3, #3]
 80114b2:	fb08 770c 	mla	r7, r8, ip, r7
            sum1 += cols_8b[5]*ksrc[3];
 80114b6:	f992 c005 	ldrsb.w	ip, [r2, #5]
 80114ba:	fb0c 0008 	mla	r0, ip, r8, r0
            sum0 += cols_8b[4]*ksrc[4];
 80114be:	f993 8004 	ldrsb.w	r8, [r3, #4]
 80114c2:	fb08 7709 	mla	r7, r8, r9, r7
            sum1 += cols_8b[6]*ksrc[4];
 80114c6:	f992 9006 	ldrsb.w	r9, [r2, #6]
 80114ca:	fb09 0008 	mla	r0, r9, r8, r0
            sum0 += cols_8b[5]*ksrc[5];
 80114ce:	f993 8005 	ldrsb.w	r8, [r3, #5]
 80114d2:	fb08 770c 	mla	r7, r8, ip, r7
            sum1 += cols_8b[7]*ksrc[5];
 80114d6:	f992 c007 	ldrsb.w	ip, [r2, #7]
 80114da:	fb0c 0c08 	mla	ip, ip, r8, r0
            sum0 += cols_8b[6]*ksrc[6];
 80114de:	f993 8006 	ldrsb.w	r8, [r3, #6]
 80114e2:	fb08 7009 	mla	r0, r8, r9, r7
            sum1 += cols_8b[8]*ksrc[6];
 80114e6:	f992 7008 	ldrsb.w	r7, [r2, #8]
 80114ea:	fb07 cc08 	mla	ip, r7, r8, ip
            cols_8b += column_x + 6;
 80114ee:	9f02      	ldr	r7, [sp, #8]
 80114f0:	3706      	adds	r7, #6
 80114f2:	eb02 0807 	add.w	r8, r2, r7
            sum0 += cols_8b[0]*ksrc[7];
 80114f6:	f912 9007 	ldrsb.w	r9, [r2, r7]
 80114fa:	f993 a007 	ldrsb.w	sl, [r3, #7]
 80114fe:	fb0a 0009 	mla	r0, sl, r9, r0
            sum1 += cols_8b[2]*ksrc[7];
 8011502:	f998 9002 	ldrsb.w	r9, [r8, #2]
 8011506:	fb09 cc0a 	mla	ip, r9, sl, ip
            sum0 += cols_8b[1]*ksrc[8];
 801150a:	f998 b001 	ldrsb.w	fp, [r8, #1]
 801150e:	f993 a008 	ldrsb.w	sl, [r3, #8]
 8011512:	fb0a 000b 	mla	r0, sl, fp, r0
            sum1 += cols_8b[3]*ksrc[8];
 8011516:	f998 b003 	ldrsb.w	fp, [r8, #3]
 801151a:	fb0b cc0a 	mla	ip, fp, sl, ip
            sum0 += cols_8b[2]*ksrc[9];
 801151e:	f993 a009 	ldrsb.w	sl, [r3, #9]
 8011522:	fb0a 0009 	mla	r0, sl, r9, r0
            sum1 += cols_8b[4]*ksrc[9];
 8011526:	f998 9004 	ldrsb.w	r9, [r8, #4]
 801152a:	fb09 cc0a 	mla	ip, r9, sl, ip
            sum0 += cols_8b[3]*ksrc[10];
 801152e:	f993 a00a 	ldrsb.w	sl, [r3, #10]
 8011532:	fb0a 000b 	mla	r0, sl, fp, r0
            sum1 += cols_8b[5]*ksrc[10];
 8011536:	f998 b005 	ldrsb.w	fp, [r8, #5]
 801153a:	fb0b cc0a 	mla	ip, fp, sl, ip
            sum0 += cols_8b[4]*ksrc[11];
 801153e:	f993 a00b 	ldrsb.w	sl, [r3, #11]
 8011542:	fb0a 0009 	mla	r0, sl, r9, r0
            sum1 += cols_8b[6]*ksrc[11];
 8011546:	f998 9006 	ldrsb.w	r9, [r8, #6]
 801154a:	fb09 cc0a 	mla	ip, r9, sl, ip
            sum0 += cols_8b[5]*ksrc[12];
 801154e:	f993 a00c 	ldrsb.w	sl, [r3, #12]
 8011552:	fb0a 000b 	mla	r0, sl, fp, r0
            sum1 += cols_8b[7]*ksrc[12];
 8011556:	f998 b007 	ldrsb.w	fp, [r8, #7]
 801155a:	fb0b cc0a 	mla	ip, fp, sl, ip
            sum0 += cols_8b[6]*ksrc[13];
 801155e:	f993 a00d 	ldrsb.w	sl, [r3, #13]
 8011562:	fb0a 0009 	mla	r0, sl, r9, r0
            sum1 += cols_8b[8]*ksrc[13];
 8011566:	f998 9008 	ldrsb.w	r9, [r8, #8]
 801156a:	fb09 cc0a 	mla	ip, r9, sl, ip
            cols_8b += column_x + 6;
 801156e:	eb08 0a07 	add.w	sl, r8, r7
            sum0 += cols_8b[0]*ksrc[14];
 8011572:	f918 9007 	ldrsb.w	r9, [r8, r7]
 8011576:	f993 800e 	ldrsb.w	r8, [r3, #14]
 801157a:	fb08 0009 	mla	r0, r8, r9, r0
            sum1 += cols_8b[2]*ksrc[14];
 801157e:	f99a b002 	ldrsb.w	fp, [sl, #2]
 8011582:	fb0b cc08 	mla	ip, fp, r8, ip
            sum0 += cols_8b[1]*ksrc[15];
 8011586:	f99a 8001 	ldrsb.w	r8, [sl, #1]
 801158a:	f993 900f 	ldrsb.w	r9, [r3, #15]
 801158e:	fb09 0008 	mla	r0, r9, r8, r0
            sum1 += cols_8b[3]*ksrc[15];
 8011592:	f99a 8003 	ldrsb.w	r8, [sl, #3]
 8011596:	fb08 cc09 	mla	ip, r8, r9, ip
            sum0 += cols_8b[2]*ksrc[16];
 801159a:	f993 9010 	ldrsb.w	r9, [r3, #16]
 801159e:	fb09 000b 	mla	r0, r9, fp, r0
            sum1 += cols_8b[4]*ksrc[16];
 80115a2:	f99a b004 	ldrsb.w	fp, [sl, #4]
 80115a6:	fb0b cc09 	mla	ip, fp, r9, ip
            sum0 += cols_8b[3]*ksrc[17];
 80115aa:	f993 9011 	ldrsb.w	r9, [r3, #17]
 80115ae:	fb09 0008 	mla	r0, r9, r8, r0
            sum1 += cols_8b[5]*ksrc[17];
 80115b2:	f99a 8005 	ldrsb.w	r8, [sl, #5]
 80115b6:	fb08 cc09 	mla	ip, r8, r9, ip
            sum0 += cols_8b[4]*ksrc[18];
 80115ba:	f993 9012 	ldrsb.w	r9, [r3, #18]
 80115be:	fb09 000b 	mla	r0, r9, fp, r0
            sum1 += cols_8b[6]*ksrc[18];
 80115c2:	f99a b006 	ldrsb.w	fp, [sl, #6]
 80115c6:	fb0b cc09 	mla	ip, fp, r9, ip
            sum0 += cols_8b[5]*ksrc[19];
 80115ca:	f993 9013 	ldrsb.w	r9, [r3, #19]
 80115ce:	fb09 0008 	mla	r0, r9, r8, r0
            sum1 += cols_8b[7]*ksrc[19];
 80115d2:	f99a 8007 	ldrsb.w	r8, [sl, #7]
 80115d6:	fb08 cc09 	mla	ip, r8, r9, ip
            sum0 += cols_8b[6]*ksrc[20];
 80115da:	f993 8014 	ldrsb.w	r8, [r3, #20]
 80115de:	fb08 000b 	mla	r0, r8, fp, r0
            sum1 += cols_8b[8]*ksrc[20];
 80115e2:	f99a 9008 	ldrsb.w	r9, [sl, #8]
 80115e6:	fb09 cc08 	mla	ip, r9, r8, ip
            cols_8b += column_x + 6;
 80115ea:	eb0a 0907 	add.w	r9, sl, r7
            sum0 += cols_8b[0]*ksrc[21];
 80115ee:	f91a a007 	ldrsb.w	sl, [sl, r7]
 80115f2:	f993 8015 	ldrsb.w	r8, [r3, #21]
 80115f6:	fb08 000a 	mla	r0, r8, sl, r0
            sum1 += cols_8b[2]*ksrc[21];
 80115fa:	f999 b002 	ldrsb.w	fp, [r9, #2]
 80115fe:	fb0b cc08 	mla	ip, fp, r8, ip
            sum0 += cols_8b[1]*ksrc[22];
 8011602:	f999 8001 	ldrsb.w	r8, [r9, #1]
 8011606:	f993 a016 	ldrsb.w	sl, [r3, #22]
 801160a:	fb0a 0008 	mla	r0, sl, r8, r0
            sum1 += cols_8b[3]*ksrc[22];
 801160e:	f999 8003 	ldrsb.w	r8, [r9, #3]
 8011612:	fb08 cc0a 	mla	ip, r8, sl, ip
            sum0 += cols_8b[2]*ksrc[23];
 8011616:	f993 a017 	ldrsb.w	sl, [r3, #23]
 801161a:	fb0a 000b 	mla	r0, sl, fp, r0
            sum1 += cols_8b[4]*ksrc[23];
 801161e:	f999 b004 	ldrsb.w	fp, [r9, #4]
 8011622:	fb0b cc0a 	mla	ip, fp, sl, ip
            sum0 += cols_8b[3]*ksrc[24];
 8011626:	f993 a018 	ldrsb.w	sl, [r3, #24]
 801162a:	fb0a 0008 	mla	r0, sl, r8, r0
            sum1 += cols_8b[5]*ksrc[24];
 801162e:	f999 8005 	ldrsb.w	r8, [r9, #5]
 8011632:	fb08 cc0a 	mla	ip, r8, sl, ip
            sum0 += cols_8b[4]*ksrc[25];
 8011636:	f993 a019 	ldrsb.w	sl, [r3, #25]
 801163a:	fb0a 000b 	mla	r0, sl, fp, r0
            sum1 += cols_8b[6]*ksrc[25];
 801163e:	f999 b006 	ldrsb.w	fp, [r9, #6]
 8011642:	fb0b cc0a 	mla	ip, fp, sl, ip
            sum0 += cols_8b[5]*ksrc[26];
 8011646:	f993 a01a 	ldrsb.w	sl, [r3, #26]
 801164a:	fb0a 0008 	mla	r0, sl, r8, r0
            sum1 += cols_8b[7]*ksrc[26];
 801164e:	f999 8007 	ldrsb.w	r8, [r9, #7]
 8011652:	fb08 cc0a 	mla	ip, r8, sl, ip
            sum0 += cols_8b[6]*ksrc[27];
 8011656:	f993 801b 	ldrsb.w	r8, [r3, #27]
 801165a:	fb08 000b 	mla	r0, r8, fp, r0
            sum1 += cols_8b[8]*ksrc[27];
 801165e:	f999 a008 	ldrsb.w	sl, [r9, #8]
 8011662:	fb0a cc08 	mla	ip, sl, r8, ip
            cols_8b += column_x + 6;
 8011666:	eb09 0807 	add.w	r8, r9, r7
            sum0 += cols_8b[0]*ksrc[28];
 801166a:	f919 a007 	ldrsb.w	sl, [r9, r7]
 801166e:	f993 901c 	ldrsb.w	r9, [r3, #28]
 8011672:	fb09 000a 	mla	r0, r9, sl, r0
            sum1 += cols_8b[2]*ksrc[28];
 8011676:	f998 b002 	ldrsb.w	fp, [r8, #2]
 801167a:	fb0b cc09 	mla	ip, fp, r9, ip
            sum0 += cols_8b[1]*ksrc[29];
 801167e:	f998 9001 	ldrsb.w	r9, [r8, #1]
 8011682:	f993 a01d 	ldrsb.w	sl, [r3, #29]
 8011686:	fb0a 0009 	mla	r0, sl, r9, r0
            sum1 += cols_8b[3]*ksrc[29];
 801168a:	f998 9003 	ldrsb.w	r9, [r8, #3]
 801168e:	fb09 cc0a 	mla	ip, r9, sl, ip
            sum0 += cols_8b[2]*ksrc[30];
 8011692:	f993 a01e 	ldrsb.w	sl, [r3, #30]
 8011696:	fb0a 000b 	mla	r0, sl, fp, r0
            sum1 += cols_8b[4]*ksrc[30];
 801169a:	f998 b004 	ldrsb.w	fp, [r8, #4]
 801169e:	fb0b cc0a 	mla	ip, fp, sl, ip
            sum0 += cols_8b[3]*ksrc[31];
 80116a2:	f993 a01f 	ldrsb.w	sl, [r3, #31]
 80116a6:	fb0a 0009 	mla	r0, sl, r9, r0
            sum1 += cols_8b[5]*ksrc[31];
 80116aa:	f998 9005 	ldrsb.w	r9, [r8, #5]
 80116ae:	fb09 cc0a 	mla	ip, r9, sl, ip
            sum0 += cols_8b[4]*ksrc[32];
 80116b2:	f993 a020 	ldrsb.w	sl, [r3, #32]
 80116b6:	fb0a 000b 	mla	r0, sl, fp, r0
            sum1 += cols_8b[6]*ksrc[32];
 80116ba:	f998 b006 	ldrsb.w	fp, [r8, #6]
 80116be:	fb0b cc0a 	mla	ip, fp, sl, ip
            sum0 += cols_8b[5]*ksrc[33];
 80116c2:	f993 a021 	ldrsb.w	sl, [r3, #33]	@ 0x21
 80116c6:	fb0a 0009 	mla	r0, sl, r9, r0
            sum1 += cols_8b[7]*ksrc[33];
 80116ca:	f998 9007 	ldrsb.w	r9, [r8, #7]
 80116ce:	fb09 cc0a 	mla	ip, r9, sl, ip
            sum0 += cols_8b[6]*ksrc[34];
 80116d2:	f993 9022 	ldrsb.w	r9, [r3, #34]	@ 0x22
 80116d6:	fb09 000b 	mla	r0, r9, fp, r0
            sum1 += cols_8b[8]*ksrc[34];
 80116da:	f998 a008 	ldrsb.w	sl, [r8, #8]
 80116de:	fb0a cc09 	mla	ip, sl, r9, ip
            cols_8b += column_x + 6;
 80116e2:	eb08 0907 	add.w	r9, r8, r7
            sum0 += cols_8b[0]*ksrc[35];
 80116e6:	f918 a007 	ldrsb.w	sl, [r8, r7]
 80116ea:	f993 8023 	ldrsb.w	r8, [r3, #35]	@ 0x23
 80116ee:	fb08 000a 	mla	r0, r8, sl, r0
            sum1 += cols_8b[2]*ksrc[35];
 80116f2:	f999 b002 	ldrsb.w	fp, [r9, #2]
 80116f6:	fb0b cc08 	mla	ip, fp, r8, ip
            sum0 += cols_8b[1]*ksrc[36];
 80116fa:	f999 8001 	ldrsb.w	r8, [r9, #1]
 80116fe:	f993 a024 	ldrsb.w	sl, [r3, #36]	@ 0x24
 8011702:	fb0a 0008 	mla	r0, sl, r8, r0
            sum1 += cols_8b[3]*ksrc[36];
 8011706:	f999 8003 	ldrsb.w	r8, [r9, #3]
 801170a:	fb08 cc0a 	mla	ip, r8, sl, ip
            sum0 += cols_8b[2]*ksrc[37];
 801170e:	f993 a025 	ldrsb.w	sl, [r3, #37]	@ 0x25
 8011712:	fb0a 000b 	mla	r0, sl, fp, r0
            sum1 += cols_8b[4]*ksrc[37];
 8011716:	f999 b004 	ldrsb.w	fp, [r9, #4]
 801171a:	fb0b cc0a 	mla	ip, fp, sl, ip
            sum0 += cols_8b[3]*ksrc[38];
 801171e:	f993 a026 	ldrsb.w	sl, [r3, #38]	@ 0x26
 8011722:	fb0a 0008 	mla	r0, sl, r8, r0
            sum1 += cols_8b[5]*ksrc[38];
 8011726:	f999 8005 	ldrsb.w	r8, [r9, #5]
 801172a:	fb08 cc0a 	mla	ip, r8, sl, ip
            sum0 += cols_8b[4]*ksrc[39];
 801172e:	f993 a027 	ldrsb.w	sl, [r3, #39]	@ 0x27
 8011732:	fb0a 000b 	mla	r0, sl, fp, r0
            sum1 += cols_8b[6]*ksrc[39];
 8011736:	f999 b006 	ldrsb.w	fp, [r9, #6]
 801173a:	fb0b cc0a 	mla	ip, fp, sl, ip
            sum0 += cols_8b[5]*ksrc[40];
 801173e:	f993 a028 	ldrsb.w	sl, [r3, #40]	@ 0x28
 8011742:	fb0a 0008 	mla	r0, sl, r8, r0
            sum1 += cols_8b[7]*ksrc[40];
 8011746:	f999 8007 	ldrsb.w	r8, [r9, #7]
 801174a:	fb08 c80a 	mla	r8, r8, sl, ip
            sum0 += cols_8b[6]*ksrc[41];
 801174e:	f993 c029 	ldrsb.w	ip, [r3, #41]	@ 0x29
 8011752:	fb0c 000b 	mla	r0, ip, fp, r0
            sum1 += cols_8b[8]*ksrc[41];
 8011756:	f999 a008 	ldrsb.w	sl, [r9, #8]
 801175a:	fb0a 880c 	mla	r8, sl, ip, r8
            cols_8b += column_x + 6;
 801175e:	eb09 0c07 	add.w	ip, r9, r7
            sum0 += cols_8b[0]*ksrc[42];
 8011762:	f919 7007 	ldrsb.w	r7, [r9, r7]
 8011766:	f993 a02a 	ldrsb.w	sl, [r3, #42]	@ 0x2a
 801176a:	fb0a 0707 	mla	r7, sl, r7, r0
            sum1 += cols_8b[2]*ksrc[42];
 801176e:	f99c 9002 	ldrsb.w	r9, [ip, #2]
 8011772:	fb09 800a 	mla	r0, r9, sl, r8
            sum0 += cols_8b[1]*ksrc[43];
 8011776:	f99c 8001 	ldrsb.w	r8, [ip, #1]
 801177a:	f993 a02b 	ldrsb.w	sl, [r3, #43]	@ 0x2b
 801177e:	fb0a 7708 	mla	r7, sl, r8, r7
            sum1 += cols_8b[3]*ksrc[43];
 8011782:	f99c 8003 	ldrsb.w	r8, [ip, #3]
 8011786:	fb08 000a 	mla	r0, r8, sl, r0
            sum0 += cols_8b[2]*ksrc[44];
 801178a:	f993 a02c 	ldrsb.w	sl, [r3, #44]	@ 0x2c
 801178e:	fb0a 7709 	mla	r7, sl, r9, r7
            sum1 += cols_8b[4]*ksrc[44];
 8011792:	f99c 9004 	ldrsb.w	r9, [ip, #4]
 8011796:	fb09 000a 	mla	r0, r9, sl, r0
            sum0 += cols_8b[3]*ksrc[45];
 801179a:	f993 a02d 	ldrsb.w	sl, [r3, #45]	@ 0x2d
 801179e:	fb0a 7708 	mla	r7, sl, r8, r7
            sum1 += cols_8b[5]*ksrc[45];
 80117a2:	f99c 8005 	ldrsb.w	r8, [ip, #5]
 80117a6:	fb08 000a 	mla	r0, r8, sl, r0
            sum0 += cols_8b[4]*ksrc[46];
 80117aa:	f993 a02e 	ldrsb.w	sl, [r3, #46]	@ 0x2e
 80117ae:	fb0a 7709 	mla	r7, sl, r9, r7
            sum1 += cols_8b[6]*ksrc[46];
 80117b2:	f99c 9006 	ldrsb.w	r9, [ip, #6]
 80117b6:	fb09 000a 	mla	r0, r9, sl, r0
            sum0 += cols_8b[5]*ksrc[47];
 80117ba:	f993 a02f 	ldrsb.w	sl, [r3, #47]	@ 0x2f
 80117be:	fb0a 7708 	mla	r7, sl, r8, r7
            sum1 += cols_8b[7]*ksrc[47];
 80117c2:	f99c 8007 	ldrsb.w	r8, [ip, #7]
 80117c6:	fb08 000a 	mla	r0, r8, sl, r0
            sum0 += cols_8b[6]*ksrc[48];
 80117ca:	f993 8030 	ldrsb.w	r8, [r3, #48]	@ 0x30
 80117ce:	fb08 7709 	mla	r7, r8, r9, r7
            sum1 += cols_8b[8]*ksrc[48];
 80117d2:	f99c c008 	ldrsb.w	ip, [ip, #8]
 80117d6:	fb0c 0008 	mla	r0, ip, r8, r0

            /* requantize */
            sum0 = (float) sum0 * *scales;
 80117da:	ee07 7a90 	vmov	s15, r7
 80117de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80117e2:	ed94 7a00 	vldr	s14, [r4]
 80117e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80117ea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80117ee:	ee17 7a90 	vmov	r7, s15
            sum0 += output_offset;
 80117f2:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 80117f4:	442f      	add	r7, r5
            sum0 = TN_MAX(sum0, activation_min);
 80117f6:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 80117f8:	42af      	cmp	r7, r5
 80117fa:	bfb8      	it	lt
 80117fc:	462f      	movlt	r7, r5
            sum0 = TN_MIN(sum0, activation_max);
 80117fe:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 8011800:	42af      	cmp	r7, r5
 8011802:	bfa8      	it	ge
 8011804:	462f      	movge	r7, r5
            output[(i * output_x + j * 2) * channel_offset] = sum0;
 8011806:	9d00      	ldr	r5, [sp, #0]
 8011808:	fb05 fc01 	mul.w	ip, r5, r1
 801180c:	ea4f 0846 	mov.w	r8, r6, lsl #1
 8011810:	eb0c 0946 	add.w	r9, ip, r6, lsl #1
 8011814:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 8011816:	fb05 f909 	mul.w	r9, r5, r9
 801181a:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 801181c:	f805 7009 	strb.w	r7, [r5, r9]

            sum1 = (float) sum1 * *scales;
 8011820:	ee07 0a90 	vmov	s15, r0
 8011824:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011828:	ed94 7a00 	vldr	s14, [r4]
 801182c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011830:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011834:	ee17 0a90 	vmov	r0, s15
            sum1 += output_offset;
 8011838:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 801183a:	4428      	add	r0, r5
            sum1 = TN_MAX(sum1, activation_min);
 801183c:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 801183e:	42a8      	cmp	r0, r5
 8011840:	bfb8      	it	lt
 8011842:	4628      	movlt	r0, r5
            sum1 = TN_MIN(sum1, activation_max);
 8011844:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 8011846:	42a8      	cmp	r0, r5
 8011848:	bfa8      	it	ge
 801184a:	4628      	movge	r0, r5
            output[(i * output_x + (j * 2 + 1)) * channel_offset] = sum1;
 801184c:	f108 0801 	add.w	r8, r8, #1
 8011850:	44c4      	add	ip, r8
 8011852:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 8011854:	fb05 fc0c 	mul.w	ip, r5, ip
 8011858:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 801185a:	f805 000c 	strb.w	r0, [r5, ip]

            cols_8b_iterptr += STRIDE * 2;
 801185e:	3204      	adds	r2, #4
        for (j = 0; j < output_x / 2; j++) {
 8011860:	3601      	adds	r6, #1
 8011862:	ebb6 0f51 	cmp.w	r6, r1, lsr #1
 8011866:	f6ff ae01 	blt.w	801146c <depthwise_kernel7x7_stride2_inplace_kernel_CHW_fpreq+0x22>
        }
        if (output_x & 1) {
 801186a:	9d01      	ldr	r5, [sp, #4]
 801186c:	f011 0f01 	tst.w	r1, #1
 8011870:	f000 8155 	beq.w	8011b1e <depthwise_kernel7x7_stride2_inplace_kernel_CHW_fpreq+0x6d4>
            q7_t * cols_8b = cols_8b_iterptr;
            q31_t sum = bias[0] + biasR[0];
 8011874:	f8de 0000 	ldr.w	r0, [lr]
 8011878:	682e      	ldr	r6, [r5, #0]
 801187a:	4430      	add	r0, r6
            sum += cols_8b[0]*ksrc[0];
 801187c:	f992 6000 	ldrsb.w	r6, [r2]
 8011880:	f993 7000 	ldrsb.w	r7, [r3]
 8011884:	fb07 0006 	mla	r0, r7, r6, r0
            sum += cols_8b[1]*ksrc[1];
 8011888:	f992 6001 	ldrsb.w	r6, [r2, #1]
 801188c:	f993 7001 	ldrsb.w	r7, [r3, #1]
 8011890:	fb07 0006 	mla	r0, r7, r6, r0
            sum += cols_8b[2]*ksrc[2];
 8011894:	f992 6002 	ldrsb.w	r6, [r2, #2]
 8011898:	f993 7002 	ldrsb.w	r7, [r3, #2]
 801189c:	fb07 0006 	mla	r0, r7, r6, r0
            sum += cols_8b[3]*ksrc[3];
 80118a0:	f992 6003 	ldrsb.w	r6, [r2, #3]
 80118a4:	f993 7003 	ldrsb.w	r7, [r3, #3]
 80118a8:	fb07 0006 	mla	r0, r7, r6, r0
            sum += cols_8b[4]*ksrc[4];
 80118ac:	f992 6004 	ldrsb.w	r6, [r2, #4]
 80118b0:	f993 7004 	ldrsb.w	r7, [r3, #4]
 80118b4:	fb07 0006 	mla	r0, r7, r6, r0
            sum += cols_8b[5]*ksrc[5];
 80118b8:	f992 6005 	ldrsb.w	r6, [r2, #5]
 80118bc:	f993 7005 	ldrsb.w	r7, [r3, #5]
 80118c0:	fb07 0006 	mla	r0, r7, r6, r0
            sum += cols_8b[6]*ksrc[6];
 80118c4:	f992 6006 	ldrsb.w	r6, [r2, #6]
 80118c8:	f993 7006 	ldrsb.w	r7, [r3, #6]
 80118cc:	fb07 0006 	mla	r0, r7, r6, r0
            cols_8b += column_x + 6;
 80118d0:	9e02      	ldr	r6, [sp, #8]
 80118d2:	3606      	adds	r6, #6
 80118d4:	1997      	adds	r7, r2, r6
            sum += cols_8b[0]*ksrc[7];
 80118d6:	f912 c006 	ldrsb.w	ip, [r2, r6]
 80118da:	f993 8007 	ldrsb.w	r8, [r3, #7]
 80118de:	fb08 000c 	mla	r0, r8, ip, r0
            sum += cols_8b[1]*ksrc[8];
 80118e2:	f997 c001 	ldrsb.w	ip, [r7, #1]
 80118e6:	f993 8008 	ldrsb.w	r8, [r3, #8]
 80118ea:	fb08 000c 	mla	r0, r8, ip, r0
            sum += cols_8b[2]*ksrc[9];
 80118ee:	f997 c002 	ldrsb.w	ip, [r7, #2]
 80118f2:	f993 8009 	ldrsb.w	r8, [r3, #9]
 80118f6:	fb08 000c 	mla	r0, r8, ip, r0
            sum += cols_8b[3]*ksrc[10];
 80118fa:	f997 c003 	ldrsb.w	ip, [r7, #3]
 80118fe:	f993 800a 	ldrsb.w	r8, [r3, #10]
 8011902:	fb08 000c 	mla	r0, r8, ip, r0
            sum += cols_8b[4]*ksrc[11];
 8011906:	f997 c004 	ldrsb.w	ip, [r7, #4]
 801190a:	f993 800b 	ldrsb.w	r8, [r3, #11]
 801190e:	fb08 000c 	mla	r0, r8, ip, r0
            sum += cols_8b[5]*ksrc[12];
 8011912:	f997 c005 	ldrsb.w	ip, [r7, #5]
 8011916:	f993 800c 	ldrsb.w	r8, [r3, #12]
 801191a:	fb08 000c 	mla	r0, r8, ip, r0
            sum += cols_8b[6]*ksrc[13];
 801191e:	f997 c006 	ldrsb.w	ip, [r7, #6]
 8011922:	f993 800d 	ldrsb.w	r8, [r3, #13]
 8011926:	fb08 000c 	mla	r0, r8, ip, r0
            cols_8b += column_x + 6;
 801192a:	eb07 0c06 	add.w	ip, r7, r6
            sum += cols_8b[0]*ksrc[14];
 801192e:	57bf      	ldrsb	r7, [r7, r6]
 8011930:	f993 800e 	ldrsb.w	r8, [r3, #14]
 8011934:	fb08 0007 	mla	r0, r8, r7, r0
            sum += cols_8b[1]*ksrc[15];
 8011938:	f99c 7001 	ldrsb.w	r7, [ip, #1]
 801193c:	f993 800f 	ldrsb.w	r8, [r3, #15]
 8011940:	fb08 0007 	mla	r0, r8, r7, r0
            sum += cols_8b[2]*ksrc[16];
 8011944:	f99c 7002 	ldrsb.w	r7, [ip, #2]
 8011948:	f993 8010 	ldrsb.w	r8, [r3, #16]
 801194c:	fb08 0007 	mla	r0, r8, r7, r0
            sum += cols_8b[3]*ksrc[17];
 8011950:	f99c 7003 	ldrsb.w	r7, [ip, #3]
 8011954:	f993 8011 	ldrsb.w	r8, [r3, #17]
 8011958:	fb08 0007 	mla	r0, r8, r7, r0
            sum += cols_8b[4]*ksrc[18];
 801195c:	f99c 7004 	ldrsb.w	r7, [ip, #4]
 8011960:	f993 8012 	ldrsb.w	r8, [r3, #18]
 8011964:	fb08 0007 	mla	r0, r8, r7, r0
            sum += cols_8b[5]*ksrc[19];
 8011968:	f99c 7005 	ldrsb.w	r7, [ip, #5]
 801196c:	f993 8013 	ldrsb.w	r8, [r3, #19]
 8011970:	fb08 0007 	mla	r0, r8, r7, r0
            sum += cols_8b[6]*ksrc[20];
 8011974:	f99c 7006 	ldrsb.w	r7, [ip, #6]
 8011978:	f993 8014 	ldrsb.w	r8, [r3, #20]
 801197c:	fb08 0007 	mla	r0, r8, r7, r0
            cols_8b += column_x + 6;
 8011980:	eb0c 0706 	add.w	r7, ip, r6
            sum += cols_8b[0]*ksrc[21];
 8011984:	f91c c006 	ldrsb.w	ip, [ip, r6]
 8011988:	f993 8015 	ldrsb.w	r8, [r3, #21]
 801198c:	fb08 000c 	mla	r0, r8, ip, r0
            sum += cols_8b[1]*ksrc[22];
 8011990:	f997 c001 	ldrsb.w	ip, [r7, #1]
 8011994:	f993 8016 	ldrsb.w	r8, [r3, #22]
 8011998:	fb08 000c 	mla	r0, r8, ip, r0
            sum += cols_8b[2]*ksrc[23];
 801199c:	f997 c002 	ldrsb.w	ip, [r7, #2]
 80119a0:	f993 8017 	ldrsb.w	r8, [r3, #23]
 80119a4:	fb08 000c 	mla	r0, r8, ip, r0
            sum += cols_8b[3]*ksrc[24];
 80119a8:	f997 c003 	ldrsb.w	ip, [r7, #3]
 80119ac:	f993 8018 	ldrsb.w	r8, [r3, #24]
 80119b0:	fb08 000c 	mla	r0, r8, ip, r0
            sum += cols_8b[4]*ksrc[25];
 80119b4:	f997 c004 	ldrsb.w	ip, [r7, #4]
 80119b8:	f993 8019 	ldrsb.w	r8, [r3, #25]
 80119bc:	fb08 000c 	mla	r0, r8, ip, r0
            sum += cols_8b[5]*ksrc[26];
 80119c0:	f997 c005 	ldrsb.w	ip, [r7, #5]
 80119c4:	f993 801a 	ldrsb.w	r8, [r3, #26]
 80119c8:	fb08 000c 	mla	r0, r8, ip, r0
            sum += cols_8b[6]*ksrc[27];
 80119cc:	f997 c006 	ldrsb.w	ip, [r7, #6]
 80119d0:	f993 801b 	ldrsb.w	r8, [r3, #27]
 80119d4:	fb08 000c 	mla	r0, r8, ip, r0
            cols_8b += column_x + 6;
 80119d8:	eb07 0806 	add.w	r8, r7, r6
            sum += cols_8b[0]*ksrc[28];
 80119dc:	f917 c006 	ldrsb.w	ip, [r7, r6]
 80119e0:	f993 701c 	ldrsb.w	r7, [r3, #28]
 80119e4:	fb07 0c0c 	mla	ip, r7, ip, r0
            sum += cols_8b[1]*ksrc[29];
 80119e8:	f998 0001 	ldrsb.w	r0, [r8, #1]
 80119ec:	f993 701d 	ldrsb.w	r7, [r3, #29]
 80119f0:	fb07 cc00 	mla	ip, r7, r0, ip
            sum += cols_8b[2]*ksrc[30];
 80119f4:	f998 0002 	ldrsb.w	r0, [r8, #2]
 80119f8:	f993 701e 	ldrsb.w	r7, [r3, #30]
 80119fc:	fb07 cc00 	mla	ip, r7, r0, ip
            sum += cols_8b[3]*ksrc[31];
 8011a00:	f998 0003 	ldrsb.w	r0, [r8, #3]
 8011a04:	f993 701f 	ldrsb.w	r7, [r3, #31]
 8011a08:	fb07 cc00 	mla	ip, r7, r0, ip
            sum += cols_8b[4]*ksrc[32];
 8011a0c:	f998 0004 	ldrsb.w	r0, [r8, #4]
 8011a10:	f993 7020 	ldrsb.w	r7, [r3, #32]
 8011a14:	fb07 cc00 	mla	ip, r7, r0, ip
            sum += cols_8b[5]*ksrc[33];
 8011a18:	f998 0005 	ldrsb.w	r0, [r8, #5]
 8011a1c:	f993 7021 	ldrsb.w	r7, [r3, #33]	@ 0x21
 8011a20:	fb07 cc00 	mla	ip, r7, r0, ip
            sum += cols_8b[6]*ksrc[34];
 8011a24:	f998 0006 	ldrsb.w	r0, [r8, #6]
 8011a28:	f993 7022 	ldrsb.w	r7, [r3, #34]	@ 0x22
 8011a2c:	fb07 cc00 	mla	ip, r7, r0, ip
            cols_8b += column_x + 6;
 8011a30:	eb08 0706 	add.w	r7, r8, r6
            sum += cols_8b[0]*ksrc[35];
 8011a34:	f918 0006 	ldrsb.w	r0, [r8, r6]
 8011a38:	f993 8023 	ldrsb.w	r8, [r3, #35]	@ 0x23
 8011a3c:	fb08 c000 	mla	r0, r8, r0, ip
            sum += cols_8b[1]*ksrc[36];
 8011a40:	f997 c001 	ldrsb.w	ip, [r7, #1]
 8011a44:	f993 8024 	ldrsb.w	r8, [r3, #36]	@ 0x24
 8011a48:	fb08 000c 	mla	r0, r8, ip, r0
            sum += cols_8b[2]*ksrc[37];
 8011a4c:	f997 c002 	ldrsb.w	ip, [r7, #2]
 8011a50:	f993 8025 	ldrsb.w	r8, [r3, #37]	@ 0x25
 8011a54:	fb08 000c 	mla	r0, r8, ip, r0
            sum += cols_8b[3]*ksrc[38];
 8011a58:	f997 c003 	ldrsb.w	ip, [r7, #3]
 8011a5c:	f993 8026 	ldrsb.w	r8, [r3, #38]	@ 0x26
 8011a60:	fb08 000c 	mla	r0, r8, ip, r0
            sum += cols_8b[4]*ksrc[39];
 8011a64:	f997 c004 	ldrsb.w	ip, [r7, #4]
 8011a68:	f993 8027 	ldrsb.w	r8, [r3, #39]	@ 0x27
 8011a6c:	fb08 000c 	mla	r0, r8, ip, r0
            sum += cols_8b[5]*ksrc[40];
 8011a70:	f997 c005 	ldrsb.w	ip, [r7, #5]
 8011a74:	f993 8028 	ldrsb.w	r8, [r3, #40]	@ 0x28
 8011a78:	fb08 000c 	mla	r0, r8, ip, r0
            sum += cols_8b[6]*ksrc[41];
 8011a7c:	f997 c006 	ldrsb.w	ip, [r7, #6]
 8011a80:	f993 8029 	ldrsb.w	r8, [r3, #41]	@ 0x29
 8011a84:	fb08 080c 	mla	r8, r8, ip, r0
            cols_8b += column_x + 6;
 8011a88:	eb07 0c06 	add.w	ip, r7, r6
            sum += cols_8b[0]*ksrc[42];
 8011a8c:	57b8      	ldrsb	r0, [r7, r6]
 8011a8e:	f993 602a 	ldrsb.w	r6, [r3, #42]	@ 0x2a
 8011a92:	fb06 8000 	mla	r0, r6, r0, r8
            sum += cols_8b[1]*ksrc[43];
 8011a96:	f99c 6001 	ldrsb.w	r6, [ip, #1]
 8011a9a:	f993 702b 	ldrsb.w	r7, [r3, #43]	@ 0x2b
 8011a9e:	fb07 0006 	mla	r0, r7, r6, r0
            sum += cols_8b[2]*ksrc[44];
 8011aa2:	f99c 6002 	ldrsb.w	r6, [ip, #2]
 8011aa6:	f993 702c 	ldrsb.w	r7, [r3, #44]	@ 0x2c
 8011aaa:	fb07 0006 	mla	r0, r7, r6, r0
            sum += cols_8b[3]*ksrc[45];
 8011aae:	f99c 6003 	ldrsb.w	r6, [ip, #3]
 8011ab2:	f993 702d 	ldrsb.w	r7, [r3, #45]	@ 0x2d
 8011ab6:	fb07 0006 	mla	r0, r7, r6, r0
            sum += cols_8b[4]*ksrc[46];
 8011aba:	f99c 6004 	ldrsb.w	r6, [ip, #4]
 8011abe:	f993 702e 	ldrsb.w	r7, [r3, #46]	@ 0x2e
 8011ac2:	fb07 0006 	mla	r0, r7, r6, r0
            sum += cols_8b[5]*ksrc[47];
 8011ac6:	f99c 6005 	ldrsb.w	r6, [ip, #5]
 8011aca:	f993 702f 	ldrsb.w	r7, [r3, #47]	@ 0x2f
 8011ace:	fb07 0006 	mla	r0, r7, r6, r0
            sum += cols_8b[6]*ksrc[48];
 8011ad2:	f99c 6006 	ldrsb.w	r6, [ip, #6]
 8011ad6:	f993 7030 	ldrsb.w	r7, [r3, #48]	@ 0x30
 8011ada:	fb07 0006 	mla	r0, r7, r6, r0

            sum = (float) sum * *scales;
 8011ade:	ee07 0a90 	vmov	s15, r0
 8011ae2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011ae6:	ed94 7a00 	vldr	s14, [r4]
 8011aea:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011aee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011af2:	ee17 0a90 	vmov	r0, s15
            sum += output_offset;
 8011af6:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8011af8:	4430      	add	r0, r6
            sum = TN_MAX(sum, activation_min);
 8011afa:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 8011afc:	42b0      	cmp	r0, r6
 8011afe:	bfb8      	it	lt
 8011b00:	4630      	movlt	r0, r6
            sum = TN_MIN(sum, activation_max);
 8011b02:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8011b04:	42b0      	cmp	r0, r6
 8011b06:	bfa8      	it	ge
 8011b08:	4630      	movge	r0, r6
            output[(i * output_x + output_x - 1) * channel_offset] = sum;
 8011b0a:	9e00      	ldr	r6, [sp, #0]
 8011b0c:	fb06 1601 	mla	r6, r6, r1, r1
 8011b10:	3e01      	subs	r6, #1
 8011b12:	9f16      	ldr	r7, [sp, #88]	@ 0x58
 8011b14:	fb07 f606 	mul.w	r6, r7, r6
 8011b18:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8011b1a:	55b8      	strb	r0, [r7, r6]

            cols_8b_iterptr += STRIDE;
 8011b1c:	3202      	adds	r2, #2
        }
        cols_8b_iterptr += 3 * 2 - (column_x & 1);
 8011b1e:	9e02      	ldr	r6, [sp, #8]
 8011b20:	f006 0001 	and.w	r0, r6, #1
 8011b24:	f1c0 0006 	rsb	r0, r0, #6
        cols_8b_iterptr += (STRIDE - 1) * (column_x + 3 * 2);
 8011b28:	3606      	adds	r6, #6
 8011b2a:	4430      	add	r0, r6
 8011b2c:	4402      	add	r2, r0
    for (i = 0; i < output_y; i++) {
 8011b2e:	9800      	ldr	r0, [sp, #0]
 8011b30:	3001      	adds	r0, #1
 8011b32:	9000      	str	r0, [sp, #0]
 8011b34:	9803      	ldr	r0, [sp, #12]
 8011b36:	9e00      	ldr	r6, [sp, #0]
 8011b38:	42b0      	cmp	r0, r6
 8011b3a:	dd02      	ble.n	8011b42 <depthwise_kernel7x7_stride2_inplace_kernel_CHW_fpreq+0x6f8>
        for (j = 0; j < output_x / 2; j++) {
 8011b3c:	2600      	movs	r6, #0
 8011b3e:	9501      	str	r5, [sp, #4]
 8011b40:	e68f      	b.n	8011862 <depthwise_kernel7x7_stride2_inplace_kernel_CHW_fpreq+0x418>
    }
}
 8011b42:	b005      	add	sp, #20
 8011b44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011b48 <depthwise_kernel7x7_stride2_inplace_CHW_fpreq>:
{
 8011b48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b4c:	b08f      	sub	sp, #60	@ 0x3c
 8011b4e:	4680      	mov	r8, r0
 8011b50:	460c      	mov	r4, r1
 8011b52:	4616      	mov	r6, r2
 8011b54:	461d      	mov	r5, r3
 8011b56:	f8dd a060 	ldr.w	sl, [sp, #96]	@ 0x60
 8011b5a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8011b5c:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8011b5e:	f8dd e06c 	ldr.w	lr, [sp, #108]	@ 0x6c
 8011b62:	f8bd 1084 	ldrh.w	r1, [sp, #132]	@ 0x84
 8011b66:	910c      	str	r1, [sp, #48]	@ 0x30
 8011b68:	f8bd 1088 	ldrh.w	r1, [sp, #136]	@ 0x88
 8011b6c:	910d      	str	r1, [sp, #52]	@ 0x34
 8011b6e:	f8dd b090 	ldr.w	fp, [sp, #144]	@ 0x90
 8011b72:	f99d 0094 	ldrsb.w	r0, [sp, #148]	@ 0x94
    q7_t* cols_8b = (q7_t* )cols_8b_start;
 8011b76:	4659      	mov	r1, fp
    for(i = 0; i < input_x + 6; i++){
 8011b78:	2700      	movs	r7, #0
 8011b7a:	e005      	b.n	8011b88 <depthwise_kernel7x7_stride2_inplace_CHW_fpreq+0x40>
        *cols_8b++ = PAD8;
 8011b7c:	7008      	strb	r0, [r1, #0]
        *cols_8b++ = PAD8;
 8011b7e:	7048      	strb	r0, [r1, #1]
        *cols_8b++ = PAD8;
 8011b80:	7088      	strb	r0, [r1, #2]
    for(i = 0; i < input_x + 6; i++){
 8011b82:	3701      	adds	r7, #1
 8011b84:	b2bf      	uxth	r7, r7
        *cols_8b++ = PAD8;
 8011b86:	3103      	adds	r1, #3
    for(i = 0; i < input_x + 6; i++){
 8011b88:	f104 0905 	add.w	r9, r4, #5
 8011b8c:	45b9      	cmp	r9, r7
 8011b8e:	daf5      	bge.n	8011b7c <depthwise_kernel7x7_stride2_inplace_CHW_fpreq+0x34>
    for(i = 0; i < input_y; i++){
 8011b90:	2700      	movs	r7, #0
 8011b92:	f8cd 9028 	str.w	r9, [sp, #40]	@ 0x28
 8011b96:	e010      	b.n	8011bba <depthwise_kernel7x7_stride2_inplace_CHW_fpreq+0x72>
        *cols_8b++ = PAD8;//left
 8011b98:	7008      	strb	r0, [r1, #0]
        *cols_8b++ = PAD8;//left
 8011b9a:	7048      	strb	r0, [r1, #1]
        *cols_8b++ = PAD8;//left
 8011b9c:	7088      	strb	r0, [r1, #2]
        cols_8b += input_x; //skip middle
 8011b9e:	f104 0903 	add.w	r9, r4, #3
 8011ba2:	eb01 0c09 	add.w	ip, r1, r9
        *cols_8b++ = PAD8;//right
 8011ba6:	f801 0009 	strb.w	r0, [r1, r9]
        *cols_8b++ = PAD8;//right
 8011baa:	f88c 0001 	strb.w	r0, [ip, #1]
        *cols_8b++ = PAD8;//right
 8011bae:	f10c 0103 	add.w	r1, ip, #3
 8011bb2:	f88c 0002 	strb.w	r0, [ip, #2]
    for(i = 0; i < input_y; i++){
 8011bb6:	3701      	adds	r7, #1
 8011bb8:	b2bf      	uxth	r7, r7
 8011bba:	42b7      	cmp	r7, r6
 8011bbc:	d3ec      	bcc.n	8011b98 <depthwise_kernel7x7_stride2_inplace_CHW_fpreq+0x50>
    for(i = 0; i < input_x + 6; i++){
 8011bbe:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8011bc2:	2700      	movs	r7, #0
 8011bc4:	e005      	b.n	8011bd2 <depthwise_kernel7x7_stride2_inplace_CHW_fpreq+0x8a>
        *cols_8b++ = PAD8;
 8011bc6:	7008      	strb	r0, [r1, #0]
        *cols_8b++ = PAD8;
 8011bc8:	7048      	strb	r0, [r1, #1]
        *cols_8b++ = PAD8;
 8011bca:	7088      	strb	r0, [r1, #2]
    for(i = 0; i < input_x + 6; i++){
 8011bcc:	3701      	adds	r7, #1
 8011bce:	b2bf      	uxth	r7, r7
        *cols_8b++ = PAD8;
 8011bd0:	3103      	adds	r1, #3
    for(i = 0; i < input_x + 6; i++){
 8011bd2:	45b9      	cmp	r9, r7
 8011bd4:	daf7      	bge.n	8011bc6 <depthwise_kernel7x7_stride2_inplace_CHW_fpreq+0x7e>
    for (c = 0; c < input_ch; c++){
 8011bd6:	2700      	movs	r7, #0
 8011bd8:	4670      	mov	r0, lr
 8011bda:	e035      	b.n	8011c48 <depthwise_kernel7x7_stride2_inplace_CHW_fpreq+0x100>
                *cols_8b++ = *src;// + input_offset;
 8011bdc:	f99c e000 	ldrsb.w	lr, [ip]
 8011be0:	f801 eb01 	strb.w	lr, [r1], #1
                src += input_ch;
 8011be4:	44ac      	add	ip, r5
            for(j = 0; j < input_x; j++){
 8011be6:	3701      	adds	r7, #1
 8011be8:	b2bf      	uxth	r7, r7
 8011bea:	42a7      	cmp	r7, r4
 8011bec:	d3f6      	bcc.n	8011bdc <depthwise_kernel7x7_stride2_inplace_CHW_fpreq+0x94>
            cols_8b += 3;//skip end
 8011bee:	3103      	adds	r1, #3
        for(i = 0; i < input_y; i++){
 8011bf0:	f109 0901 	add.w	r9, r9, #1
 8011bf4:	fa1f f989 	uxth.w	r9, r9
 8011bf8:	45b1      	cmp	r9, r6
 8011bfa:	d202      	bcs.n	8011c02 <depthwise_kernel7x7_stride2_inplace_CHW_fpreq+0xba>
            cols_8b += 3;//skip front
 8011bfc:	3103      	adds	r1, #3
            for(j = 0; j < input_x; j++){
 8011bfe:	2700      	movs	r7, #0
 8011c00:	e7f3      	b.n	8011bea <depthwise_kernel7x7_stride2_inplace_CHW_fpreq+0xa2>
        depthwise_kernel7x7_stride2_inplace_kernel_CHW_fpreq(output_y, output_x, bias++, biasR++, ksrc, scales++, inplace_out, output_offset,output_activation_min, output_activation_max,cols_8b_start, input_x, input_ch);
 8011c02:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 8011c04:	1d11      	adds	r1, r2, #4
 8011c06:	910a      	str	r1, [sp, #40]	@ 0x28
 8011c08:	f103 0904 	add.w	r9, r3, #4
 8011c0c:	1d01      	adds	r1, r0, #4
 8011c0e:	910b      	str	r1, [sp, #44]	@ 0x2c
 8011c10:	9508      	str	r5, [sp, #32]
 8011c12:	9407      	str	r4, [sp, #28]
 8011c14:	f8cd b018 	str.w	fp, [sp, #24]
 8011c18:	991f      	ldr	r1, [sp, #124]	@ 0x7c
 8011c1a:	9105      	str	r1, [sp, #20]
 8011c1c:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8011c1e:	9104      	str	r1, [sp, #16]
 8011c20:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8011c22:	9103      	str	r1, [sp, #12]
 8011c24:	f8cd 8008 	str.w	r8, [sp, #8]
 8011c28:	9001      	str	r0, [sp, #4]
 8011c2a:	f8cd a000 	str.w	sl, [sp]
 8011c2e:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8011c30:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8011c32:	f7ff fc0a 	bl	801144a <depthwise_kernel7x7_stride2_inplace_kernel_CHW_fpreq>
        ksrc += 49;
 8011c36:	f10a 0a31 	add.w	sl, sl, #49	@ 0x31
        input++;
 8011c3a:	f108 0801 	add.w	r8, r8, #1
    for (c = 0; c < input_ch; c++){
 8011c3e:	3701      	adds	r7, #1
 8011c40:	b2bf      	uxth	r7, r7
        depthwise_kernel7x7_stride2_inplace_kernel_CHW_fpreq(output_y, output_x, bias++, biasR++, ksrc, scales++, inplace_out, output_offset,output_activation_min, output_activation_max,cols_8b_start, input_x, input_ch);
 8011c42:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8011c44:	464b      	mov	r3, r9
 8011c46:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
    for (c = 0; c < input_ch; c++){
 8011c48:	42af      	cmp	r7, r5
 8011c4a:	d208      	bcs.n	8011c5e <depthwise_kernel7x7_stride2_inplace_CHW_fpreq+0x116>
        cols_8b = (q7_t*)(cols_8b_start + 3 * (input_x) + 18); //skip 3 rows
 8011c4c:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 8011c50:	3112      	adds	r1, #18
 8011c52:	4459      	add	r1, fp
        src = input;
 8011c54:	46c4      	mov	ip, r8
        for(i = 0; i < input_y; i++){
 8011c56:	f04f 0900 	mov.w	r9, #0
 8011c5a:	970a      	str	r7, [sp, #40]	@ 0x28
 8011c5c:	e7cc      	b.n	8011bf8 <depthwise_kernel7x7_stride2_inplace_CHW_fpreq+0xb0>
}
 8011c5e:	2000      	movs	r0, #0
 8011c60:	b00f      	add	sp, #60	@ 0x3c
 8011c62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011c66 <depthwise_kernel7x7_stride2_inplace_kernel_CHW_fpreq_bitmask>:
    const uint16_t output_y, const uint16_t output_x,
    const int32_t *bias, const int32_t *biasR, const q7_t *ksrc, const float *scales,
    q7_t *output, q7_t *output_mask, const int mask_idx, const int32_t output_offset,
    const int32_t activation_min, const int32_t activation_max,
    q7_t *cols_8b_iterptr, const uint16_t column_x, int channel_offset)
{
 8011c66:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011c6a:	b087      	sub	sp, #28
 8011c6c:	4681      	mov	r9, r0
 8011c6e:	468e      	mov	lr, r1
 8011c70:	9203      	str	r2, [sp, #12]
 8011c72:	9304      	str	r3, [sp, #16]
 8011c74:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8011c76:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8011c78:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8011c7a:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 8011c7c:	9818      	ldr	r0, [sp, #96]	@ 0x60
 8011c7e:	f8bd 3064 	ldrh.w	r3, [sp, #100]	@ 0x64
 8011c82:	9302      	str	r3, [sp, #8]
    #define STRIDE 2
    int i, j;
    q7_t mask_value;
    /* MACs for each output */
    for (i = 0; i < output_y; i++) {
 8011c84:	2300      	movs	r3, #0
 8011c86:	9301      	str	r3, [sp, #4]
 8011c88:	f8cd 9014 	str.w	r9, [sp, #20]
 8011c8c:	e3da      	b.n	8012444 <depthwise_kernel7x7_stride2_inplace_kernel_CHW_fpreq_bitmask+0x7de>
            /* requantize */
            sum0 = (float) sum0 * *scales;
            sum0 += output_offset;
            mask_value = 1;
            if (sum0 < activation_min){
                sum0 = activation_min;
 8011c8e:	46a4      	mov	ip, r4
                mask_value = 0;
 8011c90:	2300      	movs	r3, #0
 8011c92:	e22b      	b.n	80120ec <depthwise_kernel7x7_stride2_inplace_kernel_CHW_fpreq_bitmask+0x486>
                sum0 = activation_max;
                mask_value = 0;
            }
            output[(i * output_x + j * 2) * channel_offset] = sum0;
            if (mask_value == 1)
                BIT_SET(output_mask[(i * output_x + j * 2) * channel_offset / 8], mask_idx);
 8011c94:	46c4      	mov	ip, r8
 8011c96:	f1b8 0f00 	cmp.w	r8, #0
 8011c9a:	db0d      	blt.n	8011cb8 <depthwise_kernel7x7_stride2_inplace_kernel_CHW_fpreq_bitmask+0x52>
 8011c9c:	ea4f 0cec 	mov.w	ip, ip, asr #3
 8011ca0:	f911 800c 	ldrsb.w	r8, [r1, ip]
 8011ca4:	f04f 0a01 	mov.w	sl, #1
 8011ca8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8011caa:	fa0a fa03 	lsl.w	sl, sl, r3
 8011cae:	ea48 080a 	orr.w	r8, r8, sl
 8011cb2:	f801 800c 	strb.w	r8, [r1, ip]
 8011cb6:	e013      	b.n	8011ce0 <depthwise_kernel7x7_stride2_inplace_kernel_CHW_fpreq_bitmask+0x7a>
 8011cb8:	f108 0c07 	add.w	ip, r8, #7
 8011cbc:	e7ee      	b.n	8011c9c <depthwise_kernel7x7_stride2_inplace_kernel_CHW_fpreq_bitmask+0x36>
            else
                BIT_CLEAR(output_mask[(i * output_x + j * 2) * channel_offset / 8], mask_idx);
 8011cbe:	ea4f 08ec 	mov.w	r8, ip, asr #3
 8011cc2:	f911 a008 	ldrsb.w	sl, [r1, r8]
 8011cc6:	f04f 0c01 	mov.w	ip, #1
 8011cca:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8011ccc:	fa0c fc03 	lsl.w	ip, ip, r3
 8011cd0:	ea6f 0c0c 	mvn.w	ip, ip
 8011cd4:	fa5f fc8c 	uxtb.w	ip, ip
 8011cd8:	ea0a 0a0c 	and.w	sl, sl, ip
 8011cdc:	f801 a008 	strb.w	sl, [r1, r8]

            sum1 = (float) sum1 * *scales;
 8011ce0:	ee07 ba90 	vmov	s15, fp
 8011ce4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011ce8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8011cea:	ed93 7a00 	vldr	s14, [r3]
 8011cee:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011cf2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011cf6:	ee17 3a90 	vmov	r3, s15
            sum1 += output_offset;
 8011cfa:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 8011cfc:	442b      	add	r3, r5
            mask_value = 1;
            if (sum1 < activation_min){
 8011cfe:	429c      	cmp	r4, r3
 8011d00:	f300 8211 	bgt.w	8012126 <depthwise_kernel7x7_stride2_inplace_kernel_CHW_fpreq_bitmask+0x4c0>
            mask_value = 1;
 8011d04:	f04f 0c01 	mov.w	ip, #1
                sum1 = activation_min;
                mask_value = 0;
            }
            if (sum1 > activation_max){
 8011d08:	9d17      	ldr	r5, [sp, #92]	@ 0x5c
 8011d0a:	42ab      	cmp	r3, r5
 8011d0c:	dd02      	ble.n	8011d14 <depthwise_kernel7x7_stride2_inplace_kernel_CHW_fpreq_bitmask+0xae>
                sum1 = activation_max;
 8011d0e:	462b      	mov	r3, r5
                mask_value = 0;
 8011d10:	f04f 0c00 	mov.w	ip, #0
            }
            output[(i * output_x + (j * 2 + 1)) * channel_offset] = sum1;
 8011d14:	f109 0901 	add.w	r9, r9, #1
 8011d18:	444f      	add	r7, r9
 8011d1a:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 8011d1c:	fb05 f707 	mul.w	r7, r5, r7
 8011d20:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 8011d22:	55eb      	strb	r3, [r5, r7]
            if (mask_value == 1)
 8011d24:	f1bc 0f00 	cmp.w	ip, #0
 8011d28:	f040 8201 	bne.w	801212e <depthwise_kernel7x7_stride2_inplace_kernel_CHW_fpreq_bitmask+0x4c8>
                BIT_SET(output_mask[(i * output_x + (j * 2 + 1)) * channel_offset / 8], mask_idx);
            else
                BIT_CLEAR(output_mask[(i * output_x + (j * 2 + 1)) * channel_offset / 8], mask_idx);
 8011d2c:	463b      	mov	r3, r7
 8011d2e:	2f00      	cmp	r7, #0
 8011d30:	f2c0 820d 	blt.w	801214e <depthwise_kernel7x7_stride2_inplace_kernel_CHW_fpreq_bitmask+0x4e8>
 8011d34:	10df      	asrs	r7, r3, #3
 8011d36:	f911 c007 	ldrsb.w	ip, [r1, r7]
 8011d3a:	2301      	movs	r3, #1
 8011d3c:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8011d3e:	40ab      	lsls	r3, r5
 8011d40:	43db      	mvns	r3, r3
 8011d42:	b2db      	uxtb	r3, r3
 8011d44:	ea0c 0c03 	and.w	ip, ip, r3
 8011d48:	f801 c007 	strb.w	ip, [r1, r7]

            cols_8b_iterptr += STRIDE * 2;
 8011d4c:	3004      	adds	r0, #4
        for (j = 0; j < output_x / 2; j++) {
 8011d4e:	3601      	adds	r6, #1
 8011d50:	ebb6 0f5e 	cmp.w	r6, lr, lsr #1
 8011d54:	f280 81fd 	bge.w	8012152 <depthwise_kernel7x7_stride2_inplace_kernel_CHW_fpreq_bitmask+0x4ec>
            q31_t sum0 = bias[0] + biasR[0];
 8011d58:	9b03      	ldr	r3, [sp, #12]
 8011d5a:	681b      	ldr	r3, [r3, #0]
 8011d5c:	9f04      	ldr	r7, [sp, #16]
 8011d5e:	683f      	ldr	r7, [r7, #0]
 8011d60:	443b      	add	r3, r7
            sum0 += cols_8b[0]*ksrc[0];
 8011d62:	f990 7000 	ldrsb.w	r7, [r0]
 8011d66:	f992 c000 	ldrsb.w	ip, [r2]
 8011d6a:	fb0c 3707 	mla	r7, ip, r7, r3
            sum1 += cols_8b[2]*ksrc[0];
 8011d6e:	f990 9002 	ldrsb.w	r9, [r0, #2]
 8011d72:	fb09 330c 	mla	r3, r9, ip, r3
            sum0 += cols_8b[1]*ksrc[1];
 8011d76:	f990 c001 	ldrsb.w	ip, [r0, #1]
 8011d7a:	f992 8001 	ldrsb.w	r8, [r2, #1]
 8011d7e:	fb08 770c 	mla	r7, r8, ip, r7
            sum1 += cols_8b[3]*ksrc[1];
 8011d82:	f990 c003 	ldrsb.w	ip, [r0, #3]
 8011d86:	fb0c 3308 	mla	r3, ip, r8, r3
            sum0 += cols_8b[2]*ksrc[2];
 8011d8a:	f992 8002 	ldrsb.w	r8, [r2, #2]
 8011d8e:	fb08 7709 	mla	r7, r8, r9, r7
            sum1 += cols_8b[4]*ksrc[2];
 8011d92:	f990 9004 	ldrsb.w	r9, [r0, #4]
 8011d96:	fb09 3308 	mla	r3, r9, r8, r3
            sum0 += cols_8b[3]*ksrc[3];
 8011d9a:	f992 8003 	ldrsb.w	r8, [r2, #3]
 8011d9e:	fb08 770c 	mla	r7, r8, ip, r7
            sum1 += cols_8b[5]*ksrc[3];
 8011da2:	f990 c005 	ldrsb.w	ip, [r0, #5]
 8011da6:	fb0c 3308 	mla	r3, ip, r8, r3
            sum0 += cols_8b[4]*ksrc[4];
 8011daa:	f992 8004 	ldrsb.w	r8, [r2, #4]
 8011dae:	fb08 7709 	mla	r7, r8, r9, r7
            sum1 += cols_8b[6]*ksrc[4];
 8011db2:	f990 9006 	ldrsb.w	r9, [r0, #6]
 8011db6:	fb09 3308 	mla	r3, r9, r8, r3
            sum0 += cols_8b[5]*ksrc[5];
 8011dba:	f992 8005 	ldrsb.w	r8, [r2, #5]
 8011dbe:	fb08 770c 	mla	r7, r8, ip, r7
            sum1 += cols_8b[7]*ksrc[5];
 8011dc2:	f990 c007 	ldrsb.w	ip, [r0, #7]
 8011dc6:	fb0c 3c08 	mla	ip, ip, r8, r3
            sum0 += cols_8b[6]*ksrc[6];
 8011dca:	f992 8006 	ldrsb.w	r8, [r2, #6]
 8011dce:	fb08 7309 	mla	r3, r8, r9, r7
            sum1 += cols_8b[8]*ksrc[6];
 8011dd2:	f990 7008 	ldrsb.w	r7, [r0, #8]
 8011dd6:	fb07 cc08 	mla	ip, r7, r8, ip
            cols_8b += column_x + 6;
 8011dda:	9f02      	ldr	r7, [sp, #8]
 8011ddc:	3706      	adds	r7, #6
 8011dde:	eb00 0807 	add.w	r8, r0, r7
            sum0 += cols_8b[0]*ksrc[7];
 8011de2:	f910 9007 	ldrsb.w	r9, [r0, r7]
 8011de6:	f992 a007 	ldrsb.w	sl, [r2, #7]
 8011dea:	fb0a 3309 	mla	r3, sl, r9, r3
            sum1 += cols_8b[2]*ksrc[7];
 8011dee:	f998 9002 	ldrsb.w	r9, [r8, #2]
 8011df2:	fb09 cc0a 	mla	ip, r9, sl, ip
            sum0 += cols_8b[1]*ksrc[8];
 8011df6:	f998 b001 	ldrsb.w	fp, [r8, #1]
 8011dfa:	f992 a008 	ldrsb.w	sl, [r2, #8]
 8011dfe:	fb0a 330b 	mla	r3, sl, fp, r3
            sum1 += cols_8b[3]*ksrc[8];
 8011e02:	f998 b003 	ldrsb.w	fp, [r8, #3]
 8011e06:	fb0b cc0a 	mla	ip, fp, sl, ip
            sum0 += cols_8b[2]*ksrc[9];
 8011e0a:	f992 a009 	ldrsb.w	sl, [r2, #9]
 8011e0e:	fb0a 3309 	mla	r3, sl, r9, r3
            sum1 += cols_8b[4]*ksrc[9];
 8011e12:	f998 9004 	ldrsb.w	r9, [r8, #4]
 8011e16:	fb09 cc0a 	mla	ip, r9, sl, ip
            sum0 += cols_8b[3]*ksrc[10];
 8011e1a:	f992 a00a 	ldrsb.w	sl, [r2, #10]
 8011e1e:	fb0a 330b 	mla	r3, sl, fp, r3
            sum1 += cols_8b[5]*ksrc[10];
 8011e22:	f998 b005 	ldrsb.w	fp, [r8, #5]
 8011e26:	fb0b cc0a 	mla	ip, fp, sl, ip
            sum0 += cols_8b[4]*ksrc[11];
 8011e2a:	f992 a00b 	ldrsb.w	sl, [r2, #11]
 8011e2e:	fb0a 3309 	mla	r3, sl, r9, r3
            sum1 += cols_8b[6]*ksrc[11];
 8011e32:	f998 9006 	ldrsb.w	r9, [r8, #6]
 8011e36:	fb09 cc0a 	mla	ip, r9, sl, ip
            sum0 += cols_8b[5]*ksrc[12];
 8011e3a:	f992 a00c 	ldrsb.w	sl, [r2, #12]
 8011e3e:	fb0a 330b 	mla	r3, sl, fp, r3
            sum1 += cols_8b[7]*ksrc[12];
 8011e42:	f998 b007 	ldrsb.w	fp, [r8, #7]
 8011e46:	fb0b cc0a 	mla	ip, fp, sl, ip
            sum0 += cols_8b[6]*ksrc[13];
 8011e4a:	f992 a00d 	ldrsb.w	sl, [r2, #13]
 8011e4e:	fb0a 3309 	mla	r3, sl, r9, r3
            sum1 += cols_8b[8]*ksrc[13];
 8011e52:	f998 9008 	ldrsb.w	r9, [r8, #8]
 8011e56:	fb09 cc0a 	mla	ip, r9, sl, ip
            cols_8b += column_x + 6;
 8011e5a:	eb08 0a07 	add.w	sl, r8, r7
            sum0 += cols_8b[0]*ksrc[14];
 8011e5e:	f918 9007 	ldrsb.w	r9, [r8, r7]
 8011e62:	f992 800e 	ldrsb.w	r8, [r2, #14]
 8011e66:	fb08 3309 	mla	r3, r8, r9, r3
            sum1 += cols_8b[2]*ksrc[14];
 8011e6a:	f99a b002 	ldrsb.w	fp, [sl, #2]
 8011e6e:	fb0b cc08 	mla	ip, fp, r8, ip
            sum0 += cols_8b[1]*ksrc[15];
 8011e72:	f99a 8001 	ldrsb.w	r8, [sl, #1]
 8011e76:	f992 900f 	ldrsb.w	r9, [r2, #15]
 8011e7a:	fb09 3308 	mla	r3, r9, r8, r3
            sum1 += cols_8b[3]*ksrc[15];
 8011e7e:	f99a 8003 	ldrsb.w	r8, [sl, #3]
 8011e82:	fb08 cc09 	mla	ip, r8, r9, ip
            sum0 += cols_8b[2]*ksrc[16];
 8011e86:	f992 9010 	ldrsb.w	r9, [r2, #16]
 8011e8a:	fb09 330b 	mla	r3, r9, fp, r3
            sum1 += cols_8b[4]*ksrc[16];
 8011e8e:	f99a b004 	ldrsb.w	fp, [sl, #4]
 8011e92:	fb0b cc09 	mla	ip, fp, r9, ip
            sum0 += cols_8b[3]*ksrc[17];
 8011e96:	f992 9011 	ldrsb.w	r9, [r2, #17]
 8011e9a:	fb09 3308 	mla	r3, r9, r8, r3
            sum1 += cols_8b[5]*ksrc[17];
 8011e9e:	f99a 8005 	ldrsb.w	r8, [sl, #5]
 8011ea2:	fb08 cc09 	mla	ip, r8, r9, ip
            sum0 += cols_8b[4]*ksrc[18];
 8011ea6:	f992 9012 	ldrsb.w	r9, [r2, #18]
 8011eaa:	fb09 330b 	mla	r3, r9, fp, r3
            sum1 += cols_8b[6]*ksrc[18];
 8011eae:	f99a b006 	ldrsb.w	fp, [sl, #6]
 8011eb2:	fb0b cc09 	mla	ip, fp, r9, ip
            sum0 += cols_8b[5]*ksrc[19];
 8011eb6:	f992 9013 	ldrsb.w	r9, [r2, #19]
 8011eba:	fb09 3308 	mla	r3, r9, r8, r3
            sum1 += cols_8b[7]*ksrc[19];
 8011ebe:	f99a 8007 	ldrsb.w	r8, [sl, #7]
 8011ec2:	fb08 cc09 	mla	ip, r8, r9, ip
            sum0 += cols_8b[6]*ksrc[20];
 8011ec6:	f992 8014 	ldrsb.w	r8, [r2, #20]
 8011eca:	fb08 330b 	mla	r3, r8, fp, r3
            sum1 += cols_8b[8]*ksrc[20];
 8011ece:	f99a 9008 	ldrsb.w	r9, [sl, #8]
 8011ed2:	fb09 cc08 	mla	ip, r9, r8, ip
            cols_8b += column_x + 6;
 8011ed6:	eb0a 0907 	add.w	r9, sl, r7
            sum0 += cols_8b[0]*ksrc[21];
 8011eda:	f91a a007 	ldrsb.w	sl, [sl, r7]
 8011ede:	f992 8015 	ldrsb.w	r8, [r2, #21]
 8011ee2:	fb08 330a 	mla	r3, r8, sl, r3
            sum1 += cols_8b[2]*ksrc[21];
 8011ee6:	f999 b002 	ldrsb.w	fp, [r9, #2]
 8011eea:	fb0b cc08 	mla	ip, fp, r8, ip
            sum0 += cols_8b[1]*ksrc[22];
 8011eee:	f999 8001 	ldrsb.w	r8, [r9, #1]
 8011ef2:	f992 a016 	ldrsb.w	sl, [r2, #22]
 8011ef6:	fb0a 3308 	mla	r3, sl, r8, r3
            sum1 += cols_8b[3]*ksrc[22];
 8011efa:	f999 8003 	ldrsb.w	r8, [r9, #3]
 8011efe:	fb08 cc0a 	mla	ip, r8, sl, ip
            sum0 += cols_8b[2]*ksrc[23];
 8011f02:	f992 a017 	ldrsb.w	sl, [r2, #23]
 8011f06:	fb0a 330b 	mla	r3, sl, fp, r3
            sum1 += cols_8b[4]*ksrc[23];
 8011f0a:	f999 b004 	ldrsb.w	fp, [r9, #4]
 8011f0e:	fb0b cc0a 	mla	ip, fp, sl, ip
            sum0 += cols_8b[3]*ksrc[24];
 8011f12:	f992 a018 	ldrsb.w	sl, [r2, #24]
 8011f16:	fb0a 3308 	mla	r3, sl, r8, r3
            sum1 += cols_8b[5]*ksrc[24];
 8011f1a:	f999 8005 	ldrsb.w	r8, [r9, #5]
 8011f1e:	fb08 cc0a 	mla	ip, r8, sl, ip
            sum0 += cols_8b[4]*ksrc[25];
 8011f22:	f992 a019 	ldrsb.w	sl, [r2, #25]
 8011f26:	fb0a 330b 	mla	r3, sl, fp, r3
            sum1 += cols_8b[6]*ksrc[25];
 8011f2a:	f999 b006 	ldrsb.w	fp, [r9, #6]
 8011f2e:	fb0b cc0a 	mla	ip, fp, sl, ip
            sum0 += cols_8b[5]*ksrc[26];
 8011f32:	f992 a01a 	ldrsb.w	sl, [r2, #26]
 8011f36:	fb0a 3308 	mla	r3, sl, r8, r3
            sum1 += cols_8b[7]*ksrc[26];
 8011f3a:	f999 8007 	ldrsb.w	r8, [r9, #7]
 8011f3e:	fb08 cc0a 	mla	ip, r8, sl, ip
            sum0 += cols_8b[6]*ksrc[27];
 8011f42:	f992 801b 	ldrsb.w	r8, [r2, #27]
 8011f46:	fb08 330b 	mla	r3, r8, fp, r3
            sum1 += cols_8b[8]*ksrc[27];
 8011f4a:	f999 a008 	ldrsb.w	sl, [r9, #8]
 8011f4e:	fb0a cc08 	mla	ip, sl, r8, ip
            cols_8b += column_x + 6;
 8011f52:	eb09 0807 	add.w	r8, r9, r7
            sum0 += cols_8b[0]*ksrc[28];
 8011f56:	f919 a007 	ldrsb.w	sl, [r9, r7]
 8011f5a:	f992 901c 	ldrsb.w	r9, [r2, #28]
 8011f5e:	fb09 330a 	mla	r3, r9, sl, r3
            sum1 += cols_8b[2]*ksrc[28];
 8011f62:	f998 b002 	ldrsb.w	fp, [r8, #2]
 8011f66:	fb0b cc09 	mla	ip, fp, r9, ip
            sum0 += cols_8b[1]*ksrc[29];
 8011f6a:	f998 9001 	ldrsb.w	r9, [r8, #1]
 8011f6e:	f992 a01d 	ldrsb.w	sl, [r2, #29]
 8011f72:	fb0a 3309 	mla	r3, sl, r9, r3
            sum1 += cols_8b[3]*ksrc[29];
 8011f76:	f998 9003 	ldrsb.w	r9, [r8, #3]
 8011f7a:	fb09 cc0a 	mla	ip, r9, sl, ip
            sum0 += cols_8b[2]*ksrc[30];
 8011f7e:	f992 a01e 	ldrsb.w	sl, [r2, #30]
 8011f82:	fb0a 330b 	mla	r3, sl, fp, r3
            sum1 += cols_8b[4]*ksrc[30];
 8011f86:	f998 b004 	ldrsb.w	fp, [r8, #4]
 8011f8a:	fb0b cc0a 	mla	ip, fp, sl, ip
            sum0 += cols_8b[3]*ksrc[31];
 8011f8e:	f992 a01f 	ldrsb.w	sl, [r2, #31]
 8011f92:	fb0a 3309 	mla	r3, sl, r9, r3
            sum1 += cols_8b[5]*ksrc[31];
 8011f96:	f998 9005 	ldrsb.w	r9, [r8, #5]
 8011f9a:	fb09 cc0a 	mla	ip, r9, sl, ip
            sum0 += cols_8b[4]*ksrc[32];
 8011f9e:	f992 a020 	ldrsb.w	sl, [r2, #32]
 8011fa2:	fb0a 330b 	mla	r3, sl, fp, r3
            sum1 += cols_8b[6]*ksrc[32];
 8011fa6:	f998 b006 	ldrsb.w	fp, [r8, #6]
 8011faa:	fb0b cc0a 	mla	ip, fp, sl, ip
            sum0 += cols_8b[5]*ksrc[33];
 8011fae:	f992 a021 	ldrsb.w	sl, [r2, #33]	@ 0x21
 8011fb2:	fb0a 3309 	mla	r3, sl, r9, r3
            sum1 += cols_8b[7]*ksrc[33];
 8011fb6:	f998 9007 	ldrsb.w	r9, [r8, #7]
 8011fba:	fb09 cc0a 	mla	ip, r9, sl, ip
            sum0 += cols_8b[6]*ksrc[34];
 8011fbe:	f992 9022 	ldrsb.w	r9, [r2, #34]	@ 0x22
 8011fc2:	fb09 330b 	mla	r3, r9, fp, r3
            sum1 += cols_8b[8]*ksrc[34];
 8011fc6:	f998 a008 	ldrsb.w	sl, [r8, #8]
 8011fca:	fb0a cc09 	mla	ip, sl, r9, ip
            cols_8b += column_x + 6;
 8011fce:	eb08 0907 	add.w	r9, r8, r7
            sum0 += cols_8b[0]*ksrc[35];
 8011fd2:	f918 a007 	ldrsb.w	sl, [r8, r7]
 8011fd6:	f992 8023 	ldrsb.w	r8, [r2, #35]	@ 0x23
 8011fda:	fb08 330a 	mla	r3, r8, sl, r3
            sum1 += cols_8b[2]*ksrc[35];
 8011fde:	f999 b002 	ldrsb.w	fp, [r9, #2]
 8011fe2:	fb0b cc08 	mla	ip, fp, r8, ip
            sum0 += cols_8b[1]*ksrc[36];
 8011fe6:	f999 8001 	ldrsb.w	r8, [r9, #1]
 8011fea:	f992 a024 	ldrsb.w	sl, [r2, #36]	@ 0x24
 8011fee:	fb0a 3308 	mla	r3, sl, r8, r3
            sum1 += cols_8b[3]*ksrc[36];
 8011ff2:	f999 8003 	ldrsb.w	r8, [r9, #3]
 8011ff6:	fb08 cc0a 	mla	ip, r8, sl, ip
            sum0 += cols_8b[2]*ksrc[37];
 8011ffa:	f992 a025 	ldrsb.w	sl, [r2, #37]	@ 0x25
 8011ffe:	fb0a 330b 	mla	r3, sl, fp, r3
            sum1 += cols_8b[4]*ksrc[37];
 8012002:	f999 b004 	ldrsb.w	fp, [r9, #4]
 8012006:	fb0b cc0a 	mla	ip, fp, sl, ip
            sum0 += cols_8b[3]*ksrc[38];
 801200a:	f992 a026 	ldrsb.w	sl, [r2, #38]	@ 0x26
 801200e:	fb0a 3308 	mla	r3, sl, r8, r3
            sum1 += cols_8b[5]*ksrc[38];
 8012012:	f999 8005 	ldrsb.w	r8, [r9, #5]
 8012016:	fb08 cc0a 	mla	ip, r8, sl, ip
            sum0 += cols_8b[4]*ksrc[39];
 801201a:	f992 a027 	ldrsb.w	sl, [r2, #39]	@ 0x27
 801201e:	fb0a 330b 	mla	r3, sl, fp, r3
            sum1 += cols_8b[6]*ksrc[39];
 8012022:	f999 b006 	ldrsb.w	fp, [r9, #6]
 8012026:	fb0b cc0a 	mla	ip, fp, sl, ip
            sum0 += cols_8b[5]*ksrc[40];
 801202a:	f992 a028 	ldrsb.w	sl, [r2, #40]	@ 0x28
 801202e:	fb0a 3308 	mla	r3, sl, r8, r3
            sum1 += cols_8b[7]*ksrc[40];
 8012032:	f999 8007 	ldrsb.w	r8, [r9, #7]
 8012036:	fb08 c80a 	mla	r8, r8, sl, ip
            sum0 += cols_8b[6]*ksrc[41];
 801203a:	f992 c029 	ldrsb.w	ip, [r2, #41]	@ 0x29
 801203e:	fb0c 330b 	mla	r3, ip, fp, r3
            sum1 += cols_8b[8]*ksrc[41];
 8012042:	f999 a008 	ldrsb.w	sl, [r9, #8]
 8012046:	fb0a 880c 	mla	r8, sl, ip, r8
            cols_8b += column_x + 6;
 801204a:	eb09 0c07 	add.w	ip, r9, r7
            sum0 += cols_8b[0]*ksrc[42];
 801204e:	f919 7007 	ldrsb.w	r7, [r9, r7]
 8012052:	f992 a02a 	ldrsb.w	sl, [r2, #42]	@ 0x2a
 8012056:	fb0a 3707 	mla	r7, sl, r7, r3
            sum1 += cols_8b[2]*ksrc[42];
 801205a:	f99c 9002 	ldrsb.w	r9, [ip, #2]
 801205e:	fb09 830a 	mla	r3, r9, sl, r8
            sum0 += cols_8b[1]*ksrc[43];
 8012062:	f99c 8001 	ldrsb.w	r8, [ip, #1]
 8012066:	f992 a02b 	ldrsb.w	sl, [r2, #43]	@ 0x2b
 801206a:	fb0a 7708 	mla	r7, sl, r8, r7
            sum1 += cols_8b[3]*ksrc[43];
 801206e:	f99c 8003 	ldrsb.w	r8, [ip, #3]
 8012072:	fb08 330a 	mla	r3, r8, sl, r3
            sum0 += cols_8b[2]*ksrc[44];
 8012076:	f992 a02c 	ldrsb.w	sl, [r2, #44]	@ 0x2c
 801207a:	fb0a 7709 	mla	r7, sl, r9, r7
            sum1 += cols_8b[4]*ksrc[44];
 801207e:	f99c 9004 	ldrsb.w	r9, [ip, #4]
 8012082:	fb09 330a 	mla	r3, r9, sl, r3
            sum0 += cols_8b[3]*ksrc[45];
 8012086:	f992 a02d 	ldrsb.w	sl, [r2, #45]	@ 0x2d
 801208a:	fb0a 7708 	mla	r7, sl, r8, r7
            sum1 += cols_8b[5]*ksrc[45];
 801208e:	f99c 8005 	ldrsb.w	r8, [ip, #5]
 8012092:	fb08 330a 	mla	r3, r8, sl, r3
            sum0 += cols_8b[4]*ksrc[46];
 8012096:	f992 a02e 	ldrsb.w	sl, [r2, #46]	@ 0x2e
 801209a:	fb0a 7709 	mla	r7, sl, r9, r7
            sum1 += cols_8b[6]*ksrc[46];
 801209e:	f99c 9006 	ldrsb.w	r9, [ip, #6]
 80120a2:	fb09 330a 	mla	r3, r9, sl, r3
            sum0 += cols_8b[5]*ksrc[47];
 80120a6:	f992 a02f 	ldrsb.w	sl, [r2, #47]	@ 0x2f
 80120aa:	fb0a 7708 	mla	r7, sl, r8, r7
            sum1 += cols_8b[7]*ksrc[47];
 80120ae:	f99c 8007 	ldrsb.w	r8, [ip, #7]
 80120b2:	fb08 330a 	mla	r3, r8, sl, r3
            sum0 += cols_8b[6]*ksrc[48];
 80120b6:	f992 8030 	ldrsb.w	r8, [r2, #48]	@ 0x30
 80120ba:	fb08 7709 	mla	r7, r8, r9, r7
            sum1 += cols_8b[8]*ksrc[48];
 80120be:	f99c c008 	ldrsb.w	ip, [ip, #8]
 80120c2:	fb0c 3b08 	mla	fp, ip, r8, r3
            sum0 = (float) sum0 * *scales;
 80120c6:	ee07 7a90 	vmov	s15, r7
 80120ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80120ce:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80120d0:	ed93 7a00 	vldr	s14, [r3]
 80120d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80120d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80120dc:	ee17 ca90 	vmov	ip, s15
            sum0 += output_offset;
 80120e0:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80120e2:	449c      	add	ip, r3
            if (sum0 < activation_min){
 80120e4:	4564      	cmp	r4, ip
 80120e6:	f73f add2 	bgt.w	8011c8e <depthwise_kernel7x7_stride2_inplace_kernel_CHW_fpreq_bitmask+0x28>
            mask_value = 1;
 80120ea:	2301      	movs	r3, #1
            if (sum0 > activation_max){
 80120ec:	9f17      	ldr	r7, [sp, #92]	@ 0x5c
 80120ee:	45bc      	cmp	ip, r7
 80120f0:	dd01      	ble.n	80120f6 <depthwise_kernel7x7_stride2_inplace_kernel_CHW_fpreq_bitmask+0x490>
                sum0 = activation_max;
 80120f2:	46bc      	mov	ip, r7
                mask_value = 0;
 80120f4:	2300      	movs	r3, #0
            output[(i * output_x + j * 2) * channel_offset] = sum0;
 80120f6:	9f01      	ldr	r7, [sp, #4]
 80120f8:	fb07 f70e 	mul.w	r7, r7, lr
 80120fc:	ea4f 0946 	mov.w	r9, r6, lsl #1
 8012100:	eb07 0846 	add.w	r8, r7, r6, lsl #1
 8012104:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 8012106:	fb05 f808 	mul.w	r8, r5, r8
 801210a:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 801210c:	f805 c008 	strb.w	ip, [r5, r8]
            if (mask_value == 1)
 8012110:	2b00      	cmp	r3, #0
 8012112:	f47f adbf 	bne.w	8011c94 <depthwise_kernel7x7_stride2_inplace_kernel_CHW_fpreq_bitmask+0x2e>
                BIT_CLEAR(output_mask[(i * output_x + j * 2) * channel_offset / 8], mask_idx);
 8012116:	46c4      	mov	ip, r8
 8012118:	f1b8 0f00 	cmp.w	r8, #0
 801211c:	f6bf adcf 	bge.w	8011cbe <depthwise_kernel7x7_stride2_inplace_kernel_CHW_fpreq_bitmask+0x58>
 8012120:	f108 0c07 	add.w	ip, r8, #7
 8012124:	e5cb      	b.n	8011cbe <depthwise_kernel7x7_stride2_inplace_kernel_CHW_fpreq_bitmask+0x58>
                sum1 = activation_min;
 8012126:	4623      	mov	r3, r4
                mask_value = 0;
 8012128:	f04f 0c00 	mov.w	ip, #0
 801212c:	e5ec      	b.n	8011d08 <depthwise_kernel7x7_stride2_inplace_kernel_CHW_fpreq_bitmask+0xa2>
                BIT_SET(output_mask[(i * output_x + (j * 2 + 1)) * channel_offset / 8], mask_idx);
 801212e:	463b      	mov	r3, r7
 8012130:	2f00      	cmp	r7, #0
 8012132:	db0a      	blt.n	801214a <depthwise_kernel7x7_stride2_inplace_kernel_CHW_fpreq_bitmask+0x4e4>
 8012134:	10db      	asrs	r3, r3, #3
 8012136:	56cf      	ldrsb	r7, [r1, r3]
 8012138:	f04f 0c01 	mov.w	ip, #1
 801213c:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 801213e:	fa0c fc05 	lsl.w	ip, ip, r5
 8012142:	ea47 070c 	orr.w	r7, r7, ip
 8012146:	54cf      	strb	r7, [r1, r3]
 8012148:	e600      	b.n	8011d4c <depthwise_kernel7x7_stride2_inplace_kernel_CHW_fpreq_bitmask+0xe6>
 801214a:	1dfb      	adds	r3, r7, #7
 801214c:	e7f2      	b.n	8012134 <depthwise_kernel7x7_stride2_inplace_kernel_CHW_fpreq_bitmask+0x4ce>
                BIT_CLEAR(output_mask[(i * output_x + (j * 2 + 1)) * channel_offset / 8], mask_idx);
 801214e:	1dfb      	adds	r3, r7, #7
 8012150:	e5f0      	b.n	8011d34 <depthwise_kernel7x7_stride2_inplace_kernel_CHW_fpreq_bitmask+0xce>
        }
        if (output_x & 1) {
 8012152:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8012154:	f01e 0f01 	tst.w	lr, #1
 8012158:	f000 8169 	beq.w	801242e <depthwise_kernel7x7_stride2_inplace_kernel_CHW_fpreq_bitmask+0x7c8>
            q7_t * cols_8b = cols_8b_iterptr;
            q31_t sum = bias[0] + biasR[0];
 801215c:	9b03      	ldr	r3, [sp, #12]
 801215e:	681b      	ldr	r3, [r3, #0]
 8012160:	9e04      	ldr	r6, [sp, #16]
 8012162:	6836      	ldr	r6, [r6, #0]
 8012164:	4433      	add	r3, r6
            sum += cols_8b[0]*ksrc[0];
 8012166:	f990 6000 	ldrsb.w	r6, [r0]
 801216a:	f992 7000 	ldrsb.w	r7, [r2]
 801216e:	fb07 3306 	mla	r3, r7, r6, r3
            sum += cols_8b[1]*ksrc[1];
 8012172:	f990 6001 	ldrsb.w	r6, [r0, #1]
 8012176:	f992 7001 	ldrsb.w	r7, [r2, #1]
 801217a:	fb07 3306 	mla	r3, r7, r6, r3
            sum += cols_8b[2]*ksrc[2];
 801217e:	f990 6002 	ldrsb.w	r6, [r0, #2]
 8012182:	f992 7002 	ldrsb.w	r7, [r2, #2]
 8012186:	fb07 3306 	mla	r3, r7, r6, r3
            sum += cols_8b[3]*ksrc[3];
 801218a:	f990 6003 	ldrsb.w	r6, [r0, #3]
 801218e:	f992 7003 	ldrsb.w	r7, [r2, #3]
 8012192:	fb07 3306 	mla	r3, r7, r6, r3
            sum += cols_8b[4]*ksrc[4];
 8012196:	f990 6004 	ldrsb.w	r6, [r0, #4]
 801219a:	f992 7004 	ldrsb.w	r7, [r2, #4]
 801219e:	fb07 3306 	mla	r3, r7, r6, r3
            sum += cols_8b[5]*ksrc[5];
 80121a2:	f990 6005 	ldrsb.w	r6, [r0, #5]
 80121a6:	f992 7005 	ldrsb.w	r7, [r2, #5]
 80121aa:	fb07 3306 	mla	r3, r7, r6, r3
            sum += cols_8b[6]*ksrc[6];
 80121ae:	f990 6006 	ldrsb.w	r6, [r0, #6]
 80121b2:	f992 7006 	ldrsb.w	r7, [r2, #6]
 80121b6:	fb07 3306 	mla	r3, r7, r6, r3
            cols_8b += column_x + 6;
 80121ba:	9e02      	ldr	r6, [sp, #8]
 80121bc:	3606      	adds	r6, #6
 80121be:	1987      	adds	r7, r0, r6
            sum += cols_8b[0]*ksrc[7];
 80121c0:	f910 c006 	ldrsb.w	ip, [r0, r6]
 80121c4:	f992 8007 	ldrsb.w	r8, [r2, #7]
 80121c8:	fb08 330c 	mla	r3, r8, ip, r3
            sum += cols_8b[1]*ksrc[8];
 80121cc:	f997 c001 	ldrsb.w	ip, [r7, #1]
 80121d0:	f992 8008 	ldrsb.w	r8, [r2, #8]
 80121d4:	fb08 330c 	mla	r3, r8, ip, r3
            sum += cols_8b[2]*ksrc[9];
 80121d8:	f997 c002 	ldrsb.w	ip, [r7, #2]
 80121dc:	f992 8009 	ldrsb.w	r8, [r2, #9]
 80121e0:	fb08 330c 	mla	r3, r8, ip, r3
            sum += cols_8b[3]*ksrc[10];
 80121e4:	f997 c003 	ldrsb.w	ip, [r7, #3]
 80121e8:	f992 800a 	ldrsb.w	r8, [r2, #10]
 80121ec:	fb08 330c 	mla	r3, r8, ip, r3
            sum += cols_8b[4]*ksrc[11];
 80121f0:	f997 c004 	ldrsb.w	ip, [r7, #4]
 80121f4:	f992 800b 	ldrsb.w	r8, [r2, #11]
 80121f8:	fb08 330c 	mla	r3, r8, ip, r3
            sum += cols_8b[5]*ksrc[12];
 80121fc:	f997 c005 	ldrsb.w	ip, [r7, #5]
 8012200:	f992 800c 	ldrsb.w	r8, [r2, #12]
 8012204:	fb08 330c 	mla	r3, r8, ip, r3
            sum += cols_8b[6]*ksrc[13];
 8012208:	f997 c006 	ldrsb.w	ip, [r7, #6]
 801220c:	f992 800d 	ldrsb.w	r8, [r2, #13]
 8012210:	fb08 330c 	mla	r3, r8, ip, r3
            cols_8b += column_x + 6;
 8012214:	eb07 0c06 	add.w	ip, r7, r6
            sum += cols_8b[0]*ksrc[14];
 8012218:	57bf      	ldrsb	r7, [r7, r6]
 801221a:	f992 800e 	ldrsb.w	r8, [r2, #14]
 801221e:	fb08 3307 	mla	r3, r8, r7, r3
            sum += cols_8b[1]*ksrc[15];
 8012222:	f99c 7001 	ldrsb.w	r7, [ip, #1]
 8012226:	f992 800f 	ldrsb.w	r8, [r2, #15]
 801222a:	fb08 3307 	mla	r3, r8, r7, r3
            sum += cols_8b[2]*ksrc[16];
 801222e:	f99c 7002 	ldrsb.w	r7, [ip, #2]
 8012232:	f992 8010 	ldrsb.w	r8, [r2, #16]
 8012236:	fb08 3307 	mla	r3, r8, r7, r3
            sum += cols_8b[3]*ksrc[17];
 801223a:	f99c 7003 	ldrsb.w	r7, [ip, #3]
 801223e:	f992 8011 	ldrsb.w	r8, [r2, #17]
 8012242:	fb08 3307 	mla	r3, r8, r7, r3
            sum += cols_8b[4]*ksrc[18];
 8012246:	f99c 7004 	ldrsb.w	r7, [ip, #4]
 801224a:	f992 8012 	ldrsb.w	r8, [r2, #18]
 801224e:	fb08 3307 	mla	r3, r8, r7, r3
            sum += cols_8b[5]*ksrc[19];
 8012252:	f99c 7005 	ldrsb.w	r7, [ip, #5]
 8012256:	f992 8013 	ldrsb.w	r8, [r2, #19]
 801225a:	fb08 3307 	mla	r3, r8, r7, r3
            sum += cols_8b[6]*ksrc[20];
 801225e:	f99c 7006 	ldrsb.w	r7, [ip, #6]
 8012262:	f992 8014 	ldrsb.w	r8, [r2, #20]
 8012266:	fb08 3307 	mla	r3, r8, r7, r3
            cols_8b += column_x + 6;
 801226a:	eb0c 0706 	add.w	r7, ip, r6
            sum += cols_8b[0]*ksrc[21];
 801226e:	f91c c006 	ldrsb.w	ip, [ip, r6]
 8012272:	f992 8015 	ldrsb.w	r8, [r2, #21]
 8012276:	fb08 330c 	mla	r3, r8, ip, r3
            sum += cols_8b[1]*ksrc[22];
 801227a:	f997 c001 	ldrsb.w	ip, [r7, #1]
 801227e:	f992 8016 	ldrsb.w	r8, [r2, #22]
 8012282:	fb08 330c 	mla	r3, r8, ip, r3
            sum += cols_8b[2]*ksrc[23];
 8012286:	f997 c002 	ldrsb.w	ip, [r7, #2]
 801228a:	f992 8017 	ldrsb.w	r8, [r2, #23]
 801228e:	fb08 330c 	mla	r3, r8, ip, r3
            sum += cols_8b[3]*ksrc[24];
 8012292:	f997 c003 	ldrsb.w	ip, [r7, #3]
 8012296:	f992 8018 	ldrsb.w	r8, [r2, #24]
 801229a:	fb08 330c 	mla	r3, r8, ip, r3
            sum += cols_8b[4]*ksrc[25];
 801229e:	f997 c004 	ldrsb.w	ip, [r7, #4]
 80122a2:	f992 8019 	ldrsb.w	r8, [r2, #25]
 80122a6:	fb08 330c 	mla	r3, r8, ip, r3
            sum += cols_8b[5]*ksrc[26];
 80122aa:	f997 c005 	ldrsb.w	ip, [r7, #5]
 80122ae:	f992 801a 	ldrsb.w	r8, [r2, #26]
 80122b2:	fb08 330c 	mla	r3, r8, ip, r3
            sum += cols_8b[6]*ksrc[27];
 80122b6:	f997 c006 	ldrsb.w	ip, [r7, #6]
 80122ba:	f992 801b 	ldrsb.w	r8, [r2, #27]
 80122be:	fb08 330c 	mla	r3, r8, ip, r3
            cols_8b += column_x + 6;
 80122c2:	eb07 0806 	add.w	r8, r7, r6
            sum += cols_8b[0]*ksrc[28];
 80122c6:	f917 c006 	ldrsb.w	ip, [r7, r6]
 80122ca:	f992 701c 	ldrsb.w	r7, [r2, #28]
 80122ce:	fb07 3c0c 	mla	ip, r7, ip, r3
            sum += cols_8b[1]*ksrc[29];
 80122d2:	f998 3001 	ldrsb.w	r3, [r8, #1]
 80122d6:	f992 701d 	ldrsb.w	r7, [r2, #29]
 80122da:	fb07 cc03 	mla	ip, r7, r3, ip
            sum += cols_8b[2]*ksrc[30];
 80122de:	f998 3002 	ldrsb.w	r3, [r8, #2]
 80122e2:	f992 701e 	ldrsb.w	r7, [r2, #30]
 80122e6:	fb07 cc03 	mla	ip, r7, r3, ip
            sum += cols_8b[3]*ksrc[31];
 80122ea:	f998 3003 	ldrsb.w	r3, [r8, #3]
 80122ee:	f992 701f 	ldrsb.w	r7, [r2, #31]
 80122f2:	fb07 cc03 	mla	ip, r7, r3, ip
            sum += cols_8b[4]*ksrc[32];
 80122f6:	f998 3004 	ldrsb.w	r3, [r8, #4]
 80122fa:	f992 7020 	ldrsb.w	r7, [r2, #32]
 80122fe:	fb07 cc03 	mla	ip, r7, r3, ip
            sum += cols_8b[5]*ksrc[33];
 8012302:	f998 3005 	ldrsb.w	r3, [r8, #5]
 8012306:	f992 7021 	ldrsb.w	r7, [r2, #33]	@ 0x21
 801230a:	fb07 cc03 	mla	ip, r7, r3, ip
            sum += cols_8b[6]*ksrc[34];
 801230e:	f998 3006 	ldrsb.w	r3, [r8, #6]
 8012312:	f992 7022 	ldrsb.w	r7, [r2, #34]	@ 0x22
 8012316:	fb07 cc03 	mla	ip, r7, r3, ip
            cols_8b += column_x + 6;
 801231a:	eb08 0706 	add.w	r7, r8, r6
            sum += cols_8b[0]*ksrc[35];
 801231e:	f918 3006 	ldrsb.w	r3, [r8, r6]
 8012322:	f992 8023 	ldrsb.w	r8, [r2, #35]	@ 0x23
 8012326:	fb08 c303 	mla	r3, r8, r3, ip
            sum += cols_8b[1]*ksrc[36];
 801232a:	f997 c001 	ldrsb.w	ip, [r7, #1]
 801232e:	f992 8024 	ldrsb.w	r8, [r2, #36]	@ 0x24
 8012332:	fb08 330c 	mla	r3, r8, ip, r3
            sum += cols_8b[2]*ksrc[37];
 8012336:	f997 c002 	ldrsb.w	ip, [r7, #2]
 801233a:	f992 8025 	ldrsb.w	r8, [r2, #37]	@ 0x25
 801233e:	fb08 330c 	mla	r3, r8, ip, r3
            sum += cols_8b[3]*ksrc[38];
 8012342:	f997 c003 	ldrsb.w	ip, [r7, #3]
 8012346:	f992 8026 	ldrsb.w	r8, [r2, #38]	@ 0x26
 801234a:	fb08 330c 	mla	r3, r8, ip, r3
            sum += cols_8b[4]*ksrc[39];
 801234e:	f997 c004 	ldrsb.w	ip, [r7, #4]
 8012352:	f992 8027 	ldrsb.w	r8, [r2, #39]	@ 0x27
 8012356:	fb08 330c 	mla	r3, r8, ip, r3
            sum += cols_8b[5]*ksrc[40];
 801235a:	f997 c005 	ldrsb.w	ip, [r7, #5]
 801235e:	f992 8028 	ldrsb.w	r8, [r2, #40]	@ 0x28
 8012362:	fb08 330c 	mla	r3, r8, ip, r3
            sum += cols_8b[6]*ksrc[41];
 8012366:	f997 c006 	ldrsb.w	ip, [r7, #6]
 801236a:	f992 8029 	ldrsb.w	r8, [r2, #41]	@ 0x29
 801236e:	fb08 380c 	mla	r8, r8, ip, r3
            cols_8b += column_x + 6;
 8012372:	eb07 0c06 	add.w	ip, r7, r6
            sum += cols_8b[0]*ksrc[42];
 8012376:	57bb      	ldrsb	r3, [r7, r6]
 8012378:	f992 602a 	ldrsb.w	r6, [r2, #42]	@ 0x2a
 801237c:	fb06 8303 	mla	r3, r6, r3, r8
            sum += cols_8b[1]*ksrc[43];
 8012380:	f99c 6001 	ldrsb.w	r6, [ip, #1]
 8012384:	f992 702b 	ldrsb.w	r7, [r2, #43]	@ 0x2b
 8012388:	fb07 3306 	mla	r3, r7, r6, r3
            sum += cols_8b[2]*ksrc[44];
 801238c:	f99c 6002 	ldrsb.w	r6, [ip, #2]
 8012390:	f992 702c 	ldrsb.w	r7, [r2, #44]	@ 0x2c
 8012394:	fb07 3306 	mla	r3, r7, r6, r3
            sum += cols_8b[3]*ksrc[45];
 8012398:	f99c 6003 	ldrsb.w	r6, [ip, #3]
 801239c:	f992 702d 	ldrsb.w	r7, [r2, #45]	@ 0x2d
 80123a0:	fb07 3306 	mla	r3, r7, r6, r3
            sum += cols_8b[4]*ksrc[46];
 80123a4:	f99c 6004 	ldrsb.w	r6, [ip, #4]
 80123a8:	f992 702e 	ldrsb.w	r7, [r2, #46]	@ 0x2e
 80123ac:	fb07 3306 	mla	r3, r7, r6, r3
            sum += cols_8b[5]*ksrc[47];
 80123b0:	f99c 6005 	ldrsb.w	r6, [ip, #5]
 80123b4:	f992 702f 	ldrsb.w	r7, [r2, #47]	@ 0x2f
 80123b8:	fb07 3306 	mla	r3, r7, r6, r3
            sum += cols_8b[6]*ksrc[48];
 80123bc:	f99c 6006 	ldrsb.w	r6, [ip, #6]
 80123c0:	f992 7030 	ldrsb.w	r7, [r2, #48]	@ 0x30
 80123c4:	fb07 3306 	mla	r3, r7, r6, r3

            sum = (float) sum * *scales;
 80123c8:	ee07 3a90 	vmov	s15, r3
 80123cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80123d0:	ed95 7a00 	vldr	s14, [r5]
 80123d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80123d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80123dc:	ee17 3a90 	vmov	r3, s15
            sum += output_offset;
 80123e0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80123e2:	4433      	add	r3, r6
            mask_value = 1;
            if (sum < activation_min){
 80123e4:	42a3      	cmp	r3, r4
 80123e6:	db34      	blt.n	8012452 <depthwise_kernel7x7_stride2_inplace_kernel_CHW_fpreq_bitmask+0x7ec>
            mask_value = 1;
 80123e8:	f04f 0c01 	mov.w	ip, #1
                sum = activation_min;
                mask_value = 0;
            }
            if (sum > activation_max){
 80123ec:	9e17      	ldr	r6, [sp, #92]	@ 0x5c
 80123ee:	42b3      	cmp	r3, r6
 80123f0:	dd02      	ble.n	80123f8 <depthwise_kernel7x7_stride2_inplace_kernel_CHW_fpreq_bitmask+0x792>
                sum = activation_max;
 80123f2:	4633      	mov	r3, r6
                mask_value = 0;
 80123f4:	f04f 0c00 	mov.w	ip, #0
            }
            output[(i * output_x + output_x - 1) * channel_offset] = sum;
 80123f8:	9e01      	ldr	r6, [sp, #4]
 80123fa:	fb06 e60e 	mla	r6, r6, lr, lr
 80123fe:	3e01      	subs	r6, #1
 8012400:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8012402:	fb07 f606 	mul.w	r6, r7, r6
 8012406:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 8012408:	55bb      	strb	r3, [r7, r6]
            if (mask_value == 1)
 801240a:	f1bc 0f00 	cmp.w	ip, #0
 801240e:	d124      	bne.n	801245a <depthwise_kernel7x7_stride2_inplace_kernel_CHW_fpreq_bitmask+0x7f4>
                BIT_SET(output_mask[(i * output_x + output_x - 1) * channel_offset / 8], mask_idx);
            else
                BIT_CLEAR(output_mask[(i * output_x + output_x - 1) * channel_offset / 8], mask_idx);
 8012410:	4633      	mov	r3, r6
 8012412:	2e00      	cmp	r6, #0
 8012414:	db30      	blt.n	8012478 <depthwise_kernel7x7_stride2_inplace_kernel_CHW_fpreq_bitmask+0x812>
 8012416:	10de      	asrs	r6, r3, #3
 8012418:	f911 c006 	ldrsb.w	ip, [r1, r6]
 801241c:	2301      	movs	r3, #1
 801241e:	9f14      	ldr	r7, [sp, #80]	@ 0x50
 8012420:	40bb      	lsls	r3, r7
 8012422:	43db      	mvns	r3, r3
 8012424:	b2db      	uxtb	r3, r3
 8012426:	ea0c 0703 	and.w	r7, ip, r3
 801242a:	558f      	strb	r7, [r1, r6]

            cols_8b_iterptr += STRIDE;
 801242c:	3002      	adds	r0, #2
        }
        cols_8b_iterptr += 3 * 2 - (column_x & 1);
 801242e:	9e02      	ldr	r6, [sp, #8]
 8012430:	f006 0301 	and.w	r3, r6, #1
 8012434:	f1c3 0306 	rsb	r3, r3, #6
        cols_8b_iterptr += (STRIDE - 1) * (column_x + 3 * 2);
 8012438:	3606      	adds	r6, #6
 801243a:	4433      	add	r3, r6
 801243c:	4418      	add	r0, r3
    for (i = 0; i < output_y; i++) {
 801243e:	9b01      	ldr	r3, [sp, #4]
 8012440:	3301      	adds	r3, #1
 8012442:	9301      	str	r3, [sp, #4]
 8012444:	9b05      	ldr	r3, [sp, #20]
 8012446:	9e01      	ldr	r6, [sp, #4]
 8012448:	42b3      	cmp	r3, r6
 801244a:	dd17      	ble.n	801247c <depthwise_kernel7x7_stride2_inplace_kernel_CHW_fpreq_bitmask+0x816>
        for (j = 0; j < output_x / 2; j++) {
 801244c:	2600      	movs	r6, #0
 801244e:	9511      	str	r5, [sp, #68]	@ 0x44
 8012450:	e47e      	b.n	8011d50 <depthwise_kernel7x7_stride2_inplace_kernel_CHW_fpreq_bitmask+0xea>
                sum = activation_min;
 8012452:	4623      	mov	r3, r4
                mask_value = 0;
 8012454:	f04f 0c00 	mov.w	ip, #0
 8012458:	e7c8      	b.n	80123ec <depthwise_kernel7x7_stride2_inplace_kernel_CHW_fpreq_bitmask+0x786>
                BIT_SET(output_mask[(i * output_x + output_x - 1) * channel_offset / 8], mask_idx);
 801245a:	4633      	mov	r3, r6
 801245c:	2e00      	cmp	r6, #0
 801245e:	db09      	blt.n	8012474 <depthwise_kernel7x7_stride2_inplace_kernel_CHW_fpreq_bitmask+0x80e>
 8012460:	10db      	asrs	r3, r3, #3
 8012462:	f911 c003 	ldrsb.w	ip, [r1, r3]
 8012466:	2701      	movs	r7, #1
 8012468:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 801246a:	40b7      	lsls	r7, r6
 801246c:	ea4c 0607 	orr.w	r6, ip, r7
 8012470:	54ce      	strb	r6, [r1, r3]
 8012472:	e7db      	b.n	801242c <depthwise_kernel7x7_stride2_inplace_kernel_CHW_fpreq_bitmask+0x7c6>
 8012474:	1df3      	adds	r3, r6, #7
 8012476:	e7f3      	b.n	8012460 <depthwise_kernel7x7_stride2_inplace_kernel_CHW_fpreq_bitmask+0x7fa>
                BIT_CLEAR(output_mask[(i * output_x + output_x - 1) * channel_offset / 8], mask_idx);
 8012478:	1df3      	adds	r3, r6, #7
 801247a:	e7cc      	b.n	8012416 <depthwise_kernel7x7_stride2_inplace_kernel_CHW_fpreq_bitmask+0x7b0>
    }
}
 801247c:	b007      	add	sp, #28
 801247e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012482 <depthwise_kernel7x7_stride2_inplace_CHW_fpreq_bitmask>:
{
 8012482:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012486:	b091      	sub	sp, #68	@ 0x44
 8012488:	4680      	mov	r8, r0
 801248a:	460c      	mov	r4, r1
 801248c:	4616      	mov	r6, r2
 801248e:	461d      	mov	r5, r3
 8012490:	f8dd a068 	ldr.w	sl, [sp, #104]	@ 0x68
 8012494:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8012496:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8012498:	f8dd e074 	ldr.w	lr, [sp, #116]	@ 0x74
 801249c:	f8bd 1090 	ldrh.w	r1, [sp, #144]	@ 0x90
 80124a0:	910e      	str	r1, [sp, #56]	@ 0x38
 80124a2:	f8bd 1094 	ldrh.w	r1, [sp, #148]	@ 0x94
 80124a6:	910f      	str	r1, [sp, #60]	@ 0x3c
 80124a8:	f8dd b09c 	ldr.w	fp, [sp, #156]	@ 0x9c
 80124ac:	f99d 00a0 	ldrsb.w	r0, [sp, #160]	@ 0xa0
    q7_t* cols_8b = (q7_t* )cols_8b_start;
 80124b0:	4659      	mov	r1, fp
    for(i = 0; i < input_x + 6; i++){
 80124b2:	2700      	movs	r7, #0
 80124b4:	e005      	b.n	80124c2 <depthwise_kernel7x7_stride2_inplace_CHW_fpreq_bitmask+0x40>
        *cols_8b++ = PAD8;
 80124b6:	7008      	strb	r0, [r1, #0]
        *cols_8b++ = PAD8;
 80124b8:	7048      	strb	r0, [r1, #1]
        *cols_8b++ = PAD8;
 80124ba:	7088      	strb	r0, [r1, #2]
    for(i = 0; i < input_x + 6; i++){
 80124bc:	3701      	adds	r7, #1
 80124be:	b2bf      	uxth	r7, r7
        *cols_8b++ = PAD8;
 80124c0:	3103      	adds	r1, #3
    for(i = 0; i < input_x + 6; i++){
 80124c2:	f104 0905 	add.w	r9, r4, #5
 80124c6:	45b9      	cmp	r9, r7
 80124c8:	daf5      	bge.n	80124b6 <depthwise_kernel7x7_stride2_inplace_CHW_fpreq_bitmask+0x34>
    for(i = 0; i < input_y; i++){
 80124ca:	2700      	movs	r7, #0
 80124cc:	f8cd 9030 	str.w	r9, [sp, #48]	@ 0x30
 80124d0:	e010      	b.n	80124f4 <depthwise_kernel7x7_stride2_inplace_CHW_fpreq_bitmask+0x72>
        *cols_8b++ = PAD8;//left
 80124d2:	7008      	strb	r0, [r1, #0]
        *cols_8b++ = PAD8;//left
 80124d4:	7048      	strb	r0, [r1, #1]
        *cols_8b++ = PAD8;//left
 80124d6:	7088      	strb	r0, [r1, #2]
        cols_8b += input_x; //skip middle
 80124d8:	f104 0903 	add.w	r9, r4, #3
 80124dc:	eb01 0c09 	add.w	ip, r1, r9
        *cols_8b++ = PAD8;//right
 80124e0:	f801 0009 	strb.w	r0, [r1, r9]
        *cols_8b++ = PAD8;//right
 80124e4:	f88c 0001 	strb.w	r0, [ip, #1]
        *cols_8b++ = PAD8;//right
 80124e8:	f10c 0103 	add.w	r1, ip, #3
 80124ec:	f88c 0002 	strb.w	r0, [ip, #2]
    for(i = 0; i < input_y; i++){
 80124f0:	3701      	adds	r7, #1
 80124f2:	b2bf      	uxth	r7, r7
 80124f4:	42b7      	cmp	r7, r6
 80124f6:	d3ec      	bcc.n	80124d2 <depthwise_kernel7x7_stride2_inplace_CHW_fpreq_bitmask+0x50>
    for(i = 0; i < input_x + 6; i++){
 80124f8:	f8dd 9030 	ldr.w	r9, [sp, #48]	@ 0x30
 80124fc:	2700      	movs	r7, #0
 80124fe:	e005      	b.n	801250c <depthwise_kernel7x7_stride2_inplace_CHW_fpreq_bitmask+0x8a>
        *cols_8b++ = PAD8;
 8012500:	7008      	strb	r0, [r1, #0]
        *cols_8b++ = PAD8;
 8012502:	7048      	strb	r0, [r1, #1]
        *cols_8b++ = PAD8;
 8012504:	7088      	strb	r0, [r1, #2]
    for(i = 0; i < input_x + 6; i++){
 8012506:	3701      	adds	r7, #1
 8012508:	b2bf      	uxth	r7, r7
        *cols_8b++ = PAD8;
 801250a:	3103      	adds	r1, #3
    for(i = 0; i < input_x + 6; i++){
 801250c:	45b9      	cmp	r9, r7
 801250e:	daf7      	bge.n	8012500 <depthwise_kernel7x7_stride2_inplace_CHW_fpreq_bitmask+0x7e>
    for (c = 0; c < input_ch; c++){
 8012510:	2700      	movs	r7, #0
 8012512:	4670      	mov	r0, lr
 8012514:	e041      	b.n	801259a <depthwise_kernel7x7_stride2_inplace_CHW_fpreq_bitmask+0x118>
                *cols_8b++ = *src;// + input_offset;
 8012516:	f99c e000 	ldrsb.w	lr, [ip]
 801251a:	f801 eb01 	strb.w	lr, [r1], #1
                src += input_ch;
 801251e:	44ac      	add	ip, r5
            for(j = 0; j < input_x; j++){
 8012520:	3701      	adds	r7, #1
 8012522:	b2bf      	uxth	r7, r7
 8012524:	42a7      	cmp	r7, r4
 8012526:	d3f6      	bcc.n	8012516 <depthwise_kernel7x7_stride2_inplace_CHW_fpreq_bitmask+0x94>
            cols_8b += 3;//skip end
 8012528:	3103      	adds	r1, #3
        for(i = 0; i < input_y; i++){
 801252a:	f109 0901 	add.w	r9, r9, #1
 801252e:	fa1f f989 	uxth.w	r9, r9
 8012532:	45b1      	cmp	r9, r6
 8012534:	d202      	bcs.n	801253c <depthwise_kernel7x7_stride2_inplace_CHW_fpreq_bitmask+0xba>
            cols_8b += 3;//skip front
 8012536:	3103      	adds	r1, #3
            for(j = 0; j < input_x; j++){
 8012538:	2700      	movs	r7, #0
 801253a:	e7f3      	b.n	8012524 <depthwise_kernel7x7_stride2_inplace_CHW_fpreq_bitmask+0xa2>
        if (c % 8 == 0 && c > 1) output_mask++;
 801253c:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 801253e:	f017 0c07 	ands.w	ip, r7, #7
 8012542:	d104      	bne.n	801254e <depthwise_kernel7x7_stride2_inplace_CHW_fpreq_bitmask+0xcc>
 8012544:	2f01      	cmp	r7, #1
 8012546:	d902      	bls.n	801254e <depthwise_kernel7x7_stride2_inplace_CHW_fpreq_bitmask+0xcc>
 8012548:	9923      	ldr	r1, [sp, #140]	@ 0x8c
 801254a:	3101      	adds	r1, #1
 801254c:	9123      	str	r1, [sp, #140]	@ 0x8c
        depthwise_kernel7x7_stride2_inplace_kernel_CHW_fpreq_bitmask(output_y, output_x, bias++, biasR++, ksrc, scales++, inplace_out, output_mask, c % 8, output_offset,output_activation_min, output_activation_max,cols_8b_start, input_x, input_ch);
 801254e:	1d11      	adds	r1, r2, #4
 8012550:	910c      	str	r1, [sp, #48]	@ 0x30
 8012552:	f103 0904 	add.w	r9, r3, #4
 8012556:	1d01      	adds	r1, r0, #4
 8012558:	910d      	str	r1, [sp, #52]	@ 0x34
 801255a:	950a      	str	r5, [sp, #40]	@ 0x28
 801255c:	9409      	str	r4, [sp, #36]	@ 0x24
 801255e:	f8cd b020 	str.w	fp, [sp, #32]
 8012562:	9921      	ldr	r1, [sp, #132]	@ 0x84
 8012564:	9107      	str	r1, [sp, #28]
 8012566:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8012568:	9106      	str	r1, [sp, #24]
 801256a:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801256c:	9105      	str	r1, [sp, #20]
 801256e:	f8cd c010 	str.w	ip, [sp, #16]
 8012572:	9923      	ldr	r1, [sp, #140]	@ 0x8c
 8012574:	9103      	str	r1, [sp, #12]
 8012576:	f8cd 8008 	str.w	r8, [sp, #8]
 801257a:	9001      	str	r0, [sp, #4]
 801257c:	f8cd a000 	str.w	sl, [sp]
 8012580:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8012582:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8012584:	f7ff fb6f 	bl	8011c66 <depthwise_kernel7x7_stride2_inplace_kernel_CHW_fpreq_bitmask>
        ksrc += 49;
 8012588:	f10a 0a31 	add.w	sl, sl, #49	@ 0x31
        input++;
 801258c:	f108 0801 	add.w	r8, r8, #1
    for (c = 0; c < input_ch; c++){
 8012590:	3701      	adds	r7, #1
 8012592:	b2bf      	uxth	r7, r7
        depthwise_kernel7x7_stride2_inplace_kernel_CHW_fpreq_bitmask(output_y, output_x, bias++, biasR++, ksrc, scales++, inplace_out, output_mask, c % 8, output_offset,output_activation_min, output_activation_max,cols_8b_start, input_x, input_ch);
 8012594:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8012596:	464b      	mov	r3, r9
 8012598:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
    for (c = 0; c < input_ch; c++){
 801259a:	42af      	cmp	r7, r5
 801259c:	d208      	bcs.n	80125b0 <depthwise_kernel7x7_stride2_inplace_CHW_fpreq_bitmask+0x12e>
        cols_8b = (q7_t*)(cols_8b_start + 3 * (input_x) + 18); //skip 3 rows
 801259e:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 80125a2:	3112      	adds	r1, #18
 80125a4:	4459      	add	r1, fp
        src = input;
 80125a6:	46c4      	mov	ip, r8
        for(i = 0; i < input_y; i++){
 80125a8:	f04f 0900 	mov.w	r9, #0
 80125ac:	970c      	str	r7, [sp, #48]	@ 0x30
 80125ae:	e7c0      	b.n	8012532 <depthwise_kernel7x7_stride2_inplace_CHW_fpreq_bitmask+0xb0>
}
 80125b0:	b011      	add	sp, #68	@ 0x44
 80125b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080125b8 <getInput>:
int32_t *int32ptr;
float *fptr,*fptr2,*fptr3;

signed char* getInput() {
    return &buffer0[65536];
}
 80125b8:	4800      	ldr	r0, [pc, #0]	@ (80125bc <getInput+0x4>)
 80125ba:	4770      	bx	lr
 80125bc:	2001e750 	.word	0x2001e750

080125c0 <getOutput>:
signed char* getOutput() {
    return NNoutput;
}
 80125c0:	4800      	ldr	r0, [pc, #0]	@ (80125c4 <getOutput+0x4>)
 80125c2:	4770      	bx	lr
 80125c4:	20017054 	.word	0x20017054

080125c8 <invoke>:
void end2endinference(q7_t* img){
    invoke(NULL);
}
void invoke(float* labels){
 80125c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80125cc:	ed2d 8b02 	vpush	{d8}
 80125d0:	f5ad 4da3 	sub.w	sp, sp, #20864	@ 0x5180
 80125d4:	b087      	sub	sp, #28
 80125d6:	9011      	str	r0, [sp, #68]	@ 0x44
/* layer 0:CONV_2D */
convolve_s8_kernel3_inputch3_stride2_pad1_fpreq(&buffer0[65536],128,128,3,(const q7_t*) weight0,bias0,scales0,-128,0,-128,127,&buffer0[0],64,64,16,sbuf,kbuf,0);
 80125d8:	2300      	movs	r3, #0
 80125da:	930d      	str	r3, [sp, #52]	@ 0x34
 80125dc:	4bb8      	ldr	r3, [pc, #736]	@ (80128c0 <invoke+0x2f8>)
 80125de:	930c      	str	r3, [sp, #48]	@ 0x30
 80125e0:	4bb8      	ldr	r3, [pc, #736]	@ (80128c4 <invoke+0x2fc>)
 80125e2:	f503 37e0 	add.w	r7, r3, #114688	@ 0x1c000
 80125e6:	970b      	str	r7, [sp, #44]	@ 0x2c
 80125e8:	f04f 0810 	mov.w	r8, #16
 80125ec:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80125f0:	f04f 0a40 	mov.w	sl, #64	@ 0x40
 80125f4:	f8cd a024 	str.w	sl, [sp, #36]	@ 0x24
 80125f8:	f8cd a020 	str.w	sl, [sp, #32]
 80125fc:	f5a3 3680 	sub.w	r6, r3, #65536	@ 0x10000
 8012600:	9607      	str	r6, [sp, #28]
 8012602:	f04f 0b7f 	mov.w	fp, #127	@ 0x7f
 8012606:	f8cd b018 	str.w	fp, [sp, #24]
 801260a:	f06f 047f 	mvn.w	r4, #127	@ 0x7f
 801260e:	9405      	str	r4, [sp, #20]
 8012610:	2200      	movs	r2, #0
 8012612:	9204      	str	r2, [sp, #16]
 8012614:	9403      	str	r4, [sp, #12]
 8012616:	4bac      	ldr	r3, [pc, #688]	@ (80128c8 <invoke+0x300>)
 8012618:	9302      	str	r3, [sp, #8]
 801261a:	4bac      	ldr	r3, [pc, #688]	@ (80128cc <invoke+0x304>)
 801261c:	9301      	str	r3, [sp, #4]
 801261e:	4bac      	ldr	r3, [pc, #688]	@ (80128d0 <invoke+0x308>)
 8012620:	9300      	str	r3, [sp, #0]
 8012622:	2303      	movs	r3, #3
 8012624:	2280      	movs	r2, #128	@ 0x80
 8012626:	4611      	mov	r1, r2
 8012628:	f506 3080 	add.w	r0, r6, #65536	@ 0x10000
 801262c:	f00c ff0c 	bl	801f448 <convolve_s8_kernel3_inputch3_stride2_pad1_fpreq>
/* layer 1:DEPTHWISE_CONV_2D */
depthwise_kernel3x3_stride1_inplace_CHW_fpreq(&buffer0[0],64,64,16,(const q7_t*) CHWweight1,offsetBias1,offsetRBias1,scales1,-128,128,-128,127,&buffer0[0],64,64,16,sbuf,-128);
 8012630:	940d      	str	r4, [sp, #52]	@ 0x34
 8012632:	970c      	str	r7, [sp, #48]	@ 0x30
 8012634:	f8cd 802c 	str.w	r8, [sp, #44]	@ 0x2c
 8012638:	f8cd a028 	str.w	sl, [sp, #40]	@ 0x28
 801263c:	f8cd a024 	str.w	sl, [sp, #36]	@ 0x24
 8012640:	9608      	str	r6, [sp, #32]
 8012642:	f8cd b01c 	str.w	fp, [sp, #28]
 8012646:	9406      	str	r4, [sp, #24]
 8012648:	2280      	movs	r2, #128	@ 0x80
 801264a:	9205      	str	r2, [sp, #20]
 801264c:	9404      	str	r4, [sp, #16]
 801264e:	4ba1      	ldr	r3, [pc, #644]	@ (80128d4 <invoke+0x30c>)
 8012650:	9303      	str	r3, [sp, #12]
 8012652:	4ba1      	ldr	r3, [pc, #644]	@ (80128d8 <invoke+0x310>)
 8012654:	9302      	str	r3, [sp, #8]
 8012656:	4ba1      	ldr	r3, [pc, #644]	@ (80128dc <invoke+0x314>)
 8012658:	9301      	str	r3, [sp, #4]
 801265a:	4ba1      	ldr	r3, [pc, #644]	@ (80128e0 <invoke+0x318>)
 801265c:	9300      	str	r3, [sp, #0]
 801265e:	4643      	mov	r3, r8
 8012660:	4652      	mov	r2, sl
 8012662:	4651      	mov	r1, sl
 8012664:	4630      	mov	r0, r6
 8012666:	f7fd fb4d 	bl	800fd04 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq>
/* layer 2:CONV_2D */
convolve_1x1_s8_ch16_fpreq(&buffer0[0],64,64,16,(const q7_t*) weight2,bias2,scales2,-6,128,-128,127,&buffer0[147456],64,64,8,sbuf);
 801266a:	970b      	str	r7, [sp, #44]	@ 0x2c
 801266c:	2508      	movs	r5, #8
 801266e:	950a      	str	r5, [sp, #40]	@ 0x28
 8012670:	f8cd a024 	str.w	sl, [sp, #36]	@ 0x24
 8012674:	f8cd a020 	str.w	sl, [sp, #32]
 8012678:	f506 3210 	add.w	r2, r6, #147456	@ 0x24000
 801267c:	9207      	str	r2, [sp, #28]
 801267e:	f8cd b018 	str.w	fp, [sp, #24]
 8012682:	9405      	str	r4, [sp, #20]
 8012684:	2280      	movs	r2, #128	@ 0x80
 8012686:	9204      	str	r2, [sp, #16]
 8012688:	f06f 0205 	mvn.w	r2, #5
 801268c:	9203      	str	r2, [sp, #12]
 801268e:	4b95      	ldr	r3, [pc, #596]	@ (80128e4 <invoke+0x31c>)
 8012690:	9302      	str	r3, [sp, #8]
 8012692:	4b95      	ldr	r3, [pc, #596]	@ (80128e8 <invoke+0x320>)
 8012694:	9301      	str	r3, [sp, #4]
 8012696:	4b95      	ldr	r3, [pc, #596]	@ (80128ec <invoke+0x324>)
 8012698:	9300      	str	r3, [sp, #0]
 801269a:	4643      	mov	r3, r8
 801269c:	4652      	mov	r2, sl
 801269e:	4651      	mov	r1, sl
 80126a0:	4630      	mov	r0, r6
 80126a2:	f00b ff83 	bl	801e5ac <convolve_1x1_s8_ch16_fpreq>
/* layer 3:CONV_2D */
convolve_1x1_s8_ch8_fpreq(&buffer0[147456],64,64,8,(const q7_t*) weight3,bias3,scales3,-128,6,-128,127,&buffer0[16384],64,64,32,sbuf);
 80126a6:	970b      	str	r7, [sp, #44]	@ 0x2c
 80126a8:	f04f 0920 	mov.w	r9, #32
 80126ac:	f8cd 9028 	str.w	r9, [sp, #40]	@ 0x28
 80126b0:	f8cd a024 	str.w	sl, [sp, #36]	@ 0x24
 80126b4:	f8cd a020 	str.w	sl, [sp, #32]
 80126b8:	f506 4380 	add.w	r3, r6, #16384	@ 0x4000
 80126bc:	9307      	str	r3, [sp, #28]
 80126be:	f8cd b018 	str.w	fp, [sp, #24]
 80126c2:	9405      	str	r4, [sp, #20]
 80126c4:	2306      	movs	r3, #6
 80126c6:	9304      	str	r3, [sp, #16]
 80126c8:	9403      	str	r4, [sp, #12]
 80126ca:	4b89      	ldr	r3, [pc, #548]	@ (80128f0 <invoke+0x328>)
 80126cc:	9302      	str	r3, [sp, #8]
 80126ce:	4b89      	ldr	r3, [pc, #548]	@ (80128f4 <invoke+0x32c>)
 80126d0:	9301      	str	r3, [sp, #4]
 80126d2:	4b89      	ldr	r3, [pc, #548]	@ (80128f8 <invoke+0x330>)
 80126d4:	9300      	str	r3, [sp, #0]
 80126d6:	462b      	mov	r3, r5
 80126d8:	4652      	mov	r2, sl
 80126da:	4651      	mov	r1, sl
 80126dc:	f506 3010 	add.w	r0, r6, #147456	@ 0x24000
 80126e0:	f00c f9f2 	bl	801eac8 <convolve_1x1_s8_ch8_fpreq>
/* layer 4:DEPTHWISE_CONV_2D */
depthwise_kernel3x3_stride2_inplace_CHW_fpreq(&buffer0[16384],64,64,32,(const q7_t*) CHWweight4,offsetBias4,offsetRBias4,scales4,-128,128,-128,127,&buffer0[16384],32,32,32,sbuf,-128);
 80126e4:	940d      	str	r4, [sp, #52]	@ 0x34
 80126e6:	970c      	str	r7, [sp, #48]	@ 0x30
 80126e8:	f8cd 902c 	str.w	r9, [sp, #44]	@ 0x2c
 80126ec:	f8cd 9028 	str.w	r9, [sp, #40]	@ 0x28
 80126f0:	f8cd 9024 	str.w	r9, [sp, #36]	@ 0x24
 80126f4:	f506 4380 	add.w	r3, r6, #16384	@ 0x4000
 80126f8:	9308      	str	r3, [sp, #32]
 80126fa:	f8cd b01c 	str.w	fp, [sp, #28]
 80126fe:	9406      	str	r4, [sp, #24]
 8012700:	2280      	movs	r2, #128	@ 0x80
 8012702:	9205      	str	r2, [sp, #20]
 8012704:	9404      	str	r4, [sp, #16]
 8012706:	4b7d      	ldr	r3, [pc, #500]	@ (80128fc <invoke+0x334>)
 8012708:	9303      	str	r3, [sp, #12]
 801270a:	4b7d      	ldr	r3, [pc, #500]	@ (8012900 <invoke+0x338>)
 801270c:	9302      	str	r3, [sp, #8]
 801270e:	4b7d      	ldr	r3, [pc, #500]	@ (8012904 <invoke+0x33c>)
 8012710:	9301      	str	r3, [sp, #4]
 8012712:	4b7d      	ldr	r3, [pc, #500]	@ (8012908 <invoke+0x340>)
 8012714:	9300      	str	r3, [sp, #0]
 8012716:	464b      	mov	r3, r9
 8012718:	4652      	mov	r2, sl
 801271a:	4651      	mov	r1, sl
 801271c:	f506 4080 	add.w	r0, r6, #16384	@ 0x4000
 8012720:	f7fd feda 	bl	80104d8 <depthwise_kernel3x3_stride2_inplace_CHW_fpreq>
/* layer 5:CONV_2D */
convolve_1x1_s8_fpreq(&buffer0[16384],32,32,32,(const q7_t*) weight5,bias5,scales5,0,128,-128,127,&buffer0[0],32,32,16,sbuf);
 8012724:	970b      	str	r7, [sp, #44]	@ 0x2c
 8012726:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 801272a:	f8cd 9024 	str.w	r9, [sp, #36]	@ 0x24
 801272e:	f8cd 9020 	str.w	r9, [sp, #32]
 8012732:	9607      	str	r6, [sp, #28]
 8012734:	f8cd b018 	str.w	fp, [sp, #24]
 8012738:	9405      	str	r4, [sp, #20]
 801273a:	2280      	movs	r2, #128	@ 0x80
 801273c:	9204      	str	r2, [sp, #16]
 801273e:	2200      	movs	r2, #0
 8012740:	9203      	str	r2, [sp, #12]
 8012742:	4b72      	ldr	r3, [pc, #456]	@ (801290c <invoke+0x344>)
 8012744:	9302      	str	r3, [sp, #8]
 8012746:	4b72      	ldr	r3, [pc, #456]	@ (8012910 <invoke+0x348>)
 8012748:	9301      	str	r3, [sp, #4]
 801274a:	4b72      	ldr	r3, [pc, #456]	@ (8012914 <invoke+0x34c>)
 801274c:	9300      	str	r3, [sp, #0]
 801274e:	464b      	mov	r3, r9
 8012750:	464a      	mov	r2, r9
 8012752:	4649      	mov	r1, r9
 8012754:	f506 4080 	add.w	r0, r6, #16384	@ 0x4000
 8012758:	f00c fa90 	bl	801ec7c <convolve_1x1_s8_fpreq>
/* layer 6:CONV_2D */
convolve_1x1_s8_ch16_fpreq(&buffer0[0],32,32,16,(const q7_t*) weight6,bias6,scales6,-128,0,-128,127,&buffer0[16384],32,32,48,sbuf);
 801275c:	970b      	str	r7, [sp, #44]	@ 0x2c
 801275e:	2230      	movs	r2, #48	@ 0x30
 8012760:	920a      	str	r2, [sp, #40]	@ 0x28
 8012762:	f8cd 9024 	str.w	r9, [sp, #36]	@ 0x24
 8012766:	f8cd 9020 	str.w	r9, [sp, #32]
 801276a:	f506 4380 	add.w	r3, r6, #16384	@ 0x4000
 801276e:	9307      	str	r3, [sp, #28]
 8012770:	f8cd b018 	str.w	fp, [sp, #24]
 8012774:	9405      	str	r4, [sp, #20]
 8012776:	2200      	movs	r2, #0
 8012778:	9204      	str	r2, [sp, #16]
 801277a:	9403      	str	r4, [sp, #12]
 801277c:	4b66      	ldr	r3, [pc, #408]	@ (8012918 <invoke+0x350>)
 801277e:	9302      	str	r3, [sp, #8]
 8012780:	4b66      	ldr	r3, [pc, #408]	@ (801291c <invoke+0x354>)
 8012782:	9301      	str	r3, [sp, #4]
 8012784:	4b66      	ldr	r3, [pc, #408]	@ (8012920 <invoke+0x358>)
 8012786:	9300      	str	r3, [sp, #0]
 8012788:	4643      	mov	r3, r8
 801278a:	464a      	mov	r2, r9
 801278c:	4649      	mov	r1, r9
 801278e:	4630      	mov	r0, r6
 8012790:	f00b ff0c 	bl	801e5ac <convolve_1x1_s8_ch16_fpreq>
/* layer 7:DEPTHWISE_CONV_2D */
depthwise_kernel3x3_stride1_inplace_CHW_fpreq(&buffer0[16384],32,32,48,(const q7_t*) CHWweight7,offsetBias7,offsetRBias7,scales7,-128,128,-128,127,&buffer0[16384],32,32,48,sbuf,-128);
 8012794:	940d      	str	r4, [sp, #52]	@ 0x34
 8012796:	970c      	str	r7, [sp, #48]	@ 0x30
 8012798:	2230      	movs	r2, #48	@ 0x30
 801279a:	920b      	str	r2, [sp, #44]	@ 0x2c
 801279c:	f8cd 9028 	str.w	r9, [sp, #40]	@ 0x28
 80127a0:	f8cd 9024 	str.w	r9, [sp, #36]	@ 0x24
 80127a4:	f506 4380 	add.w	r3, r6, #16384	@ 0x4000
 80127a8:	9308      	str	r3, [sp, #32]
 80127aa:	f8cd b01c 	str.w	fp, [sp, #28]
 80127ae:	9406      	str	r4, [sp, #24]
 80127b0:	2280      	movs	r2, #128	@ 0x80
 80127b2:	9205      	str	r2, [sp, #20]
 80127b4:	9404      	str	r4, [sp, #16]
 80127b6:	4b5b      	ldr	r3, [pc, #364]	@ (8012924 <invoke+0x35c>)
 80127b8:	9303      	str	r3, [sp, #12]
 80127ba:	4b5b      	ldr	r3, [pc, #364]	@ (8012928 <invoke+0x360>)
 80127bc:	9302      	str	r3, [sp, #8]
 80127be:	4b5b      	ldr	r3, [pc, #364]	@ (801292c <invoke+0x364>)
 80127c0:	9301      	str	r3, [sp, #4]
 80127c2:	4b5b      	ldr	r3, [pc, #364]	@ (8012930 <invoke+0x368>)
 80127c4:	9300      	str	r3, [sp, #0]
 80127c6:	2330      	movs	r3, #48	@ 0x30
 80127c8:	464a      	mov	r2, r9
 80127ca:	4649      	mov	r1, r9
 80127cc:	f506 4080 	add.w	r0, r6, #16384	@ 0x4000
 80127d0:	f7fd fa98 	bl	800fd04 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq>
/* layer 8:CONV_2D */
convolve_1x1_s8_ch48_fpreq(&buffer0[16384],32,32,48,(const q7_t*) weight8,bias8,scales8,14,128,-128,127,&buffer0[65536],32,32,16,sbuf);
 80127d4:	970b      	str	r7, [sp, #44]	@ 0x2c
 80127d6:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80127da:	f8cd 9024 	str.w	r9, [sp, #36]	@ 0x24
 80127de:	f8cd 9020 	str.w	r9, [sp, #32]
 80127e2:	f506 3380 	add.w	r3, r6, #65536	@ 0x10000
 80127e6:	9307      	str	r3, [sp, #28]
 80127e8:	f8cd b018 	str.w	fp, [sp, #24]
 80127ec:	9405      	str	r4, [sp, #20]
 80127ee:	2380      	movs	r3, #128	@ 0x80
 80127f0:	9304      	str	r3, [sp, #16]
 80127f2:	230e      	movs	r3, #14
 80127f4:	9303      	str	r3, [sp, #12]
 80127f6:	4b4f      	ldr	r3, [pc, #316]	@ (8012934 <invoke+0x36c>)
 80127f8:	9302      	str	r3, [sp, #8]
 80127fa:	4b4f      	ldr	r3, [pc, #316]	@ (8012938 <invoke+0x370>)
 80127fc:	9301      	str	r3, [sp, #4]
 80127fe:	4b4f      	ldr	r3, [pc, #316]	@ (801293c <invoke+0x374>)
 8012800:	9300      	str	r3, [sp, #0]
 8012802:	2330      	movs	r3, #48	@ 0x30
 8012804:	464a      	mov	r2, r9
 8012806:	4649      	mov	r1, r9
 8012808:	f506 4080 	add.w	r0, r6, #16384	@ 0x4000
 801280c:	f00c f882 	bl	801e914 <convolve_1x1_s8_ch48_fpreq>
/* layer 9:ADD */
add_fpreq(16384, &buffer0[0],0.057521824,0,&buffer0[65536],0.10736182,14,0.10652236,12,&buffer0[81920]);
 8012810:	ed9f 8a4b 	vldr	s16, [pc, #300]	@ 8012940 <invoke+0x378>
 8012814:	f506 33a0 	add.w	r3, r6, #81920	@ 0x14000
 8012818:	eef2 2a08 	vmov.f32	s5, #40	@ 0x41400000  12.0
 801281c:	ed9f 2a49 	vldr	s4, [pc, #292]	@ 8012944 <invoke+0x37c>
 8012820:	eef2 1a0c 	vmov.f32	s3, #44	@ 0x41600000  14.0
 8012824:	ed9f 1a48 	vldr	s2, [pc, #288]	@ 8012948 <invoke+0x380>
 8012828:	f5a3 4280 	sub.w	r2, r3, #16384	@ 0x4000
 801282c:	eef0 0a48 	vmov.f32	s1, s16
 8012830:	ed9f 0a46 	vldr	s0, [pc, #280]	@ 801294c <invoke+0x384>
 8012834:	4631      	mov	r1, r6
 8012836:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 801283a:	f00b fe00 	bl	801e43e <add_fpreq>
/* layer 10:CONV_2D */
convolve_1x1_s8_ch16_fpreq(&buffer0[81920],32,32,16,(const q7_t*) weight9,bias9,scales9,-128,-12,-128,127,&buffer0[6144],32,32,48,sbuf);
 801283e:	970b      	str	r7, [sp, #44]	@ 0x2c
 8012840:	2330      	movs	r3, #48	@ 0x30
 8012842:	930a      	str	r3, [sp, #40]	@ 0x28
 8012844:	f8cd 9024 	str.w	r9, [sp, #36]	@ 0x24
 8012848:	f8cd 9020 	str.w	r9, [sp, #32]
 801284c:	f506 5ac0 	add.w	sl, r6, #6144	@ 0x1800
 8012850:	f8cd a01c 	str.w	sl, [sp, #28]
 8012854:	f8cd b018 	str.w	fp, [sp, #24]
 8012858:	9405      	str	r4, [sp, #20]
 801285a:	f06f 030b 	mvn.w	r3, #11
 801285e:	9304      	str	r3, [sp, #16]
 8012860:	9403      	str	r4, [sp, #12]
 8012862:	4b3b      	ldr	r3, [pc, #236]	@ (8012950 <invoke+0x388>)
 8012864:	9302      	str	r3, [sp, #8]
 8012866:	4b3b      	ldr	r3, [pc, #236]	@ (8012954 <invoke+0x38c>)
 8012868:	9301      	str	r3, [sp, #4]
 801286a:	4b3b      	ldr	r3, [pc, #236]	@ (8012958 <invoke+0x390>)
 801286c:	9300      	str	r3, [sp, #0]
 801286e:	4643      	mov	r3, r8
 8012870:	464a      	mov	r2, r9
 8012872:	4649      	mov	r1, r9
 8012874:	f506 30a0 	add.w	r0, r6, #81920	@ 0x14000
 8012878:	f00b fe98 	bl	801e5ac <convolve_1x1_s8_ch16_fpreq>
/* layer 11:DEPTHWISE_CONV_2D */
depthwise_kernel7x7_stride2_inplace_CHW_fpreq(&buffer0[6144],32,32,48,(const q7_t*) CHWweight10,offsetBias10,offsetRBias10,scales10,-128,128,-128,127,&buffer0[6144],16,16,48,sbuf,-128);
 801287c:	940d      	str	r4, [sp, #52]	@ 0x34
 801287e:	970c      	str	r7, [sp, #48]	@ 0x30
 8012880:	2330      	movs	r3, #48	@ 0x30
 8012882:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012884:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8012888:	f8cd 8024 	str.w	r8, [sp, #36]	@ 0x24
 801288c:	f8cd a020 	str.w	sl, [sp, #32]
 8012890:	f8cd b01c 	str.w	fp, [sp, #28]
 8012894:	9406      	str	r4, [sp, #24]
 8012896:	2380      	movs	r3, #128	@ 0x80
 8012898:	9305      	str	r3, [sp, #20]
 801289a:	9404      	str	r4, [sp, #16]
 801289c:	4b2f      	ldr	r3, [pc, #188]	@ (801295c <invoke+0x394>)
 801289e:	9303      	str	r3, [sp, #12]
 80128a0:	4b2f      	ldr	r3, [pc, #188]	@ (8012960 <invoke+0x398>)
 80128a2:	9302      	str	r3, [sp, #8]
 80128a4:	4b2f      	ldr	r3, [pc, #188]	@ (8012964 <invoke+0x39c>)
 80128a6:	9301      	str	r3, [sp, #4]
 80128a8:	4b2f      	ldr	r3, [pc, #188]	@ (8012968 <invoke+0x3a0>)
 80128aa:	9300      	str	r3, [sp, #0]
 80128ac:	2330      	movs	r3, #48	@ 0x30
 80128ae:	464a      	mov	r2, r9
 80128b0:	4649      	mov	r1, r9
 80128b2:	4650      	mov	r0, sl
 80128b4:	f7ff f948 	bl	8011b48 <depthwise_kernel7x7_stride2_inplace_CHW_fpreq>
/* layer 12:CONV_2D */
convolve_1x1_s8_ch48_fpreq(&buffer0[6144],16,16,48,(const q7_t*) weight11,bias11,scales11,-5,128,-128,127,&buffer0[0],16,16,24,sbuf);
 80128b8:	970b      	str	r7, [sp, #44]	@ 0x2c
 80128ba:	2318      	movs	r3, #24
 80128bc:	e056      	b.n	801296c <invoke+0x3a4>
 80128be:	bf00      	nop
 80128c0:	2003c958 	.word	0x2003c958
 80128c4:	2001e750 	.word	0x2001e750
 80128c8:	080ad164 	.word	0x080ad164
 80128cc:	080ad1a4 	.word	0x080ad1a4
 80128d0:	080ad1e4 	.word	0x080ad1e4
 80128d4:	080ad014 	.word	0x080ad014
 80128d8:	080ad054 	.word	0x080ad054
 80128dc:	080ad094 	.word	0x080ad094
 80128e0:	080ad0d4 	.word	0x080ad0d4
 80128e4:	080acf54 	.word	0x080acf54
 80128e8:	080acf74 	.word	0x080acf74
 80128ec:	080acf94 	.word	0x080acf94
 80128f0:	080acd54 	.word	0x080acd54
 80128f4:	080acdd4 	.word	0x080acdd4
 80128f8:	080ace54 	.word	0x080ace54
 80128fc:	080acab4 	.word	0x080acab4
 8012900:	080acb34 	.word	0x080acb34
 8012904:	080acbb4 	.word	0x080acbb4
 8012908:	080acc34 	.word	0x080acc34
 801290c:	080ac834 	.word	0x080ac834
 8012910:	080ac874 	.word	0x080ac874
 8012914:	080ac8b4 	.word	0x080ac8b4
 8012918:	080ac3b4 	.word	0x080ac3b4
 801291c:	080ac474 	.word	0x080ac474
 8012920:	080ac534 	.word	0x080ac534
 8012924:	080abfc4 	.word	0x080abfc4
 8012928:	080ac084 	.word	0x080ac084
 801292c:	080ac144 	.word	0x080ac144
 8012930:	080ac204 	.word	0x080ac204
 8012934:	080abc44 	.word	0x080abc44
 8012938:	080abc84 	.word	0x080abc84
 801293c:	080abcc4 	.word	0x080abcc4
 8012940:	00000000 	.word	0x00000000
 8012944:	3dda2865 	.word	0x3dda2865
 8012948:	3ddbe084 	.word	0x3ddbe084
 801294c:	3d6b9c01 	.word	0x3d6b9c01
 8012950:	080ab7c4 	.word	0x080ab7c4
 8012954:	080ab884 	.word	0x080ab884
 8012958:	080ab944 	.word	0x080ab944
 801295c:	080aac54 	.word	0x080aac54
 8012960:	080aad14 	.word	0x080aad14
 8012964:	080aadd4 	.word	0x080aadd4
 8012968:	080aae94 	.word	0x080aae94
 801296c:	930a      	str	r3, [sp, #40]	@ 0x28
 801296e:	f8cd 8024 	str.w	r8, [sp, #36]	@ 0x24
 8012972:	f8cd 8020 	str.w	r8, [sp, #32]
 8012976:	9607      	str	r6, [sp, #28]
 8012978:	f8cd b018 	str.w	fp, [sp, #24]
 801297c:	9405      	str	r4, [sp, #20]
 801297e:	2380      	movs	r3, #128	@ 0x80
 8012980:	9304      	str	r3, [sp, #16]
 8012982:	f06f 0304 	mvn.w	r3, #4
 8012986:	9303      	str	r3, [sp, #12]
 8012988:	4bb4      	ldr	r3, [pc, #720]	@ (8012c5c <invoke+0x694>)
 801298a:	9302      	str	r3, [sp, #8]
 801298c:	4bb4      	ldr	r3, [pc, #720]	@ (8012c60 <invoke+0x698>)
 801298e:	9301      	str	r3, [sp, #4]
 8012990:	4bb4      	ldr	r3, [pc, #720]	@ (8012c64 <invoke+0x69c>)
 8012992:	9300      	str	r3, [sp, #0]
 8012994:	2330      	movs	r3, #48	@ 0x30
 8012996:	4642      	mov	r2, r8
 8012998:	4641      	mov	r1, r8
 801299a:	4650      	mov	r0, sl
 801299c:	f00b ffba 	bl	801e914 <convolve_1x1_s8_ch48_fpreq>
/* layer 13:CONV_2D */
convolve_1x1_s8_ch24_fpreq(&buffer0[0],16,16,24,(const q7_t*) weight12,bias12,scales12,-128,5,-128,127,&buffer0[6144],16,16,120,sbuf);
 80129a0:	970b      	str	r7, [sp, #44]	@ 0x2c
 80129a2:	f04f 0978 	mov.w	r9, #120	@ 0x78
 80129a6:	f8cd 9028 	str.w	r9, [sp, #40]	@ 0x28
 80129aa:	f8cd 8024 	str.w	r8, [sp, #36]	@ 0x24
 80129ae:	f8cd 8020 	str.w	r8, [sp, #32]
 80129b2:	f8cd a01c 	str.w	sl, [sp, #28]
 80129b6:	f8cd b018 	str.w	fp, [sp, #24]
 80129ba:	9405      	str	r4, [sp, #20]
 80129bc:	2305      	movs	r3, #5
 80129be:	9304      	str	r3, [sp, #16]
 80129c0:	9403      	str	r4, [sp, #12]
 80129c2:	4ba9      	ldr	r3, [pc, #676]	@ (8012c68 <invoke+0x6a0>)
 80129c4:	9302      	str	r3, [sp, #8]
 80129c6:	4ba9      	ldr	r3, [pc, #676]	@ (8012c6c <invoke+0x6a4>)
 80129c8:	9301      	str	r3, [sp, #4]
 80129ca:	4ba9      	ldr	r3, [pc, #676]	@ (8012c70 <invoke+0x6a8>)
 80129cc:	9300      	str	r3, [sp, #0]
 80129ce:	2318      	movs	r3, #24
 80129d0:	4642      	mov	r2, r8
 80129d2:	4641      	mov	r1, r8
 80129d4:	4630      	mov	r0, r6
 80129d6:	f00b fec3 	bl	801e760 <convolve_1x1_s8_ch24_fpreq>
/* layer 14:DEPTHWISE_CONV_2D */
depthwise_kernel3x3_stride1_inplace_CHW_fpreq(&buffer0[6144],16,16,120,(const q7_t*) CHWweight13,offsetBias13,offsetRBias13,scales13,-128,128,-128,127,&buffer0[6144],16,16,120,sbuf,-128);
 80129da:	940d      	str	r4, [sp, #52]	@ 0x34
 80129dc:	970c      	str	r7, [sp, #48]	@ 0x30
 80129de:	f8cd 902c 	str.w	r9, [sp, #44]	@ 0x2c
 80129e2:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80129e6:	f8cd 8024 	str.w	r8, [sp, #36]	@ 0x24
 80129ea:	f8cd a020 	str.w	sl, [sp, #32]
 80129ee:	f8cd b01c 	str.w	fp, [sp, #28]
 80129f2:	9406      	str	r4, [sp, #24]
 80129f4:	2380      	movs	r3, #128	@ 0x80
 80129f6:	9305      	str	r3, [sp, #20]
 80129f8:	9404      	str	r4, [sp, #16]
 80129fa:	4b9e      	ldr	r3, [pc, #632]	@ (8012c74 <invoke+0x6ac>)
 80129fc:	9303      	str	r3, [sp, #12]
 80129fe:	4b9e      	ldr	r3, [pc, #632]	@ (8012c78 <invoke+0x6b0>)
 8012a00:	9302      	str	r3, [sp, #8]
 8012a02:	4b9e      	ldr	r3, [pc, #632]	@ (8012c7c <invoke+0x6b4>)
 8012a04:	9301      	str	r3, [sp, #4]
 8012a06:	4b9e      	ldr	r3, [pc, #632]	@ (8012c80 <invoke+0x6b8>)
 8012a08:	9300      	str	r3, [sp, #0]
 8012a0a:	464b      	mov	r3, r9
 8012a0c:	4642      	mov	r2, r8
 8012a0e:	4641      	mov	r1, r8
 8012a10:	4650      	mov	r0, sl
 8012a12:	f7fd f977 	bl	800fd04 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq>
/* layer 15:CONV_2D */
convolve_1x1_s8_fpreq(&buffer0[6144],16,16,120,(const q7_t*) weight14,bias14,scales14,-34,128,-128,127,&buffer0[36864],16,16,24,sbuf);
 8012a16:	970b      	str	r7, [sp, #44]	@ 0x2c
 8012a18:	2318      	movs	r3, #24
 8012a1a:	930a      	str	r3, [sp, #40]	@ 0x28
 8012a1c:	f8cd 8024 	str.w	r8, [sp, #36]	@ 0x24
 8012a20:	f8cd 8020 	str.w	r8, [sp, #32]
 8012a24:	f506 4310 	add.w	r3, r6, #36864	@ 0x9000
 8012a28:	9307      	str	r3, [sp, #28]
 8012a2a:	f8cd b018 	str.w	fp, [sp, #24]
 8012a2e:	9405      	str	r4, [sp, #20]
 8012a30:	2380      	movs	r3, #128	@ 0x80
 8012a32:	9304      	str	r3, [sp, #16]
 8012a34:	f06f 0321 	mvn.w	r3, #33	@ 0x21
 8012a38:	9303      	str	r3, [sp, #12]
 8012a3a:	4b92      	ldr	r3, [pc, #584]	@ (8012c84 <invoke+0x6bc>)
 8012a3c:	9302      	str	r3, [sp, #8]
 8012a3e:	4b92      	ldr	r3, [pc, #584]	@ (8012c88 <invoke+0x6c0>)
 8012a40:	9301      	str	r3, [sp, #4]
 8012a42:	4b92      	ldr	r3, [pc, #584]	@ (8012c8c <invoke+0x6c4>)
 8012a44:	9300      	str	r3, [sp, #0]
 8012a46:	464b      	mov	r3, r9
 8012a48:	4642      	mov	r2, r8
 8012a4a:	4641      	mov	r1, r8
 8012a4c:	4650      	mov	r0, sl
 8012a4e:	f00c f915 	bl	801ec7c <convolve_1x1_s8_fpreq>
/* layer 16:ADD */
add_fpreq(6144, &buffer0[0],0.04381648,-5,&buffer0[36864],0.05460287,-34,0.06156369,-11,&buffer0[43008]);
 8012a52:	f506 4328 	add.w	r3, r6, #43008	@ 0xa800
 8012a56:	eefa 2a06 	vmov.f32	s5, #166	@ 0xc1300000 -11.0
 8012a5a:	ed9f 2a8d 	vldr	s4, [pc, #564]	@ 8012c90 <invoke+0x6c8>
 8012a5e:	eddf 1a8d 	vldr	s3, [pc, #564]	@ 8012c94 <invoke+0x6cc>
 8012a62:	ed9f 1a8d 	vldr	s2, [pc, #564]	@ 8012c98 <invoke+0x6d0>
 8012a66:	f5a3 52c0 	sub.w	r2, r3, #6144	@ 0x1800
 8012a6a:	eef9 0a04 	vmov.f32	s1, #148	@ 0xc0a00000 -5.0
 8012a6e:	ed9f 0a8b 	vldr	s0, [pc, #556]	@ 8012c9c <invoke+0x6d4>
 8012a72:	4631      	mov	r1, r6
 8012a74:	f44f 50c0 	mov.w	r0, #6144	@ 0x1800
 8012a78:	f00b fce1 	bl	801e43e <add_fpreq>
/* layer 17:CONV_2D */
convolve_1x1_s8_ch24_fpreq(&buffer0[43008],16,16,24,(const q7_t*) weight15,bias15,scales15,-128,11,-128,127,&buffer0[2560],16,16,120,sbuf);
 8012a7c:	970b      	str	r7, [sp, #44]	@ 0x2c
 8012a7e:	f8cd 9028 	str.w	r9, [sp, #40]	@ 0x28
 8012a82:	f8cd 8024 	str.w	r8, [sp, #36]	@ 0x24
 8012a86:	f8cd 8020 	str.w	r8, [sp, #32]
 8012a8a:	f506 6a20 	add.w	sl, r6, #2560	@ 0xa00
 8012a8e:	f8cd a01c 	str.w	sl, [sp, #28]
 8012a92:	f8cd b018 	str.w	fp, [sp, #24]
 8012a96:	9405      	str	r4, [sp, #20]
 8012a98:	230b      	movs	r3, #11
 8012a9a:	9304      	str	r3, [sp, #16]
 8012a9c:	9403      	str	r4, [sp, #12]
 8012a9e:	4b80      	ldr	r3, [pc, #512]	@ (8012ca0 <invoke+0x6d8>)
 8012aa0:	9302      	str	r3, [sp, #8]
 8012aa2:	4b80      	ldr	r3, [pc, #512]	@ (8012ca4 <invoke+0x6dc>)
 8012aa4:	9301      	str	r3, [sp, #4]
 8012aa6:	4b80      	ldr	r3, [pc, #512]	@ (8012ca8 <invoke+0x6e0>)
 8012aa8:	9300      	str	r3, [sp, #0]
 8012aaa:	2318      	movs	r3, #24
 8012aac:	4642      	mov	r2, r8
 8012aae:	4641      	mov	r1, r8
 8012ab0:	f506 4028 	add.w	r0, r6, #43008	@ 0xa800
 8012ab4:	f00b fe54 	bl	801e760 <convolve_1x1_s8_ch24_fpreq>
/* layer 18:DEPTHWISE_CONV_2D */
depthwise_kernel3x3_stride2_inplace_CHW_fpreq(&buffer0[2560],16,16,120,(const q7_t*) CHWweight16,offsetBias16,offsetRBias16,scales16,-128,128,-128,127,&buffer0[2560],8,8,120,sbuf,-128);
 8012ab8:	940d      	str	r4, [sp, #52]	@ 0x34
 8012aba:	970c      	str	r7, [sp, #48]	@ 0x30
 8012abc:	f8cd 902c 	str.w	r9, [sp, #44]	@ 0x2c
 8012ac0:	950a      	str	r5, [sp, #40]	@ 0x28
 8012ac2:	9509      	str	r5, [sp, #36]	@ 0x24
 8012ac4:	f8cd a020 	str.w	sl, [sp, #32]
 8012ac8:	f8cd b01c 	str.w	fp, [sp, #28]
 8012acc:	9406      	str	r4, [sp, #24]
 8012ace:	2380      	movs	r3, #128	@ 0x80
 8012ad0:	9305      	str	r3, [sp, #20]
 8012ad2:	9404      	str	r4, [sp, #16]
 8012ad4:	4b75      	ldr	r3, [pc, #468]	@ (8012cac <invoke+0x6e4>)
 8012ad6:	9303      	str	r3, [sp, #12]
 8012ad8:	4b75      	ldr	r3, [pc, #468]	@ (8012cb0 <invoke+0x6e8>)
 8012ada:	9302      	str	r3, [sp, #8]
 8012adc:	4b75      	ldr	r3, [pc, #468]	@ (8012cb4 <invoke+0x6ec>)
 8012ade:	9301      	str	r3, [sp, #4]
 8012ae0:	4b75      	ldr	r3, [pc, #468]	@ (8012cb8 <invoke+0x6f0>)
 8012ae2:	9300      	str	r3, [sp, #0]
 8012ae4:	464b      	mov	r3, r9
 8012ae6:	4642      	mov	r2, r8
 8012ae8:	4641      	mov	r1, r8
 8012aea:	4650      	mov	r0, sl
 8012aec:	f7fd fcf4 	bl	80104d8 <depthwise_kernel3x3_stride2_inplace_CHW_fpreq>
/* layer 19:CONV_2D */
convolve_1x1_s8_fpreq(&buffer0[2560],8,8,120,(const q7_t*) weight17,bias17,scales17,0,128,-128,127,&buffer0[0],8,8,40,sbuf);
 8012af0:	970b      	str	r7, [sp, #44]	@ 0x2c
 8012af2:	2328      	movs	r3, #40	@ 0x28
 8012af4:	930a      	str	r3, [sp, #40]	@ 0x28
 8012af6:	9509      	str	r5, [sp, #36]	@ 0x24
 8012af8:	9508      	str	r5, [sp, #32]
 8012afa:	9607      	str	r6, [sp, #28]
 8012afc:	f8cd b018 	str.w	fp, [sp, #24]
 8012b00:	9405      	str	r4, [sp, #20]
 8012b02:	2380      	movs	r3, #128	@ 0x80
 8012b04:	9304      	str	r3, [sp, #16]
 8012b06:	2300      	movs	r3, #0
 8012b08:	9303      	str	r3, [sp, #12]
 8012b0a:	4b6c      	ldr	r3, [pc, #432]	@ (8012cbc <invoke+0x6f4>)
 8012b0c:	9302      	str	r3, [sp, #8]
 8012b0e:	4b6c      	ldr	r3, [pc, #432]	@ (8012cc0 <invoke+0x6f8>)
 8012b10:	9301      	str	r3, [sp, #4]
 8012b12:	4b6c      	ldr	r3, [pc, #432]	@ (8012cc4 <invoke+0x6fc>)
 8012b14:	9300      	str	r3, [sp, #0]
 8012b16:	464b      	mov	r3, r9
 8012b18:	462a      	mov	r2, r5
 8012b1a:	4629      	mov	r1, r5
 8012b1c:	4650      	mov	r0, sl
 8012b1e:	f00c f8ad 	bl	801ec7c <convolve_1x1_s8_fpreq>
/* layer 20:CONV_2D */
convolve_1x1_s8_fpreq(&buffer0[0],8,8,40,(const q7_t*) weight18,bias18,scales18,-128,0,-128,127,&buffer0[2560],8,8,160,sbuf);
 8012b22:	970b      	str	r7, [sp, #44]	@ 0x2c
 8012b24:	f04f 09a0 	mov.w	r9, #160	@ 0xa0
 8012b28:	f8cd 9028 	str.w	r9, [sp, #40]	@ 0x28
 8012b2c:	9509      	str	r5, [sp, #36]	@ 0x24
 8012b2e:	9508      	str	r5, [sp, #32]
 8012b30:	f8cd a01c 	str.w	sl, [sp, #28]
 8012b34:	f8cd b018 	str.w	fp, [sp, #24]
 8012b38:	9405      	str	r4, [sp, #20]
 8012b3a:	2300      	movs	r3, #0
 8012b3c:	9304      	str	r3, [sp, #16]
 8012b3e:	9403      	str	r4, [sp, #12]
 8012b40:	4b61      	ldr	r3, [pc, #388]	@ (8012cc8 <invoke+0x700>)
 8012b42:	9302      	str	r3, [sp, #8]
 8012b44:	4b61      	ldr	r3, [pc, #388]	@ (8012ccc <invoke+0x704>)
 8012b46:	9301      	str	r3, [sp, #4]
 8012b48:	4b61      	ldr	r3, [pc, #388]	@ (8012cd0 <invoke+0x708>)
 8012b4a:	9300      	str	r3, [sp, #0]
 8012b4c:	2328      	movs	r3, #40	@ 0x28
 8012b4e:	462a      	mov	r2, r5
 8012b50:	4629      	mov	r1, r5
 8012b52:	4630      	mov	r0, r6
 8012b54:	f00c f892 	bl	801ec7c <convolve_1x1_s8_fpreq>
/* layer 21:DEPTHWISE_CONV_2D */
depthwise_kernel7x7_stride1_inplace_CHW_fpreq(&buffer0[2560],8,8,160,(const q7_t*) CHWweight19,offsetBias19,offsetRBias19,scales19,-128,128,-128,127,&buffer0[2560],8,8,160,sbuf,-128);
 8012b58:	940d      	str	r4, [sp, #52]	@ 0x34
 8012b5a:	970c      	str	r7, [sp, #48]	@ 0x30
 8012b5c:	f8cd 902c 	str.w	r9, [sp, #44]	@ 0x2c
 8012b60:	950a      	str	r5, [sp, #40]	@ 0x28
 8012b62:	9509      	str	r5, [sp, #36]	@ 0x24
 8012b64:	f8cd a020 	str.w	sl, [sp, #32]
 8012b68:	f8cd b01c 	str.w	fp, [sp, #28]
 8012b6c:	9406      	str	r4, [sp, #24]
 8012b6e:	2380      	movs	r3, #128	@ 0x80
 8012b70:	9305      	str	r3, [sp, #20]
 8012b72:	9404      	str	r4, [sp, #16]
 8012b74:	4b57      	ldr	r3, [pc, #348]	@ (8012cd4 <invoke+0x70c>)
 8012b76:	9303      	str	r3, [sp, #12]
 8012b78:	4b57      	ldr	r3, [pc, #348]	@ (8012cd8 <invoke+0x710>)
 8012b7a:	9302      	str	r3, [sp, #8]
 8012b7c:	4b57      	ldr	r3, [pc, #348]	@ (8012cdc <invoke+0x714>)
 8012b7e:	9301      	str	r3, [sp, #4]
 8012b80:	4b57      	ldr	r3, [pc, #348]	@ (8012ce0 <invoke+0x718>)
 8012b82:	9300      	str	r3, [sp, #0]
 8012b84:	464b      	mov	r3, r9
 8012b86:	462a      	mov	r2, r5
 8012b88:	4629      	mov	r1, r5
 8012b8a:	4650      	mov	r0, sl
 8012b8c:	f7fe fbce 	bl	801132c <depthwise_kernel7x7_stride1_inplace_CHW_fpreq>
/* layer 22:CONV_2D */
convolve_1x1_s8_fpreq(&buffer0[2560],8,8,160,(const q7_t*) weight20,bias20,scales20,22,128,-128,127,&buffer0[12800],8,8,40,sbuf);
 8012b90:	970b      	str	r7, [sp, #44]	@ 0x2c
 8012b92:	2328      	movs	r3, #40	@ 0x28
 8012b94:	930a      	str	r3, [sp, #40]	@ 0x28
 8012b96:	9509      	str	r5, [sp, #36]	@ 0x24
 8012b98:	9508      	str	r5, [sp, #32]
 8012b9a:	f506 5848 	add.w	r8, r6, #12800	@ 0x3200
 8012b9e:	f8cd 801c 	str.w	r8, [sp, #28]
 8012ba2:	f8cd b018 	str.w	fp, [sp, #24]
 8012ba6:	9405      	str	r4, [sp, #20]
 8012ba8:	2380      	movs	r3, #128	@ 0x80
 8012baa:	9304      	str	r3, [sp, #16]
 8012bac:	2316      	movs	r3, #22
 8012bae:	9303      	str	r3, [sp, #12]
 8012bb0:	4b4c      	ldr	r3, [pc, #304]	@ (8012ce4 <invoke+0x71c>)
 8012bb2:	9302      	str	r3, [sp, #8]
 8012bb4:	4b4c      	ldr	r3, [pc, #304]	@ (8012ce8 <invoke+0x720>)
 8012bb6:	9301      	str	r3, [sp, #4]
 8012bb8:	4b4c      	ldr	r3, [pc, #304]	@ (8012cec <invoke+0x724>)
 8012bba:	9300      	str	r3, [sp, #0]
 8012bbc:	464b      	mov	r3, r9
 8012bbe:	462a      	mov	r2, r5
 8012bc0:	4629      	mov	r1, r5
 8012bc2:	4650      	mov	r0, sl
 8012bc4:	f00c f85a 	bl	801ec7c <convolve_1x1_s8_fpreq>
/* layer 23:ADD */
add_fpreq(2560, &buffer0[0],0.036471475,0,&buffer0[12800],0.031147331,22,0.0372383,3,&buffer0[15360]);
 8012bc8:	f506 5a70 	add.w	sl, r6, #15360	@ 0x3c00
 8012bcc:	4653      	mov	r3, sl
 8012bce:	eef0 2a08 	vmov.f32	s5, #8	@ 0x40400000  3.0
 8012bd2:	ed9f 2a47 	vldr	s4, [pc, #284]	@ 8012cf0 <invoke+0x728>
 8012bd6:	eef3 1a06 	vmov.f32	s3, #54	@ 0x41b00000  22.0
 8012bda:	ed9f 1a46 	vldr	s2, [pc, #280]	@ 8012cf4 <invoke+0x72c>
 8012bde:	4642      	mov	r2, r8
 8012be0:	eef0 0a48 	vmov.f32	s1, s16
 8012be4:	ed9f 0a44 	vldr	s0, [pc, #272]	@ 8012cf8 <invoke+0x730>
 8012be8:	4631      	mov	r1, r6
 8012bea:	f44f 6020 	mov.w	r0, #2560	@ 0xa00
 8012bee:	f00b fc26 	bl	801e43e <add_fpreq>
/* layer 24:CONV_2D */
convolve_1x1_s8_fpreq(&buffer0[15360],8,8,40,(const q7_t*) weight21,bias21,scales21,-128,-3,-128,127,&buffer0[4736],8,8,160,sbuf);
 8012bf2:	970b      	str	r7, [sp, #44]	@ 0x2c
 8012bf4:	f8cd 9028 	str.w	r9, [sp, #40]	@ 0x28
 8012bf8:	9509      	str	r5, [sp, #36]	@ 0x24
 8012bfa:	9508      	str	r5, [sp, #32]
 8012bfc:	f506 5894 	add.w	r8, r6, #4736	@ 0x1280
 8012c00:	f8cd 801c 	str.w	r8, [sp, #28]
 8012c04:	f8cd b018 	str.w	fp, [sp, #24]
 8012c08:	9405      	str	r4, [sp, #20]
 8012c0a:	f06f 0302 	mvn.w	r3, #2
 8012c0e:	9304      	str	r3, [sp, #16]
 8012c10:	9403      	str	r4, [sp, #12]
 8012c12:	4b3a      	ldr	r3, [pc, #232]	@ (8012cfc <invoke+0x734>)
 8012c14:	9302      	str	r3, [sp, #8]
 8012c16:	4b3a      	ldr	r3, [pc, #232]	@ (8012d00 <invoke+0x738>)
 8012c18:	9301      	str	r3, [sp, #4]
 8012c1a:	4b3a      	ldr	r3, [pc, #232]	@ (8012d04 <invoke+0x73c>)
 8012c1c:	9300      	str	r3, [sp, #0]
 8012c1e:	2328      	movs	r3, #40	@ 0x28
 8012c20:	462a      	mov	r2, r5
 8012c22:	4629      	mov	r1, r5
 8012c24:	4650      	mov	r0, sl
 8012c26:	f00c f829 	bl	801ec7c <convolve_1x1_s8_fpreq>
/* layer 25:DEPTHWISE_CONV_2D */
depthwise_kernel5x5_stride1_inplace_CHW_fpreq_bitmask(&buffer0[4736],8,8,160,(const q7_t*) CHWweight22,offsetBias22,offsetRBias22,scales22,-128,128,-128,127,&buffer0[4736],&buffer0[0],8,8,160,sbuf,-128);
 8012c2a:	940e      	str	r4, [sp, #56]	@ 0x38
 8012c2c:	970d      	str	r7, [sp, #52]	@ 0x34
 8012c2e:	f8cd 9030 	str.w	r9, [sp, #48]	@ 0x30
 8012c32:	950b      	str	r5, [sp, #44]	@ 0x2c
 8012c34:	950a      	str	r5, [sp, #40]	@ 0x28
 8012c36:	9609      	str	r6, [sp, #36]	@ 0x24
 8012c38:	f8cd 8020 	str.w	r8, [sp, #32]
 8012c3c:	f8cd b01c 	str.w	fp, [sp, #28]
 8012c40:	9406      	str	r4, [sp, #24]
 8012c42:	2380      	movs	r3, #128	@ 0x80
 8012c44:	9305      	str	r3, [sp, #20]
 8012c46:	9404      	str	r4, [sp, #16]
 8012c48:	4b2f      	ldr	r3, [pc, #188]	@ (8012d08 <invoke+0x740>)
 8012c4a:	9303      	str	r3, [sp, #12]
 8012c4c:	4b2f      	ldr	r3, [pc, #188]	@ (8012d0c <invoke+0x744>)
 8012c4e:	9302      	str	r3, [sp, #8]
 8012c50:	4b2f      	ldr	r3, [pc, #188]	@ (8012d10 <invoke+0x748>)
 8012c52:	9301      	str	r3, [sp, #4]
 8012c54:	4b2f      	ldr	r3, [pc, #188]	@ (8012d14 <invoke+0x74c>)
 8012c56:	9300      	str	r3, [sp, #0]
 8012c58:	e05e      	b.n	8012d18 <invoke+0x750>
 8012c5a:	bf00      	nop
 8012c5c:	080aa714 	.word	0x080aa714
 8012c60:	080aa774 	.word	0x080aa774
 8012c64:	080aa7d4 	.word	0x080aa7d4
 8012c68:	080a9814 	.word	0x080a9814
 8012c6c:	080a99f4 	.word	0x080a99f4
 8012c70:	080a9bd4 	.word	0x080a9bd4
 8012c74:	080a8e3c 	.word	0x080a8e3c
 8012c78:	080a901c 	.word	0x080a901c
 8012c7c:	080a91fc 	.word	0x080a91fc
 8012c80:	080a93dc 	.word	0x080a93dc
 8012c84:	080a823c 	.word	0x080a823c
 8012c88:	080a829c 	.word	0x080a829c
 8012c8c:	080a82fc 	.word	0x080a82fc
 8012c90:	3d7c2a35 	.word	0x3d7c2a35
 8012c94:	c2080000 	.word	0xc2080000
 8012c98:	3d5fa742 	.word	0x3d5fa742
 8012c9c:	3d3378e9 	.word	0x3d3378e9
 8012ca0:	080a733c 	.word	0x080a733c
 8012ca4:	080a751c 	.word	0x080a751c
 8012ca8:	080a76fc 	.word	0x080a76fc
 8012cac:	080a6964 	.word	0x080a6964
 8012cb0:	080a6b44 	.word	0x080a6b44
 8012cb4:	080a6d24 	.word	0x080a6d24
 8012cb8:	080a6f04 	.word	0x080a6f04
 8012cbc:	080a5564 	.word	0x080a5564
 8012cc0:	080a5604 	.word	0x080a5604
 8012cc4:	080a56a4 	.word	0x080a56a4
 8012cc8:	080a3764 	.word	0x080a3764
 8012ccc:	080a39e4 	.word	0x080a39e4
 8012cd0:	080a3c64 	.word	0x080a3c64
 8012cd4:	080a1144 	.word	0x080a1144
 8012cd8:	080a13c4 	.word	0x080a13c4
 8012cdc:	080a1644 	.word	0x080a1644
 8012ce0:	080a18c4 	.word	0x080a18c4
 8012ce4:	0809f704 	.word	0x0809f704
 8012ce8:	0809f7a4 	.word	0x0809f7a4
 8012cec:	0809f844 	.word	0x0809f844
 8012cf0:	3d188730 	.word	0x3d188730
 8012cf4:	3cff28b0 	.word	0x3cff28b0
 8012cf8:	3d15631d 	.word	0x3d15631d
 8012cfc:	0809d904 	.word	0x0809d904
 8012d00:	0809db84 	.word	0x0809db84
 8012d04:	0809de04 	.word	0x0809de04
 8012d08:	0809c6e4 	.word	0x0809c6e4
 8012d0c:	2000e4d0 	.word	0x2000e4d0
 8012d10:	200081a0 	.word	0x200081a0
 8012d14:	0809c964 	.word	0x0809c964
 8012d18:	464b      	mov	r3, r9
 8012d1a:	462a      	mov	r2, r5
 8012d1c:	4629      	mov	r1, r5
 8012d1e:	4640      	mov	r0, r8
 8012d20:	f7fd fefa 	bl	8010b18 <depthwise_kernel5x5_stride1_inplace_CHW_fpreq_bitmask>
/* layer 26:CONV_2D */
convolve_1x1_s8_fpreq_bitmask(&buffer0[4736],8,8,160,(const q7_t*) weight23,bias23,scales23,2,128,-128,127,&buffer0[1280],&buffer0[4352],8,8,48,sbuf);
 8012d24:	970c      	str	r7, [sp, #48]	@ 0x30
 8012d26:	2330      	movs	r3, #48	@ 0x30
 8012d28:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012d2a:	950a      	str	r5, [sp, #40]	@ 0x28
 8012d2c:	9509      	str	r5, [sp, #36]	@ 0x24
 8012d2e:	f506 5388 	add.w	r3, r6, #4352	@ 0x1100
 8012d32:	9308      	str	r3, [sp, #32]
 8012d34:	f506 6aa0 	add.w	sl, r6, #1280	@ 0x500
 8012d38:	f8cd a01c 	str.w	sl, [sp, #28]
 8012d3c:	f8cd b018 	str.w	fp, [sp, #24]
 8012d40:	9405      	str	r4, [sp, #20]
 8012d42:	2380      	movs	r3, #128	@ 0x80
 8012d44:	9304      	str	r3, [sp, #16]
 8012d46:	2302      	movs	r3, #2
 8012d48:	9303      	str	r3, [sp, #12]
 8012d4a:	4bb6      	ldr	r3, [pc, #728]	@ (8013024 <invoke+0xa5c>)
 8012d4c:	9302      	str	r3, [sp, #8]
 8012d4e:	4bb6      	ldr	r3, [pc, #728]	@ (8013028 <invoke+0xa60>)
 8012d50:	9301      	str	r3, [sp, #4]
 8012d52:	4bb6      	ldr	r3, [pc, #728]	@ (801302c <invoke+0xa64>)
 8012d54:	9300      	str	r3, [sp, #0]
 8012d56:	464b      	mov	r3, r9
 8012d58:	462a      	mov	r2, r5
 8012d5a:	4629      	mov	r1, r5
 8012d5c:	4640      	mov	r0, r8
 8012d5e:	f00c f869 	bl	801ee34 <convolve_1x1_s8_fpreq_bitmask>
/* layer 27:CONV_2D */
convolve_1x1_s8_fpreq_bitmask_partialCH(&buffer0[1280],8,8,48,(const q7_t*)weight24,(const q7_t*)weight24Flash,12,bias24,scales24,-128,-2,-128,127,&buffer0[10496],&buffer0[4736],8,8,144,sbuf);
 8012d62:	970e      	str	r7, [sp, #56]	@ 0x38
 8012d64:	f04f 0990 	mov.w	r9, #144	@ 0x90
 8012d68:	f8cd 9034 	str.w	r9, [sp, #52]	@ 0x34
 8012d6c:	950c      	str	r5, [sp, #48]	@ 0x30
 8012d6e:	950b      	str	r5, [sp, #44]	@ 0x2c
 8012d70:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8012d74:	f506 5824 	add.w	r8, r6, #10496	@ 0x2900
 8012d78:	f8cd 8024 	str.w	r8, [sp, #36]	@ 0x24
 8012d7c:	f8cd b020 	str.w	fp, [sp, #32]
 8012d80:	9407      	str	r4, [sp, #28]
 8012d82:	f06f 0301 	mvn.w	r3, #1
 8012d86:	9306      	str	r3, [sp, #24]
 8012d88:	9405      	str	r4, [sp, #20]
 8012d8a:	4ba9      	ldr	r3, [pc, #676]	@ (8013030 <invoke+0xa68>)
 8012d8c:	9304      	str	r3, [sp, #16]
 8012d8e:	4ba9      	ldr	r3, [pc, #676]	@ (8013034 <invoke+0xa6c>)
 8012d90:	9303      	str	r3, [sp, #12]
 8012d92:	230c      	movs	r3, #12
 8012d94:	9302      	str	r3, [sp, #8]
 8012d96:	4ba8      	ldr	r3, [pc, #672]	@ (8013038 <invoke+0xa70>)
 8012d98:	9301      	str	r3, [sp, #4]
 8012d9a:	4ba8      	ldr	r3, [pc, #672]	@ (801303c <invoke+0xa74>)
 8012d9c:	9300      	str	r3, [sp, #0]
 8012d9e:	2330      	movs	r3, #48	@ 0x30
 8012da0:	462a      	mov	r2, r5
 8012da2:	4629      	mov	r1, r5
 8012da4:	4650      	mov	r0, sl
 8012da6:	f00c f946 	bl	801f036 <convolve_1x1_s8_fpreq_bitmask_partialCH>
/* layer 28:DEPTHWISE_CONV_2D */
depthwise_kernel3x3_stride1_inplace_CHW_fpreq_bitmask(&buffer0[10496],8,8,144,(const q7_t*) CHWweight25,offsetBias25,offsetRBias25,scales25,-128,128,-128,127,&buffer0[10496],&buffer0[5888],8,8,144,sbuf,-128);
 8012daa:	940e      	str	r4, [sp, #56]	@ 0x38
 8012dac:	970d      	str	r7, [sp, #52]	@ 0x34
 8012dae:	f8cd 9030 	str.w	r9, [sp, #48]	@ 0x30
 8012db2:	950b      	str	r5, [sp, #44]	@ 0x2c
 8012db4:	950a      	str	r5, [sp, #40]	@ 0x28
 8012db6:	f506 53b8 	add.w	r3, r6, #5888	@ 0x1700
 8012dba:	9309      	str	r3, [sp, #36]	@ 0x24
 8012dbc:	f8cd 8020 	str.w	r8, [sp, #32]
 8012dc0:	f8cd b01c 	str.w	fp, [sp, #28]
 8012dc4:	9406      	str	r4, [sp, #24]
 8012dc6:	2380      	movs	r3, #128	@ 0x80
 8012dc8:	9305      	str	r3, [sp, #20]
 8012dca:	9404      	str	r4, [sp, #16]
 8012dcc:	4b9c      	ldr	r3, [pc, #624]	@ (8013040 <invoke+0xa78>)
 8012dce:	9303      	str	r3, [sp, #12]
 8012dd0:	4b9c      	ldr	r3, [pc, #624]	@ (8013044 <invoke+0xa7c>)
 8012dd2:	9302      	str	r3, [sp, #8]
 8012dd4:	4b9c      	ldr	r3, [pc, #624]	@ (8013048 <invoke+0xa80>)
 8012dd6:	9301      	str	r3, [sp, #4]
 8012dd8:	4b9c      	ldr	r3, [pc, #624]	@ (801304c <invoke+0xa84>)
 8012dda:	9300      	str	r3, [sp, #0]
 8012ddc:	464b      	mov	r3, r9
 8012dde:	462a      	mov	r2, r5
 8012de0:	4629      	mov	r1, r5
 8012de2:	4640      	mov	r0, r8
 8012de4:	f7fd f9c2 	bl	801016c <depthwise_kernel3x3_stride1_inplace_CHW_fpreq_bitmask>
/* layer 29:CONV_2D */
convolve_1x1_s8_fpreq_bitmask(&buffer0[10496],8,8,144,(const q7_t*) weight26,bias26,scales26,17,128,-128,127,&buffer0[19712],&buffer0[10112],8,8,48,sbuf);
 8012de8:	970c      	str	r7, [sp, #48]	@ 0x30
 8012dea:	2330      	movs	r3, #48	@ 0x30
 8012dec:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012dee:	950a      	str	r5, [sp, #40]	@ 0x28
 8012df0:	9509      	str	r5, [sp, #36]	@ 0x24
 8012df2:	f506 531e 	add.w	r3, r6, #10112	@ 0x2780
 8012df6:	9308      	str	r3, [sp, #32]
 8012df8:	f503 5316 	add.w	r3, r3, #9600	@ 0x2580
 8012dfc:	9307      	str	r3, [sp, #28]
 8012dfe:	f8cd b018 	str.w	fp, [sp, #24]
 8012e02:	9405      	str	r4, [sp, #20]
 8012e04:	2380      	movs	r3, #128	@ 0x80
 8012e06:	9304      	str	r3, [sp, #16]
 8012e08:	2311      	movs	r3, #17
 8012e0a:	9303      	str	r3, [sp, #12]
 8012e0c:	4b90      	ldr	r3, [pc, #576]	@ (8013050 <invoke+0xa88>)
 8012e0e:	9302      	str	r3, [sp, #8]
 8012e10:	4b90      	ldr	r3, [pc, #576]	@ (8013054 <invoke+0xa8c>)
 8012e12:	9301      	str	r3, [sp, #4]
 8012e14:	4b90      	ldr	r3, [pc, #576]	@ (8013058 <invoke+0xa90>)
 8012e16:	9300      	str	r3, [sp, #0]
 8012e18:	464b      	mov	r3, r9
 8012e1a:	462a      	mov	r2, r5
 8012e1c:	4629      	mov	r1, r5
 8012e1e:	4640      	mov	r0, r8
 8012e20:	f00c f808 	bl	801ee34 <convolve_1x1_s8_fpreq_bitmask>
/* layer 30:ADD */
add_fpreq_bitmask(3072, &buffer0[1280],0.034391046,2,&buffer0[19712],0.027072277,17,0.039104667,6,&buffer0[7040],&buffer0[10496]);
 8012e24:	f506 59dc 	add.w	r9, r6, #7040	@ 0x1b80
 8012e28:	f8cd 8000 	str.w	r8, [sp]
 8012e2c:	464b      	mov	r3, r9
 8012e2e:	eef1 2a08 	vmov.f32	s5, #24	@ 0x40c00000  6.0
 8012e32:	ed9f 2a8a 	vldr	s4, [pc, #552]	@ 801305c <invoke+0xa94>
 8012e36:	eef3 1a01 	vmov.f32	s3, #49	@ 0x41880000  17.0
 8012e3a:	ed9f 1a89 	vldr	s2, [pc, #548]	@ 8013060 <invoke+0xa98>
 8012e3e:	f509 5246 	add.w	r2, r9, #12672	@ 0x3180
 8012e42:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 8012e46:	ed9f 0a87 	vldr	s0, [pc, #540]	@ 8013064 <invoke+0xa9c>
 8012e4a:	4651      	mov	r1, sl
 8012e4c:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8012e50:	f00b fb42 	bl	801e4d8 <add_fpreq_bitmask>
/* layer 31:CONV_2D */
convolve_1x1_s8_fpreq_bitmask_partialCH(&buffer0[7040],8,8,48,(const q7_t*)weight27,(const q7_t*)weight27Flash,24,bias27,scales27,-128,-6,-128,127,&buffer0[20096],&buffer0[13568],8,8,192,sbuf);
 8012e54:	970e      	str	r7, [sp, #56]	@ 0x38
 8012e56:	f04f 0ac0 	mov.w	sl, #192	@ 0xc0
 8012e5a:	f8cd a034 	str.w	sl, [sp, #52]	@ 0x34
 8012e5e:	950c      	str	r5, [sp, #48]	@ 0x30
 8012e60:	950b      	str	r5, [sp, #44]	@ 0x2c
 8012e62:	f506 5354 	add.w	r3, r6, #13568	@ 0x3500
 8012e66:	930a      	str	r3, [sp, #40]	@ 0x28
 8012e68:	f506 489d 	add.w	r8, r6, #20096	@ 0x4e80
 8012e6c:	f8cd 8024 	str.w	r8, [sp, #36]	@ 0x24
 8012e70:	f8cd b020 	str.w	fp, [sp, #32]
 8012e74:	9407      	str	r4, [sp, #28]
 8012e76:	f06f 0305 	mvn.w	r3, #5
 8012e7a:	9306      	str	r3, [sp, #24]
 8012e7c:	9405      	str	r4, [sp, #20]
 8012e7e:	4b7a      	ldr	r3, [pc, #488]	@ (8013068 <invoke+0xaa0>)
 8012e80:	9304      	str	r3, [sp, #16]
 8012e82:	4b7a      	ldr	r3, [pc, #488]	@ (801306c <invoke+0xaa4>)
 8012e84:	9303      	str	r3, [sp, #12]
 8012e86:	2318      	movs	r3, #24
 8012e88:	9302      	str	r3, [sp, #8]
 8012e8a:	4b79      	ldr	r3, [pc, #484]	@ (8013070 <invoke+0xaa8>)
 8012e8c:	9301      	str	r3, [sp, #4]
 8012e8e:	4b79      	ldr	r3, [pc, #484]	@ (8013074 <invoke+0xaac>)
 8012e90:	9300      	str	r3, [sp, #0]
 8012e92:	2330      	movs	r3, #48	@ 0x30
 8012e94:	462a      	mov	r2, r5
 8012e96:	4629      	mov	r1, r5
 8012e98:	4648      	mov	r0, r9
 8012e9a:	f00c f8cc 	bl	801f036 <convolve_1x1_s8_fpreq_bitmask_partialCH>
/* layer 32:DEPTHWISE_CONV_2D */
depthwise_kernel3x3_stride1_inplace_CHW_fpreq_bitmask(&buffer0[20096],8,8,192,(const q7_t*) CHWweight28,offsetBias28,offsetRBias28,scales28,-128,128,-128,127,&buffer0[20096],&buffer0[15104],8,8,192,sbuf,-128);
 8012e9e:	940e      	str	r4, [sp, #56]	@ 0x38
 8012ea0:	970d      	str	r7, [sp, #52]	@ 0x34
 8012ea2:	f8cd a030 	str.w	sl, [sp, #48]	@ 0x30
 8012ea6:	950b      	str	r5, [sp, #44]	@ 0x2c
 8012ea8:	950a      	str	r5, [sp, #40]	@ 0x28
 8012eaa:	f506 566c 	add.w	r6, r6, #15104	@ 0x3b00
 8012eae:	9609      	str	r6, [sp, #36]	@ 0x24
 8012eb0:	f8cd 8020 	str.w	r8, [sp, #32]
 8012eb4:	f8cd b01c 	str.w	fp, [sp, #28]
 8012eb8:	9406      	str	r4, [sp, #24]
 8012eba:	2380      	movs	r3, #128	@ 0x80
 8012ebc:	9305      	str	r3, [sp, #20]
 8012ebe:	9404      	str	r4, [sp, #16]
 8012ec0:	4b6d      	ldr	r3, [pc, #436]	@ (8013078 <invoke+0xab0>)
 8012ec2:	9303      	str	r3, [sp, #12]
 8012ec4:	4b6d      	ldr	r3, [pc, #436]	@ (801307c <invoke+0xab4>)
 8012ec6:	9302      	str	r3, [sp, #8]
 8012ec8:	4b6d      	ldr	r3, [pc, #436]	@ (8013080 <invoke+0xab8>)
 8012eca:	9301      	str	r3, [sp, #4]
 8012ecc:	4b6d      	ldr	r3, [pc, #436]	@ (8013084 <invoke+0xabc>)
 8012ece:	9300      	str	r3, [sp, #0]
 8012ed0:	4653      	mov	r3, sl
 8012ed2:	462a      	mov	r2, r5
 8012ed4:	4629      	mov	r1, r5
 8012ed6:	4640      	mov	r0, r8
 8012ed8:	f7fd f948 	bl	801016c <depthwise_kernel3x3_stride1_inplace_CHW_fpreq_bitmask>
/* layer 33:CONV_2D */
convolve_1x1_s8_fpreq_bitmask(&buffer0[20096],8,8,192,(const q7_t*) weight29,bias29,scales29,-8,128,-128,127,&buffer0[32384],&buffer0[19712],8,8,48,sbuf);
 8012edc:	f506 569c 	add.w	r6, r6, #4992	@ 0x1380
 8012ee0:	46ba      	mov	sl, r7
 8012ee2:	970c      	str	r7, [sp, #48]	@ 0x30
 8012ee4:	2330      	movs	r3, #48	@ 0x30
 8012ee6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012ee8:	46a8      	mov	r8, r5
 8012eea:	950a      	str	r5, [sp, #40]	@ 0x28
 8012eec:	9509      	str	r5, [sp, #36]	@ 0x24
 8012eee:	f5a6 73c0 	sub.w	r3, r6, #384	@ 0x180
 8012ef2:	9308      	str	r3, [sp, #32]
 8012ef4:	f506 5940 	add.w	r9, r6, #12288	@ 0x3000
 8012ef8:	f8cd 901c 	str.w	r9, [sp, #28]
 8012efc:	465f      	mov	r7, fp
 8012efe:	f8cd b018 	str.w	fp, [sp, #24]
 8012f02:	4625      	mov	r5, r4
 8012f04:	9405      	str	r4, [sp, #20]
 8012f06:	2380      	movs	r3, #128	@ 0x80
 8012f08:	9304      	str	r3, [sp, #16]
 8012f0a:	f06f 0307 	mvn.w	r3, #7
 8012f0e:	9303      	str	r3, [sp, #12]
 8012f10:	4b5d      	ldr	r3, [pc, #372]	@ (8013088 <invoke+0xac0>)
 8012f12:	9302      	str	r3, [sp, #8]
 8012f14:	4b5d      	ldr	r3, [pc, #372]	@ (801308c <invoke+0xac4>)
 8012f16:	9301      	str	r3, [sp, #4]
 8012f18:	4b5d      	ldr	r3, [pc, #372]	@ (8013090 <invoke+0xac8>)
 8012f1a:	9300      	str	r3, [sp, #0]
 8012f1c:	23c0      	movs	r3, #192	@ 0xc0
 8012f1e:	4642      	mov	r2, r8
 8012f20:	4641      	mov	r1, r8
 8012f22:	4630      	mov	r0, r6
 8012f24:	f00b ff86 	bl	801ee34 <convolve_1x1_s8_fpreq_bitmask>
/* layer 34:ADD */
add_fpreq_bitmask(3072, &buffer0[7040],0.039104667,6,&buffer0[32384],0.038176756,-8,0.05495224,0,&buffer0[16640],&buffer0[20096]);
 8012f28:	f5a6 6458 	sub.w	r4, r6, #3456	@ 0xd80
 8012f2c:	9600      	str	r6, [sp, #0]
 8012f2e:	4623      	mov	r3, r4
 8012f30:	eef0 2a48 	vmov.f32	s5, s16
 8012f34:	ed9f 2a57 	vldr	s4, [pc, #348]	@ 8013094 <invoke+0xacc>
 8012f38:	eefa 1a00 	vmov.f32	s3, #160	@ 0xc1000000 -8.0
 8012f3c:	ed9f 1a56 	vldr	s2, [pc, #344]	@ 8013098 <invoke+0xad0>
 8012f40:	464a      	mov	r2, r9
 8012f42:	eef1 0a08 	vmov.f32	s1, #24	@ 0x40c00000  6.0
 8012f46:	ed9f 0a45 	vldr	s0, [pc, #276]	@ 801305c <invoke+0xa94>
 8012f4a:	f5a6 514c 	sub.w	r1, r6, #13056	@ 0x3300
 8012f4e:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8012f52:	f00b fac1 	bl	801e4d8 <add_fpreq_bitmask>
/* layer 35:CONV_2D */
convolve_1x1_s8_fpreq_bitmask_partialCH(&buffer0[16640],8,8,48,(const q7_t*)weight30,(const q7_t*)weight30Flash,24,bias30,scales30,-128,0,-128,127,&buffer0[30560],&buffer0[23168],8,8,240,sbuf);
 8012f56:	f8cd a038 	str.w	sl, [sp, #56]	@ 0x38
 8012f5a:	f04f 09f0 	mov.w	r9, #240	@ 0xf0
 8012f5e:	f8cd 9034 	str.w	r9, [sp, #52]	@ 0x34
 8012f62:	f8cd 8030 	str.w	r8, [sp, #48]	@ 0x30
 8012f66:	f8cd 802c 	str.w	r8, [sp, #44]	@ 0x2c
 8012f6a:	f506 6340 	add.w	r3, r6, #3072	@ 0xc00
 8012f6e:	930a      	str	r3, [sp, #40]	@ 0x28
 8012f70:	f503 5be7 	add.w	fp, r3, #7392	@ 0x1ce0
 8012f74:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8012f78:	9708      	str	r7, [sp, #32]
 8012f7a:	9507      	str	r5, [sp, #28]
 8012f7c:	2300      	movs	r3, #0
 8012f7e:	9306      	str	r3, [sp, #24]
 8012f80:	9505      	str	r5, [sp, #20]
 8012f82:	4b46      	ldr	r3, [pc, #280]	@ (801309c <invoke+0xad4>)
 8012f84:	9304      	str	r3, [sp, #16]
 8012f86:	4b46      	ldr	r3, [pc, #280]	@ (80130a0 <invoke+0xad8>)
 8012f88:	9303      	str	r3, [sp, #12]
 8012f8a:	2318      	movs	r3, #24
 8012f8c:	9302      	str	r3, [sp, #8]
 8012f8e:	4b45      	ldr	r3, [pc, #276]	@ (80130a4 <invoke+0xadc>)
 8012f90:	9301      	str	r3, [sp, #4]
 8012f92:	4b45      	ldr	r3, [pc, #276]	@ (80130a8 <invoke+0xae0>)
 8012f94:	9300      	str	r3, [sp, #0]
 8012f96:	2330      	movs	r3, #48	@ 0x30
 8012f98:	4642      	mov	r2, r8
 8012f9a:	4641      	mov	r1, r8
 8012f9c:	4620      	mov	r0, r4
 8012f9e:	f00c f84a 	bl	801f036 <convolve_1x1_s8_fpreq_bitmask_partialCH>
/* layer 36:DEPTHWISE_CONV_2D */
depthwise_kernel7x7_stride2_inplace_CHW_fpreq_bitmask(&buffer0[30560],8,8,240,(const q7_t*) CHWweight31,offsetBias31,offsetRBias31,scales31,-128,128,-128,127,&buffer0[30560],&buffer0[25088],4,4,240,sbuf,-128);
 8012fa2:	950e      	str	r5, [sp, #56]	@ 0x38
 8012fa4:	f8cd a034 	str.w	sl, [sp, #52]	@ 0x34
 8012fa8:	f8cd 9030 	str.w	r9, [sp, #48]	@ 0x30
 8012fac:	2404      	movs	r4, #4
 8012fae:	940b      	str	r4, [sp, #44]	@ 0x2c
 8012fb0:	940a      	str	r4, [sp, #40]	@ 0x28
 8012fb2:	f506 539c 	add.w	r3, r6, #4992	@ 0x1380
 8012fb6:	9309      	str	r3, [sp, #36]	@ 0x24
 8012fb8:	f8cd b020 	str.w	fp, [sp, #32]
 8012fbc:	9707      	str	r7, [sp, #28]
 8012fbe:	9506      	str	r5, [sp, #24]
 8012fc0:	2380      	movs	r3, #128	@ 0x80
 8012fc2:	9305      	str	r3, [sp, #20]
 8012fc4:	9504      	str	r5, [sp, #16]
 8012fc6:	4b39      	ldr	r3, [pc, #228]	@ (80130ac <invoke+0xae4>)
 8012fc8:	9303      	str	r3, [sp, #12]
 8012fca:	4b39      	ldr	r3, [pc, #228]	@ (80130b0 <invoke+0xae8>)
 8012fcc:	9302      	str	r3, [sp, #8]
 8012fce:	4b39      	ldr	r3, [pc, #228]	@ (80130b4 <invoke+0xaec>)
 8012fd0:	9301      	str	r3, [sp, #4]
 8012fd2:	4b39      	ldr	r3, [pc, #228]	@ (80130b8 <invoke+0xaf0>)
 8012fd4:	9300      	str	r3, [sp, #0]
 8012fd6:	464b      	mov	r3, r9
 8012fd8:	4642      	mov	r2, r8
 8012fda:	4641      	mov	r1, r8
 8012fdc:	4658      	mov	r0, fp
 8012fde:	f7ff fa50 	bl	8012482 <depthwise_kernel7x7_stride2_inplace_CHW_fpreq_bitmask>
/* layer 37:CONV_2D */
convolve_1x1_s8_fpreq_bitmask(&buffer0[30560],4,4,240,(const q7_t*) weight32,bias32,scales32,-1,128,-128,127,&buffer0[29024],&buffer0[25568],4,4,96,sbuf);
 8012fe2:	f8cd a030 	str.w	sl, [sp, #48]	@ 0x30
 8012fe6:	2360      	movs	r3, #96	@ 0x60
 8012fe8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012fea:	940a      	str	r4, [sp, #40]	@ 0x28
 8012fec:	9409      	str	r4, [sp, #36]	@ 0x24
 8012fee:	f506 53ab 	add.w	r3, r6, #5472	@ 0x1560
 8012ff2:	9308      	str	r3, [sp, #32]
 8012ff4:	f503 6358 	add.w	r3, r3, #3456	@ 0xd80
 8012ff8:	9307      	str	r3, [sp, #28]
 8012ffa:	9706      	str	r7, [sp, #24]
 8012ffc:	9505      	str	r5, [sp, #20]
 8012ffe:	2280      	movs	r2, #128	@ 0x80
 8013000:	9204      	str	r2, [sp, #16]
 8013002:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8013006:	9203      	str	r2, [sp, #12]
 8013008:	4b2c      	ldr	r3, [pc, #176]	@ (80130bc <invoke+0xaf4>)
 801300a:	9302      	str	r3, [sp, #8]
 801300c:	4b2c      	ldr	r3, [pc, #176]	@ (80130c0 <invoke+0xaf8>)
 801300e:	9301      	str	r3, [sp, #4]
 8013010:	4b2c      	ldr	r3, [pc, #176]	@ (80130c4 <invoke+0xafc>)
 8013012:	9300      	str	r3, [sp, #0]
 8013014:	464b      	mov	r3, r9
 8013016:	4622      	mov	r2, r4
 8013018:	4621      	mov	r1, r4
 801301a:	4658      	mov	r0, fp
 801301c:	f00b ff0a 	bl	801ee34 <convolve_1x1_s8_fpreq_bitmask>
 8013020:	e052      	b.n	80130c8 <invoke+0xb00>
 8013022:	bf00      	nop
 8013024:	0809a824 	.word	0x0809a824
 8013028:	200080d8 	.word	0x200080d8
 801302c:	0809a8e4 	.word	0x0809a8e4
 8013030:	080991a4 	.word	0x080991a4
 8013034:	200077cc 	.word	0x200077cc
 8013038:	080993e4 	.word	0x080993e4
 801303c:	20007a14 	.word	0x20007a14
 8013040:	08098544 	.word	0x08098544
 8013044:	2000e290 	.word	0x2000e290
 8013048:	20007584 	.word	0x20007584
 801304c:	08098c94 	.word	0x08098c94
 8013050:	08096984 	.word	0x08096984
 8013054:	200074bc 	.word	0x200074bc
 8013058:	08096a44 	.word	0x08096a44
 801305c:	3d202c37 	.word	0x3d202c37
 8013060:	3cddc6ae 	.word	0x3cddc6ae
 8013064:	3d0cdda0 	.word	0x3d0cdda0
 8013068:	08095484 	.word	0x08095484
 801306c:	20005fb0 	.word	0x20005fb0
 8013070:	08095784 	.word	0x08095784
 8013074:	200062b8 	.word	0x200062b8
 8013078:	08094404 	.word	0x08094404
 801307c:	2000df90 	.word	0x2000df90
 8013080:	20005ca8 	.word	0x20005ca8
 8013084:	08094dc4 	.word	0x08094dc4
 8013088:	08091f44 	.word	0x08091f44
 801308c:	20005be0 	.word	0x20005be0
 8013090:	08092004 	.word	0x08092004
 8013094:	3d61159a 	.word	0x3d61159a
 8013098:	3d1c5f3b 	.word	0x3d1c5f3b
 801309c:	08090504 	.word	0x08090504
 80130a0:	20004194 	.word	0x20004194
 80130a4:	080908c4 	.word	0x080908c4
 80130a8:	2000455c 	.word	0x2000455c
 80130ac:	0808a564 	.word	0x0808a564
 80130b0:	2000dbd0 	.word	0x2000dbd0
 80130b4:	20003dcc 	.word	0x20003dcc
 80130b8:	0808d714 	.word	0x0808d714
 80130bc:	080849e4 	.word	0x080849e4
 80130c0:	20003c44 	.word	0x20003c44
 80130c4:	08084b64 	.word	0x08084b64
/* layer 38:CONV_2D */
convolve_1x1_s8_fpreq_bitmask(&buffer0[29024],4,4,96,(const q7_t*) weight33,bias33,scales33,-128,1,-128,127,&buffer0[30560],&buffer0[25760],4,4,384,sbuf);
 80130c8:	f8cd a030 	str.w	sl, [sp, #48]	@ 0x30
 80130cc:	f44f 78c0 	mov.w	r8, #384	@ 0x180
 80130d0:	f8cd 802c 	str.w	r8, [sp, #44]	@ 0x2c
 80130d4:	940a      	str	r4, [sp, #40]	@ 0x28
 80130d6:	9409      	str	r4, [sp, #36]	@ 0x24
 80130d8:	f506 53b1 	add.w	r3, r6, #5664	@ 0x1620
 80130dc:	9308      	str	r3, [sp, #32]
 80130de:	f8cd b01c 	str.w	fp, [sp, #28]
 80130e2:	9706      	str	r7, [sp, #24]
 80130e4:	9505      	str	r5, [sp, #20]
 80130e6:	2201      	movs	r2, #1
 80130e8:	9204      	str	r2, [sp, #16]
 80130ea:	9503      	str	r5, [sp, #12]
 80130ec:	4bb4      	ldr	r3, [pc, #720]	@ (80133c0 <invoke+0xdf8>)
 80130ee:	9302      	str	r3, [sp, #8]
 80130f0:	4bb4      	ldr	r3, [pc, #720]	@ (80133c4 <invoke+0xdfc>)
 80130f2:	9301      	str	r3, [sp, #4]
 80130f4:	4bb4      	ldr	r3, [pc, #720]	@ (80133c8 <invoke+0xe00>)
 80130f6:	9300      	str	r3, [sp, #0]
 80130f8:	2360      	movs	r3, #96	@ 0x60
 80130fa:	4622      	mov	r2, r4
 80130fc:	4621      	mov	r1, r4
 80130fe:	f5ab 60c0 	sub.w	r0, fp, #1536	@ 0x600
 8013102:	f00b fe97 	bl	801ee34 <convolve_1x1_s8_fpreq_bitmask>
/* layer 39:DEPTHWISE_CONV_2D */
depthwise_kernel5x5_stride1_inplace_CHW_fpreq_bitmask(&buffer0[30560],4,4,384,(const q7_t*) CHWweight34,offsetBias34,offsetRBias34,scales34,-128,128,-128,127,&buffer0[30560],&buffer0[26528],4,4,384,sbuf,-128);
 8013106:	950e      	str	r5, [sp, #56]	@ 0x38
 8013108:	f8cd a034 	str.w	sl, [sp, #52]	@ 0x34
 801310c:	f8cd 8030 	str.w	r8, [sp, #48]	@ 0x30
 8013110:	940b      	str	r4, [sp, #44]	@ 0x2c
 8013112:	940a      	str	r4, [sp, #40]	@ 0x28
 8013114:	f506 53c9 	add.w	r3, r6, #6432	@ 0x1920
 8013118:	9309      	str	r3, [sp, #36]	@ 0x24
 801311a:	f8cd b020 	str.w	fp, [sp, #32]
 801311e:	9707      	str	r7, [sp, #28]
 8013120:	9506      	str	r5, [sp, #24]
 8013122:	2280      	movs	r2, #128	@ 0x80
 8013124:	9205      	str	r2, [sp, #20]
 8013126:	9504      	str	r5, [sp, #16]
 8013128:	4ba8      	ldr	r3, [pc, #672]	@ (80133cc <invoke+0xe04>)
 801312a:	9303      	str	r3, [sp, #12]
 801312c:	4ba8      	ldr	r3, [pc, #672]	@ (80133d0 <invoke+0xe08>)
 801312e:	9302      	str	r3, [sp, #8]
 8013130:	4ba8      	ldr	r3, [pc, #672]	@ (80133d4 <invoke+0xe0c>)
 8013132:	9301      	str	r3, [sp, #4]
 8013134:	4ba8      	ldr	r3, [pc, #672]	@ (80133d8 <invoke+0xe10>)
 8013136:	9300      	str	r3, [sp, #0]
 8013138:	4643      	mov	r3, r8
 801313a:	4622      	mov	r2, r4
 801313c:	4621      	mov	r1, r4
 801313e:	4658      	mov	r0, fp
 8013140:	f7fd fcea 	bl	8010b18 <depthwise_kernel5x5_stride1_inplace_CHW_fpreq_bitmask>
/* layer 40:CONV_2D */
convolve_1x1_s8_fpreq_bitmask(&buffer0[30560],4,4,384,(const q7_t*) weight35,bias35,scales35,-16,128,-128,127,&buffer0[30560],&buffer0[27296],4,4,96,sbuf);
 8013144:	f8cd a030 	str.w	sl, [sp, #48]	@ 0x30
 8013148:	2260      	movs	r2, #96	@ 0x60
 801314a:	920b      	str	r2, [sp, #44]	@ 0x2c
 801314c:	940a      	str	r4, [sp, #40]	@ 0x28
 801314e:	9409      	str	r4, [sp, #36]	@ 0x24
 8013150:	f506 53e1 	add.w	r3, r6, #7200	@ 0x1c20
 8013154:	9308      	str	r3, [sp, #32]
 8013156:	f8cd b01c 	str.w	fp, [sp, #28]
 801315a:	9706      	str	r7, [sp, #24]
 801315c:	9505      	str	r5, [sp, #20]
 801315e:	2280      	movs	r2, #128	@ 0x80
 8013160:	9204      	str	r2, [sp, #16]
 8013162:	f06f 030f 	mvn.w	r3, #15
 8013166:	9303      	str	r3, [sp, #12]
 8013168:	4b9c      	ldr	r3, [pc, #624]	@ (80133dc <invoke+0xe14>)
 801316a:	9302      	str	r3, [sp, #8]
 801316c:	4b9c      	ldr	r3, [pc, #624]	@ (80133e0 <invoke+0xe18>)
 801316e:	9301      	str	r3, [sp, #4]
 8013170:	4b9c      	ldr	r3, [pc, #624]	@ (80133e4 <invoke+0xe1c>)
 8013172:	9300      	str	r3, [sp, #0]
 8013174:	4643      	mov	r3, r8
 8013176:	4622      	mov	r2, r4
 8013178:	4621      	mov	r1, r4
 801317a:	4658      	mov	r0, fp
 801317c:	f00b fe5a 	bl	801ee34 <convolve_1x1_s8_fpreq_bitmask>
/* layer 41:ADD */
add_fpreq_bitmask(1536, &buffer0[29024],0.027058998,-1,&buffer0[30560],0.022201976,-16,0.031616762,-1,&buffer0[32288],&buffer0[27488]);
 8013180:	ed9f 8a99 	vldr	s16, [pc, #612]	@ 80133e8 <invoke+0xe20>
 8013184:	f506 53e7 	add.w	r3, r6, #7392	@ 0x1ce0
 8013188:	9300      	str	r3, [sp, #0]
 801318a:	f503 5396 	add.w	r3, r3, #4800	@ 0x12c0
 801318e:	eeff 2a00 	vmov.f32	s5, #240	@ 0xbf800000 -1.0
 8013192:	eeb0 2a48 	vmov.f32	s4, s16
 8013196:	eefb 1a00 	vmov.f32	s3, #176	@ 0xc1800000 -16.0
 801319a:	ed9f 1a94 	vldr	s2, [pc, #592]	@ 80133ec <invoke+0xe24>
 801319e:	465a      	mov	r2, fp
 80131a0:	eef0 0a62 	vmov.f32	s1, s5
 80131a4:	ed9f 0a92 	vldr	s0, [pc, #584]	@ 80133f0 <invoke+0xe28>
 80131a8:	f5ab 61c0 	sub.w	r1, fp, #1536	@ 0x600
 80131ac:	f44f 60c0 	mov.w	r0, #1536	@ 0x600
 80131b0:	f00b f992 	bl	801e4d8 <add_fpreq_bitmask>
/* layer 42:CONV_2D */
convolve_1x1_s8_fpreq_bitmask(&buffer0[32288],4,4,96,(const q7_t*) weight36,bias36,scales36,-128,1,-128,127,&buffer0[33824],&buffer0[29024],4,4,384,sbuf);
 80131b4:	f8cd a030 	str.w	sl, [sp, #48]	@ 0x30
 80131b8:	f8cd 802c 	str.w	r8, [sp, #44]	@ 0x2c
 80131bc:	940a      	str	r4, [sp, #40]	@ 0x28
 80131be:	9409      	str	r4, [sp, #36]	@ 0x24
 80131c0:	f5ab 63c0 	sub.w	r3, fp, #1536	@ 0x600
 80131c4:	9308      	str	r3, [sp, #32]
 80131c6:	f503 5996 	add.w	r9, r3, #4800	@ 0x12c0
 80131ca:	f8cd 901c 	str.w	r9, [sp, #28]
 80131ce:	9706      	str	r7, [sp, #24]
 80131d0:	9505      	str	r5, [sp, #20]
 80131d2:	2301      	movs	r3, #1
 80131d4:	9304      	str	r3, [sp, #16]
 80131d6:	9503      	str	r5, [sp, #12]
 80131d8:	4b86      	ldr	r3, [pc, #536]	@ (80133f4 <invoke+0xe2c>)
 80131da:	9302      	str	r3, [sp, #8]
 80131dc:	4b86      	ldr	r3, [pc, #536]	@ (80133f8 <invoke+0xe30>)
 80131de:	9301      	str	r3, [sp, #4]
 80131e0:	4b86      	ldr	r3, [pc, #536]	@ (80133fc <invoke+0xe34>)
 80131e2:	9300      	str	r3, [sp, #0]
 80131e4:	2360      	movs	r3, #96	@ 0x60
 80131e6:	4622      	mov	r2, r4
 80131e8:	4621      	mov	r1, r4
 80131ea:	f5a9 60c0 	sub.w	r0, r9, #1536	@ 0x600
 80131ee:	f00b fe21 	bl	801ee34 <convolve_1x1_s8_fpreq_bitmask>
/* layer 43:DEPTHWISE_CONV_2D */
depthwise_kernel5x5_stride1_inplace_CHW_fpreq_bitmask(&buffer0[33824],4,4,384,(const q7_t*) CHWweight37,offsetBias37,offsetRBias37,scales37,-128,128,-128,127,&buffer0[33824],&buffer0[29792],4,4,384,sbuf,-128);
 80131f2:	950e      	str	r5, [sp, #56]	@ 0x38
 80131f4:	f8cd a034 	str.w	sl, [sp, #52]	@ 0x34
 80131f8:	f8cd 8030 	str.w	r8, [sp, #48]	@ 0x30
 80131fc:	940b      	str	r4, [sp, #44]	@ 0x2c
 80131fe:	940a      	str	r4, [sp, #40]	@ 0x28
 8013200:	f5a9 637c 	sub.w	r3, r9, #4032	@ 0xfc0
 8013204:	9309      	str	r3, [sp, #36]	@ 0x24
 8013206:	f8cd 9020 	str.w	r9, [sp, #32]
 801320a:	9707      	str	r7, [sp, #28]
 801320c:	9506      	str	r5, [sp, #24]
 801320e:	2380      	movs	r3, #128	@ 0x80
 8013210:	9305      	str	r3, [sp, #20]
 8013212:	9504      	str	r5, [sp, #16]
 8013214:	4b7a      	ldr	r3, [pc, #488]	@ (8013400 <invoke+0xe38>)
 8013216:	9303      	str	r3, [sp, #12]
 8013218:	4b7a      	ldr	r3, [pc, #488]	@ (8013404 <invoke+0xe3c>)
 801321a:	9302      	str	r3, [sp, #8]
 801321c:	4b7a      	ldr	r3, [pc, #488]	@ (8013408 <invoke+0xe40>)
 801321e:	9301      	str	r3, [sp, #4]
 8013220:	4b7a      	ldr	r3, [pc, #488]	@ (801340c <invoke+0xe44>)
 8013222:	9300      	str	r3, [sp, #0]
 8013224:	4643      	mov	r3, r8
 8013226:	4622      	mov	r2, r4
 8013228:	4621      	mov	r1, r4
 801322a:	4648      	mov	r0, r9
 801322c:	f7fd fc74 	bl	8010b18 <depthwise_kernel5x5_stride1_inplace_CHW_fpreq_bitmask>
/* layer 44:CONV_2D */
convolve_1x1_s8_fpreq_bitmask(&buffer0[33824],4,4,384,(const q7_t*) weight38,bias38,scales38,-1,128,-128,127,&buffer0[39968],&buffer0[30560],4,4,96,sbuf);
 8013230:	f8cd a030 	str.w	sl, [sp, #48]	@ 0x30
 8013234:	2360      	movs	r3, #96	@ 0x60
 8013236:	930b      	str	r3, [sp, #44]	@ 0x2c
 8013238:	940a      	str	r4, [sp, #40]	@ 0x28
 801323a:	9409      	str	r4, [sp, #36]	@ 0x24
 801323c:	f8cd b020 	str.w	fp, [sp, #32]
 8013240:	f50b 5b13 	add.w	fp, fp, #9408	@ 0x24c0
 8013244:	f8cd b01c 	str.w	fp, [sp, #28]
 8013248:	9706      	str	r7, [sp, #24]
 801324a:	9505      	str	r5, [sp, #20]
 801324c:	2380      	movs	r3, #128	@ 0x80
 801324e:	9304      	str	r3, [sp, #16]
 8013250:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8013254:	9303      	str	r3, [sp, #12]
 8013256:	4b6e      	ldr	r3, [pc, #440]	@ (8013410 <invoke+0xe48>)
 8013258:	9302      	str	r3, [sp, #8]
 801325a:	4b6e      	ldr	r3, [pc, #440]	@ (8013414 <invoke+0xe4c>)
 801325c:	9301      	str	r3, [sp, #4]
 801325e:	4b6e      	ldr	r3, [pc, #440]	@ (8013418 <invoke+0xe50>)
 8013260:	9300      	str	r3, [sp, #0]
 8013262:	4643      	mov	r3, r8
 8013264:	4622      	mov	r2, r4
 8013266:	4621      	mov	r1, r4
 8013268:	4648      	mov	r0, r9
 801326a:	f00b fde3 	bl	801ee34 <convolve_1x1_s8_fpreq_bitmask>
/* layer 45:ADD */
add_fpreq_bitmask(1536, &buffer0[32288],0.031616762,-1,&buffer0[39968],0.032814495,-1,0.04403092,4,&buffer0[44288],&buffer0[30752]);
 801326e:	f506 49bd 	add.w	r9, r6, #24192	@ 0x5e80
 8013272:	f5ab 5310 	sub.w	r3, fp, #9216	@ 0x2400
 8013276:	9300      	str	r3, [sp, #0]
 8013278:	464b      	mov	r3, r9
 801327a:	eef1 2a00 	vmov.f32	s5, #16	@ 0x40800000  4.0
 801327e:	ed9f 2a67 	vldr	s4, [pc, #412]	@ 801341c <invoke+0xe54>
 8013282:	eeff 1a00 	vmov.f32	s3, #240	@ 0xbf800000 -1.0
 8013286:	ed9f 1a66 	vldr	s2, [pc, #408]	@ 8013420 <invoke+0xe58>
 801328a:	465a      	mov	r2, fp
 801328c:	eef0 0a61 	vmov.f32	s1, s3
 8013290:	eeb0 0a48 	vmov.f32	s0, s16
 8013294:	f5ab 51f0 	sub.w	r1, fp, #7680	@ 0x1e00
 8013298:	f44f 60c0 	mov.w	r0, #1536	@ 0x600
 801329c:	f00b f91c 	bl	801e4d8 <add_fpreq_bitmask>
/* layer 46:CONV_2D */
convolve_1x1_s8_fpreq_bitmask(&buffer0[44288],4,4,96,(const q7_t*) weight39,bias39,scales39,-128,-4,-128,127,&buffer0[35072],&buffer0[32288],4,4,576,sbuf);
 80132a0:	f8cd a030 	str.w	sl, [sp, #48]	@ 0x30
 80132a4:	f44f 7b10 	mov.w	fp, #576	@ 0x240
 80132a8:	f8cd b02c 	str.w	fp, [sp, #44]	@ 0x2c
 80132ac:	940a      	str	r4, [sp, #40]	@ 0x28
 80132ae:	9409      	str	r4, [sp, #36]	@ 0x24
 80132b0:	4b5c      	ldr	r3, [pc, #368]	@ (8013424 <invoke+0xe5c>)
 80132b2:	9308      	str	r3, [sp, #32]
 80132b4:	f506 586a 	add.w	r8, r6, #14976	@ 0x3a80
 80132b8:	f8cd 801c 	str.w	r8, [sp, #28]
 80132bc:	9706      	str	r7, [sp, #24]
 80132be:	9505      	str	r5, [sp, #20]
 80132c0:	f06f 0303 	mvn.w	r3, #3
 80132c4:	9304      	str	r3, [sp, #16]
 80132c6:	9503      	str	r5, [sp, #12]
 80132c8:	4b57      	ldr	r3, [pc, #348]	@ (8013428 <invoke+0xe60>)
 80132ca:	9302      	str	r3, [sp, #8]
 80132cc:	4b57      	ldr	r3, [pc, #348]	@ (801342c <invoke+0xe64>)
 80132ce:	9301      	str	r3, [sp, #4]
 80132d0:	4b57      	ldr	r3, [pc, #348]	@ (8013430 <invoke+0xe68>)
 80132d2:	9300      	str	r3, [sp, #0]
 80132d4:	2360      	movs	r3, #96	@ 0x60
 80132d6:	4622      	mov	r2, r4
 80132d8:	4621      	mov	r1, r4
 80132da:	4648      	mov	r0, r9
 80132dc:	f00b fdaa 	bl	801ee34 <convolve_1x1_s8_fpreq_bitmask>
/* layer 47:DEPTHWISE_CONV_2D */
depthwise_kernel3x3_stride1_inplace_CHW_fpreq_bitmask(&buffer0[35072],4,4,576,(const q7_t*) CHWweight40,offsetBias40,offsetRBias40,scales40,-128,128,-128,127,&buffer0[35072],&buffer0[33440],4,4,576,sbuf,-128);
 80132e0:	950e      	str	r5, [sp, #56]	@ 0x38
 80132e2:	f8cd a034 	str.w	sl, [sp, #52]	@ 0x34
 80132e6:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 80132ea:	940b      	str	r4, [sp, #44]	@ 0x2c
 80132ec:	940a      	str	r4, [sp, #40]	@ 0x28
 80132ee:	f5a8 63cc 	sub.w	r3, r8, #1632	@ 0x660
 80132f2:	9309      	str	r3, [sp, #36]	@ 0x24
 80132f4:	f8cd 8020 	str.w	r8, [sp, #32]
 80132f8:	9707      	str	r7, [sp, #28]
 80132fa:	9506      	str	r5, [sp, #24]
 80132fc:	2380      	movs	r3, #128	@ 0x80
 80132fe:	9305      	str	r3, [sp, #20]
 8013300:	9504      	str	r5, [sp, #16]
 8013302:	4b4c      	ldr	r3, [pc, #304]	@ (8013434 <invoke+0xe6c>)
 8013304:	9303      	str	r3, [sp, #12]
 8013306:	4b4c      	ldr	r3, [pc, #304]	@ (8013438 <invoke+0xe70>)
 8013308:	9302      	str	r3, [sp, #8]
 801330a:	4b4c      	ldr	r3, [pc, #304]	@ (801343c <invoke+0xe74>)
 801330c:	9301      	str	r3, [sp, #4]
 801330e:	4b4c      	ldr	r3, [pc, #304]	@ (8013440 <invoke+0xe78>)
 8013310:	9300      	str	r3, [sp, #0]
 8013312:	465b      	mov	r3, fp
 8013314:	4622      	mov	r2, r4
 8013316:	4621      	mov	r1, r4
 8013318:	4640      	mov	r0, r8
 801331a:	f7fc ff27 	bl	801016c <depthwise_kernel3x3_stride1_inplace_CHW_fpreq_bitmask>
/* layer 48:CONV_2D */
convolve_1x1_s8_fpreq_bitmask(&buffer0[35072],4,4,576,(const q7_t*) weight41,bias41,scales41,-1,128,-128,127,&buffer0[44288],&buffer0[34752],4,4,160,sbuf);
 801331e:	f8cd a030 	str.w	sl, [sp, #48]	@ 0x30
 8013322:	23a0      	movs	r3, #160	@ 0xa0
 8013324:	930b      	str	r3, [sp, #44]	@ 0x2c
 8013326:	940a      	str	r4, [sp, #40]	@ 0x28
 8013328:	9409      	str	r4, [sp, #36]	@ 0x24
 801332a:	f506 5665 	add.w	r6, r6, #14656	@ 0x3940
 801332e:	9608      	str	r6, [sp, #32]
 8013330:	f8cd 901c 	str.w	r9, [sp, #28]
 8013334:	9706      	str	r7, [sp, #24]
 8013336:	9505      	str	r5, [sp, #20]
 8013338:	2380      	movs	r3, #128	@ 0x80
 801333a:	9304      	str	r3, [sp, #16]
 801333c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8013340:	9303      	str	r3, [sp, #12]
 8013342:	4b40      	ldr	r3, [pc, #256]	@ (8013444 <invoke+0xe7c>)
 8013344:	9302      	str	r3, [sp, #8]
 8013346:	4b40      	ldr	r3, [pc, #256]	@ (8013448 <invoke+0xe80>)
 8013348:	9301      	str	r3, [sp, #4]
 801334a:	4b40      	ldr	r3, [pc, #256]	@ (801344c <invoke+0xe84>)
 801334c:	9300      	str	r3, [sp, #0]
 801334e:	465b      	mov	r3, fp
 8013350:	4622      	mov	r2, r4
 8013352:	4621      	mov	r1, r4
 8013354:	4640      	mov	r0, r8
 8013356:	f00b fd6d 	bl	801ee34 <convolve_1x1_s8_fpreq_bitmask>
/* layer 49:AVERAGE_POOL_2D */
avg_pooling(&buffer0[44288],4,4,160,4,4,1,1,-128,127,&buffer0[34592]);
 801335a:	3ea0      	subs	r6, #160	@ 0xa0
 801335c:	9606      	str	r6, [sp, #24]
 801335e:	9705      	str	r7, [sp, #20]
 8013360:	9504      	str	r5, [sp, #16]
 8013362:	2301      	movs	r3, #1
 8013364:	9303      	str	r3, [sp, #12]
 8013366:	9302      	str	r3, [sp, #8]
 8013368:	9401      	str	r4, [sp, #4]
 801336a:	9400      	str	r4, [sp, #0]
 801336c:	23a0      	movs	r3, #160	@ 0xa0
 801336e:	4622      	mov	r2, r4
 8013370:	4621      	mov	r1, r4
 8013372:	4648      	mov	r0, r9
 8013374:	f00d ff72 	bl	802125c <avg_pooling>
/* layer 50:CONV_2D */
convolve_1x1_s8_fpreq_bitmask(&buffer0[34592],1,1,160,(const q7_t*) weight42,bias42,scales42,-34,1,-128,127,&buffer0[35076],&buffer0[35072],1,1,10,sbuf);
 8013378:	f8cd a030 	str.w	sl, [sp, #48]	@ 0x30
 801337c:	230a      	movs	r3, #10
 801337e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8013380:	2301      	movs	r3, #1
 8013382:	930a      	str	r3, [sp, #40]	@ 0x28
 8013384:	9309      	str	r3, [sp, #36]	@ 0x24
 8013386:	f8cd 8020 	str.w	r8, [sp, #32]
 801338a:	f506 74f2 	add.w	r4, r6, #484	@ 0x1e4
 801338e:	9407      	str	r4, [sp, #28]
 8013390:	9706      	str	r7, [sp, #24]
 8013392:	9505      	str	r5, [sp, #20]
 8013394:	9304      	str	r3, [sp, #16]
 8013396:	f06f 0321 	mvn.w	r3, #33	@ 0x21
 801339a:	9303      	str	r3, [sp, #12]
 801339c:	4b2c      	ldr	r3, [pc, #176]	@ (8013450 <invoke+0xe88>)
 801339e:	9302      	str	r3, [sp, #8]
 80133a0:	4b2c      	ldr	r3, [pc, #176]	@ (8013454 <invoke+0xe8c>)
 80133a2:	9301      	str	r3, [sp, #4]
 80133a4:	4b2c      	ldr	r3, [pc, #176]	@ (8013458 <invoke+0xe90>)
 80133a6:	9300      	str	r3, [sp, #0]
 80133a8:	23a0      	movs	r3, #160	@ 0xa0
 80133aa:	2201      	movs	r2, #1
 80133ac:	4611      	mov	r1, r2
 80133ae:	4630      	mov	r0, r6
 80133b0:	f00b fd40 	bl	801ee34 <convolve_1x1_s8_fpreq_bitmask>
/* layer 51:CAST */
fptr = (float*)&buffer0[35116];
 80133b4:	4b29      	ldr	r3, [pc, #164]	@ (801345c <invoke+0xe94>)
 80133b6:	f104 0228 	add.w	r2, r4, #40	@ 0x28
 80133ba:	601a      	str	r2, [r3, #0]
 80133bc:	e050      	b.n	8013460 <invoke+0xe98>
 80133be:	bf00      	nop
 80133c0:	0807b3e4 	.word	0x0807b3e4
 80133c4:	2000363c 	.word	0x2000363c
 80133c8:	0807b9e4 	.word	0x0807b9e4
 80133cc:	080762e4 	.word	0x080762e4
 80133d0:	2000d5d0 	.word	0x2000d5d0
 80133d4:	20003034 	.word	0x20003034
 80133d8:	08078e64 	.word	0x08078e64
 80133dc:	0806d164 	.word	0x0806d164
 80133e0:	20002eac 	.word	0x20002eac
 80133e4:	0806d2e4 	.word	0x0806d2e4
 80133e8:	3d018094 	.word	0x3d018094
 80133ec:	3cb5e0eb 	.word	0x3cb5e0eb
 80133f0:	3cddaad5 	.word	0x3cddaad5
 80133f4:	08063b64 	.word	0x08063b64
 80133f8:	200028a4 	.word	0x200028a4
 80133fc:	08064164 	.word	0x08064164
 8013400:	0805ea64 	.word	0x0805ea64
 8013404:	20001c9c 	.word	0x20001c9c
 8013408:	2000229c 	.word	0x2000229c
 801340c:	080615e4 	.word	0x080615e4
 8013410:	080558e4 	.word	0x080558e4
 8013414:	20001b14 	.word	0x20001b14
 8013418:	08055a64 	.word	0x08055a64
 801341c:	3d3459c4 	.word	0x3d3459c4
 8013420:	3d06687e 	.word	0x3d06687e
 8013424:	20016570 	.word	0x20016570
 8013428:	080477e4 	.word	0x080477e4
 801342c:	2000120c 	.word	0x2000120c
 8013430:	080480e4 	.word	0x080480e4
 8013434:	08044664 	.word	0x08044664
 8013438:	2000ccd0 	.word	0x2000ccd0
 801343c:	20000904 	.word	0x20000904
 8013440:	080463a4 	.word	0x080463a4
 8013444:	0802dbe4 	.word	0x0802dbe4
 8013448:	2000067c 	.word	0x2000067c
 801344c:	0802de64 	.word	0x0802de64
 8013450:	0802dbbc 	.word	0x0802dbbc
 8013454:	2000cca8 	.word	0x2000cca8
 8013458:	20000038 	.word	0x20000038
 801345c:	2000cca0 	.word	0x2000cca0
int8ptr = (int8_t*)&buffer0[35076];
 8013460:	4baf      	ldr	r3, [pc, #700]	@ (8013720 <invoke+0x1158>)
 8013462:	601c      	str	r4, [r3, #0]
for(int i = 0; i < 10; i++) fptr[i] = (float)int8ptr[i];
 8013464:	2300      	movs	r3, #0
 8013466:	e00d      	b.n	8013484 <invoke+0xebc>
 8013468:	4aad      	ldr	r2, [pc, #692]	@ (8013720 <invoke+0x1158>)
 801346a:	6812      	ldr	r2, [r2, #0]
 801346c:	56d2      	ldrsb	r2, [r2, r3]
 801346e:	ee07 2a90 	vmov	s15, r2
 8013472:	4aac      	ldr	r2, [pc, #688]	@ (8013724 <invoke+0x115c>)
 8013474:	6812      	ldr	r2, [r2, #0]
 8013476:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801347a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801347e:	edc2 7a00 	vstr	s15, [r2]
 8013482:	3301      	adds	r3, #1
 8013484:	2b09      	cmp	r3, #9
 8013486:	ddef      	ble.n	8013468 <invoke+0xea0>
/* layer 52:LOG_SOFTMAX */
LogSoftmax((float*)&buffer0[35116],1,1,10,(float*)&buffer0[35076],1,1,10);
 8013488:	4da7      	ldr	r5, [pc, #668]	@ (8013728 <invoke+0x1160>)
 801348a:	260a      	movs	r6, #10
 801348c:	9603      	str	r6, [sp, #12]
 801348e:	2401      	movs	r4, #1
 8013490:	9402      	str	r4, [sp, #8]
 8013492:	9401      	str	r4, [sp, #4]
 8013494:	f1a5 0728 	sub.w	r7, r5, #40	@ 0x28
 8013498:	9700      	str	r7, [sp, #0]
 801349a:	4633      	mov	r3, r6
 801349c:	4622      	mov	r2, r4
 801349e:	4621      	mov	r1, r4
 80134a0:	4628      	mov	r0, r5
 80134a2:	f005 fe37 	bl	8019114 <LogSoftmax>
/* layer 53:NLL_LOSS */
nll_loss((float*)&buffer0[35076],2,1,labels,10,(float*)&buffer0[35116]);
 80134a6:	9501      	str	r5, [sp, #4]
 80134a8:	9600      	str	r6, [sp, #0]
 80134aa:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80134ac:	4622      	mov	r2, r4
 80134ae:	2102      	movs	r1, #2
 80134b0:	4638      	mov	r0, r7
 80134b2:	f005 fec1 	bl	8019238 <nll_loss>
/* layer 54:ZEROS */
fptr = (float*)&buffer0[35116];for(int i = 0; i < 10; i++) fptr[i] = 0.0;
 80134b6:	4b9b      	ldr	r3, [pc, #620]	@ (8013724 <invoke+0x115c>)
 80134b8:	601d      	str	r5, [r3, #0]
 80134ba:	2300      	movs	r3, #0
 80134bc:	e006      	b.n	80134cc <invoke+0xf04>
 80134be:	4a99      	ldr	r2, [pc, #612]	@ (8013724 <invoke+0x115c>)
 80134c0:	6812      	ldr	r2, [r2, #0]
 80134c2:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80134c6:	2100      	movs	r1, #0
 80134c8:	6011      	str	r1, [r2, #0]
 80134ca:	3301      	adds	r3, #1
 80134cc:	2b09      	cmp	r3, #9
 80134ce:	ddf6      	ble.n	80134be <invoke+0xef6>
/* layer 55:ZEROS */
int8ptr = (char*)&buffer0[35116];for(int i = 0; i < 1; i++) int8ptr[i] = 0;
 80134d0:	4b93      	ldr	r3, [pc, #588]	@ (8013720 <invoke+0x1158>)
 80134d2:	4a95      	ldr	r2, [pc, #596]	@ (8013728 <invoke+0x1160>)
 80134d4:	601a      	str	r2, [r3, #0]
 80134d6:	2300      	movs	r3, #0
 80134d8:	e004      	b.n	80134e4 <invoke+0xf1c>
 80134da:	4a91      	ldr	r2, [pc, #580]	@ (8013720 <invoke+0x1158>)
 80134dc:	6812      	ldr	r2, [r2, #0]
 80134de:	2100      	movs	r1, #0
 80134e0:	54d1      	strb	r1, [r2, r3]
 80134e2:	3301      	adds	r3, #1
 80134e4:	2b00      	cmp	r3, #0
 80134e6:	ddf8      	ble.n	80134da <invoke+0xf12>
/* layer 56:ZEROS */
int8ptr = (char*)&buffer0[35116];for(int i = 0; i < 1; i++) int8ptr[i] = 0;
 80134e8:	4b8d      	ldr	r3, [pc, #564]	@ (8013720 <invoke+0x1158>)
 80134ea:	4a8f      	ldr	r2, [pc, #572]	@ (8013728 <invoke+0x1160>)
 80134ec:	601a      	str	r2, [r3, #0]
 80134ee:	2300      	movs	r3, #0
 80134f0:	2b00      	cmp	r3, #0
 80134f2:	dd04      	ble.n	80134fe <invoke+0xf36>
/* layer 57:ONES */
fptr = (float*)&buffer0[35116];for(int i = 0; i < 1; i++) fptr[i] = 1.0;
 80134f4:	4b8b      	ldr	r3, [pc, #556]	@ (8013724 <invoke+0x115c>)
 80134f6:	4a8c      	ldr	r2, [pc, #560]	@ (8013728 <invoke+0x1160>)
 80134f8:	601a      	str	r2, [r3, #0]
 80134fa:	2300      	movs	r3, #0
 80134fc:	e00d      	b.n	801351a <invoke+0xf52>
int8ptr = (char*)&buffer0[35116];for(int i = 0; i < 1; i++) int8ptr[i] = 0;
 80134fe:	4a88      	ldr	r2, [pc, #544]	@ (8013720 <invoke+0x1158>)
 8013500:	6812      	ldr	r2, [r2, #0]
 8013502:	2100      	movs	r1, #0
 8013504:	54d1      	strb	r1, [r2, r3]
 8013506:	3301      	adds	r3, #1
 8013508:	e7f2      	b.n	80134f0 <invoke+0xf28>
fptr = (float*)&buffer0[35116];for(int i = 0; i < 1; i++) fptr[i] = 1.0;
 801350a:	4a86      	ldr	r2, [pc, #536]	@ (8013724 <invoke+0x115c>)
 801350c:	6812      	ldr	r2, [r2, #0]
 801350e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8013512:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8013516:	6011      	str	r1, [r2, #0]
 8013518:	3301      	adds	r3, #1
 801351a:	2b00      	cmp	r3, #0
 801351c:	ddf5      	ble.n	801350a <invoke+0xf42>
/* layer 58:NEGATIVE */
fptr = (float*)&buffer0[35116];fptr2 = (float*)&buffer0[35156];for(int i = 0; i < 1; i++) fptr2[i] = fptr[i] * -1.0f;
 801351e:	4b82      	ldr	r3, [pc, #520]	@ (8013728 <invoke+0x1160>)
 8013520:	4a80      	ldr	r2, [pc, #512]	@ (8013724 <invoke+0x115c>)
 8013522:	6013      	str	r3, [r2, #0]
 8013524:	3328      	adds	r3, #40	@ 0x28
 8013526:	4a81      	ldr	r2, [pc, #516]	@ (801372c <invoke+0x1164>)
 8013528:	6013      	str	r3, [r2, #0]
 801352a:	2300      	movs	r3, #0
 801352c:	2b00      	cmp	r3, #0
 801352e:	dd0a      	ble.n	8013546 <invoke+0xf7e>
/* layer 59:MUL */
fptr = (float*)labels;fptr3 = (float*)&buffer0[35116];fptr2 = &buffer0[35156];for(int i = 0; i < 10; i++) fptr3[i] = *fptr2 * fptr[i];
 8013530:	4b7c      	ldr	r3, [pc, #496]	@ (8013724 <invoke+0x115c>)
 8013532:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8013534:	601a      	str	r2, [r3, #0]
 8013536:	4b7c      	ldr	r3, [pc, #496]	@ (8013728 <invoke+0x1160>)
 8013538:	4a7d      	ldr	r2, [pc, #500]	@ (8013730 <invoke+0x1168>)
 801353a:	6013      	str	r3, [r2, #0]
 801353c:	3328      	adds	r3, #40	@ 0x28
 801353e:	4a7b      	ldr	r2, [pc, #492]	@ (801372c <invoke+0x1164>)
 8013540:	6013      	str	r3, [r2, #0]
 8013542:	2300      	movs	r3, #0
 8013544:	e022      	b.n	801358c <invoke+0xfc4>
fptr = (float*)&buffer0[35116];fptr2 = (float*)&buffer0[35156];for(int i = 0; i < 1; i++) fptr2[i] = fptr[i] * -1.0f;
 8013546:	4a77      	ldr	r2, [pc, #476]	@ (8013724 <invoke+0x115c>)
 8013548:	6812      	ldr	r2, [r2, #0]
 801354a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801354e:	edd2 7a00 	vldr	s15, [r2]
 8013552:	4a76      	ldr	r2, [pc, #472]	@ (801372c <invoke+0x1164>)
 8013554:	6812      	ldr	r2, [r2, #0]
 8013556:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801355a:	eef1 7a67 	vneg.f32	s15, s15
 801355e:	edc2 7a00 	vstr	s15, [r2]
 8013562:	3301      	adds	r3, #1
 8013564:	e7e2      	b.n	801352c <invoke+0xf64>
fptr = (float*)labels;fptr3 = (float*)&buffer0[35116];fptr2 = &buffer0[35156];for(int i = 0; i < 10; i++) fptr3[i] = *fptr2 * fptr[i];
 8013566:	4a71      	ldr	r2, [pc, #452]	@ (801372c <invoke+0x1164>)
 8013568:	6812      	ldr	r2, [r2, #0]
 801356a:	edd2 7a00 	vldr	s15, [r2]
 801356e:	4a6d      	ldr	r2, [pc, #436]	@ (8013724 <invoke+0x115c>)
 8013570:	6812      	ldr	r2, [r2, #0]
 8013572:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8013576:	ed92 7a00 	vldr	s14, [r2]
 801357a:	4a6d      	ldr	r2, [pc, #436]	@ (8013730 <invoke+0x1168>)
 801357c:	6812      	ldr	r2, [r2, #0]
 801357e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8013582:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013586:	edc2 7a00 	vstr	s15, [r2]
 801358a:	3301      	adds	r3, #1
 801358c:	2b09      	cmp	r3, #9
 801358e:	ddea      	ble.n	8013566 <invoke+0xf9e>
/* layer 60:SUM */
sum_3D((float*)&buffer0[35116],1,10,1,1,(float*)&buffer0[35156]);
 8013590:	4c65      	ldr	r4, [pc, #404]	@ (8013728 <invoke+0x1160>)
 8013592:	f104 0528 	add.w	r5, r4, #40	@ 0x28
 8013596:	9501      	str	r5, [sp, #4]
 8013598:	2101      	movs	r1, #1
 801359a:	9100      	str	r1, [sp, #0]
 801359c:	460b      	mov	r3, r1
 801359e:	220a      	movs	r2, #10
 80135a0:	4620      	mov	r0, r4
 80135a2:	f008 fee5 	bl	801c370 <sum_3D>
/* layer 61:EXP */
tte_exp(10,(float*)&buffer0[35076],(float*)&buffer0[35160]);
 80135a6:	f104 062c 	add.w	r6, r4, #44	@ 0x2c
 80135aa:	3c28      	subs	r4, #40	@ 0x28
 80135ac:	4632      	mov	r2, r6
 80135ae:	4621      	mov	r1, r4
 80135b0:	200a      	movs	r0, #10
 80135b2:	f00a fefe 	bl	801e3b2 <tte_exp>
/* layer 62:MUL */
fptr = (float*)&buffer0[35160];fptr3 = (float*)&buffer0[35076];fptr2 = &buffer0[35156];for(int i = 0; i < 10; i++) fptr3[i] = *fptr2 * fptr[i];
 80135b6:	4b5b      	ldr	r3, [pc, #364]	@ (8013724 <invoke+0x115c>)
 80135b8:	601e      	str	r6, [r3, #0]
 80135ba:	4b5d      	ldr	r3, [pc, #372]	@ (8013730 <invoke+0x1168>)
 80135bc:	601c      	str	r4, [r3, #0]
 80135be:	4b5b      	ldr	r3, [pc, #364]	@ (801372c <invoke+0x1164>)
 80135c0:	601d      	str	r5, [r3, #0]
 80135c2:	2300      	movs	r3, #0
 80135c4:	e012      	b.n	80135ec <invoke+0x1024>
 80135c6:	4a59      	ldr	r2, [pc, #356]	@ (801372c <invoke+0x1164>)
 80135c8:	6812      	ldr	r2, [r2, #0]
 80135ca:	edd2 7a00 	vldr	s15, [r2]
 80135ce:	4a55      	ldr	r2, [pc, #340]	@ (8013724 <invoke+0x115c>)
 80135d0:	6812      	ldr	r2, [r2, #0]
 80135d2:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80135d6:	ed92 7a00 	vldr	s14, [r2]
 80135da:	4a55      	ldr	r2, [pc, #340]	@ (8013730 <invoke+0x1168>)
 80135dc:	6812      	ldr	r2, [r2, #0]
 80135de:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80135e2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80135e6:	edc2 7a00 	vstr	s15, [r2]
 80135ea:	3301      	adds	r3, #1
 80135ec:	2b09      	cmp	r3, #9
 80135ee:	ddea      	ble.n	80135c6 <invoke+0xffe>
/* layer 63:SUBTRACT */
sub(10,(float*)&buffer0[35116],(float*)&buffer0[35076],(float*)&buffer0[35156]);
 80135f0:	4c50      	ldr	r4, [pc, #320]	@ (8013734 <invoke+0x116c>)
 80135f2:	4623      	mov	r3, r4
 80135f4:	f1a4 0250 	sub.w	r2, r4, #80	@ 0x50
 80135f8:	f1a4 0128 	sub.w	r1, r4, #40	@ 0x28
 80135fc:	200a      	movs	r0, #10
 80135fe:	f008 fe9b 	bl	801c338 <sub>
/* layer 64:WHERE */
where_zeros_inplace_bit((bool*)&buffer0[35072],10,(float*)&buffer0[35156]);
 8013602:	f1a4 0654 	sub.w	r6, r4, #84	@ 0x54
 8013606:	4622      	mov	r2, r4
 8013608:	210a      	movs	r1, #10
 801360a:	4630      	mov	r0, r6
 801360c:	f00a feee 	bl	801e3ec <where_zeros_inplace_bit>
/* layer 65:MUL */
mul(10,(float*)&buffer0[35156],scales42,(float*)&buffer0[35072]);
 8013610:	4633      	mov	r3, r6
 8013612:	4a49      	ldr	r2, [pc, #292]	@ (8013738 <invoke+0x1170>)
 8013614:	4621      	mov	r1, r4
 8013616:	200a      	movs	r0, #10
 8013618:	f005 fdf2 	bl	8019200 <mul>
/* layer 66:BIAS_UPDATE */
const float v15_bias_QAS[10] = {7226669.0,5630245.0,7711640.5,8892241.0,8484369.0,5921074.5,6742354.0,8089809.0,6873818.5,5485806.5,};
 801361c:	f245 1470 	movw	r4, #20848	@ 0x5170
 8013620:	446c      	add	r4, sp
 8013622:	4d46      	ldr	r5, [pc, #280]	@ (801373c <invoke+0x1174>)
 8013624:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013626:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013628:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801362a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801362c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8013630:	e884 0003 	stmia.w	r4, {r0, r1}
fptr = (float*)&buffer0[35072];//gradients
 8013634:	4b3b      	ldr	r3, [pc, #236]	@ (8013724 <invoke+0x115c>)
 8013636:	601e      	str	r6, [r3, #0]
for(int i = 0; i < 10; i++) v15_bias[i] -= (int32_t)(fptr[i] * blr * v15_bias_QAS[i]);
 8013638:	2300      	movs	r3, #0
 801363a:	e01e      	b.n	801367a <invoke+0x10b2>
 801363c:	4a40      	ldr	r2, [pc, #256]	@ (8013740 <invoke+0x1178>)
 801363e:	6810      	ldr	r0, [r2, #0]
 8013640:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 8013644:	4937      	ldr	r1, [pc, #220]	@ (8013724 <invoke+0x115c>)
 8013646:	6809      	ldr	r1, [r1, #0]
 8013648:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 801364c:	edd1 7a00 	vldr	s15, [r1]
 8013650:	ed9f 7a3c 	vldr	s14, [pc, #240]	@ 8013744 <invoke+0x117c>
 8013654:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013658:	f245 1198 	movw	r1, #20888	@ 0x5198
 801365c:	4469      	add	r1, sp
 801365e:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8013662:	ed11 7a0a 	vldr	s14, [r1, #-40]	@ 0xffffffd8
 8013666:	ee67 7a87 	vmul.f32	s15, s15, s14
 801366a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801366e:	ee17 1a90 	vmov	r1, s15
 8013672:	1a52      	subs	r2, r2, r1
 8013674:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 8013678:	3301      	adds	r3, #1
 801367a:	2b09      	cmp	r3, #9
 801367c:	ddde      	ble.n	801363c <invoke+0x1074>
/* layer 67:TRANSPOSE_CONV_2D */
pointwise_conv_fp_1row10col_10inputdepth_IOHW_int8weight((float*)&buffer0[35072],1,1,10,(q7_t*)v15_weight,NULL,(float*)&buffer0[35752],1,1,160,-FLT_MAX,FLT_MAX,(float*)sbuf, 1);
 801367e:	4d32      	ldr	r5, [pc, #200]	@ (8013748 <invoke+0x1180>)
 8013680:	2101      	movs	r1, #1
 8013682:	9107      	str	r1, [sp, #28]
 8013684:	4b31      	ldr	r3, [pc, #196]	@ (801374c <invoke+0x1184>)
 8013686:	9306      	str	r3, [sp, #24]
 8013688:	23a0      	movs	r3, #160	@ 0xa0
 801368a:	9305      	str	r3, [sp, #20]
 801368c:	9104      	str	r1, [sp, #16]
 801368e:	9103      	str	r1, [sp, #12]
 8013690:	f505 762a 	add.w	r6, r5, #680	@ 0x2a8
 8013694:	9602      	str	r6, [sp, #8]
 8013696:	2400      	movs	r4, #0
 8013698:	9401      	str	r4, [sp, #4]
 801369a:	4b2d      	ldr	r3, [pc, #180]	@ (8013750 <invoke+0x1188>)
 801369c:	681b      	ldr	r3, [r3, #0]
 801369e:	9300      	str	r3, [sp, #0]
 80136a0:	eddf 0a2c 	vldr	s1, [pc, #176]	@ 8013754 <invoke+0x118c>
 80136a4:	ed9f 0a2c 	vldr	s0, [pc, #176]	@ 8013758 <invoke+0x1190>
 80136a8:	230a      	movs	r3, #10
 80136aa:	460a      	mov	r2, r1
 80136ac:	4628      	mov	r0, r5
 80136ae:	f006 fbf5 	bl	8019e9c <pointwise_conv_fp_1row10col_10inputdepth_IOHW_int8weight>
/* layer 68:MUL */
fptr = (float*)&buffer0[35752];fptr3 = (float*)&buffer0[35112];for(int i = 0; i < 160; i++) fptr3[i] = 0.0625 * fptr[i];
 80136b2:	4b1c      	ldr	r3, [pc, #112]	@ (8013724 <invoke+0x115c>)
 80136b4:	601e      	str	r6, [r3, #0]
 80136b6:	3528      	adds	r5, #40	@ 0x28
 80136b8:	4b1d      	ldr	r3, [pc, #116]	@ (8013730 <invoke+0x1168>)
 80136ba:	601d      	str	r5, [r3, #0]
 80136bc:	4623      	mov	r3, r4
 80136be:	e010      	b.n	80136e2 <invoke+0x111a>
 80136c0:	4a18      	ldr	r2, [pc, #96]	@ (8013724 <invoke+0x115c>)
 80136c2:	6812      	ldr	r2, [r2, #0]
 80136c4:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80136c8:	edd2 7a00 	vldr	s15, [r2]
 80136cc:	4a18      	ldr	r2, [pc, #96]	@ (8013730 <invoke+0x1168>)
 80136ce:	6812      	ldr	r2, [r2, #0]
 80136d0:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80136d4:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 801375c <invoke+0x1194>
 80136d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80136dc:	edc2 7a00 	vstr	s15, [r2]
 80136e0:	3301      	adds	r3, #1
 80136e2:	2b9f      	cmp	r3, #159	@ 0x9f
 80136e4:	ddec      	ble.n	80136c0 <invoke+0x10f8>
/* layer 69:ONES */
fptr = (float*)&buffer0[35752];for(int i = 0; i < 2560; i++) fptr[i] = 1.0;
 80136e6:	4b0f      	ldr	r3, [pc, #60]	@ (8013724 <invoke+0x115c>)
 80136e8:	4a1d      	ldr	r2, [pc, #116]	@ (8013760 <invoke+0x1198>)
 80136ea:	601a      	str	r2, [r3, #0]
 80136ec:	2300      	movs	r3, #0
 80136ee:	e007      	b.n	8013700 <invoke+0x1138>
 80136f0:	4a0c      	ldr	r2, [pc, #48]	@ (8013724 <invoke+0x115c>)
 80136f2:	6812      	ldr	r2, [r2, #0]
 80136f4:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80136f8:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80136fc:	6011      	str	r1, [r2, #0]
 80136fe:	3301      	adds	r3, #1
 8013700:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8013704:	dbf4      	blt.n	80136f0 <invoke+0x1128>
/* layer 70:MUL */
fptr = &buffer0[35752];
 8013706:	4b16      	ldr	r3, [pc, #88]	@ (8013760 <invoke+0x1198>)
 8013708:	4a06      	ldr	r2, [pc, #24]	@ (8013724 <invoke+0x115c>)
 801370a:	6013      	str	r3, [r2, #0]
fptr3 = (float*)&buffer0[71456];fptr2 = &buffer0[35112];
 801370c:	4a08      	ldr	r2, [pc, #32]	@ (8013730 <invoke+0x1168>)
 801370e:	4915      	ldr	r1, [pc, #84]	@ (8013764 <invoke+0x119c>)
 8013710:	6011      	str	r1, [r2, #0]
 8013712:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 8013716:	4a05      	ldr	r2, [pc, #20]	@ (801372c <invoke+0x1164>)
 8013718:	6013      	str	r3, [r2, #0]
for(int hw = 0; hw < 16; hw++){
 801371a:	2400      	movs	r4, #0
 801371c:	e03c      	b.n	8013798 <invoke+0x11d0>
 801371e:	bf00      	nop
 8013720:	2000cca4 	.word	0x2000cca4
 8013724:	2000cca0 	.word	0x2000cca0
 8013728:	2001707c 	.word	0x2001707c
 801372c:	2000cc9c 	.word	0x2000cc9c
 8013730:	2000cc98 	.word	0x2000cc98
 8013734:	200170a4 	.word	0x200170a4
 8013738:	0802dbbc 	.word	0x0802dbbc
 801373c:	08027ae0 	.word	0x08027ae0
 8013740:	20000030 	.word	0x20000030
 8013744:	39d1b717 	.word	0x39d1b717
 8013748:	20017050 	.word	0x20017050
 801374c:	2003a750 	.word	0x2003a750
 8013750:	20000034 	.word	0x20000034
 8013754:	7f7fffff 	.word	0x7f7fffff
 8013758:	ff7fffff 	.word	0xff7fffff
 801375c:	3d800000 	.word	0x3d800000
 8013760:	200172f8 	.word	0x200172f8
 8013764:	2001fe70 	.word	0x2001fe70
for(int i = 0; i < 160; i++) *fptr3++ = fptr2[i] * *fptr++;
 8013768:	4ab4      	ldr	r2, [pc, #720]	@ (8013a3c <invoke+0x1474>)
 801376a:	6812      	ldr	r2, [r2, #0]
 801376c:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8013770:	edd2 7a00 	vldr	s15, [r2]
 8013774:	49b2      	ldr	r1, [pc, #712]	@ (8013a40 <invoke+0x1478>)
 8013776:	680a      	ldr	r2, [r1, #0]
 8013778:	1d10      	adds	r0, r2, #4
 801377a:	6008      	str	r0, [r1, #0]
 801377c:	ed92 7a00 	vldr	s14, [r2]
 8013780:	49b0      	ldr	r1, [pc, #704]	@ (8013a44 <invoke+0x147c>)
 8013782:	680a      	ldr	r2, [r1, #0]
 8013784:	1d10      	adds	r0, r2, #4
 8013786:	6008      	str	r0, [r1, #0]
 8013788:	ee67 7a87 	vmul.f32	s15, s15, s14
 801378c:	edc2 7a00 	vstr	s15, [r2]
 8013790:	3301      	adds	r3, #1
 8013792:	2b9f      	cmp	r3, #159	@ 0x9f
 8013794:	dde8      	ble.n	8013768 <invoke+0x11a0>
for(int hw = 0; hw < 16; hw++){
 8013796:	3401      	adds	r4, #1
 8013798:	2c0f      	cmp	r4, #15
 801379a:	dc01      	bgt.n	80137a0 <invoke+0x11d8>
for(int i = 0; i < 160; i++) *fptr3++ = fptr2[i] * *fptr++;
 801379c:	2300      	movs	r3, #0
 801379e:	e7f8      	b.n	8013792 <invoke+0x11ca>
}
/* layer 71:WHERE */
where_zeros_inplace_bit((bool*)&buffer0[34752],2560,(float*)&buffer0[71456]);
 80137a0:	4ca9      	ldr	r4, [pc, #676]	@ (8013a48 <invoke+0x1480>)
 80137a2:	4622      	mov	r2, r4
 80137a4:	f44f 6120 	mov.w	r1, #2560	@ 0xa00
 80137a8:	48a8      	ldr	r0, [pc, #672]	@ (8013a4c <invoke+0x1484>)
 80137aa:	f00a fe1f 	bl	801e3ec <where_zeros_inplace_bit>
/* layer 72:MUL */
fptr = &buffer0[71456];
 80137ae:	4ba4      	ldr	r3, [pc, #656]	@ (8013a40 <invoke+0x1478>)
 80137b0:	601c      	str	r4, [r3, #0]
fptr2 = scales41;
 80137b2:	4ba2      	ldr	r3, [pc, #648]	@ (8013a3c <invoke+0x1474>)
 80137b4:	4aa6      	ldr	r2, [pc, #664]	@ (8013a50 <invoke+0x1488>)
 80137b6:	601a      	str	r2, [r3, #0]
for(int hw = 0; hw < 16; hw++){
 80137b8:	2500      	movs	r5, #0
 80137ba:	e013      	b.n	80137e4 <invoke+0x121c>
for(int i = 0; i < 160; i++){float f = *fptr; *fptr++ = fptr2[i] * f;};
 80137bc:	4ca0      	ldr	r4, [pc, #640]	@ (8013a40 <invoke+0x1478>)
 80137be:	6820      	ldr	r0, [r4, #0]
 80137c0:	4602      	mov	r2, r0
 80137c2:	ecb2 7a01 	vldmia	r2!, {s14}
 80137c6:	499d      	ldr	r1, [pc, #628]	@ (8013a3c <invoke+0x1474>)
 80137c8:	6809      	ldr	r1, [r1, #0]
 80137ca:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 80137ce:	edd1 7a00 	vldr	s15, [r1]
 80137d2:	6022      	str	r2, [r4, #0]
 80137d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80137d8:	edc0 7a00 	vstr	s15, [r0]
 80137dc:	3301      	adds	r3, #1
 80137de:	2b9f      	cmp	r3, #159	@ 0x9f
 80137e0:	ddec      	ble.n	80137bc <invoke+0x11f4>
for(int hw = 0; hw < 16; hw++){
 80137e2:	3501      	adds	r5, #1
 80137e4:	2d0f      	cmp	r5, #15
 80137e6:	dc01      	bgt.n	80137ec <invoke+0x1224>
for(int i = 0; i < 160; i++){float f = *fptr; *fptr++ = fptr2[i] * f;};
 80137e8:	2300      	movs	r3, #0
 80137ea:	e7f8      	b.n	80137de <invoke+0x1216>
}
/* layer 73:SUM */
sum_4D_exclude((float*)&buffer0[71456],1,4,4,160,3,(float*)&buffer0[35112]);
 80137ec:	4c99      	ldr	r4, [pc, #612]	@ (8013a54 <invoke+0x148c>)
 80137ee:	9402      	str	r4, [sp, #8]
 80137f0:	2303      	movs	r3, #3
 80137f2:	9301      	str	r3, [sp, #4]
 80137f4:	23a0      	movs	r3, #160	@ 0xa0
 80137f6:	9300      	str	r3, [sp, #0]
 80137f8:	2304      	movs	r3, #4
 80137fa:	461a      	mov	r2, r3
 80137fc:	2101      	movs	r1, #1
 80137fe:	4892      	ldr	r0, [pc, #584]	@ (8013a48 <invoke+0x1480>)
 8013800:	f008 fe2c 	bl	801c45c <sum_4D_exclude>
/* layer 74:BIAS_UPDATE */
const float v14_conv_2_bias_QAS[160] = {13692137.0,19261938.0,11724018.0,15995767.0,11511035.0,13978226.0,13318236.0,15185337.0,16044907.0,13090192.0,18656104.0,15929412.0,13392275.0,12705674.0,14612814.0,14853912.0,13506463.0,14990395.0,11315240.0,14900121.0,12532963.0,13305904.0,10984116.0,11420090.0,20989936.0,11729253.0,16511564.0,12546760.0,15382199.0,11444539.0,14609242.0,14229125.0,10841364.0,13249268.0,11710322.0,18311496.0,18176314.0,16571779.0,10241948.0,17752202.0,10010849.0,14704289.0,16407807.0,10964493.0,9445204.0,11574554.0,13028653.0,10459334.0,13996892.0,13706602.0,11706172.0,9088910.0,17713242.0,13367667.0,16977514.0,13729297.0,12711183.0,12772596.0,13657839.0,17160660.0,12789136.0,12517683.0,15142629.0,10657967.0,15758544.0,12207528.0,13358369.0,15665969.0,12541531.0,11594505.0,14079964.0,12522974.0,14928081.0,10138978.0,13967913.0,15935079.0,12038422.0,11431681.0,12112233.0,16464442.0,14495634.0,9923740.0,12361548.0,16376936.0,13596515.0,10047472.0,11238909.0,11956242.0,16708229.0,16412659.0,17055102.0,12363023.0,11499603.0,16893202.0,11182502.0,12018862.0,10686181.0,9444339.0,13663267.0,11849798.0,14407176.0,16582653.0,14108628.0,18280370.0,9444990.0,17465492.0,12230222.0,14927575.0,15896605.0,15578875.0,11972533.0,9797134.0,10548356.0,13393242.0,12720091.0,11875466.0,11710234.0,19880172.0,11598175.0,10539637.0,15175966.0,12422034.0,14625480.0,9663037.0,12314371.0,17176266.0,16664494.0,17591406.0,13589260.0,16484145.0,9586017.0,17904128.0,9004582.0,12500575.0,15361911.0,15686215.0,11069421.0,16926154.0,11444003.0,19838518.0,19701492.0,13418607.0,13593890.0,17349308.0,11338150.0,7302307.5,17400080.0,16249119.0,9367620.0,14919256.0,11277772.0,12360135.0,13006402.0,23275230.0,13262085.0,13616705.0,9458116.0,10899180.0,13300777.0,11491153.0,};
 8013804:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8013808:	4993      	ldr	r1, [pc, #588]	@ (8013a58 <invoke+0x1490>)
 801380a:	f644 60f0 	movw	r0, #20208	@ 0x4ef0
 801380e:	4468      	add	r0, sp
 8013810:	f010 fb04 	bl	8023e1c <memcpy>
fptr = (float*)&buffer0[35112];//gradients
 8013814:	4b8a      	ldr	r3, [pc, #552]	@ (8013a40 <invoke+0x1478>)
 8013816:	601c      	str	r4, [r3, #0]
for(int i = 0; i < 160; i++) v14_conv_2_bias[i] -= (int32_t)(fptr[i] * blr * v14_conv_2_bias_QAS[i]);
 8013818:	2300      	movs	r3, #0
 801381a:	e01e      	b.n	801385a <invoke+0x1292>
 801381c:	4a8f      	ldr	r2, [pc, #572]	@ (8013a5c <invoke+0x1494>)
 801381e:	6810      	ldr	r0, [r2, #0]
 8013820:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 8013824:	4986      	ldr	r1, [pc, #536]	@ (8013a40 <invoke+0x1478>)
 8013826:	6809      	ldr	r1, [r1, #0]
 8013828:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 801382c:	edd1 7a00 	vldr	s15, [r1]
 8013830:	ed9f 7a8b 	vldr	s14, [pc, #556]	@ 8013a60 <invoke+0x1498>
 8013834:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013838:	f644 61f0 	movw	r1, #20208	@ 0x4ef0
 801383c:	4469      	add	r1, sp
 801383e:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8013842:	ed91 7a00 	vldr	s14, [r1]
 8013846:	ee67 7a87 	vmul.f32	s15, s15, s14
 801384a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801384e:	ee17 1a90 	vmov	r1, s15
 8013852:	1a52      	subs	r2, r2, r1
 8013854:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 8013858:	3301      	adds	r3, #1
 801385a:	2b9f      	cmp	r3, #159	@ 0x9f
 801385c:	ddde      	ble.n	801381c <invoke+0x1254>
/* layer 75:GROUP_CONV */
const float v15_weight_QAS[10] = {156465.22,121900.914,166965.39,192526.67,183695.81,128197.68,145979.3,175153.14,148825.64,118773.67,};
 801385e:	f644 66c8 	movw	r6, #20168	@ 0x4ec8
 8013862:	446e      	add	r6, sp
 8013864:	4634      	mov	r4, r6
 8013866:	4d7f      	ldr	r5, [pc, #508]	@ (8013a64 <invoke+0x149c>)
 8013868:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801386a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801386c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801386e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013870:	e895 0003 	ldmia.w	r5, {r0, r1}
 8013874:	e884 0003 	stmia.w	r4, {r0, r1}
group_pointwise_conv_fp_in1x1_out1x1_1row10col_uniweight_int8input_inplace((float*)&buffer0[34592],1,1,160,weight_fp44,NULL,v15_weight,1,1,1600,-FLT_MAX,FLT_MAX,(float*)sbuf,1,160, v15_weight_QAS, lr);
 8013878:	eddf 8a7b 	vldr	s17, [pc, #492]	@ 8013a68 <invoke+0x14a0>
 801387c:	ed9f 8a7b 	vldr	s16, [pc, #492]	@ 8013a6c <invoke+0x14a4>
 8013880:	4c7b      	ldr	r4, [pc, #492]	@ (8013a70 <invoke+0x14a8>)
 8013882:	9609      	str	r6, [sp, #36]	@ 0x24
 8013884:	27a0      	movs	r7, #160	@ 0xa0
 8013886:	9708      	str	r7, [sp, #32]
 8013888:	2601      	movs	r6, #1
 801388a:	9607      	str	r6, [sp, #28]
 801388c:	f8df 8200 	ldr.w	r8, [pc, #512]	@ 8013a90 <invoke+0x14c8>
 8013890:	f8cd 8018 	str.w	r8, [sp, #24]
 8013894:	f44f 63c8 	mov.w	r3, #1600	@ 0x640
 8013898:	9305      	str	r3, [sp, #20]
 801389a:	9604      	str	r6, [sp, #16]
 801389c:	9603      	str	r6, [sp, #12]
 801389e:	4b75      	ldr	r3, [pc, #468]	@ (8013a74 <invoke+0x14ac>)
 80138a0:	681b      	ldr	r3, [r3, #0]
 80138a2:	9302      	str	r3, [sp, #8]
 80138a4:	2500      	movs	r5, #0
 80138a6:	9501      	str	r5, [sp, #4]
 80138a8:	4b73      	ldr	r3, [pc, #460]	@ (8013a78 <invoke+0x14b0>)
 80138aa:	681b      	ldr	r3, [r3, #0]
 80138ac:	9300      	str	r3, [sp, #0]
 80138ae:	ed9f 1a73 	vldr	s2, [pc, #460]	@ 8013a7c <invoke+0x14b4>
 80138b2:	eef0 0a68 	vmov.f32	s1, s17
 80138b6:	eeb0 0a48 	vmov.f32	s0, s16
 80138ba:	463b      	mov	r3, r7
 80138bc:	4632      	mov	r2, r6
 80138be:	4631      	mov	r1, r6
 80138c0:	4620      	mov	r0, r4
 80138c2:	f005 f9bd 	bl	8018c40 <group_pointwise_conv_fp_in1x1_out1x1_1row10col_uniweight_int8input_inplace>
/* layer 76:TRANSPOSE_CONV_2D */
pointwise_conv_fp_4row4col_IOHW_int8weight((float*)&buffer0[71456],4,4,160,(q7_t*)v14_conv_2_weight,NULL,(float*)&buffer0[34592],4,4,576,-FLT_MAX,FLT_MAX,(float*)sbuf, 1);
 80138c6:	9607      	str	r6, [sp, #28]
 80138c8:	f8cd 8018 	str.w	r8, [sp, #24]
 80138cc:	f44f 7310 	mov.w	r3, #576	@ 0x240
 80138d0:	9305      	str	r3, [sp, #20]
 80138d2:	2104      	movs	r1, #4
 80138d4:	9104      	str	r1, [sp, #16]
 80138d6:	9103      	str	r1, [sp, #12]
 80138d8:	9402      	str	r4, [sp, #8]
 80138da:	9501      	str	r5, [sp, #4]
 80138dc:	4b68      	ldr	r3, [pc, #416]	@ (8013a80 <invoke+0x14b8>)
 80138de:	681b      	ldr	r3, [r3, #0]
 80138e0:	9300      	str	r3, [sp, #0]
 80138e2:	eef0 0a68 	vmov.f32	s1, s17
 80138e6:	eeb0 0a48 	vmov.f32	s0, s16
 80138ea:	463b      	mov	r3, r7
 80138ec:	460a      	mov	r2, r1
 80138ee:	f504 4010 	add.w	r0, r4, #36864	@ 0x9000
 80138f2:	f006 fe1b 	bl	801a52c <pointwise_conv_fp_4row4col_IOHW_int8weight>
/* layer 77:WHERE */
where_zeros_inplace_bit((bool*)&buffer0[33440],9216,(float*)&buffer0[34592]);
 80138f6:	4622      	mov	r2, r4
 80138f8:	f44f 5110 	mov.w	r1, #9216	@ 0x2400
 80138fc:	f5a4 6090 	sub.w	r0, r4, #1152	@ 0x480
 8013900:	f00a fd74 	bl	801e3ec <where_zeros_inplace_bit>
/* layer 78:MUL */
fptr = &buffer0[34592];
 8013904:	4b4e      	ldr	r3, [pc, #312]	@ (8013a40 <invoke+0x1478>)
 8013906:	601c      	str	r4, [r3, #0]
fptr2 = scales40;
 8013908:	4b4c      	ldr	r3, [pc, #304]	@ (8013a3c <invoke+0x1474>)
 801390a:	4a5e      	ldr	r2, [pc, #376]	@ (8013a84 <invoke+0x14bc>)
 801390c:	601a      	str	r2, [r3, #0]
for(int hw = 0; hw < 16; hw++){
 801390e:	e014      	b.n	801393a <invoke+0x1372>
for(int i = 0; i < 576; i++){float f = *fptr; *fptr++ = fptr2[i] * f;};
 8013910:	4c4b      	ldr	r4, [pc, #300]	@ (8013a40 <invoke+0x1478>)
 8013912:	6820      	ldr	r0, [r4, #0]
 8013914:	4602      	mov	r2, r0
 8013916:	ecb2 7a01 	vldmia	r2!, {s14}
 801391a:	4948      	ldr	r1, [pc, #288]	@ (8013a3c <invoke+0x1474>)
 801391c:	6809      	ldr	r1, [r1, #0]
 801391e:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8013922:	edd1 7a00 	vldr	s15, [r1]
 8013926:	6022      	str	r2, [r4, #0]
 8013928:	ee67 7a87 	vmul.f32	s15, s15, s14
 801392c:	edc0 7a00 	vstr	s15, [r0]
 8013930:	3301      	adds	r3, #1
 8013932:	f5b3 7f10 	cmp.w	r3, #576	@ 0x240
 8013936:	dbeb      	blt.n	8013910 <invoke+0x1348>
for(int hw = 0; hw < 16; hw++){
 8013938:	3501      	adds	r5, #1
 801393a:	2d0f      	cmp	r5, #15
 801393c:	dc01      	bgt.n	8013942 <invoke+0x137a>
for(int i = 0; i < 576; i++){float f = *fptr; *fptr++ = fptr2[i] * f;};
 801393e:	2300      	movs	r3, #0
 8013940:	e7f7      	b.n	8013932 <invoke+0x136a>
}
/* layer 79:SUM */
sum_4D_exclude((float*)&buffer0[34592],1,4,4,576,3,(float*)&buffer0[71456]);
 8013942:	484b      	ldr	r0, [pc, #300]	@ (8013a70 <invoke+0x14a8>)
 8013944:	f500 4410 	add.w	r4, r0, #36864	@ 0x9000
 8013948:	9402      	str	r4, [sp, #8]
 801394a:	2303      	movs	r3, #3
 801394c:	9301      	str	r3, [sp, #4]
 801394e:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8013952:	9300      	str	r3, [sp, #0]
 8013954:	2304      	movs	r3, #4
 8013956:	461a      	mov	r2, r3
 8013958:	2101      	movs	r1, #1
 801395a:	f008 fd7f 	bl	801c45c <sum_4D_exclude>
/* layer 80:BIAS_UPDATE */
const float v14_conv_1_bias_QAS[576] = {654677250.0,56907796.0,28639336.0,35434564.0,41620364.0,670483260.0,99952424.0,46708484.0,65207204.0,77129590.0,86876216.0,26197844.0,51814240.0,37802844.0,56369708.0,80488216.0,496990340.0,103415900.0,52359292.0,117645930.0,36162868.0,66714136.0,41964964.0,70289260.0,141463520.0,35091620.0,292941020.0,319235940.0,149274560.0,31588280.0,58581532.0,30769990.0,94868030.0,1084318700.0,120959870.0,55601030.0,26995596.0,58911108.0,58494684.0,73105710.0,52481680.0,95490550.0,549109250.0,78954710.0,35137028.0,59012830.0,289998900.0,29434386.0,51404452.0,81299550.0,49754300.0,21620110.0,32478784.0,131605530.0,107687110.0,59945176.0,63924004.0,54849904.0,63493092.0,45972916.0,70220950.0,103747230.0,47871584.0,62248656.0,275410370.0,24195816.0,26073014.0,254556940.0,80991980.0,96683720.0,42729896.0,213654620.0,80830030.0,322784220.0,553329100.0,46875692.0,422841380.0,63145850.0,47938756.0,72988320.0,58928640.0,50203988.0,44146424.0,120659020.0,69507544.0,13374964.0,240567940.0,18266646.0,54699344.0,57096424.0,552308540.0,84762350.0,242749870.0,319167500.0,71150340.0,31884426.0,66255364.0,85494536.0,66699116.0,36679252.0,44997460.0,180317470.0,87871224.0,41108684.0,531991520.0,34514850.0,96381270.0,69300616.0,57619676.0,43981004.0,289805760.0,19124140.0,107008740.0,344962750.0,72299440.0,580689100.0,209671490.0,33476972.0,61112460.0,50215950.0,68393176.0,52556184.0,124962520.0,44188224.0,54853452.0,48236770.0,58527270.0,71695250.0,174800380.0,73951940.0,20854050.0,23348352.0,78900630.0,15238067.0,68789464.0,96828620.0,279096060.0,100488270.0,67073372.0,58398588.0,132698136.0,62893096.0,586947800.0,128614300.0,382380770.0,52745670.0,27297846.0,295490000.0,171373980.0,166499040.0,228337550.0,111371580.0,67201010.0,46145636.0,71408990.0,45095148.0,19798874.0,76104970.0,47009500.0,108986410.0,71923400.0,391806720.0,50333988.0,101243990.0,70909430.0,31091898.0,57822284.0,351701800.0,64377884.0,108605920.0,132598290.0,65642250.0,29381194.0,26002788.0,560494500.0,222602530.0,73611160.0,64367284.0,102444700.0,105854720.0,91623460.0,584034200.0,40446036.0,88276990.0,589991400.0,80158650.0,66977012.0,127081304.0,50682140.0,97636456.0,174896960.0,37453344.0,16513916.0,52115344.0,54673972.0,284836600.0,69556504.0,114206056.0,104500710.0,43250244.0,52804620.0,46978070.0,43776224.0,76813900.0,77624424.0,498489570.0,58108268.0,65040160.0,234663680.0,47201516.0,52909956.0,58724840.0,333171140.0,47209908.0,70600750.0,441201400.0,61439932.0,93082650.0,220306510.0,234074530.0,56594264.0,702751700.0,125412504.0,248965900.0,232523090.0,17991080.0,346721060.0,63789436.0,503435740.0,241199520.0,80868664.0,209974930.0,47489420.0,68403180.0,73742520.0,86631710.0,54824900.0,292945340.0,74857430.0,25703130.0,84739330.0,39290590.0,303463550.0,45986228.0,81848770.0,53310760.0,54298540.0,30542152.0,106303380.0,87395580.0,287210020.0,49321840.0,39647710.0,18478792.0,59350676.0,35629800.0,484234340.0,48085950.0,16154992.0,404483400.0,615795100.0,78496264.0,73261360.0,61674108.0,26099064.0,699598200.0,38941500.0,64231510.0,60505180.0,64973576.0,70256390.0,70861230.0,51139610.0,32120648.0,62785516.0,43137724.0,51929396.0,368455740.0,201290560.0,82584390.0,81244980.0,62516724.0,74438950.0,64338556.0,80612080.0,54837100.0,15520916.0,39409464.0,80629010.0,114839130.0,34846412.0,201007310.0,65928788.0,42773108.0,131007010.0,170778990.0,65153372.0,74664136.0,88584860.0,359521200.0,237987870.0,794981400.0,43835344.0,48056710.0,54212630.0,224232620.0,142729860.0,45310160.0,60274170.0,61516890.0,100241690.0,214157500.0,174766220.0,18965498.0,976528500.0,125968050.0,48190196.0,68159544.0,90855440.0,80148870.0,25554136.0,90372420.0,44151196.0,142363860.0,99211896.0,159560720.0,61584640.0,44390890.0,62563260.0,739954200.0,250580800.0,83113890.0,215827520.0,69334890.0,39331624.0,63023030.0,49171260.0,96203420.0,15227498.0,46266300.0,103972744.0,63911150.0,58022224.0,65204764.0,57357650.0,102470850.0,51409000.0,18943040.0,178717700.0,23863238.0,56017300.0,126508060.0,610637200.0,572862700.0,260035950.0,88401090.0,55596428.0,537952800.0,264884660.0,88599830.0,56247860.0,85039380.0,98471000.0,43227290.0,42081484.0,236852130.0,36193100.0,55489476.0,264554350.0,67817690.0,95430696.0,65984290.0,21100126.0,416677280.0,732663800.0,64633684.0,66381230.0,46598948.0,270284860.0,29732766.0,109784184.0,54277784.0,787284800.0,72548990.0,71628000.0,98449980.0,41073880.0,40253188.0,310405020.0,66526836.0,50062824.0,398259680.0,283337060.0,39688530.0,46420836.0,278220450.0,199301380.0,61640308.0,351477630.0,51733724.0,65544252.0,91552850.0,79158580.0,74639830.0,348254750.0,32287442.0,54703772.0,66396820.0,61409970.0,477720900.0,67987610.0,258890910.0,111633100.0,367385900.0,57199184.0,40422564.0,124957060.0,42436824.0,122911460.0,32194310.0,44816732.0,21652908.0,48304724.0,620104300.0,455923460.0,65915470.0,122298800.0,108369930.0,63116344.0,51079930.0,71023740.0,50536428.0,108716120.0,69045450.0,160311230.0,61704950.0,5438406.0,45865820.0,98318760.0,97947630.0,92464410.0,266429890.0,39297060.0,361692480.0,84327330.0,52093148.0,68813580.0,62595140.0,44849070.0,69300080.0,43442304.0,598566460.0,145892500.0,178124620.0,54539664.0,104331250.0,176513900.0,89473016.0,57357950.0,77571130.0,68650960.0,275267700.0,519989540.0,76950050.0,72244020.0,50186412.0,63371010.0,675403300.0,100704300.0,58621812.0,95153496.0,335437300.0,140058380.0,82091176.0,60262028.0,79512620.0,152860740.0,44524184.0,67407224.0,33087474.0,371648420.0,33859164.0,57698550.0,83707120.0,39638400.0,192536240.0,56621800.0,70704990.0,1146847200.0,151390600.0,64262056.0,46334990.0,378402530.0,413929000.0,43777404.0,106047910.0,320401200.0,40397160.0,59336308.0,59474780.0,399783870.0,41248050.0,35563644.0,533717760.0,60820964.0,121610904.0,70730456.0,35886370.0,36166430.0,743826940.0,89319450.0,200731490.0,280399680.0,130070810.0,74413980.0,42912524.0,62994880.0,131365280.0,56617220.0,132340504.0,86821544.0,57484040.0,129530720.0,35509516.0,26503264.0,97707144.0,59481024.0,187618800.0,63759810.0,341817500.0,55760372.0,340905150.0,298305280.0,29314520.0,63348276.0,206844780.0,37981620.0,104377210.0,208315120.0,65593612.0,85215460.0,66000492.0,189495310.0,112676800.0,68011340.0,283621600.0,53067724.0,83703340.0,39738884.0,102314980.0,34048096.0,56217644.0,109366650.0,71244810.0,67235336.0,68341896.0,15974653.0,66683380.0,293023680.0,67268040.0,55150110.0,28825000.0,81498376.0,59237252.0,299566400.0,80850824.0,44838536.0,45711468.0,62308544.0,84774080.0,76161624.0,33728570.0,35460708.0,48520600.0,89148140.0,54691024.0,};
 801395e:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 8013962:	4949      	ldr	r1, [pc, #292]	@ (8013a88 <invoke+0x14c0>)
 8013964:	f244 50c8 	movw	r0, #17864	@ 0x45c8
 8013968:	4468      	add	r0, sp
 801396a:	f010 fa57 	bl	8023e1c <memcpy>
fptr = (float*)&buffer0[71456];//gradients
 801396e:	4b34      	ldr	r3, [pc, #208]	@ (8013a40 <invoke+0x1478>)
 8013970:	601c      	str	r4, [r3, #0]
for(int i = 0; i < 576; i++) v14_conv_1_bias[i] -= (int32_t)(fptr[i] * blr * v14_conv_1_bias_QAS[i]);
 8013972:	2300      	movs	r3, #0
 8013974:	e01e      	b.n	80139b4 <invoke+0x13ec>
 8013976:	4a45      	ldr	r2, [pc, #276]	@ (8013a8c <invoke+0x14c4>)
 8013978:	6810      	ldr	r0, [r2, #0]
 801397a:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 801397e:	4930      	ldr	r1, [pc, #192]	@ (8013a40 <invoke+0x1478>)
 8013980:	6809      	ldr	r1, [r1, #0]
 8013982:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8013986:	edd1 7a00 	vldr	s15, [r1]
 801398a:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 8013a60 <invoke+0x1498>
 801398e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013992:	f244 51c8 	movw	r1, #17864	@ 0x45c8
 8013996:	4469      	add	r1, sp
 8013998:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 801399c:	ed91 7a00 	vldr	s14, [r1]
 80139a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80139a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80139a8:	ee17 1a90 	vmov	r1, s15
 80139ac:	1a52      	subs	r2, r2, r1
 80139ae:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 80139b2:	3301      	adds	r3, #1
 80139b4:	f5b3 7f10 	cmp.w	r3, #576	@ 0x240
 80139b8:	dbdd      	blt.n	8013976 <invoke+0x13ae>
/* layer 81:TRANSPOSE_CONV_2D */
transpose_depthwise_conv_fp_kernel3_stride1_inpad1_outpad0_IOHW_int8weight((float*)&buffer0[34592],4,4,576,v14_conv_1_weight,NULL,(float*)&buffer0[34592],4,4,576,-FLT_MAX,FLT_MAX,(float*)sbuf,1,0);
 80139ba:	4c2d      	ldr	r4, [pc, #180]	@ (8013a70 <invoke+0x14a8>)
 80139bc:	2500      	movs	r5, #0
 80139be:	9508      	str	r5, [sp, #32]
 80139c0:	2301      	movs	r3, #1
 80139c2:	9307      	str	r3, [sp, #28]
 80139c4:	4b32      	ldr	r3, [pc, #200]	@ (8013a90 <invoke+0x14c8>)
 80139c6:	9306      	str	r3, [sp, #24]
 80139c8:	f44f 7310 	mov.w	r3, #576	@ 0x240
 80139cc:	9305      	str	r3, [sp, #20]
 80139ce:	2104      	movs	r1, #4
 80139d0:	9104      	str	r1, [sp, #16]
 80139d2:	9103      	str	r1, [sp, #12]
 80139d4:	9402      	str	r4, [sp, #8]
 80139d6:	9501      	str	r5, [sp, #4]
 80139d8:	4a2e      	ldr	r2, [pc, #184]	@ (8013a94 <invoke+0x14cc>)
 80139da:	6812      	ldr	r2, [r2, #0]
 80139dc:	9200      	str	r2, [sp, #0]
 80139de:	eddf 0a22 	vldr	s1, [pc, #136]	@ 8013a68 <invoke+0x14a0>
 80139e2:	ed9f 0a22 	vldr	s0, [pc, #136]	@ 8013a6c <invoke+0x14a4>
 80139e6:	460a      	mov	r2, r1
 80139e8:	4620      	mov	r0, r4
 80139ea:	f008 ff4c 	bl	801c886 <transpose_depthwise_conv_fp_kernel3_stride1_inpad1_outpad0_IOHW_int8weight>
/* layer 82:WHERE */
where_zeros_inplace_bit((bool*)&buffer0[32288],9216,(float*)&buffer0[34592]);
 80139ee:	4622      	mov	r2, r4
 80139f0:	f44f 5110 	mov.w	r1, #9216	@ 0x2400
 80139f4:	f5a4 6010 	sub.w	r0, r4, #2304	@ 0x900
 80139f8:	f00a fcf8 	bl	801e3ec <where_zeros_inplace_bit>
/* layer 83:MUL */
fptr = &buffer0[34592];
 80139fc:	4b10      	ldr	r3, [pc, #64]	@ (8013a40 <invoke+0x1478>)
 80139fe:	601c      	str	r4, [r3, #0]
fptr2 = scales39;
 8013a00:	4b0e      	ldr	r3, [pc, #56]	@ (8013a3c <invoke+0x1474>)
 8013a02:	4a25      	ldr	r2, [pc, #148]	@ (8013a98 <invoke+0x14d0>)
 8013a04:	601a      	str	r2, [r3, #0]
for(int hw = 0; hw < 16; hw++){
 8013a06:	e014      	b.n	8013a32 <invoke+0x146a>
for(int i = 0; i < 576; i++){float f = *fptr; *fptr++ = fptr2[i] * f;};
 8013a08:	4c0d      	ldr	r4, [pc, #52]	@ (8013a40 <invoke+0x1478>)
 8013a0a:	6820      	ldr	r0, [r4, #0]
 8013a0c:	4602      	mov	r2, r0
 8013a0e:	ecb2 7a01 	vldmia	r2!, {s14}
 8013a12:	490a      	ldr	r1, [pc, #40]	@ (8013a3c <invoke+0x1474>)
 8013a14:	6809      	ldr	r1, [r1, #0]
 8013a16:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8013a1a:	edd1 7a00 	vldr	s15, [r1]
 8013a1e:	6022      	str	r2, [r4, #0]
 8013a20:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013a24:	edc0 7a00 	vstr	s15, [r0]
 8013a28:	3301      	adds	r3, #1
 8013a2a:	f5b3 7f10 	cmp.w	r3, #576	@ 0x240
 8013a2e:	dbeb      	blt.n	8013a08 <invoke+0x1440>
for(int hw = 0; hw < 16; hw++){
 8013a30:	3501      	adds	r5, #1
 8013a32:	2d0f      	cmp	r5, #15
 8013a34:	dc32      	bgt.n	8013a9c <invoke+0x14d4>
for(int i = 0; i < 576; i++){float f = *fptr; *fptr++ = fptr2[i] * f;};
 8013a36:	2300      	movs	r3, #0
 8013a38:	e7f7      	b.n	8013a2a <invoke+0x1462>
 8013a3a:	bf00      	nop
 8013a3c:	2000cc9c 	.word	0x2000cc9c
 8013a40:	2000cca0 	.word	0x2000cca0
 8013a44:	2000cc98 	.word	0x2000cc98
 8013a48:	2001fe70 	.word	0x2001fe70
 8013a4c:	20016f10 	.word	0x20016f10
 8013a50:	0802dbe4 	.word	0x0802dbe4
 8013a54:	20017078 	.word	0x20017078
 8013a58:	08027b08 	.word	0x08027b08
 8013a5c:	20000678 	.word	0x20000678
 8013a60:	39d1b717 	.word	0x39d1b717
 8013a64:	08027d88 	.word	0x08027d88
 8013a68:	7f7fffff 	.word	0x7f7fffff
 8013a6c:	ff7fffff 	.word	0xff7fffff
 8013a70:	20016e70 	.word	0x20016e70
 8013a74:	20000034 	.word	0x20000034
 8013a78:	2000002c 	.word	0x2000002c
 8013a7c:	3a51b717 	.word	0x3a51b717
 8013a80:	200008fc 	.word	0x200008fc
 8013a84:	08044664 	.word	0x08044664
 8013a88:	08027db0 	.word	0x08027db0
 8013a8c:	20000900 	.word	0x20000900
 8013a90:	2003a750 	.word	0x2003a750
 8013a94:	20001204 	.word	0x20001204
 8013a98:	080477e4 	.word	0x080477e4
}
/* layer 84:SUM */
sum_4D_exclude((float*)&buffer0[34592],1,4,4,576,3,(float*)&buffer0[32288]);
 8013a9c:	48a9      	ldr	r0, [pc, #676]	@ (8013d44 <invoke+0x177c>)
 8013a9e:	f5a0 6410 	sub.w	r4, r0, #2304	@ 0x900
 8013aa2:	9402      	str	r4, [sp, #8]
 8013aa4:	2303      	movs	r3, #3
 8013aa6:	9301      	str	r3, [sp, #4]
 8013aa8:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8013aac:	9300      	str	r3, [sp, #0]
 8013aae:	2304      	movs	r3, #4
 8013ab0:	461a      	mov	r2, r3
 8013ab2:	2101      	movs	r1, #1
 8013ab4:	f008 fcd2 	bl	801c45c <sum_4D_exclude>
/* layer 85:BIAS_UPDATE */
const float v14_conv_0_bias_QAS[576] = {709765500.0,1095124000.0,1133707000.0,815438500.0,511527780.0,1367263900.0,935322600.0,844678340.0,990682000.0,1381466900.0,1661784400.0,1016122940.0,1224061200.0,1013002750.0,428049950.0,670605060.0,589710600.0,650380160.0,557326300.0,1432191400.0,831155840.0,917173400.0,1181492500.0,880701950.0,498734750.0,560498400.0,851469200.0,2326794200.0,860911600.0,899014600.0,1542670500.0,1193208800.0,1208935700.0,1334557300.0,1723967400.0,1017743300.0,1047666560.0,803147300.0,991691650.0,1285904900.0,943131500.0,2076445000.0,568394750.0,766322900.0,1009402400.0,1752257800.0,901930900.0,1196144100.0,877986370.0,1504507600.0,1440736100.0,1676165000.0,1356689400.0,1116655700.0,796375200.0,975324400.0,900250560.0,1693932000.0,1119845900.0,1277458300.0,1268598400.0,940435260.0,1058945800.0,1202319900.0,803017150.0,1553228700.0,1649039600.0,592482560.0,1543578800.0,2043024000.0,590441800.0,583050940.0,981700800.0,1877846700.0,862232060.0,1199681000.0,587289500.0,910118660.0,1029848770.0,582502100.0,1141456000.0,830896300.0,966474200.0,1600403100.0,1206793700.0,1261174000.0,645275650.0,627599940.0,828432260.0,705586100.0,997754900.0,1288693800.0,1377384700.0,954810940.0,802859500.0,786782100.0,1292652800.0,888381100.0,791653700.0,966741100.0,1359114100.0,1421973500.0,1713822800.0,1807880400.0,755974500.0,921512960.0,1034368400.0,909598600.0,1138169200.0,875483500.0,744147100.0,547103700.0,1126018000.0,751019200.0,2665237200.0,402269400.0,1124923800.0,1253719600.0,795353200.0,800949570.0,707095200.0,1632616800.0,880725500.0,1502117000.0,1478159600.0,1059249300.0,618686000.0,1267334700.0,1343037000.0,998627700.0,1103230500.0,606646800.0,1502279000.0,1081737100.0,1499061500.0,793925950.0,1354904600.0,1395839200.0,704076700.0,778446140.0,996775040.0,842334500.0,677417000.0,1322773200.0,764164700.0,717671040.0,983127550.0,1306062000.0,1398581400.0,2267852300.0,913928640.0,765004600.0,1039427460.0,895914430.0,1201822600.0,793640200.0,485753660.0,1458245500.0,1148978400.0,1249098500.0,1240560500.0,529751800.0,810625860.0,729382600.0,1876112100.0,2655239700.0,1317100200.0,755093800.0,1626249900.0,1355298300.0,464236320.0,1248849700.0,658562750.0,988066940.0,1037217540.0,1402158800.0,891950200.0,1141235700.0,768246660.0,1105301000.0,544895100.0,1038515900.0,1569874700.0,1374045300.0,1365792100.0,707770240.0,857808960.0,1733172200.0,1274738000.0,791595900.0,1094738600.0,969909570.0,1335364000.0,889775400.0,1279947900.0,904945860.0,1355467600.0,1272010000.0,395509000.0,1186386000.0,1511950000.0,1125813000.0,1361319700.0,1315675600.0,667403800.0,1006691100.0,950591700.0,1222079100.0,882939900.0,998370300.0,879234940.0,1526667600.0,1133747100.0,1795115800.0,618088060.0,430757400.0,1056906100.0,742673700.0,820676900.0,829036160.0,1062813800.0,801857300.0,1524490900.0,1130863500.0,1553224600.0,1208842600.0,784218900.0,1458397600.0,1026584770.0,1671973600.0,1103741700.0,1380621700.0,1504777500.0,817890500.0,790377400.0,1468335600.0,1475093200.0,1956903600.0,1723930900.0,1065083900.0,577031500.0,624219200.0,691416260.0,1004647300.0,1522902800.0,697993150.0,1398376100.0,1668307600.0,1218290300.0,675446700.0,473089950.0,1260903400.0,1296227600.0,1017332350.0,1079602200.0,1728847600.0,761102600.0,904108600.0,960484350.0,1028917000.0,1110003300.0,917011600.0,946854460.0,932012200.0,781880200.0,741687500.0,1114406500.0,1167860900.0,1219633900.0,1201702300.0,671067500.0,1208231000.0,568765500.0,859809900.0,1056809400.0,1332625300.0,554227700.0,1579453000.0,720678100.0,1096826900.0,989365570.0,1522905700.0,1355347100.0,647235800.0,919510300.0,756880300.0,527748350.0,1170371300.0,891398000.0,1319128000.0,806378000.0,1085371100.0,1114828700.0,1147039900.0,1255932800.0,805798140.0,1260319900.0,2730469600.0,1523122200.0,456933700.0,1664981600.0,329745120.0,768808800.0,1698862800.0,1368207100.0,1259227900.0,1135502700.0,533421220.0,875108740.0,1315042000.0,1610768400.0,552992100.0,2074859600.0,728770100.0,704792770.0,1323453200.0,2092041300.0,478484740.0,1627354200.0,856432260.0,800860540.0,1426148700.0,936139900.0,866274940.0,836225900.0,1476864400.0,909409200.0,1340054300.0,659692300.0,497744450.0,1056237250.0,1164675500.0,1281789600.0,850571260.0,1570496100.0,770182600.0,826975700.0,771177000.0,1582711000.0,727766400.0,1845083400.0,2280922000.0,694984450.0,614463200.0,938864700.0,1484511500.0,1076206100.0,974194750.0,1146216300.0,977081800.0,1988339000.0,1142222100.0,514207940.0,1580486700.0,1007209340.0,848592900.0,908745800.0,505462500.0,1365757600.0,1429319000.0,1159292800.0,841443100.0,1222609900.0,583328000.0,1434691500.0,1124150800.0,1118268800.0,1495555500.0,496960060.0,1468733400.0,511777800.0,1266581400.0,924647400.0,848324200.0,1468851600.0,1693428200.0,302855500.0,1029968100.0,1182835000.0,1188315300.0,859590700.0,1038217000.0,460949820.0,931617600.0,1218704900.0,1332053200.0,968419650.0,961760450.0,974512450.0,956192450.0,1257385000.0,591231740.0,662804740.0,1519281400.0,802349060.0,655362240.0,770534000.0,838000450.0,785072200.0,936890000.0,1308171600.0,1099153900.0,1704177200.0,1115482200.0,866558700.0,1682019800.0,1578424300.0,2326447600.0,870230600.0,1198532700.0,973222660.0,832662340.0,345076380.0,1247841200.0,841159100.0,1356277100.0,1057226200.0,980127800.0,1835405400.0,903260200.0,1724645600.0,1053157900.0,1269480600.0,995525760.0,968609150.0,1345127200.0,922574400.0,1351952100.0,1592046100.0,1140705300.0,902511000.0,706637100.0,670551230.0,977607600.0,753510800.0,1286277600.0,1372853100.0,560120770.0,1319472400.0,372056640.0,1182992600.0,671349950.0,600612900.0,1720631800.0,1004348160.0,1812159500.0,1290155900.0,765228300.0,1290548100.0,1053504000.0,2210465800.0,571374850.0,1130181000.0,1189527800.0,2101162000.0,1014256400.0,959216500.0,672499260.0,938408960.0,1661429600.0,954882560.0,708066940.0,1170326500.0,686253060.0,1436656300.0,2456641500.0,653572540.0,902271740.0,1455706800.0,1438566700.0,1223845800.0,639383200.0,1000602100.0,968534800.0,916141300.0,720094850.0,1080491900.0,802088450.0,660013950.0,1354206000.0,1555291400.0,680623170.0,893461950.0,2420506400.0,2187462700.0,2141534300.0,1374263000.0,791174900.0,468521060.0,1192926600.0,1607688700.0,891179500.0,832951360.0,1184124500.0,1435509000.0,1180843000.0,1220177400.0,768656100.0,1036418370.0,1392252000.0,682545500.0,788558900.0,803753400.0,1047760060.0,1255842000.0,1787099300.0,1008697100.0,1280515300.0,773963260.0,1449254000.0,1279767400.0,1202323600.0,641619000.0,1070403260.0,870887500.0,1194177000.0,782379140.0,927551170.0,902481400.0,2463644200.0,1756292200.0,633898560.0,1542372500.0,1121136800.0,1055708600.0,795748900.0,1110882000.0,1305546900.0,837518500.0,725063360.0,888921860.0,1204967200.0,1227687200.0,1083948500.0,743211970.0,786811500.0,679662800.0,1071571400.0,1100937000.0,1137544700.0,1230878700.0,652873100.0,503117630.0,1067040900.0,1052204540.0,556872400.0,984733600.0,755281150.0,1200749400.0,1399731300.0,804894700.0,1933307500.0,948895400.0,692623740.0,612503300.0,709957060.0,1121045600.0,2337875500.0,627245000.0,526102820.0,850095170.0,1337719700.0,1122795000.0,613296400.0,310497730.0,1546923300.0,1554380000.0,1416566100.0,1378671700.0,1216238000.0,1961352200.0,624456700.0,639845760.0,847553000.0,670097000.0,1434944900.0,};
 8013ab8:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 8013abc:	49a2      	ldr	r1, [pc, #648]	@ (8013d48 <invoke+0x1780>)
 8013abe:	f643 40c8 	movw	r0, #15560	@ 0x3cc8
 8013ac2:	4468      	add	r0, sp
 8013ac4:	f010 f9aa 	bl	8023e1c <memcpy>
fptr = (float*)&buffer0[32288];//gradients
 8013ac8:	4ba0      	ldr	r3, [pc, #640]	@ (8013d4c <invoke+0x1784>)
 8013aca:	601c      	str	r4, [r3, #0]
for(int i = 0; i < 576; i++) v14_conv_0_bias[i] -= (int32_t)(fptr[i] * blr * v14_conv_0_bias_QAS[i]);
 8013acc:	2300      	movs	r3, #0
 8013ace:	e01e      	b.n	8013b0e <invoke+0x1546>
 8013ad0:	4a9f      	ldr	r2, [pc, #636]	@ (8013d50 <invoke+0x1788>)
 8013ad2:	6810      	ldr	r0, [r2, #0]
 8013ad4:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 8013ad8:	499c      	ldr	r1, [pc, #624]	@ (8013d4c <invoke+0x1784>)
 8013ada:	6809      	ldr	r1, [r1, #0]
 8013adc:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8013ae0:	edd1 7a00 	vldr	s15, [r1]
 8013ae4:	ed9f 7a9b 	vldr	s14, [pc, #620]	@ 8013d54 <invoke+0x178c>
 8013ae8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013aec:	f643 41c8 	movw	r1, #15560	@ 0x3cc8
 8013af0:	4469      	add	r1, sp
 8013af2:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8013af6:	ed91 7a00 	vldr	s14, [r1]
 8013afa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013afe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013b02:	ee17 1a90 	vmov	r1, s15
 8013b06:	1a52      	subs	r2, r2, r1
 8013b08:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 8013b0c:	3301      	adds	r3, #1
 8013b0e:	f5b3 7f10 	cmp.w	r3, #576	@ 0x240
 8013b12:	dbdd      	blt.n	8013ad0 <invoke+0x1508>
/* layer 86:TRANSPOSE_CONV_2D */
pointwise_conv_fp_4row4col_IOHW_int8weight((float*)&buffer0[34592],4,4,576,(q7_t*)v14_conv_0_weight,NULL,(float*)&buffer0[71456],4,4,96,-FLT_MAX,FLT_MAX,(float*)sbuf, 1);
 8013b14:	4d8b      	ldr	r5, [pc, #556]	@ (8013d44 <invoke+0x177c>)
 8013b16:	2301      	movs	r3, #1
 8013b18:	9307      	str	r3, [sp, #28]
 8013b1a:	4b8f      	ldr	r3, [pc, #572]	@ (8013d58 <invoke+0x1790>)
 8013b1c:	9306      	str	r3, [sp, #24]
 8013b1e:	2360      	movs	r3, #96	@ 0x60
 8013b20:	9305      	str	r3, [sp, #20]
 8013b22:	2104      	movs	r1, #4
 8013b24:	9104      	str	r1, [sp, #16]
 8013b26:	9103      	str	r1, [sp, #12]
 8013b28:	f505 4610 	add.w	r6, r5, #36864	@ 0x9000
 8013b2c:	9602      	str	r6, [sp, #8]
 8013b2e:	2400      	movs	r4, #0
 8013b30:	9401      	str	r4, [sp, #4]
 8013b32:	4b8a      	ldr	r3, [pc, #552]	@ (8013d5c <invoke+0x1794>)
 8013b34:	681b      	ldr	r3, [r3, #0]
 8013b36:	9300      	str	r3, [sp, #0]
 8013b38:	eddf 0a89 	vldr	s1, [pc, #548]	@ 8013d60 <invoke+0x1798>
 8013b3c:	ed9f 0a89 	vldr	s0, [pc, #548]	@ 8013d64 <invoke+0x179c>
 8013b40:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8013b44:	460a      	mov	r2, r1
 8013b46:	4628      	mov	r0, r5
 8013b48:	f006 fcf0 	bl	801a52c <pointwise_conv_fp_4row4col_IOHW_int8weight>
/* layer 87:WHERE */
where_zeros_inplace_bit((bool*)&buffer0[30752],1536,(float*)&buffer0[71456]);
 8013b4c:	f5a5 6570 	sub.w	r5, r5, #3840	@ 0xf00
 8013b50:	4632      	mov	r2, r6
 8013b52:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8013b56:	4628      	mov	r0, r5
 8013b58:	f00a fc48 	bl	801e3ec <where_zeros_inplace_bit>
/* layer 88:DIV */
fptr3 = (float*)&buffer0[30752]; fptr2 = (float*)&buffer0[71456];
 8013b5c:	4b82      	ldr	r3, [pc, #520]	@ (8013d68 <invoke+0x17a0>)
 8013b5e:	601d      	str	r5, [r3, #0]
 8013b60:	4b82      	ldr	r3, [pc, #520]	@ (8013d6c <invoke+0x17a4>)
 8013b62:	601e      	str	r6, [r3, #0]
for(int i = 0; i < 1536; i++) *fptr3++ = *fptr2++ / 0.044030919671058655;
 8013b64:	4623      	mov	r3, r4
 8013b66:	e010      	b.n	8013b8a <invoke+0x15c2>
 8013b68:	4980      	ldr	r1, [pc, #512]	@ (8013d6c <invoke+0x17a4>)
 8013b6a:	680a      	ldr	r2, [r1, #0]
 8013b6c:	1d10      	adds	r0, r2, #4
 8013b6e:	6008      	str	r0, [r1, #0]
 8013b70:	edd2 6a00 	vldr	s13, [r2]
 8013b74:	497c      	ldr	r1, [pc, #496]	@ (8013d68 <invoke+0x17a0>)
 8013b76:	680a      	ldr	r2, [r1, #0]
 8013b78:	1d10      	adds	r0, r2, #4
 8013b7a:	6008      	str	r0, [r1, #0]
 8013b7c:	ed9f 7a7c 	vldr	s14, [pc, #496]	@ 8013d70 <invoke+0x17a8>
 8013b80:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8013b84:	edc2 7a00 	vstr	s15, [r2]
 8013b88:	3301      	adds	r3, #1
 8013b8a:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8013b8e:	dbeb      	blt.n	8013b68 <invoke+0x15a0>
/* layer 89:MUL */
fptr = (float*)&buffer0[30752];fptr3 = (float*)&buffer0[55136];for(int i = 0; i < 1536; i++) fptr3[i] = 0.032814495265483856 * fptr[i];
 8013b90:	4b6e      	ldr	r3, [pc, #440]	@ (8013d4c <invoke+0x1784>)
 8013b92:	4a78      	ldr	r2, [pc, #480]	@ (8013d74 <invoke+0x17ac>)
 8013b94:	601a      	str	r2, [r3, #0]
 8013b96:	4b74      	ldr	r3, [pc, #464]	@ (8013d68 <invoke+0x17a0>)
 8013b98:	4a77      	ldr	r2, [pc, #476]	@ (8013d78 <invoke+0x17b0>)
 8013b9a:	601a      	str	r2, [r3, #0]
 8013b9c:	2300      	movs	r3, #0
 8013b9e:	e010      	b.n	8013bc2 <invoke+0x15fa>
 8013ba0:	4a6a      	ldr	r2, [pc, #424]	@ (8013d4c <invoke+0x1784>)
 8013ba2:	6812      	ldr	r2, [r2, #0]
 8013ba4:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8013ba8:	edd2 7a00 	vldr	s15, [r2]
 8013bac:	4a6e      	ldr	r2, [pc, #440]	@ (8013d68 <invoke+0x17a0>)
 8013bae:	6812      	ldr	r2, [r2, #0]
 8013bb0:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8013bb4:	ed9f 7a71 	vldr	s14, [pc, #452]	@ 8013d7c <invoke+0x17b4>
 8013bb8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013bbc:	edc2 7a00 	vstr	s15, [r2]
 8013bc0:	3301      	adds	r3, #1
 8013bc2:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8013bc6:	dbeb      	blt.n	8013ba0 <invoke+0x15d8>
/* layer 90:WHERE */
where_zeros_inplace_bit((bool*)&buffer0[30560],1536,(float*)&buffer0[55136]);
 8013bc8:	4c6b      	ldr	r4, [pc, #428]	@ (8013d78 <invoke+0x17b0>)
 8013bca:	4622      	mov	r2, r4
 8013bcc:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8013bd0:	f5a4 40c0 	sub.w	r0, r4, #24576	@ 0x6000
 8013bd4:	f00a fc0a 	bl	801e3ec <where_zeros_inplace_bit>
/* layer 91:MUL */
fptr = &buffer0[55136];
 8013bd8:	4b5c      	ldr	r3, [pc, #368]	@ (8013d4c <invoke+0x1784>)
 8013bda:	601c      	str	r4, [r3, #0]
fptr2 = scales38;
 8013bdc:	4b63      	ldr	r3, [pc, #396]	@ (8013d6c <invoke+0x17a4>)
 8013bde:	4a68      	ldr	r2, [pc, #416]	@ (8013d80 <invoke+0x17b8>)
 8013be0:	601a      	str	r2, [r3, #0]
for(int hw = 0; hw < 16; hw++){
 8013be2:	2500      	movs	r5, #0
 8013be4:	e013      	b.n	8013c0e <invoke+0x1646>
for(int i = 0; i < 96; i++){float f = *fptr; *fptr++ = fptr2[i] * f;};
 8013be6:	4c59      	ldr	r4, [pc, #356]	@ (8013d4c <invoke+0x1784>)
 8013be8:	6820      	ldr	r0, [r4, #0]
 8013bea:	4602      	mov	r2, r0
 8013bec:	ecb2 7a01 	vldmia	r2!, {s14}
 8013bf0:	495e      	ldr	r1, [pc, #376]	@ (8013d6c <invoke+0x17a4>)
 8013bf2:	6809      	ldr	r1, [r1, #0]
 8013bf4:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8013bf8:	edd1 7a00 	vldr	s15, [r1]
 8013bfc:	6022      	str	r2, [r4, #0]
 8013bfe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013c02:	edc0 7a00 	vstr	s15, [r0]
 8013c06:	3301      	adds	r3, #1
 8013c08:	2b5f      	cmp	r3, #95	@ 0x5f
 8013c0a:	ddec      	ble.n	8013be6 <invoke+0x161e>
for(int hw = 0; hw < 16; hw++){
 8013c0c:	3501      	adds	r5, #1
 8013c0e:	2d0f      	cmp	r5, #15
 8013c10:	dc01      	bgt.n	8013c16 <invoke+0x164e>
for(int i = 0; i < 96; i++){float f = *fptr; *fptr++ = fptr2[i] * f;};
 8013c12:	2300      	movs	r3, #0
 8013c14:	e7f8      	b.n	8013c08 <invoke+0x1640>
}
/* layer 92:SUM */
sum_4D_exclude((float*)&buffer0[55136],1,4,4,96,3,(float*)&buffer0[30560]);
 8013c16:	4858      	ldr	r0, [pc, #352]	@ (8013d78 <invoke+0x17b0>)
 8013c18:	f5a0 44c0 	sub.w	r4, r0, #24576	@ 0x6000
 8013c1c:	9402      	str	r4, [sp, #8]
 8013c1e:	2303      	movs	r3, #3
 8013c20:	9301      	str	r3, [sp, #4]
 8013c22:	2360      	movs	r3, #96	@ 0x60
 8013c24:	9300      	str	r3, [sp, #0]
 8013c26:	2304      	movs	r3, #4
 8013c28:	461a      	mov	r2, r3
 8013c2a:	2101      	movs	r1, #1
 8013c2c:	f008 fc16 	bl	801c45c <sum_4D_exclude>
/* layer 93:BIAS_UPDATE */
const float v13_conv_2_bias_QAS[96] = {355876930.0,558494000.0,171505010.0,219625920.0,252224220.0,303974660.0,250815900.0,445427970.0,339608640.0,302080860.0,380221800.0,512144100.0,215463940.0,219955250.0,378082370.0,229628900.0,114224056.0,536883650.0,218712540.0,180932660.0,295388800.0,343863170.0,320962270.0,212863230.0,378079970.0,294832800.0,291525060.0,195432300.0,367240320.0,309562050.0,88026150.0,251921040.0,315553280.0,493595100.0,414583550.0,257529400.0,299791600.0,319802300.0,207819330.0,318879900.0,288209820.0,346871230.0,167362420.0,140486420.0,186923460.0,163456770.0,249238110.0,318699300.0,325383230.0,52047384.0,95620120.0,202914190.0,310612670.0,289033300.0,233746460.0,566257000.0,309147260.0,211750430.0,197801090.0,93774480.0,54541588.0,209369070.0,261716340.0,584899100.0,219669650.0,316235360.0,428031520.0,209397600.0,307910600.0,281835000.0,357124060.0,180688110.0,239177200.0,124883480.0,275977470.0,442674700.0,269128260.0,153219920.0,597601900.0,359578720.0,300028000.0,106665224.0,100305060.0,204829940.0,341734340.0,196705010.0,193376800.0,216446640.0,332725200.0,569350900.0,153075920.0,308560060.0,208734180.0,123613210.0,229790660.0,232261920.0,};
 8013c30:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8013c34:	4953      	ldr	r1, [pc, #332]	@ (8013d84 <invoke+0x17bc>)
 8013c36:	f643 3048 	movw	r0, #15176	@ 0x3b48
 8013c3a:	4468      	add	r0, sp
 8013c3c:	f010 f8ee 	bl	8023e1c <memcpy>
fptr = (float*)&buffer0[30560];//gradients
 8013c40:	4b42      	ldr	r3, [pc, #264]	@ (8013d4c <invoke+0x1784>)
 8013c42:	601c      	str	r4, [r3, #0]
for(int i = 0; i < 96; i++) v13_conv_2_bias[i] -= (int32_t)(fptr[i] * blr * v13_conv_2_bias_QAS[i]);
 8013c44:	2300      	movs	r3, #0
 8013c46:	e01e      	b.n	8013c86 <invoke+0x16be>
 8013c48:	4a4f      	ldr	r2, [pc, #316]	@ (8013d88 <invoke+0x17c0>)
 8013c4a:	6810      	ldr	r0, [r2, #0]
 8013c4c:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 8013c50:	493e      	ldr	r1, [pc, #248]	@ (8013d4c <invoke+0x1784>)
 8013c52:	6809      	ldr	r1, [r1, #0]
 8013c54:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8013c58:	edd1 7a00 	vldr	s15, [r1]
 8013c5c:	ed9f 7a3d 	vldr	s14, [pc, #244]	@ 8013d54 <invoke+0x178c>
 8013c60:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013c64:	f643 3148 	movw	r1, #15176	@ 0x3b48
 8013c68:	4469      	add	r1, sp
 8013c6a:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8013c6e:	ed91 7a00 	vldr	s14, [r1]
 8013c72:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013c76:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013c7a:	ee17 1a90 	vmov	r1, s15
 8013c7e:	1a52      	subs	r2, r2, r1
 8013c80:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 8013c84:	3301      	adds	r3, #1
 8013c86:	2b5f      	cmp	r3, #95	@ 0x5f
 8013c88:	ddde      	ble.n	8013c48 <invoke+0x1680>
/* layer 94:TRANSPOSE_CONV_2D */
pointwise_conv_fp_4row4col_IOHW_int8weight((float*)&buffer0[55136],4,4,96,(q7_t*)v13_conv_2_weight,NULL,(float*)&buffer0[30560],4,4,384,-FLT_MAX,FLT_MAX,(float*)sbuf, 1);
 8013c8a:	4e3b      	ldr	r6, [pc, #236]	@ (8013d78 <invoke+0x17b0>)
 8013c8c:	2301      	movs	r3, #1
 8013c8e:	9307      	str	r3, [sp, #28]
 8013c90:	4b31      	ldr	r3, [pc, #196]	@ (8013d58 <invoke+0x1790>)
 8013c92:	9306      	str	r3, [sp, #24]
 8013c94:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8013c98:	9305      	str	r3, [sp, #20]
 8013c9a:	2104      	movs	r1, #4
 8013c9c:	9104      	str	r1, [sp, #16]
 8013c9e:	9103      	str	r1, [sp, #12]
 8013ca0:	f5a6 44c0 	sub.w	r4, r6, #24576	@ 0x6000
 8013ca4:	9402      	str	r4, [sp, #8]
 8013ca6:	2500      	movs	r5, #0
 8013ca8:	9501      	str	r5, [sp, #4]
 8013caa:	4b38      	ldr	r3, [pc, #224]	@ (8013d8c <invoke+0x17c4>)
 8013cac:	681b      	ldr	r3, [r3, #0]
 8013cae:	9300      	str	r3, [sp, #0]
 8013cb0:	eddf 0a2b 	vldr	s1, [pc, #172]	@ 8013d60 <invoke+0x1798>
 8013cb4:	ed9f 0a2b 	vldr	s0, [pc, #172]	@ 8013d64 <invoke+0x179c>
 8013cb8:	2360      	movs	r3, #96	@ 0x60
 8013cba:	460a      	mov	r2, r1
 8013cbc:	4630      	mov	r0, r6
 8013cbe:	f006 fc35 	bl	801a52c <pointwise_conv_fp_4row4col_IOHW_int8weight>
/* layer 95:WHERE */
where_zeros_inplace_bit((bool*)&buffer0[29792],6144,(float*)&buffer0[30560]);
 8013cc2:	4622      	mov	r2, r4
 8013cc4:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8013cc8:	f5a6 40c6 	sub.w	r0, r6, #25344	@ 0x6300
 8013ccc:	f00a fb8e 	bl	801e3ec <where_zeros_inplace_bit>
/* layer 96:MUL */
fptr = &buffer0[30560];
 8013cd0:	4b1e      	ldr	r3, [pc, #120]	@ (8013d4c <invoke+0x1784>)
 8013cd2:	601c      	str	r4, [r3, #0]
fptr2 = scales37;
 8013cd4:	4b25      	ldr	r3, [pc, #148]	@ (8013d6c <invoke+0x17a4>)
 8013cd6:	4a2e      	ldr	r2, [pc, #184]	@ (8013d90 <invoke+0x17c8>)
 8013cd8:	601a      	str	r2, [r3, #0]
for(int hw = 0; hw < 16; hw++){
 8013cda:	e014      	b.n	8013d06 <invoke+0x173e>
for(int i = 0; i < 384; i++){float f = *fptr; *fptr++ = fptr2[i] * f;};
 8013cdc:	4c1b      	ldr	r4, [pc, #108]	@ (8013d4c <invoke+0x1784>)
 8013cde:	6820      	ldr	r0, [r4, #0]
 8013ce0:	4602      	mov	r2, r0
 8013ce2:	ecb2 7a01 	vldmia	r2!, {s14}
 8013ce6:	4921      	ldr	r1, [pc, #132]	@ (8013d6c <invoke+0x17a4>)
 8013ce8:	6809      	ldr	r1, [r1, #0]
 8013cea:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8013cee:	edd1 7a00 	vldr	s15, [r1]
 8013cf2:	6022      	str	r2, [r4, #0]
 8013cf4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013cf8:	edc0 7a00 	vstr	s15, [r0]
 8013cfc:	3301      	adds	r3, #1
 8013cfe:	f5b3 7fc0 	cmp.w	r3, #384	@ 0x180
 8013d02:	dbeb      	blt.n	8013cdc <invoke+0x1714>
for(int hw = 0; hw < 16; hw++){
 8013d04:	3501      	adds	r5, #1
 8013d06:	2d0f      	cmp	r5, #15
 8013d08:	dc01      	bgt.n	8013d0e <invoke+0x1746>
for(int i = 0; i < 384; i++){float f = *fptr; *fptr++ = fptr2[i] * f;};
 8013d0a:	2300      	movs	r3, #0
 8013d0c:	e7f7      	b.n	8013cfe <invoke+0x1736>
}
/* layer 97:SUM */
sum_4D_exclude((float*)&buffer0[30560],1,4,4,384,3,(float*)&buffer0[55136]);
 8013d0e:	4821      	ldr	r0, [pc, #132]	@ (8013d94 <invoke+0x17cc>)
 8013d10:	f500 44c0 	add.w	r4, r0, #24576	@ 0x6000
 8013d14:	9402      	str	r4, [sp, #8]
 8013d16:	2303      	movs	r3, #3
 8013d18:	9301      	str	r3, [sp, #4]
 8013d1a:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8013d1e:	9300      	str	r3, [sp, #0]
 8013d20:	2304      	movs	r3, #4
 8013d22:	461a      	mov	r2, r3
 8013d24:	2101      	movs	r1, #1
 8013d26:	f008 fb99 	bl	801c45c <sum_4D_exclude>
/* layer 98:BIAS_UPDATE */
const float v13_conv_1_bias_QAS[384] = {29903106.0,218695170.0,30306388.0,21724138.0,535217340.0,16003526.0,32152158.0,187248000.0,11008200.0,10799484.0,33226112.0,25116114.0,13621018.0,88510960.0,216415630.0,36400264.0,20554932.0,85092610.0,13933570.0,40355590.0,19902466.0,162674620.0,8.514448e+20,34753044.0,36432384.0,106568250.0,21425456.0,62075030.0,56788890.0,218641630.0,62288770.0,78014410.0,38646750.0,21849236.0,10505907.0,84220616.0,165009550.0,27466204.0,27632670.0,24674206.0,243689440.0,136897330.0,64120964.0,192845090.0,33581936.0,294545250.0,19203338.0,8347400.5,44178140.0,98293650.0,46789390.0,85510260.0,115284230.0,406463070.0,47568624.0,39491936.0,1425052300.0,110039064.0,84780000.0,98775730.0,5429590.5,54328024.0,40784012.0,14251685.0,19731754.0,49599268.0,143573600.0,52199044.0,64020470.0,8.514448e+20,63777044.0,1240437900.0,23135490.0,104101800.0,37786950.0,59503050.0,32931996.0,8.514448e+20,23411048.0,28174422.0,41912440.0,1129791900.0,45772176.0,576092160.0,43555050.0,59650776.0,58871796.0,52104410.0,180291150.0,45319780.0,630081300.0,33330492.0,25461428.0,60240560.0,21556068.0,16496781.0,220467540.0,25849228.0,68962510.0,60926360.0,23426336.0,8.514448e+20,70230640.0,64390164.0,48119532.0,681097900.0,149453680.0,20411554.0,2068529.8,101910424.0,32540704.0,116077410.0,101141944.0,28197638.0,288374460.0,97656350.0,125656240.0,697916000.0,94551580.0,7238937.0,30893486.0,31146326.0,47771092.0,22109046.0,181613490.0,156987170.0,10137324.0,14380247.0,23749974.0,34948384.0,28464574.0,35196444.0,184802720.0,18045186.0,8.514448e+20,972604200.0,176434930.0,35577184.0,350785000.0,45171788.0,20368120.0,100501416.0,689966660.0,66735710.0,91060700.0,150600080.0,55002780.0,61597720.0,21528004.0,51178550.0,58461624.0,23989124.0,23032286.0,51682744.0,142413460.0,105533640.0,19441712.0,34129590.0,27312670.0,86819570.0,26903978.0,75896120.0,16438411.0,15282757.0,18410920.0,31545624.0,29712804.0,20630142.0,212912900.0,208794450.0,22804224.0,8.514448e+20,57922828.0,72065770.0,54211576.0,478728800.0,40695136.0,56643690.0,22905564.0,73612504.0,138857460.0,1020830100.0,11712604.0,29323960.0,32946764.0,32294184.0,33965812.0,44834436.0,96104920.0,44905708.0,106658530.0,52512044.0,88080680.0,100838840.0,52295196.0,84067410.0,51566480.0,22363844.0,42417760.0,19235632.0,41795750.0,2364194600.0,176797940.0,22229236.0,65894810.0,14518711.0,37160068.0,60382000.0,29139062.0,52835044.0,49179852.0,25524106.0,33450300.0,71744744.0,139331860.0,105134560.0,1343524200.0,121738936.0,66152212.0,234290320.0,91344690.0,62273204.0,28954232.0,9760435.0,117927130.0,23199580.0,34121540.0,1007458900.0,19002262.0,23868702.0,18456332.0,24511972.0,23436084.0,33889172.0,37044356.0,45994308.0,78664400.0,19103196.0,20565574.0,25134748.0,41795270.0,78745440.0,25432282.0,36809604.0,22888154.0,40720704.0,98644840.0,30299742.0,36693624.0,16980772.0,19945392.0,216585360.0,113229760.0,8.514448e+20,23825210.0,79609320.0,14199620.0,868785800.0,63508516.0,28225906.0,43626556.0,26480122.0,304683600.0,30790816.0,32378780.0,59837400.0,115109340.0,177095550.0,35438440.0,78271360.0,13395547.0,245560660.0,355709800.0,110673030.0,833379900.0,21303774.0,12327210.0,28411482.0,37121492.0,93276590.0,2403352.0,14007026.0,60998384.0,82678340.0,25447940.0,21988886.0,77557730.0,78396560.0,381440060.0,163138900.0,535285020.0,27119984.0,8.514448e+20,22378012.0,265606290.0,166443070.0,55623184.0,29839490.0,24620542.0,30222376.0,31380324.0,31162294.0,62026920.0,22052116.0,36080496.0,47588308.0,19013760.0,110051660.0,84972930.0,73442910.0,36334824.0,11475609.0,312681630.0,68187690.0,30441394.0,36119148.0,112473000.0,280030850.0,30804322.0,29880286.0,35358196.0,8.514448e+20,84218910.0,36732496.0,1307728100.0,23856358.0,165226740.0,51993308.0,8.514448e+20,31531298.0,249580770.0,39758644.0,31771484.0,34759572.0,102811704.0,23604470.0,31572148.0,47229416.0,8.514448e+20,27637554.0,57290044.0,138265900.0,42498036.0,22459320.0,24007922.0,108555000.0,39797216.0,51128264.0,17208626.0,8.514448e+20,46867080.0,66854470.0,28288860.0,16591960.0,172624800.0,43966544.0,23823556.0,8489910.0,28979696.0,107371800.0,27236328.0,31858474.0,75676580.0,31478474.0,7945755.0,36691710.0,20057414.0,50837704.0,42353784.0,8.514448e+20,145009040.0,697708700.0,45465740.0,521025920.0,37596176.0,21722252.0,60942212.0,25127978.0,710074900.0,1101367600.0,90038510.0,74934250.0,8.514448e+20,64313932.0,};
 8013d2a:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8013d2e:	491a      	ldr	r1, [pc, #104]	@ (8013d98 <invoke+0x17d0>)
 8013d30:	f243 5048 	movw	r0, #13640	@ 0x3548
 8013d34:	4468      	add	r0, sp
 8013d36:	f010 f871 	bl	8023e1c <memcpy>
fptr = (float*)&buffer0[55136];//gradients
 8013d3a:	4b04      	ldr	r3, [pc, #16]	@ (8013d4c <invoke+0x1784>)
 8013d3c:	601c      	str	r4, [r3, #0]
for(int i = 0; i < 384; i++) v13_conv_1_bias[i] -= (int32_t)(fptr[i] * blr * v13_conv_1_bias_QAS[i]);
 8013d3e:	2300      	movs	r3, #0
 8013d40:	e04b      	b.n	8013dda <invoke+0x1812>
 8013d42:	bf00      	nop
 8013d44:	20016e70 	.word	0x20016e70
 8013d48:	080286b0 	.word	0x080286b0
 8013d4c:	2000cca0 	.word	0x2000cca0
 8013d50:	20001208 	.word	0x20001208
 8013d54:	39d1b717 	.word	0x39d1b717
 8013d58:	2003a750 	.word	0x2003a750
 8013d5c:	20001b0c 	.word	0x20001b0c
 8013d60:	7f7fffff 	.word	0x7f7fffff
 8013d64:	ff7fffff 	.word	0xff7fffff
 8013d68:	2000cc98 	.word	0x2000cc98
 8013d6c:	2000cc9c 	.word	0x2000cc9c
 8013d70:	3d3459c4 	.word	0x3d3459c4
 8013d74:	20015f70 	.word	0x20015f70
 8013d78:	2001beb0 	.word	0x2001beb0
 8013d7c:	3d06687e 	.word	0x3d06687e
 8013d80:	080558e4 	.word	0x080558e4
 8013d84:	08028fb0 	.word	0x08028fb0
 8013d88:	20001b10 	.word	0x20001b10
 8013d8c:	20001c94 	.word	0x20001c94
 8013d90:	0805ea64 	.word	0x0805ea64
 8013d94:	20015eb0 	.word	0x20015eb0
 8013d98:	08029130 	.word	0x08029130
 8013d9c:	4a9b      	ldr	r2, [pc, #620]	@ (801400c <invoke+0x1a44>)
 8013d9e:	6810      	ldr	r0, [r2, #0]
 8013da0:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 8013da4:	499a      	ldr	r1, [pc, #616]	@ (8014010 <invoke+0x1a48>)
 8013da6:	6809      	ldr	r1, [r1, #0]
 8013da8:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8013dac:	edd1 7a00 	vldr	s15, [r1]
 8013db0:	ed9f 7a98 	vldr	s14, [pc, #608]	@ 8014014 <invoke+0x1a4c>
 8013db4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013db8:	f243 5148 	movw	r1, #13640	@ 0x3548
 8013dbc:	4469      	add	r1, sp
 8013dbe:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8013dc2:	ed91 7a00 	vldr	s14, [r1]
 8013dc6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013dca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013dce:	ee17 1a90 	vmov	r1, s15
 8013dd2:	1a52      	subs	r2, r2, r1
 8013dd4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 8013dd8:	3301      	adds	r3, #1
 8013dda:	f5b3 7fc0 	cmp.w	r3, #384	@ 0x180
 8013dde:	dbdd      	blt.n	8013d9c <invoke+0x17d4>
/* layer 99:TRANSPOSE_CONV_2D */
transpose_depthwise_conv_fp_kernel5_stride1_inpad2_outpad0_IOHW_int8weight((float*)&buffer0[30560],4,4,384,v13_conv_1_weight,NULL,(float*)&buffer0[30560],4,4,384,-FLT_MAX,FLT_MAX,(float*)sbuf,1,0);
 8013de0:	4c8d      	ldr	r4, [pc, #564]	@ (8014018 <invoke+0x1a50>)
 8013de2:	2500      	movs	r5, #0
 8013de4:	9508      	str	r5, [sp, #32]
 8013de6:	2301      	movs	r3, #1
 8013de8:	9307      	str	r3, [sp, #28]
 8013dea:	4b8c      	ldr	r3, [pc, #560]	@ (801401c <invoke+0x1a54>)
 8013dec:	9306      	str	r3, [sp, #24]
 8013dee:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8013df2:	9305      	str	r3, [sp, #20]
 8013df4:	2104      	movs	r1, #4
 8013df6:	9104      	str	r1, [sp, #16]
 8013df8:	9103      	str	r1, [sp, #12]
 8013dfa:	9402      	str	r4, [sp, #8]
 8013dfc:	9501      	str	r5, [sp, #4]
 8013dfe:	4a88      	ldr	r2, [pc, #544]	@ (8014020 <invoke+0x1a58>)
 8013e00:	6812      	ldr	r2, [r2, #0]
 8013e02:	9200      	str	r2, [sp, #0]
 8013e04:	eddf 0a87 	vldr	s1, [pc, #540]	@ 8014024 <invoke+0x1a5c>
 8013e08:	ed9f 0a87 	vldr	s0, [pc, #540]	@ 8014028 <invoke+0x1a60>
 8013e0c:	460a      	mov	r2, r1
 8013e0e:	4620      	mov	r0, r4
 8013e10:	f009 f9c0 	bl	801d194 <transpose_depthwise_conv_fp_kernel5_stride1_inpad2_outpad0_IOHW_int8weight>
/* layer 100:WHERE */
where_zeros_inplace_bit((bool*)&buffer0[29024],6144,(float*)&buffer0[30560]);
 8013e14:	4622      	mov	r2, r4
 8013e16:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8013e1a:	f5a4 60c0 	sub.w	r0, r4, #1536	@ 0x600
 8013e1e:	f00a fae5 	bl	801e3ec <where_zeros_inplace_bit>
/* layer 101:MUL */
fptr = &buffer0[30560];
 8013e22:	4b7b      	ldr	r3, [pc, #492]	@ (8014010 <invoke+0x1a48>)
 8013e24:	601c      	str	r4, [r3, #0]
fptr2 = scales36;
 8013e26:	4b81      	ldr	r3, [pc, #516]	@ (801402c <invoke+0x1a64>)
 8013e28:	4a81      	ldr	r2, [pc, #516]	@ (8014030 <invoke+0x1a68>)
 8013e2a:	601a      	str	r2, [r3, #0]
for(int hw = 0; hw < 16; hw++){
 8013e2c:	e014      	b.n	8013e58 <invoke+0x1890>
for(int i = 0; i < 384; i++){float f = *fptr; *fptr++ = fptr2[i] * f;};
 8013e2e:	4c78      	ldr	r4, [pc, #480]	@ (8014010 <invoke+0x1a48>)
 8013e30:	6820      	ldr	r0, [r4, #0]
 8013e32:	4602      	mov	r2, r0
 8013e34:	ecb2 7a01 	vldmia	r2!, {s14}
 8013e38:	497c      	ldr	r1, [pc, #496]	@ (801402c <invoke+0x1a64>)
 8013e3a:	6809      	ldr	r1, [r1, #0]
 8013e3c:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8013e40:	edd1 7a00 	vldr	s15, [r1]
 8013e44:	6022      	str	r2, [r4, #0]
 8013e46:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013e4a:	edc0 7a00 	vstr	s15, [r0]
 8013e4e:	3301      	adds	r3, #1
 8013e50:	f5b3 7fc0 	cmp.w	r3, #384	@ 0x180
 8013e54:	dbeb      	blt.n	8013e2e <invoke+0x1866>
for(int hw = 0; hw < 16; hw++){
 8013e56:	3501      	adds	r5, #1
 8013e58:	2d0f      	cmp	r5, #15
 8013e5a:	dc01      	bgt.n	8013e60 <invoke+0x1898>
for(int i = 0; i < 384; i++){float f = *fptr; *fptr++ = fptr2[i] * f;};
 8013e5c:	2300      	movs	r3, #0
 8013e5e:	e7f7      	b.n	8013e50 <invoke+0x1888>
}
/* layer 102:SUM */
sum_4D_exclude((float*)&buffer0[30560],1,4,4,384,3,(float*)&buffer0[29024]);
 8013e60:	486d      	ldr	r0, [pc, #436]	@ (8014018 <invoke+0x1a50>)
 8013e62:	f5a0 64c0 	sub.w	r4, r0, #1536	@ 0x600
 8013e66:	9402      	str	r4, [sp, #8]
 8013e68:	2303      	movs	r3, #3
 8013e6a:	9301      	str	r3, [sp, #4]
 8013e6c:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8013e70:	9300      	str	r3, [sp, #0]
 8013e72:	2304      	movs	r3, #4
 8013e74:	461a      	mov	r2, r3
 8013e76:	2101      	movs	r1, #1
 8013e78:	f008 faf0 	bl	801c45c <sum_4D_exclude>
/* layer 103:BIAS_UPDATE */
const float v13_conv_0_bias_QAS[384] = {6218774000.0,3655683800.0,4025783800.0,2553552400.0,1573439900.0,1095861600.0,3012372200.0,2777113900.0,761768300.0,3771176700.0,3574636000.0,8691896000.0,3036402200.0,1724976000.0,685664600.0,1073968500.0,1804135600.0,2191398100.0,1821529300.0,5283446300.0,4263397000.0,2276812500.0,6.4540545e+19,4234068000.0,1748282000.0,964335940.0,3552744400.0,1359091600.0,4323833000.0,1872564000.0,1488891500.0,3862231600.0,6268766000.0,2438708500.0,1655078900.0,3378801000.0,2838569500.0,1017552450.0,5908493300.0,3654168800.0,3148908300.0,1547238800.0,988844350.0,3815565800.0,2178253600.0,1079768700.0,3168508000.0,2190347500.0,684622340.0,1716071400.0,1310837100.0,2729751300.0,4372761000.0,1094751500.0,1885218600.0,3021010000.0,1250654800.0,763530430.0,4148253000.0,3617149700.0,1183229600.0,2562792200.0,2781286700.0,2710524700.0,1975316900.0,1297935000.0,2870464300.0,2654215000.0,3112936000.0,6.4540545e+19,1756145000.0,2001426200.0,3125140500.0,3793797600.0,1727468800.0,3925337600.0,5689981400.0,6.4540545e+19,3438579200.0,582194600.0,3111272200.0,2231951400.0,3126232600.0,1222943000.0,4747296300.0,1998135600.0,2614590700.0,2600152000.0,1791896400.0,2153195500.0,3365325300.0,5975375000.0,4788534000.0,2194499600.0,5548968000.0,3320401200.0,1427101700.0,3381228000.0,3586954200.0,1195268600.0,3247417900.0,6.4540545e+19,2153742300.0,2611620600.0,4444410000.0,4090424300.0,1524046100.0,1042931100.0,4638144000.0,4641611000.0,3583312000.0,3960049200.0,4833686500.0,3446786800.0,1081646600.0,782966340.0,1756297600.0,1948061700.0,2643361800.0,1301894500.0,1428760300.0,4288829000.0,3919010600.0,2344144600.0,919689100.0,2324802300.0,1238316800.0,1418477200.0,2283643000.0,4231538200.0,2522716700.0,5533971500.0,2962834400.0,2876232000.0,6.4540545e+19,1863885200.0,1620246300.0,5678483000.0,2110078500.0,2458661400.0,1882340200.0,786495040.0,1169366700.0,2111179400.0,3585948700.0,3423332900.0,7283285000.0,4650178600.0,2218300700.0,3173031400.0,3549933600.0,1720029400.0,5499190000.0,1270336600.0,2229560600.0,4930055000.0,2109084400.0,3369081900.0,1452618900.0,3383978000.0,2294657500.0,3072205000.0,3735657700.0,902825660.0,3094816000.0,2909646000.0,2488696600.0,1998046600.0,2408844800.0,1841184300.0,3220803300.0,6.4540545e+19,4333779500.0,3132397300.0,1364643000.0,3476246300.0,2576431400.0,3625121000.0,2080053600.0,2014506500.0,2807186200.0,2050715900.0,4277033000.0,2017156100.0,1668210300.0,1533583600.0,4565575700.0,4990597600.0,1677164400.0,2696547600.0,2567651300.0,3378558200.0,1497617200.0,2948733000.0,2861216300.0,2033264500.0,5331606500.0,3027645000.0,1566484200.0,1331578200.0,1479618600.0,904620900.0,3018522600.0,4916824000.0,1746880600.0,1856318700.0,7332025000.0,2200847400.0,3405922000.0,1213794300.0,4213964300.0,4341902300.0,1245220000.0,4376626000.0,7956229000.0,2030982000.0,2440010800.0,4072967700.0,2198071000.0,2278283800.0,1924683900.0,2201240600.0,4866540000.0,1399736400.0,2595831000.0,2117742700.0,4469250600.0,2274346800.0,1353044900.0,3117955600.0,1992863700.0,1313300400.0,2969270000.0,2770915000.0,1065277400.0,873739900.0,3889906700.0,2895561700.0,2608214000.0,2339272700.0,1831300500.0,2168545500.0,2939032000.0,3494531800.0,1346712800.0,2055590400.0,1048361800.0,3326954500.0,2906894300.0,4390433000.0,5230125600.0,2800091400.0,2892284200.0,6.4540545e+19,2299110700.0,4648113700.0,1018604900.0,365536000.0,2133898000.0,2222018600.0,2936011800.0,4279367200.0,2876851500.0,2206437600.0,2805782500.0,3802612200.0,1691852200.0,3116817200.0,2988988200.0,3470097200.0,678116200.0,1985151500.0,2660800300.0,3027061000.0,5284247600.0,1779763100.0,2385741800.0,4025605400.0,1749066900.0,2965630500.0,1691411200.0,2734037000.0,5797724700.0,3967366400.0,2732758500.0,2383597800.0,1421569800.0,4434281000.0,3909362400.0,3465807000.0,1789423400.0,5695254000.0,6.4540545e+19,1925940600.0,1215265800.0,2184526300.0,3532325400.0,2546660900.0,1066540160.0,2692514600.0,1810779600.0,1661833600.0,1745124500.0,1957702700.0,3146242300.0,2661046500.0,2856432000.0,3023174700.0,3567440400.0,2730573800.0,5689904000.0,1918862300.0,2269911800.0,1785945700.0,2749466000.0,4697850000.0,1645029100.0,2927824600.0,5085659600.0,3561831700.0,5456234500.0,6.4540545e+19,3296790300.0,4769472500.0,1904915600.0,1177256300.0,1573386200.0,1282618500.0,6.4540545e+19,2721441000.0,1333981600.0,3156787000.0,1516863100.0,2939711500.0,1823237400.0,3306214000.0,2206616000.0,2554347800.0,6.4540545e+19,3702762500.0,1360204700.0,2267084000.0,2767849700.0,4147105500.0,3619621000.0,1738791600.0,5862744000.0,2841494800.0,1243502200.0,6.4540545e+19,2759690500.0,1891875300.0,4226381800.0,2920187400.0,1999094800.0,1496611800.0,3497114000.0,2092673000.0,1781992400.0,977630700.0,1443327400.0,757286850.0,1227997800.0,1888430200.0,3479004400.0,3747829800.0,4297170400.0,4356546000.0,4411444000.0,6.4540545e+19,2125595800.0,2704379600.0,1672170900.0,3533985000.0,2002610700.0,2331888600.0,3538415000.0,1111041500.0,2146001900.0,2001717800.0,2241361400.0,1805678500.0,6.4540545e+19,4455689700.0,};
 8013e7c:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8013e80:	496c      	ldr	r1, [pc, #432]	@ (8014034 <invoke+0x1a6c>)
 8013e82:	f642 7048 	movw	r0, #12104	@ 0x2f48
 8013e86:	4468      	add	r0, sp
 8013e88:	f00f ffc8 	bl	8023e1c <memcpy>
fptr = (float*)&buffer0[29024];//gradients
 8013e8c:	4b60      	ldr	r3, [pc, #384]	@ (8014010 <invoke+0x1a48>)
 8013e8e:	601c      	str	r4, [r3, #0]
for(int i = 0; i < 384; i++) v13_conv_0_bias[i] -= (int32_t)(fptr[i] * blr * v13_conv_0_bias_QAS[i]);
 8013e90:	2300      	movs	r3, #0
 8013e92:	e01e      	b.n	8013ed2 <invoke+0x190a>
 8013e94:	4a68      	ldr	r2, [pc, #416]	@ (8014038 <invoke+0x1a70>)
 8013e96:	6810      	ldr	r0, [r2, #0]
 8013e98:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 8013e9c:	495c      	ldr	r1, [pc, #368]	@ (8014010 <invoke+0x1a48>)
 8013e9e:	6809      	ldr	r1, [r1, #0]
 8013ea0:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8013ea4:	edd1 7a00 	vldr	s15, [r1]
 8013ea8:	ed9f 7a5a 	vldr	s14, [pc, #360]	@ 8014014 <invoke+0x1a4c>
 8013eac:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013eb0:	f642 7148 	movw	r1, #12104	@ 0x2f48
 8013eb4:	4469      	add	r1, sp
 8013eb6:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8013eba:	ed91 7a00 	vldr	s14, [r1]
 8013ebe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013ec2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013ec6:	ee17 1a90 	vmov	r1, s15
 8013eca:	1a52      	subs	r2, r2, r1
 8013ecc:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 8013ed0:	3301      	adds	r3, #1
 8013ed2:	f5b3 7fc0 	cmp.w	r3, #384	@ 0x180
 8013ed6:	dbdd      	blt.n	8013e94 <invoke+0x18cc>
/* layer 104:TRANSPOSE_CONV_2D */
pointwise_conv_fp_4row4col_IOHW_int8weight((float*)&buffer0[30560],4,4,384,(q7_t*)v13_conv_0_weight,NULL,(float*)&buffer0[55136],4,4,96,-FLT_MAX,FLT_MAX,(float*)sbuf, 1);
 8013ed8:	4d4f      	ldr	r5, [pc, #316]	@ (8014018 <invoke+0x1a50>)
 8013eda:	2301      	movs	r3, #1
 8013edc:	9307      	str	r3, [sp, #28]
 8013ede:	4b4f      	ldr	r3, [pc, #316]	@ (801401c <invoke+0x1a54>)
 8013ee0:	9306      	str	r3, [sp, #24]
 8013ee2:	2360      	movs	r3, #96	@ 0x60
 8013ee4:	9305      	str	r3, [sp, #20]
 8013ee6:	2104      	movs	r1, #4
 8013ee8:	9104      	str	r1, [sp, #16]
 8013eea:	9103      	str	r1, [sp, #12]
 8013eec:	f505 46c0 	add.w	r6, r5, #24576	@ 0x6000
 8013ef0:	9602      	str	r6, [sp, #8]
 8013ef2:	2400      	movs	r4, #0
 8013ef4:	9401      	str	r4, [sp, #4]
 8013ef6:	4b51      	ldr	r3, [pc, #324]	@ (801403c <invoke+0x1a74>)
 8013ef8:	681b      	ldr	r3, [r3, #0]
 8013efa:	9300      	str	r3, [sp, #0]
 8013efc:	eddf 0a49 	vldr	s1, [pc, #292]	@ 8014024 <invoke+0x1a5c>
 8013f00:	ed9f 0a49 	vldr	s0, [pc, #292]	@ 8014028 <invoke+0x1a60>
 8013f04:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8013f08:	460a      	mov	r2, r1
 8013f0a:	4628      	mov	r0, r5
 8013f0c:	f006 fb0e 	bl	801a52c <pointwise_conv_fp_4row4col_IOHW_int8weight>
/* layer 105:WHERE */
where_zeros_inplace_bit((bool*)&buffer0[27488],1536,(float*)&buffer0[55136]);
 8013f10:	f5a5 6540 	sub.w	r5, r5, #3072	@ 0xc00
 8013f14:	4632      	mov	r2, r6
 8013f16:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8013f1a:	4628      	mov	r0, r5
 8013f1c:	f00a fa66 	bl	801e3ec <where_zeros_inplace_bit>
/* layer 106:DIV */
fptr3 = (float*)&buffer0[27488]; fptr2 = (float*)&buffer0[55136];
 8013f20:	4b47      	ldr	r3, [pc, #284]	@ (8014040 <invoke+0x1a78>)
 8013f22:	601d      	str	r5, [r3, #0]
 8013f24:	4b41      	ldr	r3, [pc, #260]	@ (801402c <invoke+0x1a64>)
 8013f26:	601e      	str	r6, [r3, #0]
for(int i = 0; i < 1536; i++) *fptr3++ = *fptr2++ / 0.03161676228046417;
 8013f28:	4623      	mov	r3, r4
 8013f2a:	e010      	b.n	8013f4e <invoke+0x1986>
 8013f2c:	493f      	ldr	r1, [pc, #252]	@ (801402c <invoke+0x1a64>)
 8013f2e:	680a      	ldr	r2, [r1, #0]
 8013f30:	1d10      	adds	r0, r2, #4
 8013f32:	6008      	str	r0, [r1, #0]
 8013f34:	edd2 6a00 	vldr	s13, [r2]
 8013f38:	4941      	ldr	r1, [pc, #260]	@ (8014040 <invoke+0x1a78>)
 8013f3a:	680a      	ldr	r2, [r1, #0]
 8013f3c:	1d10      	adds	r0, r2, #4
 8013f3e:	6008      	str	r0, [r1, #0]
 8013f40:	ed9f 7a40 	vldr	s14, [pc, #256]	@ 8014044 <invoke+0x1a7c>
 8013f44:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8013f48:	edc2 7a00 	vstr	s15, [r2]
 8013f4c:	3301      	adds	r3, #1
 8013f4e:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8013f52:	dbeb      	blt.n	8013f2c <invoke+0x1964>
/* layer 107:MUL */
fptr = (float*)&buffer0[27488];fptr3 = (float*)&buffer0[51872];for(int i = 0; i < 1536; i++) fptr3[i] = 0.02220197580754757 * fptr[i];
 8013f54:	4b2e      	ldr	r3, [pc, #184]	@ (8014010 <invoke+0x1a48>)
 8013f56:	4a3c      	ldr	r2, [pc, #240]	@ (8014048 <invoke+0x1a80>)
 8013f58:	601a      	str	r2, [r3, #0]
 8013f5a:	4b39      	ldr	r3, [pc, #228]	@ (8014040 <invoke+0x1a78>)
 8013f5c:	4a3b      	ldr	r2, [pc, #236]	@ (801404c <invoke+0x1a84>)
 8013f5e:	601a      	str	r2, [r3, #0]
 8013f60:	2300      	movs	r3, #0
 8013f62:	e010      	b.n	8013f86 <invoke+0x19be>
 8013f64:	4a2a      	ldr	r2, [pc, #168]	@ (8014010 <invoke+0x1a48>)
 8013f66:	6812      	ldr	r2, [r2, #0]
 8013f68:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8013f6c:	edd2 7a00 	vldr	s15, [r2]
 8013f70:	4a33      	ldr	r2, [pc, #204]	@ (8014040 <invoke+0x1a78>)
 8013f72:	6812      	ldr	r2, [r2, #0]
 8013f74:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8013f78:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 8014050 <invoke+0x1a88>
 8013f7c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013f80:	edc2 7a00 	vstr	s15, [r2]
 8013f84:	3301      	adds	r3, #1
 8013f86:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8013f8a:	dbeb      	blt.n	8013f64 <invoke+0x199c>
/* layer 108:WHERE */
where_zeros_inplace_bit((bool*)&buffer0[27296],1536,(float*)&buffer0[51872]);
 8013f8c:	4c2f      	ldr	r4, [pc, #188]	@ (801404c <invoke+0x1a84>)
 8013f8e:	4622      	mov	r2, r4
 8013f90:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8013f94:	f5a4 40c0 	sub.w	r0, r4, #24576	@ 0x6000
 8013f98:	f00a fa28 	bl	801e3ec <where_zeros_inplace_bit>
/* layer 109:MUL */
fptr = &buffer0[51872];
 8013f9c:	4b1c      	ldr	r3, [pc, #112]	@ (8014010 <invoke+0x1a48>)
 8013f9e:	601c      	str	r4, [r3, #0]
fptr2 = scales35;
 8013fa0:	4b22      	ldr	r3, [pc, #136]	@ (801402c <invoke+0x1a64>)
 8013fa2:	4a2c      	ldr	r2, [pc, #176]	@ (8014054 <invoke+0x1a8c>)
 8013fa4:	601a      	str	r2, [r3, #0]
for(int hw = 0; hw < 16; hw++){
 8013fa6:	2500      	movs	r5, #0
 8013fa8:	e013      	b.n	8013fd2 <invoke+0x1a0a>
for(int i = 0; i < 96; i++){float f = *fptr; *fptr++ = fptr2[i] * f;};
 8013faa:	4c19      	ldr	r4, [pc, #100]	@ (8014010 <invoke+0x1a48>)
 8013fac:	6820      	ldr	r0, [r4, #0]
 8013fae:	4602      	mov	r2, r0
 8013fb0:	ecb2 7a01 	vldmia	r2!, {s14}
 8013fb4:	491d      	ldr	r1, [pc, #116]	@ (801402c <invoke+0x1a64>)
 8013fb6:	6809      	ldr	r1, [r1, #0]
 8013fb8:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8013fbc:	edd1 7a00 	vldr	s15, [r1]
 8013fc0:	6022      	str	r2, [r4, #0]
 8013fc2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013fc6:	edc0 7a00 	vstr	s15, [r0]
 8013fca:	3301      	adds	r3, #1
 8013fcc:	2b5f      	cmp	r3, #95	@ 0x5f
 8013fce:	ddec      	ble.n	8013faa <invoke+0x19e2>
for(int hw = 0; hw < 16; hw++){
 8013fd0:	3501      	adds	r5, #1
 8013fd2:	2d0f      	cmp	r5, #15
 8013fd4:	dc01      	bgt.n	8013fda <invoke+0x1a12>
for(int i = 0; i < 96; i++){float f = *fptr; *fptr++ = fptr2[i] * f;};
 8013fd6:	2300      	movs	r3, #0
 8013fd8:	e7f8      	b.n	8013fcc <invoke+0x1a04>
}
/* layer 110:SUM */
sum_4D_exclude((float*)&buffer0[51872],1,4,4,96,3,(float*)&buffer0[27296]);
 8013fda:	481c      	ldr	r0, [pc, #112]	@ (801404c <invoke+0x1a84>)
 8013fdc:	f5a0 44c0 	sub.w	r4, r0, #24576	@ 0x6000
 8013fe0:	9402      	str	r4, [sp, #8]
 8013fe2:	2303      	movs	r3, #3
 8013fe4:	9301      	str	r3, [sp, #4]
 8013fe6:	2360      	movs	r3, #96	@ 0x60
 8013fe8:	9300      	str	r3, [sp, #0]
 8013fea:	2304      	movs	r3, #4
 8013fec:	461a      	mov	r2, r3
 8013fee:	2101      	movs	r1, #1
 8013ff0:	f008 fa34 	bl	801c45c <sum_4D_exclude>
/* layer 111:BIAS_UPDATE */
const float v12_conv_2_bias_QAS[96] = {795028030.0,423624300.0,479252960.0,478791100.0,896438900.0,361995970.0,1020356860.0,1440235000.0,1393280600.0,817915500.0,616777300.0,766457150.0,783091840.0,417292930.0,1323931900.0,384448220.0,275395330.0,517444160.0,423124500.0,507065340.0,1057349570.0,965357950.0,635712300.0,764407550.0,1123631200.0,503342620.0,420479680.0,474280900.0,438251900.0,968981500.0,438337150.0,538776500.0,588037440.0,1068639300.0,973549950.0,811783400.0,405616100.0,806178050.0,646484030.0,784293600.0,376276260.0,320535780.0,589879740.0,215542480.0,759753540.0,513519420.0,618079040.0,1282527200.0,615622900.0,196468270.0,260889140.0,542197440.0,720725000.0,638961800.0,471709540.0,1136323800.0,549965400.0,615306050.0,804758800.0,376068600.0,373630050.0,573741250.0,642607740.0,200830430.0,396703740.0,796792300.0,836330430.0,361802240.0,517987840.0,593386050.0,648856100.0,370742660.0,753040500.0,188531440.0,384764380.0,716875900.0,773829950.0,576809150.0,1390649200.0,725712700.0,805873000.0,169132160.0,462125800.0,390630270.0,485278620.0,386392300.0,309343230.0,438246530.0,698687100.0,1022324160.0,591663040.0,708810800.0,436116100.0,496532480.0,786962940.0,755363200.0,};
 8013ff4:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8013ff8:	4917      	ldr	r1, [pc, #92]	@ (8014058 <invoke+0x1a90>)
 8013ffa:	f642 50c8 	movw	r0, #11720	@ 0x2dc8
 8013ffe:	4468      	add	r0, sp
 8014000:	f00f ff0c 	bl	8023e1c <memcpy>
fptr = (float*)&buffer0[27296];//gradients
 8014004:	4b02      	ldr	r3, [pc, #8]	@ (8014010 <invoke+0x1a48>)
 8014006:	601c      	str	r4, [r3, #0]
for(int i = 0; i < 96; i++) v12_conv_2_bias[i] -= (int32_t)(fptr[i] * blr * v12_conv_2_bias_QAS[i]);
 8014008:	2300      	movs	r3, #0
 801400a:	e046      	b.n	801409a <invoke+0x1ad2>
 801400c:	20001c98 	.word	0x20001c98
 8014010:	2000cca0 	.word	0x2000cca0
 8014014:	39d1b717 	.word	0x39d1b717
 8014018:	20015eb0 	.word	0x20015eb0
 801401c:	2003a750 	.word	0x2003a750
 8014020:	2000289c 	.word	0x2000289c
 8014024:	7f7fffff 	.word	0x7f7fffff
 8014028:	ff7fffff 	.word	0xff7fffff
 801402c:	2000cc9c 	.word	0x2000cc9c
 8014030:	08063b64 	.word	0x08063b64
 8014034:	08029730 	.word	0x08029730
 8014038:	200028a0 	.word	0x200028a0
 801403c:	20002ea4 	.word	0x20002ea4
 8014040:	2000cc98 	.word	0x2000cc98
 8014044:	3d018094 	.word	0x3d018094
 8014048:	200152b0 	.word	0x200152b0
 801404c:	2001b1f0 	.word	0x2001b1f0
 8014050:	3cb5e0eb 	.word	0x3cb5e0eb
 8014054:	0806d164 	.word	0x0806d164
 8014058:	08029d30 	.word	0x08029d30
 801405c:	4ab9      	ldr	r2, [pc, #740]	@ (8014344 <invoke+0x1d7c>)
 801405e:	6810      	ldr	r0, [r2, #0]
 8014060:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 8014064:	49b8      	ldr	r1, [pc, #736]	@ (8014348 <invoke+0x1d80>)
 8014066:	6809      	ldr	r1, [r1, #0]
 8014068:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 801406c:	edd1 7a00 	vldr	s15, [r1]
 8014070:	ed9f 7ab6 	vldr	s14, [pc, #728]	@ 801434c <invoke+0x1d84>
 8014074:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014078:	f642 51c8 	movw	r1, #11720	@ 0x2dc8
 801407c:	4469      	add	r1, sp
 801407e:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8014082:	ed91 7a00 	vldr	s14, [r1]
 8014086:	ee67 7a87 	vmul.f32	s15, s15, s14
 801408a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801408e:	ee17 1a90 	vmov	r1, s15
 8014092:	1a52      	subs	r2, r2, r1
 8014094:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 8014098:	3301      	adds	r3, #1
 801409a:	2b5f      	cmp	r3, #95	@ 0x5f
 801409c:	ddde      	ble.n	801405c <invoke+0x1a94>
/* layer 112:TRANSPOSE_CONV_2D */
pointwise_conv_fp_4row4col_IOHW_int8weight((float*)&buffer0[51872],4,4,96,(q7_t*)v12_conv_2_weight,NULL,(float*)&buffer0[27296],4,4,384,-FLT_MAX,FLT_MAX,(float*)sbuf, 1);
 801409e:	4eac      	ldr	r6, [pc, #688]	@ (8014350 <invoke+0x1d88>)
 80140a0:	2301      	movs	r3, #1
 80140a2:	9307      	str	r3, [sp, #28]
 80140a4:	4bab      	ldr	r3, [pc, #684]	@ (8014354 <invoke+0x1d8c>)
 80140a6:	9306      	str	r3, [sp, #24]
 80140a8:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80140ac:	9305      	str	r3, [sp, #20]
 80140ae:	2104      	movs	r1, #4
 80140b0:	9104      	str	r1, [sp, #16]
 80140b2:	9103      	str	r1, [sp, #12]
 80140b4:	f5a6 44c0 	sub.w	r4, r6, #24576	@ 0x6000
 80140b8:	9402      	str	r4, [sp, #8]
 80140ba:	2500      	movs	r5, #0
 80140bc:	9501      	str	r5, [sp, #4]
 80140be:	4ba6      	ldr	r3, [pc, #664]	@ (8014358 <invoke+0x1d90>)
 80140c0:	681b      	ldr	r3, [r3, #0]
 80140c2:	9300      	str	r3, [sp, #0]
 80140c4:	eddf 0aa5 	vldr	s1, [pc, #660]	@ 801435c <invoke+0x1d94>
 80140c8:	ed9f 0aa5 	vldr	s0, [pc, #660]	@ 8014360 <invoke+0x1d98>
 80140cc:	2360      	movs	r3, #96	@ 0x60
 80140ce:	460a      	mov	r2, r1
 80140d0:	4630      	mov	r0, r6
 80140d2:	f006 fa2b 	bl	801a52c <pointwise_conv_fp_4row4col_IOHW_int8weight>
/* layer 113:WHERE */
where_zeros_inplace_bit((bool*)&buffer0[26528],6144,(float*)&buffer0[27296]);
 80140d6:	4622      	mov	r2, r4
 80140d8:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80140dc:	f5a6 40c6 	sub.w	r0, r6, #25344	@ 0x6300
 80140e0:	f00a f984 	bl	801e3ec <where_zeros_inplace_bit>
/* layer 114:MUL */
fptr = &buffer0[27296];
 80140e4:	4b98      	ldr	r3, [pc, #608]	@ (8014348 <invoke+0x1d80>)
 80140e6:	601c      	str	r4, [r3, #0]
fptr2 = scales34;
 80140e8:	4b9e      	ldr	r3, [pc, #632]	@ (8014364 <invoke+0x1d9c>)
 80140ea:	4a9f      	ldr	r2, [pc, #636]	@ (8014368 <invoke+0x1da0>)
 80140ec:	601a      	str	r2, [r3, #0]
for(int hw = 0; hw < 16; hw++){
 80140ee:	e014      	b.n	801411a <invoke+0x1b52>
for(int i = 0; i < 384; i++){float f = *fptr; *fptr++ = fptr2[i] * f;};
 80140f0:	4c95      	ldr	r4, [pc, #596]	@ (8014348 <invoke+0x1d80>)
 80140f2:	6820      	ldr	r0, [r4, #0]
 80140f4:	4602      	mov	r2, r0
 80140f6:	ecb2 7a01 	vldmia	r2!, {s14}
 80140fa:	499a      	ldr	r1, [pc, #616]	@ (8014364 <invoke+0x1d9c>)
 80140fc:	6809      	ldr	r1, [r1, #0]
 80140fe:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8014102:	edd1 7a00 	vldr	s15, [r1]
 8014106:	6022      	str	r2, [r4, #0]
 8014108:	ee67 7a87 	vmul.f32	s15, s15, s14
 801410c:	edc0 7a00 	vstr	s15, [r0]
 8014110:	3301      	adds	r3, #1
 8014112:	f5b3 7fc0 	cmp.w	r3, #384	@ 0x180
 8014116:	dbeb      	blt.n	80140f0 <invoke+0x1b28>
for(int hw = 0; hw < 16; hw++){
 8014118:	3501      	adds	r5, #1
 801411a:	2d0f      	cmp	r5, #15
 801411c:	dc01      	bgt.n	8014122 <invoke+0x1b5a>
for(int i = 0; i < 384; i++){float f = *fptr; *fptr++ = fptr2[i] * f;};
 801411e:	2300      	movs	r3, #0
 8014120:	e7f7      	b.n	8014112 <invoke+0x1b4a>
}
/* layer 115:SUM */
sum_4D_exclude((float*)&buffer0[27296],1,4,4,384,3,(float*)&buffer0[51872]);
 8014122:	4892      	ldr	r0, [pc, #584]	@ (801436c <invoke+0x1da4>)
 8014124:	f500 44c0 	add.w	r4, r0, #24576	@ 0x6000
 8014128:	9402      	str	r4, [sp, #8]
 801412a:	2303      	movs	r3, #3
 801412c:	9301      	str	r3, [sp, #4]
 801412e:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8014132:	9300      	str	r3, [sp, #0]
 8014134:	2304      	movs	r3, #4
 8014136:	461a      	mov	r2, r3
 8014138:	2101      	movs	r1, #1
 801413a:	f008 f98f 	bl	801c45c <sum_4D_exclude>
/* layer 116:BIAS_UPDATE */
const float v12_conv_1_bias_QAS[384] = {680649200.0,69443840.0,241322860.0,80489496.0,80691630.0,294001250.0,107731150.0,52987056.0,32530756.0,24586336.0,119902000.0,47630390.0,96925370.0,21572388.0,30960382.0,119762040.0,28125472.0,69059064.0,1105776800.0,47085650.0,54227330.0,23889654.0,72401620.0,3.4511303e+16,113776120.0,45162532.0,9.708138e+20,124803704.0,17816108.0,144262860.0,331772300.0,135888900.0,164727540.0,194066880.0,154027940.0,55157268.0,27045502.0,97904820.0,54438700.0,303278660.0,12362003.0,1042228350.0,643438140.0,60179332.0,39908252.0,163291120.0,517501730.0,170270290.0,227213740.0,1370298000.0,115288136.0,280747400.0,175949800.0,33373296.0,48514708.0,41199920.0,78254720.0,9.708138e+20,453542900.0,88115530.0,146622220.0,10955774.0,1672740900.0,63418460.0,25068528.0,49819490.0,37846076.0,39181356.0,73032000.0,92893120.0,6528928.0,100887620.0,121488056.0,831450940.0,141784590.0,188391170.0,72439230.0,88022510.0,90558090.0,191907090.0,380063940.0,36673228.0,281133220.0,193172080.0,37085428.0,274824320.0,14769999.0,176138460.0,95463016.0,19472444.0,328781570.0,38959136.0,47053252.0,156587490.0,29402610.0,115884376.0,35218770.0,61586468.0,634546600.0,60442856.0,236849220.0,27113518.0,18367392.0,73647870.0,22987670.0,113493060.0,200594910.0,307410620.0,72727040.0,56567316.0,37424616.0,921706750.0,153012300.0,121281090.0,24853752.0,61172724.0,49337680.0,182255100.0,24415668.0,65750696.0,55503460.0,37280652.0,1258082300.0,99035340.0,133413880.0,27096782.0,121029600.0,56115252.0,30667618.0,47280856.0,9.708138e+20,113290990.0,40715724.0,357438750.0,36486670.0,172003070.0,261998830.0,187449120.0,51582920.0,334937570.0,55945830.0,944658560.0,109379440.0,89333770.0,337961920.0,987207000.0,31556666.0,148114180.0,41062480.0,52236652.0,165748370.0,69615970.0,59515556.0,322113380.0,425687420.0,36736120.0,43174200.0,191407570.0,38773124.0,16738277.0,84924260.0,128233330.0,48222108.0,24441116.0,58718372.0,62130484.0,70179630.0,33736096.0,73848780.0,761925000.0,90858456.0,38253724.0,284263780.0,42319870.0,1084416100.0,122633180.0,18796978.0,20323764.0,9.708138e+20,73665690.0,282964500000000.0,3.4680817e+20,69947290.0,104142640.0,31024776.0,10167363.0,31862356.0,130711080.0,49809760.0,113956620.0,75655860.0,21221994.0,155463920.0,130742504.0,189932740.0,133679670.0,55810700.0,33437294.0,35320364.0,306550720.0,108544600.0,58353850.0,82360730.0,159779230.0,97278880.0,114619010.0,59246020.0,114979150.0,118233440.0,30607828.0,84174850.0,34790910.0,176133380.0,43541028.0,108081770.0,33076980.0,35958616.0,35044764.0,213399630.0,1208276500.0,111141230.0,39859172.0,28398308.0,37453444.0,517015170.0,104045630.0,90151120.0,132066330.0,53671510.0,40765060.0,128265220.0,79884990.0,21395194.0,56846548.0,55997920.0,154076080.0,35897896.0,85285580.0,37287464.0,44771570.0,65000536.0,30918738.0,114472584.0,22731470.0,131453960.0,53656350.0,493477120.0,366332160.0,46090508.0,249981000.0,56240092.0,61729080.0,819527600.0,48934690.0,22435840.0,17833398.0,63885404.0,33058492.0,28890800.0,59674296.0,58250664.0,79550050.0,83156504.0,27791218.0,183412690.0,78321480.0,74524310.0,451072580.0,31507766.0,253719600.0,47475730.0,344763170.0,602704600.0,58548130.0,38813570.0,64482676.0,34223570.0,729680500.0,129350660.0,81558320.0,151623630.0,85952140.0,569547400.0,126092220.0,186059230.0,40756330.0,222430380.0,250228900.0,87782350.0,62698530.0,94738280.0,35568124.0,123619200.0,951448700.0,53220690.0,43804164.0,116273704.0,20950906.0,90746190.0,106682990.0,212486860.0,297780580.0,84009810.0,20731540.0,1085934700.0,115616184.0,92536540.0,153480340.0,149813940.0,1357518700.0,53056396.0,13452287.0,152835580.0,45520680.0,7153737.0,189962270.0,13424615.0,46581788.0,60839012.0,60871780.0,82857896.0,122577400.0,202675490.0,74252344.0,302843100.0,82180260.0,67164050.0,144256700.0,203185580.0,104642210.0,31926436.0,338139200.0,158402830.0,132649490.0,36223340.0,22270606.0,169933820.0,81857280.0,73139064.0,259672930.0,9618092.0,68564080.0,45304148.0,48773236.0,21535702.0,45699004.0,27462012.0,111699080.0,1017591900.0,34205668.0,375507800.0,175735070.0,997363800.0,98687440.0,1299152500.0,135593380.0,27775246.0,142973920.0,74591260.0,226205870.0,387703500.0,555103500.0,80686216.0,71789656.0,31479418.0,38753948.0,28233520.0,59774836.0,38505580.0,111002824.0,103070200.0,26854110.0,56696096.0,27145416.0,68423980.0,18124092.0,97490360.0,122723660.0,153317310.0,229591440.0,117964910.0,115923020.0,860251650.0,26710836.0,};
 801413e:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8014142:	498b      	ldr	r1, [pc, #556]	@ (8014370 <invoke+0x1da8>)
 8014144:	f242 70c8 	movw	r0, #10184	@ 0x27c8
 8014148:	4468      	add	r0, sp
 801414a:	f00f fe67 	bl	8023e1c <memcpy>
fptr = (float*)&buffer0[51872];//gradients
 801414e:	4b7e      	ldr	r3, [pc, #504]	@ (8014348 <invoke+0x1d80>)
 8014150:	601c      	str	r4, [r3, #0]
for(int i = 0; i < 384; i++) v12_conv_1_bias[i] -= (int32_t)(fptr[i] * blr * v12_conv_1_bias_QAS[i]);
 8014152:	2300      	movs	r3, #0
 8014154:	e01e      	b.n	8014194 <invoke+0x1bcc>
 8014156:	4a87      	ldr	r2, [pc, #540]	@ (8014374 <invoke+0x1dac>)
 8014158:	6810      	ldr	r0, [r2, #0]
 801415a:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 801415e:	497a      	ldr	r1, [pc, #488]	@ (8014348 <invoke+0x1d80>)
 8014160:	6809      	ldr	r1, [r1, #0]
 8014162:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8014166:	edd1 7a00 	vldr	s15, [r1]
 801416a:	ed9f 7a78 	vldr	s14, [pc, #480]	@ 801434c <invoke+0x1d84>
 801416e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014172:	f242 71c8 	movw	r1, #10184	@ 0x27c8
 8014176:	4469      	add	r1, sp
 8014178:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 801417c:	ed91 7a00 	vldr	s14, [r1]
 8014180:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014184:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014188:	ee17 1a90 	vmov	r1, s15
 801418c:	1a52      	subs	r2, r2, r1
 801418e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 8014192:	3301      	adds	r3, #1
 8014194:	f5b3 7fc0 	cmp.w	r3, #384	@ 0x180
 8014198:	dbdd      	blt.n	8014156 <invoke+0x1b8e>
/* layer 117:TRANSPOSE_CONV_2D */
transpose_depthwise_conv_fp_kernel5_stride1_inpad2_outpad0_IOHW_int8weight((float*)&buffer0[27296],4,4,384,v12_conv_1_weight,NULL,(float*)&buffer0[27296],4,4,384,-FLT_MAX,FLT_MAX,(float*)sbuf,1,0);
 801419a:	4c74      	ldr	r4, [pc, #464]	@ (801436c <invoke+0x1da4>)
 801419c:	2500      	movs	r5, #0
 801419e:	9508      	str	r5, [sp, #32]
 80141a0:	2301      	movs	r3, #1
 80141a2:	9307      	str	r3, [sp, #28]
 80141a4:	4b6b      	ldr	r3, [pc, #428]	@ (8014354 <invoke+0x1d8c>)
 80141a6:	9306      	str	r3, [sp, #24]
 80141a8:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80141ac:	9305      	str	r3, [sp, #20]
 80141ae:	2104      	movs	r1, #4
 80141b0:	9104      	str	r1, [sp, #16]
 80141b2:	9103      	str	r1, [sp, #12]
 80141b4:	9402      	str	r4, [sp, #8]
 80141b6:	9501      	str	r5, [sp, #4]
 80141b8:	4a6f      	ldr	r2, [pc, #444]	@ (8014378 <invoke+0x1db0>)
 80141ba:	6812      	ldr	r2, [r2, #0]
 80141bc:	9200      	str	r2, [sp, #0]
 80141be:	eddf 0a67 	vldr	s1, [pc, #412]	@ 801435c <invoke+0x1d94>
 80141c2:	ed9f 0a67 	vldr	s0, [pc, #412]	@ 8014360 <invoke+0x1d98>
 80141c6:	460a      	mov	r2, r1
 80141c8:	4620      	mov	r0, r4
 80141ca:	f008 ffe3 	bl	801d194 <transpose_depthwise_conv_fp_kernel5_stride1_inpad2_outpad0_IOHW_int8weight>
/* layer 118:WHERE */
where_zeros_inplace_bit((bool*)&buffer0[25760],6144,(float*)&buffer0[27296]);
 80141ce:	4622      	mov	r2, r4
 80141d0:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80141d4:	f5a4 60c0 	sub.w	r0, r4, #1536	@ 0x600
 80141d8:	f00a f908 	bl	801e3ec <where_zeros_inplace_bit>
/* layer 119:MUL */
fptr = &buffer0[27296];
 80141dc:	4b5a      	ldr	r3, [pc, #360]	@ (8014348 <invoke+0x1d80>)
 80141de:	601c      	str	r4, [r3, #0]
fptr2 = scales33;
 80141e0:	4b60      	ldr	r3, [pc, #384]	@ (8014364 <invoke+0x1d9c>)
 80141e2:	4a66      	ldr	r2, [pc, #408]	@ (801437c <invoke+0x1db4>)
 80141e4:	601a      	str	r2, [r3, #0]
for(int hw = 0; hw < 16; hw++){
 80141e6:	e014      	b.n	8014212 <invoke+0x1c4a>
for(int i = 0; i < 384; i++){float f = *fptr; *fptr++ = fptr2[i] * f;};
 80141e8:	4c57      	ldr	r4, [pc, #348]	@ (8014348 <invoke+0x1d80>)
 80141ea:	6820      	ldr	r0, [r4, #0]
 80141ec:	4602      	mov	r2, r0
 80141ee:	ecb2 7a01 	vldmia	r2!, {s14}
 80141f2:	495c      	ldr	r1, [pc, #368]	@ (8014364 <invoke+0x1d9c>)
 80141f4:	6809      	ldr	r1, [r1, #0]
 80141f6:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 80141fa:	edd1 7a00 	vldr	s15, [r1]
 80141fe:	6022      	str	r2, [r4, #0]
 8014200:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014204:	edc0 7a00 	vstr	s15, [r0]
 8014208:	3301      	adds	r3, #1
 801420a:	f5b3 7fc0 	cmp.w	r3, #384	@ 0x180
 801420e:	dbeb      	blt.n	80141e8 <invoke+0x1c20>
for(int hw = 0; hw < 16; hw++){
 8014210:	3501      	adds	r5, #1
 8014212:	2d0f      	cmp	r5, #15
 8014214:	dc01      	bgt.n	801421a <invoke+0x1c52>
for(int i = 0; i < 384; i++){float f = *fptr; *fptr++ = fptr2[i] * f;};
 8014216:	2300      	movs	r3, #0
 8014218:	e7f7      	b.n	801420a <invoke+0x1c42>
}
/* layer 120:SUM */
sum_4D_exclude((float*)&buffer0[27296],1,4,4,384,3,(float*)&buffer0[25760]);
 801421a:	4854      	ldr	r0, [pc, #336]	@ (801436c <invoke+0x1da4>)
 801421c:	f5a0 64c0 	sub.w	r4, r0, #1536	@ 0x600
 8014220:	9402      	str	r4, [sp, #8]
 8014222:	2303      	movs	r3, #3
 8014224:	9301      	str	r3, [sp, #4]
 8014226:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 801422a:	9300      	str	r3, [sp, #0]
 801422c:	2304      	movs	r3, #4
 801422e:	461a      	mov	r2, r3
 8014230:	2101      	movs	r1, #1
 8014232:	f008 f913 	bl	801c45c <sum_4D_exclude>
/* layer 121:BIAS_UPDATE */
const float v12_conv_0_bias_QAS[384] = {1136575600.0,2040391300.0,2077056500.0,2034187500.0,1762718600.0,4030772000.0,1841896700.0,4868980000.0,1223189600.0,1855291100.0,1855523200.0,3676532500.0,1970145400.0,2469937000.0,2392775000.0,2519624000.0,2854075400.0,2423968300.0,760267900.0,5027346000.0,4503358500.0,1429835600.0,3663342300.0,1.414174e+19,3816206300.0,1325406200.0,8.8113815e+19,2976416300.0,1733192800.0,1434732300.0,782286460.0,2227346200.0,4872456000.0,3428042800.0,2447028200.0,1980633300.0,2227741000.0,3073567200.0,7238564000.0,4010009600.0,1443874400.0,410462080.0,1775979600.0,2390324000.0,580735600.0,544239170.0,2499269000.0,3330869500.0,2497517600.0,2299572000.0,2718046000.0,1005498300.0,2906264800.0,3471911700.0,4416064500.0,3095418600.0,3148722400.0,8.8113815e+19,3172754400.0,3532102400.0,2870269200.0,1747743600.0,2380882000.0,1762658200.0,3077239000.0,6241826000.0,2263849200.0,3058511400.0,6129932300.0,1897562600.0,8758495000.0,1303848400.0,2934238500.0,2373533000.0,4151177200.0,2698813700.0,3304121300.0,762728960.0,3338361600.0,1505353500.0,1392591500.0,1656505900.0,2924376000.0,4903783000.0,4029962200.0,1769380100.0,3164936700.0,2771395000.0,2660365800.0,2499306200.0,1624377100.0,4389154000.0,1937759700.0,2379855400.0,3833679000.0,1713832400.0,1485755300.0,2333414000.0,3169743000.0,2130247800.0,1956648400.0,2667801300.0,5128366600.0,3131886600.0,2291237000.0,4662625000.0,1979318900.0,1634104600.0,3756548900.0,3228822000.0,3146427600.0,3918374100.0,2717204000.0,2857095200.0,3966231300.0,2318577400.0,5743175700.0,3425646000.0,6293124600.0,2843192800.0,2063824100.0,2927118000.0,1884325900.0,1201014100.0,1751600000.0,4625455600.0,2307460400.0,1284116100.0,3823057200.0,7206434000.0,8.8113815e+19,4447265300.0,4632884700.0,3661992200.0,3819077600.0,2375221200.0,1862547200.0,1889320300.0,3660316700.0,2989126700.0,1493039000.0,1350058500.0,4466152400.0,2041081000.0,2735890000.0,3136133000.0,4380225500.0,2851763700.0,1898354300.0,1009307400.0,3465992700.0,2761323000.0,4866060000.0,1901852300.0,1173971500.0,2203420000.0,2309187000.0,3274329600.0,3855246000.0,1714944400.0,4915921400.0,6548325000.0,4011662800.0,1752499700.0,1874903300.0,3256849000.0,2060328600.0,2163943400.0,1094807300.0,581742200.0,3934632400.0,2134150000.0,1923486600.0,2534842000.0,3439737000.0,1238613200.0,2056313100.0,2582986000.0,8.8113815e+19,1863412100.0,528128540000000.0,8.8113815e+19,2872774700.0,8466160600.0,5928300500.0,2717336300.0,3401440300.0,3856140500.0,3914721800.0,2104371200.0,1990977300.0,3405599700.0,5130124000.0,2366169000.0,3541358800.0,2688096000.0,3265794800.0,1783130000.0,2650924300.0,1261207300.0,4682307600.0,3081187000.0,2707812900.0,2596061000.0,2295762400.0,2629182000.0,3681562400.0,2543694300.0,1627785000.0,2219639600.0,4145208600.0,4756674600.0,2342796000.0,1561126700.0,1436840000.0,2991830500.0,4516881400.0,2437973000.0,1290355200.0,3283809500.0,2447767300.0,2737169000.0,4966438000.0,2080336100.0,1527180200.0,2588113400.0,1862272100.0,3410946000.0,2668299000.0,2924319700.0,2127849600.0,1219165400.0,3750990000.0,3799396600.0,3683312600.0,2547699200.0,6100801500.0,3608704300.0,6309693400.0,1869943200.0,1850927900.0,2413370400.0,3068627000.0,681319400.0,2761030400.0,2762016300.0,2912139000.0,1644817500.0,3241364000.0,2965952500.0,1935296000.0,3653041400.0,2225739800.0,2837288700.0,3625133300.0,2091304400.0,2949881000.0,2271578000.0,3289326300.0,3900763400.0,2080940500.0,1170342400.0,1292553000.0,1089360100.0,1113356700.0,3509231400.0,4747642000.0,1259681200.0,1960991000.0,2714619000.0,3296077600.0,2383403000.0,2179476500.0,4312972000.0,3278589200.0,2652623400.0,2396380200.0,2584977000.0,5060705300.0,3805407700.0,1840800000.0,2255761400.0,763654000.0,3137983500.0,2626940000.0,1784982800.0,1252439800.0,2642950000.0,1560280800.0,3793649200.0,1352926700.0,1214307200.0,2483907600.0,1796537000.0,3180281600.0,2236206000.0,3039899600.0,2374835200.0,1302292200.0,675244740.0,2864737500.0,1171753700.0,1691885000.0,2689620200.0,1480941700.0,4048308200.0,4948261400.0,2745933800.0,3590229500.0,3132125200.0,3124607200.0,1831060900.0,1525987500.0,4083542500.0,4281650700.0,2174200800.0,1382750300.0,2559254800.0,4717650000.0,3676210400.0,2112444000.0,4803199500.0,2491967000.0,1378465300.0,1641825500.0,3807953200.0,3102254800.0,3595002600.0,2529469700.0,3847278800.0,1468933500.0,2812613400.0,1803215900.0,2365023200.0,4257348600.0,4070236000.0,1069724700.0,4381073400.0,4806052000.0,2516518400.0,6788170000.0,3516757500.0,4790797300.0,2993356500.0,2051949200.0,2777829600.0,4020414200.0,2064716800.0,673274200.0,2796632800.0,3958022000.0,1399611300.0,3323319800.0,2259803100.0,2583358700.0,2891336400.0,3667634700.0,1400531000.0,1970075400.0,2867299800.0,1892139800.0,2224057900.0,6168770600.0,2657283000.0,2892859000.0,2627104300.0,2858930700.0,7726923000.0,2281465600.0,1650249900.0,1063661500.0,1463866600.0,5651028500.0,3708549600.0,3168868400.0,812855700.0,1546151200.0,5128070700.0,1893806800.0,2192931800.0,3263515100.0,2940796000.0,1373262100.0,4371444700.0,};
 8014236:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 801423a:	4951      	ldr	r1, [pc, #324]	@ (8014380 <invoke+0x1db8>)
 801423c:	f242 10c8 	movw	r0, #8648	@ 0x21c8
 8014240:	4468      	add	r0, sp
 8014242:	f00f fdeb 	bl	8023e1c <memcpy>
fptr = (float*)&buffer0[25760];//gradients
 8014246:	4b40      	ldr	r3, [pc, #256]	@ (8014348 <invoke+0x1d80>)
 8014248:	601c      	str	r4, [r3, #0]
for(int i = 0; i < 384; i++) v12_conv_0_bias[i] -= (int32_t)(fptr[i] * blr * v12_conv_0_bias_QAS[i]);
 801424a:	2300      	movs	r3, #0
 801424c:	e01e      	b.n	801428c <invoke+0x1cc4>
 801424e:	4a4d      	ldr	r2, [pc, #308]	@ (8014384 <invoke+0x1dbc>)
 8014250:	6810      	ldr	r0, [r2, #0]
 8014252:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 8014256:	493c      	ldr	r1, [pc, #240]	@ (8014348 <invoke+0x1d80>)
 8014258:	6809      	ldr	r1, [r1, #0]
 801425a:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 801425e:	edd1 7a00 	vldr	s15, [r1]
 8014262:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 801434c <invoke+0x1d84>
 8014266:	ee67 7a87 	vmul.f32	s15, s15, s14
 801426a:	f242 11c8 	movw	r1, #8648	@ 0x21c8
 801426e:	4469      	add	r1, sp
 8014270:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8014274:	ed91 7a00 	vldr	s14, [r1]
 8014278:	ee67 7a87 	vmul.f32	s15, s15, s14
 801427c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014280:	ee17 1a90 	vmov	r1, s15
 8014284:	1a52      	subs	r2, r2, r1
 8014286:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 801428a:	3301      	adds	r3, #1
 801428c:	f5b3 7fc0 	cmp.w	r3, #384	@ 0x180
 8014290:	dbdd      	blt.n	801424e <invoke+0x1c86>
/* layer 122:TRANSPOSE_CONV_2D */
pointwise_conv_fp_4row4col_IOHW_int8weight((float*)&buffer0[27296],4,4,384,(q7_t*)v12_conv_0_weight,NULL,(float*)&buffer0[51872],4,4,96,-FLT_MAX,FLT_MAX,(float*)sbuf, 1);
 8014292:	4e36      	ldr	r6, [pc, #216]	@ (801436c <invoke+0x1da4>)
 8014294:	2301      	movs	r3, #1
 8014296:	9307      	str	r3, [sp, #28]
 8014298:	4b2e      	ldr	r3, [pc, #184]	@ (8014354 <invoke+0x1d8c>)
 801429a:	9306      	str	r3, [sp, #24]
 801429c:	2360      	movs	r3, #96	@ 0x60
 801429e:	9305      	str	r3, [sp, #20]
 80142a0:	2104      	movs	r1, #4
 80142a2:	9104      	str	r1, [sp, #16]
 80142a4:	9103      	str	r1, [sp, #12]
 80142a6:	f506 44c0 	add.w	r4, r6, #24576	@ 0x6000
 80142aa:	9402      	str	r4, [sp, #8]
 80142ac:	2500      	movs	r5, #0
 80142ae:	9501      	str	r5, [sp, #4]
 80142b0:	4b35      	ldr	r3, [pc, #212]	@ (8014388 <invoke+0x1dc0>)
 80142b2:	681b      	ldr	r3, [r3, #0]
 80142b4:	9300      	str	r3, [sp, #0]
 80142b6:	eddf 0a29 	vldr	s1, [pc, #164]	@ 801435c <invoke+0x1d94>
 80142ba:	ed9f 0a29 	vldr	s0, [pc, #164]	@ 8014360 <invoke+0x1d98>
 80142be:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80142c2:	460a      	mov	r2, r1
 80142c4:	4630      	mov	r0, r6
 80142c6:	f006 f931 	bl	801a52c <pointwise_conv_fp_4row4col_IOHW_int8weight>
/* layer 123:WHERE */
where_zeros_inplace_bit((bool*)&buffer0[25568],1536,(float*)&buffer0[51872]);
 80142ca:	4622      	mov	r2, r4
 80142cc:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80142d0:	f5a6 60d8 	sub.w	r0, r6, #1728	@ 0x6c0
 80142d4:	f00a f88a 	bl	801e3ec <where_zeros_inplace_bit>
/* layer 124:MUL */
fptr = &buffer0[51872];
 80142d8:	4b1b      	ldr	r3, [pc, #108]	@ (8014348 <invoke+0x1d80>)
 80142da:	601c      	str	r4, [r3, #0]
fptr2 = scales32;
 80142dc:	4b21      	ldr	r3, [pc, #132]	@ (8014364 <invoke+0x1d9c>)
 80142de:	4a2b      	ldr	r2, [pc, #172]	@ (801438c <invoke+0x1dc4>)
 80142e0:	601a      	str	r2, [r3, #0]
for(int hw = 0; hw < 16; hw++){
 80142e2:	e013      	b.n	801430c <invoke+0x1d44>
for(int i = 0; i < 96; i++){float f = *fptr; *fptr++ = fptr2[i] * f;};
 80142e4:	4c18      	ldr	r4, [pc, #96]	@ (8014348 <invoke+0x1d80>)
 80142e6:	6820      	ldr	r0, [r4, #0]
 80142e8:	4602      	mov	r2, r0
 80142ea:	ecb2 7a01 	vldmia	r2!, {s14}
 80142ee:	491d      	ldr	r1, [pc, #116]	@ (8014364 <invoke+0x1d9c>)
 80142f0:	6809      	ldr	r1, [r1, #0]
 80142f2:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 80142f6:	edd1 7a00 	vldr	s15, [r1]
 80142fa:	6022      	str	r2, [r4, #0]
 80142fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014300:	edc0 7a00 	vstr	s15, [r0]
 8014304:	3301      	adds	r3, #1
 8014306:	2b5f      	cmp	r3, #95	@ 0x5f
 8014308:	ddec      	ble.n	80142e4 <invoke+0x1d1c>
for(int hw = 0; hw < 16; hw++){
 801430a:	3501      	adds	r5, #1
 801430c:	2d0f      	cmp	r5, #15
 801430e:	dc01      	bgt.n	8014314 <invoke+0x1d4c>
for(int i = 0; i < 96; i++){float f = *fptr; *fptr++ = fptr2[i] * f;};
 8014310:	2300      	movs	r3, #0
 8014312:	e7f8      	b.n	8014306 <invoke+0x1d3e>
}
/* layer 125:SUM */
sum_4D_exclude((float*)&buffer0[51872],1,4,4,96,3,(float*)&buffer0[25568]);
 8014314:	4c1e      	ldr	r4, [pc, #120]	@ (8014390 <invoke+0x1dc8>)
 8014316:	9402      	str	r4, [sp, #8]
 8014318:	2303      	movs	r3, #3
 801431a:	9301      	str	r3, [sp, #4]
 801431c:	2360      	movs	r3, #96	@ 0x60
 801431e:	9300      	str	r3, [sp, #0]
 8014320:	2304      	movs	r3, #4
 8014322:	461a      	mov	r2, r3
 8014324:	2101      	movs	r1, #1
 8014326:	480a      	ldr	r0, [pc, #40]	@ (8014350 <invoke+0x1d88>)
 8014328:	f008 f898 	bl	801c45c <sum_4D_exclude>
/* layer 126:BIAS_UPDATE */
const float v11_conv_2_bias_QAS[96] = {432550300.0,375101700.0,437156060.0,581787100.0,525189470.0,579265300.0,650508200.0,571823600.0,713535500.0,617111200.0,325618500.0,356919550.0,278525500.0,347964160.0,582282900.0,245331860.0,499914270.0,541437300.0,437642700.0,395421700.0,398489000.0,379602430.0,534114940.0,675364740.0,338407420.0,484193920.0,306952420.0,348372770.0,539177300.0,337501440.0,257014050.0,555452100.0,461507170.0,321952800.0,597713600.0,476133950.0,427873060.0,492571620.0,307989630.0,488513340.0,521551070.0,537259500.0,568293000.0,409705540.0,246441150.0,376149150.0,414129730.0,384527500.0,471164220.0,434883870.0,528346430.0,185190740.0,403773700.0,408318600.0,514284540.0,653932000.0,610370600.0,387412000.0,360227840.0,478465060.0,668778430.0,619559300.0,407304800.0,381928700.0,433998000.0,531015840.0,637770800.0,597956100.0,795642300.0,328686560.0,419181920.0,547983600.0,508011330.0,242219650.0,477589950.0,317062080.0,421132260.0,442602600.0,452089120.0,376861700.0,706227400.0,490516320.0,308305180.0,422310750.0,427676000.0,388494500.0,391234880.0,488454620.0,536344900.0,764594750.0,466583170.0,355003200.0,361732580.0,373656800.0,524078200.0,281078370.0,};
 801432c:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8014330:	4918      	ldr	r1, [pc, #96]	@ (8014394 <invoke+0x1dcc>)
 8014332:	f242 0048 	movw	r0, #8264	@ 0x2048
 8014336:	4468      	add	r0, sp
 8014338:	f00f fd70 	bl	8023e1c <memcpy>
fptr = (float*)&buffer0[25568];//gradients
 801433c:	4b02      	ldr	r3, [pc, #8]	@ (8014348 <invoke+0x1d80>)
 801433e:	601c      	str	r4, [r3, #0]
for(int i = 0; i < 96; i++) v11_conv_2_bias[i] -= (int32_t)(fptr[i] * blr * v11_conv_2_bias_QAS[i]);
 8014340:	2300      	movs	r3, #0
 8014342:	e048      	b.n	80143d6 <invoke+0x1e0e>
 8014344:	20002ea8 	.word	0x20002ea8
 8014348:	2000cca0 	.word	0x2000cca0
 801434c:	39d1b717 	.word	0x39d1b717
 8014350:	2001b1f0 	.word	0x2001b1f0
 8014354:	2003a750 	.word	0x2003a750
 8014358:	2000302c 	.word	0x2000302c
 801435c:	7f7fffff 	.word	0x7f7fffff
 8014360:	ff7fffff 	.word	0xff7fffff
 8014364:	2000cc9c 	.word	0x2000cc9c
 8014368:	080762e4 	.word	0x080762e4
 801436c:	200151f0 	.word	0x200151f0
 8014370:	08029eb0 	.word	0x08029eb0
 8014374:	20003030 	.word	0x20003030
 8014378:	20003634 	.word	0x20003634
 801437c:	0807b3e4 	.word	0x0807b3e4
 8014380:	0802a4b0 	.word	0x0802a4b0
 8014384:	20003638 	.word	0x20003638
 8014388:	20003c3c 	.word	0x20003c3c
 801438c:	080849e4 	.word	0x080849e4
 8014390:	20014b30 	.word	0x20014b30
 8014394:	0802aab0 	.word	0x0802aab0
 8014398:	4aaf      	ldr	r2, [pc, #700]	@ (8014658 <invoke+0x2090>)
 801439a:	6810      	ldr	r0, [r2, #0]
 801439c:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 80143a0:	49ae      	ldr	r1, [pc, #696]	@ (801465c <invoke+0x2094>)
 80143a2:	6809      	ldr	r1, [r1, #0]
 80143a4:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 80143a8:	edd1 7a00 	vldr	s15, [r1]
 80143ac:	ed9f 7aac 	vldr	s14, [pc, #688]	@ 8014660 <invoke+0x2098>
 80143b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80143b4:	f242 0148 	movw	r1, #8264	@ 0x2048
 80143b8:	4469      	add	r1, sp
 80143ba:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 80143be:	ed91 7a00 	vldr	s14, [r1]
 80143c2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80143c6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80143ca:	ee17 1a90 	vmov	r1, s15
 80143ce:	1a52      	subs	r2, r2, r1
 80143d0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 80143d4:	3301      	adds	r3, #1
 80143d6:	2b5f      	cmp	r3, #95	@ 0x5f
 80143d8:	ddde      	ble.n	8014398 <invoke+0x1dd0>
/* layer 127:TRANSPOSE_CONV_2D */
pointwise_conv_fp_4row4col_IOHW_int8weight((float*)&buffer0[51872],4,4,96,(q7_t*)v11_conv_2_weight,NULL,(float*)&buffer0[86528],4,4,240,-FLT_MAX,FLT_MAX,(float*)sbuf, 1);
 80143da:	2301      	movs	r3, #1
 80143dc:	9307      	str	r3, [sp, #28]
 80143de:	4ba1      	ldr	r3, [pc, #644]	@ (8014664 <invoke+0x209c>)
 80143e0:	9306      	str	r3, [sp, #24]
 80143e2:	23f0      	movs	r3, #240	@ 0xf0
 80143e4:	9305      	str	r3, [sp, #20]
 80143e6:	2104      	movs	r1, #4
 80143e8:	9104      	str	r1, [sp, #16]
 80143ea:	9103      	str	r1, [sp, #12]
 80143ec:	4c9e      	ldr	r4, [pc, #632]	@ (8014668 <invoke+0x20a0>)
 80143ee:	9402      	str	r4, [sp, #8]
 80143f0:	2500      	movs	r5, #0
 80143f2:	9501      	str	r5, [sp, #4]
 80143f4:	4b9d      	ldr	r3, [pc, #628]	@ (801466c <invoke+0x20a4>)
 80143f6:	681b      	ldr	r3, [r3, #0]
 80143f8:	9300      	str	r3, [sp, #0]
 80143fa:	eddf 0a9d 	vldr	s1, [pc, #628]	@ 8014670 <invoke+0x20a8>
 80143fe:	ed9f 0a9d 	vldr	s0, [pc, #628]	@ 8014674 <invoke+0x20ac>
 8014402:	2360      	movs	r3, #96	@ 0x60
 8014404:	460a      	mov	r2, r1
 8014406:	489c      	ldr	r0, [pc, #624]	@ (8014678 <invoke+0x20b0>)
 8014408:	f006 f890 	bl	801a52c <pointwise_conv_fp_4row4col_IOHW_int8weight>
/* layer 128:WHERE */
where_zeros_inplace_bit((bool*)&buffer0[25088],3840,(float*)&buffer0[86528]);
 801440c:	4622      	mov	r2, r4
 801440e:	f44f 6170 	mov.w	r1, #3840	@ 0xf00
 8014412:	f5a4 4070 	sub.w	r0, r4, #61440	@ 0xf000
 8014416:	f009 ffe9 	bl	801e3ec <where_zeros_inplace_bit>
/* layer 129:MUL */
fptr = &buffer0[86528];
 801441a:	4b90      	ldr	r3, [pc, #576]	@ (801465c <invoke+0x2094>)
 801441c:	601c      	str	r4, [r3, #0]
fptr2 = scales31;
 801441e:	4b97      	ldr	r3, [pc, #604]	@ (801467c <invoke+0x20b4>)
 8014420:	4a97      	ldr	r2, [pc, #604]	@ (8014680 <invoke+0x20b8>)
 8014422:	601a      	str	r2, [r3, #0]
for(int hw = 0; hw < 16; hw++){
 8014424:	e013      	b.n	801444e <invoke+0x1e86>
for(int i = 0; i < 240; i++){float f = *fptr; *fptr++ = fptr2[i] * f;};
 8014426:	4c8d      	ldr	r4, [pc, #564]	@ (801465c <invoke+0x2094>)
 8014428:	6820      	ldr	r0, [r4, #0]
 801442a:	4602      	mov	r2, r0
 801442c:	ecb2 7a01 	vldmia	r2!, {s14}
 8014430:	4992      	ldr	r1, [pc, #584]	@ (801467c <invoke+0x20b4>)
 8014432:	6809      	ldr	r1, [r1, #0]
 8014434:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8014438:	edd1 7a00 	vldr	s15, [r1]
 801443c:	6022      	str	r2, [r4, #0]
 801443e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014442:	edc0 7a00 	vstr	s15, [r0]
 8014446:	3301      	adds	r3, #1
 8014448:	2bef      	cmp	r3, #239	@ 0xef
 801444a:	ddec      	ble.n	8014426 <invoke+0x1e5e>
for(int hw = 0; hw < 16; hw++){
 801444c:	3501      	adds	r5, #1
 801444e:	2d0f      	cmp	r5, #15
 8014450:	dc01      	bgt.n	8014456 <invoke+0x1e8e>
for(int i = 0; i < 240; i++){float f = *fptr; *fptr++ = fptr2[i] * f;};
 8014452:	2300      	movs	r3, #0
 8014454:	e7f8      	b.n	8014448 <invoke+0x1e80>
}
/* layer 130:SUM */
sum_4D_exclude((float*)&buffer0[86528],1,4,4,240,3,(float*)&buffer0[25088]);
 8014456:	4884      	ldr	r0, [pc, #528]	@ (8014668 <invoke+0x20a0>)
 8014458:	f5a0 4470 	sub.w	r4, r0, #61440	@ 0xf000
 801445c:	9402      	str	r4, [sp, #8]
 801445e:	2303      	movs	r3, #3
 8014460:	9301      	str	r3, [sp, #4]
 8014462:	23f0      	movs	r3, #240	@ 0xf0
 8014464:	9300      	str	r3, [sp, #0]
 8014466:	2304      	movs	r3, #4
 8014468:	461a      	mov	r2, r3
 801446a:	2101      	movs	r1, #1
 801446c:	f007 fff6 	bl	801c45c <sum_4D_exclude>
/* layer 131:BIAS_UPDATE */
const float v11_conv_1_bias_QAS[240] = {176854110.0,147088780.0,98894730.0,154173280.0,120978744.0,110749630.0,85150220.0,87416744.0,76360824.0,182378500.0,84360850.0,110915370.0,372390370.0,119287890.0,180645870.0,792535200.0,96971060.0,93952740.0,120224230.0,333828200.0,107680370.0,252133620.0,200577920.0,93724936.0,140804700.0,165764480.0,124706240.0,175792910.0,117854070.0,114314376.0,33995524.0,84359820.0,85569940.0,340773100.0,89224950.0,82249224.0,116825580.0,93757290.0,101293930.0,86161970.0,126940500.0,103337390.0,84285220.0,245931570.0,111383970.0,153373120.0,143879070.0,67805640.0,100072390.0,77325030.0,144503660.0,116583420.0,235600800.0,751139800.0,466777400.0,113541370.0,122336530.0,348951500.0,104526360.0,63396948.0,57517988.0,140818690.0,95306520.0,81721170.0,117096000.0,322184030.0,100322950.0,93083250.0,56282944.0,82163250.0,107621480.0,153793470.0,78120830.0,166910620.0,201587620.0,105373780.0,110673730.0,45338730.0,131914070.0,1906639100.0,158487740.0,112157760.0,125367740.0,136941630.0,95518184.0,227501840.0,64020650.0,151728160.0,81904936.0,93160216.0,99449350.0,125387304.0,332069980.0,84223860.0,135165070.0,145589760.0,89583630.0,100572030.0,100823280.0,84184250.0,60865700.0,90351120.0,362819700.0,87650880.0,87846640.0,56651360.0,107920850.0,76796216.0,110930990.0,514935460.0,103876504.0,93186580.0,116479710.0,300237280.0,46850948.0,143543410.0,122639730.0,126919660.0,133438990.0,328854370.0,127010170.0,78943870.0,275756670.0,108456770.0,251999470.0,224582880.0,65074616.0,104979590.0,122542310.0,103600230.0,101624230.0,114799900.0,247452210.0,137358100.0,125727200.0,138057550.0,104491070.0,70584660.0,77253380.0,112826780.0,120639590.0,128703840.0,93863544.0,159654450.0,141452350.0,274409950.0,102693560.0,226816100.0,214489520.0,84627384.0,63941132.0,83276696.0,59306416.0,95793350.0,97138530.0,109930670.0,81163130.0,71914344.0,129095450.0,94769256.0,57460800.0,100512170.0,70987496.0,85093360.0,86233260.0,99843176.0,101501390.0,143300300.0,64805096.0,122478130.0,22592322.0,70645440.0,330577060.0,173949550.0,89555320.0,114850640.0,64686964.0,75196870.0,122780230.0,105577896.0,108401380.0,79986860.0,124280240.0,143060580.0,176160100.0,166410270.0,100347416.0,118310856.0,140926720.0,352116500.0,320394880.0,686043700.0,155510910.0,94487490.0,81552350.0,130098490.0,103792170.0,35842748.0,232687410.0,45229960.0,192181660.0,122861816.0,107111960.0,363504320.0,111834100.0,122364530.0,153787380.0,113546840.0,113141250.0,320554050.0,378002940.0,80382440.0,153116420.0,70618480.0,157710820.0,102684430.0,108095380.0,137134880.0,117507750.0,152732460.0,102970370.0,92666184.0,694961400.0,86364936.0,107402696.0,97384520.0,150793780.0,92713144.0,130695256.0,85760200.0,89749550.0,6196774000.0,68428830.0,84317520.0,197643500.0,48946260.0,109050030.0,126658664.0,113251020.0,115429760.0,};
 8014470:	f44f 7270 	mov.w	r2, #960	@ 0x3c0
 8014474:	4983      	ldr	r1, [pc, #524]	@ (8014684 <invoke+0x20bc>)
 8014476:	f641 4088 	movw	r0, #7304	@ 0x1c88
 801447a:	4468      	add	r0, sp
 801447c:	f00f fcce 	bl	8023e1c <memcpy>
fptr = (float*)&buffer0[25088];//gradients
 8014480:	4b76      	ldr	r3, [pc, #472]	@ (801465c <invoke+0x2094>)
 8014482:	601c      	str	r4, [r3, #0]
for(int i = 0; i < 240; i++) v11_conv_1_bias[i] -= (int32_t)(fptr[i] * blr * v11_conv_1_bias_QAS[i]);
 8014484:	2300      	movs	r3, #0
 8014486:	e01e      	b.n	80144c6 <invoke+0x1efe>
 8014488:	4a7f      	ldr	r2, [pc, #508]	@ (8014688 <invoke+0x20c0>)
 801448a:	6810      	ldr	r0, [r2, #0]
 801448c:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 8014490:	4972      	ldr	r1, [pc, #456]	@ (801465c <invoke+0x2094>)
 8014492:	6809      	ldr	r1, [r1, #0]
 8014494:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8014498:	edd1 7a00 	vldr	s15, [r1]
 801449c:	ed9f 7a70 	vldr	s14, [pc, #448]	@ 8014660 <invoke+0x2098>
 80144a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80144a4:	f641 4188 	movw	r1, #7304	@ 0x1c88
 80144a8:	4469      	add	r1, sp
 80144aa:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 80144ae:	ed91 7a00 	vldr	s14, [r1]
 80144b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80144b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80144ba:	ee17 1a90 	vmov	r1, s15
 80144be:	1a52      	subs	r2, r2, r1
 80144c0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 80144c4:	3301      	adds	r3, #1
 80144c6:	2bef      	cmp	r3, #239	@ 0xef
 80144c8:	ddde      	ble.n	8014488 <invoke+0x1ec0>
/* layer 132:TRANSPOSE_CONV_2D */
transpose_depthwise_conv_fp_kernel7_stride2_inpad3_outpad1_IOHW_int8weight((float*)&buffer0[86528],4,4,240,v11_conv_1_weight,NULL,(float*)&buffer0[25088],8,8,240,-FLT_MAX,FLT_MAX,(float*)sbuf,1,0);
 80144ca:	4867      	ldr	r0, [pc, #412]	@ (8014668 <invoke+0x20a0>)
 80144cc:	2500      	movs	r5, #0
 80144ce:	9508      	str	r5, [sp, #32]
 80144d0:	2301      	movs	r3, #1
 80144d2:	9307      	str	r3, [sp, #28]
 80144d4:	f500 33b7 	add.w	r3, r0, #93696	@ 0x16e00
 80144d8:	9306      	str	r3, [sp, #24]
 80144da:	23f0      	movs	r3, #240	@ 0xf0
 80144dc:	9305      	str	r3, [sp, #20]
 80144de:	2208      	movs	r2, #8
 80144e0:	9204      	str	r2, [sp, #16]
 80144e2:	9203      	str	r2, [sp, #12]
 80144e4:	f5a0 4470 	sub.w	r4, r0, #61440	@ 0xf000
 80144e8:	9402      	str	r4, [sp, #8]
 80144ea:	9501      	str	r5, [sp, #4]
 80144ec:	4a67      	ldr	r2, [pc, #412]	@ (801468c <invoke+0x20c4>)
 80144ee:	6812      	ldr	r2, [r2, #0]
 80144f0:	9200      	str	r2, [sp, #0]
 80144f2:	eddf 0a5f 	vldr	s1, [pc, #380]	@ 8014670 <invoke+0x20a8>
 80144f6:	ed9f 0a5f 	vldr	s0, [pc, #380]	@ 8014674 <invoke+0x20ac>
 80144fa:	2204      	movs	r2, #4
 80144fc:	4611      	mov	r1, r2
 80144fe:	f009 fe22 	bl	801e146 <transpose_depthwise_conv_fp_kernel7_stride2_inpad3_outpad1_IOHW_int8weight>
/* layer 133:WHERE */
where_zeros_inplace_bit((bool*)&buffer0[23168],15360,(float*)&buffer0[25088]);
 8014502:	4622      	mov	r2, r4
 8014504:	f44f 5170 	mov.w	r1, #15360	@ 0x3c00
 8014508:	f5a4 60f0 	sub.w	r0, r4, #1920	@ 0x780
 801450c:	f009 ff6e 	bl	801e3ec <where_zeros_inplace_bit>
/* layer 134:MUL */
fptr = &buffer0[25088];
 8014510:	4b52      	ldr	r3, [pc, #328]	@ (801465c <invoke+0x2094>)
 8014512:	601c      	str	r4, [r3, #0]
fptr2 = scales30;
 8014514:	4b59      	ldr	r3, [pc, #356]	@ (801467c <invoke+0x20b4>)
 8014516:	4a5e      	ldr	r2, [pc, #376]	@ (8014690 <invoke+0x20c8>)
 8014518:	601a      	str	r2, [r3, #0]
for(int hw = 0; hw < 64; hw++){
 801451a:	e013      	b.n	8014544 <invoke+0x1f7c>
for(int i = 0; i < 240; i++){float f = *fptr; *fptr++ = fptr2[i] * f;};
 801451c:	4c4f      	ldr	r4, [pc, #316]	@ (801465c <invoke+0x2094>)
 801451e:	6820      	ldr	r0, [r4, #0]
 8014520:	4602      	mov	r2, r0
 8014522:	ecb2 7a01 	vldmia	r2!, {s14}
 8014526:	4955      	ldr	r1, [pc, #340]	@ (801467c <invoke+0x20b4>)
 8014528:	6809      	ldr	r1, [r1, #0]
 801452a:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 801452e:	edd1 7a00 	vldr	s15, [r1]
 8014532:	6022      	str	r2, [r4, #0]
 8014534:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014538:	edc0 7a00 	vstr	s15, [r0]
 801453c:	3301      	adds	r3, #1
 801453e:	2bef      	cmp	r3, #239	@ 0xef
 8014540:	ddec      	ble.n	801451c <invoke+0x1f54>
for(int hw = 0; hw < 64; hw++){
 8014542:	3501      	adds	r5, #1
 8014544:	2d3f      	cmp	r5, #63	@ 0x3f
 8014546:	dc01      	bgt.n	801454c <invoke+0x1f84>
for(int i = 0; i < 240; i++){float f = *fptr; *fptr++ = fptr2[i] * f;};
 8014548:	2300      	movs	r3, #0
 801454a:	e7f8      	b.n	801453e <invoke+0x1f76>
}
/* layer 135:SUM */
sum_4D_exclude((float*)&buffer0[25088],1,8,8,240,3,(float*)&buffer0[23168]);
 801454c:	4851      	ldr	r0, [pc, #324]	@ (8014694 <invoke+0x20cc>)
 801454e:	f5a0 64f0 	sub.w	r4, r0, #1920	@ 0x780
 8014552:	9402      	str	r4, [sp, #8]
 8014554:	2303      	movs	r3, #3
 8014556:	9301      	str	r3, [sp, #4]
 8014558:	23f0      	movs	r3, #240	@ 0xf0
 801455a:	9300      	str	r3, [sp, #0]
 801455c:	2308      	movs	r3, #8
 801455e:	461a      	mov	r2, r3
 8014560:	2101      	movs	r1, #1
 8014562:	f007 ff7b 	bl	801c45c <sum_4D_exclude>
/* layer 136:BIAS_UPDATE */
const float v11_conv_0_bias_QAS[240] = {222053550.0,238249230.0,42329590.0,334853570.0,244787970.0,187087220.0,252697920.0,214233280.0,244313620.0,216889570.0,550981060.0,157574820.0,376055800.0,169615070.0,633696800.0,183249020.0,173189730.0,156033260.0,451611300.0,717515900.0,233444640.0,120407730.0,264770880.0,210556210.0,277143550.0,222676300.0,467064580.0,260657680.0,515243970.0,334925600.0,63610550.0,191211940.0,322718080.0,282833630.0,356672160.0,503605920.0,379796740.0,264762100.0,303439940.0,168188670.0,946538050.0,246090620.0,255942770.0,433751040.0,194935890.0,447735900.0,335057900.0,190451890.0,175017390.0,594128300.0,278718900.0,202936320.0,161872020.0,109231010.0,375647140.0,2194942000.0,167079700.0,406403970.0,374617540.0,128290840.0,197049180.0,291071870.0,299988450.0,232603550.0,395654620.0,496277120.0,183359900.0,287347700.0,190623520.0,342361060.0,107304770.0,225165010.0,234340910.0,1113314000.0,311237950.0,260575700.0,60788068.0,124534180.0,174860020.0,273796320.0,188689420.0,186112640.0,293580060.0,251349010.0,150670850.0,150847970.0,101516240.0,415562530.0,248355820.0,239681020.0,69158320.0,365116900.0,238008820.0,178186620.0,114276780.0,291710270.0,389046300.0,236874450.0,209619100.0,481769150.0,100649240.0,323922140.0,363505920.0,345436540.0,238355440.0,138547300.0,191461700.0,290883040.0,353903780.0,409517400.0,357018530.0,107448344.0,154399970.0,300423330.0,114199710.0,317265540.0,140985090.0,361069100.0,85341464.0,728871900.0,517906530.0,160144880.0,479543970.0,195112770.0,558428000.0,401075230.0,132034840.0,148002030.0,344508220.0,212592830.0,369757500.0,214354340.0,362561020.0,292036860.0,364706600.0,459363970.0,376638620.0,179853820.0,198257420.0,139451140.0,270904420.0,394561800.0,298892900.0,188446560.0,259890580.0,296260860.0,441818560.0,61723972.0,182898480.0,128629410.0,154542020.0,192442610.0,274891940.0,531862140.0,261821000.0,178555650.0,185288380.0,134832880.0,558778940.0,760331140.0,188252060.0,215739570.0,250051870.0,439624130.0,283744030.0,223087940.0,224839870.0,184522850.0,232627410.0,375074600.0,129570296.0,232125470.0,409374340.0,278790460.0,222788240.0,294334460.0,168461860.0,196347580.0,122758456.0,174988850.0,338849120.0,203318580.0,219040940.0,249616060.0,254826530.0,123540730.0,148026110.0,222169070.0,322438340.0,318081180.0,279756450.0,249204690.0,263394930.0,277079500.0,286754080.0,316824350.0,151333900.0,1401044400.0,654861760.0,338289120.0,567904900.0,119817010.0,251501280.0,306107400.0,381583300.0,534466880.0,326682370.0,499156540.0,255604020.0,223444800.0,218008660.0,210210370.0,267794180.0,457032100.0,227650420.0,445688830.0,86923090.0,234123620.0,548293760.0,258038320.0,223319740.0,195635200.0,733549900.0,109024990.0,303095500.0,379993820.0,211956530.0,252265330.0,408614100.0,392735700.0,242124930.0,1553785600.0,112253300.0,136019570.0,504035550.0,114972200.0,270072700.0,426348930.0,303208580.0,214769120.0,};
 8014566:	f44f 7270 	mov.w	r2, #960	@ 0x3c0
 801456a:	494b      	ldr	r1, [pc, #300]	@ (8014698 <invoke+0x20d0>)
 801456c:	f641 00c8 	movw	r0, #6344	@ 0x18c8
 8014570:	4468      	add	r0, sp
 8014572:	f00f fc53 	bl	8023e1c <memcpy>
fptr = (float*)&buffer0[23168];//gradients
 8014576:	4b39      	ldr	r3, [pc, #228]	@ (801465c <invoke+0x2094>)
 8014578:	601c      	str	r4, [r3, #0]
for(int i = 0; i < 240; i++) v11_conv_0_bias[i] -= (int32_t)(fptr[i] * blr * v11_conv_0_bias_QAS[i]);
 801457a:	2300      	movs	r3, #0
 801457c:	e01e      	b.n	80145bc <invoke+0x1ff4>
 801457e:	4a47      	ldr	r2, [pc, #284]	@ (801469c <invoke+0x20d4>)
 8014580:	6810      	ldr	r0, [r2, #0]
 8014582:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 8014586:	4935      	ldr	r1, [pc, #212]	@ (801465c <invoke+0x2094>)
 8014588:	6809      	ldr	r1, [r1, #0]
 801458a:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 801458e:	edd1 7a00 	vldr	s15, [r1]
 8014592:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 8014660 <invoke+0x2098>
 8014596:	ee67 7a87 	vmul.f32	s15, s15, s14
 801459a:	f641 01c8 	movw	r1, #6344	@ 0x18c8
 801459e:	4469      	add	r1, sp
 80145a0:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 80145a4:	ed91 7a00 	vldr	s14, [r1]
 80145a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80145ac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80145b0:	ee17 1a90 	vmov	r1, s15
 80145b4:	1a52      	subs	r2, r2, r1
 80145b6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 80145ba:	3301      	adds	r3, #1
 80145bc:	2bef      	cmp	r3, #239	@ 0xef
 80145be:	ddde      	ble.n	801457e <invoke+0x1fb6>
/* layer 137:TRANSPOSE_CONV_2D */
pointwise_conv_fp_4row4col_IOHW_int8weight_partialCH_8innercol((float*)&buffer0[25088],8,8,240,(q7_t*)v11_conv_0_weight,(q7_t*)v11_conv_0_weightFlash,24,NULL,(float*)&buffer0[86528],8,8,48,-FLT_MAX,FLT_MAX,(float*)sbuf, 1);
 80145c0:	4d34      	ldr	r5, [pc, #208]	@ (8014694 <invoke+0x20cc>)
 80145c2:	2301      	movs	r3, #1
 80145c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80145c6:	4b27      	ldr	r3, [pc, #156]	@ (8014664 <invoke+0x209c>)
 80145c8:	9308      	str	r3, [sp, #32]
 80145ca:	2330      	movs	r3, #48	@ 0x30
 80145cc:	9307      	str	r3, [sp, #28]
 80145ce:	2108      	movs	r1, #8
 80145d0:	9106      	str	r1, [sp, #24]
 80145d2:	9105      	str	r1, [sp, #20]
 80145d4:	f505 4670 	add.w	r6, r5, #61440	@ 0xf000
 80145d8:	9604      	str	r6, [sp, #16]
 80145da:	2400      	movs	r4, #0
 80145dc:	9403      	str	r4, [sp, #12]
 80145de:	2318      	movs	r3, #24
 80145e0:	9302      	str	r3, [sp, #8]
 80145e2:	4b2f      	ldr	r3, [pc, #188]	@ (80146a0 <invoke+0x20d8>)
 80145e4:	681b      	ldr	r3, [r3, #0]
 80145e6:	9301      	str	r3, [sp, #4]
 80145e8:	4b2e      	ldr	r3, [pc, #184]	@ (80146a4 <invoke+0x20dc>)
 80145ea:	681b      	ldr	r3, [r3, #0]
 80145ec:	9300      	str	r3, [sp, #0]
 80145ee:	eddf 0a20 	vldr	s1, [pc, #128]	@ 8014670 <invoke+0x20a8>
 80145f2:	ed9f 0a20 	vldr	s0, [pc, #128]	@ 8014674 <invoke+0x20ac>
 80145f6:	23f0      	movs	r3, #240	@ 0xf0
 80145f8:	460a      	mov	r2, r1
 80145fa:	4628      	mov	r0, r5
 80145fc:	f006 fb3c 	bl	801ac78 <pointwise_conv_fp_4row4col_IOHW_int8weight_partialCH_8innercol>
/* layer 138:WHERE */
where_zeros_inplace_bit((bool*)&buffer0[20096],3072,(float*)&buffer0[86528]);
 8014600:	4632      	mov	r2, r6
 8014602:	f44f 6140 	mov.w	r1, #3072	@ 0xc00
 8014606:	f5a5 509c 	sub.w	r0, r5, #4992	@ 0x1380
 801460a:	f009 feef 	bl	801e3ec <where_zeros_inplace_bit>
/* layer 139:DIV */
fptr3 = (float*)&buffer0[98816]; fptr2 = (float*)&buffer0[86528];
 801460e:	f505 3590 	add.w	r5, r5, #73728	@ 0x12000
 8014612:	4b25      	ldr	r3, [pc, #148]	@ (80146a8 <invoke+0x20e0>)
 8014614:	601d      	str	r5, [r3, #0]
 8014616:	4b19      	ldr	r3, [pc, #100]	@ (801467c <invoke+0x20b4>)
 8014618:	601e      	str	r6, [r3, #0]
for(int i = 0; i < 3072; i++) *fptr3++ = *fptr2++ / 0.054952241480350494;
 801461a:	4623      	mov	r3, r4
 801461c:	e010      	b.n	8014640 <invoke+0x2078>
 801461e:	4917      	ldr	r1, [pc, #92]	@ (801467c <invoke+0x20b4>)
 8014620:	680a      	ldr	r2, [r1, #0]
 8014622:	1d10      	adds	r0, r2, #4
 8014624:	6008      	str	r0, [r1, #0]
 8014626:	edd2 6a00 	vldr	s13, [r2]
 801462a:	491f      	ldr	r1, [pc, #124]	@ (80146a8 <invoke+0x20e0>)
 801462c:	680a      	ldr	r2, [r1, #0]
 801462e:	1d10      	adds	r0, r2, #4
 8014630:	6008      	str	r0, [r1, #0]
 8014632:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 80146ac <invoke+0x20e4>
 8014636:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801463a:	edc2 7a00 	vstr	s15, [r2]
 801463e:	3301      	adds	r3, #1
 8014640:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8014644:	dbeb      	blt.n	801461e <invoke+0x2056>
/* layer 140:MUL */
fptr = (float*)&buffer0[98816];fptr3 = (float*)&buffer0[86528];for(int i = 0; i < 3072; i++) fptr3[i] = 0.0381767563521862 * fptr[i];
 8014646:	4b1a      	ldr	r3, [pc, #104]	@ (80146b0 <invoke+0x20e8>)
 8014648:	4a04      	ldr	r2, [pc, #16]	@ (801465c <invoke+0x2094>)
 801464a:	6013      	str	r3, [r2, #0]
 801464c:	f5a3 5340 	sub.w	r3, r3, #12288	@ 0x3000
 8014650:	4a15      	ldr	r2, [pc, #84]	@ (80146a8 <invoke+0x20e0>)
 8014652:	6013      	str	r3, [r2, #0]
 8014654:	2300      	movs	r3, #0
 8014656:	e03e      	b.n	80146d6 <invoke+0x210e>
 8014658:	20003c40 	.word	0x20003c40
 801465c:	2000cca0 	.word	0x2000cca0
 8014660:	39d1b717 	.word	0x39d1b717
 8014664:	2003a750 	.word	0x2003a750
 8014668:	20023950 	.word	0x20023950
 801466c:	20003dc4 	.word	0x20003dc4
 8014670:	7f7fffff 	.word	0x7f7fffff
 8014674:	ff7fffff 	.word	0xff7fffff
 8014678:	2001b1f0 	.word	0x2001b1f0
 801467c:	2000cc9c 	.word	0x2000cc9c
 8014680:	0808a564 	.word	0x0808a564
 8014684:	0802ac30 	.word	0x0802ac30
 8014688:	20003dc8 	.word	0x20003dc8
 801468c:	2000418c 	.word	0x2000418c
 8014690:	08090504 	.word	0x08090504
 8014694:	20014950 	.word	0x20014950
 8014698:	0802aff0 	.word	0x0802aff0
 801469c:	20004190 	.word	0x20004190
 80146a0:	20004554 	.word	0x20004554
 80146a4:	20004558 	.word	0x20004558
 80146a8:	2000cc98 	.word	0x2000cc98
 80146ac:	3d61159a 	.word	0x3d61159a
 80146b0:	20026950 	.word	0x20026950
 80146b4:	4aa2      	ldr	r2, [pc, #648]	@ (8014940 <invoke+0x2378>)
 80146b6:	6812      	ldr	r2, [r2, #0]
 80146b8:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80146bc:	edd2 7a00 	vldr	s15, [r2]
 80146c0:	4aa0      	ldr	r2, [pc, #640]	@ (8014944 <invoke+0x237c>)
 80146c2:	6812      	ldr	r2, [r2, #0]
 80146c4:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80146c8:	ed9f 7a9f 	vldr	s14, [pc, #636]	@ 8014948 <invoke+0x2380>
 80146cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80146d0:	edc2 7a00 	vstr	s15, [r2]
 80146d4:	3301      	adds	r3, #1
 80146d6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80146da:	dbeb      	blt.n	80146b4 <invoke+0x20ec>
/* layer 141:WHERE */
where_zeros_inplace_bit((bool*)&buffer0[19712],3072,(float*)&buffer0[86528]);
 80146dc:	4c9b      	ldr	r4, [pc, #620]	@ (801494c <invoke+0x2384>)
 80146de:	4622      	mov	r2, r4
 80146e0:	f44f 6140 	mov.w	r1, #3072	@ 0xc00
 80146e4:	489a      	ldr	r0, [pc, #616]	@ (8014950 <invoke+0x2388>)
 80146e6:	f009 fe81 	bl	801e3ec <where_zeros_inplace_bit>
/* layer 142:MUL */
fptr = &buffer0[86528];
 80146ea:	4b95      	ldr	r3, [pc, #596]	@ (8014940 <invoke+0x2378>)
 80146ec:	601c      	str	r4, [r3, #0]
fptr2 = scales29;
 80146ee:	4b99      	ldr	r3, [pc, #612]	@ (8014954 <invoke+0x238c>)
 80146f0:	4a99      	ldr	r2, [pc, #612]	@ (8014958 <invoke+0x2390>)
 80146f2:	601a      	str	r2, [r3, #0]
for(int hw = 0; hw < 64; hw++){
 80146f4:	2500      	movs	r5, #0
 80146f6:	e013      	b.n	8014720 <invoke+0x2158>
for(int i = 0; i < 48; i++){float f = *fptr; *fptr++ = fptr2[i] * f;};
 80146f8:	4c91      	ldr	r4, [pc, #580]	@ (8014940 <invoke+0x2378>)
 80146fa:	6820      	ldr	r0, [r4, #0]
 80146fc:	4602      	mov	r2, r0
 80146fe:	ecb2 7a01 	vldmia	r2!, {s14}
 8014702:	4994      	ldr	r1, [pc, #592]	@ (8014954 <invoke+0x238c>)
 8014704:	6809      	ldr	r1, [r1, #0]
 8014706:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 801470a:	edd1 7a00 	vldr	s15, [r1]
 801470e:	6022      	str	r2, [r4, #0]
 8014710:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014714:	edc0 7a00 	vstr	s15, [r0]
 8014718:	3301      	adds	r3, #1
 801471a:	2b2f      	cmp	r3, #47	@ 0x2f
 801471c:	ddec      	ble.n	80146f8 <invoke+0x2130>
for(int hw = 0; hw < 64; hw++){
 801471e:	3501      	adds	r5, #1
 8014720:	2d3f      	cmp	r5, #63	@ 0x3f
 8014722:	dc01      	bgt.n	8014728 <invoke+0x2160>
for(int i = 0; i < 48; i++){float f = *fptr; *fptr++ = fptr2[i] * f;};
 8014724:	2300      	movs	r3, #0
 8014726:	e7f8      	b.n	801471a <invoke+0x2152>
}
/* layer 143:SUM */
sum_4D_exclude((float*)&buffer0[86528],1,8,8,48,3,(float*)&buffer0[19712]);
 8014728:	4c89      	ldr	r4, [pc, #548]	@ (8014950 <invoke+0x2388>)
 801472a:	9402      	str	r4, [sp, #8]
 801472c:	2303      	movs	r3, #3
 801472e:	9301      	str	r3, [sp, #4]
 8014730:	2330      	movs	r3, #48	@ 0x30
 8014732:	9300      	str	r3, [sp, #0]
 8014734:	2308      	movs	r3, #8
 8014736:	461a      	mov	r2, r3
 8014738:	2101      	movs	r1, #1
 801473a:	4884      	ldr	r0, [pc, #528]	@ (801494c <invoke+0x2384>)
 801473c:	f007 fe8e 	bl	801c45c <sum_4D_exclude>
/* layer 144:BIAS_UPDATE */
const float v10_conv_2_bias_QAS[48] = {576984500.0,389407400.0,59698172.0,257143000.0,163044690.0,395011680.0,497028600.0,342989300.0,379091260.0,276234370.0,121533540.0,131055270.0,55527044.0,83971040.0,51497524.0,200109470.0,186422500.0,71635896.0,512487360.0,66350476.0,412828100.0,127238440.0,75970530.0,729505400.0,290650850.0,356379070.0,305478050.0,364946430.0,79329816.0,28634610.0,304265300.0,137598180.0,449954780.0,41008460.0,66146290.0,151813570.0,632065300.0,296810370.0,201276270.0,138420270.0,258529490.0,316172670.0,228946190.0,59856908.0,421134560.0,118707160.0,213282690.0,46290260.0,};
 8014740:	22c0      	movs	r2, #192	@ 0xc0
 8014742:	4986      	ldr	r1, [pc, #536]	@ (801495c <invoke+0x2394>)
 8014744:	f641 0008 	movw	r0, #6152	@ 0x1808
 8014748:	4468      	add	r0, sp
 801474a:	f00f fb67 	bl	8023e1c <memcpy>
fptr = (float*)&buffer0[19712];//gradients
 801474e:	4b7c      	ldr	r3, [pc, #496]	@ (8014940 <invoke+0x2378>)
 8014750:	601c      	str	r4, [r3, #0]
for(int i = 0; i < 48; i++) v10_conv_2_bias[i] -= (int32_t)(fptr[i] * blr * v10_conv_2_bias_QAS[i]);
 8014752:	2300      	movs	r3, #0
 8014754:	e01e      	b.n	8014794 <invoke+0x21cc>
 8014756:	4a82      	ldr	r2, [pc, #520]	@ (8014960 <invoke+0x2398>)
 8014758:	6810      	ldr	r0, [r2, #0]
 801475a:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 801475e:	4978      	ldr	r1, [pc, #480]	@ (8014940 <invoke+0x2378>)
 8014760:	6809      	ldr	r1, [r1, #0]
 8014762:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8014766:	edd1 7a00 	vldr	s15, [r1]
 801476a:	ed9f 7a7e 	vldr	s14, [pc, #504]	@ 8014964 <invoke+0x239c>
 801476e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014772:	f641 0108 	movw	r1, #6152	@ 0x1808
 8014776:	4469      	add	r1, sp
 8014778:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 801477c:	ed91 7a00 	vldr	s14, [r1]
 8014780:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014784:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014788:	ee17 1a90 	vmov	r1, s15
 801478c:	1a52      	subs	r2, r2, r1
 801478e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 8014792:	3301      	adds	r3, #1
 8014794:	2b2f      	cmp	r3, #47	@ 0x2f
 8014796:	ddde      	ble.n	8014756 <invoke+0x218e>
/* layer 145:CAST */
fptr = (float*)&buffer0[98816];
 8014798:	4b69      	ldr	r3, [pc, #420]	@ (8014940 <invoke+0x2378>)
 801479a:	4a73      	ldr	r2, [pc, #460]	@ (8014968 <invoke+0x23a0>)
 801479c:	601a      	str	r2, [r3, #0]
int8ptr = (int8_t*)&buffer0[16640];
 801479e:	4b73      	ldr	r3, [pc, #460]	@ (801496c <invoke+0x23a4>)
 80147a0:	4a73      	ldr	r2, [pc, #460]	@ (8014970 <invoke+0x23a8>)
 80147a2:	601a      	str	r2, [r3, #0]
for(int i = 0; i < 3072; i++) fptr[i] = (float)int8ptr[i];
 80147a4:	2300      	movs	r3, #0
 80147a6:	e00d      	b.n	80147c4 <invoke+0x21fc>
 80147a8:	4a70      	ldr	r2, [pc, #448]	@ (801496c <invoke+0x23a4>)
 80147aa:	6812      	ldr	r2, [r2, #0]
 80147ac:	56d2      	ldrsb	r2, [r2, r3]
 80147ae:	ee07 2a90 	vmov	s15, r2
 80147b2:	4a63      	ldr	r2, [pc, #396]	@ (8014940 <invoke+0x2378>)
 80147b4:	6812      	ldr	r2, [r2, #0]
 80147b6:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80147ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80147be:	edc2 7a00 	vstr	s15, [r2]
 80147c2:	3301      	adds	r3, #1
 80147c4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80147c8:	dbee      	blt.n	80147a8 <invoke+0x21e0>
/* layer 146:STRIDED_SLICE */
const uint16_t begin0[] = {0, 0, 0, 0};
 80147ca:	f50d 53c0 	add.w	r3, sp, #6144	@ 0x1800
 80147ce:	2500      	movs	r5, #0
 80147d0:	601d      	str	r5, [r3, #0]
 80147d2:	605d      	str	r5, [r3, #4]
const uint16_t end0[] = {1, 24, 8, 8};
 80147d4:	f242 1398 	movw	r3, #8600	@ 0x2198
 80147d8:	446b      	add	r3, sp
 80147da:	f5a3 631a 	sub.w	r3, r3, #2464	@ 0x9a0
 80147de:	f8df a1b4 	ldr.w	sl, [pc, #436]	@ 8014994 <invoke+0x23cc>
 80147e2:	f50a 62d5 	add.w	r2, sl, #1704	@ 0x6a8
 80147e6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80147ea:	e883 0003 	stmia.w	r3, {r0, r1}
const uint16_t strides0[] = {1};
 80147ee:	f242 1398 	movw	r3, #8600	@ 0x2198
 80147f2:	446b      	add	r3, sp
 80147f4:	f6a3 13a4 	subw	r3, r3, #2468	@ 0x9a4
 80147f8:	2601      	movs	r6, #1
 80147fa:	801e      	strh	r6, [r3, #0]
strided_slice_4Dto4D((float*)&buffer0[98816],1,48,8,8,begin0,end0,strides0,(float*)&buffer0[16640],1,24,8,8);
 80147fc:	f8df 8168 	ldr.w	r8, [pc, #360]	@ 8014968 <invoke+0x23a0>
 8014800:	2408      	movs	r4, #8
 8014802:	9408      	str	r4, [sp, #32]
 8014804:	9407      	str	r4, [sp, #28]
 8014806:	f04f 0918 	mov.w	r9, #24
 801480a:	f8cd 9018 	str.w	r9, [sp, #24]
 801480e:	9605      	str	r6, [sp, #20]
 8014810:	4f57      	ldr	r7, [pc, #348]	@ (8014970 <invoke+0x23a8>)
 8014812:	9704      	str	r7, [sp, #16]
 8014814:	9303      	str	r3, [sp, #12]
 8014816:	f241 73f8 	movw	r3, #6136	@ 0x17f8
 801481a:	446b      	add	r3, sp
 801481c:	9302      	str	r3, [sp, #8]
 801481e:	f50d 53c0 	add.w	r3, sp, #6144	@ 0x1800
 8014822:	9301      	str	r3, [sp, #4]
 8014824:	9400      	str	r4, [sp, #0]
 8014826:	4623      	mov	r3, r4
 8014828:	2230      	movs	r2, #48	@ 0x30
 801482a:	4631      	mov	r1, r6
 801482c:	4640      	mov	r0, r8
 801482e:	f007 fd35 	bl	801c29c <strided_slice_4Dto4D>
/* layer 147:GROUP_CONV */
const float v11_conv_0_weight_QAS[240] = {670546.0,719452.8,127824.73,1011173.6,739198.1,564956.4,763084.2,646930.75,737765.94,654952.06,1663824.4,475836.38,1135594.0,512194.9,1913605.2,553366.06,522989.47,471181.28,1363752.8,2166717.8,704944.2,363601.1,799541.56,635826.94,836904.0,672426.6,1410417.8,787120.8,1555907.4,1011391.1,192087.9,577412.06,974527.6,854086.44,1077060.4,1520763.4,1146890.6,799515.06,916312.5,507887.53,2858307.5,743131.9,772882.94,1309819.2,588657.44,1352049.9,1011790.5,575116.75,528508.56,1794118.4,841661.06,612816.75,488812.84,329850.2,1134360.0,6628174.0,504538.7,1227237.9,1131250.9,387406.12,595039.0,878963.94,905889.8,702404.3,1194777.6,1498632.2,553700.9,867717.94,575635.1,1033844.3,324033.44,679941.75,707650.7,3361929.0,939860.4,786873.25,183564.7,376061.94,528033.4,826796.06,569794.7,562013.44,886537.94,759010.9,454988.1,455522.97,306553.56,1254894.5,749972.2,723776.44,208840.78,1102561.2,718726.9,538078.8,345087.2,880891.7,1174822.0,715301.3,632997.0,1454821.9,303935.44,978163.5,1097696.6,1043131.56,719773.56,418378.0,578166.2,878393.6,1068700.5,1236639.6,1078106.2,324467.0,466249.2,907203.0,344854.44,958062.25,425739.53,1090337.9,257709.8,2201009.8,1563947.8,483597.34,1448102.4,589191.56,1686312.6,1211146.5,398712.06,446928.97,1040328.25,641976.94,1116574.9,647296.3,1094843.2,881877.94,1101322.4,1387163.8,1137354.1,543113.3,598687.6,421107.44,818063.3,1191477.5,902581.56,569061.4,784804.25,894633.44,1334181.1,186390.89,552307.44,388428.53,466678.06,581128.4,830104.6,1606090.1,790633.6,539193.25,559524.44,407161.47,1687372.0,2296009.0,568473.94,651479.4,755093.94,1327554.4,856835.8,673669.5,678960.0,557212.7,702476.4,1132631.0,391269.75,700960.6,1236207.8,841877.2,672764.5,888816.2,508712.5,592920.44,370699.66,528422.4,1023239.4,613971.06,661448.6,753777.9,769512.06,373061.97,447001.66,670894.75,973682.8,960525.2,844794.25,752535.56,795386.56,836710.44,865925.25,956729.94,456990.38,4230802.0,1977518.0,1021548.2,1714930.2,361817.28,759470.7,924367.44,1152285.9,1613955.8,986498.7,1507327.5,771859.8,674747.2,658331.4,634782.5,808671.2,1380122.1,687447.0,1345868.2,262485.9,706994.56,1655709.5,779210.94,674369.5,590769.1,2215136.5,329228.1,915272.25,1147485.9,640055.5,761777.9,1233912.0,1185963.1,731156.44,4692042.5,338976.75,410744.97,1522060.9,347187.2,815551.8,1287466.9,915613.8,648548.7,};
 8014832:	f44f 7270 	mov.w	r2, #960	@ 0x3c0
 8014836:	f50a 61d6 	add.w	r1, sl, #1712	@ 0x6b0
 801483a:	f242 1398 	movw	r3, #8600	@ 0x2198
 801483e:	446b      	add	r3, sp
 8014840:	f6a3 5064 	subw	r0, r3, #3428	@ 0xd64
 8014844:	f00f faea 	bl	8023e1c <memcpy>
group_conv_fp_kernel8_stride1_pad0_in8x8_out1x1_uniweight_4row16col_inplace((float*)&buffer0[16640],8,8,24,weight_fp57,NULL,v11_conv_0_weight,1,1,5760,-FLT_MAX,FLT_MAX,(float*)sbuf,1,24, v11_conv_0_weight_QAS, lr);
 8014848:	eddf 8a4a 	vldr	s17, [pc, #296]	@ 8014974 <invoke+0x23ac>
 801484c:	ed9f 8a4a 	vldr	s16, [pc, #296]	@ 8014978 <invoke+0x23b0>
 8014850:	f241 4334 	movw	r3, #5172	@ 0x1434
 8014854:	446b      	add	r3, sp
 8014856:	9309      	str	r3, [sp, #36]	@ 0x24
 8014858:	f8cd 9020 	str.w	r9, [sp, #32]
 801485c:	9607      	str	r6, [sp, #28]
 801485e:	f508 3a9f 	add.w	sl, r8, #81408	@ 0x13e00
 8014862:	f8cd a018 	str.w	sl, [sp, #24]
 8014866:	f44f 53b4 	mov.w	r3, #5760	@ 0x1680
 801486a:	9305      	str	r3, [sp, #20]
 801486c:	9604      	str	r6, [sp, #16]
 801486e:	9603      	str	r6, [sp, #12]
 8014870:	4b42      	ldr	r3, [pc, #264]	@ (801497c <invoke+0x23b4>)
 8014872:	681b      	ldr	r3, [r3, #0]
 8014874:	9302      	str	r3, [sp, #8]
 8014876:	9501      	str	r5, [sp, #4]
 8014878:	4b41      	ldr	r3, [pc, #260]	@ (8014980 <invoke+0x23b8>)
 801487a:	681b      	ldr	r3, [r3, #0]
 801487c:	9300      	str	r3, [sp, #0]
 801487e:	ed9f 1a41 	vldr	s2, [pc, #260]	@ 8014984 <invoke+0x23bc>
 8014882:	eef0 0a68 	vmov.f32	s1, s17
 8014886:	eeb0 0a48 	vmov.f32	s0, s16
 801488a:	464b      	mov	r3, r9
 801488c:	4622      	mov	r2, r4
 801488e:	4621      	mov	r1, r4
 8014890:	4638      	mov	r0, r7
 8014892:	f003 fe3d 	bl	8018510 <group_conv_fp_kernel8_stride1_pad0_in8x8_out1x1_uniweight_4row16col_inplace>
/* layer 148:TRANSPOSE_CONV_2D */
pointwise_conv_fp_4row4col_IOHW_int8weight((float*)&buffer0[86528],8,8,48,(q7_t*)v10_conv_2_weight,NULL,(float*)&buffer0[16640],8,8,192,-FLT_MAX,FLT_MAX,(float*)sbuf, 1);
 8014896:	9607      	str	r6, [sp, #28]
 8014898:	f8cd a018 	str.w	sl, [sp, #24]
 801489c:	23c0      	movs	r3, #192	@ 0xc0
 801489e:	9305      	str	r3, [sp, #20]
 80148a0:	9404      	str	r4, [sp, #16]
 80148a2:	9403      	str	r4, [sp, #12]
 80148a4:	9702      	str	r7, [sp, #8]
 80148a6:	9501      	str	r5, [sp, #4]
 80148a8:	4b37      	ldr	r3, [pc, #220]	@ (8014988 <invoke+0x23c0>)
 80148aa:	681b      	ldr	r3, [r3, #0]
 80148ac:	9300      	str	r3, [sp, #0]
 80148ae:	eef0 0a68 	vmov.f32	s1, s17
 80148b2:	eeb0 0a48 	vmov.f32	s0, s16
 80148b6:	2330      	movs	r3, #48	@ 0x30
 80148b8:	4622      	mov	r2, r4
 80148ba:	4621      	mov	r1, r4
 80148bc:	f5a8 5040 	sub.w	r0, r8, #12288	@ 0x3000
 80148c0:	f005 fe34 	bl	801a52c <pointwise_conv_fp_4row4col_IOHW_int8weight>
/* layer 149:WHERE */
where_zeros_inplace_bit((bool*)&buffer0[15104],12288,(float*)&buffer0[16640]);
 80148c4:	463a      	mov	r2, r7
 80148c6:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 80148ca:	f5a7 60c0 	sub.w	r0, r7, #1536	@ 0x600
 80148ce:	f009 fd8d 	bl	801e3ec <where_zeros_inplace_bit>
/* layer 150:MUL */
fptr = &buffer0[16640];
 80148d2:	4b1b      	ldr	r3, [pc, #108]	@ (8014940 <invoke+0x2378>)
 80148d4:	601f      	str	r7, [r3, #0]
fptr2 = scales28;
 80148d6:	4b1f      	ldr	r3, [pc, #124]	@ (8014954 <invoke+0x238c>)
 80148d8:	4a2c      	ldr	r2, [pc, #176]	@ (801498c <invoke+0x23c4>)
 80148da:	601a      	str	r2, [r3, #0]
for(int hw = 0; hw < 64; hw++){
 80148dc:	e013      	b.n	8014906 <invoke+0x233e>
for(int i = 0; i < 192; i++){float f = *fptr; *fptr++ = fptr2[i] * f;};
 80148de:	4c18      	ldr	r4, [pc, #96]	@ (8014940 <invoke+0x2378>)
 80148e0:	6820      	ldr	r0, [r4, #0]
 80148e2:	4602      	mov	r2, r0
 80148e4:	ecb2 7a01 	vldmia	r2!, {s14}
 80148e8:	491a      	ldr	r1, [pc, #104]	@ (8014954 <invoke+0x238c>)
 80148ea:	6809      	ldr	r1, [r1, #0]
 80148ec:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 80148f0:	edd1 7a00 	vldr	s15, [r1]
 80148f4:	6022      	str	r2, [r4, #0]
 80148f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80148fa:	edc0 7a00 	vstr	s15, [r0]
 80148fe:	3301      	adds	r3, #1
 8014900:	2bbf      	cmp	r3, #191	@ 0xbf
 8014902:	ddec      	ble.n	80148de <invoke+0x2316>
for(int hw = 0; hw < 64; hw++){
 8014904:	3501      	adds	r5, #1
 8014906:	2d3f      	cmp	r5, #63	@ 0x3f
 8014908:	dc01      	bgt.n	801490e <invoke+0x2346>
for(int i = 0; i < 192; i++){float f = *fptr; *fptr++ = fptr2[i] * f;};
 801490a:	2300      	movs	r3, #0
 801490c:	e7f8      	b.n	8014900 <invoke+0x2338>
}
/* layer 151:SUM */
sum_4D_exclude((float*)&buffer0[16640],1,8,8,192,3,(float*)&buffer0[15104]);
 801490e:	4818      	ldr	r0, [pc, #96]	@ (8014970 <invoke+0x23a8>)
 8014910:	f5a0 64c0 	sub.w	r4, r0, #1536	@ 0x600
 8014914:	9402      	str	r4, [sp, #8]
 8014916:	2303      	movs	r3, #3
 8014918:	9301      	str	r3, [sp, #4]
 801491a:	23c0      	movs	r3, #192	@ 0xc0
 801491c:	9300      	str	r3, [sp, #0]
 801491e:	2308      	movs	r3, #8
 8014920:	461a      	mov	r2, r3
 8014922:	2101      	movs	r1, #1
 8014924:	f007 fd9a 	bl	801c45c <sum_4D_exclude>
/* layer 152:BIAS_UPDATE */
const float v10_conv_1_bias_QAS[192] = {91498020.0,21703900.0,74548910.0,20367418.0,50317540.0,26126268.0,31789870.0,77352670.0,330807140.0,43109310.0,150408320.0,100646870.0,15095056.0,16704816.0,101405064.0,40953732.0,50770456.0,849581600.0,138668300.0,95600460.0,58561360.0,34244264.0,76390696.0,74299656.0,26127668.0,75969860.0,37016710.0,57564930.0,38139796.0,59333450.0,41273180.0,539932400.0,27564568.0,44924940.0,141521250.0,525426720.0,24957830.0,44320736.0,52234388.0,128723410.0,54619016.0,95084080.0,59555890.0,10127654.0,49914844.0,35753790.0,25564582.0,7.926462e+20,71134616.0,219250260.0,20063882.0,23685664.0,19783332.0,41921616.0,147659570.0,325859620.0,26529076.0,93842320.0,31472068.0,319382270.0,19002686.0,13319471.0,39225170.0,100210230.0,24215364.0,41917136.0,95148664.0,94530310.0,488316830.0,281061600.0,35070600.0,286875360.0,7.926462e+20,102254584.0,26417842.0,139680050.0,113340260.0,258821170.0,43446600.0,110207010.0,228261840.0,97286390.0,33967580.0,3.3137846e+18,96405100.0,225125940.0,23332618.0,37959870.0,17261586.0,414961470.0,46180284.0,64573024.0,34286850.0,96981620.0,674039500.0,18024324.0,98657020.0,76273630.0,99349336.0,26751442.0,35259310.0,30420076.0,43048730.0,190223440.0,61141180.0,22132840.0,7.926462e+20,14033916.0,54909504.0,1.2152945e+19,60782644.0,153244180.0,214885660.0,95203530.0,28061244.0,62447444.0,64206444.0,175626880.0,81514450.0,45761340.0,68010504.0,85956600.0,48007340.0,87339700.0,20565010.0,87345360.0,384014600.0,41866216.0,24324360.0,310756640.0,35422428.0,190334430.0,14539075.0,279499500.0,183014900.0,91942710.0,30690068.0,50796080.0,45597960.0,62931570.0,80521384.0,72409110.0,160230800.0,7.926462e+20,16303242.0,80481736.0,186633810.0,114596830.0,106177800.0,345116030.0,54160856.0,72475890.0,94240830.0,58295276.0,150437180.0,17037896.0,20385790.0,42254908.0,24926226.0,53126660.0,64769964.0,75218770.0,83778950.0,110935520.0,97568930.0,15854546.0,66931852.0,22687206.0,1226601700.0,52244000.0,14805831.0,591243970.0,98504376.0,90397460.0,34641444.0,42985644.0,126322130.0,31645788.0,465370240.0,7.926462e+20,55217080.0,63158904.0,236222200.0,29223000.0,66637012.0,68148130.0,44197010.0,70664260.0,30163060.0,146203980.0,15988247.0,73750160.0,};
 8014928:	f44f 7240 	mov.w	r2, #768	@ 0x300
 801492c:	4918      	ldr	r1, [pc, #96]	@ (8014990 <invoke+0x23c8>)
 801492e:	f241 1034 	movw	r0, #4404	@ 0x1134
 8014932:	4468      	add	r0, sp
 8014934:	f00f fa72 	bl	8023e1c <memcpy>
fptr = (float*)&buffer0[15104];//gradients
 8014938:	4b01      	ldr	r3, [pc, #4]	@ (8014940 <invoke+0x2378>)
 801493a:	601c      	str	r4, [r3, #0]
for(int i = 0; i < 192; i++) v10_conv_1_bias[i] -= (int32_t)(fptr[i] * blr * v10_conv_1_bias_QAS[i]);
 801493c:	2300      	movs	r3, #0
 801493e:	e04a      	b.n	80149d6 <invoke+0x240e>
 8014940:	2000cca0 	.word	0x2000cca0
 8014944:	2000cc98 	.word	0x2000cc98
 8014948:	3d1c5f3b 	.word	0x3d1c5f3b
 801494c:	20023950 	.word	0x20023950
 8014950:	20013450 	.word	0x20013450
 8014954:	2000cc9c 	.word	0x2000cc9c
 8014958:	08091f44 	.word	0x08091f44
 801495c:	0802b3b0 	.word	0x0802b3b0
 8014960:	20005bdc 	.word	0x20005bdc
 8014964:	39d1b717 	.word	0x39d1b717
 8014968:	20026950 	.word	0x20026950
 801496c:	2000cca4 	.word	0x2000cca4
 8014970:	20012850 	.word	0x20012850
 8014974:	7f7fffff 	.word	0x7f7fffff
 8014978:	ff7fffff 	.word	0xff7fffff
 801497c:	20004558 	.word	0x20004558
 8014980:	20000028 	.word	0x20000028
 8014984:	3a51b717 	.word	0x3a51b717
 8014988:	20005ca0 	.word	0x20005ca0
 801498c:	08094404 	.word	0x08094404
 8014990:	0802b838 	.word	0x0802b838
 8014994:	0802adc8 	.word	0x0802adc8
 8014998:	4aad      	ldr	r2, [pc, #692]	@ (8014c50 <invoke+0x2688>)
 801499a:	6810      	ldr	r0, [r2, #0]
 801499c:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 80149a0:	49ac      	ldr	r1, [pc, #688]	@ (8014c54 <invoke+0x268c>)
 80149a2:	6809      	ldr	r1, [r1, #0]
 80149a4:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 80149a8:	edd1 7a00 	vldr	s15, [r1]
 80149ac:	ed9f 7aaa 	vldr	s14, [pc, #680]	@ 8014c58 <invoke+0x2690>
 80149b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80149b4:	f241 1198 	movw	r1, #4504	@ 0x1198
 80149b8:	4469      	add	r1, sp
 80149ba:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 80149be:	ed11 7a19 	vldr	s14, [r1, #-100]	@ 0xffffff9c
 80149c2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80149c6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80149ca:	ee17 1a90 	vmov	r1, s15
 80149ce:	1a52      	subs	r2, r2, r1
 80149d0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 80149d4:	3301      	adds	r3, #1
 80149d6:	2bbf      	cmp	r3, #191	@ 0xbf
 80149d8:	ddde      	ble.n	8014998 <invoke+0x23d0>
/* layer 153:TRANSPOSE_CONV_2D */
transpose_depthwise_conv_fp_kernel3_stride1_inpad1_outpad0_IOHW_int8weight((float*)&buffer0[16640],8,8,192,v10_conv_1_weight,NULL,(float*)&buffer0[16640],8,8,192,-FLT_MAX,FLT_MAX,(float*)sbuf,1,0);
 80149da:	4ca0      	ldr	r4, [pc, #640]	@ (8014c5c <invoke+0x2694>)
 80149dc:	2500      	movs	r5, #0
 80149de:	9508      	str	r5, [sp, #32]
 80149e0:	2301      	movs	r3, #1
 80149e2:	9307      	str	r3, [sp, #28]
 80149e4:	4b9e      	ldr	r3, [pc, #632]	@ (8014c60 <invoke+0x2698>)
 80149e6:	9306      	str	r3, [sp, #24]
 80149e8:	23c0      	movs	r3, #192	@ 0xc0
 80149ea:	9305      	str	r3, [sp, #20]
 80149ec:	2108      	movs	r1, #8
 80149ee:	9104      	str	r1, [sp, #16]
 80149f0:	9103      	str	r1, [sp, #12]
 80149f2:	9402      	str	r4, [sp, #8]
 80149f4:	9501      	str	r5, [sp, #4]
 80149f6:	4a9b      	ldr	r2, [pc, #620]	@ (8014c64 <invoke+0x269c>)
 80149f8:	6812      	ldr	r2, [r2, #0]
 80149fa:	9200      	str	r2, [sp, #0]
 80149fc:	eddf 0a9a 	vldr	s1, [pc, #616]	@ 8014c68 <invoke+0x26a0>
 8014a00:	ed9f 0a9a 	vldr	s0, [pc, #616]	@ 8014c6c <invoke+0x26a4>
 8014a04:	460a      	mov	r2, r1
 8014a06:	4620      	mov	r0, r4
 8014a08:	f007 ff3d 	bl	801c886 <transpose_depthwise_conv_fp_kernel3_stride1_inpad1_outpad0_IOHW_int8weight>
/* layer 154:WHERE */
where_zeros_inplace_bit((bool*)&buffer0[13568],12288,(float*)&buffer0[16640]);
 8014a0c:	4622      	mov	r2, r4
 8014a0e:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 8014a12:	f5a4 6040 	sub.w	r0, r4, #3072	@ 0xc00
 8014a16:	f009 fce9 	bl	801e3ec <where_zeros_inplace_bit>
/* layer 155:MUL */
fptr = &buffer0[16640];
 8014a1a:	4b8e      	ldr	r3, [pc, #568]	@ (8014c54 <invoke+0x268c>)
 8014a1c:	601c      	str	r4, [r3, #0]
fptr2 = scales27;
 8014a1e:	4b94      	ldr	r3, [pc, #592]	@ (8014c70 <invoke+0x26a8>)
 8014a20:	4a94      	ldr	r2, [pc, #592]	@ (8014c74 <invoke+0x26ac>)
 8014a22:	601a      	str	r2, [r3, #0]
for(int hw = 0; hw < 64; hw++){
 8014a24:	e013      	b.n	8014a4e <invoke+0x2486>
for(int i = 0; i < 192; i++){float f = *fptr; *fptr++ = fptr2[i] * f;};
 8014a26:	4c8b      	ldr	r4, [pc, #556]	@ (8014c54 <invoke+0x268c>)
 8014a28:	6820      	ldr	r0, [r4, #0]
 8014a2a:	4602      	mov	r2, r0
 8014a2c:	ecb2 7a01 	vldmia	r2!, {s14}
 8014a30:	498f      	ldr	r1, [pc, #572]	@ (8014c70 <invoke+0x26a8>)
 8014a32:	6809      	ldr	r1, [r1, #0]
 8014a34:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8014a38:	edd1 7a00 	vldr	s15, [r1]
 8014a3c:	6022      	str	r2, [r4, #0]
 8014a3e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014a42:	edc0 7a00 	vstr	s15, [r0]
 8014a46:	3301      	adds	r3, #1
 8014a48:	2bbf      	cmp	r3, #191	@ 0xbf
 8014a4a:	ddec      	ble.n	8014a26 <invoke+0x245e>
for(int hw = 0; hw < 64; hw++){
 8014a4c:	3501      	adds	r5, #1
 8014a4e:	2d3f      	cmp	r5, #63	@ 0x3f
 8014a50:	dc01      	bgt.n	8014a56 <invoke+0x248e>
for(int i = 0; i < 192; i++){float f = *fptr; *fptr++ = fptr2[i] * f;};
 8014a52:	2300      	movs	r3, #0
 8014a54:	e7f8      	b.n	8014a48 <invoke+0x2480>
}
/* layer 156:SUM */
sum_4D_exclude((float*)&buffer0[16640],1,8,8,192,3,(float*)&buffer0[13568]);
 8014a56:	4881      	ldr	r0, [pc, #516]	@ (8014c5c <invoke+0x2694>)
 8014a58:	f5a0 6440 	sub.w	r4, r0, #3072	@ 0xc00
 8014a5c:	9402      	str	r4, [sp, #8]
 8014a5e:	2303      	movs	r3, #3
 8014a60:	9301      	str	r3, [sp, #4]
 8014a62:	23c0      	movs	r3, #192	@ 0xc0
 8014a64:	9300      	str	r3, [sp, #0]
 8014a66:	2308      	movs	r3, #8
 8014a68:	461a      	mov	r2, r3
 8014a6a:	2101      	movs	r1, #1
 8014a6c:	f007 fcf6 	bl	801c45c <sum_4D_exclude>
/* layer 157:BIAS_UPDATE */
const float v10_conv_0_bias_QAS[192] = {1475223700.0,1030703360.0,816994900.0,512779230.0,2347524000.0,660836200.0,531277100.0,1150393100.0,1093105800.0,930657660.0,1174644100.0,1569000400.0,614608400.0,238872670.0,687180860.0,1450896600.0,1165788900.0,631683600.0,331118600.0,2059191600.0,576453700.0,1783982700.0,1080919000.0,1134233300.0,1000822700.0,706217660.0,2038128300.0,877797100.0,420611420.0,540037000.0,1291300400.0,1069388500.0,3233160200.0,1426606800.0,1734019000.0,793607800.0,1705975700.0,820450200.0,1467972600.0,1563580800.0,1639382700.0,1207545900.0,527852260.0,1098293100.0,1192724600.0,427076130.0,1026932500.0,4.2190073e+19,2782907000.0,379147230.0,747813440.0,2024572700.0,732507460.0,3235556400.0,1616138000.0,647234370.0,501706100.0,1485312600.0,93479270.0,855545300.0,662285060.0,689683200.0,1878082300.0,391809820.0,1131090600.0,1391837400.0,1121582500.0,1456275000.0,1049894140.0,898902800.0,647960100.0,1042980860.0,4.2190073e+19,1154471300.0,944551500.0,1879237600.0,1525937700.0,1369606500.0,723569400.0,1031477060.0,1823601200.0,334616930.0,508839520.0,1.0062653e+19,3225643000.0,1678289000.0,1146084500.0,1116367900.0,1023416960.0,240773890.0,851186600.0,768675300.0,2167447800.0,319047840.0,1249289700.0,1149507500.0,761708900.0,713539840.0,400350180.0,2352317400.0,1594127900.0,4629730000.0,1047818050.0,1866290800.0,1265541600.0,773695740.0,4.2190073e+19,2732557800.0,1945134000.0,9.496834e+18,1106979300.0,171058960.0,950375230.0,1286682500.0,727137600.0,1664550100.0,1629387900.0,1219778400.0,494477500.0,854450750.0,930129700.0,981427000.0,989852160.0,1155484500.0,453677760.0,651104640.0,673504200.0,1487471100.0,1002485300.0,1187815000.0,1635459100.0,1182514200.0,854215230.0,968733600.0,679369500.0,3393553000.0,1513275100.0,2469444900.0,983279400.0,183170540.0,638984400.0,1627245000.0,149853440.0,4.2190073e+19,780821600.0,1578438500.0,1005550300.0,387958200.0,818162500.0,616344400.0,685506200.0,519065180.0,682904450.0,1482624500.0,1451357200.0,891735040.0,472708900.0,1093981600.0,1768975600.0,1353452900.0,2043813400.0,1133310100.0,903940000.0,1340711300.0,77990610.0,464214430.0,2339695000.0,1046356900.0,830976640.0,822072200.0,869157760.0,722591300.0,661153200.0,636663740.0,1315949400.0,1828656500.0,565251140.0,628219800.0,1262477200.0,4.2190073e+19,993717060.0,2325293000.0,1867443300.0,155855520.0,1347042400.0,4613281000.0,1599269500.0,758371700.0,1108067000.0,1495697800.0,671200600.0,378001060.0,};
 8014a70:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8014a74:	4980      	ldr	r1, [pc, #512]	@ (8014c78 <invoke+0x26b0>)
 8014a76:	f60d 6034 	addw	r0, sp, #3636	@ 0xe34
 8014a7a:	f00f f9cf 	bl	8023e1c <memcpy>
fptr = (float*)&buffer0[13568];//gradients
 8014a7e:	4b75      	ldr	r3, [pc, #468]	@ (8014c54 <invoke+0x268c>)
 8014a80:	601c      	str	r4, [r3, #0]
for(int i = 0; i < 192; i++) v10_conv_0_bias[i] -= (int32_t)(fptr[i] * blr * v10_conv_0_bias_QAS[i]);
 8014a82:	2300      	movs	r3, #0
 8014a84:	e01d      	b.n	8014ac2 <invoke+0x24fa>
 8014a86:	4a7d      	ldr	r2, [pc, #500]	@ (8014c7c <invoke+0x26b4>)
 8014a88:	6810      	ldr	r0, [r2, #0]
 8014a8a:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 8014a8e:	4971      	ldr	r1, [pc, #452]	@ (8014c54 <invoke+0x268c>)
 8014a90:	6809      	ldr	r1, [r1, #0]
 8014a92:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8014a96:	edd1 7a00 	vldr	s15, [r1]
 8014a9a:	ed9f 7a6f 	vldr	s14, [pc, #444]	@ 8014c58 <invoke+0x2690>
 8014a9e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014aa2:	f60d 6134 	addw	r1, sp, #3636	@ 0xe34
 8014aa6:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8014aaa:	ed91 7a00 	vldr	s14, [r1]
 8014aae:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014ab2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014ab6:	ee17 1a90 	vmov	r1, s15
 8014aba:	1a52      	subs	r2, r2, r1
 8014abc:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 8014ac0:	3301      	adds	r3, #1
 8014ac2:	2bbf      	cmp	r3, #191	@ 0xbf
 8014ac4:	dddf      	ble.n	8014a86 <invoke+0x24be>
/* layer 158:TRANSPOSE_CONV_2D */
pointwise_conv_fp_4row4col_IOHW_int8weight_partialCH_8innercol((float*)&buffer0[16640],8,8,192,(q7_t*)v10_conv_0_weight,(q7_t*)v10_conv_0_weightFlash,24,NULL,(float*)&buffer0[65792],8,8,48,-FLT_MAX,FLT_MAX,(float*)sbuf, 1);
 8014ac6:	4d65      	ldr	r5, [pc, #404]	@ (8014c5c <invoke+0x2694>)
 8014ac8:	2301      	movs	r3, #1
 8014aca:	9309      	str	r3, [sp, #36]	@ 0x24
 8014acc:	4b64      	ldr	r3, [pc, #400]	@ (8014c60 <invoke+0x2698>)
 8014ace:	9308      	str	r3, [sp, #32]
 8014ad0:	2330      	movs	r3, #48	@ 0x30
 8014ad2:	9307      	str	r3, [sp, #28]
 8014ad4:	2108      	movs	r1, #8
 8014ad6:	9106      	str	r1, [sp, #24]
 8014ad8:	9105      	str	r1, [sp, #20]
 8014ada:	f505 4640 	add.w	r6, r5, #49152	@ 0xc000
 8014ade:	9604      	str	r6, [sp, #16]
 8014ae0:	2400      	movs	r4, #0
 8014ae2:	9403      	str	r4, [sp, #12]
 8014ae4:	2318      	movs	r3, #24
 8014ae6:	9302      	str	r3, [sp, #8]
 8014ae8:	4b65      	ldr	r3, [pc, #404]	@ (8014c80 <invoke+0x26b8>)
 8014aea:	681b      	ldr	r3, [r3, #0]
 8014aec:	9301      	str	r3, [sp, #4]
 8014aee:	4b65      	ldr	r3, [pc, #404]	@ (8014c84 <invoke+0x26bc>)
 8014af0:	681b      	ldr	r3, [r3, #0]
 8014af2:	9300      	str	r3, [sp, #0]
 8014af4:	eddf 0a5c 	vldr	s1, [pc, #368]	@ 8014c68 <invoke+0x26a0>
 8014af8:	ed9f 0a5c 	vldr	s0, [pc, #368]	@ 8014c6c <invoke+0x26a4>
 8014afc:	23c0      	movs	r3, #192	@ 0xc0
 8014afe:	460a      	mov	r2, r1
 8014b00:	4628      	mov	r0, r5
 8014b02:	f006 f8b9 	bl	801ac78 <pointwise_conv_fp_4row4col_IOHW_int8weight_partialCH_8innercol>
/* layer 159:WHERE */
where_zeros_inplace_bit((bool*)&buffer0[10496],3072,(float*)&buffer0[65792]);
 8014b06:	4632      	mov	r2, r6
 8014b08:	f44f 6140 	mov.w	r1, #3072	@ 0xc00
 8014b0c:	f5a5 50c0 	sub.w	r0, r5, #6144	@ 0x1800
 8014b10:	f009 fc6c 	bl	801e3ec <where_zeros_inplace_bit>
/* layer 160:DIV */
fptr3 = (float*)&buffer0[78080]; fptr2 = (float*)&buffer0[65792];
 8014b14:	f505 4570 	add.w	r5, r5, #61440	@ 0xf000
 8014b18:	4b5b      	ldr	r3, [pc, #364]	@ (8014c88 <invoke+0x26c0>)
 8014b1a:	601d      	str	r5, [r3, #0]
 8014b1c:	4b54      	ldr	r3, [pc, #336]	@ (8014c70 <invoke+0x26a8>)
 8014b1e:	601e      	str	r6, [r3, #0]
for(int i = 0; i < 3072; i++) *fptr3++ = *fptr2++ / 0.03910466656088829;
 8014b20:	4623      	mov	r3, r4
 8014b22:	e010      	b.n	8014b46 <invoke+0x257e>
 8014b24:	4952      	ldr	r1, [pc, #328]	@ (8014c70 <invoke+0x26a8>)
 8014b26:	680a      	ldr	r2, [r1, #0]
 8014b28:	1d10      	adds	r0, r2, #4
 8014b2a:	6008      	str	r0, [r1, #0]
 8014b2c:	edd2 6a00 	vldr	s13, [r2]
 8014b30:	4955      	ldr	r1, [pc, #340]	@ (8014c88 <invoke+0x26c0>)
 8014b32:	680a      	ldr	r2, [r1, #0]
 8014b34:	1d10      	adds	r0, r2, #4
 8014b36:	6008      	str	r0, [r1, #0]
 8014b38:	ed9f 7a54 	vldr	s14, [pc, #336]	@ 8014c8c <invoke+0x26c4>
 8014b3c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8014b40:	edc2 7a00 	vstr	s15, [r2]
 8014b44:	3301      	adds	r3, #1
 8014b46:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8014b4a:	dbeb      	blt.n	8014b24 <invoke+0x255c>
/* layer 161:MUL */
fptr = (float*)&buffer0[78080];fptr3 = (float*)&buffer0[65792];for(int i = 0; i < 3072; i++) fptr3[i] = 0.027072276920080185 * fptr[i];
 8014b4c:	4b50      	ldr	r3, [pc, #320]	@ (8014c90 <invoke+0x26c8>)
 8014b4e:	4a41      	ldr	r2, [pc, #260]	@ (8014c54 <invoke+0x268c>)
 8014b50:	6013      	str	r3, [r2, #0]
 8014b52:	f5a3 5340 	sub.w	r3, r3, #12288	@ 0x3000
 8014b56:	4a4c      	ldr	r2, [pc, #304]	@ (8014c88 <invoke+0x26c0>)
 8014b58:	6013      	str	r3, [r2, #0]
 8014b5a:	2300      	movs	r3, #0
 8014b5c:	e010      	b.n	8014b80 <invoke+0x25b8>
 8014b5e:	4a3d      	ldr	r2, [pc, #244]	@ (8014c54 <invoke+0x268c>)
 8014b60:	6812      	ldr	r2, [r2, #0]
 8014b62:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8014b66:	edd2 7a00 	vldr	s15, [r2]
 8014b6a:	4a47      	ldr	r2, [pc, #284]	@ (8014c88 <invoke+0x26c0>)
 8014b6c:	6812      	ldr	r2, [r2, #0]
 8014b6e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8014b72:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 8014c94 <invoke+0x26cc>
 8014b76:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014b7a:	edc2 7a00 	vstr	s15, [r2]
 8014b7e:	3301      	adds	r3, #1
 8014b80:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8014b84:	dbeb      	blt.n	8014b5e <invoke+0x2596>
/* layer 162:WHERE */
where_zeros_inplace_bit((bool*)&buffer0[10112],3072,(float*)&buffer0[65792]);
 8014b86:	4c44      	ldr	r4, [pc, #272]	@ (8014c98 <invoke+0x26d0>)
 8014b88:	4622      	mov	r2, r4
 8014b8a:	f44f 6140 	mov.w	r1, #3072	@ 0xc00
 8014b8e:	4843      	ldr	r0, [pc, #268]	@ (8014c9c <invoke+0x26d4>)
 8014b90:	f009 fc2c 	bl	801e3ec <where_zeros_inplace_bit>
/* layer 163:MUL */
fptr = &buffer0[65792];
 8014b94:	4b2f      	ldr	r3, [pc, #188]	@ (8014c54 <invoke+0x268c>)
 8014b96:	601c      	str	r4, [r3, #0]
fptr2 = scales26;
 8014b98:	4b35      	ldr	r3, [pc, #212]	@ (8014c70 <invoke+0x26a8>)
 8014b9a:	4a41      	ldr	r2, [pc, #260]	@ (8014ca0 <invoke+0x26d8>)
 8014b9c:	601a      	str	r2, [r3, #0]
for(int hw = 0; hw < 64; hw++){
 8014b9e:	2500      	movs	r5, #0
 8014ba0:	e013      	b.n	8014bca <invoke+0x2602>
for(int i = 0; i < 48; i++){float f = *fptr; *fptr++ = fptr2[i] * f;};
 8014ba2:	4c2c      	ldr	r4, [pc, #176]	@ (8014c54 <invoke+0x268c>)
 8014ba4:	6820      	ldr	r0, [r4, #0]
 8014ba6:	4602      	mov	r2, r0
 8014ba8:	ecb2 7a01 	vldmia	r2!, {s14}
 8014bac:	4930      	ldr	r1, [pc, #192]	@ (8014c70 <invoke+0x26a8>)
 8014bae:	6809      	ldr	r1, [r1, #0]
 8014bb0:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8014bb4:	edd1 7a00 	vldr	s15, [r1]
 8014bb8:	6022      	str	r2, [r4, #0]
 8014bba:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014bbe:	edc0 7a00 	vstr	s15, [r0]
 8014bc2:	3301      	adds	r3, #1
 8014bc4:	2b2f      	cmp	r3, #47	@ 0x2f
 8014bc6:	ddec      	ble.n	8014ba2 <invoke+0x25da>
for(int hw = 0; hw < 64; hw++){
 8014bc8:	3501      	adds	r5, #1
 8014bca:	2d3f      	cmp	r5, #63	@ 0x3f
 8014bcc:	dc01      	bgt.n	8014bd2 <invoke+0x260a>
for(int i = 0; i < 48; i++){float f = *fptr; *fptr++ = fptr2[i] * f;};
 8014bce:	2300      	movs	r3, #0
 8014bd0:	e7f8      	b.n	8014bc4 <invoke+0x25fc>
}
/* layer 164:SUM */
sum_4D_exclude((float*)&buffer0[65792],1,8,8,48,3,(float*)&buffer0[10112]);
 8014bd2:	4c32      	ldr	r4, [pc, #200]	@ (8014c9c <invoke+0x26d4>)
 8014bd4:	9402      	str	r4, [sp, #8]
 8014bd6:	2303      	movs	r3, #3
 8014bd8:	9301      	str	r3, [sp, #4]
 8014bda:	2330      	movs	r3, #48	@ 0x30
 8014bdc:	9300      	str	r3, [sp, #0]
 8014bde:	2308      	movs	r3, #8
 8014be0:	461a      	mov	r2, r3
 8014be2:	2101      	movs	r1, #1
 8014be4:	482c      	ldr	r0, [pc, #176]	@ (8014c98 <invoke+0x26d0>)
 8014be6:	f007 fc39 	bl	801c45c <sum_4D_exclude>
/* layer 165:BIAS_UPDATE */
const float v9_conv_2_bias_QAS[48] = {467422080.0,906110300.0,82031630.0,386175900.0,249515620.0,371799900.0,425080700.0,675390660.0,224327490.0,402949300.0,109860504.0,97970264.0,85090110.0,262435360.0,86668800.0,151615570.0,437346000.0,219043950.0,263517820.0,68615010.0,533205400.0,122905176.0,102954950.0,404755840.0,390545180.0,400670660.0,408666100.0,411500480.0,175263620.0,26112552.0,305699200.0,187931660.0,501943400.0,65524750.0,89183896.0,138039250.0,543368060.0,315859260.0,501618660.0,135876560.0,551759040.0,556720200.0,591731840.0,105087570.0,467634000.0,163005580.0,555435100.0,121024410.0,};
 8014bea:	22c0      	movs	r2, #192	@ 0xc0
 8014bec:	492d      	ldr	r1, [pc, #180]	@ (8014ca4 <invoke+0x26dc>)
 8014bee:	f60d 5074 	addw	r0, sp, #3444	@ 0xd74
 8014bf2:	f00f f913 	bl	8023e1c <memcpy>
fptr = (float*)&buffer0[10112];//gradients
 8014bf6:	4b17      	ldr	r3, [pc, #92]	@ (8014c54 <invoke+0x268c>)
 8014bf8:	601c      	str	r4, [r3, #0]
for(int i = 0; i < 48; i++) v9_conv_2_bias[i] -= (int32_t)(fptr[i] * blr * v9_conv_2_bias_QAS[i]);
 8014bfa:	2300      	movs	r3, #0
 8014bfc:	e01d      	b.n	8014c3a <invoke+0x2672>
 8014bfe:	4a2a      	ldr	r2, [pc, #168]	@ (8014ca8 <invoke+0x26e0>)
 8014c00:	6810      	ldr	r0, [r2, #0]
 8014c02:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 8014c06:	4913      	ldr	r1, [pc, #76]	@ (8014c54 <invoke+0x268c>)
 8014c08:	6809      	ldr	r1, [r1, #0]
 8014c0a:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8014c0e:	edd1 7a00 	vldr	s15, [r1]
 8014c12:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8014c58 <invoke+0x2690>
 8014c16:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014c1a:	f60d 5174 	addw	r1, sp, #3444	@ 0xd74
 8014c1e:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8014c22:	ed91 7a00 	vldr	s14, [r1]
 8014c26:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014c2a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014c2e:	ee17 1a90 	vmov	r1, s15
 8014c32:	1a52      	subs	r2, r2, r1
 8014c34:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 8014c38:	3301      	adds	r3, #1
 8014c3a:	2b2f      	cmp	r3, #47	@ 0x2f
 8014c3c:	dddf      	ble.n	8014bfe <invoke+0x2636>
/* layer 166:CAST */
fptr = (float*)&buffer0[78080];
 8014c3e:	4b05      	ldr	r3, [pc, #20]	@ (8014c54 <invoke+0x268c>)
 8014c40:	4a13      	ldr	r2, [pc, #76]	@ (8014c90 <invoke+0x26c8>)
 8014c42:	601a      	str	r2, [r3, #0]
int8ptr = (int8_t*)&buffer0[7040];
 8014c44:	4b19      	ldr	r3, [pc, #100]	@ (8014cac <invoke+0x26e4>)
 8014c46:	4a1a      	ldr	r2, [pc, #104]	@ (8014cb0 <invoke+0x26e8>)
 8014c48:	601a      	str	r2, [r3, #0]
for(int i = 0; i < 3072; i++) fptr[i] = (float)int8ptr[i];
 8014c4a:	2300      	movs	r3, #0
 8014c4c:	e040      	b.n	8014cd0 <invoke+0x2708>
 8014c4e:	bf00      	nop
 8014c50:	20005ca4 	.word	0x20005ca4
 8014c54:	2000cca0 	.word	0x2000cca0
 8014c58:	39d1b717 	.word	0x39d1b717
 8014c5c:	20012850 	.word	0x20012850
 8014c60:	2003a750 	.word	0x2003a750
 8014c64:	20005fa8 	.word	0x20005fa8
 8014c68:	7f7fffff 	.word	0x7f7fffff
 8014c6c:	ff7fffff 	.word	0xff7fffff
 8014c70:	2000cc9c 	.word	0x2000cc9c
 8014c74:	08095484 	.word	0x08095484
 8014c78:	0802bb38 	.word	0x0802bb38
 8014c7c:	20005fac 	.word	0x20005fac
 8014c80:	200062b0 	.word	0x200062b0
 8014c84:	200062b4 	.word	0x200062b4
 8014c88:	2000cc98 	.word	0x2000cc98
 8014c8c:	3d202c37 	.word	0x3d202c37
 8014c90:	20021850 	.word	0x20021850
 8014c94:	3cddc6ae 	.word	0x3cddc6ae
 8014c98:	2001e850 	.word	0x2001e850
 8014c9c:	20010ed0 	.word	0x20010ed0
 8014ca0:	08096984 	.word	0x08096984
 8014ca4:	0802be38 	.word	0x0802be38
 8014ca8:	200074b8 	.word	0x200074b8
 8014cac:	2000cca4 	.word	0x2000cca4
 8014cb0:	200102d0 	.word	0x200102d0
 8014cb4:	4a98      	ldr	r2, [pc, #608]	@ (8014f18 <invoke+0x2950>)
 8014cb6:	6812      	ldr	r2, [r2, #0]
 8014cb8:	56d2      	ldrsb	r2, [r2, r3]
 8014cba:	ee07 2a90 	vmov	s15, r2
 8014cbe:	4a97      	ldr	r2, [pc, #604]	@ (8014f1c <invoke+0x2954>)
 8014cc0:	6812      	ldr	r2, [r2, #0]
 8014cc2:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8014cc6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014cca:	edc2 7a00 	vstr	s15, [r2]
 8014cce:	3301      	adds	r3, #1
 8014cd0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8014cd4:	dbee      	blt.n	8014cb4 <invoke+0x26ec>
/* layer 167:STRIDED_SLICE */
const uint16_t begin1[] = {0, 0, 0, 0};
 8014cd6:	f60d 536c 	addw	r3, sp, #3436	@ 0xd6c
 8014cda:	2500      	movs	r5, #0
 8014cdc:	601d      	str	r5, [r3, #0]
 8014cde:	605d      	str	r5, [r3, #4]
const uint16_t end1[] = {1, 24, 8, 8};
 8014ce0:	f60d 5364 	addw	r3, sp, #3428	@ 0xd64
 8014ce4:	4a8e      	ldr	r2, [pc, #568]	@ (8014f20 <invoke+0x2958>)
 8014ce6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014cea:	e883 0003 	stmia.w	r3, {r0, r1}
const uint16_t strides1[] = {1};
 8014cee:	f50d 6356 	add.w	r3, sp, #3424	@ 0xd60
 8014cf2:	2601      	movs	r6, #1
 8014cf4:	801e      	strh	r6, [r3, #0]
strided_slice_4Dto4D((float*)&buffer0[78080],1,48,8,8,begin1,end1,strides1,(float*)&buffer0[7040],1,24,8,8);
 8014cf6:	f8df 8270 	ldr.w	r8, [pc, #624]	@ 8014f68 <invoke+0x29a0>
 8014cfa:	2408      	movs	r4, #8
 8014cfc:	9408      	str	r4, [sp, #32]
 8014cfe:	9407      	str	r4, [sp, #28]
 8014d00:	f04f 0918 	mov.w	r9, #24
 8014d04:	f8cd 9018 	str.w	r9, [sp, #24]
 8014d08:	9605      	str	r6, [sp, #20]
 8014d0a:	4f86      	ldr	r7, [pc, #536]	@ (8014f24 <invoke+0x295c>)
 8014d0c:	9704      	str	r7, [sp, #16]
 8014d0e:	9303      	str	r3, [sp, #12]
 8014d10:	f60d 5364 	addw	r3, sp, #3428	@ 0xd64
 8014d14:	9302      	str	r3, [sp, #8]
 8014d16:	f60d 536c 	addw	r3, sp, #3436	@ 0xd6c
 8014d1a:	9301      	str	r3, [sp, #4]
 8014d1c:	9400      	str	r4, [sp, #0]
 8014d1e:	4623      	mov	r3, r4
 8014d20:	2230      	movs	r2, #48	@ 0x30
 8014d22:	4631      	mov	r1, r6
 8014d24:	4640      	mov	r0, r8
 8014d26:	f007 fab9 	bl	801c29c <strided_slice_4Dto4D>
/* layer 168:GROUP_CONV */
const float v10_conv_0_weight_QAS[192] = {2255875.2,1576125.8,1249328.0,784129.2,3589775.5,1010534.2,812415.56,1759152.5,1671550.0,1423138.5,1796236.4,2399276.0,939843.6,365278.12,1050819.8,2218675.0,1782695.5,965954.6,506338.25,3148864.5,881498.6,2728021.8,1652914.4,1734441.2,1530433.0,1079930.4,3116655.0,1342305.5,643188.44,825810.94,1974624.0,1635282.0,4944067.5,2181531.2,2651618.2,1213565.1,2608735.5,1254611.9,2244787.0,2390988.5,2506902.8,1846548.9,807178.56,1679482.1,1823884.4,653074.1,1570359.5,6.4516005e+16,4255552.0,579782.44,1143537.6,3095926.0,1120132.0,4947732.0,2471357.5,989734.5,767196.4,2271302.8,142946.16,1308278.5,1012749.75,1054646.4,2871916.5,599145.7,1729635.5,2128362.8,1715095.8,2226899.2,1605471.9,1374579.6,990844.4,1594900.4,6.4516005e+16,1765388.9,1444384.5,2873683.2,2333425.8,2094367.8,1106464.2,1577309.0,2788605.0,511687.84,778104.7,1.5387559e+16,4932572.5,2566397.5,1752563.8,1707121.8,1564983.6,368185.4,1301613.4,1175439.1,3314407.0,487880.0,1910382.6,1757798.1,1164786.2,1091127.1,612205.44,3597104.8,2437700.2,7079667.5,1602297.1,2853885.2,1935234.8,1183116.1,6.4516005e+16,4178559.2,2974450.2,1.452232e+16,1692765.0,261579.1,1453290.1,1967562.6,1111920.5,2545388.2,2491619.0,1865254.4,756142.56,1306604.8,1422331.1,1500773.5,1513657.1,1766937.9,693752.75,995652.94,1029905.8,2274603.5,1532975.5,1816376.9,2500903.2,1808271.2,1306244.5,1481363.0,1038874.8,5189336.0,2314062.5,3776212.8,1503606.1,280099.8,977118.8,2488342.5,229152.12,6.4516005e+16,1194013.0,2413708.5,1537662.2,593255.94,1251113.6,942498.44,1048258.9,793741.5,1044280.3,2267192.2,2219379.0,1363619.0,722854.56,1672889.1,2705073.0,2069666.2,3125348.5,1733029.6,1382282.2,2050182.1,119261.28,709865.0,3577803.2,1600062.8,1270708.8,1257092.1,1329094.2,1104968.5,1011018.8,973570.3,2012316.8,2796335.8,864368.0,960657.8,1930548.4,6.4516005e+16,1519567.2,3555780.0,2855647.8,238330.36,2059863.2,7054513.5,2445563.0,1159683.0,1694428.2,2287183.5,1026383.1,578029.75,};
 8014d2a:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8014d2e:	497e      	ldr	r1, [pc, #504]	@ (8014f28 <invoke+0x2960>)
 8014d30:	f50d 6026 	add.w	r0, sp, #2656	@ 0xa60
 8014d34:	f00f f872 	bl	8023e1c <memcpy>
group_conv_fp_kernel8_stride1_pad0_in8x8_out1x1_uniweight_4row16col_inplace((float*)&buffer0[7040],8,8,24,weight_fp61,NULL,v10_conv_0_weight,1,1,4608,-FLT_MAX,FLT_MAX,(float*)sbuf,1,24, v10_conv_0_weight_QAS, lr);
 8014d38:	eddf 8a7c 	vldr	s17, [pc, #496]	@ 8014f2c <invoke+0x2964>
 8014d3c:	ed9f 8a7c 	vldr	s16, [pc, #496]	@ 8014f30 <invoke+0x2968>
 8014d40:	f50d 6326 	add.w	r3, sp, #2656	@ 0xa60
 8014d44:	9309      	str	r3, [sp, #36]	@ 0x24
 8014d46:	f8cd 9020 	str.w	r9, [sp, #32]
 8014d4a:	9607      	str	r6, [sp, #28]
 8014d4c:	f8df a208 	ldr.w	sl, [pc, #520]	@ 8014f58 <invoke+0x2990>
 8014d50:	f8cd a018 	str.w	sl, [sp, #24]
 8014d54:	f44f 5390 	mov.w	r3, #4608	@ 0x1200
 8014d58:	9305      	str	r3, [sp, #20]
 8014d5a:	9604      	str	r6, [sp, #16]
 8014d5c:	9603      	str	r6, [sp, #12]
 8014d5e:	4b75      	ldr	r3, [pc, #468]	@ (8014f34 <invoke+0x296c>)
 8014d60:	681b      	ldr	r3, [r3, #0]
 8014d62:	9302      	str	r3, [sp, #8]
 8014d64:	9501      	str	r5, [sp, #4]
 8014d66:	4b74      	ldr	r3, [pc, #464]	@ (8014f38 <invoke+0x2970>)
 8014d68:	681b      	ldr	r3, [r3, #0]
 8014d6a:	9300      	str	r3, [sp, #0]
 8014d6c:	ed9f 1a73 	vldr	s2, [pc, #460]	@ 8014f3c <invoke+0x2974>
 8014d70:	eef0 0a68 	vmov.f32	s1, s17
 8014d74:	eeb0 0a48 	vmov.f32	s0, s16
 8014d78:	464b      	mov	r3, r9
 8014d7a:	4622      	mov	r2, r4
 8014d7c:	4621      	mov	r1, r4
 8014d7e:	4638      	mov	r0, r7
 8014d80:	f003 fbc6 	bl	8018510 <group_conv_fp_kernel8_stride1_pad0_in8x8_out1x1_uniweight_4row16col_inplace>
/* layer 169:TRANSPOSE_CONV_2D */
pointwise_conv_fp_4row4col_IOHW_int8weight((float*)&buffer0[65792],8,8,48,(q7_t*)v9_conv_2_weight,NULL,(float*)&buffer0[7040],8,8,144,-FLT_MAX,FLT_MAX,(float*)sbuf, 1);
 8014d84:	9607      	str	r6, [sp, #28]
 8014d86:	f8cd a018 	str.w	sl, [sp, #24]
 8014d8a:	2390      	movs	r3, #144	@ 0x90
 8014d8c:	9305      	str	r3, [sp, #20]
 8014d8e:	9404      	str	r4, [sp, #16]
 8014d90:	9403      	str	r4, [sp, #12]
 8014d92:	9702      	str	r7, [sp, #8]
 8014d94:	9501      	str	r5, [sp, #4]
 8014d96:	4b6a      	ldr	r3, [pc, #424]	@ (8014f40 <invoke+0x2978>)
 8014d98:	681b      	ldr	r3, [r3, #0]
 8014d9a:	9300      	str	r3, [sp, #0]
 8014d9c:	eef0 0a68 	vmov.f32	s1, s17
 8014da0:	eeb0 0a48 	vmov.f32	s0, s16
 8014da4:	2330      	movs	r3, #48	@ 0x30
 8014da6:	4622      	mov	r2, r4
 8014da8:	4621      	mov	r1, r4
 8014daa:	f5a8 5040 	sub.w	r0, r8, #12288	@ 0x3000
 8014dae:	f005 fbbd 	bl	801a52c <pointwise_conv_fp_4row4col_IOHW_int8weight>
/* layer 170:WHERE */
where_zeros_inplace_bit((bool*)&buffer0[5888],9216,(float*)&buffer0[7040]);
 8014db2:	463a      	mov	r2, r7
 8014db4:	f44f 5110 	mov.w	r1, #9216	@ 0x2400
 8014db8:	f5a8 308d 	sub.w	r0, r8, #72192	@ 0x11a00
 8014dbc:	f009 fb16 	bl	801e3ec <where_zeros_inplace_bit>
/* layer 171:MUL */
fptr = &buffer0[7040];
 8014dc0:	4b56      	ldr	r3, [pc, #344]	@ (8014f1c <invoke+0x2954>)
 8014dc2:	601f      	str	r7, [r3, #0]
fptr2 = scales25;
 8014dc4:	4b5f      	ldr	r3, [pc, #380]	@ (8014f44 <invoke+0x297c>)
 8014dc6:	4a60      	ldr	r2, [pc, #384]	@ (8014f48 <invoke+0x2980>)
 8014dc8:	601a      	str	r2, [r3, #0]
for(int hw = 0; hw < 64; hw++){
 8014dca:	e013      	b.n	8014df4 <invoke+0x282c>
for(int i = 0; i < 144; i++){float f = *fptr; *fptr++ = fptr2[i] * f;};
 8014dcc:	4c53      	ldr	r4, [pc, #332]	@ (8014f1c <invoke+0x2954>)
 8014dce:	6820      	ldr	r0, [r4, #0]
 8014dd0:	4602      	mov	r2, r0
 8014dd2:	ecb2 7a01 	vldmia	r2!, {s14}
 8014dd6:	495b      	ldr	r1, [pc, #364]	@ (8014f44 <invoke+0x297c>)
 8014dd8:	6809      	ldr	r1, [r1, #0]
 8014dda:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8014dde:	edd1 7a00 	vldr	s15, [r1]
 8014de2:	6022      	str	r2, [r4, #0]
 8014de4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014de8:	edc0 7a00 	vstr	s15, [r0]
 8014dec:	3301      	adds	r3, #1
 8014dee:	2b8f      	cmp	r3, #143	@ 0x8f
 8014df0:	ddec      	ble.n	8014dcc <invoke+0x2804>
for(int hw = 0; hw < 64; hw++){
 8014df2:	3501      	adds	r5, #1
 8014df4:	2d3f      	cmp	r5, #63	@ 0x3f
 8014df6:	dc01      	bgt.n	8014dfc <invoke+0x2834>
for(int i = 0; i < 144; i++){float f = *fptr; *fptr++ = fptr2[i] * f;};
 8014df8:	2300      	movs	r3, #0
 8014dfa:	e7f8      	b.n	8014dee <invoke+0x2826>
}
/* layer 172:SUM */
sum_4D_exclude((float*)&buffer0[7040],1,8,8,144,3,(float*)&buffer0[5888]);
 8014dfc:	4849      	ldr	r0, [pc, #292]	@ (8014f24 <invoke+0x295c>)
 8014dfe:	f5a0 6490 	sub.w	r4, r0, #1152	@ 0x480
 8014e02:	9402      	str	r4, [sp, #8]
 8014e04:	2303      	movs	r3, #3
 8014e06:	9301      	str	r3, [sp, #4]
 8014e08:	2390      	movs	r3, #144	@ 0x90
 8014e0a:	9300      	str	r3, [sp, #0]
 8014e0c:	2308      	movs	r3, #8
 8014e0e:	461a      	mov	r2, r3
 8014e10:	2101      	movs	r1, #1
 8014e12:	f007 fb23 	bl	801c45c <sum_4D_exclude>
/* layer 173:BIAS_UPDATE */
const float v9_conv_1_bias_QAS[144] = {54733956.0,173848220.0,45967984.0,126531840.0,79768470.0,53002120.0,27056624.0,60511692.0,133232910.0,52591820.0,23713302.0,243218420.0,22146126.0,116369490.0,22752058.0,17828302.0,97626120.0,346548600.0,23582536.0,252146660.0,238443440.0,19840076.0,572430300.0,110761224.0,51954850.0,334852130.0,112444800.0,94147880.0,155927550.0,68164310.0,26532762.0,96081256.0,111518630.0,55589960.0,51408240.0,24390004.0,140507840.0,34851656.0,233304720.0,57837670.0,61995772.0,38087830.0,69655540.0,42229236.0,44804470.0,340878080.0,308601570.0,32050590.0,92793220.0,9848095.0,283077800.0,15825534.0,258542540.0,66199556.0,5.5373517e+20,32202730.0,70831980.0,113073910.0,23426098.0,1714624.6,166929950.0,112203640.0,66385076.0,239498160.0,20507924.0,16852454.0,352472740.0,209239580.0,31675186.0,16464575.0,25834670.0,72434936.0,33462174.0,229740400.0,38104464.0,270421630.0,46964056.0,25496292.0,232958240.0,203855060.0,19192378.0,1206516900.0,67821540.0,226746670.0,38211356.0,14218684.0,38653424.0,148065630.0,101594664.0,47311370.0,14660140.0,61906380.0,20851062.0,969217200.0,185440430.0,12016323.0,261744140.0,31165548.0,453362530.0,252500340.0,11567396.0,41422756.0,40687388.0,35611936.0,16170318.0,41552930.0,123760720.0,157315200.0,52242944.0,86846910.0,22653770.0,202114220.0,301359940.0,168026030.0,60349610.0,238831660.0,16336067.0,45832524.0,199273950.0,264016270.0,24149638.0,186845980.0,196863360.0,63264904.0,83816350.0,195107700.0,195357070.0,23637384.0,38084650.0,42718620.0,13965792.0,11136773.0,70307080.0,81381490.0,31760066.0,36261950.0,89230140.0,23538300.0,465251100.0,23585384.0,151535980.0,100698000.0,153223950.0,22549854.0,};
 8014e16:	f44f 7210 	mov.w	r2, #576	@ 0x240
 8014e1a:	494c      	ldr	r1, [pc, #304]	@ (8014f4c <invoke+0x2984>)
 8014e1c:	f50d 6002 	add.w	r0, sp, #2080	@ 0x820
 8014e20:	f00e fffc 	bl	8023e1c <memcpy>
fptr = (float*)&buffer0[5888];//gradients
 8014e24:	4b3d      	ldr	r3, [pc, #244]	@ (8014f1c <invoke+0x2954>)
 8014e26:	601c      	str	r4, [r3, #0]
for(int i = 0; i < 144; i++) v9_conv_1_bias[i] -= (int32_t)(fptr[i] * blr * v9_conv_1_bias_QAS[i]);
 8014e28:	2300      	movs	r3, #0
 8014e2a:	e01d      	b.n	8014e68 <invoke+0x28a0>
 8014e2c:	4a48      	ldr	r2, [pc, #288]	@ (8014f50 <invoke+0x2988>)
 8014e2e:	6810      	ldr	r0, [r2, #0]
 8014e30:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 8014e34:	4939      	ldr	r1, [pc, #228]	@ (8014f1c <invoke+0x2954>)
 8014e36:	6809      	ldr	r1, [r1, #0]
 8014e38:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8014e3c:	edd1 7a00 	vldr	s15, [r1]
 8014e40:	ed9f 7a44 	vldr	s14, [pc, #272]	@ 8014f54 <invoke+0x298c>
 8014e44:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014e48:	f50d 6102 	add.w	r1, sp, #2080	@ 0x820
 8014e4c:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8014e50:	ed91 7a00 	vldr	s14, [r1]
 8014e54:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014e58:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014e5c:	ee17 1a90 	vmov	r1, s15
 8014e60:	1a52      	subs	r2, r2, r1
 8014e62:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 8014e66:	3301      	adds	r3, #1
 8014e68:	2b8f      	cmp	r3, #143	@ 0x8f
 8014e6a:	dddf      	ble.n	8014e2c <invoke+0x2864>
/* layer 174:TRANSPOSE_CONV_2D */
transpose_depthwise_conv_fp_kernel3_stride1_inpad1_outpad0_IOHW_int8weight((float*)&buffer0[7040],8,8,144,v9_conv_1_weight,NULL,(float*)&buffer0[7040],8,8,144,-FLT_MAX,FLT_MAX,(float*)sbuf,1,0);
 8014e6c:	4c2d      	ldr	r4, [pc, #180]	@ (8014f24 <invoke+0x295c>)
 8014e6e:	2500      	movs	r5, #0
 8014e70:	9508      	str	r5, [sp, #32]
 8014e72:	2301      	movs	r3, #1
 8014e74:	9307      	str	r3, [sp, #28]
 8014e76:	4b38      	ldr	r3, [pc, #224]	@ (8014f58 <invoke+0x2990>)
 8014e78:	9306      	str	r3, [sp, #24]
 8014e7a:	2390      	movs	r3, #144	@ 0x90
 8014e7c:	9305      	str	r3, [sp, #20]
 8014e7e:	2108      	movs	r1, #8
 8014e80:	9104      	str	r1, [sp, #16]
 8014e82:	9103      	str	r1, [sp, #12]
 8014e84:	9402      	str	r4, [sp, #8]
 8014e86:	9501      	str	r5, [sp, #4]
 8014e88:	4a34      	ldr	r2, [pc, #208]	@ (8014f5c <invoke+0x2994>)
 8014e8a:	6812      	ldr	r2, [r2, #0]
 8014e8c:	9200      	str	r2, [sp, #0]
 8014e8e:	eddf 0a27 	vldr	s1, [pc, #156]	@ 8014f2c <invoke+0x2964>
 8014e92:	ed9f 0a27 	vldr	s0, [pc, #156]	@ 8014f30 <invoke+0x2968>
 8014e96:	460a      	mov	r2, r1
 8014e98:	4620      	mov	r0, r4
 8014e9a:	f007 fcf4 	bl	801c886 <transpose_depthwise_conv_fp_kernel3_stride1_inpad1_outpad0_IOHW_int8weight>
/* layer 175:WHERE */
where_zeros_inplace_bit((bool*)&buffer0[4736],9216,(float*)&buffer0[7040]);
 8014e9e:	4622      	mov	r2, r4
 8014ea0:	f44f 5110 	mov.w	r1, #9216	@ 0x2400
 8014ea4:	f5a4 6010 	sub.w	r0, r4, #2304	@ 0x900
 8014ea8:	f009 faa0 	bl	801e3ec <where_zeros_inplace_bit>
/* layer 176:MUL */
fptr = &buffer0[7040];
 8014eac:	4b1b      	ldr	r3, [pc, #108]	@ (8014f1c <invoke+0x2954>)
 8014eae:	601c      	str	r4, [r3, #0]
fptr2 = scales24;
 8014eb0:	4b24      	ldr	r3, [pc, #144]	@ (8014f44 <invoke+0x297c>)
 8014eb2:	4a2b      	ldr	r2, [pc, #172]	@ (8014f60 <invoke+0x2998>)
 8014eb4:	601a      	str	r2, [r3, #0]
for(int hw = 0; hw < 64; hw++){
 8014eb6:	e013      	b.n	8014ee0 <invoke+0x2918>
for(int i = 0; i < 144; i++){float f = *fptr; *fptr++ = fptr2[i] * f;};
 8014eb8:	4c18      	ldr	r4, [pc, #96]	@ (8014f1c <invoke+0x2954>)
 8014eba:	6820      	ldr	r0, [r4, #0]
 8014ebc:	4602      	mov	r2, r0
 8014ebe:	ecb2 7a01 	vldmia	r2!, {s14}
 8014ec2:	4920      	ldr	r1, [pc, #128]	@ (8014f44 <invoke+0x297c>)
 8014ec4:	6809      	ldr	r1, [r1, #0]
 8014ec6:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8014eca:	edd1 7a00 	vldr	s15, [r1]
 8014ece:	6022      	str	r2, [r4, #0]
 8014ed0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014ed4:	edc0 7a00 	vstr	s15, [r0]
 8014ed8:	3301      	adds	r3, #1
 8014eda:	2b8f      	cmp	r3, #143	@ 0x8f
 8014edc:	ddec      	ble.n	8014eb8 <invoke+0x28f0>
for(int hw = 0; hw < 64; hw++){
 8014ede:	3501      	adds	r5, #1
 8014ee0:	2d3f      	cmp	r5, #63	@ 0x3f
 8014ee2:	dc01      	bgt.n	8014ee8 <invoke+0x2920>
for(int i = 0; i < 144; i++){float f = *fptr; *fptr++ = fptr2[i] * f;};
 8014ee4:	2300      	movs	r3, #0
 8014ee6:	e7f8      	b.n	8014eda <invoke+0x2912>
}
/* layer 177:SUM */
sum_4D_exclude((float*)&buffer0[7040],1,8,8,144,3,(float*)&buffer0[4736]);
 8014ee8:	480e      	ldr	r0, [pc, #56]	@ (8014f24 <invoke+0x295c>)
 8014eea:	f5a0 6410 	sub.w	r4, r0, #2304	@ 0x900
 8014eee:	9402      	str	r4, [sp, #8]
 8014ef0:	2303      	movs	r3, #3
 8014ef2:	9301      	str	r3, [sp, #4]
 8014ef4:	2390      	movs	r3, #144	@ 0x90
 8014ef6:	9300      	str	r3, [sp, #0]
 8014ef8:	2308      	movs	r3, #8
 8014efa:	461a      	mov	r2, r3
 8014efc:	2101      	movs	r1, #1
 8014efe:	f007 faad 	bl	801c45c <sum_4D_exclude>
/* layer 178:BIAS_UPDATE */
const float v9_conv_0_bias_QAS[144] = {852220540.0,924375360.0,1224374300.0,644542700.0,936913900.0,642362500.0,752038500.0,2478320600.0,591012700.0,1420872800.0,1467748200.0,1267579900.0,1201380600.0,822313860.0,1657994100.0,1281687300.0,1004208300.0,888644300.0,1197253900.0,1327166500.0,610892300.0,2114835700.0,1555972900.0,1024112960.0,1028692350.0,482174300.0,401786430.0,587585000.0,237098750.0,1290291600.0,1407533800.0,904460200.0,719896640.0,1445117400.0,1099168600.0,764090000.0,999069200.0,969456100.0,1392124000.0,520202430.0,715481900.0,1880075600.0,1313654500.0,1183720200.0,590511600.0,317668100.0,498569600.0,622813100.0,783516600.0,558696200.0,804609500.0,1353362000.0,694475800.0,891263700.0,5.4547726e+19,1856706400.0,456388670.0,225544260.0,319649920.0,807483000.0,777442700.0,891791300.0,1552675800.0,753179100.0,353785500.0,595058600.0,387562560.0,941138750.0,1109761500.0,1540620300.0,818860800.0,237001300.0,770516200.0,1243588200.0,826524100.0,540467100.0,1037076860.0,1355780400.0,1282261000.0,1109464600.0,1227879800.0,218033940.0,1266410500.0,1232285000.0,481644830.0,385651840.0,413922100.0,961494850.0,674703170.0,1210070900.0,858774200.0,518209380.0,2374035700.0,858949300.0,814067100.0,2049135000.0,545253060.0,1780161900.0,1056487740.0,673625860.0,460882500.0,660758000.0,1113948700.0,1040494800.0,673070460.0,1957374200.0,1697148700.0,859047700.0,3588628200.0,2130695600.0,402939840.0,1072150200.0,1303001500.0,1274725800.0,709652540.0,1075671600.0,1084890900.0,934434240.0,1195866100.0,690687800.0,1962665600.0,1149564500.0,620770200.0,892396350.0,1285760800.0,927599940.0,902138600.0,379901900.0,740688500.0,1154740200.0,513176350.0,1065783600.0,1793318800.0,2540098300.0,3273737500.0,1108104100.0,827858500.0,2157512400.0,1211117400.0,971802500.0,996423900.0,990253250.0,765563140.0,373902200.0,};
 8014f02:	f44f 7210 	mov.w	r2, #576	@ 0x240
 8014f06:	4917      	ldr	r1, [pc, #92]	@ (8014f64 <invoke+0x299c>)
 8014f08:	f50d 60bc 	add.w	r0, sp, #1504	@ 0x5e0
 8014f0c:	f00e ff86 	bl	8023e1c <memcpy>
fptr = (float*)&buffer0[4736];//gradients
 8014f10:	4b02      	ldr	r3, [pc, #8]	@ (8014f1c <invoke+0x2954>)
 8014f12:	601c      	str	r4, [r3, #0]
for(int i = 0; i < 144; i++) v9_conv_0_bias[i] -= (int32_t)(fptr[i] * blr * v9_conv_0_bias_QAS[i]);
 8014f14:	2300      	movs	r3, #0
 8014f16:	e047      	b.n	8014fa8 <invoke+0x29e0>
 8014f18:	2000cca4 	.word	0x2000cca4
 8014f1c:	2000cca0 	.word	0x2000cca0
 8014f20:	0802b470 	.word	0x0802b470
 8014f24:	200102d0 	.word	0x200102d0
 8014f28:	0802bef8 	.word	0x0802bef8
 8014f2c:	7f7fffff 	.word	0x7f7fffff
 8014f30:	ff7fffff 	.word	0xff7fffff
 8014f34:	200062b4 	.word	0x200062b4
 8014f38:	20000024 	.word	0x20000024
 8014f3c:	3a51b717 	.word	0x3a51b717
 8014f40:	2000757c 	.word	0x2000757c
 8014f44:	2000cc9c 	.word	0x2000cc9c
 8014f48:	08098544 	.word	0x08098544
 8014f4c:	0802c1f8 	.word	0x0802c1f8
 8014f50:	20007580 	.word	0x20007580
 8014f54:	39d1b717 	.word	0x39d1b717
 8014f58:	2003a750 	.word	0x2003a750
 8014f5c:	200077c4 	.word	0x200077c4
 8014f60:	080991a4 	.word	0x080991a4
 8014f64:	0802c438 	.word	0x0802c438
 8014f68:	20021850 	.word	0x20021850
 8014f6c:	4aaf      	ldr	r2, [pc, #700]	@ (801522c <invoke+0x2c64>)
 8014f6e:	6810      	ldr	r0, [r2, #0]
 8014f70:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 8014f74:	49ae      	ldr	r1, [pc, #696]	@ (8015230 <invoke+0x2c68>)
 8014f76:	6809      	ldr	r1, [r1, #0]
 8014f78:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8014f7c:	edd1 7a00 	vldr	s15, [r1]
 8014f80:	ed9f 7aac 	vldr	s14, [pc, #688]	@ 8015234 <invoke+0x2c6c>
 8014f84:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014f88:	f50d 61bc 	add.w	r1, sp, #1504	@ 0x5e0
 8014f8c:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8014f90:	ed91 7a00 	vldr	s14, [r1]
 8014f94:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014f98:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014f9c:	ee17 1a90 	vmov	r1, s15
 8014fa0:	1a52      	subs	r2, r2, r1
 8014fa2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 8014fa6:	3301      	adds	r3, #1
 8014fa8:	2b8f      	cmp	r3, #143	@ 0x8f
 8014faa:	dddf      	ble.n	8014f6c <invoke+0x29a4>
/* layer 179:TRANSPOSE_CONV_2D */
pointwise_conv_fp_4row4col_IOHW_int8weight_partialCH_4innercol((float*)&buffer0[7040],8,8,144,(q7_t*)v9_conv_0_weight,(q7_t*)v9_conv_0_weightFlash,12,NULL,(float*)&buffer0[43904],8,8,48,-FLT_MAX,FLT_MAX,(float*)sbuf, 1);
 8014fac:	4ea2      	ldr	r6, [pc, #648]	@ (8015238 <invoke+0x2c70>)
 8014fae:	2301      	movs	r3, #1
 8014fb0:	9309      	str	r3, [sp, #36]	@ 0x24
 8014fb2:	4ba2      	ldr	r3, [pc, #648]	@ (801523c <invoke+0x2c74>)
 8014fb4:	9308      	str	r3, [sp, #32]
 8014fb6:	2330      	movs	r3, #48	@ 0x30
 8014fb8:	9307      	str	r3, [sp, #28]
 8014fba:	2108      	movs	r1, #8
 8014fbc:	9106      	str	r1, [sp, #24]
 8014fbe:	9105      	str	r1, [sp, #20]
 8014fc0:	f506 4410 	add.w	r4, r6, #36864	@ 0x9000
 8014fc4:	9404      	str	r4, [sp, #16]
 8014fc6:	2500      	movs	r5, #0
 8014fc8:	9503      	str	r5, [sp, #12]
 8014fca:	230c      	movs	r3, #12
 8014fcc:	9302      	str	r3, [sp, #8]
 8014fce:	4b9c      	ldr	r3, [pc, #624]	@ (8015240 <invoke+0x2c78>)
 8014fd0:	681b      	ldr	r3, [r3, #0]
 8014fd2:	9301      	str	r3, [sp, #4]
 8014fd4:	4b9b      	ldr	r3, [pc, #620]	@ (8015244 <invoke+0x2c7c>)
 8014fd6:	681b      	ldr	r3, [r3, #0]
 8014fd8:	9300      	str	r3, [sp, #0]
 8014fda:	eddf 0a9b 	vldr	s1, [pc, #620]	@ 8015248 <invoke+0x2c80>
 8014fde:	ed9f 0a9b 	vldr	s0, [pc, #620]	@ 801524c <invoke+0x2c84>
 8014fe2:	2390      	movs	r3, #144	@ 0x90
 8014fe4:	460a      	mov	r2, r1
 8014fe6:	4630      	mov	r0, r6
 8014fe8:	f006 fd00 	bl	801b9ec <pointwise_conv_fp_4row4col_IOHW_int8weight_partialCH_4innercol>
/* layer 180:WHERE */
where_zeros_inplace_bit((bool*)&buffer0[4352],3072,(float*)&buffer0[43904]);
 8014fec:	4622      	mov	r2, r4
 8014fee:	f44f 6140 	mov.w	r1, #3072	@ 0xc00
 8014ff2:	f5a6 6028 	sub.w	r0, r6, #2688	@ 0xa80
 8014ff6:	f009 f9f9 	bl	801e3ec <where_zeros_inplace_bit>
/* layer 181:MUL */
fptr = &buffer0[43904];
 8014ffa:	4b8d      	ldr	r3, [pc, #564]	@ (8015230 <invoke+0x2c68>)
 8014ffc:	601c      	str	r4, [r3, #0]
fptr2 = scales23;
 8014ffe:	4b94      	ldr	r3, [pc, #592]	@ (8015250 <invoke+0x2c88>)
 8015000:	4a94      	ldr	r2, [pc, #592]	@ (8015254 <invoke+0x2c8c>)
 8015002:	601a      	str	r2, [r3, #0]
for(int hw = 0; hw < 64; hw++){
 8015004:	e013      	b.n	801502e <invoke+0x2a66>
for(int i = 0; i < 48; i++){float f = *fptr; *fptr++ = fptr2[i] * f;};
 8015006:	4c8a      	ldr	r4, [pc, #552]	@ (8015230 <invoke+0x2c68>)
 8015008:	6820      	ldr	r0, [r4, #0]
 801500a:	4602      	mov	r2, r0
 801500c:	ecb2 7a01 	vldmia	r2!, {s14}
 8015010:	498f      	ldr	r1, [pc, #572]	@ (8015250 <invoke+0x2c88>)
 8015012:	6809      	ldr	r1, [r1, #0]
 8015014:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8015018:	edd1 7a00 	vldr	s15, [r1]
 801501c:	6022      	str	r2, [r4, #0]
 801501e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8015022:	edc0 7a00 	vstr	s15, [r0]
 8015026:	3301      	adds	r3, #1
 8015028:	2b2f      	cmp	r3, #47	@ 0x2f
 801502a:	ddec      	ble.n	8015006 <invoke+0x2a3e>
for(int hw = 0; hw < 64; hw++){
 801502c:	3501      	adds	r5, #1
 801502e:	2d3f      	cmp	r5, #63	@ 0x3f
 8015030:	dc01      	bgt.n	8015036 <invoke+0x2a6e>
for(int i = 0; i < 48; i++){float f = *fptr; *fptr++ = fptr2[i] * f;};
 8015032:	2300      	movs	r3, #0
 8015034:	e7f8      	b.n	8015028 <invoke+0x2a60>
}
/* layer 182:SUM */
sum_4D_exclude((float*)&buffer0[43904],1,8,8,48,3,(float*)&buffer0[4352]);
 8015036:	4c88      	ldr	r4, [pc, #544]	@ (8015258 <invoke+0x2c90>)
 8015038:	9402      	str	r4, [sp, #8]
 801503a:	2303      	movs	r3, #3
 801503c:	9301      	str	r3, [sp, #4]
 801503e:	2330      	movs	r3, #48	@ 0x30
 8015040:	9300      	str	r3, [sp, #0]
 8015042:	2308      	movs	r3, #8
 8015044:	461a      	mov	r2, r3
 8015046:	2101      	movs	r1, #1
 8015048:	4884      	ldr	r0, [pc, #528]	@ (801525c <invoke+0x2c94>)
 801504a:	f007 fa07 	bl	801c45c <sum_4D_exclude>
/* layer 183:BIAS_UPDATE */
const float v8_conv_2_bias_QAS[48] = {284621660.0,304217000.0,503038000.0,391473180.0,252154510.0,297123100.0,263391630.0,310499800.0,359126900.0,420800000.0,206491170.0,458631100.0,271088160.0,370546300.0,407529000.0,202315120.0,325050460.0,376422430.0,507360160.0,376447260.0,466791140.0,383453700.0,443895200.0,274529820.0,177055120.0,257525200.0,318709300.0,191143300.0,346373630.0,294000900.0,372293020.0,414550200.0,135013070.0,362483000.0,375941950.0,355319100.0,259267520.0,214808140.0,379836960.0,142551970.0,342445470.0,370095940.0,171951800.0,321280540.0,368954600.0,371790980.0,335280960.0,350077150.0,};
 801504e:	22c0      	movs	r2, #192	@ 0xc0
 8015050:	4983      	ldr	r1, [pc, #524]	@ (8015260 <invoke+0x2c98>)
 8015052:	f50d 60a4 	add.w	r0, sp, #1312	@ 0x520
 8015056:	f00e fee1 	bl	8023e1c <memcpy>
fptr = (float*)&buffer0[4352];//gradients
 801505a:	4b75      	ldr	r3, [pc, #468]	@ (8015230 <invoke+0x2c68>)
 801505c:	601c      	str	r4, [r3, #0]
for(int i = 0; i < 48; i++) v8_conv_2_bias[i] -= (int32_t)(fptr[i] * blr * v8_conv_2_bias_QAS[i]);
 801505e:	2300      	movs	r3, #0
 8015060:	e01d      	b.n	801509e <invoke+0x2ad6>
 8015062:	4a80      	ldr	r2, [pc, #512]	@ (8015264 <invoke+0x2c9c>)
 8015064:	6810      	ldr	r0, [r2, #0]
 8015066:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 801506a:	4971      	ldr	r1, [pc, #452]	@ (8015230 <invoke+0x2c68>)
 801506c:	6809      	ldr	r1, [r1, #0]
 801506e:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8015072:	edd1 7a00 	vldr	s15, [r1]
 8015076:	ed9f 7a6f 	vldr	s14, [pc, #444]	@ 8015234 <invoke+0x2c6c>
 801507a:	ee67 7a87 	vmul.f32	s15, s15, s14
 801507e:	f50d 61a4 	add.w	r1, sp, #1312	@ 0x520
 8015082:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8015086:	ed91 7a00 	vldr	s14, [r1]
 801508a:	ee67 7a87 	vmul.f32	s15, s15, s14
 801508e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8015092:	ee17 1a90 	vmov	r1, s15
 8015096:	1a52      	subs	r2, r2, r1
 8015098:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 801509c:	3301      	adds	r3, #1
 801509e:	2b2f      	cmp	r3, #47	@ 0x2f
 80150a0:	dddf      	ble.n	8015062 <invoke+0x2a9a>
/* layer 184:CAST */
fptr = (float*)&buffer0[56192];
 80150a2:	4b63      	ldr	r3, [pc, #396]	@ (8015230 <invoke+0x2c68>)
 80150a4:	4a70      	ldr	r2, [pc, #448]	@ (8015268 <invoke+0x2ca0>)
 80150a6:	601a      	str	r2, [r3, #0]
int8ptr = (int8_t*)&buffer0[1280];
 80150a8:	4b70      	ldr	r3, [pc, #448]	@ (801526c <invoke+0x2ca4>)
 80150aa:	4a71      	ldr	r2, [pc, #452]	@ (8015270 <invoke+0x2ca8>)
 80150ac:	601a      	str	r2, [r3, #0]
for(int i = 0; i < 3072; i++) fptr[i] = (float)int8ptr[i];
 80150ae:	2300      	movs	r3, #0
 80150b0:	e00d      	b.n	80150ce <invoke+0x2b06>
 80150b2:	4a6e      	ldr	r2, [pc, #440]	@ (801526c <invoke+0x2ca4>)
 80150b4:	6812      	ldr	r2, [r2, #0]
 80150b6:	56d2      	ldrsb	r2, [r2, r3]
 80150b8:	ee07 2a90 	vmov	s15, r2
 80150bc:	4a5c      	ldr	r2, [pc, #368]	@ (8015230 <invoke+0x2c68>)
 80150be:	6812      	ldr	r2, [r2, #0]
 80150c0:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80150c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80150c8:	edc2 7a00 	vstr	s15, [r2]
 80150cc:	3301      	adds	r3, #1
 80150ce:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80150d2:	dbee      	blt.n	80150b2 <invoke+0x2aea>
/* layer 185:STRIDED_SLICE */
const uint16_t begin2[] = {0, 0, 0, 0};
 80150d4:	f50d 63a3 	add.w	r3, sp, #1304	@ 0x518
 80150d8:	2500      	movs	r5, #0
 80150da:	f8cd 5518 	str.w	r5, [sp, #1304]	@ 0x518
 80150de:	f8cd 551c 	str.w	r5, [sp, #1308]	@ 0x51c
const uint16_t end2[] = {1, 12, 8, 8};
 80150e2:	f50d 62a2 	add.w	r2, sp, #1296	@ 0x510
 80150e6:	f8df a1a0 	ldr.w	sl, [pc, #416]	@ 8015288 <invoke+0x2cc0>
 80150ea:	f60a 0178 	addw	r1, sl, #2168	@ 0x878
 80150ee:	c903      	ldmia	r1, {r0, r1}
 80150f0:	e882 0003 	stmia.w	r2, {r0, r1}
const uint16_t strides2[] = {1};
 80150f4:	f20d 520c 	addw	r2, sp, #1292	@ 0x50c
 80150f8:	2601      	movs	r6, #1
 80150fa:	8016      	strh	r6, [r2, #0]
strided_slice_4Dto4D((float*)&buffer0[56192],1,48,8,8,begin2,end2,strides2,(float*)&buffer0[1280],1,12,8,8);
 80150fc:	f8df 9168 	ldr.w	r9, [pc, #360]	@ 8015268 <invoke+0x2ca0>
 8015100:	2408      	movs	r4, #8
 8015102:	9408      	str	r4, [sp, #32]
 8015104:	9407      	str	r4, [sp, #28]
 8015106:	f04f 080c 	mov.w	r8, #12
 801510a:	f8cd 8018 	str.w	r8, [sp, #24]
 801510e:	9605      	str	r6, [sp, #20]
 8015110:	4f57      	ldr	r7, [pc, #348]	@ (8015270 <invoke+0x2ca8>)
 8015112:	9704      	str	r7, [sp, #16]
 8015114:	9203      	str	r2, [sp, #12]
 8015116:	f50d 62a2 	add.w	r2, sp, #1296	@ 0x510
 801511a:	9202      	str	r2, [sp, #8]
 801511c:	9301      	str	r3, [sp, #4]
 801511e:	9400      	str	r4, [sp, #0]
 8015120:	4623      	mov	r3, r4
 8015122:	2230      	movs	r2, #48	@ 0x30
 8015124:	4631      	mov	r1, r6
 8015126:	4648      	mov	r0, r9
 8015128:	f007 f8b8 	bl	801c29c <strided_slice_4Dto4D>
/* layer 186:GROUP_CONV */
const float v9_conv_0_weight_QAS[144] = {1007958.94,1093299.5,1448121.4,762328.94,1108129.4,759750.4,889469.2,2931218.8,699016.75,1680528.9,1735970.4,1499222.4,1420925.8,972586.75,1960982.8,1515908.0,1187721.4,1051038.8,1416044.9,1569698.0,722529.2,2501309.0,1840317.5,1211263.5,1216679.6,570288.8,475210.53,694962.6,280427.12,1526084.6,1664752.2,1069744.9,851453.5,1709204.0,1300035.0,903722.8,1181643.0,1146618.5,1646526.5,615266.3,846232.06,2223648.5,1553717.0,1400037.9,698424.1,375720.03,589680.25,736628.44,926699.56,660794.6,951647.06,1600680.9,821387.06,1054136.8,6.4515992e+16,2196008.2,539791.0,266761.16,378064.06,955045.8,919515.75,1054760.9,1836418.1,890818.0,418437.7,703802.06,458387.25,1113126.2,1312563.8,1822159.5,968502.56,280311.84,911323.56,1470846.5,977566.44,639234.25,1226596.5,1603540.9,1516586.6,1312212.8,1452267.4,257878.34,1497839.4,1457477.9,569662.5,456127.4,489563.94,1137202.2,798001.0,1431204.2,1015710.06,612909.0,2807876.8,1015917.25,962832.94,2423602.2,644894.75,2105475.8,1249554.5,796727.06,545106.0,781507.56,1317516.1,1230639.1,796070.1,2315072.8,2007292.5,1016033.3,4244428.5,2520067.2,476574.7,1268079.2,1541117.2,1507674.2,839337.3,1272244.0,1283148.1,1105196.5,1414403.4,816907.0,2321330.8,1359640.4,734212.25,1055476.5,1520725.9,1097113.4,1066999.0,449326.7,876044.94,1365762.1,606956.2,1260549.1,2121037.2,3004286.0,3871993.5,1310603.5,979144.75,2551785.0,1432441.9,1149393.6,1178514.4,1171216.2,905465.25,442230.6,};
 801512c:	f44f 7210 	mov.w	r2, #576	@ 0x240
 8015130:	f50a 6108 	add.w	r1, sl, #2176	@ 0x880
 8015134:	a8b3      	add	r0, sp, #716	@ 0x2cc
 8015136:	f00e fe71 	bl	8023e1c <memcpy>
group_conv_fp_kernel8_stride1_pad0_in8x8_out1x1_uniweight_4row16col_inplace((float*)&buffer0[1280],8,8,12,weight_fp65,NULL,v9_conv_0_weight,1,1,1728,-FLT_MAX,FLT_MAX,(float*)sbuf,1,12, v9_conv_0_weight_QAS, lr);
 801513a:	eddf 8a43 	vldr	s17, [pc, #268]	@ 8015248 <invoke+0x2c80>
 801513e:	ed9f 8a43 	vldr	s16, [pc, #268]	@ 801524c <invoke+0x2c84>
 8015142:	abb3      	add	r3, sp, #716	@ 0x2cc
 8015144:	9309      	str	r3, [sp, #36]	@ 0x24
 8015146:	f8cd 8020 	str.w	r8, [sp, #32]
 801514a:	9607      	str	r6, [sp, #28]
 801514c:	f8df a0ec 	ldr.w	sl, [pc, #236]	@ 801523c <invoke+0x2c74>
 8015150:	f8cd a018 	str.w	sl, [sp, #24]
 8015154:	f44f 63d8 	mov.w	r3, #1728	@ 0x6c0
 8015158:	9305      	str	r3, [sp, #20]
 801515a:	9604      	str	r6, [sp, #16]
 801515c:	9603      	str	r6, [sp, #12]
 801515e:	4b39      	ldr	r3, [pc, #228]	@ (8015244 <invoke+0x2c7c>)
 8015160:	681b      	ldr	r3, [r3, #0]
 8015162:	9302      	str	r3, [sp, #8]
 8015164:	9501      	str	r5, [sp, #4]
 8015166:	4b43      	ldr	r3, [pc, #268]	@ (8015274 <invoke+0x2cac>)
 8015168:	681b      	ldr	r3, [r3, #0]
 801516a:	9300      	str	r3, [sp, #0]
 801516c:	ed9f 1a42 	vldr	s2, [pc, #264]	@ 8015278 <invoke+0x2cb0>
 8015170:	eef0 0a68 	vmov.f32	s1, s17
 8015174:	eeb0 0a48 	vmov.f32	s0, s16
 8015178:	4643      	mov	r3, r8
 801517a:	4622      	mov	r2, r4
 801517c:	4621      	mov	r1, r4
 801517e:	4638      	mov	r0, r7
 8015180:	f003 f9c6 	bl	8018510 <group_conv_fp_kernel8_stride1_pad0_in8x8_out1x1_uniweight_4row16col_inplace>
/* layer 187:TRANSPOSE_CONV_2D */
pointwise_conv_fp_4row4col_IOHW_int8weight((float*)&buffer0[43904],8,8,48,(q7_t*)v8_conv_2_weight,NULL,(float*)&buffer0[1280],8,8,160,-FLT_MAX,FLT_MAX,(float*)sbuf, 1);
 8015184:	9607      	str	r6, [sp, #28]
 8015186:	f8cd a018 	str.w	sl, [sp, #24]
 801518a:	23a0      	movs	r3, #160	@ 0xa0
 801518c:	9305      	str	r3, [sp, #20]
 801518e:	9404      	str	r4, [sp, #16]
 8015190:	9403      	str	r4, [sp, #12]
 8015192:	9702      	str	r7, [sp, #8]
 8015194:	9501      	str	r5, [sp, #4]
 8015196:	4b39      	ldr	r3, [pc, #228]	@ (801527c <invoke+0x2cb4>)
 8015198:	681b      	ldr	r3, [r3, #0]
 801519a:	9300      	str	r3, [sp, #0]
 801519c:	eef0 0a68 	vmov.f32	s1, s17
 80151a0:	eeb0 0a48 	vmov.f32	s0, s16
 80151a4:	2330      	movs	r3, #48	@ 0x30
 80151a6:	4622      	mov	r2, r4
 80151a8:	4621      	mov	r1, r4
 80151aa:	f5a9 5040 	sub.w	r0, r9, #12288	@ 0x3000
 80151ae:	f005 f9bd 	bl	801a52c <pointwise_conv_fp_4row4col_IOHW_int8weight>
/* layer 188:WHERE */
where_zeros_inplace_bit((bool*)&buffer0[0],10240,(float*)&buffer0[1280]);
 80151b2:	463a      	mov	r2, r7
 80151b4:	f44f 5120 	mov.w	r1, #10240	@ 0x2800
 80151b8:	f5a7 60a0 	sub.w	r0, r7, #1280	@ 0x500
 80151bc:	f009 f916 	bl	801e3ec <where_zeros_inplace_bit>
/* layer 189:MUL */
fptr = &buffer0[1280];
 80151c0:	4b1b      	ldr	r3, [pc, #108]	@ (8015230 <invoke+0x2c68>)
 80151c2:	601f      	str	r7, [r3, #0]
fptr2 = scales22;
 80151c4:	4b22      	ldr	r3, [pc, #136]	@ (8015250 <invoke+0x2c88>)
 80151c6:	4a2e      	ldr	r2, [pc, #184]	@ (8015280 <invoke+0x2cb8>)
 80151c8:	601a      	str	r2, [r3, #0]
for(int hw = 0; hw < 64; hw++){
 80151ca:	e013      	b.n	80151f4 <invoke+0x2c2c>
for(int i = 0; i < 160; i++){float f = *fptr; *fptr++ = fptr2[i] * f;};
 80151cc:	4c18      	ldr	r4, [pc, #96]	@ (8015230 <invoke+0x2c68>)
 80151ce:	6820      	ldr	r0, [r4, #0]
 80151d0:	4602      	mov	r2, r0
 80151d2:	ecb2 7a01 	vldmia	r2!, {s14}
 80151d6:	491e      	ldr	r1, [pc, #120]	@ (8015250 <invoke+0x2c88>)
 80151d8:	6809      	ldr	r1, [r1, #0]
 80151da:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 80151de:	edd1 7a00 	vldr	s15, [r1]
 80151e2:	6022      	str	r2, [r4, #0]
 80151e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80151e8:	edc0 7a00 	vstr	s15, [r0]
 80151ec:	3301      	adds	r3, #1
 80151ee:	2b9f      	cmp	r3, #159	@ 0x9f
 80151f0:	ddec      	ble.n	80151cc <invoke+0x2c04>
for(int hw = 0; hw < 64; hw++){
 80151f2:	3501      	adds	r5, #1
 80151f4:	2d3f      	cmp	r5, #63	@ 0x3f
 80151f6:	dc01      	bgt.n	80151fc <invoke+0x2c34>
for(int i = 0; i < 160; i++){float f = *fptr; *fptr++ = fptr2[i] * f;};
 80151f8:	2300      	movs	r3, #0
 80151fa:	e7f8      	b.n	80151ee <invoke+0x2c26>
}
/* layer 190:SUM */
sum_4D_exclude((float*)&buffer0[1280],1,8,8,160,3,(float*)&buffer0[0]);
 80151fc:	481c      	ldr	r0, [pc, #112]	@ (8015270 <invoke+0x2ca8>)
 80151fe:	f5a0 64a0 	sub.w	r4, r0, #1280	@ 0x500
 8015202:	9402      	str	r4, [sp, #8]
 8015204:	2303      	movs	r3, #3
 8015206:	9301      	str	r3, [sp, #4]
 8015208:	23a0      	movs	r3, #160	@ 0xa0
 801520a:	9300      	str	r3, [sp, #0]
 801520c:	2308      	movs	r3, #8
 801520e:	461a      	mov	r2, r3
 8015210:	2101      	movs	r1, #1
 8015212:	f007 f923 	bl	801c45c <sum_4D_exclude>
/* layer 191:BIAS_UPDATE */
const float v8_conv_1_bias_QAS[160] = {16137858.0,21563212.0,17260780.0,19358254.0,85725336.0,33789212.0,87651250.0,129334264.0,23150988.0,10156647.0,9286422.0,96499970.0,14149087.0,9804269.0,98743520.0,122095640.0,78369370.0,641424640.0,1016768600.0,20491758.0,10820261.0,27643276.0,20118490.0,37235176.0,21393282.0,31142066.0,29143482.0,36604060.0,37118268.0,16852376.0,40395450.0,50074420.0,46187970.0,24318626.0,34987732.0,15055983.0,156139940.0,13900276.0,287718200.0,94021310.0,77745270.0,25076366.0,21461828.0,15808157.0,27553990.0,52639372.0,36149160.0,11912032.0,73517130.0,16688680.0,14647817.0,14833902.0,30187674.0,17689720.0,20490418.0,19732992.0,30331836.0,116014240.0,24800180.0,99221550.0,117609064.0,67965130.0,120788790.0,26541078.0,14351439.0,75435660.0,102417570.0,14907382.0,20590766.0,27743390.0,55593564.0,25558178.0,18602302.0,27266332.0,10372916.0,23559026.0,26499844.0,15164472.0,106913590.0,48212860.0,14899516.0,45411452.0,17687664.0,12014631.0,18187292.0,25949242.0,109078120.0,34975864.0,17286376.0,12618020.0,25405754.0,68174200.0,11508190.0,10044020.0,12724026.0,29111284.0,25417826.0,38384540.0,24790836.0,69157430.0,21329336.0,701059840.0,170437420.0,19408258.0,17462722.0,27765084.0,18686548.0,41932252.0,179844830.0,13777060.0,22109226.0,19915148.0,25485912.0,78485290.0,61120388.0,33603380.0,106835870.0,154430500.0,20483004.0,41761750.0,106555330.0,19261402.0,27825842.0,23659052.0,15481597.0,40501756.0,29392850.0,36432090.0,14451499.0,19813580.0,21005486.0,39491684.0,43298570.0,36051500.0,13100440.0,22853044.0,57596644.0,87464056.0,26415088.0,29372180.0,23250260.0,15249762.0,47648196.0,11787393.0,19602600.0,16057196.0,19414158.0,23625946.0,22028952.0,14835767.0,22446486.0,13891527.0,25069606.0,27408362.0,34857084.0,129458870.0,14183018.0,28107708.0,40581596.0,27977578.0,};
 8015216:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801521a:	491a      	ldr	r1, [pc, #104]	@ (8015284 <invoke+0x2cbc>)
 801521c:	a813      	add	r0, sp, #76	@ 0x4c
 801521e:	f00e fdfd 	bl	8023e1c <memcpy>
fptr = (float*)&buffer0[0];//gradients
 8015222:	4b03      	ldr	r3, [pc, #12]	@ (8015230 <invoke+0x2c68>)
 8015224:	601c      	str	r4, [r3, #0]
for(int i = 0; i < 160; i++) v8_conv_1_bias[i] -= (int32_t)(fptr[i] * blr * v8_conv_1_bias_QAS[i]);
 8015226:	2300      	movs	r3, #0
 8015228:	e04d      	b.n	80152c6 <invoke+0x2cfe>
 801522a:	bf00      	nop
 801522c:	200077c8 	.word	0x200077c8
 8015230:	2000cca0 	.word	0x2000cca0
 8015234:	39d1b717 	.word	0x39d1b717
 8015238:	200102d0 	.word	0x200102d0
 801523c:	2003a750 	.word	0x2003a750
 8015240:	20007a0c 	.word	0x20007a0c
 8015244:	20007a10 	.word	0x20007a10
 8015248:	7f7fffff 	.word	0x7f7fffff
 801524c:	ff7fffff 	.word	0xff7fffff
 8015250:	2000cc9c 	.word	0x2000cc9c
 8015254:	0809a824 	.word	0x0809a824
 8015258:	2000f850 	.word	0x2000f850
 801525c:	200192d0 	.word	0x200192d0
 8015260:	0802c678 	.word	0x0802c678
 8015264:	200080d4 	.word	0x200080d4
 8015268:	2001c2d0 	.word	0x2001c2d0
 801526c:	2000cca4 	.word	0x2000cca4
 8015270:	2000ec50 	.word	0x2000ec50
 8015274:	20000020 	.word	0x20000020
 8015278:	3a51b717 	.word	0x3a51b717
 801527c:	20008198 	.word	0x20008198
 8015280:	0809c6e4 	.word	0x0809c6e4
 8015284:	0802c980 	.word	0x0802c980
 8015288:	0802bec0 	.word	0x0802bec0
 801528c:	4a12      	ldr	r2, [pc, #72]	@ (80152d8 <invoke+0x2d10>)
 801528e:	6810      	ldr	r0, [r2, #0]
 8015290:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 8015294:	4911      	ldr	r1, [pc, #68]	@ (80152dc <invoke+0x2d14>)
 8015296:	6809      	ldr	r1, [r1, #0]
 8015298:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 801529c:	edd1 7a00 	vldr	s15, [r1]
 80152a0:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 80152e0 <invoke+0x2d18>
 80152a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80152a8:	a913      	add	r1, sp, #76	@ 0x4c
 80152aa:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 80152ae:	ed91 7a00 	vldr	s14, [r1]
 80152b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80152b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80152ba:	ee17 1a90 	vmov	r1, s15
 80152be:	1a52      	subs	r2, r2, r1
 80152c0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 80152c4:	3301      	adds	r3, #1
 80152c6:	2b9f      	cmp	r3, #159	@ 0x9f
 80152c8:	dde0      	ble.n	801528c <invoke+0x2cc4>
}
 80152ca:	f50d 4da3 	add.w	sp, sp, #20864	@ 0x5180
 80152ce:	b007      	add	sp, #28
 80152d0:	ecbd 8b02 	vpop	{d8}
 80152d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80152d8:	2000819c 	.word	0x2000819c
 80152dc:	2000cca0 	.word	0x2000cca0
 80152e0:	39d1b717 	.word	0x39d1b717

080152e4 <invoke_inf>:
void invoke_inf(){
 80152e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80152e8:	ed2d 8b02 	vpush	{d8}
 80152ec:	b091      	sub	sp, #68	@ 0x44
/* layer 0:CONV_2D */
convolve_s8_kernel3_inputch3_stride2_pad1_fpreq(&buffer0[65536],128,128,3,(const q7_t*) weight0,bias0,scales0,-128,0,-128,127,&buffer0[0],64,64,16,sbuf,kbuf,0);
 80152ee:	2300      	movs	r3, #0
 80152f0:	930d      	str	r3, [sp, #52]	@ 0x34
 80152f2:	4bb7      	ldr	r3, [pc, #732]	@ (80155d0 <invoke_inf+0x2ec>)
 80152f4:	930c      	str	r3, [sp, #48]	@ 0x30
 80152f6:	4bb7      	ldr	r3, [pc, #732]	@ (80155d4 <invoke_inf+0x2f0>)
 80152f8:	f503 3be0 	add.w	fp, r3, #114688	@ 0x1c000
 80152fc:	f8cd b02c 	str.w	fp, [sp, #44]	@ 0x2c
 8015300:	2710      	movs	r7, #16
 8015302:	970a      	str	r7, [sp, #40]	@ 0x28
 8015304:	f04f 0940 	mov.w	r9, #64	@ 0x40
 8015308:	f8cd 9024 	str.w	r9, [sp, #36]	@ 0x24
 801530c:	f8cd 9020 	str.w	r9, [sp, #32]
 8015310:	f5a3 3680 	sub.w	r6, r3, #65536	@ 0x10000
 8015314:	9607      	str	r6, [sp, #28]
 8015316:	227f      	movs	r2, #127	@ 0x7f
 8015318:	9206      	str	r2, [sp, #24]
 801531a:	f06f 047f 	mvn.w	r4, #127	@ 0x7f
 801531e:	9405      	str	r4, [sp, #20]
 8015320:	2200      	movs	r2, #0
 8015322:	9204      	str	r2, [sp, #16]
 8015324:	9403      	str	r4, [sp, #12]
 8015326:	4bac      	ldr	r3, [pc, #688]	@ (80155d8 <invoke_inf+0x2f4>)
 8015328:	9302      	str	r3, [sp, #8]
 801532a:	4bac      	ldr	r3, [pc, #688]	@ (80155dc <invoke_inf+0x2f8>)
 801532c:	9301      	str	r3, [sp, #4]
 801532e:	4bac      	ldr	r3, [pc, #688]	@ (80155e0 <invoke_inf+0x2fc>)
 8015330:	9300      	str	r3, [sp, #0]
 8015332:	2303      	movs	r3, #3
 8015334:	2280      	movs	r2, #128	@ 0x80
 8015336:	4611      	mov	r1, r2
 8015338:	f506 3080 	add.w	r0, r6, #65536	@ 0x10000
 801533c:	f00a f884 	bl	801f448 <convolve_s8_kernel3_inputch3_stride2_pad1_fpreq>
/* layer 1:DEPTHWISE_CONV_2D */
depthwise_kernel3x3_stride1_inplace_CHW_fpreq(&buffer0[0],64,64,16,(const q7_t*) CHWweight1,offsetBias1,offsetRBias1,scales1,-128,128,-128,127,&buffer0[0],64,64,16,sbuf,-128);
 8015340:	940d      	str	r4, [sp, #52]	@ 0x34
 8015342:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8015346:	970b      	str	r7, [sp, #44]	@ 0x2c
 8015348:	f8cd 9028 	str.w	r9, [sp, #40]	@ 0x28
 801534c:	f8cd 9024 	str.w	r9, [sp, #36]	@ 0x24
 8015350:	9608      	str	r6, [sp, #32]
 8015352:	227f      	movs	r2, #127	@ 0x7f
 8015354:	9207      	str	r2, [sp, #28]
 8015356:	9406      	str	r4, [sp, #24]
 8015358:	2280      	movs	r2, #128	@ 0x80
 801535a:	9205      	str	r2, [sp, #20]
 801535c:	9404      	str	r4, [sp, #16]
 801535e:	4ba1      	ldr	r3, [pc, #644]	@ (80155e4 <invoke_inf+0x300>)
 8015360:	9303      	str	r3, [sp, #12]
 8015362:	4ba1      	ldr	r3, [pc, #644]	@ (80155e8 <invoke_inf+0x304>)
 8015364:	9302      	str	r3, [sp, #8]
 8015366:	4ba1      	ldr	r3, [pc, #644]	@ (80155ec <invoke_inf+0x308>)
 8015368:	9301      	str	r3, [sp, #4]
 801536a:	4ba1      	ldr	r3, [pc, #644]	@ (80155f0 <invoke_inf+0x30c>)
 801536c:	9300      	str	r3, [sp, #0]
 801536e:	463b      	mov	r3, r7
 8015370:	464a      	mov	r2, r9
 8015372:	4649      	mov	r1, r9
 8015374:	4630      	mov	r0, r6
 8015376:	f7fa fcc5 	bl	800fd04 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq>
/* layer 2:CONV_2D */
convolve_1x1_s8_ch16_fpreq(&buffer0[0],64,64,16,(const q7_t*) weight2,bias2,scales2,-6,128,-128,127,&buffer0[147456],64,64,8,sbuf);
 801537a:	f8cd b02c 	str.w	fp, [sp, #44]	@ 0x2c
 801537e:	2508      	movs	r5, #8
 8015380:	950a      	str	r5, [sp, #40]	@ 0x28
 8015382:	f8cd 9024 	str.w	r9, [sp, #36]	@ 0x24
 8015386:	f8cd 9020 	str.w	r9, [sp, #32]
 801538a:	f506 3210 	add.w	r2, r6, #147456	@ 0x24000
 801538e:	9207      	str	r2, [sp, #28]
 8015390:	227f      	movs	r2, #127	@ 0x7f
 8015392:	9206      	str	r2, [sp, #24]
 8015394:	9405      	str	r4, [sp, #20]
 8015396:	2280      	movs	r2, #128	@ 0x80
 8015398:	9204      	str	r2, [sp, #16]
 801539a:	f06f 0205 	mvn.w	r2, #5
 801539e:	9203      	str	r2, [sp, #12]
 80153a0:	4b94      	ldr	r3, [pc, #592]	@ (80155f4 <invoke_inf+0x310>)
 80153a2:	9302      	str	r3, [sp, #8]
 80153a4:	4b94      	ldr	r3, [pc, #592]	@ (80155f8 <invoke_inf+0x314>)
 80153a6:	9301      	str	r3, [sp, #4]
 80153a8:	4b94      	ldr	r3, [pc, #592]	@ (80155fc <invoke_inf+0x318>)
 80153aa:	9300      	str	r3, [sp, #0]
 80153ac:	463b      	mov	r3, r7
 80153ae:	464a      	mov	r2, r9
 80153b0:	4649      	mov	r1, r9
 80153b2:	4630      	mov	r0, r6
 80153b4:	f009 f8fa 	bl	801e5ac <convolve_1x1_s8_ch16_fpreq>
/* layer 3:CONV_2D */
convolve_1x1_s8_ch8_fpreq(&buffer0[147456],64,64,8,(const q7_t*) weight3,bias3,scales3,-128,6,-128,127,&buffer0[16384],64,64,32,sbuf);
 80153b8:	f8cd b02c 	str.w	fp, [sp, #44]	@ 0x2c
 80153bc:	f04f 0820 	mov.w	r8, #32
 80153c0:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80153c4:	f8cd 9024 	str.w	r9, [sp, #36]	@ 0x24
 80153c8:	f8cd 9020 	str.w	r9, [sp, #32]
 80153cc:	f506 4a80 	add.w	sl, r6, #16384	@ 0x4000
 80153d0:	f8cd a01c 	str.w	sl, [sp, #28]
 80153d4:	227f      	movs	r2, #127	@ 0x7f
 80153d6:	9206      	str	r2, [sp, #24]
 80153d8:	9405      	str	r4, [sp, #20]
 80153da:	2306      	movs	r3, #6
 80153dc:	9304      	str	r3, [sp, #16]
 80153de:	9403      	str	r4, [sp, #12]
 80153e0:	4b87      	ldr	r3, [pc, #540]	@ (8015600 <invoke_inf+0x31c>)
 80153e2:	9302      	str	r3, [sp, #8]
 80153e4:	4b87      	ldr	r3, [pc, #540]	@ (8015604 <invoke_inf+0x320>)
 80153e6:	9301      	str	r3, [sp, #4]
 80153e8:	4b87      	ldr	r3, [pc, #540]	@ (8015608 <invoke_inf+0x324>)
 80153ea:	9300      	str	r3, [sp, #0]
 80153ec:	462b      	mov	r3, r5
 80153ee:	464a      	mov	r2, r9
 80153f0:	4649      	mov	r1, r9
 80153f2:	f506 3010 	add.w	r0, r6, #147456	@ 0x24000
 80153f6:	f009 fb67 	bl	801eac8 <convolve_1x1_s8_ch8_fpreq>
/* layer 4:DEPTHWISE_CONV_2D */
depthwise_kernel3x3_stride2_inplace_CHW_fpreq(&buffer0[16384],64,64,32,(const q7_t*) CHWweight4,offsetBias4,offsetRBias4,scales4,-128,128,-128,127,&buffer0[16384],32,32,32,sbuf,-128);
 80153fa:	940d      	str	r4, [sp, #52]	@ 0x34
 80153fc:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8015400:	f8cd 802c 	str.w	r8, [sp, #44]	@ 0x2c
 8015404:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8015408:	f8cd 8024 	str.w	r8, [sp, #36]	@ 0x24
 801540c:	f8cd a020 	str.w	sl, [sp, #32]
 8015410:	227f      	movs	r2, #127	@ 0x7f
 8015412:	9207      	str	r2, [sp, #28]
 8015414:	9406      	str	r4, [sp, #24]
 8015416:	2280      	movs	r2, #128	@ 0x80
 8015418:	9205      	str	r2, [sp, #20]
 801541a:	9404      	str	r4, [sp, #16]
 801541c:	4b7b      	ldr	r3, [pc, #492]	@ (801560c <invoke_inf+0x328>)
 801541e:	9303      	str	r3, [sp, #12]
 8015420:	4b7b      	ldr	r3, [pc, #492]	@ (8015610 <invoke_inf+0x32c>)
 8015422:	9302      	str	r3, [sp, #8]
 8015424:	4b7b      	ldr	r3, [pc, #492]	@ (8015614 <invoke_inf+0x330>)
 8015426:	9301      	str	r3, [sp, #4]
 8015428:	4b7b      	ldr	r3, [pc, #492]	@ (8015618 <invoke_inf+0x334>)
 801542a:	9300      	str	r3, [sp, #0]
 801542c:	4643      	mov	r3, r8
 801542e:	464a      	mov	r2, r9
 8015430:	4649      	mov	r1, r9
 8015432:	4650      	mov	r0, sl
 8015434:	f7fb f850 	bl	80104d8 <depthwise_kernel3x3_stride2_inplace_CHW_fpreq>
/* layer 5:CONV_2D */
convolve_1x1_s8_fpreq(&buffer0[16384],32,32,32,(const q7_t*) weight5,bias5,scales5,0,128,-128,127,&buffer0[0],32,32,16,sbuf);
 8015438:	f8cd b02c 	str.w	fp, [sp, #44]	@ 0x2c
 801543c:	970a      	str	r7, [sp, #40]	@ 0x28
 801543e:	f8cd 8024 	str.w	r8, [sp, #36]	@ 0x24
 8015442:	f8cd 8020 	str.w	r8, [sp, #32]
 8015446:	9607      	str	r6, [sp, #28]
 8015448:	227f      	movs	r2, #127	@ 0x7f
 801544a:	9206      	str	r2, [sp, #24]
 801544c:	9405      	str	r4, [sp, #20]
 801544e:	2280      	movs	r2, #128	@ 0x80
 8015450:	9204      	str	r2, [sp, #16]
 8015452:	2200      	movs	r2, #0
 8015454:	9203      	str	r2, [sp, #12]
 8015456:	4b71      	ldr	r3, [pc, #452]	@ (801561c <invoke_inf+0x338>)
 8015458:	9302      	str	r3, [sp, #8]
 801545a:	4b71      	ldr	r3, [pc, #452]	@ (8015620 <invoke_inf+0x33c>)
 801545c:	9301      	str	r3, [sp, #4]
 801545e:	4b71      	ldr	r3, [pc, #452]	@ (8015624 <invoke_inf+0x340>)
 8015460:	9300      	str	r3, [sp, #0]
 8015462:	4643      	mov	r3, r8
 8015464:	4642      	mov	r2, r8
 8015466:	4641      	mov	r1, r8
 8015468:	4650      	mov	r0, sl
 801546a:	f009 fc07 	bl	801ec7c <convolve_1x1_s8_fpreq>
/* layer 6:CONV_2D */
convolve_1x1_s8_ch16_fpreq(&buffer0[0],32,32,16,(const q7_t*) weight6,bias6,scales6,-128,0,-128,127,&buffer0[16384],32,32,48,sbuf);
 801546e:	f8cd b02c 	str.w	fp, [sp, #44]	@ 0x2c
 8015472:	2230      	movs	r2, #48	@ 0x30
 8015474:	920a      	str	r2, [sp, #40]	@ 0x28
 8015476:	f8cd 8024 	str.w	r8, [sp, #36]	@ 0x24
 801547a:	f8cd 8020 	str.w	r8, [sp, #32]
 801547e:	f8cd a01c 	str.w	sl, [sp, #28]
 8015482:	227f      	movs	r2, #127	@ 0x7f
 8015484:	9206      	str	r2, [sp, #24]
 8015486:	9405      	str	r4, [sp, #20]
 8015488:	2200      	movs	r2, #0
 801548a:	9204      	str	r2, [sp, #16]
 801548c:	9403      	str	r4, [sp, #12]
 801548e:	4b66      	ldr	r3, [pc, #408]	@ (8015628 <invoke_inf+0x344>)
 8015490:	9302      	str	r3, [sp, #8]
 8015492:	4b66      	ldr	r3, [pc, #408]	@ (801562c <invoke_inf+0x348>)
 8015494:	9301      	str	r3, [sp, #4]
 8015496:	4b66      	ldr	r3, [pc, #408]	@ (8015630 <invoke_inf+0x34c>)
 8015498:	9300      	str	r3, [sp, #0]
 801549a:	463b      	mov	r3, r7
 801549c:	4642      	mov	r2, r8
 801549e:	4641      	mov	r1, r8
 80154a0:	4630      	mov	r0, r6
 80154a2:	f009 f883 	bl	801e5ac <convolve_1x1_s8_ch16_fpreq>
/* layer 7:DEPTHWISE_CONV_2D */
depthwise_kernel3x3_stride1_inplace_CHW_fpreq(&buffer0[16384],32,32,48,(const q7_t*) CHWweight7,offsetBias7,offsetRBias7,scales7,-128,128,-128,127,&buffer0[16384],32,32,48,sbuf,-128);
 80154a6:	940d      	str	r4, [sp, #52]	@ 0x34
 80154a8:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 80154ac:	2230      	movs	r2, #48	@ 0x30
 80154ae:	920b      	str	r2, [sp, #44]	@ 0x2c
 80154b0:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80154b4:	f8cd 8024 	str.w	r8, [sp, #36]	@ 0x24
 80154b8:	f8cd a020 	str.w	sl, [sp, #32]
 80154bc:	227f      	movs	r2, #127	@ 0x7f
 80154be:	9207      	str	r2, [sp, #28]
 80154c0:	9406      	str	r4, [sp, #24]
 80154c2:	2280      	movs	r2, #128	@ 0x80
 80154c4:	9205      	str	r2, [sp, #20]
 80154c6:	9404      	str	r4, [sp, #16]
 80154c8:	4b5a      	ldr	r3, [pc, #360]	@ (8015634 <invoke_inf+0x350>)
 80154ca:	9303      	str	r3, [sp, #12]
 80154cc:	4b5a      	ldr	r3, [pc, #360]	@ (8015638 <invoke_inf+0x354>)
 80154ce:	9302      	str	r3, [sp, #8]
 80154d0:	4b5a      	ldr	r3, [pc, #360]	@ (801563c <invoke_inf+0x358>)
 80154d2:	9301      	str	r3, [sp, #4]
 80154d4:	4b5a      	ldr	r3, [pc, #360]	@ (8015640 <invoke_inf+0x35c>)
 80154d6:	9300      	str	r3, [sp, #0]
 80154d8:	2330      	movs	r3, #48	@ 0x30
 80154da:	4642      	mov	r2, r8
 80154dc:	4641      	mov	r1, r8
 80154de:	4650      	mov	r0, sl
 80154e0:	f7fa fc10 	bl	800fd04 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq>
/* layer 8:CONV_2D */
convolve_1x1_s8_ch48_fpreq(&buffer0[16384],32,32,48,(const q7_t*) weight8,bias8,scales8,14,128,-128,127,&buffer0[65536],32,32,16,sbuf);
 80154e4:	f8cd b02c 	str.w	fp, [sp, #44]	@ 0x2c
 80154e8:	970a      	str	r7, [sp, #40]	@ 0x28
 80154ea:	f8cd 8024 	str.w	r8, [sp, #36]	@ 0x24
 80154ee:	f8cd 8020 	str.w	r8, [sp, #32]
 80154f2:	f506 3380 	add.w	r3, r6, #65536	@ 0x10000
 80154f6:	9307      	str	r3, [sp, #28]
 80154f8:	237f      	movs	r3, #127	@ 0x7f
 80154fa:	9306      	str	r3, [sp, #24]
 80154fc:	9405      	str	r4, [sp, #20]
 80154fe:	2380      	movs	r3, #128	@ 0x80
 8015500:	9304      	str	r3, [sp, #16]
 8015502:	230e      	movs	r3, #14
 8015504:	9303      	str	r3, [sp, #12]
 8015506:	4b4f      	ldr	r3, [pc, #316]	@ (8015644 <invoke_inf+0x360>)
 8015508:	9302      	str	r3, [sp, #8]
 801550a:	4b4f      	ldr	r3, [pc, #316]	@ (8015648 <invoke_inf+0x364>)
 801550c:	9301      	str	r3, [sp, #4]
 801550e:	4b4f      	ldr	r3, [pc, #316]	@ (801564c <invoke_inf+0x368>)
 8015510:	9300      	str	r3, [sp, #0]
 8015512:	2330      	movs	r3, #48	@ 0x30
 8015514:	4642      	mov	r2, r8
 8015516:	4641      	mov	r1, r8
 8015518:	4650      	mov	r0, sl
 801551a:	f009 f9fb 	bl	801e914 <convolve_1x1_s8_ch48_fpreq>
/* layer 9:ADD */
add_fpreq(16384, &buffer0[0],0.057521824,0,&buffer0[65536],0.10736182,14,0.10652236,12,&buffer0[81920]);
 801551e:	f506 3aa0 	add.w	sl, r6, #81920	@ 0x14000
 8015522:	ed9f 8a4b 	vldr	s16, [pc, #300]	@ 8015650 <invoke_inf+0x36c>
 8015526:	4653      	mov	r3, sl
 8015528:	eef2 2a08 	vmov.f32	s5, #40	@ 0x41400000  12.0
 801552c:	ed9f 2a49 	vldr	s4, [pc, #292]	@ 8015654 <invoke_inf+0x370>
 8015530:	eef2 1a0c 	vmov.f32	s3, #44	@ 0x41600000  14.0
 8015534:	ed9f 1a48 	vldr	s2, [pc, #288]	@ 8015658 <invoke_inf+0x374>
 8015538:	f5aa 4280 	sub.w	r2, sl, #16384	@ 0x4000
 801553c:	eef0 0a48 	vmov.f32	s1, s16
 8015540:	ed9f 0a46 	vldr	s0, [pc, #280]	@ 801565c <invoke_inf+0x378>
 8015544:	4631      	mov	r1, r6
 8015546:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 801554a:	f008 ff78 	bl	801e43e <add_fpreq>
/* layer 10:CONV_2D */
convolve_1x1_s8_ch16_fpreq(&buffer0[81920],32,32,16,(const q7_t*) weight9,bias9,scales9,-128,-12,-128,127,&buffer0[6144],32,32,48,sbuf);
 801554e:	f8cd b02c 	str.w	fp, [sp, #44]	@ 0x2c
 8015552:	2330      	movs	r3, #48	@ 0x30
 8015554:	930a      	str	r3, [sp, #40]	@ 0x28
 8015556:	f8cd 8024 	str.w	r8, [sp, #36]	@ 0x24
 801555a:	f8cd 8020 	str.w	r8, [sp, #32]
 801555e:	f506 59c0 	add.w	r9, r6, #6144	@ 0x1800
 8015562:	f8cd 901c 	str.w	r9, [sp, #28]
 8015566:	237f      	movs	r3, #127	@ 0x7f
 8015568:	9306      	str	r3, [sp, #24]
 801556a:	9405      	str	r4, [sp, #20]
 801556c:	f06f 030b 	mvn.w	r3, #11
 8015570:	9304      	str	r3, [sp, #16]
 8015572:	9403      	str	r4, [sp, #12]
 8015574:	4b3a      	ldr	r3, [pc, #232]	@ (8015660 <invoke_inf+0x37c>)
 8015576:	9302      	str	r3, [sp, #8]
 8015578:	4b3a      	ldr	r3, [pc, #232]	@ (8015664 <invoke_inf+0x380>)
 801557a:	9301      	str	r3, [sp, #4]
 801557c:	4b3a      	ldr	r3, [pc, #232]	@ (8015668 <invoke_inf+0x384>)
 801557e:	9300      	str	r3, [sp, #0]
 8015580:	463b      	mov	r3, r7
 8015582:	4642      	mov	r2, r8
 8015584:	4641      	mov	r1, r8
 8015586:	4650      	mov	r0, sl
 8015588:	f009 f810 	bl	801e5ac <convolve_1x1_s8_ch16_fpreq>
/* layer 11:DEPTHWISE_CONV_2D */
depthwise_kernel7x7_stride2_inplace_CHW_fpreq(&buffer0[6144],32,32,48,(const q7_t*) CHWweight10,offsetBias10,offsetRBias10,scales10,-128,128,-128,127,&buffer0[6144],16,16,48,sbuf,-128);
 801558c:	940d      	str	r4, [sp, #52]	@ 0x34
 801558e:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8015592:	2330      	movs	r3, #48	@ 0x30
 8015594:	930b      	str	r3, [sp, #44]	@ 0x2c
 8015596:	970a      	str	r7, [sp, #40]	@ 0x28
 8015598:	9709      	str	r7, [sp, #36]	@ 0x24
 801559a:	f8cd 9020 	str.w	r9, [sp, #32]
 801559e:	237f      	movs	r3, #127	@ 0x7f
 80155a0:	9307      	str	r3, [sp, #28]
 80155a2:	9406      	str	r4, [sp, #24]
 80155a4:	2380      	movs	r3, #128	@ 0x80
 80155a6:	9305      	str	r3, [sp, #20]
 80155a8:	9404      	str	r4, [sp, #16]
 80155aa:	4b30      	ldr	r3, [pc, #192]	@ (801566c <invoke_inf+0x388>)
 80155ac:	9303      	str	r3, [sp, #12]
 80155ae:	4b30      	ldr	r3, [pc, #192]	@ (8015670 <invoke_inf+0x38c>)
 80155b0:	9302      	str	r3, [sp, #8]
 80155b2:	4b30      	ldr	r3, [pc, #192]	@ (8015674 <invoke_inf+0x390>)
 80155b4:	9301      	str	r3, [sp, #4]
 80155b6:	4b30      	ldr	r3, [pc, #192]	@ (8015678 <invoke_inf+0x394>)
 80155b8:	9300      	str	r3, [sp, #0]
 80155ba:	2330      	movs	r3, #48	@ 0x30
 80155bc:	4642      	mov	r2, r8
 80155be:	4641      	mov	r1, r8
 80155c0:	4648      	mov	r0, r9
 80155c2:	f7fc fac1 	bl	8011b48 <depthwise_kernel7x7_stride2_inplace_CHW_fpreq>
/* layer 12:CONV_2D */
convolve_1x1_s8_ch48_fpreq(&buffer0[6144],16,16,48,(const q7_t*) weight11,bias11,scales11,-5,128,-128,127,&buffer0[0],16,16,24,sbuf);
 80155c6:	f8cd b02c 	str.w	fp, [sp, #44]	@ 0x2c
 80155ca:	2318      	movs	r3, #24
 80155cc:	930a      	str	r3, [sp, #40]	@ 0x28
 80155ce:	e055      	b.n	801567c <invoke_inf+0x398>
 80155d0:	2003c958 	.word	0x2003c958
 80155d4:	2001e750 	.word	0x2001e750
 80155d8:	080ad164 	.word	0x080ad164
 80155dc:	080ad1a4 	.word	0x080ad1a4
 80155e0:	080ad1e4 	.word	0x080ad1e4
 80155e4:	080ad014 	.word	0x080ad014
 80155e8:	080ad054 	.word	0x080ad054
 80155ec:	080ad094 	.word	0x080ad094
 80155f0:	080ad0d4 	.word	0x080ad0d4
 80155f4:	080acf54 	.word	0x080acf54
 80155f8:	080acf74 	.word	0x080acf74
 80155fc:	080acf94 	.word	0x080acf94
 8015600:	080acd54 	.word	0x080acd54
 8015604:	080acdd4 	.word	0x080acdd4
 8015608:	080ace54 	.word	0x080ace54
 801560c:	080acab4 	.word	0x080acab4
 8015610:	080acb34 	.word	0x080acb34
 8015614:	080acbb4 	.word	0x080acbb4
 8015618:	080acc34 	.word	0x080acc34
 801561c:	080ac834 	.word	0x080ac834
 8015620:	080ac874 	.word	0x080ac874
 8015624:	080ac8b4 	.word	0x080ac8b4
 8015628:	080ac3b4 	.word	0x080ac3b4
 801562c:	080ac474 	.word	0x080ac474
 8015630:	080ac534 	.word	0x080ac534
 8015634:	080abfc4 	.word	0x080abfc4
 8015638:	080ac084 	.word	0x080ac084
 801563c:	080ac144 	.word	0x080ac144
 8015640:	080ac204 	.word	0x080ac204
 8015644:	080abc44 	.word	0x080abc44
 8015648:	080abc84 	.word	0x080abc84
 801564c:	080abcc4 	.word	0x080abcc4
 8015650:	00000000 	.word	0x00000000
 8015654:	3dda2865 	.word	0x3dda2865
 8015658:	3ddbe084 	.word	0x3ddbe084
 801565c:	3d6b9c01 	.word	0x3d6b9c01
 8015660:	080ab7c4 	.word	0x080ab7c4
 8015664:	080ab884 	.word	0x080ab884
 8015668:	080ab944 	.word	0x080ab944
 801566c:	080aac54 	.word	0x080aac54
 8015670:	080aad14 	.word	0x080aad14
 8015674:	080aadd4 	.word	0x080aadd4
 8015678:	080aae94 	.word	0x080aae94
 801567c:	9709      	str	r7, [sp, #36]	@ 0x24
 801567e:	9708      	str	r7, [sp, #32]
 8015680:	9607      	str	r6, [sp, #28]
 8015682:	237f      	movs	r3, #127	@ 0x7f
 8015684:	9306      	str	r3, [sp, #24]
 8015686:	9405      	str	r4, [sp, #20]
 8015688:	2380      	movs	r3, #128	@ 0x80
 801568a:	9304      	str	r3, [sp, #16]
 801568c:	f06f 0304 	mvn.w	r3, #4
 8015690:	9303      	str	r3, [sp, #12]
 8015692:	4bb1      	ldr	r3, [pc, #708]	@ (8015958 <invoke_inf+0x674>)
 8015694:	9302      	str	r3, [sp, #8]
 8015696:	4bb1      	ldr	r3, [pc, #708]	@ (801595c <invoke_inf+0x678>)
 8015698:	9301      	str	r3, [sp, #4]
 801569a:	4bb1      	ldr	r3, [pc, #708]	@ (8015960 <invoke_inf+0x67c>)
 801569c:	9300      	str	r3, [sp, #0]
 801569e:	2330      	movs	r3, #48	@ 0x30
 80156a0:	463a      	mov	r2, r7
 80156a2:	4639      	mov	r1, r7
 80156a4:	4648      	mov	r0, r9
 80156a6:	f009 f935 	bl	801e914 <convolve_1x1_s8_ch48_fpreq>
/* layer 13:CONV_2D */
convolve_1x1_s8_ch24_fpreq(&buffer0[0],16,16,24,(const q7_t*) weight12,bias12,scales12,-128,5,-128,127,&buffer0[6144],16,16,120,sbuf);
 80156aa:	f8cd b02c 	str.w	fp, [sp, #44]	@ 0x2c
 80156ae:	f04f 0a78 	mov.w	sl, #120	@ 0x78
 80156b2:	f8cd a028 	str.w	sl, [sp, #40]	@ 0x28
 80156b6:	9709      	str	r7, [sp, #36]	@ 0x24
 80156b8:	9708      	str	r7, [sp, #32]
 80156ba:	f8cd 901c 	str.w	r9, [sp, #28]
 80156be:	237f      	movs	r3, #127	@ 0x7f
 80156c0:	9306      	str	r3, [sp, #24]
 80156c2:	9405      	str	r4, [sp, #20]
 80156c4:	2305      	movs	r3, #5
 80156c6:	9304      	str	r3, [sp, #16]
 80156c8:	9403      	str	r4, [sp, #12]
 80156ca:	4ba6      	ldr	r3, [pc, #664]	@ (8015964 <invoke_inf+0x680>)
 80156cc:	9302      	str	r3, [sp, #8]
 80156ce:	4ba6      	ldr	r3, [pc, #664]	@ (8015968 <invoke_inf+0x684>)
 80156d0:	9301      	str	r3, [sp, #4]
 80156d2:	4ba6      	ldr	r3, [pc, #664]	@ (801596c <invoke_inf+0x688>)
 80156d4:	9300      	str	r3, [sp, #0]
 80156d6:	2318      	movs	r3, #24
 80156d8:	463a      	mov	r2, r7
 80156da:	4639      	mov	r1, r7
 80156dc:	4630      	mov	r0, r6
 80156de:	f009 f83f 	bl	801e760 <convolve_1x1_s8_ch24_fpreq>
/* layer 14:DEPTHWISE_CONV_2D */
depthwise_kernel3x3_stride1_inplace_CHW_fpreq(&buffer0[6144],16,16,120,(const q7_t*) CHWweight13,offsetBias13,offsetRBias13,scales13,-128,128,-128,127,&buffer0[6144],16,16,120,sbuf,-128);
 80156e2:	940d      	str	r4, [sp, #52]	@ 0x34
 80156e4:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 80156e8:	f8cd a02c 	str.w	sl, [sp, #44]	@ 0x2c
 80156ec:	970a      	str	r7, [sp, #40]	@ 0x28
 80156ee:	9709      	str	r7, [sp, #36]	@ 0x24
 80156f0:	f8cd 9020 	str.w	r9, [sp, #32]
 80156f4:	237f      	movs	r3, #127	@ 0x7f
 80156f6:	9307      	str	r3, [sp, #28]
 80156f8:	9406      	str	r4, [sp, #24]
 80156fa:	2380      	movs	r3, #128	@ 0x80
 80156fc:	9305      	str	r3, [sp, #20]
 80156fe:	9404      	str	r4, [sp, #16]
 8015700:	4b9b      	ldr	r3, [pc, #620]	@ (8015970 <invoke_inf+0x68c>)
 8015702:	9303      	str	r3, [sp, #12]
 8015704:	4b9b      	ldr	r3, [pc, #620]	@ (8015974 <invoke_inf+0x690>)
 8015706:	9302      	str	r3, [sp, #8]
 8015708:	4b9b      	ldr	r3, [pc, #620]	@ (8015978 <invoke_inf+0x694>)
 801570a:	9301      	str	r3, [sp, #4]
 801570c:	4b9b      	ldr	r3, [pc, #620]	@ (801597c <invoke_inf+0x698>)
 801570e:	9300      	str	r3, [sp, #0]
 8015710:	4653      	mov	r3, sl
 8015712:	463a      	mov	r2, r7
 8015714:	4639      	mov	r1, r7
 8015716:	4648      	mov	r0, r9
 8015718:	f7fa faf4 	bl	800fd04 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq>
/* layer 15:CONV_2D */
convolve_1x1_s8_fpreq(&buffer0[6144],16,16,120,(const q7_t*) weight14,bias14,scales14,-34,128,-128,127,&buffer0[36864],16,16,24,sbuf);
 801571c:	f8cd b02c 	str.w	fp, [sp, #44]	@ 0x2c
 8015720:	2318      	movs	r3, #24
 8015722:	930a      	str	r3, [sp, #40]	@ 0x28
 8015724:	9709      	str	r7, [sp, #36]	@ 0x24
 8015726:	9708      	str	r7, [sp, #32]
 8015728:	f506 4810 	add.w	r8, r6, #36864	@ 0x9000
 801572c:	f8cd 801c 	str.w	r8, [sp, #28]
 8015730:	237f      	movs	r3, #127	@ 0x7f
 8015732:	9306      	str	r3, [sp, #24]
 8015734:	9405      	str	r4, [sp, #20]
 8015736:	2380      	movs	r3, #128	@ 0x80
 8015738:	9304      	str	r3, [sp, #16]
 801573a:	f06f 0321 	mvn.w	r3, #33	@ 0x21
 801573e:	9303      	str	r3, [sp, #12]
 8015740:	4b8f      	ldr	r3, [pc, #572]	@ (8015980 <invoke_inf+0x69c>)
 8015742:	9302      	str	r3, [sp, #8]
 8015744:	4b8f      	ldr	r3, [pc, #572]	@ (8015984 <invoke_inf+0x6a0>)
 8015746:	9301      	str	r3, [sp, #4]
 8015748:	4b8f      	ldr	r3, [pc, #572]	@ (8015988 <invoke_inf+0x6a4>)
 801574a:	9300      	str	r3, [sp, #0]
 801574c:	4653      	mov	r3, sl
 801574e:	463a      	mov	r2, r7
 8015750:	4639      	mov	r1, r7
 8015752:	4648      	mov	r0, r9
 8015754:	f009 fa92 	bl	801ec7c <convolve_1x1_s8_fpreq>
/* layer 16:ADD */
add_fpreq(6144, &buffer0[0],0.04381648,-5,&buffer0[36864],0.05460287,-34,0.06156369,-11,&buffer0[43008]);
 8015758:	f506 4928 	add.w	r9, r6, #43008	@ 0xa800
 801575c:	464b      	mov	r3, r9
 801575e:	eefa 2a06 	vmov.f32	s5, #166	@ 0xc1300000 -11.0
 8015762:	ed9f 2a8a 	vldr	s4, [pc, #552]	@ 801598c <invoke_inf+0x6a8>
 8015766:	eddf 1a8a 	vldr	s3, [pc, #552]	@ 8015990 <invoke_inf+0x6ac>
 801576a:	ed9f 1a8a 	vldr	s2, [pc, #552]	@ 8015994 <invoke_inf+0x6b0>
 801576e:	4642      	mov	r2, r8
 8015770:	eef9 0a04 	vmov.f32	s1, #148	@ 0xc0a00000 -5.0
 8015774:	ed9f 0a88 	vldr	s0, [pc, #544]	@ 8015998 <invoke_inf+0x6b4>
 8015778:	4631      	mov	r1, r6
 801577a:	f44f 50c0 	mov.w	r0, #6144	@ 0x1800
 801577e:	f008 fe5e 	bl	801e43e <add_fpreq>
/* layer 17:CONV_2D */
convolve_1x1_s8_ch24_fpreq(&buffer0[43008],16,16,24,(const q7_t*) weight15,bias15,scales15,-128,11,-128,127,&buffer0[2560],16,16,120,sbuf);
 8015782:	f8cd b02c 	str.w	fp, [sp, #44]	@ 0x2c
 8015786:	f8cd a028 	str.w	sl, [sp, #40]	@ 0x28
 801578a:	9709      	str	r7, [sp, #36]	@ 0x24
 801578c:	9708      	str	r7, [sp, #32]
 801578e:	f506 6820 	add.w	r8, r6, #2560	@ 0xa00
 8015792:	f8cd 801c 	str.w	r8, [sp, #28]
 8015796:	237f      	movs	r3, #127	@ 0x7f
 8015798:	9306      	str	r3, [sp, #24]
 801579a:	9405      	str	r4, [sp, #20]
 801579c:	230b      	movs	r3, #11
 801579e:	9304      	str	r3, [sp, #16]
 80157a0:	9403      	str	r4, [sp, #12]
 80157a2:	4b7e      	ldr	r3, [pc, #504]	@ (801599c <invoke_inf+0x6b8>)
 80157a4:	9302      	str	r3, [sp, #8]
 80157a6:	4b7e      	ldr	r3, [pc, #504]	@ (80159a0 <invoke_inf+0x6bc>)
 80157a8:	9301      	str	r3, [sp, #4]
 80157aa:	4b7e      	ldr	r3, [pc, #504]	@ (80159a4 <invoke_inf+0x6c0>)
 80157ac:	9300      	str	r3, [sp, #0]
 80157ae:	2318      	movs	r3, #24
 80157b0:	463a      	mov	r2, r7
 80157b2:	4639      	mov	r1, r7
 80157b4:	4648      	mov	r0, r9
 80157b6:	f008 ffd3 	bl	801e760 <convolve_1x1_s8_ch24_fpreq>
/* layer 18:DEPTHWISE_CONV_2D */
depthwise_kernel3x3_stride2_inplace_CHW_fpreq(&buffer0[2560],16,16,120,(const q7_t*) CHWweight16,offsetBias16,offsetRBias16,scales16,-128,128,-128,127,&buffer0[2560],8,8,120,sbuf,-128);
 80157ba:	940d      	str	r4, [sp, #52]	@ 0x34
 80157bc:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 80157c0:	f8cd a02c 	str.w	sl, [sp, #44]	@ 0x2c
 80157c4:	950a      	str	r5, [sp, #40]	@ 0x28
 80157c6:	9509      	str	r5, [sp, #36]	@ 0x24
 80157c8:	f8cd 8020 	str.w	r8, [sp, #32]
 80157cc:	237f      	movs	r3, #127	@ 0x7f
 80157ce:	9307      	str	r3, [sp, #28]
 80157d0:	9406      	str	r4, [sp, #24]
 80157d2:	2380      	movs	r3, #128	@ 0x80
 80157d4:	9305      	str	r3, [sp, #20]
 80157d6:	9404      	str	r4, [sp, #16]
 80157d8:	4b73      	ldr	r3, [pc, #460]	@ (80159a8 <invoke_inf+0x6c4>)
 80157da:	9303      	str	r3, [sp, #12]
 80157dc:	4b73      	ldr	r3, [pc, #460]	@ (80159ac <invoke_inf+0x6c8>)
 80157de:	9302      	str	r3, [sp, #8]
 80157e0:	4b73      	ldr	r3, [pc, #460]	@ (80159b0 <invoke_inf+0x6cc>)
 80157e2:	9301      	str	r3, [sp, #4]
 80157e4:	4b73      	ldr	r3, [pc, #460]	@ (80159b4 <invoke_inf+0x6d0>)
 80157e6:	9300      	str	r3, [sp, #0]
 80157e8:	4653      	mov	r3, sl
 80157ea:	463a      	mov	r2, r7
 80157ec:	4639      	mov	r1, r7
 80157ee:	4640      	mov	r0, r8
 80157f0:	f7fa fe72 	bl	80104d8 <depthwise_kernel3x3_stride2_inplace_CHW_fpreq>
/* layer 19:CONV_2D */
convolve_1x1_s8_fpreq(&buffer0[2560],8,8,120,(const q7_t*) weight17,bias17,scales17,0,128,-128,127,&buffer0[0],8,8,40,sbuf);
 80157f4:	f8cd b02c 	str.w	fp, [sp, #44]	@ 0x2c
 80157f8:	f04f 0928 	mov.w	r9, #40	@ 0x28
 80157fc:	f8cd 9028 	str.w	r9, [sp, #40]	@ 0x28
 8015800:	9509      	str	r5, [sp, #36]	@ 0x24
 8015802:	9508      	str	r5, [sp, #32]
 8015804:	9607      	str	r6, [sp, #28]
 8015806:	237f      	movs	r3, #127	@ 0x7f
 8015808:	9306      	str	r3, [sp, #24]
 801580a:	9405      	str	r4, [sp, #20]
 801580c:	2380      	movs	r3, #128	@ 0x80
 801580e:	9304      	str	r3, [sp, #16]
 8015810:	2300      	movs	r3, #0
 8015812:	9303      	str	r3, [sp, #12]
 8015814:	4b68      	ldr	r3, [pc, #416]	@ (80159b8 <invoke_inf+0x6d4>)
 8015816:	9302      	str	r3, [sp, #8]
 8015818:	4b68      	ldr	r3, [pc, #416]	@ (80159bc <invoke_inf+0x6d8>)
 801581a:	9301      	str	r3, [sp, #4]
 801581c:	4b68      	ldr	r3, [pc, #416]	@ (80159c0 <invoke_inf+0x6dc>)
 801581e:	9300      	str	r3, [sp, #0]
 8015820:	4653      	mov	r3, sl
 8015822:	462a      	mov	r2, r5
 8015824:	4629      	mov	r1, r5
 8015826:	4640      	mov	r0, r8
 8015828:	f009 fa28 	bl	801ec7c <convolve_1x1_s8_fpreq>
/* layer 20:CONV_2D */
convolve_1x1_s8_fpreq(&buffer0[0],8,8,40,(const q7_t*) weight18,bias18,scales18,-128,0,-128,127,&buffer0[2560],8,8,160,sbuf);
 801582c:	f8cd b02c 	str.w	fp, [sp, #44]	@ 0x2c
 8015830:	27a0      	movs	r7, #160	@ 0xa0
 8015832:	970a      	str	r7, [sp, #40]	@ 0x28
 8015834:	9509      	str	r5, [sp, #36]	@ 0x24
 8015836:	9508      	str	r5, [sp, #32]
 8015838:	f8cd 801c 	str.w	r8, [sp, #28]
 801583c:	237f      	movs	r3, #127	@ 0x7f
 801583e:	9306      	str	r3, [sp, #24]
 8015840:	9405      	str	r4, [sp, #20]
 8015842:	2300      	movs	r3, #0
 8015844:	9304      	str	r3, [sp, #16]
 8015846:	9403      	str	r4, [sp, #12]
 8015848:	4b5e      	ldr	r3, [pc, #376]	@ (80159c4 <invoke_inf+0x6e0>)
 801584a:	9302      	str	r3, [sp, #8]
 801584c:	4b5e      	ldr	r3, [pc, #376]	@ (80159c8 <invoke_inf+0x6e4>)
 801584e:	9301      	str	r3, [sp, #4]
 8015850:	4b5e      	ldr	r3, [pc, #376]	@ (80159cc <invoke_inf+0x6e8>)
 8015852:	9300      	str	r3, [sp, #0]
 8015854:	464b      	mov	r3, r9
 8015856:	462a      	mov	r2, r5
 8015858:	4629      	mov	r1, r5
 801585a:	4630      	mov	r0, r6
 801585c:	f009 fa0e 	bl	801ec7c <convolve_1x1_s8_fpreq>
/* layer 21:DEPTHWISE_CONV_2D */
depthwise_kernel7x7_stride1_inplace_CHW_fpreq(&buffer0[2560],8,8,160,(const q7_t*) CHWweight19,offsetBias19,offsetRBias19,scales19,-128,128,-128,127,&buffer0[2560],8,8,160,sbuf,-128);
 8015860:	940d      	str	r4, [sp, #52]	@ 0x34
 8015862:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8015866:	970b      	str	r7, [sp, #44]	@ 0x2c
 8015868:	950a      	str	r5, [sp, #40]	@ 0x28
 801586a:	9509      	str	r5, [sp, #36]	@ 0x24
 801586c:	f8cd 8020 	str.w	r8, [sp, #32]
 8015870:	237f      	movs	r3, #127	@ 0x7f
 8015872:	9307      	str	r3, [sp, #28]
 8015874:	9406      	str	r4, [sp, #24]
 8015876:	2380      	movs	r3, #128	@ 0x80
 8015878:	9305      	str	r3, [sp, #20]
 801587a:	9404      	str	r4, [sp, #16]
 801587c:	4b54      	ldr	r3, [pc, #336]	@ (80159d0 <invoke_inf+0x6ec>)
 801587e:	9303      	str	r3, [sp, #12]
 8015880:	4b54      	ldr	r3, [pc, #336]	@ (80159d4 <invoke_inf+0x6f0>)
 8015882:	9302      	str	r3, [sp, #8]
 8015884:	4b54      	ldr	r3, [pc, #336]	@ (80159d8 <invoke_inf+0x6f4>)
 8015886:	9301      	str	r3, [sp, #4]
 8015888:	4b54      	ldr	r3, [pc, #336]	@ (80159dc <invoke_inf+0x6f8>)
 801588a:	9300      	str	r3, [sp, #0]
 801588c:	463b      	mov	r3, r7
 801588e:	462a      	mov	r2, r5
 8015890:	4629      	mov	r1, r5
 8015892:	4640      	mov	r0, r8
 8015894:	f7fb fd4a 	bl	801132c <depthwise_kernel7x7_stride1_inplace_CHW_fpreq>
/* layer 22:CONV_2D */
convolve_1x1_s8_fpreq(&buffer0[2560],8,8,160,(const q7_t*) weight20,bias20,scales20,22,128,-128,127,&buffer0[12800],8,8,40,sbuf);
 8015898:	f8cd b02c 	str.w	fp, [sp, #44]	@ 0x2c
 801589c:	f8cd 9028 	str.w	r9, [sp, #40]	@ 0x28
 80158a0:	9509      	str	r5, [sp, #36]	@ 0x24
 80158a2:	9508      	str	r5, [sp, #32]
 80158a4:	f506 5a48 	add.w	sl, r6, #12800	@ 0x3200
 80158a8:	f8cd a01c 	str.w	sl, [sp, #28]
 80158ac:	237f      	movs	r3, #127	@ 0x7f
 80158ae:	9306      	str	r3, [sp, #24]
 80158b0:	9405      	str	r4, [sp, #20]
 80158b2:	2380      	movs	r3, #128	@ 0x80
 80158b4:	9304      	str	r3, [sp, #16]
 80158b6:	2316      	movs	r3, #22
 80158b8:	9303      	str	r3, [sp, #12]
 80158ba:	4b49      	ldr	r3, [pc, #292]	@ (80159e0 <invoke_inf+0x6fc>)
 80158bc:	9302      	str	r3, [sp, #8]
 80158be:	4b49      	ldr	r3, [pc, #292]	@ (80159e4 <invoke_inf+0x700>)
 80158c0:	9301      	str	r3, [sp, #4]
 80158c2:	4b49      	ldr	r3, [pc, #292]	@ (80159e8 <invoke_inf+0x704>)
 80158c4:	9300      	str	r3, [sp, #0]
 80158c6:	463b      	mov	r3, r7
 80158c8:	462a      	mov	r2, r5
 80158ca:	4629      	mov	r1, r5
 80158cc:	4640      	mov	r0, r8
 80158ce:	f009 f9d5 	bl	801ec7c <convolve_1x1_s8_fpreq>
/* layer 23:ADD */
add_fpreq(2560, &buffer0[0],0.036471475,0,&buffer0[12800],0.031147331,22,0.0372383,3,&buffer0[15360]);
 80158d2:	f506 5870 	add.w	r8, r6, #15360	@ 0x3c00
 80158d6:	4643      	mov	r3, r8
 80158d8:	eef0 2a08 	vmov.f32	s5, #8	@ 0x40400000  3.0
 80158dc:	ed9f 2a43 	vldr	s4, [pc, #268]	@ 80159ec <invoke_inf+0x708>
 80158e0:	eef3 1a06 	vmov.f32	s3, #54	@ 0x41b00000  22.0
 80158e4:	ed9f 1a42 	vldr	s2, [pc, #264]	@ 80159f0 <invoke_inf+0x70c>
 80158e8:	4652      	mov	r2, sl
 80158ea:	eef0 0a48 	vmov.f32	s1, s16
 80158ee:	ed9f 0a41 	vldr	s0, [pc, #260]	@ 80159f4 <invoke_inf+0x710>
 80158f2:	4631      	mov	r1, r6
 80158f4:	f44f 6020 	mov.w	r0, #2560	@ 0xa00
 80158f8:	f008 fda1 	bl	801e43e <add_fpreq>
/* layer 24:CONV_2D */
convolve_1x1_s8_fpreq(&buffer0[15360],8,8,40,(const q7_t*) weight21,bias21,scales21,-128,-3,-128,127,&buffer0[4736],8,8,160,sbuf);
 80158fc:	f8cd b02c 	str.w	fp, [sp, #44]	@ 0x2c
 8015900:	970a      	str	r7, [sp, #40]	@ 0x28
 8015902:	9509      	str	r5, [sp, #36]	@ 0x24
 8015904:	9508      	str	r5, [sp, #32]
 8015906:	f506 5a94 	add.w	sl, r6, #4736	@ 0x1280
 801590a:	f8cd a01c 	str.w	sl, [sp, #28]
 801590e:	237f      	movs	r3, #127	@ 0x7f
 8015910:	9306      	str	r3, [sp, #24]
 8015912:	9405      	str	r4, [sp, #20]
 8015914:	f06f 0302 	mvn.w	r3, #2
 8015918:	9304      	str	r3, [sp, #16]
 801591a:	9403      	str	r4, [sp, #12]
 801591c:	4b36      	ldr	r3, [pc, #216]	@ (80159f8 <invoke_inf+0x714>)
 801591e:	9302      	str	r3, [sp, #8]
 8015920:	4b36      	ldr	r3, [pc, #216]	@ (80159fc <invoke_inf+0x718>)
 8015922:	9301      	str	r3, [sp, #4]
 8015924:	4b36      	ldr	r3, [pc, #216]	@ (8015a00 <invoke_inf+0x71c>)
 8015926:	9300      	str	r3, [sp, #0]
 8015928:	464b      	mov	r3, r9
 801592a:	462a      	mov	r2, r5
 801592c:	4629      	mov	r1, r5
 801592e:	4640      	mov	r0, r8
 8015930:	f009 f9a4 	bl	801ec7c <convolve_1x1_s8_fpreq>
/* layer 25:DEPTHWISE_CONV_2D */
depthwise_kernel5x5_stride1_inplace_CHW_fpreq_bitmask(&buffer0[4736],8,8,160,(const q7_t*) CHWweight22,offsetBias22,offsetRBias22,scales22,-128,128,-128,127,&buffer0[4736],&buffer0[0],8,8,160,sbuf,-128);
 8015934:	940e      	str	r4, [sp, #56]	@ 0x38
 8015936:	f8cd b034 	str.w	fp, [sp, #52]	@ 0x34
 801593a:	970c      	str	r7, [sp, #48]	@ 0x30
 801593c:	950b      	str	r5, [sp, #44]	@ 0x2c
 801593e:	950a      	str	r5, [sp, #40]	@ 0x28
 8015940:	9609      	str	r6, [sp, #36]	@ 0x24
 8015942:	f8cd a020 	str.w	sl, [sp, #32]
 8015946:	237f      	movs	r3, #127	@ 0x7f
 8015948:	9307      	str	r3, [sp, #28]
 801594a:	9406      	str	r4, [sp, #24]
 801594c:	2380      	movs	r3, #128	@ 0x80
 801594e:	9305      	str	r3, [sp, #20]
 8015950:	9404      	str	r4, [sp, #16]
 8015952:	4b2c      	ldr	r3, [pc, #176]	@ (8015a04 <invoke_inf+0x720>)
 8015954:	9303      	str	r3, [sp, #12]
 8015956:	e057      	b.n	8015a08 <invoke_inf+0x724>
 8015958:	080aa714 	.word	0x080aa714
 801595c:	080aa774 	.word	0x080aa774
 8015960:	080aa7d4 	.word	0x080aa7d4
 8015964:	080a9814 	.word	0x080a9814
 8015968:	080a99f4 	.word	0x080a99f4
 801596c:	080a9bd4 	.word	0x080a9bd4
 8015970:	080a8e3c 	.word	0x080a8e3c
 8015974:	080a901c 	.word	0x080a901c
 8015978:	080a91fc 	.word	0x080a91fc
 801597c:	080a93dc 	.word	0x080a93dc
 8015980:	080a823c 	.word	0x080a823c
 8015984:	080a829c 	.word	0x080a829c
 8015988:	080a82fc 	.word	0x080a82fc
 801598c:	3d7c2a35 	.word	0x3d7c2a35
 8015990:	c2080000 	.word	0xc2080000
 8015994:	3d5fa742 	.word	0x3d5fa742
 8015998:	3d3378e9 	.word	0x3d3378e9
 801599c:	080a733c 	.word	0x080a733c
 80159a0:	080a751c 	.word	0x080a751c
 80159a4:	080a76fc 	.word	0x080a76fc
 80159a8:	080a6964 	.word	0x080a6964
 80159ac:	080a6b44 	.word	0x080a6b44
 80159b0:	080a6d24 	.word	0x080a6d24
 80159b4:	080a6f04 	.word	0x080a6f04
 80159b8:	080a5564 	.word	0x080a5564
 80159bc:	080a5604 	.word	0x080a5604
 80159c0:	080a56a4 	.word	0x080a56a4
 80159c4:	080a3764 	.word	0x080a3764
 80159c8:	080a39e4 	.word	0x080a39e4
 80159cc:	080a3c64 	.word	0x080a3c64
 80159d0:	080a1144 	.word	0x080a1144
 80159d4:	080a13c4 	.word	0x080a13c4
 80159d8:	080a1644 	.word	0x080a1644
 80159dc:	080a18c4 	.word	0x080a18c4
 80159e0:	0809f704 	.word	0x0809f704
 80159e4:	0809f7a4 	.word	0x0809f7a4
 80159e8:	0809f844 	.word	0x0809f844
 80159ec:	3d188730 	.word	0x3d188730
 80159f0:	3cff28b0 	.word	0x3cff28b0
 80159f4:	3d15631d 	.word	0x3d15631d
 80159f8:	0809d904 	.word	0x0809d904
 80159fc:	0809db84 	.word	0x0809db84
 8015a00:	0809de04 	.word	0x0809de04
 8015a04:	0809c6e4 	.word	0x0809c6e4
 8015a08:	4bb4      	ldr	r3, [pc, #720]	@ (8015cdc <invoke_inf+0x9f8>)
 8015a0a:	9302      	str	r3, [sp, #8]
 8015a0c:	4bb4      	ldr	r3, [pc, #720]	@ (8015ce0 <invoke_inf+0x9fc>)
 8015a0e:	9301      	str	r3, [sp, #4]
 8015a10:	4bb4      	ldr	r3, [pc, #720]	@ (8015ce4 <invoke_inf+0xa00>)
 8015a12:	9300      	str	r3, [sp, #0]
 8015a14:	463b      	mov	r3, r7
 8015a16:	462a      	mov	r2, r5
 8015a18:	4629      	mov	r1, r5
 8015a1a:	4650      	mov	r0, sl
 8015a1c:	f7fb f87c 	bl	8010b18 <depthwise_kernel5x5_stride1_inplace_CHW_fpreq_bitmask>
/* layer 26:CONV_2D */
convolve_1x1_s8_fpreq_bitmask(&buffer0[4736],8,8,160,(const q7_t*) weight23,bias23,scales23,2,128,-128,127,&buffer0[1280],&buffer0[4352],8,8,48,sbuf);
 8015a20:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8015a24:	2330      	movs	r3, #48	@ 0x30
 8015a26:	930b      	str	r3, [sp, #44]	@ 0x2c
 8015a28:	950a      	str	r5, [sp, #40]	@ 0x28
 8015a2a:	9509      	str	r5, [sp, #36]	@ 0x24
 8015a2c:	f506 5388 	add.w	r3, r6, #4352	@ 0x1100
 8015a30:	9308      	str	r3, [sp, #32]
 8015a32:	f506 68a0 	add.w	r8, r6, #1280	@ 0x500
 8015a36:	f8cd 801c 	str.w	r8, [sp, #28]
 8015a3a:	237f      	movs	r3, #127	@ 0x7f
 8015a3c:	9306      	str	r3, [sp, #24]
 8015a3e:	9405      	str	r4, [sp, #20]
 8015a40:	2380      	movs	r3, #128	@ 0x80
 8015a42:	9304      	str	r3, [sp, #16]
 8015a44:	2302      	movs	r3, #2
 8015a46:	9303      	str	r3, [sp, #12]
 8015a48:	4ba7      	ldr	r3, [pc, #668]	@ (8015ce8 <invoke_inf+0xa04>)
 8015a4a:	9302      	str	r3, [sp, #8]
 8015a4c:	4ba7      	ldr	r3, [pc, #668]	@ (8015cec <invoke_inf+0xa08>)
 8015a4e:	9301      	str	r3, [sp, #4]
 8015a50:	4ba7      	ldr	r3, [pc, #668]	@ (8015cf0 <invoke_inf+0xa0c>)
 8015a52:	9300      	str	r3, [sp, #0]
 8015a54:	463b      	mov	r3, r7
 8015a56:	462a      	mov	r2, r5
 8015a58:	4629      	mov	r1, r5
 8015a5a:	4650      	mov	r0, sl
 8015a5c:	f009 f9ea 	bl	801ee34 <convolve_1x1_s8_fpreq_bitmask>
/* layer 27:CONV_2D */
convolve_1x1_s8_fpreq_bitmask_partialCH(&buffer0[1280],8,8,48,(const q7_t*)weight24,(const q7_t*)weight24Flash,12,bias24,scales24,-128,-2,-128,127,&buffer0[10496],&buffer0[4736],8,8,144,sbuf);
 8015a60:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8015a64:	f04f 0990 	mov.w	r9, #144	@ 0x90
 8015a68:	f8cd 9034 	str.w	r9, [sp, #52]	@ 0x34
 8015a6c:	950c      	str	r5, [sp, #48]	@ 0x30
 8015a6e:	950b      	str	r5, [sp, #44]	@ 0x2c
 8015a70:	f8cd a028 	str.w	sl, [sp, #40]	@ 0x28
 8015a74:	f506 5724 	add.w	r7, r6, #10496	@ 0x2900
 8015a78:	9709      	str	r7, [sp, #36]	@ 0x24
 8015a7a:	237f      	movs	r3, #127	@ 0x7f
 8015a7c:	9308      	str	r3, [sp, #32]
 8015a7e:	9407      	str	r4, [sp, #28]
 8015a80:	f06f 0301 	mvn.w	r3, #1
 8015a84:	9306      	str	r3, [sp, #24]
 8015a86:	9405      	str	r4, [sp, #20]
 8015a88:	4b9a      	ldr	r3, [pc, #616]	@ (8015cf4 <invoke_inf+0xa10>)
 8015a8a:	9304      	str	r3, [sp, #16]
 8015a8c:	4b9a      	ldr	r3, [pc, #616]	@ (8015cf8 <invoke_inf+0xa14>)
 8015a8e:	9303      	str	r3, [sp, #12]
 8015a90:	230c      	movs	r3, #12
 8015a92:	9302      	str	r3, [sp, #8]
 8015a94:	4b99      	ldr	r3, [pc, #612]	@ (8015cfc <invoke_inf+0xa18>)
 8015a96:	9301      	str	r3, [sp, #4]
 8015a98:	4b99      	ldr	r3, [pc, #612]	@ (8015d00 <invoke_inf+0xa1c>)
 8015a9a:	9300      	str	r3, [sp, #0]
 8015a9c:	2330      	movs	r3, #48	@ 0x30
 8015a9e:	462a      	mov	r2, r5
 8015aa0:	4629      	mov	r1, r5
 8015aa2:	4640      	mov	r0, r8
 8015aa4:	f009 fac7 	bl	801f036 <convolve_1x1_s8_fpreq_bitmask_partialCH>
/* layer 28:DEPTHWISE_CONV_2D */
depthwise_kernel3x3_stride1_inplace_CHW_fpreq_bitmask(&buffer0[10496],8,8,144,(const q7_t*) CHWweight25,offsetBias25,offsetRBias25,scales25,-128,128,-128,127,&buffer0[10496],&buffer0[5888],8,8,144,sbuf,-128);
 8015aa8:	940e      	str	r4, [sp, #56]	@ 0x38
 8015aaa:	f8cd b034 	str.w	fp, [sp, #52]	@ 0x34
 8015aae:	f8cd 9030 	str.w	r9, [sp, #48]	@ 0x30
 8015ab2:	950b      	str	r5, [sp, #44]	@ 0x2c
 8015ab4:	950a      	str	r5, [sp, #40]	@ 0x28
 8015ab6:	f506 53b8 	add.w	r3, r6, #5888	@ 0x1700
 8015aba:	9309      	str	r3, [sp, #36]	@ 0x24
 8015abc:	9708      	str	r7, [sp, #32]
 8015abe:	237f      	movs	r3, #127	@ 0x7f
 8015ac0:	9307      	str	r3, [sp, #28]
 8015ac2:	9406      	str	r4, [sp, #24]
 8015ac4:	2380      	movs	r3, #128	@ 0x80
 8015ac6:	9305      	str	r3, [sp, #20]
 8015ac8:	9404      	str	r4, [sp, #16]
 8015aca:	4b8e      	ldr	r3, [pc, #568]	@ (8015d04 <invoke_inf+0xa20>)
 8015acc:	9303      	str	r3, [sp, #12]
 8015ace:	4b8e      	ldr	r3, [pc, #568]	@ (8015d08 <invoke_inf+0xa24>)
 8015ad0:	9302      	str	r3, [sp, #8]
 8015ad2:	4b8e      	ldr	r3, [pc, #568]	@ (8015d0c <invoke_inf+0xa28>)
 8015ad4:	9301      	str	r3, [sp, #4]
 8015ad6:	4b8e      	ldr	r3, [pc, #568]	@ (8015d10 <invoke_inf+0xa2c>)
 8015ad8:	9300      	str	r3, [sp, #0]
 8015ada:	464b      	mov	r3, r9
 8015adc:	462a      	mov	r2, r5
 8015ade:	4629      	mov	r1, r5
 8015ae0:	4638      	mov	r0, r7
 8015ae2:	f7fa fb43 	bl	801016c <depthwise_kernel3x3_stride1_inplace_CHW_fpreq_bitmask>
/* layer 29:CONV_2D */
convolve_1x1_s8_fpreq_bitmask(&buffer0[10496],8,8,144,(const q7_t*) weight26,bias26,scales26,17,128,-128,127,&buffer0[19712],&buffer0[10112],8,8,48,sbuf);
 8015ae6:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8015aea:	2330      	movs	r3, #48	@ 0x30
 8015aec:	930b      	str	r3, [sp, #44]	@ 0x2c
 8015aee:	950a      	str	r5, [sp, #40]	@ 0x28
 8015af0:	9509      	str	r5, [sp, #36]	@ 0x24
 8015af2:	f506 531e 	add.w	r3, r6, #10112	@ 0x2780
 8015af6:	9308      	str	r3, [sp, #32]
 8015af8:	f506 4a9a 	add.w	sl, r6, #19712	@ 0x4d00
 8015afc:	f8cd a01c 	str.w	sl, [sp, #28]
 8015b00:	237f      	movs	r3, #127	@ 0x7f
 8015b02:	9306      	str	r3, [sp, #24]
 8015b04:	9405      	str	r4, [sp, #20]
 8015b06:	2380      	movs	r3, #128	@ 0x80
 8015b08:	9304      	str	r3, [sp, #16]
 8015b0a:	2311      	movs	r3, #17
 8015b0c:	9303      	str	r3, [sp, #12]
 8015b0e:	4b81      	ldr	r3, [pc, #516]	@ (8015d14 <invoke_inf+0xa30>)
 8015b10:	9302      	str	r3, [sp, #8]
 8015b12:	4b81      	ldr	r3, [pc, #516]	@ (8015d18 <invoke_inf+0xa34>)
 8015b14:	9301      	str	r3, [sp, #4]
 8015b16:	4b81      	ldr	r3, [pc, #516]	@ (8015d1c <invoke_inf+0xa38>)
 8015b18:	9300      	str	r3, [sp, #0]
 8015b1a:	464b      	mov	r3, r9
 8015b1c:	462a      	mov	r2, r5
 8015b1e:	4629      	mov	r1, r5
 8015b20:	4638      	mov	r0, r7
 8015b22:	f009 f987 	bl	801ee34 <convolve_1x1_s8_fpreq_bitmask>
/* layer 30:ADD */
add_fpreq_bitmask(3072, &buffer0[1280],0.034391046,2,&buffer0[19712],0.027072277,17,0.039104667,6,&buffer0[7040],&buffer0[10496]);
 8015b26:	f506 59dc 	add.w	r9, r6, #7040	@ 0x1b80
 8015b2a:	9700      	str	r7, [sp, #0]
 8015b2c:	464b      	mov	r3, r9
 8015b2e:	eef1 2a08 	vmov.f32	s5, #24	@ 0x40c00000  6.0
 8015b32:	ed9f 2a7b 	vldr	s4, [pc, #492]	@ 8015d20 <invoke_inf+0xa3c>
 8015b36:	eef3 1a01 	vmov.f32	s3, #49	@ 0x41880000  17.0
 8015b3a:	ed9f 1a7a 	vldr	s2, [pc, #488]	@ 8015d24 <invoke_inf+0xa40>
 8015b3e:	4652      	mov	r2, sl
 8015b40:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 8015b44:	ed9f 0a78 	vldr	s0, [pc, #480]	@ 8015d28 <invoke_inf+0xa44>
 8015b48:	4641      	mov	r1, r8
 8015b4a:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8015b4e:	f008 fcc3 	bl	801e4d8 <add_fpreq_bitmask>
/* layer 31:CONV_2D */
convolve_1x1_s8_fpreq_bitmask_partialCH(&buffer0[7040],8,8,48,(const q7_t*)weight27,(const q7_t*)weight27Flash,24,bias27,scales27,-128,-6,-128,127,&buffer0[20096],&buffer0[13568],8,8,192,sbuf);
 8015b52:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8015b56:	f04f 08c0 	mov.w	r8, #192	@ 0xc0
 8015b5a:	f8cd 8034 	str.w	r8, [sp, #52]	@ 0x34
 8015b5e:	950c      	str	r5, [sp, #48]	@ 0x30
 8015b60:	950b      	str	r5, [sp, #44]	@ 0x2c
 8015b62:	f506 5354 	add.w	r3, r6, #13568	@ 0x3500
 8015b66:	930a      	str	r3, [sp, #40]	@ 0x28
 8015b68:	f506 479d 	add.w	r7, r6, #20096	@ 0x4e80
 8015b6c:	9709      	str	r7, [sp, #36]	@ 0x24
 8015b6e:	237f      	movs	r3, #127	@ 0x7f
 8015b70:	9308      	str	r3, [sp, #32]
 8015b72:	9407      	str	r4, [sp, #28]
 8015b74:	f06f 0305 	mvn.w	r3, #5
 8015b78:	9306      	str	r3, [sp, #24]
 8015b7a:	9405      	str	r4, [sp, #20]
 8015b7c:	4b6b      	ldr	r3, [pc, #428]	@ (8015d2c <invoke_inf+0xa48>)
 8015b7e:	9304      	str	r3, [sp, #16]
 8015b80:	4b6b      	ldr	r3, [pc, #428]	@ (8015d30 <invoke_inf+0xa4c>)
 8015b82:	9303      	str	r3, [sp, #12]
 8015b84:	2318      	movs	r3, #24
 8015b86:	9302      	str	r3, [sp, #8]
 8015b88:	4b6a      	ldr	r3, [pc, #424]	@ (8015d34 <invoke_inf+0xa50>)
 8015b8a:	9301      	str	r3, [sp, #4]
 8015b8c:	4b6a      	ldr	r3, [pc, #424]	@ (8015d38 <invoke_inf+0xa54>)
 8015b8e:	9300      	str	r3, [sp, #0]
 8015b90:	2330      	movs	r3, #48	@ 0x30
 8015b92:	462a      	mov	r2, r5
 8015b94:	4629      	mov	r1, r5
 8015b96:	4648      	mov	r0, r9
 8015b98:	f009 fa4d 	bl	801f036 <convolve_1x1_s8_fpreq_bitmask_partialCH>
/* layer 32:DEPTHWISE_CONV_2D */
depthwise_kernel3x3_stride1_inplace_CHW_fpreq_bitmask(&buffer0[20096],8,8,192,(const q7_t*) CHWweight28,offsetBias28,offsetRBias28,scales28,-128,128,-128,127,&buffer0[20096],&buffer0[15104],8,8,192,sbuf,-128);
 8015b9c:	940e      	str	r4, [sp, #56]	@ 0x38
 8015b9e:	f8cd b034 	str.w	fp, [sp, #52]	@ 0x34
 8015ba2:	f8cd 8030 	str.w	r8, [sp, #48]	@ 0x30
 8015ba6:	950b      	str	r5, [sp, #44]	@ 0x2c
 8015ba8:	950a      	str	r5, [sp, #40]	@ 0x28
 8015baa:	f506 566c 	add.w	r6, r6, #15104	@ 0x3b00
 8015bae:	9609      	str	r6, [sp, #36]	@ 0x24
 8015bb0:	9708      	str	r7, [sp, #32]
 8015bb2:	237f      	movs	r3, #127	@ 0x7f
 8015bb4:	9307      	str	r3, [sp, #28]
 8015bb6:	9406      	str	r4, [sp, #24]
 8015bb8:	2380      	movs	r3, #128	@ 0x80
 8015bba:	9305      	str	r3, [sp, #20]
 8015bbc:	9404      	str	r4, [sp, #16]
 8015bbe:	4b5f      	ldr	r3, [pc, #380]	@ (8015d3c <invoke_inf+0xa58>)
 8015bc0:	9303      	str	r3, [sp, #12]
 8015bc2:	4b5f      	ldr	r3, [pc, #380]	@ (8015d40 <invoke_inf+0xa5c>)
 8015bc4:	9302      	str	r3, [sp, #8]
 8015bc6:	4b5f      	ldr	r3, [pc, #380]	@ (8015d44 <invoke_inf+0xa60>)
 8015bc8:	9301      	str	r3, [sp, #4]
 8015bca:	4b5f      	ldr	r3, [pc, #380]	@ (8015d48 <invoke_inf+0xa64>)
 8015bcc:	9300      	str	r3, [sp, #0]
 8015bce:	4643      	mov	r3, r8
 8015bd0:	462a      	mov	r2, r5
 8015bd2:	4629      	mov	r1, r5
 8015bd4:	4638      	mov	r0, r7
 8015bd6:	f7fa fac9 	bl	801016c <depthwise_kernel3x3_stride1_inplace_CHW_fpreq_bitmask>
/* layer 33:CONV_2D */
convolve_1x1_s8_fpreq_bitmask(&buffer0[20096],8,8,192,(const q7_t*) weight29,bias29,scales29,-8,128,-128,127,&buffer0[32384],&buffer0[19712],8,8,48,sbuf);
 8015bda:	f506 569c 	add.w	r6, r6, #4992	@ 0x1380
 8015bde:	f8df a1a0 	ldr.w	sl, [pc, #416]	@ 8015d80 <invoke_inf+0xa9c>
 8015be2:	f8cd a030 	str.w	sl, [sp, #48]	@ 0x30
 8015be6:	2330      	movs	r3, #48	@ 0x30
 8015be8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8015bea:	46a8      	mov	r8, r5
 8015bec:	950a      	str	r5, [sp, #40]	@ 0x28
 8015bee:	9509      	str	r5, [sp, #36]	@ 0x24
 8015bf0:	f5a6 73c0 	sub.w	r3, r6, #384	@ 0x180
 8015bf4:	9308      	str	r3, [sp, #32]
 8015bf6:	f506 5940 	add.w	r9, r6, #12288	@ 0x3000
 8015bfa:	f8cd 901c 	str.w	r9, [sp, #28]
 8015bfe:	277f      	movs	r7, #127	@ 0x7f
 8015c00:	9706      	str	r7, [sp, #24]
 8015c02:	4625      	mov	r5, r4
 8015c04:	9405      	str	r4, [sp, #20]
 8015c06:	2380      	movs	r3, #128	@ 0x80
 8015c08:	9304      	str	r3, [sp, #16]
 8015c0a:	f06f 0307 	mvn.w	r3, #7
 8015c0e:	9303      	str	r3, [sp, #12]
 8015c10:	4b4e      	ldr	r3, [pc, #312]	@ (8015d4c <invoke_inf+0xa68>)
 8015c12:	9302      	str	r3, [sp, #8]
 8015c14:	4b4e      	ldr	r3, [pc, #312]	@ (8015d50 <invoke_inf+0xa6c>)
 8015c16:	9301      	str	r3, [sp, #4]
 8015c18:	4b4e      	ldr	r3, [pc, #312]	@ (8015d54 <invoke_inf+0xa70>)
 8015c1a:	9300      	str	r3, [sp, #0]
 8015c1c:	23c0      	movs	r3, #192	@ 0xc0
 8015c1e:	4642      	mov	r2, r8
 8015c20:	4641      	mov	r1, r8
 8015c22:	4630      	mov	r0, r6
 8015c24:	f009 f906 	bl	801ee34 <convolve_1x1_s8_fpreq_bitmask>
/* layer 34:ADD */
add_fpreq_bitmask(3072, &buffer0[7040],0.039104667,6,&buffer0[32384],0.038176756,-8,0.05495224,0,&buffer0[16640],&buffer0[20096]);
 8015c28:	f5a6 6458 	sub.w	r4, r6, #3456	@ 0xd80
 8015c2c:	9600      	str	r6, [sp, #0]
 8015c2e:	4623      	mov	r3, r4
 8015c30:	eef0 2a48 	vmov.f32	s5, s16
 8015c34:	ed9f 2a48 	vldr	s4, [pc, #288]	@ 8015d58 <invoke_inf+0xa74>
 8015c38:	eefa 1a00 	vmov.f32	s3, #160	@ 0xc1000000 -8.0
 8015c3c:	ed9f 1a47 	vldr	s2, [pc, #284]	@ 8015d5c <invoke_inf+0xa78>
 8015c40:	464a      	mov	r2, r9
 8015c42:	eef1 0a08 	vmov.f32	s1, #24	@ 0x40c00000  6.0
 8015c46:	ed9f 0a36 	vldr	s0, [pc, #216]	@ 8015d20 <invoke_inf+0xa3c>
 8015c4a:	f5a6 514c 	sub.w	r1, r6, #13056	@ 0x3300
 8015c4e:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8015c52:	f008 fc41 	bl	801e4d8 <add_fpreq_bitmask>
/* layer 35:CONV_2D */
convolve_1x1_s8_fpreq_bitmask_partialCH(&buffer0[16640],8,8,48,(const q7_t*)weight30,(const q7_t*)weight30Flash,24,bias30,scales30,-128,0,-128,127,&buffer0[30560],&buffer0[23168],8,8,240,sbuf);
 8015c56:	f8cd a038 	str.w	sl, [sp, #56]	@ 0x38
 8015c5a:	f04f 09f0 	mov.w	r9, #240	@ 0xf0
 8015c5e:	f8cd 9034 	str.w	r9, [sp, #52]	@ 0x34
 8015c62:	f8cd 8030 	str.w	r8, [sp, #48]	@ 0x30
 8015c66:	f8cd 802c 	str.w	r8, [sp, #44]	@ 0x2c
 8015c6a:	f506 6340 	add.w	r3, r6, #3072	@ 0xc00
 8015c6e:	930a      	str	r3, [sp, #40]	@ 0x28
 8015c70:	f8df b110 	ldr.w	fp, [pc, #272]	@ 8015d84 <invoke_inf+0xaa0>
 8015c74:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8015c78:	9708      	str	r7, [sp, #32]
 8015c7a:	9507      	str	r5, [sp, #28]
 8015c7c:	2300      	movs	r3, #0
 8015c7e:	9306      	str	r3, [sp, #24]
 8015c80:	9505      	str	r5, [sp, #20]
 8015c82:	4b37      	ldr	r3, [pc, #220]	@ (8015d60 <invoke_inf+0xa7c>)
 8015c84:	9304      	str	r3, [sp, #16]
 8015c86:	4b37      	ldr	r3, [pc, #220]	@ (8015d64 <invoke_inf+0xa80>)
 8015c88:	9303      	str	r3, [sp, #12]
 8015c8a:	2318      	movs	r3, #24
 8015c8c:	9302      	str	r3, [sp, #8]
 8015c8e:	4b36      	ldr	r3, [pc, #216]	@ (8015d68 <invoke_inf+0xa84>)
 8015c90:	9301      	str	r3, [sp, #4]
 8015c92:	4b36      	ldr	r3, [pc, #216]	@ (8015d6c <invoke_inf+0xa88>)
 8015c94:	9300      	str	r3, [sp, #0]
 8015c96:	2330      	movs	r3, #48	@ 0x30
 8015c98:	4642      	mov	r2, r8
 8015c9a:	4641      	mov	r1, r8
 8015c9c:	4620      	mov	r0, r4
 8015c9e:	f009 f9ca 	bl	801f036 <convolve_1x1_s8_fpreq_bitmask_partialCH>
/* layer 36:DEPTHWISE_CONV_2D */
depthwise_kernel7x7_stride2_inplace_CHW_fpreq_bitmask(&buffer0[30560],8,8,240,(const q7_t*) CHWweight31,offsetBias31,offsetRBias31,scales31,-128,128,-128,127,&buffer0[30560],&buffer0[25088],4,4,240,sbuf,-128);
 8015ca2:	950e      	str	r5, [sp, #56]	@ 0x38
 8015ca4:	f8cd a034 	str.w	sl, [sp, #52]	@ 0x34
 8015ca8:	f8cd 9030 	str.w	r9, [sp, #48]	@ 0x30
 8015cac:	2404      	movs	r4, #4
 8015cae:	940b      	str	r4, [sp, #44]	@ 0x2c
 8015cb0:	940a      	str	r4, [sp, #40]	@ 0x28
 8015cb2:	f506 539c 	add.w	r3, r6, #4992	@ 0x1380
 8015cb6:	9309      	str	r3, [sp, #36]	@ 0x24
 8015cb8:	f8cd b020 	str.w	fp, [sp, #32]
 8015cbc:	9707      	str	r7, [sp, #28]
 8015cbe:	9506      	str	r5, [sp, #24]
 8015cc0:	2380      	movs	r3, #128	@ 0x80
 8015cc2:	9305      	str	r3, [sp, #20]
 8015cc4:	9504      	str	r5, [sp, #16]
 8015cc6:	4b2a      	ldr	r3, [pc, #168]	@ (8015d70 <invoke_inf+0xa8c>)
 8015cc8:	9303      	str	r3, [sp, #12]
 8015cca:	4b2a      	ldr	r3, [pc, #168]	@ (8015d74 <invoke_inf+0xa90>)
 8015ccc:	9302      	str	r3, [sp, #8]
 8015cce:	4b2a      	ldr	r3, [pc, #168]	@ (8015d78 <invoke_inf+0xa94>)
 8015cd0:	9301      	str	r3, [sp, #4]
 8015cd2:	4b2a      	ldr	r3, [pc, #168]	@ (8015d7c <invoke_inf+0xa98>)
 8015cd4:	9300      	str	r3, [sp, #0]
 8015cd6:	464b      	mov	r3, r9
 8015cd8:	4642      	mov	r2, r8
 8015cda:	e055      	b.n	8015d88 <invoke_inf+0xaa4>
 8015cdc:	2000e4d0 	.word	0x2000e4d0
 8015ce0:	200081a0 	.word	0x200081a0
 8015ce4:	0809c964 	.word	0x0809c964
 8015ce8:	0809a824 	.word	0x0809a824
 8015cec:	200080d8 	.word	0x200080d8
 8015cf0:	0809a8e4 	.word	0x0809a8e4
 8015cf4:	080991a4 	.word	0x080991a4
 8015cf8:	200077cc 	.word	0x200077cc
 8015cfc:	080993e4 	.word	0x080993e4
 8015d00:	20007a14 	.word	0x20007a14
 8015d04:	08098544 	.word	0x08098544
 8015d08:	2000e290 	.word	0x2000e290
 8015d0c:	20007584 	.word	0x20007584
 8015d10:	08098c94 	.word	0x08098c94
 8015d14:	08096984 	.word	0x08096984
 8015d18:	200074bc 	.word	0x200074bc
 8015d1c:	08096a44 	.word	0x08096a44
 8015d20:	3d202c37 	.word	0x3d202c37
 8015d24:	3cddc6ae 	.word	0x3cddc6ae
 8015d28:	3d0cdda0 	.word	0x3d0cdda0
 8015d2c:	08095484 	.word	0x08095484
 8015d30:	20005fb0 	.word	0x20005fb0
 8015d34:	08095784 	.word	0x08095784
 8015d38:	200062b8 	.word	0x200062b8
 8015d3c:	08094404 	.word	0x08094404
 8015d40:	2000df90 	.word	0x2000df90
 8015d44:	20005ca8 	.word	0x20005ca8
 8015d48:	08094dc4 	.word	0x08094dc4
 8015d4c:	08091f44 	.word	0x08091f44
 8015d50:	20005be0 	.word	0x20005be0
 8015d54:	08092004 	.word	0x08092004
 8015d58:	3d61159a 	.word	0x3d61159a
 8015d5c:	3d1c5f3b 	.word	0x3d1c5f3b
 8015d60:	08090504 	.word	0x08090504
 8015d64:	20004194 	.word	0x20004194
 8015d68:	080908c4 	.word	0x080908c4
 8015d6c:	2000455c 	.word	0x2000455c
 8015d70:	0808a564 	.word	0x0808a564
 8015d74:	2000dbd0 	.word	0x2000dbd0
 8015d78:	20003dcc 	.word	0x20003dcc
 8015d7c:	0808d714 	.word	0x0808d714
 8015d80:	2003a750 	.word	0x2003a750
 8015d84:	20015eb0 	.word	0x20015eb0
 8015d88:	4641      	mov	r1, r8
 8015d8a:	4658      	mov	r0, fp
 8015d8c:	f7fc fb79 	bl	8012482 <depthwise_kernel7x7_stride2_inplace_CHW_fpreq_bitmask>
/* layer 37:CONV_2D */
convolve_1x1_s8_fpreq_bitmask(&buffer0[30560],4,4,240,(const q7_t*) weight32,bias32,scales32,-1,128,-128,127,&buffer0[29024],&buffer0[25568],4,4,96,sbuf);
 8015d90:	f8cd a030 	str.w	sl, [sp, #48]	@ 0x30
 8015d94:	2360      	movs	r3, #96	@ 0x60
 8015d96:	930b      	str	r3, [sp, #44]	@ 0x2c
 8015d98:	940a      	str	r4, [sp, #40]	@ 0x28
 8015d9a:	9409      	str	r4, [sp, #36]	@ 0x24
 8015d9c:	f506 53ab 	add.w	r3, r6, #5472	@ 0x1560
 8015da0:	9308      	str	r3, [sp, #32]
 8015da2:	f503 6858 	add.w	r8, r3, #3456	@ 0xd80
 8015da6:	f8cd 801c 	str.w	r8, [sp, #28]
 8015daa:	9706      	str	r7, [sp, #24]
 8015dac:	9505      	str	r5, [sp, #20]
 8015dae:	2380      	movs	r3, #128	@ 0x80
 8015db0:	9304      	str	r3, [sp, #16]
 8015db2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8015db6:	9303      	str	r3, [sp, #12]
 8015db8:	4bb5      	ldr	r3, [pc, #724]	@ (8016090 <invoke_inf+0xdac>)
 8015dba:	9302      	str	r3, [sp, #8]
 8015dbc:	4bb5      	ldr	r3, [pc, #724]	@ (8016094 <invoke_inf+0xdb0>)
 8015dbe:	9301      	str	r3, [sp, #4]
 8015dc0:	4bb5      	ldr	r3, [pc, #724]	@ (8016098 <invoke_inf+0xdb4>)
 8015dc2:	9300      	str	r3, [sp, #0]
 8015dc4:	464b      	mov	r3, r9
 8015dc6:	4622      	mov	r2, r4
 8015dc8:	4621      	mov	r1, r4
 8015dca:	4658      	mov	r0, fp
 8015dcc:	f009 f832 	bl	801ee34 <convolve_1x1_s8_fpreq_bitmask>
/* layer 38:CONV_2D */
convolve_1x1_s8_fpreq_bitmask(&buffer0[29024],4,4,96,(const q7_t*) weight33,bias33,scales33,-128,1,-128,127,&buffer0[30560],&buffer0[25760],4,4,384,sbuf);
 8015dd0:	f8cd a030 	str.w	sl, [sp, #48]	@ 0x30
 8015dd4:	f44f 79c0 	mov.w	r9, #384	@ 0x180
 8015dd8:	f8cd 902c 	str.w	r9, [sp, #44]	@ 0x2c
 8015ddc:	940a      	str	r4, [sp, #40]	@ 0x28
 8015dde:	9409      	str	r4, [sp, #36]	@ 0x24
 8015de0:	f506 53b1 	add.w	r3, r6, #5664	@ 0x1620
 8015de4:	9308      	str	r3, [sp, #32]
 8015de6:	f8cd b01c 	str.w	fp, [sp, #28]
 8015dea:	9706      	str	r7, [sp, #24]
 8015dec:	9505      	str	r5, [sp, #20]
 8015dee:	2301      	movs	r3, #1
 8015df0:	9304      	str	r3, [sp, #16]
 8015df2:	9503      	str	r5, [sp, #12]
 8015df4:	4ba9      	ldr	r3, [pc, #676]	@ (801609c <invoke_inf+0xdb8>)
 8015df6:	9302      	str	r3, [sp, #8]
 8015df8:	4ba9      	ldr	r3, [pc, #676]	@ (80160a0 <invoke_inf+0xdbc>)
 8015dfa:	9301      	str	r3, [sp, #4]
 8015dfc:	4ba9      	ldr	r3, [pc, #676]	@ (80160a4 <invoke_inf+0xdc0>)
 8015dfe:	9300      	str	r3, [sp, #0]
 8015e00:	2360      	movs	r3, #96	@ 0x60
 8015e02:	4622      	mov	r2, r4
 8015e04:	4621      	mov	r1, r4
 8015e06:	4640      	mov	r0, r8
 8015e08:	f009 f814 	bl	801ee34 <convolve_1x1_s8_fpreq_bitmask>
/* layer 39:DEPTHWISE_CONV_2D */
depthwise_kernel5x5_stride1_inplace_CHW_fpreq_bitmask(&buffer0[30560],4,4,384,(const q7_t*) CHWweight34,offsetBias34,offsetRBias34,scales34,-128,128,-128,127,&buffer0[30560],&buffer0[26528],4,4,384,sbuf,-128);
 8015e0c:	950e      	str	r5, [sp, #56]	@ 0x38
 8015e0e:	f8cd a034 	str.w	sl, [sp, #52]	@ 0x34
 8015e12:	f8cd 9030 	str.w	r9, [sp, #48]	@ 0x30
 8015e16:	940b      	str	r4, [sp, #44]	@ 0x2c
 8015e18:	940a      	str	r4, [sp, #40]	@ 0x28
 8015e1a:	f506 53c9 	add.w	r3, r6, #6432	@ 0x1920
 8015e1e:	9309      	str	r3, [sp, #36]	@ 0x24
 8015e20:	f8cd b020 	str.w	fp, [sp, #32]
 8015e24:	9707      	str	r7, [sp, #28]
 8015e26:	9506      	str	r5, [sp, #24]
 8015e28:	2380      	movs	r3, #128	@ 0x80
 8015e2a:	9305      	str	r3, [sp, #20]
 8015e2c:	9504      	str	r5, [sp, #16]
 8015e2e:	4b9e      	ldr	r3, [pc, #632]	@ (80160a8 <invoke_inf+0xdc4>)
 8015e30:	9303      	str	r3, [sp, #12]
 8015e32:	4b9e      	ldr	r3, [pc, #632]	@ (80160ac <invoke_inf+0xdc8>)
 8015e34:	9302      	str	r3, [sp, #8]
 8015e36:	4b9e      	ldr	r3, [pc, #632]	@ (80160b0 <invoke_inf+0xdcc>)
 8015e38:	9301      	str	r3, [sp, #4]
 8015e3a:	4b9e      	ldr	r3, [pc, #632]	@ (80160b4 <invoke_inf+0xdd0>)
 8015e3c:	9300      	str	r3, [sp, #0]
 8015e3e:	464b      	mov	r3, r9
 8015e40:	4622      	mov	r2, r4
 8015e42:	4621      	mov	r1, r4
 8015e44:	4658      	mov	r0, fp
 8015e46:	f7fa fe67 	bl	8010b18 <depthwise_kernel5x5_stride1_inplace_CHW_fpreq_bitmask>
/* layer 40:CONV_2D */
convolve_1x1_s8_fpreq_bitmask(&buffer0[30560],4,4,384,(const q7_t*) weight35,bias35,scales35,-16,128,-128,127,&buffer0[30560],&buffer0[27296],4,4,96,sbuf);
 8015e4a:	f8cd a030 	str.w	sl, [sp, #48]	@ 0x30
 8015e4e:	2360      	movs	r3, #96	@ 0x60
 8015e50:	930b      	str	r3, [sp, #44]	@ 0x2c
 8015e52:	940a      	str	r4, [sp, #40]	@ 0x28
 8015e54:	9409      	str	r4, [sp, #36]	@ 0x24
 8015e56:	f506 53e1 	add.w	r3, r6, #7200	@ 0x1c20
 8015e5a:	9308      	str	r3, [sp, #32]
 8015e5c:	f8cd b01c 	str.w	fp, [sp, #28]
 8015e60:	9706      	str	r7, [sp, #24]
 8015e62:	9505      	str	r5, [sp, #20]
 8015e64:	2380      	movs	r3, #128	@ 0x80
 8015e66:	9304      	str	r3, [sp, #16]
 8015e68:	f06f 030f 	mvn.w	r3, #15
 8015e6c:	9303      	str	r3, [sp, #12]
 8015e6e:	4b92      	ldr	r3, [pc, #584]	@ (80160b8 <invoke_inf+0xdd4>)
 8015e70:	9302      	str	r3, [sp, #8]
 8015e72:	4b92      	ldr	r3, [pc, #584]	@ (80160bc <invoke_inf+0xdd8>)
 8015e74:	9301      	str	r3, [sp, #4]
 8015e76:	4b92      	ldr	r3, [pc, #584]	@ (80160c0 <invoke_inf+0xddc>)
 8015e78:	9300      	str	r3, [sp, #0]
 8015e7a:	464b      	mov	r3, r9
 8015e7c:	4622      	mov	r2, r4
 8015e7e:	4621      	mov	r1, r4
 8015e80:	4658      	mov	r0, fp
 8015e82:	f008 ffd7 	bl	801ee34 <convolve_1x1_s8_fpreq_bitmask>
/* layer 41:ADD */
add_fpreq_bitmask(1536, &buffer0[29024],0.027058998,-1,&buffer0[30560],0.022201976,-16,0.031616762,-1,&buffer0[32288],&buffer0[27488]);
 8015e86:	ed9f 8a8f 	vldr	s16, [pc, #572]	@ 80160c4 <invoke_inf+0xde0>
 8015e8a:	f506 53e7 	add.w	r3, r6, #7392	@ 0x1ce0
 8015e8e:	9300      	str	r3, [sp, #0]
 8015e90:	f503 5396 	add.w	r3, r3, #4800	@ 0x12c0
 8015e94:	eeff 2a00 	vmov.f32	s5, #240	@ 0xbf800000 -1.0
 8015e98:	eeb0 2a48 	vmov.f32	s4, s16
 8015e9c:	eefb 1a00 	vmov.f32	s3, #176	@ 0xc1800000 -16.0
 8015ea0:	ed9f 1a89 	vldr	s2, [pc, #548]	@ 80160c8 <invoke_inf+0xde4>
 8015ea4:	465a      	mov	r2, fp
 8015ea6:	eef0 0a62 	vmov.f32	s1, s5
 8015eaa:	ed9f 0a88 	vldr	s0, [pc, #544]	@ 80160cc <invoke_inf+0xde8>
 8015eae:	4641      	mov	r1, r8
 8015eb0:	f44f 60c0 	mov.w	r0, #1536	@ 0x600
 8015eb4:	f008 fb10 	bl	801e4d8 <add_fpreq_bitmask>
/* layer 42:CONV_2D */
convolve_1x1_s8_fpreq_bitmask(&buffer0[32288],4,4,96,(const q7_t*) weight36,bias36,scales36,-128,1,-128,127,&buffer0[33824],&buffer0[29024],4,4,384,sbuf);
 8015eb8:	f8cd a030 	str.w	sl, [sp, #48]	@ 0x30
 8015ebc:	f8cd 902c 	str.w	r9, [sp, #44]	@ 0x2c
 8015ec0:	940a      	str	r4, [sp, #40]	@ 0x28
 8015ec2:	9409      	str	r4, [sp, #36]	@ 0x24
 8015ec4:	f8cd 8020 	str.w	r8, [sp, #32]
 8015ec8:	f508 5896 	add.w	r8, r8, #4800	@ 0x12c0
 8015ecc:	f8cd 801c 	str.w	r8, [sp, #28]
 8015ed0:	9706      	str	r7, [sp, #24]
 8015ed2:	9505      	str	r5, [sp, #20]
 8015ed4:	2301      	movs	r3, #1
 8015ed6:	9304      	str	r3, [sp, #16]
 8015ed8:	9503      	str	r5, [sp, #12]
 8015eda:	4b7d      	ldr	r3, [pc, #500]	@ (80160d0 <invoke_inf+0xdec>)
 8015edc:	9302      	str	r3, [sp, #8]
 8015ede:	4b7d      	ldr	r3, [pc, #500]	@ (80160d4 <invoke_inf+0xdf0>)
 8015ee0:	9301      	str	r3, [sp, #4]
 8015ee2:	4b7d      	ldr	r3, [pc, #500]	@ (80160d8 <invoke_inf+0xdf4>)
 8015ee4:	9300      	str	r3, [sp, #0]
 8015ee6:	2360      	movs	r3, #96	@ 0x60
 8015ee8:	4622      	mov	r2, r4
 8015eea:	4621      	mov	r1, r4
 8015eec:	f5a8 60c0 	sub.w	r0, r8, #1536	@ 0x600
 8015ef0:	f008 ffa0 	bl	801ee34 <convolve_1x1_s8_fpreq_bitmask>
/* layer 43:DEPTHWISE_CONV_2D */
depthwise_kernel5x5_stride1_inplace_CHW_fpreq_bitmask(&buffer0[33824],4,4,384,(const q7_t*) CHWweight37,offsetBias37,offsetRBias37,scales37,-128,128,-128,127,&buffer0[33824],&buffer0[29792],4,4,384,sbuf,-128);
 8015ef4:	950e      	str	r5, [sp, #56]	@ 0x38
 8015ef6:	f8cd a034 	str.w	sl, [sp, #52]	@ 0x34
 8015efa:	f8cd 9030 	str.w	r9, [sp, #48]	@ 0x30
 8015efe:	940b      	str	r4, [sp, #44]	@ 0x2c
 8015f00:	940a      	str	r4, [sp, #40]	@ 0x28
 8015f02:	f5a8 637c 	sub.w	r3, r8, #4032	@ 0xfc0
 8015f06:	9309      	str	r3, [sp, #36]	@ 0x24
 8015f08:	f8cd 8020 	str.w	r8, [sp, #32]
 8015f0c:	9707      	str	r7, [sp, #28]
 8015f0e:	9506      	str	r5, [sp, #24]
 8015f10:	2380      	movs	r3, #128	@ 0x80
 8015f12:	9305      	str	r3, [sp, #20]
 8015f14:	9504      	str	r5, [sp, #16]
 8015f16:	4b71      	ldr	r3, [pc, #452]	@ (80160dc <invoke_inf+0xdf8>)
 8015f18:	9303      	str	r3, [sp, #12]
 8015f1a:	4b71      	ldr	r3, [pc, #452]	@ (80160e0 <invoke_inf+0xdfc>)
 8015f1c:	9302      	str	r3, [sp, #8]
 8015f1e:	4b71      	ldr	r3, [pc, #452]	@ (80160e4 <invoke_inf+0xe00>)
 8015f20:	9301      	str	r3, [sp, #4]
 8015f22:	4b71      	ldr	r3, [pc, #452]	@ (80160e8 <invoke_inf+0xe04>)
 8015f24:	9300      	str	r3, [sp, #0]
 8015f26:	464b      	mov	r3, r9
 8015f28:	4622      	mov	r2, r4
 8015f2a:	4621      	mov	r1, r4
 8015f2c:	4640      	mov	r0, r8
 8015f2e:	f7fa fdf3 	bl	8010b18 <depthwise_kernel5x5_stride1_inplace_CHW_fpreq_bitmask>
/* layer 44:CONV_2D */
convolve_1x1_s8_fpreq_bitmask(&buffer0[33824],4,4,384,(const q7_t*) weight38,bias38,scales38,-1,128,-128,127,&buffer0[39968],&buffer0[30560],4,4,96,sbuf);
 8015f32:	f8cd a030 	str.w	sl, [sp, #48]	@ 0x30
 8015f36:	2360      	movs	r3, #96	@ 0x60
 8015f38:	930b      	str	r3, [sp, #44]	@ 0x2c
 8015f3a:	940a      	str	r4, [sp, #40]	@ 0x28
 8015f3c:	9409      	str	r4, [sp, #36]	@ 0x24
 8015f3e:	f8cd b020 	str.w	fp, [sp, #32]
 8015f42:	f50b 5b13 	add.w	fp, fp, #9408	@ 0x24c0
 8015f46:	f8cd b01c 	str.w	fp, [sp, #28]
 8015f4a:	9706      	str	r7, [sp, #24]
 8015f4c:	9505      	str	r5, [sp, #20]
 8015f4e:	2380      	movs	r3, #128	@ 0x80
 8015f50:	9304      	str	r3, [sp, #16]
 8015f52:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8015f56:	9303      	str	r3, [sp, #12]
 8015f58:	4b64      	ldr	r3, [pc, #400]	@ (80160ec <invoke_inf+0xe08>)
 8015f5a:	9302      	str	r3, [sp, #8]
 8015f5c:	4b64      	ldr	r3, [pc, #400]	@ (80160f0 <invoke_inf+0xe0c>)
 8015f5e:	9301      	str	r3, [sp, #4]
 8015f60:	4b64      	ldr	r3, [pc, #400]	@ (80160f4 <invoke_inf+0xe10>)
 8015f62:	9300      	str	r3, [sp, #0]
 8015f64:	464b      	mov	r3, r9
 8015f66:	4622      	mov	r2, r4
 8015f68:	4621      	mov	r1, r4
 8015f6a:	4640      	mov	r0, r8
 8015f6c:	f008 ff62 	bl	801ee34 <convolve_1x1_s8_fpreq_bitmask>
/* layer 45:ADD */
add_fpreq_bitmask(1536, &buffer0[32288],0.031616762,-1,&buffer0[39968],0.032814495,-1,0.04403092,4,&buffer0[44288],&buffer0[30752]);
 8015f70:	f506 49bd 	add.w	r9, r6, #24192	@ 0x5e80
 8015f74:	f5a8 6340 	sub.w	r3, r8, #3072	@ 0xc00
 8015f78:	9300      	str	r3, [sp, #0]
 8015f7a:	464b      	mov	r3, r9
 8015f7c:	eef1 2a00 	vmov.f32	s5, #16	@ 0x40800000  4.0
 8015f80:	ed9f 2a5d 	vldr	s4, [pc, #372]	@ 80160f8 <invoke_inf+0xe14>
 8015f84:	eeff 1a00 	vmov.f32	s3, #240	@ 0xbf800000 -1.0
 8015f88:	ed9f 1a5c 	vldr	s2, [pc, #368]	@ 80160fc <invoke_inf+0xe18>
 8015f8c:	465a      	mov	r2, fp
 8015f8e:	eef0 0a61 	vmov.f32	s1, s3
 8015f92:	eeb0 0a48 	vmov.f32	s0, s16
 8015f96:	f5ab 51f0 	sub.w	r1, fp, #7680	@ 0x1e00
 8015f9a:	f44f 60c0 	mov.w	r0, #1536	@ 0x600
 8015f9e:	f008 fa9b 	bl	801e4d8 <add_fpreq_bitmask>
/* layer 46:CONV_2D */
convolve_1x1_s8_fpreq_bitmask(&buffer0[44288],4,4,96,(const q7_t*) weight39,bias39,scales39,-128,-4,-128,127,&buffer0[35072],&buffer0[32288],4,4,576,sbuf);
 8015fa2:	f8cd a030 	str.w	sl, [sp, #48]	@ 0x30
 8015fa6:	f44f 7b10 	mov.w	fp, #576	@ 0x240
 8015faa:	f8cd b02c 	str.w	fp, [sp, #44]	@ 0x2c
 8015fae:	940a      	str	r4, [sp, #40]	@ 0x28
 8015fb0:	9409      	str	r4, [sp, #36]	@ 0x24
 8015fb2:	f5a8 63c0 	sub.w	r3, r8, #1536	@ 0x600
 8015fb6:	9308      	str	r3, [sp, #32]
 8015fb8:	f506 586a 	add.w	r8, r6, #14976	@ 0x3a80
 8015fbc:	f8cd 801c 	str.w	r8, [sp, #28]
 8015fc0:	9706      	str	r7, [sp, #24]
 8015fc2:	9505      	str	r5, [sp, #20]
 8015fc4:	f06f 0303 	mvn.w	r3, #3
 8015fc8:	9304      	str	r3, [sp, #16]
 8015fca:	9503      	str	r5, [sp, #12]
 8015fcc:	4b4c      	ldr	r3, [pc, #304]	@ (8016100 <invoke_inf+0xe1c>)
 8015fce:	9302      	str	r3, [sp, #8]
 8015fd0:	4b4c      	ldr	r3, [pc, #304]	@ (8016104 <invoke_inf+0xe20>)
 8015fd2:	9301      	str	r3, [sp, #4]
 8015fd4:	4b4c      	ldr	r3, [pc, #304]	@ (8016108 <invoke_inf+0xe24>)
 8015fd6:	9300      	str	r3, [sp, #0]
 8015fd8:	2360      	movs	r3, #96	@ 0x60
 8015fda:	4622      	mov	r2, r4
 8015fdc:	4621      	mov	r1, r4
 8015fde:	4648      	mov	r0, r9
 8015fe0:	f008 ff28 	bl	801ee34 <convolve_1x1_s8_fpreq_bitmask>
/* layer 47:DEPTHWISE_CONV_2D */
depthwise_kernel3x3_stride1_inplace_CHW_fpreq_bitmask(&buffer0[35072],4,4,576,(const q7_t*) CHWweight40,offsetBias40,offsetRBias40,scales40,-128,128,-128,127,&buffer0[35072],&buffer0[33440],4,4,576,sbuf,-128);
 8015fe4:	950e      	str	r5, [sp, #56]	@ 0x38
 8015fe6:	f8cd a034 	str.w	sl, [sp, #52]	@ 0x34
 8015fea:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8015fee:	940b      	str	r4, [sp, #44]	@ 0x2c
 8015ff0:	940a      	str	r4, [sp, #40]	@ 0x28
 8015ff2:	f5a8 63cc 	sub.w	r3, r8, #1632	@ 0x660
 8015ff6:	9309      	str	r3, [sp, #36]	@ 0x24
 8015ff8:	f8cd 8020 	str.w	r8, [sp, #32]
 8015ffc:	9707      	str	r7, [sp, #28]
 8015ffe:	9506      	str	r5, [sp, #24]
 8016000:	2380      	movs	r3, #128	@ 0x80
 8016002:	9305      	str	r3, [sp, #20]
 8016004:	9504      	str	r5, [sp, #16]
 8016006:	4b41      	ldr	r3, [pc, #260]	@ (801610c <invoke_inf+0xe28>)
 8016008:	9303      	str	r3, [sp, #12]
 801600a:	4b41      	ldr	r3, [pc, #260]	@ (8016110 <invoke_inf+0xe2c>)
 801600c:	9302      	str	r3, [sp, #8]
 801600e:	4b41      	ldr	r3, [pc, #260]	@ (8016114 <invoke_inf+0xe30>)
 8016010:	9301      	str	r3, [sp, #4]
 8016012:	4b41      	ldr	r3, [pc, #260]	@ (8016118 <invoke_inf+0xe34>)
 8016014:	9300      	str	r3, [sp, #0]
 8016016:	465b      	mov	r3, fp
 8016018:	4622      	mov	r2, r4
 801601a:	4621      	mov	r1, r4
 801601c:	4640      	mov	r0, r8
 801601e:	f7fa f8a5 	bl	801016c <depthwise_kernel3x3_stride1_inplace_CHW_fpreq_bitmask>
/* layer 48:CONV_2D */
convolve_1x1_s8_fpreq_bitmask(&buffer0[35072],4,4,576,(const q7_t*) weight41,bias41,scales41,-1,128,-128,127,&buffer0[44288],&buffer0[34752],4,4,160,sbuf);
 8016022:	f8cd a030 	str.w	sl, [sp, #48]	@ 0x30
 8016026:	23a0      	movs	r3, #160	@ 0xa0
 8016028:	930b      	str	r3, [sp, #44]	@ 0x2c
 801602a:	940a      	str	r4, [sp, #40]	@ 0x28
 801602c:	9409      	str	r4, [sp, #36]	@ 0x24
 801602e:	f506 5665 	add.w	r6, r6, #14656	@ 0x3940
 8016032:	9608      	str	r6, [sp, #32]
 8016034:	f8cd 901c 	str.w	r9, [sp, #28]
 8016038:	9706      	str	r7, [sp, #24]
 801603a:	9505      	str	r5, [sp, #20]
 801603c:	2380      	movs	r3, #128	@ 0x80
 801603e:	9304      	str	r3, [sp, #16]
 8016040:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8016044:	9303      	str	r3, [sp, #12]
 8016046:	4b35      	ldr	r3, [pc, #212]	@ (801611c <invoke_inf+0xe38>)
 8016048:	9302      	str	r3, [sp, #8]
 801604a:	4b35      	ldr	r3, [pc, #212]	@ (8016120 <invoke_inf+0xe3c>)
 801604c:	9301      	str	r3, [sp, #4]
 801604e:	4b35      	ldr	r3, [pc, #212]	@ (8016124 <invoke_inf+0xe40>)
 8016050:	9300      	str	r3, [sp, #0]
 8016052:	465b      	mov	r3, fp
 8016054:	4622      	mov	r2, r4
 8016056:	4621      	mov	r1, r4
 8016058:	4640      	mov	r0, r8
 801605a:	f008 feeb 	bl	801ee34 <convolve_1x1_s8_fpreq_bitmask>
/* layer 49:AVERAGE_POOL_2D */
avg_pooling(&buffer0[44288],4,4,160,4,4,1,1,-128,127,&buffer0[34592]);
 801605e:	3ea0      	subs	r6, #160	@ 0xa0
 8016060:	9606      	str	r6, [sp, #24]
 8016062:	9705      	str	r7, [sp, #20]
 8016064:	9504      	str	r5, [sp, #16]
 8016066:	2301      	movs	r3, #1
 8016068:	9303      	str	r3, [sp, #12]
 801606a:	9302      	str	r3, [sp, #8]
 801606c:	9401      	str	r4, [sp, #4]
 801606e:	9400      	str	r4, [sp, #0]
 8016070:	23a0      	movs	r3, #160	@ 0xa0
 8016072:	4622      	mov	r2, r4
 8016074:	4621      	mov	r1, r4
 8016076:	4648      	mov	r0, r9
 8016078:	f00b f8f0 	bl	802125c <avg_pooling>
/* layer 50:CONV_2D */
convolve_1x1_s8_fpreq_bitmask(&buffer0[34592],1,1,160,(const q7_t*) weight42,bias42,scales42,-34,1,-128,127,&buffer0[35076],&buffer0[35072],1,1,10,sbuf);
 801607c:	f8cd a030 	str.w	sl, [sp, #48]	@ 0x30
 8016080:	230a      	movs	r3, #10
 8016082:	930b      	str	r3, [sp, #44]	@ 0x2c
 8016084:	2301      	movs	r3, #1
 8016086:	930a      	str	r3, [sp, #40]	@ 0x28
 8016088:	9309      	str	r3, [sp, #36]	@ 0x24
 801608a:	f8cd 8020 	str.w	r8, [sp, #32]
 801608e:	e04b      	b.n	8016128 <invoke_inf+0xe44>
 8016090:	080849e4 	.word	0x080849e4
 8016094:	20003c44 	.word	0x20003c44
 8016098:	08084b64 	.word	0x08084b64
 801609c:	0807b3e4 	.word	0x0807b3e4
 80160a0:	2000363c 	.word	0x2000363c
 80160a4:	0807b9e4 	.word	0x0807b9e4
 80160a8:	080762e4 	.word	0x080762e4
 80160ac:	2000d5d0 	.word	0x2000d5d0
 80160b0:	20003034 	.word	0x20003034
 80160b4:	08078e64 	.word	0x08078e64
 80160b8:	0806d164 	.word	0x0806d164
 80160bc:	20002eac 	.word	0x20002eac
 80160c0:	0806d2e4 	.word	0x0806d2e4
 80160c4:	3d018094 	.word	0x3d018094
 80160c8:	3cb5e0eb 	.word	0x3cb5e0eb
 80160cc:	3cddaad5 	.word	0x3cddaad5
 80160d0:	08063b64 	.word	0x08063b64
 80160d4:	200028a4 	.word	0x200028a4
 80160d8:	08064164 	.word	0x08064164
 80160dc:	0805ea64 	.word	0x0805ea64
 80160e0:	20001c9c 	.word	0x20001c9c
 80160e4:	2000229c 	.word	0x2000229c
 80160e8:	080615e4 	.word	0x080615e4
 80160ec:	080558e4 	.word	0x080558e4
 80160f0:	20001b14 	.word	0x20001b14
 80160f4:	08055a64 	.word	0x08055a64
 80160f8:	3d3459c4 	.word	0x3d3459c4
 80160fc:	3d06687e 	.word	0x3d06687e
 8016100:	080477e4 	.word	0x080477e4
 8016104:	2000120c 	.word	0x2000120c
 8016108:	080480e4 	.word	0x080480e4
 801610c:	08044664 	.word	0x08044664
 8016110:	2000ccd0 	.word	0x2000ccd0
 8016114:	20000904 	.word	0x20000904
 8016118:	080463a4 	.word	0x080463a4
 801611c:	0802dbe4 	.word	0x0802dbe4
 8016120:	2000067c 	.word	0x2000067c
 8016124:	0802de64 	.word	0x0802de64
 8016128:	f506 73f2 	add.w	r3, r6, #484	@ 0x1e4
 801612c:	9307      	str	r3, [sp, #28]
 801612e:	9706      	str	r7, [sp, #24]
 8016130:	9505      	str	r5, [sp, #20]
 8016132:	2301      	movs	r3, #1
 8016134:	9304      	str	r3, [sp, #16]
 8016136:	f06f 0321 	mvn.w	r3, #33	@ 0x21
 801613a:	9303      	str	r3, [sp, #12]
 801613c:	4b08      	ldr	r3, [pc, #32]	@ (8016160 <invoke_inf+0xe7c>)
 801613e:	9302      	str	r3, [sp, #8]
 8016140:	4b08      	ldr	r3, [pc, #32]	@ (8016164 <invoke_inf+0xe80>)
 8016142:	9301      	str	r3, [sp, #4]
 8016144:	4b08      	ldr	r3, [pc, #32]	@ (8016168 <invoke_inf+0xe84>)
 8016146:	9300      	str	r3, [sp, #0]
 8016148:	23a0      	movs	r3, #160	@ 0xa0
 801614a:	2201      	movs	r2, #1
 801614c:	4611      	mov	r1, r2
 801614e:	4630      	mov	r0, r6
 8016150:	f008 fe70 	bl	801ee34 <convolve_1x1_s8_fpreq_bitmask>
}
 8016154:	b011      	add	sp, #68	@ 0x44
 8016156:	ecbd 8b02 	vpop	{d8}
 801615a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801615e:	bf00      	nop
 8016160:	0802dbbc 	.word	0x0802dbbc
 8016164:	2000cca8 	.word	0x2000cca8
 8016168:	20000038 	.word	0x20000038

0801616c <group_mac_kernel8_4row_fp_uniweight_reuse_output_input>:
    *sum_3 += tmp;
}

static inline void group_mac_kernel8_4row_fp_uniweight_reuse_output_input(float* sum_0, float* sum_1, float* sum_2, float* sum_3,
           const float* input_0, const float* input_1, const float* input_2, const float* input_3,
           const float* filter) {
 801616c:	b4f0      	push	{r4, r5, r6, r7}
 801616e:	4684      	mov	ip, r0
 8016170:	9804      	ldr	r0, [sp, #16]
 8016172:	9f05      	ldr	r7, [sp, #20]
 8016174:	9e06      	ldr	r6, [sp, #24]
 8016176:	9d07      	ldr	r5, [sp, #28]
 8016178:	9c08      	ldr	r4, [sp, #32]
    float tmp;
    tmp = 0;
    tmp += input_0[0] * filter[0];
 801617a:	ed90 7a00 	vldr	s14, [r0]
 801617e:	edd4 7a00 	vldr	s15, [r4]
 8016182:	ee27 7a27 	vmul.f32	s14, s14, s15
 8016186:	eddf 6afe 	vldr	s13, [pc, #1016]	@ 8016580 <group_mac_kernel8_4row_fp_uniweight_reuse_output_input+0x414>
 801618a:	ee37 7a26 	vadd.f32	s14, s14, s13
    tmp += input_0[1] * filter[1];
 801618e:	edd0 7a01 	vldr	s15, [r0, #4]
 8016192:	ed94 6a01 	vldr	s12, [r4, #4]
 8016196:	ee67 7a86 	vmul.f32	s15, s15, s12
 801619a:	ee77 7a87 	vadd.f32	s15, s15, s14
    tmp += input_0[2] * filter[2];
 801619e:	ed90 7a02 	vldr	s14, [r0, #8]
 80161a2:	ed94 6a02 	vldr	s12, [r4, #8]
 80161a6:	ee27 7a06 	vmul.f32	s14, s14, s12
 80161aa:	ee37 7a27 	vadd.f32	s14, s14, s15
    tmp += input_0[3] * filter[3];
 80161ae:	edd0 7a03 	vldr	s15, [r0, #12]
 80161b2:	ed94 6a03 	vldr	s12, [r4, #12]
 80161b6:	ee67 7a86 	vmul.f32	s15, s15, s12
 80161ba:	ee77 7a87 	vadd.f32	s15, s15, s14
    tmp += input_0[4] * filter[4];
 80161be:	ed90 7a04 	vldr	s14, [r0, #16]
 80161c2:	ed94 6a04 	vldr	s12, [r4, #16]
 80161c6:	ee27 7a06 	vmul.f32	s14, s14, s12
 80161ca:	ee37 7a27 	vadd.f32	s14, s14, s15
    tmp += input_0[5] * filter[5];
 80161ce:	edd0 7a05 	vldr	s15, [r0, #20]
 80161d2:	ed94 6a05 	vldr	s12, [r4, #20]
 80161d6:	ee67 7a86 	vmul.f32	s15, s15, s12
 80161da:	ee77 7a87 	vadd.f32	s15, s15, s14
    tmp += input_0[6] * filter[6];
 80161de:	ed90 7a06 	vldr	s14, [r0, #24]
 80161e2:	ed94 6a06 	vldr	s12, [r4, #24]
 80161e6:	ee27 7a06 	vmul.f32	s14, s14, s12
 80161ea:	ee37 7a27 	vadd.f32	s14, s14, s15
    tmp += input_0[7] * filter[7];
 80161ee:	edd0 7a07 	vldr	s15, [r0, #28]
 80161f2:	ed94 6a07 	vldr	s12, [r4, #28]
 80161f6:	ee67 7a86 	vmul.f32	s15, s15, s12
 80161fa:	ee77 7a87 	vadd.f32	s15, s15, s14
    tmp += input_0[8] * filter[8];
 80161fe:	ed90 7a08 	vldr	s14, [r0, #32]
 8016202:	ed94 6a08 	vldr	s12, [r4, #32]
 8016206:	ee27 7a06 	vmul.f32	s14, s14, s12
 801620a:	ee37 7a27 	vadd.f32	s14, s14, s15
    tmp += input_0[9] * filter[9];
 801620e:	edd0 7a09 	vldr	s15, [r0, #36]	@ 0x24
 8016212:	ed94 6a09 	vldr	s12, [r4, #36]	@ 0x24
 8016216:	ee67 7a86 	vmul.f32	s15, s15, s12
 801621a:	ee77 7a87 	vadd.f32	s15, s15, s14
    tmp += input_0[10] * filter[10];
 801621e:	ed90 7a0a 	vldr	s14, [r0, #40]	@ 0x28
 8016222:	ed94 6a0a 	vldr	s12, [r4, #40]	@ 0x28
 8016226:	ee27 7a06 	vmul.f32	s14, s14, s12
 801622a:	ee37 7a27 	vadd.f32	s14, s14, s15
    tmp += input_0[11] * filter[11];
 801622e:	edd0 7a0b 	vldr	s15, [r0, #44]	@ 0x2c
 8016232:	ed94 6a0b 	vldr	s12, [r4, #44]	@ 0x2c
 8016236:	ee67 7a86 	vmul.f32	s15, s15, s12
 801623a:	ee77 7a87 	vadd.f32	s15, s15, s14
    tmp += input_0[12] * filter[12];
 801623e:	ed90 7a0c 	vldr	s14, [r0, #48]	@ 0x30
 8016242:	ed94 6a0c 	vldr	s12, [r4, #48]	@ 0x30
 8016246:	ee27 7a06 	vmul.f32	s14, s14, s12
 801624a:	ee37 7a27 	vadd.f32	s14, s14, s15
    tmp += input_0[13] * filter[13];
 801624e:	edd0 7a0d 	vldr	s15, [r0, #52]	@ 0x34
 8016252:	ed94 6a0d 	vldr	s12, [r4, #52]	@ 0x34
 8016256:	ee67 7a86 	vmul.f32	s15, s15, s12
 801625a:	ee77 7a87 	vadd.f32	s15, s15, s14
    tmp += input_0[14] * filter[14];
 801625e:	ed90 7a0e 	vldr	s14, [r0, #56]	@ 0x38
 8016262:	ed94 6a0e 	vldr	s12, [r4, #56]	@ 0x38
 8016266:	ee27 7a06 	vmul.f32	s14, s14, s12
 801626a:	ee37 7a27 	vadd.f32	s14, s14, s15
    tmp += input_0[15] * filter[15];
 801626e:	edd0 7a0f 	vldr	s15, [r0, #60]	@ 0x3c
 8016272:	ed94 6a0f 	vldr	s12, [r4, #60]	@ 0x3c
 8016276:	ee67 7a86 	vmul.f32	s15, s15, s12
 801627a:	ee77 7a87 	vadd.f32	s15, s15, s14
    tmp += input_0[16] * filter[16];
 801627e:	ed90 7a10 	vldr	s14, [r0, #64]	@ 0x40
 8016282:	ed94 6a10 	vldr	s12, [r4, #64]	@ 0x40
 8016286:	ee27 7a06 	vmul.f32	s14, s14, s12
 801628a:	ee37 7a27 	vadd.f32	s14, s14, s15
    tmp += input_0[17] * filter[17];
 801628e:	edd0 7a11 	vldr	s15, [r0, #68]	@ 0x44
 8016292:	ed94 6a11 	vldr	s12, [r4, #68]	@ 0x44
 8016296:	ee67 7a86 	vmul.f32	s15, s15, s12
 801629a:	ee77 7a87 	vadd.f32	s15, s15, s14
    tmp += input_0[18] * filter[18];
 801629e:	ed90 7a12 	vldr	s14, [r0, #72]	@ 0x48
 80162a2:	ed94 6a12 	vldr	s12, [r4, #72]	@ 0x48
 80162a6:	ee27 7a06 	vmul.f32	s14, s14, s12
 80162aa:	ee37 7a27 	vadd.f32	s14, s14, s15
    tmp += input_0[19] * filter[19];
 80162ae:	edd0 7a13 	vldr	s15, [r0, #76]	@ 0x4c
 80162b2:	ed94 6a13 	vldr	s12, [r4, #76]	@ 0x4c
 80162b6:	ee67 7a86 	vmul.f32	s15, s15, s12
 80162ba:	ee77 7a87 	vadd.f32	s15, s15, s14
    tmp += input_0[20] * filter[20];
 80162be:	ed90 7a14 	vldr	s14, [r0, #80]	@ 0x50
 80162c2:	ed94 6a14 	vldr	s12, [r4, #80]	@ 0x50
 80162c6:	ee27 7a06 	vmul.f32	s14, s14, s12
 80162ca:	ee37 7a27 	vadd.f32	s14, s14, s15
    tmp += input_0[21] * filter[21];
 80162ce:	edd0 7a15 	vldr	s15, [r0, #84]	@ 0x54
 80162d2:	ed94 6a15 	vldr	s12, [r4, #84]	@ 0x54
 80162d6:	ee67 7a86 	vmul.f32	s15, s15, s12
 80162da:	ee77 7a87 	vadd.f32	s15, s15, s14
    tmp += input_0[22] * filter[22];
 80162de:	ed90 7a16 	vldr	s14, [r0, #88]	@ 0x58
 80162e2:	ed94 6a16 	vldr	s12, [r4, #88]	@ 0x58
 80162e6:	ee27 7a06 	vmul.f32	s14, s14, s12
 80162ea:	ee37 7a27 	vadd.f32	s14, s14, s15
    tmp += input_0[23] * filter[23];
 80162ee:	edd0 7a17 	vldr	s15, [r0, #92]	@ 0x5c
 80162f2:	ed94 6a17 	vldr	s12, [r4, #92]	@ 0x5c
 80162f6:	ee67 7a86 	vmul.f32	s15, s15, s12
 80162fa:	ee77 7a87 	vadd.f32	s15, s15, s14
    tmp += input_0[24] * filter[24];
 80162fe:	ed90 7a18 	vldr	s14, [r0, #96]	@ 0x60
 8016302:	ed94 6a18 	vldr	s12, [r4, #96]	@ 0x60
 8016306:	ee27 7a06 	vmul.f32	s14, s14, s12
 801630a:	ee37 7a27 	vadd.f32	s14, s14, s15
    tmp += input_0[25] * filter[25];
 801630e:	edd0 7a19 	vldr	s15, [r0, #100]	@ 0x64
 8016312:	ed94 6a19 	vldr	s12, [r4, #100]	@ 0x64
 8016316:	ee67 7a86 	vmul.f32	s15, s15, s12
 801631a:	ee77 7a87 	vadd.f32	s15, s15, s14
    tmp += input_0[26] * filter[26];
 801631e:	ed90 7a1a 	vldr	s14, [r0, #104]	@ 0x68
 8016322:	ed94 6a1a 	vldr	s12, [r4, #104]	@ 0x68
 8016326:	ee27 7a06 	vmul.f32	s14, s14, s12
 801632a:	ee37 7a27 	vadd.f32	s14, s14, s15
    tmp += input_0[27] * filter[27];
 801632e:	edd0 7a1b 	vldr	s15, [r0, #108]	@ 0x6c
 8016332:	ed94 6a1b 	vldr	s12, [r4, #108]	@ 0x6c
 8016336:	ee67 7a86 	vmul.f32	s15, s15, s12
 801633a:	ee77 7a87 	vadd.f32	s15, s15, s14
    tmp += input_0[28] * filter[28];
 801633e:	ed90 7a1c 	vldr	s14, [r0, #112]	@ 0x70
 8016342:	ed94 6a1c 	vldr	s12, [r4, #112]	@ 0x70
 8016346:	ee27 7a06 	vmul.f32	s14, s14, s12
 801634a:	ee37 7a27 	vadd.f32	s14, s14, s15
    tmp += input_0[29] * filter[29];
 801634e:	edd0 7a1d 	vldr	s15, [r0, #116]	@ 0x74
 8016352:	ed94 6a1d 	vldr	s12, [r4, #116]	@ 0x74
 8016356:	ee67 7a86 	vmul.f32	s15, s15, s12
 801635a:	ee77 7a87 	vadd.f32	s15, s15, s14
    tmp += input_0[30] * filter[30];
 801635e:	ed90 7a1e 	vldr	s14, [r0, #120]	@ 0x78
 8016362:	ed94 6a1e 	vldr	s12, [r4, #120]	@ 0x78
 8016366:	ee27 7a06 	vmul.f32	s14, s14, s12
 801636a:	ee37 7a27 	vadd.f32	s14, s14, s15
    tmp += input_0[31] * filter[31];
 801636e:	edd0 7a1f 	vldr	s15, [r0, #124]	@ 0x7c
 8016372:	ed94 6a1f 	vldr	s12, [r4, #124]	@ 0x7c
 8016376:	ee67 7a86 	vmul.f32	s15, s15, s12
 801637a:	ee77 7a87 	vadd.f32	s15, s15, s14
    tmp += input_0[32] * filter[32];
 801637e:	ed90 7a20 	vldr	s14, [r0, #128]	@ 0x80
 8016382:	ed94 6a20 	vldr	s12, [r4, #128]	@ 0x80
 8016386:	ee27 7a06 	vmul.f32	s14, s14, s12
 801638a:	ee37 7a27 	vadd.f32	s14, s14, s15
    tmp += input_0[33] * filter[33];
 801638e:	edd0 7a21 	vldr	s15, [r0, #132]	@ 0x84
 8016392:	ed94 6a21 	vldr	s12, [r4, #132]	@ 0x84
 8016396:	ee67 7a86 	vmul.f32	s15, s15, s12
 801639a:	ee77 7a87 	vadd.f32	s15, s15, s14
    tmp += input_0[34] * filter[34];
 801639e:	ed90 7a22 	vldr	s14, [r0, #136]	@ 0x88
 80163a2:	ed94 6a22 	vldr	s12, [r4, #136]	@ 0x88
 80163a6:	ee27 7a06 	vmul.f32	s14, s14, s12
 80163aa:	ee37 7a27 	vadd.f32	s14, s14, s15
    tmp += input_0[35] * filter[35];
 80163ae:	edd0 7a23 	vldr	s15, [r0, #140]	@ 0x8c
 80163b2:	ed94 6a23 	vldr	s12, [r4, #140]	@ 0x8c
 80163b6:	ee67 7a86 	vmul.f32	s15, s15, s12
 80163ba:	ee77 7a87 	vadd.f32	s15, s15, s14
    tmp += input_0[36] * filter[36];
 80163be:	ed90 7a24 	vldr	s14, [r0, #144]	@ 0x90
 80163c2:	ed94 6a24 	vldr	s12, [r4, #144]	@ 0x90
 80163c6:	ee27 7a06 	vmul.f32	s14, s14, s12
 80163ca:	ee37 7a27 	vadd.f32	s14, s14, s15
    tmp += input_0[37] * filter[37];
 80163ce:	edd0 7a25 	vldr	s15, [r0, #148]	@ 0x94
 80163d2:	ed94 6a25 	vldr	s12, [r4, #148]	@ 0x94
 80163d6:	ee67 7a86 	vmul.f32	s15, s15, s12
 80163da:	ee77 7a87 	vadd.f32	s15, s15, s14
    tmp += input_0[38] * filter[38];
 80163de:	ed90 7a26 	vldr	s14, [r0, #152]	@ 0x98
 80163e2:	ed94 6a26 	vldr	s12, [r4, #152]	@ 0x98
 80163e6:	ee27 7a06 	vmul.f32	s14, s14, s12
 80163ea:	ee37 7a27 	vadd.f32	s14, s14, s15
    tmp += input_0[39] * filter[39];
 80163ee:	edd0 7a27 	vldr	s15, [r0, #156]	@ 0x9c
 80163f2:	ed94 6a27 	vldr	s12, [r4, #156]	@ 0x9c
 80163f6:	ee67 7a86 	vmul.f32	s15, s15, s12
 80163fa:	ee77 7a87 	vadd.f32	s15, s15, s14
    tmp += input_0[40] * filter[40];
 80163fe:	ed90 7a28 	vldr	s14, [r0, #160]	@ 0xa0
 8016402:	ed94 6a28 	vldr	s12, [r4, #160]	@ 0xa0
 8016406:	ee27 7a06 	vmul.f32	s14, s14, s12
 801640a:	ee37 7a27 	vadd.f32	s14, s14, s15
    tmp += input_0[41] * filter[41];
 801640e:	edd0 7a29 	vldr	s15, [r0, #164]	@ 0xa4
 8016412:	ed94 6a29 	vldr	s12, [r4, #164]	@ 0xa4
 8016416:	ee67 7a86 	vmul.f32	s15, s15, s12
 801641a:	ee77 7a87 	vadd.f32	s15, s15, s14
    tmp += input_0[42] * filter[42];
 801641e:	ed90 7a2a 	vldr	s14, [r0, #168]	@ 0xa8
 8016422:	ed94 6a2a 	vldr	s12, [r4, #168]	@ 0xa8
 8016426:	ee27 7a06 	vmul.f32	s14, s14, s12
 801642a:	ee37 7a27 	vadd.f32	s14, s14, s15
    tmp += input_0[43] * filter[43];
 801642e:	edd0 7a2b 	vldr	s15, [r0, #172]	@ 0xac
 8016432:	ed94 6a2b 	vldr	s12, [r4, #172]	@ 0xac
 8016436:	ee67 7a86 	vmul.f32	s15, s15, s12
 801643a:	ee77 7a87 	vadd.f32	s15, s15, s14
    tmp += input_0[44] * filter[44];
 801643e:	ed90 7a2c 	vldr	s14, [r0, #176]	@ 0xb0
 8016442:	ed94 6a2c 	vldr	s12, [r4, #176]	@ 0xb0
 8016446:	ee27 7a06 	vmul.f32	s14, s14, s12
 801644a:	ee37 7a27 	vadd.f32	s14, s14, s15
    tmp += input_0[45] * filter[45];
 801644e:	edd0 7a2d 	vldr	s15, [r0, #180]	@ 0xb4
 8016452:	ed94 6a2d 	vldr	s12, [r4, #180]	@ 0xb4
 8016456:	ee67 7a86 	vmul.f32	s15, s15, s12
 801645a:	ee77 7a87 	vadd.f32	s15, s15, s14
    tmp += input_0[46] * filter[46];
 801645e:	ed90 7a2e 	vldr	s14, [r0, #184]	@ 0xb8
 8016462:	ed94 6a2e 	vldr	s12, [r4, #184]	@ 0xb8
 8016466:	ee27 7a06 	vmul.f32	s14, s14, s12
 801646a:	ee37 7a27 	vadd.f32	s14, s14, s15
    tmp += input_0[47] * filter[47];
 801646e:	edd0 7a2f 	vldr	s15, [r0, #188]	@ 0xbc
 8016472:	ed94 6a2f 	vldr	s12, [r4, #188]	@ 0xbc
 8016476:	ee67 7a86 	vmul.f32	s15, s15, s12
 801647a:	ee77 7a87 	vadd.f32	s15, s15, s14
    tmp += input_0[48] * filter[48];
 801647e:	ed90 7a30 	vldr	s14, [r0, #192]	@ 0xc0
 8016482:	ed94 6a30 	vldr	s12, [r4, #192]	@ 0xc0
 8016486:	ee27 7a06 	vmul.f32	s14, s14, s12
 801648a:	ee37 7a27 	vadd.f32	s14, s14, s15
    tmp += input_0[49] * filter[49];
 801648e:	edd0 7a31 	vldr	s15, [r0, #196]	@ 0xc4
 8016492:	ed94 6a31 	vldr	s12, [r4, #196]	@ 0xc4
 8016496:	ee67 7a86 	vmul.f32	s15, s15, s12
 801649a:	ee77 7a87 	vadd.f32	s15, s15, s14
    tmp += input_0[50] * filter[50];
 801649e:	ed90 7a32 	vldr	s14, [r0, #200]	@ 0xc8
 80164a2:	ed94 6a32 	vldr	s12, [r4, #200]	@ 0xc8
 80164a6:	ee27 7a06 	vmul.f32	s14, s14, s12
 80164aa:	ee37 7a27 	vadd.f32	s14, s14, s15
    tmp += input_0[51] * filter[51];
 80164ae:	edd0 7a33 	vldr	s15, [r0, #204]	@ 0xcc
 80164b2:	ed94 6a33 	vldr	s12, [r4, #204]	@ 0xcc
 80164b6:	ee67 7a86 	vmul.f32	s15, s15, s12
 80164ba:	ee77 7a87 	vadd.f32	s15, s15, s14
    tmp += input_0[52] * filter[52];
 80164be:	ed90 7a34 	vldr	s14, [r0, #208]	@ 0xd0
 80164c2:	ed94 6a34 	vldr	s12, [r4, #208]	@ 0xd0
 80164c6:	ee27 7a06 	vmul.f32	s14, s14, s12
 80164ca:	ee37 7a27 	vadd.f32	s14, s14, s15
    tmp += input_0[53] * filter[53];
 80164ce:	edd0 7a35 	vldr	s15, [r0, #212]	@ 0xd4
 80164d2:	ed94 6a35 	vldr	s12, [r4, #212]	@ 0xd4
 80164d6:	ee67 7a86 	vmul.f32	s15, s15, s12
 80164da:	ee77 7a87 	vadd.f32	s15, s15, s14
    tmp += input_0[54] * filter[54];
 80164de:	ed90 7a36 	vldr	s14, [r0, #216]	@ 0xd8
 80164e2:	ed94 6a36 	vldr	s12, [r4, #216]	@ 0xd8
 80164e6:	ee27 7a06 	vmul.f32	s14, s14, s12
 80164ea:	ee37 7a27 	vadd.f32	s14, s14, s15
    tmp += input_0[55] * filter[55];
 80164ee:	edd0 7a37 	vldr	s15, [r0, #220]	@ 0xdc
 80164f2:	ed94 6a37 	vldr	s12, [r4, #220]	@ 0xdc
 80164f6:	ee67 7a86 	vmul.f32	s15, s15, s12
 80164fa:	ee77 7a87 	vadd.f32	s15, s15, s14
    tmp += input_0[56] * filter[56];
 80164fe:	ed90 7a38 	vldr	s14, [r0, #224]	@ 0xe0
 8016502:	ed94 6a38 	vldr	s12, [r4, #224]	@ 0xe0
 8016506:	ee27 7a06 	vmul.f32	s14, s14, s12
 801650a:	ee37 7a27 	vadd.f32	s14, s14, s15
    tmp += input_0[57] * filter[57];
 801650e:	edd0 7a39 	vldr	s15, [r0, #228]	@ 0xe4
 8016512:	ed94 6a39 	vldr	s12, [r4, #228]	@ 0xe4
 8016516:	ee67 7a86 	vmul.f32	s15, s15, s12
 801651a:	ee77 7a87 	vadd.f32	s15, s15, s14
    tmp += input_0[58] * filter[58];
 801651e:	ed90 7a3a 	vldr	s14, [r0, #232]	@ 0xe8
 8016522:	ed94 6a3a 	vldr	s12, [r4, #232]	@ 0xe8
 8016526:	ee27 7a06 	vmul.f32	s14, s14, s12
 801652a:	ee37 7a27 	vadd.f32	s14, s14, s15
    tmp += input_0[59] * filter[59];
 801652e:	edd0 7a3b 	vldr	s15, [r0, #236]	@ 0xec
 8016532:	ed94 6a3b 	vldr	s12, [r4, #236]	@ 0xec
 8016536:	ee67 7a86 	vmul.f32	s15, s15, s12
 801653a:	ee77 7a87 	vadd.f32	s15, s15, s14
    tmp += input_0[60] * filter[60];
 801653e:	ed90 7a3c 	vldr	s14, [r0, #240]	@ 0xf0
 8016542:	ed94 6a3c 	vldr	s12, [r4, #240]	@ 0xf0
 8016546:	ee27 7a06 	vmul.f32	s14, s14, s12
 801654a:	ee37 7a27 	vadd.f32	s14, s14, s15
    tmp += input_0[61] * filter[61];
 801654e:	edd0 7a3d 	vldr	s15, [r0, #244]	@ 0xf4
 8016552:	ed94 6a3d 	vldr	s12, [r4, #244]	@ 0xf4
 8016556:	ee67 7a86 	vmul.f32	s15, s15, s12
 801655a:	ee77 7a87 	vadd.f32	s15, s15, s14
    tmp += input_0[62] * filter[62];
 801655e:	ed90 7a3e 	vldr	s14, [r0, #248]	@ 0xf8
 8016562:	ed94 6a3e 	vldr	s12, [r4, #248]	@ 0xf8
 8016566:	ee27 7a06 	vmul.f32	s14, s14, s12
 801656a:	ee37 7a27 	vadd.f32	s14, s14, s15
    tmp += input_0[63] * filter[63];
 801656e:	edd0 7a3f 	vldr	s15, [r0, #252]	@ 0xfc
 8016572:	ed94 6a3f 	vldr	s12, [r4, #252]	@ 0xfc
 8016576:	ee67 7a86 	vmul.f32	s15, s15, s12
 801657a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801657e:	e001      	b.n	8016584 <group_mac_kernel8_4row_fp_uniweight_reuse_output_input+0x418>
 8016580:	00000000 	.word	0x00000000
    *sum_0 += tmp;
 8016584:	ed9c 7a00 	vldr	s14, [ip]
 8016588:	ee77 7a27 	vadd.f32	s15, s14, s15
 801658c:	edcc 7a00 	vstr	s15, [ip]
    tmp = 0;
    tmp += input_1[0] * filter[0];
 8016590:	ed97 7a00 	vldr	s14, [r7]
 8016594:	edd4 7a00 	vldr	s15, [r4]
 8016598:	ee27 7a27 	vmul.f32	s14, s14, s15
 801659c:	ee37 7a26 	vadd.f32	s14, s14, s13
    tmp += input_1[1] * filter[1];
 80165a0:	edd7 7a01 	vldr	s15, [r7, #4]
 80165a4:	ed94 6a01 	vldr	s12, [r4, #4]
 80165a8:	ee67 7a86 	vmul.f32	s15, s15, s12
 80165ac:	ee77 7a87 	vadd.f32	s15, s15, s14
    tmp += input_1[2] * filter[2];
 80165b0:	ed97 7a02 	vldr	s14, [r7, #8]
 80165b4:	ed94 6a02 	vldr	s12, [r4, #8]
 80165b8:	ee27 7a06 	vmul.f32	s14, s14, s12
 80165bc:	ee37 7a27 	vadd.f32	s14, s14, s15
    tmp += input_1[3] * filter[3];
 80165c0:	edd7 7a03 	vldr	s15, [r7, #12]
 80165c4:	ed94 6a03 	vldr	s12, [r4, #12]
 80165c8:	ee67 7a86 	vmul.f32	s15, s15, s12
 80165cc:	ee77 7a87 	vadd.f32	s15, s15, s14
    tmp += input_1[4] * filter[4];
 80165d0:	ed97 7a04 	vldr	s14, [r7, #16]
 80165d4:	ed94 6a04 	vldr	s12, [r4, #16]
 80165d8:	ee27 7a06 	vmul.f32	s14, s14, s12
 80165dc:	ee37 7a27 	vadd.f32	s14, s14, s15
    tmp += input_1[5] * filter[5];
 80165e0:	edd7 7a05 	vldr	s15, [r7, #20]
 80165e4:	ed94 6a05 	vldr	s12, [r4, #20]
 80165e8:	ee67 7a86 	vmul.f32	s15, s15, s12
 80165ec:	ee77 7a87 	vadd.f32	s15, s15, s14
    tmp += input_1[6] * filter[6];
 80165f0:	ed97 7a06 	vldr	s14, [r7, #24]
 80165f4:	ed94 6a06 	vldr	s12, [r4, #24]
 80165f8:	ee27 7a06 	vmul.f32	s14, s14, s12
 80165fc:	ee37 7a27 	vadd.f32	s14, s14, s15
    tmp += input_1[7] * filter[7];
 8016600:	edd7 7a07 	vldr	s15, [r7, #28]
 8016604:	ed94 6a07 	vldr	s12, [r4, #28]
 8016608:	ee67 7a86 	vmul.f32	s15, s15, s12
 801660c:	ee77 7a87 	vadd.f32	s15, s15, s14
    tmp += input_1[8] * filter[8];
 8016610:	ed97 7a08 	vldr	s14, [r7, #32]
 8016614:	ed94 6a08 	vldr	s12, [r4, #32]
 8016618:	ee27 7a06 	vmul.f32	s14, s14, s12
 801661c:	ee37 7a27 	vadd.f32	s14, s14, s15
    tmp += input_1[9] * filter[9];
 8016620:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8016624:	ed94 6a09 	vldr	s12, [r4, #36]	@ 0x24
 8016628:	ee67 7a86 	vmul.f32	s15, s15, s12
 801662c:	ee77 7a87 	vadd.f32	s15, s15, s14
    tmp += input_1[10] * filter[10];
 8016630:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8016634:	ed94 6a0a 	vldr	s12, [r4, #40]	@ 0x28
 8016638:	ee27 7a06 	vmul.f32	s14, s14, s12
 801663c:	ee37 7a27 	vadd.f32	s14, s14, s15
    tmp += input_1[11] * filter[11];
 8016640:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8016644:	ed94 6a0b 	vldr	s12, [r4, #44]	@ 0x2c
 8016648:	ee67 7a86 	vmul.f32	s15, s15, s12
 801664c:	ee77 7a87 	vadd.f32	s15, s15, s14
    tmp += input_1[12] * filter[12];
 8016650:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8016654:	ed94 6a0c 	vldr	s12, [r4, #48]	@ 0x30
 8016658:	ee27 7a06 	vmul.f32	s14, s14, s12
 801665c:	ee37 7a27 	vadd.f32	s14, s14, s15
    tmp += input_1[13] * filter[13];
 8016660:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8016664:	ed94 6a0d 	vldr	s12, [r4, #52]	@ 0x34
 8016668:	ee67 7a86 	vmul.f32	s15, s15, s12
 801666c:	ee77 7a87 	vadd.f32	s15, s15, s14
    tmp += input_1[14] * filter[14];
 8016670:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8016674:	ed94 6a0e 	vldr	s12, [r4, #56]	@ 0x38
 8016678:	ee27 7a06 	vmul.f32	s14, s14, s12
 801667c:	ee37 7a27 	vadd.f32	s14, s14, s15
    tmp += input_1[15] * filter[15];
 8016680:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8016684:	ed94 6a0f 	vldr	s12, [r4, #60]	@ 0x3c
 8016688:	ee67 7a86 	vmul.f32	s15, s15, s12
 801668c:	ee77 7a87 	vadd.f32	s15, s15, s14
    tmp += input_1[16] * filter[16];
 8016690:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8016694:	ed94 6a10 	vldr	s12, [r4, #64]	@ 0x40
 8016698:	ee27 7a06 	vmul.f32	s14, s14, s12
 801669c:	ee37 7a27 	vadd.f32	s14, s14, s15
    tmp += input_1[17] * filter[17];
 80166a0:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 80166a4:	ed94 6a11 	vldr	s12, [r4, #68]	@ 0x44
 80166a8:	ee67 7a86 	vmul.f32	s15, s15, s12
 80166ac:	ee77 7a87 	vadd.f32	s15, s15, s14
    tmp += input_1[18] * filter[18];
 80166b0:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 80166b4:	ed94 6a12 	vldr	s12, [r4, #72]	@ 0x48
 80166b8:	ee27 7a06 	vmul.f32	s14, s14, s12
 80166bc:	ee37 7a27 	vadd.f32	s14, s14, s15
    tmp += input_1[19] * filter[19];
 80166c0:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 80166c4:	ed94 6a13 	vldr	s12, [r4, #76]	@ 0x4c
 80166c8:	ee67 7a86 	vmul.f32	s15, s15, s12
 80166cc:	ee77 7a87 	vadd.f32	s15, s15, s14
    tmp += input_1[20] * filter[20];
 80166d0:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 80166d4:	ed94 6a14 	vldr	s12, [r4, #80]	@ 0x50
 80166d8:	ee27 7a06 	vmul.f32	s14, s14, s12
 80166dc:	ee37 7a27 	vadd.f32	s14, s14, s15
    tmp += input_1[21] * filter[21];
 80166e0:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 80166e4:	ed94 6a15 	vldr	s12, [r4, #84]	@ 0x54
 80166e8:	ee67 7a86 	vmul.f32	s15, s15, s12
 80166ec:	ee77 7a87 	vadd.f32	s15, s15, s14
    tmp += input_1[22] * filter[22];
 80166f0:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 80166f4:	ed94 6a16 	vldr	s12, [r4, #88]	@ 0x58
 80166f8:	ee27 7a06 	vmul.f32	s14, s14, s12
 80166fc:	ee37 7a27 	vadd.f32	s14, s14, s15
    tmp += input_1[23] * filter[23];
 8016700:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8016704:	ed94 6a17 	vldr	s12, [r4, #92]	@ 0x5c
 8016708:	ee67 7a86 	vmul.f32	s15, s15, s12
 801670c:	ee77 7a87 	vadd.f32	s15, s15, s14
    tmp += input_1[24] * filter[24];
 8016710:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 8016714:	ed94 6a18 	vldr	s12, [r4, #96]	@ 0x60
 8016718:	ee27 7a06 	vmul.f32	s14, s14, s12
 801671c:	ee37 7a27 	vadd.f32	s14, s14, s15
    tmp += input_1[25] * filter[25];
 8016720:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8016724:	ed94 6a19 	vldr	s12, [r4, #100]	@ 0x64
 8016728:	ee67 7a86 	vmul.f32	s15, s15, s12
 801672c:	ee77 7a87 	vadd.f32	s15, s15, s14
    tmp += input_1[26] * filter[26];
 8016730:	ed97 7a1a 	vldr	s14, [r7, #104]	@ 0x68
 8016734:	ed94 6a1a 	vldr	s12, [r4, #104]	@ 0x68
 8016738:	ee27 7a06 	vmul.f32	s14, s14, s12
 801673c:	ee37 7a27 	vadd.f32	s14, s14, s15
    tmp += input_1[27] * filter[27];
 8016740:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 8016744:	ed94 6a1b 	vldr	s12, [r4, #108]	@ 0x6c
 8016748:	ee67 7a86 	vmul.f32	s15, s15, s12
 801674c:	ee77 7a87 	vadd.f32	s15, s15, s14
    tmp += input_1[28] * filter[28];
 8016750:	ed97 7a1c 	vldr	s14, [r7, #112]	@ 0x70
 8016754:	ed94 6a1c 	vldr	s12, [r4, #112]	@ 0x70
 8016758:	ee27 7a06 	vmul.f32	s14, s14, s12
 801675c:	ee37 7a27 	vadd.f32	s14, s14, s15
    tmp += input_1[29] * filter[29];
 8016760:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 8016764:	ed94 6a1d 	vldr	s12, [r4, #116]	@ 0x74
 8016768:	ee67 7a86 	vmul.f32	s15, s15, s12
 801676c:	ee77 7a87 	vadd.f32	s15, s15, s14
    tmp += input_1[30] * filter[30];
 8016770:	ed97 7a1e 	vldr	s14, [r7, #120]	@ 0x78
 8016774:	ed94 6a1e 	vldr	s12, [r4, #120]	@ 0x78
 8016778:	ee27 7a06 	vmul.f32	s14, s14, s12
 801677c:	ee37 7a27 	vadd.f32	s14, s14, s15
    tmp += input_1[31] * filter[31];
 8016780:	edd7 7a1f 	vldr	s15, [r7, #124]	@ 0x7c
 8016784:	ed94 6a1f 	vldr	s12, [r4, #124]	@ 0x7c
 8016788:	ee67 7a86 	vmul.f32	s15, s15, s12
 801678c:	ee77 7a87 	vadd.f32	s15, s15, s14
    tmp += input_1[32] * filter[32];
 8016790:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 8016794:	ed94 6a20 	vldr	s12, [r4, #128]	@ 0x80
 8016798:	ee27 7a06 	vmul.f32	s14, s14, s12
 801679c:	ee37 7a27 	vadd.f32	s14, s14, s15
    tmp += input_1[33] * filter[33];
 80167a0:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 80167a4:	ed94 6a21 	vldr	s12, [r4, #132]	@ 0x84
 80167a8:	ee67 7a86 	vmul.f32	s15, s15, s12
 80167ac:	ee77 7a87 	vadd.f32	s15, s15, s14
    tmp += input_1[34] * filter[34];
 80167b0:	ed97 7a22 	vldr	s14, [r7, #136]	@ 0x88
 80167b4:	ed94 6a22 	vldr	s12, [r4, #136]	@ 0x88
 80167b8:	ee27 7a06 	vmul.f32	s14, s14, s12
 80167bc:	ee37 7a27 	vadd.f32	s14, s14, s15
    tmp += input_1[35] * filter[35];
 80167c0:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 80167c4:	ed94 6a23 	vldr	s12, [r4, #140]	@ 0x8c
 80167c8:	ee67 7a86 	vmul.f32	s15, s15, s12
 80167cc:	ee77 7a87 	vadd.f32	s15, s15, s14
    tmp += input_1[36] * filter[36];
 80167d0:	ed97 7a24 	vldr	s14, [r7, #144]	@ 0x90
 80167d4:	ed94 6a24 	vldr	s12, [r4, #144]	@ 0x90
 80167d8:	ee27 7a06 	vmul.f32	s14, s14, s12
 80167dc:	ee37 7a27 	vadd.f32	s14, s14, s15
    tmp += input_1[37] * filter[37];
 80167e0:	edd7 7a25 	vldr	s15, [r7, #148]	@ 0x94
 80167e4:	ed94 6a25 	vldr	s12, [r4, #148]	@ 0x94
 80167e8:	ee67 7a86 	vmul.f32	s15, s15, s12
 80167ec:	ee77 7a87 	vadd.f32	s15, s15, s14
    tmp += input_1[38] * filter[38];
 80167f0:	ed97 7a26 	vldr	s14, [r7, #152]	@ 0x98
 80167f4:	ed94 6a26 	vldr	s12, [r4, #152]	@ 0x98
 80167f8:	ee27 7a06 	vmul.f32	s14, s14, s12
 80167fc:	ee37 7a27 	vadd.f32	s14, s14, s15
    tmp += input_1[39] * filter[39];
 8016800:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 8016804:	ed94 6a27 	vldr	s12, [r4, #156]	@ 0x9c
 8016808:	ee67 7a86 	vmul.f32	s15, s15, s12
 801680c:	ee77 7a87 	vadd.f32	s15, s15, s14
    tmp += input_1[40] * filter[40];
 8016810:	ed97 7a28 	vldr	s14, [r7, #160]	@ 0xa0
 8016814:	ed94 6a28 	vldr	s12, [r4, #160]	@ 0xa0
 8016818:	ee27 7a06 	vmul.f32	s14, s14, s12
 801681c:	ee37 7a27 	vadd.f32	s14, s14, s15
    tmp += input_1[41] * filter[41];
 8016820:	edd7 7a29 	vldr	s15, [r7, #164]	@ 0xa4
 8016824:	ed94 6a29 	vldr	s12, [r4, #164]	@ 0xa4
 8016828:	ee67 7a86 	vmul.f32	s15, s15, s12
 801682c:	ee77 7a87 	vadd.f32	s15, s15, s14
    tmp += input_1[42] * filter[42];
 8016830:	ed97 7a2a 	vldr	s14, [r7, #168]	@ 0xa8
 8016834:	ed94 6a2a 	vldr	s12, [r4, #168]	@ 0xa8
 8016838:	ee27 7a06 	vmul.f32	s14, s14, s12
 801683c:	ee37 7a27 	vadd.f32	s14, s14, s15
    tmp += input_1[43] * filter[43];
 8016840:	edd7 7a2b 	vldr	s15, [r7, #172]	@ 0xac
 8016844:	ed94 6a2b 	vldr	s12, [r4, #172]	@ 0xac
 8016848:	ee67 7a86 	vmul.f32	s15, s15, s12
 801684c:	ee77 7a87 	vadd.f32	s15, s15, s14
    tmp += input_1[44] * filter[44];
 8016850:	ed97 7a2c 	vldr	s14, [r7, #176]	@ 0xb0
 8016854:	ed94 6a2c 	vldr	s12, [r4, #176]	@ 0xb0
 8016858:	ee27 7a06 	vmul.f32	s14, s14, s12
 801685c:	ee37 7a27 	vadd.f32	s14, s14, s15
    tmp += input_1[45] * filter[45];
 8016860:	edd7 7a2d 	vldr	s15, [r7, #180]	@ 0xb4
 8016864:	ed94 6a2d 	vldr	s12, [r4, #180]	@ 0xb4
 8016868:	ee67 7a86 	vmul.f32	s15, s15, s12
 801686c:	ee77 7a87 	vadd.f32	s15, s15, s14
    tmp += input_1[46] * filter[46];
 8016870:	ed97 7a2e 	vldr	s14, [r7, #184]	@ 0xb8
 8016874:	ed94 6a2e 	vldr	s12, [r4, #184]	@ 0xb8
 8016878:	ee27 7a06 	vmul.f32	s14, s14, s12
 801687c:	ee37 7a27 	vadd.f32	s14, s14, s15
    tmp += input_1[47] * filter[47];
 8016880:	edd7 7a2f 	vldr	s15, [r7, #188]	@ 0xbc
 8016884:	ed94 6a2f 	vldr	s12, [r4, #188]	@ 0xbc
 8016888:	ee67 7a86 	vmul.f32	s15, s15, s12
 801688c:	ee77 7a87 	vadd.f32	s15, s15, s14
    tmp += input_1[48] * filter[48];
 8016890:	ed97 7a30 	vldr	s14, [r7, #192]	@ 0xc0
 8016894:	ed94 6a30 	vldr	s12, [r4, #192]	@ 0xc0
 8016898:	ee27 7a06 	vmul.f32	s14, s14, s12
 801689c:	ee37 7a27 	vadd.f32	s14, s14, s15
    tmp += input_1[49] * filter[49];
 80168a0:	edd7 7a31 	vldr	s15, [r7, #196]	@ 0xc4
 80168a4:	ed94 6a31 	vldr	s12, [r4, #196]	@ 0xc4
 80168a8:	ee67 7a86 	vmul.f32	s15, s15, s12
 80168ac:	ee77 7a87 	vadd.f32	s15, s15, s14
    tmp += input_1[50] * filter[50];
 80168b0:	ed97 7a32 	vldr	s14, [r7, #200]	@ 0xc8
 80168b4:	ed94 6a32 	vldr	s12, [r4, #200]	@ 0xc8
 80168b8:	ee27 7a06 	vmul.f32	s14, s14, s12
 80168bc:	ee37 7a27 	vadd.f32	s14, s14, s15
    tmp += input_1[51] * filter[51];
 80168c0:	edd7 7a33 	vldr	s15, [r7, #204]	@ 0xcc
 80168c4:	ed94 6a33 	vldr	s12, [r4, #204]	@ 0xcc
 80168c8:	ee67 7a86 	vmul.f32	s15, s15, s12
 80168cc:	ee77 7a87 	vadd.f32	s15, s15, s14
    tmp += input_1[52] * filter[52];
 80168d0:	ed97 7a34 	vldr	s14, [r7, #208]	@ 0xd0
 80168d4:	ed94 6a34 	vldr	s12, [r4, #208]	@ 0xd0
 80168d8:	ee27 7a06 	vmul.f32	s14, s14, s12
 80168dc:	ee37 7a27 	vadd.f32	s14, s14, s15
    tmp += input_1[53] * filter[53];
 80168e0:	edd7 7a35 	vldr	s15, [r7, #212]	@ 0xd4
 80168e4:	ed94 6a35 	vldr	s12, [r4, #212]	@ 0xd4
 80168e8:	ee67 7a86 	vmul.f32	s15, s15, s12
 80168ec:	ee77 7a87 	vadd.f32	s15, s15, s14
    tmp += input_1[54] * filter[54];
 80168f0:	ed97 7a36 	vldr	s14, [r7, #216]	@ 0xd8
 80168f4:	ed94 6a36 	vldr	s12, [r4, #216]	@ 0xd8
 80168f8:	ee27 7a06 	vmul.f32	s14, s14, s12
 80168fc:	ee37 7a27 	vadd.f32	s14, s14, s15
    tmp += input_1[55] * filter[55];
 8016900:	edd7 7a37 	vldr	s15, [r7, #220]	@ 0xdc
 8016904:	ed94 6a37 	vldr	s12, [r4, #220]	@ 0xdc
 8016908:	ee67 7a86 	vmul.f32	s15, s15, s12
 801690c:	ee77 7a87 	vadd.f32	s15, s15, s14
    tmp += input_1[56] * filter[56];
 8016910:	ed97 7a38 	vldr	s14, [r7, #224]	@ 0xe0
 8016914:	ed94 6a38 	vldr	s12, [r4, #224]	@ 0xe0
 8016918:	ee27 7a06 	vmul.f32	s14, s14, s12
 801691c:	ee37 7a27 	vadd.f32	s14, s14, s15
    tmp += input_1[57] * filter[57];
 8016920:	edd7 7a39 	vldr	s15, [r7, #228]	@ 0xe4
 8016924:	ed94 6a39 	vldr	s12, [r4, #228]	@ 0xe4
 8016928:	ee67 7a86 	vmul.f32	s15, s15, s12
 801692c:	ee77 7a87 	vadd.f32	s15, s15, s14
    tmp += input_1[58] * filter[58];
 8016930:	ed97 7a3a 	vldr	s14, [r7, #232]	@ 0xe8
 8016934:	ed94 6a3a 	vldr	s12, [r4, #232]	@ 0xe8
 8016938:	ee27 7a06 	vmul.f32	s14, s14, s12
 801693c:	ee37 7a27 	vadd.f32	s14, s14, s15
    tmp += input_1[59] * filter[59];
 8016940:	edd7 7a3b 	vldr	s15, [r7, #236]	@ 0xec
 8016944:	ed94 6a3b 	vldr	s12, [r4, #236]	@ 0xec
 8016948:	ee67 7a86 	vmul.f32	s15, s15, s12
 801694c:	ee77 7a87 	vadd.f32	s15, s15, s14
    tmp += input_1[60] * filter[60];
 8016950:	ed97 7a3c 	vldr	s14, [r7, #240]	@ 0xf0
 8016954:	ed94 6a3c 	vldr	s12, [r4, #240]	@ 0xf0
 8016958:	ee27 7a06 	vmul.f32	s14, s14, s12
 801695c:	ee37 7a27 	vadd.f32	s14, s14, s15
    tmp += input_1[61] * filter[61];
 8016960:	edd7 7a3d 	vldr	s15, [r7, #244]	@ 0xf4
 8016964:	ed94 6a3d 	vldr	s12, [r4, #244]	@ 0xf4
 8016968:	ee67 7a86 	vmul.f32	s15, s15, s12
 801696c:	ee77 7a87 	vadd.f32	s15, s15, s14
    tmp += input_1[62] * filter[62];
 8016970:	ed97 7a3e 	vldr	s14, [r7, #248]	@ 0xf8
 8016974:	ed94 6a3e 	vldr	s12, [r4, #248]	@ 0xf8
 8016978:	ee27 7a06 	vmul.f32	s14, s14, s12
 801697c:	ee37 7a27 	vadd.f32	s14, s14, s15
    tmp += input_1[63] * filter[63];
 8016980:	edd7 7a3f 	vldr	s15, [r7, #252]	@ 0xfc
 8016984:	ed94 6a3f 	vldr	s12, [r4, #252]	@ 0xfc
 8016988:	ee67 7a86 	vmul.f32	s15, s15, s12
 801698c:	ee77 7a87 	vadd.f32	s15, s15, s14
    *sum_1 += tmp;
 8016990:	ed91 7a00 	vldr	s14, [r1]
 8016994:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016998:	edc1 7a00 	vstr	s15, [r1]
    tmp = 0;
    tmp += input_2[0] * filter[0];
 801699c:	ed96 7a00 	vldr	s14, [r6]
 80169a0:	edd4 7a00 	vldr	s15, [r4]
 80169a4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80169a8:	ee37 7a26 	vadd.f32	s14, s14, s13
    tmp += input_2[1] * filter[1];
 80169ac:	edd6 7a01 	vldr	s15, [r6, #4]
 80169b0:	ed94 6a01 	vldr	s12, [r4, #4]
 80169b4:	ee67 7a86 	vmul.f32	s15, s15, s12
 80169b8:	ee77 7a87 	vadd.f32	s15, s15, s14
    tmp += input_2[2] * filter[2];
 80169bc:	ed96 7a02 	vldr	s14, [r6, #8]
 80169c0:	ed94 6a02 	vldr	s12, [r4, #8]
 80169c4:	ee27 7a06 	vmul.f32	s14, s14, s12
 80169c8:	ee37 7a27 	vadd.f32	s14, s14, s15
    tmp += input_2[3] * filter[3];
 80169cc:	edd6 7a03 	vldr	s15, [r6, #12]
 80169d0:	ed94 6a03 	vldr	s12, [r4, #12]
 80169d4:	ee67 7a86 	vmul.f32	s15, s15, s12
 80169d8:	ee77 7a87 	vadd.f32	s15, s15, s14
    tmp += input_2[4] * filter[4];
 80169dc:	ed96 7a04 	vldr	s14, [r6, #16]
 80169e0:	ed94 6a04 	vldr	s12, [r4, #16]
 80169e4:	ee27 7a06 	vmul.f32	s14, s14, s12
 80169e8:	ee37 7a27 	vadd.f32	s14, s14, s15
    tmp += input_2[5] * filter[5];
 80169ec:	edd6 7a05 	vldr	s15, [r6, #20]
 80169f0:	ed94 6a05 	vldr	s12, [r4, #20]
 80169f4:	ee67 7a86 	vmul.f32	s15, s15, s12
 80169f8:	ee77 7a87 	vadd.f32	s15, s15, s14
    tmp += input_2[6] * filter[6];
 80169fc:	ed96 7a06 	vldr	s14, [r6, #24]
 8016a00:	ed94 6a06 	vldr	s12, [r4, #24]
 8016a04:	ee27 7a06 	vmul.f32	s14, s14, s12
 8016a08:	ee37 7a27 	vadd.f32	s14, s14, s15
    tmp += input_2[7] * filter[7];
 8016a0c:	edd6 7a07 	vldr	s15, [r6, #28]
 8016a10:	ed94 6a07 	vldr	s12, [r4, #28]
 8016a14:	ee67 7a86 	vmul.f32	s15, s15, s12
 8016a18:	ee77 7a87 	vadd.f32	s15, s15, s14
    tmp += input_2[8] * filter[8];
 8016a1c:	ed96 7a08 	vldr	s14, [r6, #32]
 8016a20:	ed94 6a08 	vldr	s12, [r4, #32]
 8016a24:	ee27 7a06 	vmul.f32	s14, s14, s12
 8016a28:	ee37 7a27 	vadd.f32	s14, s14, s15
    tmp += input_2[9] * filter[9];
 8016a2c:	edd6 7a09 	vldr	s15, [r6, #36]	@ 0x24
 8016a30:	ed94 6a09 	vldr	s12, [r4, #36]	@ 0x24
 8016a34:	ee67 7a86 	vmul.f32	s15, s15, s12
 8016a38:	ee77 7a87 	vadd.f32	s15, s15, s14
    tmp += input_2[10] * filter[10];
 8016a3c:	ed96 7a0a 	vldr	s14, [r6, #40]	@ 0x28
 8016a40:	ed94 6a0a 	vldr	s12, [r4, #40]	@ 0x28
 8016a44:	ee27 7a06 	vmul.f32	s14, s14, s12
 8016a48:	ee37 7a27 	vadd.f32	s14, s14, s15
    tmp += input_2[11] * filter[11];
 8016a4c:	edd6 7a0b 	vldr	s15, [r6, #44]	@ 0x2c
 8016a50:	ed94 6a0b 	vldr	s12, [r4, #44]	@ 0x2c
 8016a54:	ee67 7a86 	vmul.f32	s15, s15, s12
 8016a58:	ee77 7a87 	vadd.f32	s15, s15, s14
    tmp += input_2[12] * filter[12];
 8016a5c:	ed96 7a0c 	vldr	s14, [r6, #48]	@ 0x30
 8016a60:	ed94 6a0c 	vldr	s12, [r4, #48]	@ 0x30
 8016a64:	ee27 7a06 	vmul.f32	s14, s14, s12
 8016a68:	ee37 7a27 	vadd.f32	s14, s14, s15
    tmp += input_2[13] * filter[13];
 8016a6c:	edd6 7a0d 	vldr	s15, [r6, #52]	@ 0x34
 8016a70:	ed94 6a0d 	vldr	s12, [r4, #52]	@ 0x34
 8016a74:	ee67 7a86 	vmul.f32	s15, s15, s12
 8016a78:	ee77 7a87 	vadd.f32	s15, s15, s14
    tmp += input_2[14] * filter[14];
 8016a7c:	ed96 7a0e 	vldr	s14, [r6, #56]	@ 0x38
 8016a80:	ed94 6a0e 	vldr	s12, [r4, #56]	@ 0x38
 8016a84:	ee27 7a06 	vmul.f32	s14, s14, s12
 8016a88:	ee37 7a27 	vadd.f32	s14, s14, s15
    tmp += input_2[15] * filter[15];
 8016a8c:	edd6 7a0f 	vldr	s15, [r6, #60]	@ 0x3c
 8016a90:	ed94 6a0f 	vldr	s12, [r4, #60]	@ 0x3c
 8016a94:	ee67 7a86 	vmul.f32	s15, s15, s12
 8016a98:	ee77 7a87 	vadd.f32	s15, s15, s14
    tmp += input_2[16] * filter[16];
 8016a9c:	ed96 7a10 	vldr	s14, [r6, #64]	@ 0x40
 8016aa0:	ed94 6a10 	vldr	s12, [r4, #64]	@ 0x40
 8016aa4:	ee27 7a06 	vmul.f32	s14, s14, s12
 8016aa8:	ee37 7a27 	vadd.f32	s14, s14, s15
    tmp += input_2[17] * filter[17];
 8016aac:	edd6 7a11 	vldr	s15, [r6, #68]	@ 0x44
 8016ab0:	ed94 6a11 	vldr	s12, [r4, #68]	@ 0x44
 8016ab4:	ee67 7a86 	vmul.f32	s15, s15, s12
 8016ab8:	ee77 7a87 	vadd.f32	s15, s15, s14
    tmp += input_2[18] * filter[18];
 8016abc:	ed96 7a12 	vldr	s14, [r6, #72]	@ 0x48
 8016ac0:	ed94 6a12 	vldr	s12, [r4, #72]	@ 0x48
 8016ac4:	ee27 7a06 	vmul.f32	s14, s14, s12
 8016ac8:	ee37 7a27 	vadd.f32	s14, s14, s15
    tmp += input_2[19] * filter[19];
 8016acc:	edd6 7a13 	vldr	s15, [r6, #76]	@ 0x4c
 8016ad0:	ed94 6a13 	vldr	s12, [r4, #76]	@ 0x4c
 8016ad4:	ee67 7a86 	vmul.f32	s15, s15, s12
 8016ad8:	ee77 7a87 	vadd.f32	s15, s15, s14
    tmp += input_2[20] * filter[20];
 8016adc:	ed96 7a14 	vldr	s14, [r6, #80]	@ 0x50
 8016ae0:	ed94 6a14 	vldr	s12, [r4, #80]	@ 0x50
 8016ae4:	ee27 7a06 	vmul.f32	s14, s14, s12
 8016ae8:	ee37 7a27 	vadd.f32	s14, s14, s15
    tmp += input_2[21] * filter[21];
 8016aec:	edd6 7a15 	vldr	s15, [r6, #84]	@ 0x54
 8016af0:	ed94 6a15 	vldr	s12, [r4, #84]	@ 0x54
 8016af4:	ee67 7a86 	vmul.f32	s15, s15, s12
 8016af8:	ee77 7a87 	vadd.f32	s15, s15, s14
    tmp += input_2[22] * filter[22];
 8016afc:	ed96 7a16 	vldr	s14, [r6, #88]	@ 0x58
 8016b00:	ed94 6a16 	vldr	s12, [r4, #88]	@ 0x58
 8016b04:	ee27 7a06 	vmul.f32	s14, s14, s12
 8016b08:	ee37 7a27 	vadd.f32	s14, s14, s15
    tmp += input_2[23] * filter[23];
 8016b0c:	edd6 7a17 	vldr	s15, [r6, #92]	@ 0x5c
 8016b10:	ed94 6a17 	vldr	s12, [r4, #92]	@ 0x5c
 8016b14:	ee67 7a86 	vmul.f32	s15, s15, s12
 8016b18:	ee77 7a87 	vadd.f32	s15, s15, s14
    tmp += input_2[24] * filter[24];
 8016b1c:	ed96 7a18 	vldr	s14, [r6, #96]	@ 0x60
 8016b20:	ed94 6a18 	vldr	s12, [r4, #96]	@ 0x60
 8016b24:	ee27 7a06 	vmul.f32	s14, s14, s12
 8016b28:	ee37 7a27 	vadd.f32	s14, s14, s15
    tmp += input_2[25] * filter[25];
 8016b2c:	edd6 7a19 	vldr	s15, [r6, #100]	@ 0x64
 8016b30:	ed94 6a19 	vldr	s12, [r4, #100]	@ 0x64
 8016b34:	ee67 7a86 	vmul.f32	s15, s15, s12
 8016b38:	ee77 7a87 	vadd.f32	s15, s15, s14
    tmp += input_2[26] * filter[26];
 8016b3c:	ed96 7a1a 	vldr	s14, [r6, #104]	@ 0x68
 8016b40:	ed94 6a1a 	vldr	s12, [r4, #104]	@ 0x68
 8016b44:	ee27 7a06 	vmul.f32	s14, s14, s12
 8016b48:	ee37 7a27 	vadd.f32	s14, s14, s15
    tmp += input_2[27] * filter[27];
 8016b4c:	edd6 7a1b 	vldr	s15, [r6, #108]	@ 0x6c
 8016b50:	ed94 6a1b 	vldr	s12, [r4, #108]	@ 0x6c
 8016b54:	ee67 7a86 	vmul.f32	s15, s15, s12
 8016b58:	ee77 7a87 	vadd.f32	s15, s15, s14
    tmp += input_2[28] * filter[28];
 8016b5c:	ed96 7a1c 	vldr	s14, [r6, #112]	@ 0x70
 8016b60:	ed94 6a1c 	vldr	s12, [r4, #112]	@ 0x70
 8016b64:	ee27 7a06 	vmul.f32	s14, s14, s12
 8016b68:	ee37 7a27 	vadd.f32	s14, s14, s15
    tmp += input_2[29] * filter[29];
 8016b6c:	edd6 7a1d 	vldr	s15, [r6, #116]	@ 0x74
 8016b70:	ed94 6a1d 	vldr	s12, [r4, #116]	@ 0x74
 8016b74:	ee67 7a86 	vmul.f32	s15, s15, s12
 8016b78:	ee77 7a87 	vadd.f32	s15, s15, s14
    tmp += input_2[30] * filter[30];
 8016b7c:	ed96 7a1e 	vldr	s14, [r6, #120]	@ 0x78
 8016b80:	ed94 6a1e 	vldr	s12, [r4, #120]	@ 0x78
 8016b84:	ee27 7a06 	vmul.f32	s14, s14, s12
 8016b88:	ee37 7a27 	vadd.f32	s14, s14, s15
    tmp += input_2[31] * filter[31];
 8016b8c:	edd6 7a1f 	vldr	s15, [r6, #124]	@ 0x7c
 8016b90:	ed94 6a1f 	vldr	s12, [r4, #124]	@ 0x7c
 8016b94:	ee67 7a86 	vmul.f32	s15, s15, s12
 8016b98:	ee77 7a87 	vadd.f32	s15, s15, s14
    tmp += input_2[32] * filter[32];
 8016b9c:	ed96 7a20 	vldr	s14, [r6, #128]	@ 0x80
 8016ba0:	ed94 6a20 	vldr	s12, [r4, #128]	@ 0x80
 8016ba4:	ee27 7a06 	vmul.f32	s14, s14, s12
 8016ba8:	ee37 7a27 	vadd.f32	s14, s14, s15
    tmp += input_2[33] * filter[33];
 8016bac:	edd6 7a21 	vldr	s15, [r6, #132]	@ 0x84
 8016bb0:	ed94 6a21 	vldr	s12, [r4, #132]	@ 0x84
 8016bb4:	ee67 7a86 	vmul.f32	s15, s15, s12
 8016bb8:	ee77 7a87 	vadd.f32	s15, s15, s14
    tmp += input_2[34] * filter[34];
 8016bbc:	ed96 7a22 	vldr	s14, [r6, #136]	@ 0x88
 8016bc0:	ed94 6a22 	vldr	s12, [r4, #136]	@ 0x88
 8016bc4:	ee27 7a06 	vmul.f32	s14, s14, s12
 8016bc8:	ee37 7a27 	vadd.f32	s14, s14, s15
    tmp += input_2[35] * filter[35];
 8016bcc:	edd6 7a23 	vldr	s15, [r6, #140]	@ 0x8c
 8016bd0:	ed94 6a23 	vldr	s12, [r4, #140]	@ 0x8c
 8016bd4:	ee67 7a86 	vmul.f32	s15, s15, s12
 8016bd8:	ee77 7a87 	vadd.f32	s15, s15, s14
    tmp += input_2[36] * filter[36];
 8016bdc:	ed96 7a24 	vldr	s14, [r6, #144]	@ 0x90
 8016be0:	ed94 6a24 	vldr	s12, [r4, #144]	@ 0x90
 8016be4:	ee27 7a06 	vmul.f32	s14, s14, s12
 8016be8:	ee37 7a27 	vadd.f32	s14, s14, s15
    tmp += input_2[37] * filter[37];
 8016bec:	edd6 7a25 	vldr	s15, [r6, #148]	@ 0x94
 8016bf0:	ed94 6a25 	vldr	s12, [r4, #148]	@ 0x94
 8016bf4:	ee67 7a86 	vmul.f32	s15, s15, s12
 8016bf8:	ee77 7a87 	vadd.f32	s15, s15, s14
    tmp += input_2[38] * filter[38];
 8016bfc:	ed96 7a26 	vldr	s14, [r6, #152]	@ 0x98
 8016c00:	ed94 6a26 	vldr	s12, [r4, #152]	@ 0x98
 8016c04:	ee27 7a06 	vmul.f32	s14, s14, s12
 8016c08:	ee37 7a27 	vadd.f32	s14, s14, s15
    tmp += input_2[39] * filter[39];
 8016c0c:	edd6 7a27 	vldr	s15, [r6, #156]	@ 0x9c
 8016c10:	ed94 6a27 	vldr	s12, [r4, #156]	@ 0x9c
 8016c14:	ee67 7a86 	vmul.f32	s15, s15, s12
 8016c18:	ee77 7a87 	vadd.f32	s15, s15, s14
    tmp += input_2[40] * filter[40];
 8016c1c:	ed96 7a28 	vldr	s14, [r6, #160]	@ 0xa0
 8016c20:	ed94 6a28 	vldr	s12, [r4, #160]	@ 0xa0
 8016c24:	ee27 7a06 	vmul.f32	s14, s14, s12
 8016c28:	ee37 7a27 	vadd.f32	s14, s14, s15
    tmp += input_2[41] * filter[41];
 8016c2c:	edd6 7a29 	vldr	s15, [r6, #164]	@ 0xa4
 8016c30:	ed94 6a29 	vldr	s12, [r4, #164]	@ 0xa4
 8016c34:	ee67 7a86 	vmul.f32	s15, s15, s12
 8016c38:	ee77 7a87 	vadd.f32	s15, s15, s14
    tmp += input_2[42] * filter[42];
 8016c3c:	ed96 7a2a 	vldr	s14, [r6, #168]	@ 0xa8
 8016c40:	ed94 6a2a 	vldr	s12, [r4, #168]	@ 0xa8
 8016c44:	ee27 7a06 	vmul.f32	s14, s14, s12
 8016c48:	ee37 7a27 	vadd.f32	s14, s14, s15
    tmp += input_2[43] * filter[43];
 8016c4c:	edd6 7a2b 	vldr	s15, [r6, #172]	@ 0xac
 8016c50:	ed94 6a2b 	vldr	s12, [r4, #172]	@ 0xac
 8016c54:	ee67 7a86 	vmul.f32	s15, s15, s12
 8016c58:	ee77 7a87 	vadd.f32	s15, s15, s14
    tmp += input_2[44] * filter[44];
 8016c5c:	ed96 7a2c 	vldr	s14, [r6, #176]	@ 0xb0
 8016c60:	ed94 6a2c 	vldr	s12, [r4, #176]	@ 0xb0
 8016c64:	ee27 7a06 	vmul.f32	s14, s14, s12
 8016c68:	ee37 7a27 	vadd.f32	s14, s14, s15
    tmp += input_2[45] * filter[45];
 8016c6c:	edd6 7a2d 	vldr	s15, [r6, #180]	@ 0xb4
 8016c70:	ed94 6a2d 	vldr	s12, [r4, #180]	@ 0xb4
 8016c74:	ee67 7a86 	vmul.f32	s15, s15, s12
 8016c78:	ee77 7a87 	vadd.f32	s15, s15, s14
    tmp += input_2[46] * filter[46];
 8016c7c:	ed96 7a2e 	vldr	s14, [r6, #184]	@ 0xb8
 8016c80:	ed94 6a2e 	vldr	s12, [r4, #184]	@ 0xb8
 8016c84:	ee27 7a06 	vmul.f32	s14, s14, s12
 8016c88:	ee37 7a27 	vadd.f32	s14, s14, s15
    tmp += input_2[47] * filter[47];
 8016c8c:	edd6 7a2f 	vldr	s15, [r6, #188]	@ 0xbc
 8016c90:	ed94 6a2f 	vldr	s12, [r4, #188]	@ 0xbc
 8016c94:	ee67 7a86 	vmul.f32	s15, s15, s12
 8016c98:	ee77 7a87 	vadd.f32	s15, s15, s14
    tmp += input_2[48] * filter[48];
 8016c9c:	ed96 7a30 	vldr	s14, [r6, #192]	@ 0xc0
 8016ca0:	ed94 6a30 	vldr	s12, [r4, #192]	@ 0xc0
 8016ca4:	ee27 7a06 	vmul.f32	s14, s14, s12
 8016ca8:	ee37 7a27 	vadd.f32	s14, s14, s15
    tmp += input_2[49] * filter[49];
 8016cac:	edd6 7a31 	vldr	s15, [r6, #196]	@ 0xc4
 8016cb0:	ed94 6a31 	vldr	s12, [r4, #196]	@ 0xc4
 8016cb4:	ee67 7a86 	vmul.f32	s15, s15, s12
 8016cb8:	ee77 7a87 	vadd.f32	s15, s15, s14
    tmp += input_2[50] * filter[50];
 8016cbc:	ed96 7a32 	vldr	s14, [r6, #200]	@ 0xc8
 8016cc0:	ed94 6a32 	vldr	s12, [r4, #200]	@ 0xc8
 8016cc4:	ee27 7a06 	vmul.f32	s14, s14, s12
 8016cc8:	ee37 7a27 	vadd.f32	s14, s14, s15
    tmp += input_2[51] * filter[51];
 8016ccc:	edd6 7a33 	vldr	s15, [r6, #204]	@ 0xcc
 8016cd0:	ed94 6a33 	vldr	s12, [r4, #204]	@ 0xcc
 8016cd4:	ee67 7a86 	vmul.f32	s15, s15, s12
 8016cd8:	ee77 7a87 	vadd.f32	s15, s15, s14
    tmp += input_2[52] * filter[52];
 8016cdc:	ed96 7a34 	vldr	s14, [r6, #208]	@ 0xd0
 8016ce0:	ed94 6a34 	vldr	s12, [r4, #208]	@ 0xd0
 8016ce4:	ee27 7a06 	vmul.f32	s14, s14, s12
 8016ce8:	ee37 7a27 	vadd.f32	s14, s14, s15
    tmp += input_2[53] * filter[53];
 8016cec:	edd6 7a35 	vldr	s15, [r6, #212]	@ 0xd4
 8016cf0:	ed94 6a35 	vldr	s12, [r4, #212]	@ 0xd4
 8016cf4:	ee67 7a86 	vmul.f32	s15, s15, s12
 8016cf8:	ee77 7a87 	vadd.f32	s15, s15, s14
    tmp += input_2[54] * filter[54];
 8016cfc:	ed96 7a36 	vldr	s14, [r6, #216]	@ 0xd8
 8016d00:	ed94 6a36 	vldr	s12, [r4, #216]	@ 0xd8
 8016d04:	ee27 7a06 	vmul.f32	s14, s14, s12
 8016d08:	ee37 7a27 	vadd.f32	s14, s14, s15
    tmp += input_2[55] * filter[55];
 8016d0c:	edd6 7a37 	vldr	s15, [r6, #220]	@ 0xdc
 8016d10:	ed94 6a37 	vldr	s12, [r4, #220]	@ 0xdc
 8016d14:	ee67 7a86 	vmul.f32	s15, s15, s12
 8016d18:	ee77 7a87 	vadd.f32	s15, s15, s14
    tmp += input_2[56] * filter[56];
 8016d1c:	ed96 7a38 	vldr	s14, [r6, #224]	@ 0xe0
 8016d20:	ed94 6a38 	vldr	s12, [r4, #224]	@ 0xe0
 8016d24:	ee27 7a06 	vmul.f32	s14, s14, s12
 8016d28:	ee37 7a27 	vadd.f32	s14, s14, s15
    tmp += input_2[57] * filter[57];
 8016d2c:	edd6 7a39 	vldr	s15, [r6, #228]	@ 0xe4
 8016d30:	ed94 6a39 	vldr	s12, [r4, #228]	@ 0xe4
 8016d34:	ee67 7a86 	vmul.f32	s15, s15, s12
 8016d38:	ee77 7a87 	vadd.f32	s15, s15, s14
    tmp += input_2[58] * filter[58];
 8016d3c:	ed96 7a3a 	vldr	s14, [r6, #232]	@ 0xe8
 8016d40:	ed94 6a3a 	vldr	s12, [r4, #232]	@ 0xe8
 8016d44:	ee27 7a06 	vmul.f32	s14, s14, s12
 8016d48:	ee37 7a27 	vadd.f32	s14, s14, s15
    tmp += input_2[59] * filter[59];
 8016d4c:	edd6 7a3b 	vldr	s15, [r6, #236]	@ 0xec
 8016d50:	ed94 6a3b 	vldr	s12, [r4, #236]	@ 0xec
 8016d54:	ee67 7a86 	vmul.f32	s15, s15, s12
 8016d58:	ee77 7a87 	vadd.f32	s15, s15, s14
    tmp += input_2[60] * filter[60];
 8016d5c:	ed96 7a3c 	vldr	s14, [r6, #240]	@ 0xf0
 8016d60:	ed94 6a3c 	vldr	s12, [r4, #240]	@ 0xf0
 8016d64:	ee27 7a06 	vmul.f32	s14, s14, s12
 8016d68:	ee37 7a27 	vadd.f32	s14, s14, s15
    tmp += input_2[61] * filter[61];
 8016d6c:	edd6 7a3d 	vldr	s15, [r6, #244]	@ 0xf4
 8016d70:	ed94 6a3d 	vldr	s12, [r4, #244]	@ 0xf4
 8016d74:	ee67 7a86 	vmul.f32	s15, s15, s12
 8016d78:	ee77 7a87 	vadd.f32	s15, s15, s14
    tmp += input_2[62] * filter[62];
 8016d7c:	ed96 7a3e 	vldr	s14, [r6, #248]	@ 0xf8
 8016d80:	ed94 6a3e 	vldr	s12, [r4, #248]	@ 0xf8
 8016d84:	ee27 7a06 	vmul.f32	s14, s14, s12
 8016d88:	ee37 7a27 	vadd.f32	s14, s14, s15
    tmp += input_2[63] * filter[63];
 8016d8c:	edd6 7a3f 	vldr	s15, [r6, #252]	@ 0xfc
 8016d90:	ed94 6a3f 	vldr	s12, [r4, #252]	@ 0xfc
 8016d94:	ee67 7a86 	vmul.f32	s15, s15, s12
 8016d98:	ee77 7a87 	vadd.f32	s15, s15, s14
    *sum_2 += tmp;
 8016d9c:	ed92 7a00 	vldr	s14, [r2]
 8016da0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016da4:	edc2 7a00 	vstr	s15, [r2]
    tmp = 0;
    tmp += input_3[0] * filter[0];
 8016da8:	ed95 7a00 	vldr	s14, [r5]
 8016dac:	edd4 7a00 	vldr	s15, [r4]
 8016db0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8016db4:	ee37 7a26 	vadd.f32	s14, s14, s13
    tmp += input_3[1] * filter[1];
 8016db8:	edd5 7a01 	vldr	s15, [r5, #4]
 8016dbc:	edd4 6a01 	vldr	s13, [r4, #4]
 8016dc0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8016dc4:	ee77 7a87 	vadd.f32	s15, s15, s14
    tmp += input_3[2] * filter[2];
 8016dc8:	ed95 7a02 	vldr	s14, [r5, #8]
 8016dcc:	edd4 6a02 	vldr	s13, [r4, #8]
 8016dd0:	ee27 7a26 	vmul.f32	s14, s14, s13
 8016dd4:	ee37 7a27 	vadd.f32	s14, s14, s15
    tmp += input_3[3] * filter[3];
 8016dd8:	edd5 7a03 	vldr	s15, [r5, #12]
 8016ddc:	edd4 6a03 	vldr	s13, [r4, #12]
 8016de0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8016de4:	ee77 7a87 	vadd.f32	s15, s15, s14
    tmp += input_3[4] * filter[4];
 8016de8:	ed95 7a04 	vldr	s14, [r5, #16]
 8016dec:	edd4 6a04 	vldr	s13, [r4, #16]
 8016df0:	ee27 7a26 	vmul.f32	s14, s14, s13
 8016df4:	ee37 7a27 	vadd.f32	s14, s14, s15
    tmp += input_3[5] * filter[5];
 8016df8:	edd5 7a05 	vldr	s15, [r5, #20]
 8016dfc:	edd4 6a05 	vldr	s13, [r4, #20]
 8016e00:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8016e04:	ee77 7a87 	vadd.f32	s15, s15, s14
    tmp += input_3[6] * filter[6];
 8016e08:	ed95 7a06 	vldr	s14, [r5, #24]
 8016e0c:	edd4 6a06 	vldr	s13, [r4, #24]
 8016e10:	ee27 7a26 	vmul.f32	s14, s14, s13
 8016e14:	ee37 7a27 	vadd.f32	s14, s14, s15
    tmp += input_3[7] * filter[7];
 8016e18:	edd5 7a07 	vldr	s15, [r5, #28]
 8016e1c:	edd4 6a07 	vldr	s13, [r4, #28]
 8016e20:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8016e24:	ee77 7a87 	vadd.f32	s15, s15, s14
    tmp += input_3[8] * filter[8];
 8016e28:	ed95 7a08 	vldr	s14, [r5, #32]
 8016e2c:	edd4 6a08 	vldr	s13, [r4, #32]
 8016e30:	ee27 7a26 	vmul.f32	s14, s14, s13
 8016e34:	ee37 7a27 	vadd.f32	s14, s14, s15
    tmp += input_3[9] * filter[9];
 8016e38:	edd5 7a09 	vldr	s15, [r5, #36]	@ 0x24
 8016e3c:	edd4 6a09 	vldr	s13, [r4, #36]	@ 0x24
 8016e40:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8016e44:	ee77 7a87 	vadd.f32	s15, s15, s14
    tmp += input_3[10] * filter[10];
 8016e48:	ed95 7a0a 	vldr	s14, [r5, #40]	@ 0x28
 8016e4c:	edd4 6a0a 	vldr	s13, [r4, #40]	@ 0x28
 8016e50:	ee27 7a26 	vmul.f32	s14, s14, s13
 8016e54:	ee37 7a27 	vadd.f32	s14, s14, s15
    tmp += input_3[11] * filter[11];
 8016e58:	edd5 7a0b 	vldr	s15, [r5, #44]	@ 0x2c
 8016e5c:	edd4 6a0b 	vldr	s13, [r4, #44]	@ 0x2c
 8016e60:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8016e64:	ee77 7a87 	vadd.f32	s15, s15, s14
    tmp += input_3[12] * filter[12];
 8016e68:	ed95 7a0c 	vldr	s14, [r5, #48]	@ 0x30
 8016e6c:	edd4 6a0c 	vldr	s13, [r4, #48]	@ 0x30
 8016e70:	ee27 7a26 	vmul.f32	s14, s14, s13
 8016e74:	ee37 7a27 	vadd.f32	s14, s14, s15
    tmp += input_3[13] * filter[13];
 8016e78:	edd5 7a0d 	vldr	s15, [r5, #52]	@ 0x34
 8016e7c:	edd4 6a0d 	vldr	s13, [r4, #52]	@ 0x34
 8016e80:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8016e84:	ee77 7a87 	vadd.f32	s15, s15, s14
    tmp += input_3[14] * filter[14];
 8016e88:	ed95 7a0e 	vldr	s14, [r5, #56]	@ 0x38
 8016e8c:	edd4 6a0e 	vldr	s13, [r4, #56]	@ 0x38
 8016e90:	ee27 7a26 	vmul.f32	s14, s14, s13
 8016e94:	ee37 7a27 	vadd.f32	s14, s14, s15
    tmp += input_3[15] * filter[15];
 8016e98:	edd5 7a0f 	vldr	s15, [r5, #60]	@ 0x3c
 8016e9c:	edd4 6a0f 	vldr	s13, [r4, #60]	@ 0x3c
 8016ea0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8016ea4:	ee77 7a87 	vadd.f32	s15, s15, s14
    tmp += input_3[16] * filter[16];
 8016ea8:	ed95 7a10 	vldr	s14, [r5, #64]	@ 0x40
 8016eac:	edd4 6a10 	vldr	s13, [r4, #64]	@ 0x40
 8016eb0:	ee27 7a26 	vmul.f32	s14, s14, s13
 8016eb4:	ee37 7a27 	vadd.f32	s14, s14, s15
    tmp += input_3[17] * filter[17];
 8016eb8:	edd5 7a11 	vldr	s15, [r5, #68]	@ 0x44
 8016ebc:	edd4 6a11 	vldr	s13, [r4, #68]	@ 0x44
 8016ec0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8016ec4:	ee77 7a87 	vadd.f32	s15, s15, s14
    tmp += input_3[18] * filter[18];
 8016ec8:	ed95 7a12 	vldr	s14, [r5, #72]	@ 0x48
 8016ecc:	edd4 6a12 	vldr	s13, [r4, #72]	@ 0x48
 8016ed0:	ee27 7a26 	vmul.f32	s14, s14, s13
 8016ed4:	ee37 7a27 	vadd.f32	s14, s14, s15
    tmp += input_3[19] * filter[19];
 8016ed8:	edd5 7a13 	vldr	s15, [r5, #76]	@ 0x4c
 8016edc:	edd4 6a13 	vldr	s13, [r4, #76]	@ 0x4c
 8016ee0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8016ee4:	ee77 7a87 	vadd.f32	s15, s15, s14
    tmp += input_3[20] * filter[20];
 8016ee8:	ed95 7a14 	vldr	s14, [r5, #80]	@ 0x50
 8016eec:	edd4 6a14 	vldr	s13, [r4, #80]	@ 0x50
 8016ef0:	ee27 7a26 	vmul.f32	s14, s14, s13
 8016ef4:	ee37 7a27 	vadd.f32	s14, s14, s15
    tmp += input_3[21] * filter[21];
 8016ef8:	edd5 7a15 	vldr	s15, [r5, #84]	@ 0x54
 8016efc:	edd4 6a15 	vldr	s13, [r4, #84]	@ 0x54
 8016f00:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8016f04:	ee77 7a87 	vadd.f32	s15, s15, s14
    tmp += input_3[22] * filter[22];
 8016f08:	ed95 7a16 	vldr	s14, [r5, #88]	@ 0x58
 8016f0c:	edd4 6a16 	vldr	s13, [r4, #88]	@ 0x58
 8016f10:	ee27 7a26 	vmul.f32	s14, s14, s13
 8016f14:	ee37 7a27 	vadd.f32	s14, s14, s15
    tmp += input_3[23] * filter[23];
 8016f18:	edd5 7a17 	vldr	s15, [r5, #92]	@ 0x5c
 8016f1c:	edd4 6a17 	vldr	s13, [r4, #92]	@ 0x5c
 8016f20:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8016f24:	ee77 7a87 	vadd.f32	s15, s15, s14
    tmp += input_3[24] * filter[24];
 8016f28:	ed95 7a18 	vldr	s14, [r5, #96]	@ 0x60
 8016f2c:	edd4 6a18 	vldr	s13, [r4, #96]	@ 0x60
 8016f30:	ee27 7a26 	vmul.f32	s14, s14, s13
 8016f34:	ee37 7a27 	vadd.f32	s14, s14, s15
    tmp += input_3[25] * filter[25];
 8016f38:	edd5 7a19 	vldr	s15, [r5, #100]	@ 0x64
 8016f3c:	edd4 6a19 	vldr	s13, [r4, #100]	@ 0x64
 8016f40:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8016f44:	ee77 7a87 	vadd.f32	s15, s15, s14
    tmp += input_3[26] * filter[26];
 8016f48:	ed95 7a1a 	vldr	s14, [r5, #104]	@ 0x68
 8016f4c:	edd4 6a1a 	vldr	s13, [r4, #104]	@ 0x68
 8016f50:	ee27 7a26 	vmul.f32	s14, s14, s13
 8016f54:	ee37 7a27 	vadd.f32	s14, s14, s15
    tmp += input_3[27] * filter[27];
 8016f58:	edd5 7a1b 	vldr	s15, [r5, #108]	@ 0x6c
 8016f5c:	edd4 6a1b 	vldr	s13, [r4, #108]	@ 0x6c
 8016f60:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8016f64:	ee77 7a87 	vadd.f32	s15, s15, s14
    tmp += input_3[28] * filter[28];
 8016f68:	ed95 7a1c 	vldr	s14, [r5, #112]	@ 0x70
 8016f6c:	edd4 6a1c 	vldr	s13, [r4, #112]	@ 0x70
 8016f70:	ee27 7a26 	vmul.f32	s14, s14, s13
 8016f74:	ee37 7a27 	vadd.f32	s14, s14, s15
    tmp += input_3[29] * filter[29];
 8016f78:	edd5 7a1d 	vldr	s15, [r5, #116]	@ 0x74
 8016f7c:	edd4 6a1d 	vldr	s13, [r4, #116]	@ 0x74
 8016f80:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8016f84:	ee77 7a87 	vadd.f32	s15, s15, s14
    tmp += input_3[30] * filter[30];
 8016f88:	ed95 7a1e 	vldr	s14, [r5, #120]	@ 0x78
 8016f8c:	edd4 6a1e 	vldr	s13, [r4, #120]	@ 0x78
 8016f90:	ee27 7a26 	vmul.f32	s14, s14, s13
 8016f94:	ee37 7a27 	vadd.f32	s14, s14, s15
    tmp += input_3[31] * filter[31];
 8016f98:	edd5 7a1f 	vldr	s15, [r5, #124]	@ 0x7c
 8016f9c:	edd4 6a1f 	vldr	s13, [r4, #124]	@ 0x7c
 8016fa0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8016fa4:	ee77 7a87 	vadd.f32	s15, s15, s14
    tmp += input_3[32] * filter[32];
 8016fa8:	ed95 7a20 	vldr	s14, [r5, #128]	@ 0x80
 8016fac:	edd4 6a20 	vldr	s13, [r4, #128]	@ 0x80
 8016fb0:	ee27 7a26 	vmul.f32	s14, s14, s13
 8016fb4:	ee37 7a27 	vadd.f32	s14, s14, s15
    tmp += input_3[33] * filter[33];
 8016fb8:	edd5 7a21 	vldr	s15, [r5, #132]	@ 0x84
 8016fbc:	edd4 6a21 	vldr	s13, [r4, #132]	@ 0x84
 8016fc0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8016fc4:	ee77 7a87 	vadd.f32	s15, s15, s14
    tmp += input_3[34] * filter[34];
 8016fc8:	ed95 7a22 	vldr	s14, [r5, #136]	@ 0x88
 8016fcc:	edd4 6a22 	vldr	s13, [r4, #136]	@ 0x88
 8016fd0:	ee27 7a26 	vmul.f32	s14, s14, s13
 8016fd4:	ee37 7a27 	vadd.f32	s14, s14, s15
    tmp += input_3[35] * filter[35];
 8016fd8:	edd5 7a23 	vldr	s15, [r5, #140]	@ 0x8c
 8016fdc:	edd4 6a23 	vldr	s13, [r4, #140]	@ 0x8c
 8016fe0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8016fe4:	ee77 7a87 	vadd.f32	s15, s15, s14
    tmp += input_3[36] * filter[36];
 8016fe8:	ed95 7a24 	vldr	s14, [r5, #144]	@ 0x90
 8016fec:	edd4 6a24 	vldr	s13, [r4, #144]	@ 0x90
 8016ff0:	ee27 7a26 	vmul.f32	s14, s14, s13
 8016ff4:	ee37 7a27 	vadd.f32	s14, s14, s15
    tmp += input_3[37] * filter[37];
 8016ff8:	edd5 7a25 	vldr	s15, [r5, #148]	@ 0x94
 8016ffc:	edd4 6a25 	vldr	s13, [r4, #148]	@ 0x94
 8017000:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8017004:	ee77 7a87 	vadd.f32	s15, s15, s14
    tmp += input_3[38] * filter[38];
 8017008:	ed95 7a26 	vldr	s14, [r5, #152]	@ 0x98
 801700c:	edd4 6a26 	vldr	s13, [r4, #152]	@ 0x98
 8017010:	ee27 7a26 	vmul.f32	s14, s14, s13
 8017014:	ee37 7a27 	vadd.f32	s14, s14, s15
    tmp += input_3[39] * filter[39];
 8017018:	edd5 7a27 	vldr	s15, [r5, #156]	@ 0x9c
 801701c:	edd4 6a27 	vldr	s13, [r4, #156]	@ 0x9c
 8017020:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8017024:	ee77 7a87 	vadd.f32	s15, s15, s14
    tmp += input_3[40] * filter[40];
 8017028:	ed95 7a28 	vldr	s14, [r5, #160]	@ 0xa0
 801702c:	edd4 6a28 	vldr	s13, [r4, #160]	@ 0xa0
 8017030:	ee27 7a26 	vmul.f32	s14, s14, s13
 8017034:	ee37 7a27 	vadd.f32	s14, s14, s15
    tmp += input_3[41] * filter[41];
 8017038:	edd5 7a29 	vldr	s15, [r5, #164]	@ 0xa4
 801703c:	edd4 6a29 	vldr	s13, [r4, #164]	@ 0xa4
 8017040:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8017044:	ee77 7a87 	vadd.f32	s15, s15, s14
    tmp += input_3[42] * filter[42];
 8017048:	ed95 7a2a 	vldr	s14, [r5, #168]	@ 0xa8
 801704c:	edd4 6a2a 	vldr	s13, [r4, #168]	@ 0xa8
 8017050:	ee27 7a26 	vmul.f32	s14, s14, s13
 8017054:	ee37 7a27 	vadd.f32	s14, s14, s15
    tmp += input_3[43] * filter[43];
 8017058:	edd5 7a2b 	vldr	s15, [r5, #172]	@ 0xac
 801705c:	edd4 6a2b 	vldr	s13, [r4, #172]	@ 0xac
 8017060:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8017064:	ee77 7a87 	vadd.f32	s15, s15, s14
    tmp += input_3[44] * filter[44];
 8017068:	ed95 7a2c 	vldr	s14, [r5, #176]	@ 0xb0
 801706c:	edd4 6a2c 	vldr	s13, [r4, #176]	@ 0xb0
 8017070:	ee27 7a26 	vmul.f32	s14, s14, s13
 8017074:	ee37 7a27 	vadd.f32	s14, s14, s15
    tmp += input_3[45] * filter[45];
 8017078:	edd5 7a2d 	vldr	s15, [r5, #180]	@ 0xb4
 801707c:	edd4 6a2d 	vldr	s13, [r4, #180]	@ 0xb4
 8017080:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8017084:	ee77 7a87 	vadd.f32	s15, s15, s14
    tmp += input_3[46] * filter[46];
 8017088:	ed95 7a2e 	vldr	s14, [r5, #184]	@ 0xb8
 801708c:	edd4 6a2e 	vldr	s13, [r4, #184]	@ 0xb8
 8017090:	ee27 7a26 	vmul.f32	s14, s14, s13
 8017094:	ee37 7a27 	vadd.f32	s14, s14, s15
    tmp += input_3[47] * filter[47];
 8017098:	edd5 7a2f 	vldr	s15, [r5, #188]	@ 0xbc
 801709c:	edd4 6a2f 	vldr	s13, [r4, #188]	@ 0xbc
 80170a0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80170a4:	ee77 7a87 	vadd.f32	s15, s15, s14
    tmp += input_3[48] * filter[48];
 80170a8:	ed95 7a30 	vldr	s14, [r5, #192]	@ 0xc0
 80170ac:	edd4 6a30 	vldr	s13, [r4, #192]	@ 0xc0
 80170b0:	ee27 7a26 	vmul.f32	s14, s14, s13
 80170b4:	ee37 7a27 	vadd.f32	s14, s14, s15
    tmp += input_3[49] * filter[49];
 80170b8:	edd5 7a31 	vldr	s15, [r5, #196]	@ 0xc4
 80170bc:	edd4 6a31 	vldr	s13, [r4, #196]	@ 0xc4
 80170c0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80170c4:	ee77 7a87 	vadd.f32	s15, s15, s14
    tmp += input_3[50] * filter[50];
 80170c8:	ed95 7a32 	vldr	s14, [r5, #200]	@ 0xc8
 80170cc:	edd4 6a32 	vldr	s13, [r4, #200]	@ 0xc8
 80170d0:	ee27 7a26 	vmul.f32	s14, s14, s13
 80170d4:	ee37 7a27 	vadd.f32	s14, s14, s15
    tmp += input_3[51] * filter[51];
 80170d8:	edd5 7a33 	vldr	s15, [r5, #204]	@ 0xcc
 80170dc:	edd4 6a33 	vldr	s13, [r4, #204]	@ 0xcc
 80170e0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80170e4:	ee77 7a87 	vadd.f32	s15, s15, s14
    tmp += input_3[52] * filter[52];
 80170e8:	ed95 7a34 	vldr	s14, [r5, #208]	@ 0xd0
 80170ec:	edd4 6a34 	vldr	s13, [r4, #208]	@ 0xd0
 80170f0:	ee27 7a26 	vmul.f32	s14, s14, s13
 80170f4:	ee37 7a27 	vadd.f32	s14, s14, s15
    tmp += input_3[53] * filter[53];
 80170f8:	edd5 7a35 	vldr	s15, [r5, #212]	@ 0xd4
 80170fc:	edd4 6a35 	vldr	s13, [r4, #212]	@ 0xd4
 8017100:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8017104:	ee77 7a87 	vadd.f32	s15, s15, s14
    tmp += input_3[54] * filter[54];
 8017108:	ed95 7a36 	vldr	s14, [r5, #216]	@ 0xd8
 801710c:	edd4 6a36 	vldr	s13, [r4, #216]	@ 0xd8
 8017110:	ee27 7a26 	vmul.f32	s14, s14, s13
 8017114:	ee37 7a27 	vadd.f32	s14, s14, s15
    tmp += input_3[55] * filter[55];
 8017118:	edd5 7a37 	vldr	s15, [r5, #220]	@ 0xdc
 801711c:	edd4 6a37 	vldr	s13, [r4, #220]	@ 0xdc
 8017120:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8017124:	ee77 7a87 	vadd.f32	s15, s15, s14
    tmp += input_3[56] * filter[56];
 8017128:	ed95 7a38 	vldr	s14, [r5, #224]	@ 0xe0
 801712c:	edd4 6a38 	vldr	s13, [r4, #224]	@ 0xe0
 8017130:	ee27 7a26 	vmul.f32	s14, s14, s13
 8017134:	ee37 7a27 	vadd.f32	s14, s14, s15
    tmp += input_3[57] * filter[57];
 8017138:	edd5 7a39 	vldr	s15, [r5, #228]	@ 0xe4
 801713c:	edd4 6a39 	vldr	s13, [r4, #228]	@ 0xe4
 8017140:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8017144:	ee77 7a87 	vadd.f32	s15, s15, s14
    tmp += input_3[58] * filter[58];
 8017148:	ed95 7a3a 	vldr	s14, [r5, #232]	@ 0xe8
 801714c:	edd4 6a3a 	vldr	s13, [r4, #232]	@ 0xe8
 8017150:	ee27 7a26 	vmul.f32	s14, s14, s13
 8017154:	ee37 7a27 	vadd.f32	s14, s14, s15
    tmp += input_3[59] * filter[59];
 8017158:	edd5 7a3b 	vldr	s15, [r5, #236]	@ 0xec
 801715c:	edd4 6a3b 	vldr	s13, [r4, #236]	@ 0xec
 8017160:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8017164:	ee77 7a87 	vadd.f32	s15, s15, s14
    tmp += input_3[60] * filter[60];
 8017168:	ed95 7a3c 	vldr	s14, [r5, #240]	@ 0xf0
 801716c:	edd4 6a3c 	vldr	s13, [r4, #240]	@ 0xf0
 8017170:	ee27 7a26 	vmul.f32	s14, s14, s13
 8017174:	ee37 7a27 	vadd.f32	s14, s14, s15
    tmp += input_3[61] * filter[61];
 8017178:	edd5 7a3d 	vldr	s15, [r5, #244]	@ 0xf4
 801717c:	edd4 6a3d 	vldr	s13, [r4, #244]	@ 0xf4
 8017180:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8017184:	ee77 7a87 	vadd.f32	s15, s15, s14
    tmp += input_3[62] * filter[62];
 8017188:	ed95 7a3e 	vldr	s14, [r5, #248]	@ 0xf8
 801718c:	edd4 6a3e 	vldr	s13, [r4, #248]	@ 0xf8
 8017190:	ee27 7a26 	vmul.f32	s14, s14, s13
 8017194:	ee37 7a27 	vadd.f32	s14, s14, s15
    tmp += input_3[63] * filter[63];
 8017198:	edd5 7a3f 	vldr	s15, [r5, #252]	@ 0xfc
 801719c:	edd4 6a3f 	vldr	s13, [r4, #252]	@ 0xfc
 80171a0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80171a4:	ee77 7a87 	vadd.f32	s15, s15, s14
    *sum_3 += tmp;
 80171a8:	ed93 7a00 	vldr	s14, [r3]
 80171ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80171b0:	edc3 7a00 	vstr	s15, [r3]
}
 80171b4:	bcf0      	pop	{r4, r5, r6, r7}
 80171b6:	4770      	bx	lr

080171b8 <assign_sum_to_group_output_4row16col>:
/* START: Assign Output Functions */
/* START: For Group Conv */
static inline void assign_sum_to_group_output_4row16col(int8_t* out_0, int8_t* out_1, int8_t* out_2, int8_t* out_3, int8_t* out_4, int8_t* out_5, int8_t* out_6, int8_t* out_7,
                      int8_t* out_8, int8_t* out_9, int8_t* out_10, int8_t* out_11, int8_t* out_12, int8_t* out_13, int8_t* out_14, int8_t* out_15,
                      const float* sum_0, const float* sum_1, const float* sum_2, const float* sum_3,
                      const float output_activation_min, const float output_activation_max, const float* scales, const float learning_rate, const int i_output_depth) {
 80171b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80171bc:	b08f      	sub	sp, #60	@ 0x3c
 80171be:	4606      	mov	r6, r0
 80171c0:	9003      	str	r0, [sp, #12]
 80171c2:	9101      	str	r1, [sp, #4]
 80171c4:	9202      	str	r2, [sp, #8]
 80171c6:	469c      	mov	ip, r3
 80171c8:	9d24      	ldr	r5, [sp, #144]	@ 0x90
 80171ca:	9825      	ldr	r0, [sp, #148]	@ 0x94
 80171cc:	9926      	ldr	r1, [sp, #152]	@ 0x98
 80171ce:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 80171d0:	9c28      	ldr	r4, [sp, #160]	@ 0xa0
 80171d2:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
  *out_0++ -= TN_MIN(TN_MAX(sum_0[0], output_activation_min), output_activation_max) * scales[i_output_depth] * learning_rate;
 80171d4:	f996 6000 	ldrsb.w	r6, [r6]
 80171d8:	ee07 6a90 	vmov	s15, r6
 80171dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80171e0:	edd5 6a00 	vldr	s13, [r5]
 80171e4:	eef4 6ac0 	vcmpe.f32	s13, s0
 80171e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80171ec:	dc01      	bgt.n	80171f2 <assign_sum_to_group_output_4row16col+0x3a>
 80171ee:	eef0 6a40 	vmov.f32	s13, s0
 80171f2:	eef4 6ae0 	vcmpe.f32	s13, s1
 80171f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80171fa:	d401      	bmi.n	8017200 <assign_sum_to_group_output_4row16col+0x48>
 80171fc:	eef0 6a60 	vmov.f32	s13, s1
 8017200:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8017204:	9604      	str	r6, [sp, #16]
 8017206:	ed96 7a00 	vldr	s14, [r6]
 801720a:	ee27 7a26 	vmul.f32	s14, s14, s13
 801720e:	ee27 7a01 	vmul.f32	s14, s14, s2
 8017212:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8017216:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801721a:	ee17 6a90 	vmov	r6, s15
 801721e:	9f03      	ldr	r7, [sp, #12]
 8017220:	703e      	strb	r6, [r7, #0]
  *out_1++ -= TN_MIN(TN_MAX(sum_0[1], output_activation_min), output_activation_max) * scales[i_output_depth + 1] * learning_rate;
 8017222:	9e01      	ldr	r6, [sp, #4]
 8017224:	f996 6000 	ldrsb.w	r6, [r6]
 8017228:	ee07 6a90 	vmov	s15, r6
 801722c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017230:	edd5 6a01 	vldr	s13, [r5, #4]
 8017234:	eef4 6ac0 	vcmpe.f32	s13, s0
 8017238:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801723c:	dc01      	bgt.n	8017242 <assign_sum_to_group_output_4row16col+0x8a>
 801723e:	eef0 6a40 	vmov.f32	s13, s0
 8017242:	eef4 6ae0 	vcmpe.f32	s13, s1
 8017246:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801724a:	d401      	bmi.n	8017250 <assign_sum_to_group_output_4row16col+0x98>
 801724c:	eef0 6a60 	vmov.f32	s13, s1
 8017250:	1c5e      	adds	r6, r3, #1
 8017252:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8017256:	9605      	str	r6, [sp, #20]
 8017258:	ed96 7a00 	vldr	s14, [r6]
 801725c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8017260:	ee27 7a01 	vmul.f32	s14, s14, s2
 8017264:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8017268:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801726c:	ee17 6a90 	vmov	r6, s15
 8017270:	9f01      	ldr	r7, [sp, #4]
 8017272:	703e      	strb	r6, [r7, #0]
  *out_2++ -= TN_MIN(TN_MAX(sum_0[2], output_activation_min), output_activation_max) * scales[i_output_depth + 2] * learning_rate;
 8017274:	9e02      	ldr	r6, [sp, #8]
 8017276:	f996 6000 	ldrsb.w	r6, [r6]
 801727a:	ee07 6a90 	vmov	s15, r6
 801727e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017282:	edd5 6a02 	vldr	s13, [r5, #8]
 8017286:	eef4 6ac0 	vcmpe.f32	s13, s0
 801728a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801728e:	dc01      	bgt.n	8017294 <assign_sum_to_group_output_4row16col+0xdc>
 8017290:	eef0 6a40 	vmov.f32	s13, s0
 8017294:	eef4 6ae0 	vcmpe.f32	s13, s1
 8017298:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801729c:	d401      	bmi.n	80172a2 <assign_sum_to_group_output_4row16col+0xea>
 801729e:	eef0 6a60 	vmov.f32	s13, s1
 80172a2:	1c9e      	adds	r6, r3, #2
 80172a4:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 80172a8:	9606      	str	r6, [sp, #24]
 80172aa:	ed96 7a00 	vldr	s14, [r6]
 80172ae:	ee27 7a26 	vmul.f32	s14, s14, s13
 80172b2:	ee27 7a01 	vmul.f32	s14, s14, s2
 80172b6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80172ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80172be:	ee17 6a90 	vmov	r6, s15
 80172c2:	9f02      	ldr	r7, [sp, #8]
 80172c4:	703e      	strb	r6, [r7, #0]
  *out_3++ -= TN_MIN(TN_MAX(sum_0[3], output_activation_min), output_activation_max) * scales[i_output_depth + 3] * learning_rate;
 80172c6:	f99c 6000 	ldrsb.w	r6, [ip]
 80172ca:	ee07 6a90 	vmov	s15, r6
 80172ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80172d2:	edd5 6a03 	vldr	s13, [r5, #12]
 80172d6:	eef4 6ac0 	vcmpe.f32	s13, s0
 80172da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80172de:	dc01      	bgt.n	80172e4 <assign_sum_to_group_output_4row16col+0x12c>
 80172e0:	eef0 6a40 	vmov.f32	s13, s0
 80172e4:	eef4 6ae0 	vcmpe.f32	s13, s1
 80172e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80172ec:	d401      	bmi.n	80172f2 <assign_sum_to_group_output_4row16col+0x13a>
 80172ee:	eef0 6a60 	vmov.f32	s13, s1
 80172f2:	1cde      	adds	r6, r3, #3
 80172f4:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 80172f8:	9607      	str	r6, [sp, #28]
 80172fa:	ed96 7a00 	vldr	s14, [r6]
 80172fe:	ee27 7a26 	vmul.f32	s14, s14, s13
 8017302:	ee27 7a01 	vmul.f32	s14, s14, s2
 8017306:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801730a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801730e:	ee17 6a90 	vmov	r6, s15
 8017312:	f88c 6000 	strb.w	r6, [ip]
  *out_4++ -= TN_MIN(TN_MAX(sum_0[4], output_activation_min), output_activation_max) * scales[i_output_depth + 4] * learning_rate;
 8017316:	9e18      	ldr	r6, [sp, #96]	@ 0x60
 8017318:	f996 6000 	ldrsb.w	r6, [r6]
 801731c:	ee07 6a90 	vmov	s15, r6
 8017320:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017324:	edd5 6a04 	vldr	s13, [r5, #16]
 8017328:	eef4 6ac0 	vcmpe.f32	s13, s0
 801732c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017330:	dc01      	bgt.n	8017336 <assign_sum_to_group_output_4row16col+0x17e>
 8017332:	eef0 6a40 	vmov.f32	s13, s0
 8017336:	eef4 6ae0 	vcmpe.f32	s13, s1
 801733a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801733e:	d401      	bmi.n	8017344 <assign_sum_to_group_output_4row16col+0x18c>
 8017340:	eef0 6a60 	vmov.f32	s13, s1
 8017344:	1d1e      	adds	r6, r3, #4
 8017346:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 801734a:	9608      	str	r6, [sp, #32]
 801734c:	ed96 7a00 	vldr	s14, [r6]
 8017350:	ee27 7a26 	vmul.f32	s14, s14, s13
 8017354:	ee27 7a01 	vmul.f32	s14, s14, s2
 8017358:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801735c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8017360:	ee17 6a90 	vmov	r6, s15
 8017364:	9f18      	ldr	r7, [sp, #96]	@ 0x60
 8017366:	703e      	strb	r6, [r7, #0]
  *out_5++ -= TN_MIN(TN_MAX(sum_0[5], output_activation_min), output_activation_max) * scales[i_output_depth + 5] * learning_rate;
 8017368:	9e19      	ldr	r6, [sp, #100]	@ 0x64
 801736a:	f996 6000 	ldrsb.w	r6, [r6]
 801736e:	ee07 6a90 	vmov	s15, r6
 8017372:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017376:	edd5 6a05 	vldr	s13, [r5, #20]
 801737a:	eef4 6ac0 	vcmpe.f32	s13, s0
 801737e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017382:	dc01      	bgt.n	8017388 <assign_sum_to_group_output_4row16col+0x1d0>
 8017384:	eef0 6a40 	vmov.f32	s13, s0
 8017388:	eef4 6ae0 	vcmpe.f32	s13, s1
 801738c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017390:	d401      	bmi.n	8017396 <assign_sum_to_group_output_4row16col+0x1de>
 8017392:	eef0 6a60 	vmov.f32	s13, s1
 8017396:	1d5e      	adds	r6, r3, #5
 8017398:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 801739c:	9609      	str	r6, [sp, #36]	@ 0x24
 801739e:	ed96 7a00 	vldr	s14, [r6]
 80173a2:	ee27 7a26 	vmul.f32	s14, s14, s13
 80173a6:	ee27 7a01 	vmul.f32	s14, s14, s2
 80173aa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80173ae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80173b2:	ee17 6a90 	vmov	r6, s15
 80173b6:	9f19      	ldr	r7, [sp, #100]	@ 0x64
 80173b8:	703e      	strb	r6, [r7, #0]
  *out_6++ -= TN_MIN(TN_MAX(sum_0[6], output_activation_min), output_activation_max) * scales[i_output_depth + 6] * learning_rate;
 80173ba:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 80173bc:	f996 6000 	ldrsb.w	r6, [r6]
 80173c0:	ee07 6a90 	vmov	s15, r6
 80173c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80173c8:	edd5 6a06 	vldr	s13, [r5, #24]
 80173cc:	eef4 6ac0 	vcmpe.f32	s13, s0
 80173d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80173d4:	dc01      	bgt.n	80173da <assign_sum_to_group_output_4row16col+0x222>
 80173d6:	eef0 6a40 	vmov.f32	s13, s0
 80173da:	eef4 6ae0 	vcmpe.f32	s13, s1
 80173de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80173e2:	d401      	bmi.n	80173e8 <assign_sum_to_group_output_4row16col+0x230>
 80173e4:	eef0 6a60 	vmov.f32	s13, s1
 80173e8:	1d9e      	adds	r6, r3, #6
 80173ea:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 80173ee:	960a      	str	r6, [sp, #40]	@ 0x28
 80173f0:	ed96 7a00 	vldr	s14, [r6]
 80173f4:	ee27 7a26 	vmul.f32	s14, s14, s13
 80173f8:	ee27 7a01 	vmul.f32	s14, s14, s2
 80173fc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8017400:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8017404:	ee17 6a90 	vmov	r6, s15
 8017408:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 801740a:	703e      	strb	r6, [r7, #0]
  *out_7++ -= TN_MIN(TN_MAX(sum_0[7], output_activation_min), output_activation_max) * scales[i_output_depth + 7] * learning_rate;
 801740c:	9e1b      	ldr	r6, [sp, #108]	@ 0x6c
 801740e:	f996 6000 	ldrsb.w	r6, [r6]
 8017412:	ee07 6a90 	vmov	s15, r6
 8017416:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801741a:	edd5 6a07 	vldr	s13, [r5, #28]
 801741e:	eef4 6ac0 	vcmpe.f32	s13, s0
 8017422:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017426:	dc01      	bgt.n	801742c <assign_sum_to_group_output_4row16col+0x274>
 8017428:	eef0 6a40 	vmov.f32	s13, s0
 801742c:	eef4 6ae0 	vcmpe.f32	s13, s1
 8017430:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017434:	d401      	bmi.n	801743a <assign_sum_to_group_output_4row16col+0x282>
 8017436:	eef0 6a60 	vmov.f32	s13, s1
 801743a:	f103 0b07 	add.w	fp, r3, #7
 801743e:	eb04 0b8b 	add.w	fp, r4, fp, lsl #2
 8017442:	ed9b 7a00 	vldr	s14, [fp]
 8017446:	ee27 7a26 	vmul.f32	s14, s14, s13
 801744a:	ee27 7a01 	vmul.f32	s14, s14, s2
 801744e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8017452:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8017456:	ee17 6a90 	vmov	r6, s15
 801745a:	9f1b      	ldr	r7, [sp, #108]	@ 0x6c
 801745c:	703e      	strb	r6, [r7, #0]
  *out_8++ -= TN_MIN(TN_MAX(sum_0[8], output_activation_min), output_activation_max) * scales[i_output_depth + 8] * learning_rate;
 801745e:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 8017460:	f996 6000 	ldrsb.w	r6, [r6]
 8017464:	ee07 6a90 	vmov	s15, r6
 8017468:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801746c:	edd5 6a08 	vldr	s13, [r5, #32]
 8017470:	eef4 6ac0 	vcmpe.f32	s13, s0
 8017474:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017478:	dc01      	bgt.n	801747e <assign_sum_to_group_output_4row16col+0x2c6>
 801747a:	eef0 6a40 	vmov.f32	s13, s0
 801747e:	eef4 6ae0 	vcmpe.f32	s13, s1
 8017482:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017486:	d401      	bmi.n	801748c <assign_sum_to_group_output_4row16col+0x2d4>
 8017488:	eef0 6a60 	vmov.f32	s13, s1
 801748c:	f103 0a08 	add.w	sl, r3, #8
 8017490:	eb04 0a8a 	add.w	sl, r4, sl, lsl #2
 8017494:	ed9a 7a00 	vldr	s14, [sl]
 8017498:	ee27 7a26 	vmul.f32	s14, s14, s13
 801749c:	ee27 7a01 	vmul.f32	s14, s14, s2
 80174a0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80174a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80174a8:	ee17 6a90 	vmov	r6, s15
 80174ac:	9f1c      	ldr	r7, [sp, #112]	@ 0x70
 80174ae:	703e      	strb	r6, [r7, #0]
  *out_9++ -= TN_MIN(TN_MAX(sum_0[9], output_activation_min), output_activation_max) * scales[i_output_depth + 9] * learning_rate;
 80174b0:	9e1d      	ldr	r6, [sp, #116]	@ 0x74
 80174b2:	f996 6000 	ldrsb.w	r6, [r6]
 80174b6:	ee07 6a90 	vmov	s15, r6
 80174ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80174be:	edd5 6a09 	vldr	s13, [r5, #36]	@ 0x24
 80174c2:	eef4 6ac0 	vcmpe.f32	s13, s0
 80174c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80174ca:	dc01      	bgt.n	80174d0 <assign_sum_to_group_output_4row16col+0x318>
 80174cc:	eef0 6a40 	vmov.f32	s13, s0
 80174d0:	eef4 6ae0 	vcmpe.f32	s13, s1
 80174d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80174d8:	d401      	bmi.n	80174de <assign_sum_to_group_output_4row16col+0x326>
 80174da:	eef0 6a60 	vmov.f32	s13, s1
 80174de:	f103 0609 	add.w	r6, r3, #9
 80174e2:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 80174e6:	960b      	str	r6, [sp, #44]	@ 0x2c
 80174e8:	ed96 7a00 	vldr	s14, [r6]
 80174ec:	ee27 7a26 	vmul.f32	s14, s14, s13
 80174f0:	ee27 7a01 	vmul.f32	s14, s14, s2
 80174f4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80174f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80174fc:	ee17 6a90 	vmov	r6, s15
 8017500:	9f1d      	ldr	r7, [sp, #116]	@ 0x74
 8017502:	703e      	strb	r6, [r7, #0]
  *out_10++ -= TN_MIN(TN_MAX(sum_0[10], output_activation_min), output_activation_max) * scales[i_output_depth + 10] * learning_rate;
 8017504:	9e1e      	ldr	r6, [sp, #120]	@ 0x78
 8017506:	f996 6000 	ldrsb.w	r6, [r6]
 801750a:	ee07 6a90 	vmov	s15, r6
 801750e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017512:	edd5 6a0a 	vldr	s13, [r5, #40]	@ 0x28
 8017516:	eef4 6ac0 	vcmpe.f32	s13, s0
 801751a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801751e:	dc01      	bgt.n	8017524 <assign_sum_to_group_output_4row16col+0x36c>
 8017520:	eef0 6a40 	vmov.f32	s13, s0
 8017524:	eef4 6ae0 	vcmpe.f32	s13, s1
 8017528:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801752c:	d401      	bmi.n	8017532 <assign_sum_to_group_output_4row16col+0x37a>
 801752e:	eef0 6a60 	vmov.f32	s13, s1
 8017532:	f103 090a 	add.w	r9, r3, #10
 8017536:	eb04 0989 	add.w	r9, r4, r9, lsl #2
 801753a:	ed99 7a00 	vldr	s14, [r9]
 801753e:	ee27 7a26 	vmul.f32	s14, s14, s13
 8017542:	ee27 7a01 	vmul.f32	s14, s14, s2
 8017546:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801754a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801754e:	ee17 6a90 	vmov	r6, s15
 8017552:	9f1e      	ldr	r7, [sp, #120]	@ 0x78
 8017554:	703e      	strb	r6, [r7, #0]
  *out_11++ -= TN_MIN(TN_MAX(sum_0[11], output_activation_min), output_activation_max) * scales[i_output_depth + 11] * learning_rate;
 8017556:	9e1f      	ldr	r6, [sp, #124]	@ 0x7c
 8017558:	f996 6000 	ldrsb.w	r6, [r6]
 801755c:	ee07 6a90 	vmov	s15, r6
 8017560:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017564:	edd5 6a0b 	vldr	s13, [r5, #44]	@ 0x2c
 8017568:	eef4 6ac0 	vcmpe.f32	s13, s0
 801756c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017570:	dc01      	bgt.n	8017576 <assign_sum_to_group_output_4row16col+0x3be>
 8017572:	eef0 6a40 	vmov.f32	s13, s0
 8017576:	eef4 6ae0 	vcmpe.f32	s13, s1
 801757a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801757e:	d401      	bmi.n	8017584 <assign_sum_to_group_output_4row16col+0x3cc>
 8017580:	eef0 6a60 	vmov.f32	s13, s1
 8017584:	f103 080b 	add.w	r8, r3, #11
 8017588:	eb04 0888 	add.w	r8, r4, r8, lsl #2
 801758c:	ed98 7a00 	vldr	s14, [r8]
 8017590:	ee27 7a26 	vmul.f32	s14, s14, s13
 8017594:	ee27 7a01 	vmul.f32	s14, s14, s2
 8017598:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801759c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80175a0:	ee17 6a90 	vmov	r6, s15
 80175a4:	9f1f      	ldr	r7, [sp, #124]	@ 0x7c
 80175a6:	703e      	strb	r6, [r7, #0]
  *out_12++ -= TN_MIN(TN_MAX(sum_0[12], output_activation_min), output_activation_max) * scales[i_output_depth + 12] * learning_rate;
 80175a8:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 80175aa:	f996 6000 	ldrsb.w	r6, [r6]
 80175ae:	ee07 6a90 	vmov	s15, r6
 80175b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80175b6:	edd5 6a0c 	vldr	s13, [r5, #48]	@ 0x30
 80175ba:	eef4 6ac0 	vcmpe.f32	s13, s0
 80175be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80175c2:	dc01      	bgt.n	80175c8 <assign_sum_to_group_output_4row16col+0x410>
 80175c4:	eef0 6a40 	vmov.f32	s13, s0
 80175c8:	eef4 6ae0 	vcmpe.f32	s13, s1
 80175cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80175d0:	d401      	bmi.n	80175d6 <assign_sum_to_group_output_4row16col+0x41e>
 80175d2:	eef0 6a60 	vmov.f32	s13, s1
 80175d6:	f103 070c 	add.w	r7, r3, #12
 80175da:	eb04 0687 	add.w	r6, r4, r7, lsl #2
 80175de:	960c      	str	r6, [sp, #48]	@ 0x30
 80175e0:	ed96 7a00 	vldr	s14, [r6]
 80175e4:	ee27 7a26 	vmul.f32	s14, s14, s13
 80175e8:	ee27 7a01 	vmul.f32	s14, s14, s2
 80175ec:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80175f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80175f4:	ee17 6a90 	vmov	r6, s15
 80175f8:	9f20      	ldr	r7, [sp, #128]	@ 0x80
 80175fa:	703e      	strb	r6, [r7, #0]
  *out_13++ -= TN_MIN(TN_MAX(sum_0[13], output_activation_min), output_activation_max) * scales[i_output_depth + 13] * learning_rate;
 80175fc:	9e21      	ldr	r6, [sp, #132]	@ 0x84
 80175fe:	f996 6000 	ldrsb.w	r6, [r6]
 8017602:	ee07 6a90 	vmov	s15, r6
 8017606:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801760a:	edd5 6a0d 	vldr	s13, [r5, #52]	@ 0x34
 801760e:	eef4 6ac0 	vcmpe.f32	s13, s0
 8017612:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017616:	dc01      	bgt.n	801761c <assign_sum_to_group_output_4row16col+0x464>
 8017618:	eef0 6a40 	vmov.f32	s13, s0
 801761c:	eef4 6ae0 	vcmpe.f32	s13, s1
 8017620:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017624:	d401      	bmi.n	801762a <assign_sum_to_group_output_4row16col+0x472>
 8017626:	eef0 6a60 	vmov.f32	s13, s1
 801762a:	f103 060d 	add.w	r6, r3, #13
 801762e:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8017632:	960d      	str	r6, [sp, #52]	@ 0x34
 8017634:	ed96 7a00 	vldr	s14, [r6]
 8017638:	ee27 7a26 	vmul.f32	s14, s14, s13
 801763c:	ee27 7a01 	vmul.f32	s14, s14, s2
 8017640:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8017644:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8017648:	ee17 ea90 	vmov	lr, s15
 801764c:	9f21      	ldr	r7, [sp, #132]	@ 0x84
 801764e:	f887 e000 	strb.w	lr, [r7]
  *out_14++ -= TN_MIN(TN_MAX(sum_0[14], output_activation_min), output_activation_max) * scales[i_output_depth + 14] * learning_rate;
 8017652:	9f22      	ldr	r7, [sp, #136]	@ 0x88
 8017654:	f997 6000 	ldrsb.w	r6, [r7]
 8017658:	ee07 6a90 	vmov	s15, r6
 801765c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017660:	edd5 6a0e 	vldr	s13, [r5, #56]	@ 0x38
 8017664:	eef4 6ac0 	vcmpe.f32	s13, s0
 8017668:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801766c:	dc01      	bgt.n	8017672 <assign_sum_to_group_output_4row16col+0x4ba>
 801766e:	eef0 6a40 	vmov.f32	s13, s0
 8017672:	eef4 6ae0 	vcmpe.f32	s13, s1
 8017676:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801767a:	d401      	bmi.n	8017680 <assign_sum_to_group_output_4row16col+0x4c8>
 801767c:	eef0 6a60 	vmov.f32	s13, s1
 8017680:	f103 0e0e 	add.w	lr, r3, #14
 8017684:	eb04 0e8e 	add.w	lr, r4, lr, lsl #2
 8017688:	ed9e 7a00 	vldr	s14, [lr]
 801768c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8017690:	ee27 7a01 	vmul.f32	s14, s14, s2
 8017694:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8017698:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801769c:	ee17 6a90 	vmov	r6, s15
 80176a0:	9f22      	ldr	r7, [sp, #136]	@ 0x88
 80176a2:	703e      	strb	r6, [r7, #0]
  *out_15++ -= TN_MIN(TN_MAX(sum_0[15], output_activation_min), output_activation_max) * scales[i_output_depth + 15] * learning_rate;
 80176a4:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 80176a6:	f996 6000 	ldrsb.w	r6, [r6]
 80176aa:	ee07 6a90 	vmov	s15, r6
 80176ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80176b2:	edd5 6a0f 	vldr	s13, [r5, #60]	@ 0x3c
 80176b6:	eef4 6ac0 	vcmpe.f32	s13, s0
 80176ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80176be:	dc01      	bgt.n	80176c4 <assign_sum_to_group_output_4row16col+0x50c>
 80176c0:	eef0 6a40 	vmov.f32	s13, s0
 80176c4:	eef4 6ae0 	vcmpe.f32	s13, s1
 80176c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80176cc:	d401      	bmi.n	80176d2 <assign_sum_to_group_output_4row16col+0x51a>
 80176ce:	eef0 6a60 	vmov.f32	s13, s1
 80176d2:	330f      	adds	r3, #15
 80176d4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80176d8:	ed93 7a00 	vldr	s14, [r3]
 80176dc:	ee27 7a26 	vmul.f32	s14, s14, s13
 80176e0:	ee27 7a01 	vmul.f32	s14, s14, s2
 80176e4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80176e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80176ec:	ee17 4a90 	vmov	r4, s15
 80176f0:	9d23      	ldr	r5, [sp, #140]	@ 0x8c
 80176f2:	702c      	strb	r4, [r5, #0]

  *out_0++ -= TN_MIN(TN_MAX(sum_1[0], output_activation_min), output_activation_max) * scales[i_output_depth] * learning_rate;
 80176f4:	9c03      	ldr	r4, [sp, #12]
 80176f6:	f994 4001 	ldrsb.w	r4, [r4, #1]
 80176fa:	ee07 4a90 	vmov	s15, r4
 80176fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017702:	edd0 6a00 	vldr	s13, [r0]
 8017706:	eef4 6ac0 	vcmpe.f32	s13, s0
 801770a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801770e:	dc01      	bgt.n	8017714 <assign_sum_to_group_output_4row16col+0x55c>
 8017710:	eef0 6a40 	vmov.f32	s13, s0
 8017714:	eef4 6ae0 	vcmpe.f32	s13, s1
 8017718:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801771c:	d401      	bmi.n	8017722 <assign_sum_to_group_output_4row16col+0x56a>
 801771e:	eef0 6a60 	vmov.f32	s13, s1
 8017722:	9c04      	ldr	r4, [sp, #16]
 8017724:	ed94 7a00 	vldr	s14, [r4]
 8017728:	ee27 7a26 	vmul.f32	s14, s14, s13
 801772c:	ee27 7a01 	vmul.f32	s14, s14, s2
 8017730:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8017734:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8017738:	ee17 4a90 	vmov	r4, s15
 801773c:	9d03      	ldr	r5, [sp, #12]
 801773e:	706c      	strb	r4, [r5, #1]
  *out_1++ -= TN_MIN(TN_MAX(sum_1[1], output_activation_min), output_activation_max) * scales[i_output_depth + 1] * learning_rate;
 8017740:	9c01      	ldr	r4, [sp, #4]
 8017742:	f994 4001 	ldrsb.w	r4, [r4, #1]
 8017746:	ee07 4a90 	vmov	s15, r4
 801774a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801774e:	edd0 6a01 	vldr	s13, [r0, #4]
 8017752:	eef4 6ac0 	vcmpe.f32	s13, s0
 8017756:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801775a:	dc01      	bgt.n	8017760 <assign_sum_to_group_output_4row16col+0x5a8>
 801775c:	eef0 6a40 	vmov.f32	s13, s0
 8017760:	eef4 6ae0 	vcmpe.f32	s13, s1
 8017764:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017768:	d401      	bmi.n	801776e <assign_sum_to_group_output_4row16col+0x5b6>
 801776a:	eef0 6a60 	vmov.f32	s13, s1
 801776e:	9c05      	ldr	r4, [sp, #20]
 8017770:	ed94 7a00 	vldr	s14, [r4]
 8017774:	ee27 7a26 	vmul.f32	s14, s14, s13
 8017778:	ee27 7a01 	vmul.f32	s14, s14, s2
 801777c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8017780:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8017784:	ee17 4a90 	vmov	r4, s15
 8017788:	9d01      	ldr	r5, [sp, #4]
 801778a:	706c      	strb	r4, [r5, #1]
  *out_2++ -= TN_MIN(TN_MAX(sum_1[2], output_activation_min), output_activation_max) * scales[i_output_depth + 2] * learning_rate;
 801778c:	9c02      	ldr	r4, [sp, #8]
 801778e:	f994 4001 	ldrsb.w	r4, [r4, #1]
 8017792:	ee07 4a90 	vmov	s15, r4
 8017796:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801779a:	edd0 6a02 	vldr	s13, [r0, #8]
 801779e:	eef4 6ac0 	vcmpe.f32	s13, s0
 80177a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80177a6:	dc01      	bgt.n	80177ac <assign_sum_to_group_output_4row16col+0x5f4>
 80177a8:	eef0 6a40 	vmov.f32	s13, s0
 80177ac:	eef4 6ae0 	vcmpe.f32	s13, s1
 80177b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80177b4:	d401      	bmi.n	80177ba <assign_sum_to_group_output_4row16col+0x602>
 80177b6:	eef0 6a60 	vmov.f32	s13, s1
 80177ba:	9c06      	ldr	r4, [sp, #24]
 80177bc:	ed94 7a00 	vldr	s14, [r4]
 80177c0:	ee27 7a26 	vmul.f32	s14, s14, s13
 80177c4:	ee27 7a01 	vmul.f32	s14, s14, s2
 80177c8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80177cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80177d0:	ee17 4a90 	vmov	r4, s15
 80177d4:	9d02      	ldr	r5, [sp, #8]
 80177d6:	706c      	strb	r4, [r5, #1]
  *out_3++ -= TN_MIN(TN_MAX(sum_1[3], output_activation_min), output_activation_max) * scales[i_output_depth + 3] * learning_rate;
 80177d8:	f99c 4001 	ldrsb.w	r4, [ip, #1]
 80177dc:	ee07 4a90 	vmov	s15, r4
 80177e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80177e4:	edd0 6a03 	vldr	s13, [r0, #12]
 80177e8:	eef4 6ac0 	vcmpe.f32	s13, s0
 80177ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80177f0:	dc01      	bgt.n	80177f6 <assign_sum_to_group_output_4row16col+0x63e>
 80177f2:	eef0 6a40 	vmov.f32	s13, s0
 80177f6:	eef4 6ae0 	vcmpe.f32	s13, s1
 80177fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80177fe:	d401      	bmi.n	8017804 <assign_sum_to_group_output_4row16col+0x64c>
 8017800:	eef0 6a60 	vmov.f32	s13, s1
 8017804:	9c07      	ldr	r4, [sp, #28]
 8017806:	ed94 7a00 	vldr	s14, [r4]
 801780a:	ee27 7a26 	vmul.f32	s14, s14, s13
 801780e:	ee27 7a01 	vmul.f32	s14, s14, s2
 8017812:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8017816:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801781a:	ee17 4a90 	vmov	r4, s15
 801781e:	f88c 4001 	strb.w	r4, [ip, #1]
  *out_4++ -= TN_MIN(TN_MAX(sum_1[4], output_activation_min), output_activation_max) * scales[i_output_depth + 4] * learning_rate;
 8017822:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 8017824:	f994 4001 	ldrsb.w	r4, [r4, #1]
 8017828:	ee07 4a90 	vmov	s15, r4
 801782c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017830:	edd0 6a04 	vldr	s13, [r0, #16]
 8017834:	eef4 6ac0 	vcmpe.f32	s13, s0
 8017838:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801783c:	dc01      	bgt.n	8017842 <assign_sum_to_group_output_4row16col+0x68a>
 801783e:	eef0 6a40 	vmov.f32	s13, s0
 8017842:	eef4 6ae0 	vcmpe.f32	s13, s1
 8017846:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801784a:	d401      	bmi.n	8017850 <assign_sum_to_group_output_4row16col+0x698>
 801784c:	eef0 6a60 	vmov.f32	s13, s1
 8017850:	9c08      	ldr	r4, [sp, #32]
 8017852:	ed94 7a00 	vldr	s14, [r4]
 8017856:	ee27 7a26 	vmul.f32	s14, s14, s13
 801785a:	ee27 7a01 	vmul.f32	s14, s14, s2
 801785e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8017862:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8017866:	ee17 4a90 	vmov	r4, s15
 801786a:	9d18      	ldr	r5, [sp, #96]	@ 0x60
 801786c:	706c      	strb	r4, [r5, #1]
  *out_5++ -= TN_MIN(TN_MAX(sum_1[5], output_activation_min), output_activation_max) * scales[i_output_depth + 5] * learning_rate;
 801786e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8017870:	f994 4001 	ldrsb.w	r4, [r4, #1]
 8017874:	ee07 4a90 	vmov	s15, r4
 8017878:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801787c:	edd0 6a05 	vldr	s13, [r0, #20]
 8017880:	eef4 6ac0 	vcmpe.f32	s13, s0
 8017884:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017888:	dc01      	bgt.n	801788e <assign_sum_to_group_output_4row16col+0x6d6>
 801788a:	eef0 6a40 	vmov.f32	s13, s0
 801788e:	eef4 6ae0 	vcmpe.f32	s13, s1
 8017892:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017896:	d401      	bmi.n	801789c <assign_sum_to_group_output_4row16col+0x6e4>
 8017898:	eef0 6a60 	vmov.f32	s13, s1
 801789c:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801789e:	ed94 7a00 	vldr	s14, [r4]
 80178a2:	ee27 7a26 	vmul.f32	s14, s14, s13
 80178a6:	ee27 7a01 	vmul.f32	s14, s14, s2
 80178aa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80178ae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80178b2:	ee17 4a90 	vmov	r4, s15
 80178b6:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80178b8:	706c      	strb	r4, [r5, #1]
  *out_6++ -= TN_MIN(TN_MAX(sum_1[6], output_activation_min), output_activation_max) * scales[i_output_depth + 6] * learning_rate;
 80178ba:	9c1a      	ldr	r4, [sp, #104]	@ 0x68
 80178bc:	f994 4001 	ldrsb.w	r4, [r4, #1]
 80178c0:	ee07 4a90 	vmov	s15, r4
 80178c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80178c8:	edd0 6a06 	vldr	s13, [r0, #24]
 80178cc:	eef4 6ac0 	vcmpe.f32	s13, s0
 80178d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80178d4:	dc01      	bgt.n	80178da <assign_sum_to_group_output_4row16col+0x722>
 80178d6:	eef0 6a40 	vmov.f32	s13, s0
 80178da:	eef4 6ae0 	vcmpe.f32	s13, s1
 80178de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80178e2:	d401      	bmi.n	80178e8 <assign_sum_to_group_output_4row16col+0x730>
 80178e4:	eef0 6a60 	vmov.f32	s13, s1
 80178e8:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80178ea:	ed94 7a00 	vldr	s14, [r4]
 80178ee:	ee27 7a26 	vmul.f32	s14, s14, s13
 80178f2:	ee27 7a01 	vmul.f32	s14, s14, s2
 80178f6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80178fa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80178fe:	ee17 4a90 	vmov	r4, s15
 8017902:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 8017904:	706c      	strb	r4, [r5, #1]
  *out_7++ -= TN_MIN(TN_MAX(sum_1[7], output_activation_min), output_activation_max) * scales[i_output_depth + 7] * learning_rate;
 8017906:	9c1b      	ldr	r4, [sp, #108]	@ 0x6c
 8017908:	f994 4001 	ldrsb.w	r4, [r4, #1]
 801790c:	ee07 4a90 	vmov	s15, r4
 8017910:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017914:	edd0 6a07 	vldr	s13, [r0, #28]
 8017918:	eef4 6ac0 	vcmpe.f32	s13, s0
 801791c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017920:	dc01      	bgt.n	8017926 <assign_sum_to_group_output_4row16col+0x76e>
 8017922:	eef0 6a40 	vmov.f32	s13, s0
 8017926:	eef4 6ae0 	vcmpe.f32	s13, s1
 801792a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801792e:	d401      	bmi.n	8017934 <assign_sum_to_group_output_4row16col+0x77c>
 8017930:	eef0 6a60 	vmov.f32	s13, s1
 8017934:	ed9b 7a00 	vldr	s14, [fp]
 8017938:	ee27 7a26 	vmul.f32	s14, s14, s13
 801793c:	ee27 7a01 	vmul.f32	s14, s14, s2
 8017940:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8017944:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8017948:	ee17 4a90 	vmov	r4, s15
 801794c:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 801794e:	706c      	strb	r4, [r5, #1]
  *out_8++ -= TN_MIN(TN_MAX(sum_1[8], output_activation_min), output_activation_max) * scales[i_output_depth + 8] * learning_rate;
 8017950:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 8017952:	f994 4001 	ldrsb.w	r4, [r4, #1]
 8017956:	ee07 4a90 	vmov	s15, r4
 801795a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801795e:	edd0 6a08 	vldr	s13, [r0, #32]
 8017962:	eef4 6ac0 	vcmpe.f32	s13, s0
 8017966:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801796a:	dc01      	bgt.n	8017970 <assign_sum_to_group_output_4row16col+0x7b8>
 801796c:	eef0 6a40 	vmov.f32	s13, s0
 8017970:	eef4 6ae0 	vcmpe.f32	s13, s1
 8017974:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017978:	d401      	bmi.n	801797e <assign_sum_to_group_output_4row16col+0x7c6>
 801797a:	eef0 6a60 	vmov.f32	s13, s1
 801797e:	ed9a 7a00 	vldr	s14, [sl]
 8017982:	ee27 7a26 	vmul.f32	s14, s14, s13
 8017986:	ee27 7a01 	vmul.f32	s14, s14, s2
 801798a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801798e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8017992:	ee17 4a90 	vmov	r4, s15
 8017996:	9d1c      	ldr	r5, [sp, #112]	@ 0x70
 8017998:	706c      	strb	r4, [r5, #1]
  *out_9++ -= TN_MIN(TN_MAX(sum_1[9], output_activation_min), output_activation_max) * scales[i_output_depth + 9] * learning_rate;
 801799a:	9c1d      	ldr	r4, [sp, #116]	@ 0x74
 801799c:	f994 4001 	ldrsb.w	r4, [r4, #1]
 80179a0:	ee07 4a90 	vmov	s15, r4
 80179a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80179a8:	edd0 6a09 	vldr	s13, [r0, #36]	@ 0x24
 80179ac:	eef4 6ac0 	vcmpe.f32	s13, s0
 80179b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80179b4:	dc01      	bgt.n	80179ba <assign_sum_to_group_output_4row16col+0x802>
 80179b6:	eef0 6a40 	vmov.f32	s13, s0
 80179ba:	eef4 6ae0 	vcmpe.f32	s13, s1
 80179be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80179c2:	d401      	bmi.n	80179c8 <assign_sum_to_group_output_4row16col+0x810>
 80179c4:	eef0 6a60 	vmov.f32	s13, s1
 80179c8:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80179ca:	ed94 7a00 	vldr	s14, [r4]
 80179ce:	ee27 7a26 	vmul.f32	s14, s14, s13
 80179d2:	ee27 7a01 	vmul.f32	s14, s14, s2
 80179d6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80179da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80179de:	ee17 4a90 	vmov	r4, s15
 80179e2:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 80179e4:	706c      	strb	r4, [r5, #1]
  *out_10++ -= TN_MIN(TN_MAX(sum_1[10], output_activation_min), output_activation_max) * scales[i_output_depth + 10] * learning_rate;
 80179e6:	9c1e      	ldr	r4, [sp, #120]	@ 0x78
 80179e8:	f994 4001 	ldrsb.w	r4, [r4, #1]
 80179ec:	ee07 4a90 	vmov	s15, r4
 80179f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80179f4:	edd0 6a0a 	vldr	s13, [r0, #40]	@ 0x28
 80179f8:	eef4 6ac0 	vcmpe.f32	s13, s0
 80179fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017a00:	dc01      	bgt.n	8017a06 <assign_sum_to_group_output_4row16col+0x84e>
 8017a02:	eef0 6a40 	vmov.f32	s13, s0
 8017a06:	eef4 6ae0 	vcmpe.f32	s13, s1
 8017a0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017a0e:	d401      	bmi.n	8017a14 <assign_sum_to_group_output_4row16col+0x85c>
 8017a10:	eef0 6a60 	vmov.f32	s13, s1
 8017a14:	ed99 7a00 	vldr	s14, [r9]
 8017a18:	ee27 7a26 	vmul.f32	s14, s14, s13
 8017a1c:	ee27 7a01 	vmul.f32	s14, s14, s2
 8017a20:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8017a24:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8017a28:	ee17 4a90 	vmov	r4, s15
 8017a2c:	9d1e      	ldr	r5, [sp, #120]	@ 0x78
 8017a2e:	706c      	strb	r4, [r5, #1]
  *out_11++ -= TN_MIN(TN_MAX(sum_1[11], output_activation_min), output_activation_max) * scales[i_output_depth + 11] * learning_rate;
 8017a30:	9c1f      	ldr	r4, [sp, #124]	@ 0x7c
 8017a32:	f994 4001 	ldrsb.w	r4, [r4, #1]
 8017a36:	ee07 4a90 	vmov	s15, r4
 8017a3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017a3e:	edd0 6a0b 	vldr	s13, [r0, #44]	@ 0x2c
 8017a42:	eef4 6ac0 	vcmpe.f32	s13, s0
 8017a46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017a4a:	dc01      	bgt.n	8017a50 <assign_sum_to_group_output_4row16col+0x898>
 8017a4c:	eef0 6a40 	vmov.f32	s13, s0
 8017a50:	eef4 6ae0 	vcmpe.f32	s13, s1
 8017a54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017a58:	d401      	bmi.n	8017a5e <assign_sum_to_group_output_4row16col+0x8a6>
 8017a5a:	eef0 6a60 	vmov.f32	s13, s1
 8017a5e:	ed98 7a00 	vldr	s14, [r8]
 8017a62:	ee27 7a26 	vmul.f32	s14, s14, s13
 8017a66:	ee27 7a01 	vmul.f32	s14, s14, s2
 8017a6a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8017a6e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8017a72:	ee17 4a90 	vmov	r4, s15
 8017a76:	9d1f      	ldr	r5, [sp, #124]	@ 0x7c
 8017a78:	706c      	strb	r4, [r5, #1]
  *out_12++ -= TN_MIN(TN_MAX(sum_1[12], output_activation_min), output_activation_max) * scales[i_output_depth + 12] * learning_rate;
 8017a7a:	9c20      	ldr	r4, [sp, #128]	@ 0x80
 8017a7c:	f994 4001 	ldrsb.w	r4, [r4, #1]
 8017a80:	ee07 4a90 	vmov	s15, r4
 8017a84:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017a88:	edd0 6a0c 	vldr	s13, [r0, #48]	@ 0x30
 8017a8c:	eef4 6ac0 	vcmpe.f32	s13, s0
 8017a90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017a94:	dc01      	bgt.n	8017a9a <assign_sum_to_group_output_4row16col+0x8e2>
 8017a96:	eef0 6a40 	vmov.f32	s13, s0
 8017a9a:	eef4 6ae0 	vcmpe.f32	s13, s1
 8017a9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017aa2:	d401      	bmi.n	8017aa8 <assign_sum_to_group_output_4row16col+0x8f0>
 8017aa4:	eef0 6a60 	vmov.f32	s13, s1
 8017aa8:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8017aaa:	ed94 7a00 	vldr	s14, [r4]
 8017aae:	ee27 7a26 	vmul.f32	s14, s14, s13
 8017ab2:	ee27 7a01 	vmul.f32	s14, s14, s2
 8017ab6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8017aba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8017abe:	ee17 4a90 	vmov	r4, s15
 8017ac2:	9d20      	ldr	r5, [sp, #128]	@ 0x80
 8017ac4:	706c      	strb	r4, [r5, #1]
  *out_13++ -= TN_MIN(TN_MAX(sum_1[13], output_activation_min), output_activation_max) * scales[i_output_depth + 13] * learning_rate;
 8017ac6:	9c21      	ldr	r4, [sp, #132]	@ 0x84
 8017ac8:	f994 4001 	ldrsb.w	r4, [r4, #1]
 8017acc:	ee07 4a90 	vmov	s15, r4
 8017ad0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017ad4:	edd0 6a0d 	vldr	s13, [r0, #52]	@ 0x34
 8017ad8:	eef4 6ac0 	vcmpe.f32	s13, s0
 8017adc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017ae0:	dc01      	bgt.n	8017ae6 <assign_sum_to_group_output_4row16col+0x92e>
 8017ae2:	eef0 6a40 	vmov.f32	s13, s0
 8017ae6:	eef4 6ae0 	vcmpe.f32	s13, s1
 8017aea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017aee:	d401      	bmi.n	8017af4 <assign_sum_to_group_output_4row16col+0x93c>
 8017af0:	eef0 6a60 	vmov.f32	s13, s1
 8017af4:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8017af6:	ed94 7a00 	vldr	s14, [r4]
 8017afa:	ee27 7a26 	vmul.f32	s14, s14, s13
 8017afe:	ee27 7a01 	vmul.f32	s14, s14, s2
 8017b02:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8017b06:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8017b0a:	ee17 4a90 	vmov	r4, s15
 8017b0e:	9d21      	ldr	r5, [sp, #132]	@ 0x84
 8017b10:	706c      	strb	r4, [r5, #1]
  *out_14++ -= TN_MIN(TN_MAX(sum_1[14], output_activation_min), output_activation_max) * scales[i_output_depth + 14] * learning_rate;
 8017b12:	9c22      	ldr	r4, [sp, #136]	@ 0x88
 8017b14:	f994 4001 	ldrsb.w	r4, [r4, #1]
 8017b18:	ee07 4a90 	vmov	s15, r4
 8017b1c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017b20:	edd0 6a0e 	vldr	s13, [r0, #56]	@ 0x38
 8017b24:	eef4 6ac0 	vcmpe.f32	s13, s0
 8017b28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017b2c:	dc01      	bgt.n	8017b32 <assign_sum_to_group_output_4row16col+0x97a>
 8017b2e:	eef0 6a40 	vmov.f32	s13, s0
 8017b32:	eef4 6ae0 	vcmpe.f32	s13, s1
 8017b36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017b3a:	d401      	bmi.n	8017b40 <assign_sum_to_group_output_4row16col+0x988>
 8017b3c:	eef0 6a60 	vmov.f32	s13, s1
 8017b40:	ed9e 7a00 	vldr	s14, [lr]
 8017b44:	ee27 7a26 	vmul.f32	s14, s14, s13
 8017b48:	ee27 7a01 	vmul.f32	s14, s14, s2
 8017b4c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8017b50:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8017b54:	ee17 4a90 	vmov	r4, s15
 8017b58:	9d22      	ldr	r5, [sp, #136]	@ 0x88
 8017b5a:	706c      	strb	r4, [r5, #1]
  *out_15++ -= TN_MIN(TN_MAX(sum_1[15], output_activation_min), output_activation_max) * scales[i_output_depth + 15] * learning_rate;
 8017b5c:	9c23      	ldr	r4, [sp, #140]	@ 0x8c
 8017b5e:	f994 4001 	ldrsb.w	r4, [r4, #1]
 8017b62:	ee07 4a90 	vmov	s15, r4
 8017b66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017b6a:	edd0 6a0f 	vldr	s13, [r0, #60]	@ 0x3c
 8017b6e:	eef4 6ac0 	vcmpe.f32	s13, s0
 8017b72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017b76:	dc01      	bgt.n	8017b7c <assign_sum_to_group_output_4row16col+0x9c4>
 8017b78:	eef0 6a40 	vmov.f32	s13, s0
 8017b7c:	eef4 6ae0 	vcmpe.f32	s13, s1
 8017b80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017b84:	d401      	bmi.n	8017b8a <assign_sum_to_group_output_4row16col+0x9d2>
 8017b86:	eef0 6a60 	vmov.f32	s13, s1
 8017b8a:	ed93 7a00 	vldr	s14, [r3]
 8017b8e:	ee27 7a26 	vmul.f32	s14, s14, s13
 8017b92:	ee27 7a01 	vmul.f32	s14, s14, s2
 8017b96:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8017b9a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8017b9e:	ee17 0a90 	vmov	r0, s15
 8017ba2:	9c23      	ldr	r4, [sp, #140]	@ 0x8c
 8017ba4:	7060      	strb	r0, [r4, #1]

  *out_0++ -= TN_MIN(TN_MAX(sum_2[0], output_activation_min), output_activation_max) * scales[i_output_depth] * learning_rate;
 8017ba6:	9803      	ldr	r0, [sp, #12]
 8017ba8:	f990 0002 	ldrsb.w	r0, [r0, #2]
 8017bac:	ee07 0a90 	vmov	s15, r0
 8017bb0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017bb4:	edd1 6a00 	vldr	s13, [r1]
 8017bb8:	eef4 6ac0 	vcmpe.f32	s13, s0
 8017bbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017bc0:	dc01      	bgt.n	8017bc6 <assign_sum_to_group_output_4row16col+0xa0e>
 8017bc2:	eef0 6a40 	vmov.f32	s13, s0
 8017bc6:	eef4 6ae0 	vcmpe.f32	s13, s1
 8017bca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017bce:	d401      	bmi.n	8017bd4 <assign_sum_to_group_output_4row16col+0xa1c>
 8017bd0:	eef0 6a60 	vmov.f32	s13, s1
 8017bd4:	9804      	ldr	r0, [sp, #16]
 8017bd6:	ed90 7a00 	vldr	s14, [r0]
 8017bda:	ee27 7a26 	vmul.f32	s14, s14, s13
 8017bde:	ee27 7a01 	vmul.f32	s14, s14, s2
 8017be2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8017be6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8017bea:	ee17 0a90 	vmov	r0, s15
 8017bee:	9c03      	ldr	r4, [sp, #12]
 8017bf0:	70a0      	strb	r0, [r4, #2]
  *out_1++ -= TN_MIN(TN_MAX(sum_2[1], output_activation_min), output_activation_max) * scales[i_output_depth + 1] * learning_rate;
 8017bf2:	9801      	ldr	r0, [sp, #4]
 8017bf4:	f990 0002 	ldrsb.w	r0, [r0, #2]
 8017bf8:	ee07 0a90 	vmov	s15, r0
 8017bfc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017c00:	edd1 6a01 	vldr	s13, [r1, #4]
 8017c04:	eef4 6ac0 	vcmpe.f32	s13, s0
 8017c08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017c0c:	dc01      	bgt.n	8017c12 <assign_sum_to_group_output_4row16col+0xa5a>
 8017c0e:	eef0 6a40 	vmov.f32	s13, s0
 8017c12:	eef4 6ae0 	vcmpe.f32	s13, s1
 8017c16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017c1a:	d401      	bmi.n	8017c20 <assign_sum_to_group_output_4row16col+0xa68>
 8017c1c:	eef0 6a60 	vmov.f32	s13, s1
 8017c20:	9805      	ldr	r0, [sp, #20]
 8017c22:	ed90 7a00 	vldr	s14, [r0]
 8017c26:	ee27 7a26 	vmul.f32	s14, s14, s13
 8017c2a:	ee27 7a01 	vmul.f32	s14, s14, s2
 8017c2e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8017c32:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8017c36:	ee17 0a90 	vmov	r0, s15
 8017c3a:	9c01      	ldr	r4, [sp, #4]
 8017c3c:	70a0      	strb	r0, [r4, #2]
  *out_2++ -= TN_MIN(TN_MAX(sum_2[2], output_activation_min), output_activation_max) * scales[i_output_depth + 2] * learning_rate;
 8017c3e:	9802      	ldr	r0, [sp, #8]
 8017c40:	f990 0002 	ldrsb.w	r0, [r0, #2]
 8017c44:	ee07 0a90 	vmov	s15, r0
 8017c48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017c4c:	edd1 6a02 	vldr	s13, [r1, #8]
 8017c50:	eef4 6ac0 	vcmpe.f32	s13, s0
 8017c54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017c58:	dc01      	bgt.n	8017c5e <assign_sum_to_group_output_4row16col+0xaa6>
 8017c5a:	eef0 6a40 	vmov.f32	s13, s0
 8017c5e:	eef4 6ae0 	vcmpe.f32	s13, s1
 8017c62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017c66:	d401      	bmi.n	8017c6c <assign_sum_to_group_output_4row16col+0xab4>
 8017c68:	eef0 6a60 	vmov.f32	s13, s1
 8017c6c:	9806      	ldr	r0, [sp, #24]
 8017c6e:	ed90 7a00 	vldr	s14, [r0]
 8017c72:	ee27 7a26 	vmul.f32	s14, s14, s13
 8017c76:	ee27 7a01 	vmul.f32	s14, s14, s2
 8017c7a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8017c7e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8017c82:	ee17 0a90 	vmov	r0, s15
 8017c86:	9c02      	ldr	r4, [sp, #8]
 8017c88:	70a0      	strb	r0, [r4, #2]
  *out_3++ -= TN_MIN(TN_MAX(sum_2[3], output_activation_min), output_activation_max) * scales[i_output_depth + 3] * learning_rate;
 8017c8a:	f99c 0002 	ldrsb.w	r0, [ip, #2]
 8017c8e:	ee07 0a90 	vmov	s15, r0
 8017c92:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017c96:	edd1 6a03 	vldr	s13, [r1, #12]
 8017c9a:	eef4 6ac0 	vcmpe.f32	s13, s0
 8017c9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017ca2:	dc01      	bgt.n	8017ca8 <assign_sum_to_group_output_4row16col+0xaf0>
 8017ca4:	eef0 6a40 	vmov.f32	s13, s0
 8017ca8:	eef4 6ae0 	vcmpe.f32	s13, s1
 8017cac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017cb0:	d401      	bmi.n	8017cb6 <assign_sum_to_group_output_4row16col+0xafe>
 8017cb2:	eef0 6a60 	vmov.f32	s13, s1
 8017cb6:	9807      	ldr	r0, [sp, #28]
 8017cb8:	ed90 7a00 	vldr	s14, [r0]
 8017cbc:	ee27 7a26 	vmul.f32	s14, s14, s13
 8017cc0:	ee27 7a01 	vmul.f32	s14, s14, s2
 8017cc4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8017cc8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8017ccc:	ee17 0a90 	vmov	r0, s15
 8017cd0:	f88c 0002 	strb.w	r0, [ip, #2]
  *out_4++ -= TN_MIN(TN_MAX(sum_2[4], output_activation_min), output_activation_max) * scales[i_output_depth + 4] * learning_rate;
 8017cd4:	9818      	ldr	r0, [sp, #96]	@ 0x60
 8017cd6:	f990 0002 	ldrsb.w	r0, [r0, #2]
 8017cda:	ee07 0a90 	vmov	s15, r0
 8017cde:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017ce2:	edd1 6a04 	vldr	s13, [r1, #16]
 8017ce6:	eef4 6ac0 	vcmpe.f32	s13, s0
 8017cea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017cee:	dc01      	bgt.n	8017cf4 <assign_sum_to_group_output_4row16col+0xb3c>
 8017cf0:	eef0 6a40 	vmov.f32	s13, s0
 8017cf4:	eef4 6ae0 	vcmpe.f32	s13, s1
 8017cf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017cfc:	d401      	bmi.n	8017d02 <assign_sum_to_group_output_4row16col+0xb4a>
 8017cfe:	eef0 6a60 	vmov.f32	s13, s1
 8017d02:	9808      	ldr	r0, [sp, #32]
 8017d04:	ed90 7a00 	vldr	s14, [r0]
 8017d08:	ee27 7a26 	vmul.f32	s14, s14, s13
 8017d0c:	ee27 7a01 	vmul.f32	s14, s14, s2
 8017d10:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8017d14:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8017d18:	ee17 0a90 	vmov	r0, s15
 8017d1c:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 8017d1e:	70a0      	strb	r0, [r4, #2]
  *out_5++ -= TN_MIN(TN_MAX(sum_2[5], output_activation_min), output_activation_max) * scales[i_output_depth + 5] * learning_rate;
 8017d20:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8017d22:	f990 0002 	ldrsb.w	r0, [r0, #2]
 8017d26:	ee07 0a90 	vmov	s15, r0
 8017d2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017d2e:	edd1 6a05 	vldr	s13, [r1, #20]
 8017d32:	eef4 6ac0 	vcmpe.f32	s13, s0
 8017d36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017d3a:	dc01      	bgt.n	8017d40 <assign_sum_to_group_output_4row16col+0xb88>
 8017d3c:	eef0 6a40 	vmov.f32	s13, s0
 8017d40:	eef4 6ae0 	vcmpe.f32	s13, s1
 8017d44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017d48:	d401      	bmi.n	8017d4e <assign_sum_to_group_output_4row16col+0xb96>
 8017d4a:	eef0 6a60 	vmov.f32	s13, s1
 8017d4e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017d50:	ed90 7a00 	vldr	s14, [r0]
 8017d54:	ee27 7a26 	vmul.f32	s14, s14, s13
 8017d58:	ee27 7a01 	vmul.f32	s14, s14, s2
 8017d5c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8017d60:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8017d64:	ee17 0a90 	vmov	r0, s15
 8017d68:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8017d6a:	70a0      	strb	r0, [r4, #2]
  *out_6++ -= TN_MIN(TN_MAX(sum_2[6], output_activation_min), output_activation_max) * scales[i_output_depth + 6] * learning_rate;
 8017d6c:	981a      	ldr	r0, [sp, #104]	@ 0x68
 8017d6e:	f990 0002 	ldrsb.w	r0, [r0, #2]
 8017d72:	ee07 0a90 	vmov	s15, r0
 8017d76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017d7a:	edd1 6a06 	vldr	s13, [r1, #24]
 8017d7e:	eef4 6ac0 	vcmpe.f32	s13, s0
 8017d82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017d86:	dc01      	bgt.n	8017d8c <assign_sum_to_group_output_4row16col+0xbd4>
 8017d88:	eef0 6a40 	vmov.f32	s13, s0
 8017d8c:	eef4 6ae0 	vcmpe.f32	s13, s1
 8017d90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017d94:	d401      	bmi.n	8017d9a <assign_sum_to_group_output_4row16col+0xbe2>
 8017d96:	eef0 6a60 	vmov.f32	s13, s1
 8017d9a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8017d9c:	ed90 7a00 	vldr	s14, [r0]
 8017da0:	ee27 7a26 	vmul.f32	s14, s14, s13
 8017da4:	ee27 7a01 	vmul.f32	s14, s14, s2
 8017da8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8017dac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8017db0:	ee17 0a90 	vmov	r0, s15
 8017db4:	9c1a      	ldr	r4, [sp, #104]	@ 0x68
 8017db6:	70a0      	strb	r0, [r4, #2]
  *out_7++ -= TN_MIN(TN_MAX(sum_2[7], output_activation_min), output_activation_max) * scales[i_output_depth + 7] * learning_rate;
 8017db8:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 8017dba:	f990 0002 	ldrsb.w	r0, [r0, #2]
 8017dbe:	ee07 0a90 	vmov	s15, r0
 8017dc2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017dc6:	edd1 6a07 	vldr	s13, [r1, #28]
 8017dca:	eef4 6ac0 	vcmpe.f32	s13, s0
 8017dce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017dd2:	dc01      	bgt.n	8017dd8 <assign_sum_to_group_output_4row16col+0xc20>
 8017dd4:	eef0 6a40 	vmov.f32	s13, s0
 8017dd8:	eef4 6ae0 	vcmpe.f32	s13, s1
 8017ddc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017de0:	d401      	bmi.n	8017de6 <assign_sum_to_group_output_4row16col+0xc2e>
 8017de2:	eef0 6a60 	vmov.f32	s13, s1
 8017de6:	ed9b 7a00 	vldr	s14, [fp]
 8017dea:	ee27 7a26 	vmul.f32	s14, s14, s13
 8017dee:	ee27 7a01 	vmul.f32	s14, s14, s2
 8017df2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8017df6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8017dfa:	ee17 0a90 	vmov	r0, s15
 8017dfe:	9c1b      	ldr	r4, [sp, #108]	@ 0x6c
 8017e00:	70a0      	strb	r0, [r4, #2]
  *out_8++ -= TN_MIN(TN_MAX(sum_2[8], output_activation_min), output_activation_max) * scales[i_output_depth + 8] * learning_rate;
 8017e02:	981c      	ldr	r0, [sp, #112]	@ 0x70
 8017e04:	f990 0002 	ldrsb.w	r0, [r0, #2]
 8017e08:	ee07 0a90 	vmov	s15, r0
 8017e0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017e10:	edd1 6a08 	vldr	s13, [r1, #32]
 8017e14:	eef4 6ac0 	vcmpe.f32	s13, s0
 8017e18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017e1c:	dc01      	bgt.n	8017e22 <assign_sum_to_group_output_4row16col+0xc6a>
 8017e1e:	eef0 6a40 	vmov.f32	s13, s0
 8017e22:	eef4 6ae0 	vcmpe.f32	s13, s1
 8017e26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017e2a:	d401      	bmi.n	8017e30 <assign_sum_to_group_output_4row16col+0xc78>
 8017e2c:	eef0 6a60 	vmov.f32	s13, s1
 8017e30:	ed9a 7a00 	vldr	s14, [sl]
 8017e34:	ee27 7a26 	vmul.f32	s14, s14, s13
 8017e38:	ee27 7a01 	vmul.f32	s14, s14, s2
 8017e3c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8017e40:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8017e44:	ee17 0a90 	vmov	r0, s15
 8017e48:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 8017e4a:	70a0      	strb	r0, [r4, #2]
  *out_9++ -= TN_MIN(TN_MAX(sum_2[9], output_activation_min), output_activation_max) * scales[i_output_depth + 9] * learning_rate;
 8017e4c:	981d      	ldr	r0, [sp, #116]	@ 0x74
 8017e4e:	f990 0002 	ldrsb.w	r0, [r0, #2]
 8017e52:	ee07 0a90 	vmov	s15, r0
 8017e56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017e5a:	edd1 6a09 	vldr	s13, [r1, #36]	@ 0x24
 8017e5e:	eef4 6ac0 	vcmpe.f32	s13, s0
 8017e62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017e66:	dc01      	bgt.n	8017e6c <assign_sum_to_group_output_4row16col+0xcb4>
 8017e68:	eef0 6a40 	vmov.f32	s13, s0
 8017e6c:	eef4 6ae0 	vcmpe.f32	s13, s1
 8017e70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017e74:	d401      	bmi.n	8017e7a <assign_sum_to_group_output_4row16col+0xcc2>
 8017e76:	eef0 6a60 	vmov.f32	s13, s1
 8017e7a:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8017e7c:	ed90 7a00 	vldr	s14, [r0]
 8017e80:	ee27 7a26 	vmul.f32	s14, s14, s13
 8017e84:	ee27 7a01 	vmul.f32	s14, s14, s2
 8017e88:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8017e8c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8017e90:	ee17 0a90 	vmov	r0, s15
 8017e94:	9c1d      	ldr	r4, [sp, #116]	@ 0x74
 8017e96:	70a0      	strb	r0, [r4, #2]
  *out_10++ -= TN_MIN(TN_MAX(sum_2[10], output_activation_min), output_activation_max) * scales[i_output_depth + 10] * learning_rate;
 8017e98:	981e      	ldr	r0, [sp, #120]	@ 0x78
 8017e9a:	f990 0002 	ldrsb.w	r0, [r0, #2]
 8017e9e:	ee07 0a90 	vmov	s15, r0
 8017ea2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017ea6:	edd1 6a0a 	vldr	s13, [r1, #40]	@ 0x28
 8017eaa:	eef4 6ac0 	vcmpe.f32	s13, s0
 8017eae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017eb2:	dc01      	bgt.n	8017eb8 <assign_sum_to_group_output_4row16col+0xd00>
 8017eb4:	eef0 6a40 	vmov.f32	s13, s0
 8017eb8:	eef4 6ae0 	vcmpe.f32	s13, s1
 8017ebc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017ec0:	d401      	bmi.n	8017ec6 <assign_sum_to_group_output_4row16col+0xd0e>
 8017ec2:	eef0 6a60 	vmov.f32	s13, s1
 8017ec6:	ed99 7a00 	vldr	s14, [r9]
 8017eca:	ee27 7a26 	vmul.f32	s14, s14, s13
 8017ece:	ee27 7a01 	vmul.f32	s14, s14, s2
 8017ed2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8017ed6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8017eda:	ee17 0a90 	vmov	r0, s15
 8017ede:	9c1e      	ldr	r4, [sp, #120]	@ 0x78
 8017ee0:	70a0      	strb	r0, [r4, #2]
  *out_11++ -= TN_MIN(TN_MAX(sum_2[11], output_activation_min), output_activation_max) * scales[i_output_depth + 11] * learning_rate;
 8017ee2:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 8017ee4:	f990 0002 	ldrsb.w	r0, [r0, #2]
 8017ee8:	ee07 0a90 	vmov	s15, r0
 8017eec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017ef0:	edd1 6a0b 	vldr	s13, [r1, #44]	@ 0x2c
 8017ef4:	eef4 6ac0 	vcmpe.f32	s13, s0
 8017ef8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017efc:	dc01      	bgt.n	8017f02 <assign_sum_to_group_output_4row16col+0xd4a>
 8017efe:	eef0 6a40 	vmov.f32	s13, s0
 8017f02:	eef4 6ae0 	vcmpe.f32	s13, s1
 8017f06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017f0a:	d401      	bmi.n	8017f10 <assign_sum_to_group_output_4row16col+0xd58>
 8017f0c:	eef0 6a60 	vmov.f32	s13, s1
 8017f10:	ed98 7a00 	vldr	s14, [r8]
 8017f14:	ee27 7a26 	vmul.f32	s14, s14, s13
 8017f18:	ee27 7a01 	vmul.f32	s14, s14, s2
 8017f1c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8017f20:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8017f24:	ee17 0a90 	vmov	r0, s15
 8017f28:	9c1f      	ldr	r4, [sp, #124]	@ 0x7c
 8017f2a:	70a0      	strb	r0, [r4, #2]
  *out_12++ -= TN_MIN(TN_MAX(sum_2[12], output_activation_min), output_activation_max) * scales[i_output_depth + 12] * learning_rate;
 8017f2c:	9820      	ldr	r0, [sp, #128]	@ 0x80
 8017f2e:	f990 0002 	ldrsb.w	r0, [r0, #2]
 8017f32:	ee07 0a90 	vmov	s15, r0
 8017f36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017f3a:	edd1 6a0c 	vldr	s13, [r1, #48]	@ 0x30
 8017f3e:	eef4 6ac0 	vcmpe.f32	s13, s0
 8017f42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017f46:	dc01      	bgt.n	8017f4c <assign_sum_to_group_output_4row16col+0xd94>
 8017f48:	eef0 6a40 	vmov.f32	s13, s0
 8017f4c:	eef4 6ae0 	vcmpe.f32	s13, s1
 8017f50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017f54:	d401      	bmi.n	8017f5a <assign_sum_to_group_output_4row16col+0xda2>
 8017f56:	eef0 6a60 	vmov.f32	s13, s1
 8017f5a:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8017f5c:	ed90 7a00 	vldr	s14, [r0]
 8017f60:	ee27 7a26 	vmul.f32	s14, s14, s13
 8017f64:	ee27 7a01 	vmul.f32	s14, s14, s2
 8017f68:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8017f6c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8017f70:	ee17 0a90 	vmov	r0, s15
 8017f74:	9c20      	ldr	r4, [sp, #128]	@ 0x80
 8017f76:	70a0      	strb	r0, [r4, #2]
  *out_13++ -= TN_MIN(TN_MAX(sum_2[13], output_activation_min), output_activation_max) * scales[i_output_depth + 13] * learning_rate;
 8017f78:	9821      	ldr	r0, [sp, #132]	@ 0x84
 8017f7a:	f990 0002 	ldrsb.w	r0, [r0, #2]
 8017f7e:	ee07 0a90 	vmov	s15, r0
 8017f82:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017f86:	edd1 6a0d 	vldr	s13, [r1, #52]	@ 0x34
 8017f8a:	eef4 6ac0 	vcmpe.f32	s13, s0
 8017f8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017f92:	dc01      	bgt.n	8017f98 <assign_sum_to_group_output_4row16col+0xde0>
 8017f94:	eef0 6a40 	vmov.f32	s13, s0
 8017f98:	eef4 6ae0 	vcmpe.f32	s13, s1
 8017f9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017fa0:	d401      	bmi.n	8017fa6 <assign_sum_to_group_output_4row16col+0xdee>
 8017fa2:	eef0 6a60 	vmov.f32	s13, s1
 8017fa6:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8017fa8:	ed90 7a00 	vldr	s14, [r0]
 8017fac:	ee27 7a26 	vmul.f32	s14, s14, s13
 8017fb0:	ee27 7a01 	vmul.f32	s14, s14, s2
 8017fb4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8017fb8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8017fbc:	ee17 0a90 	vmov	r0, s15
 8017fc0:	9c21      	ldr	r4, [sp, #132]	@ 0x84
 8017fc2:	70a0      	strb	r0, [r4, #2]
  *out_14++ -= TN_MIN(TN_MAX(sum_2[14], output_activation_min), output_activation_max) * scales[i_output_depth + 14] * learning_rate;
 8017fc4:	9822      	ldr	r0, [sp, #136]	@ 0x88
 8017fc6:	f990 0002 	ldrsb.w	r0, [r0, #2]
 8017fca:	ee07 0a90 	vmov	s15, r0
 8017fce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017fd2:	edd1 6a0e 	vldr	s13, [r1, #56]	@ 0x38
 8017fd6:	eef4 6ac0 	vcmpe.f32	s13, s0
 8017fda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017fde:	dc01      	bgt.n	8017fe4 <assign_sum_to_group_output_4row16col+0xe2c>
 8017fe0:	eef0 6a40 	vmov.f32	s13, s0
 8017fe4:	eef4 6ae0 	vcmpe.f32	s13, s1
 8017fe8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017fec:	d401      	bmi.n	8017ff2 <assign_sum_to_group_output_4row16col+0xe3a>
 8017fee:	eef0 6a60 	vmov.f32	s13, s1
 8017ff2:	ed9e 7a00 	vldr	s14, [lr]
 8017ff6:	ee27 7a26 	vmul.f32	s14, s14, s13
 8017ffa:	ee27 7a01 	vmul.f32	s14, s14, s2
 8017ffe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8018002:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8018006:	ee17 0a90 	vmov	r0, s15
 801800a:	9c22      	ldr	r4, [sp, #136]	@ 0x88
 801800c:	70a0      	strb	r0, [r4, #2]
  *out_15++ -= TN_MIN(TN_MAX(sum_2[15], output_activation_min), output_activation_max) * scales[i_output_depth + 15] * learning_rate;
 801800e:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 8018010:	f990 0002 	ldrsb.w	r0, [r0, #2]
 8018014:	ee07 0a90 	vmov	s15, r0
 8018018:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801801c:	edd1 6a0f 	vldr	s13, [r1, #60]	@ 0x3c
 8018020:	eef4 6ac0 	vcmpe.f32	s13, s0
 8018024:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018028:	dc01      	bgt.n	801802e <assign_sum_to_group_output_4row16col+0xe76>
 801802a:	eef0 6a40 	vmov.f32	s13, s0
 801802e:	eef4 6ae0 	vcmpe.f32	s13, s1
 8018032:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018036:	d401      	bmi.n	801803c <assign_sum_to_group_output_4row16col+0xe84>
 8018038:	eef0 6a60 	vmov.f32	s13, s1
 801803c:	ed93 7a00 	vldr	s14, [r3]
 8018040:	ee27 7a26 	vmul.f32	s14, s14, s13
 8018044:	ee27 7a01 	vmul.f32	s14, s14, s2
 8018048:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801804c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8018050:	ee17 1a90 	vmov	r1, s15
 8018054:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 8018056:	7081      	strb	r1, [r0, #2]

  *out_0++ -= TN_MIN(TN_MAX(sum_3[0], output_activation_min), output_activation_max) * scales[i_output_depth] * learning_rate;
 8018058:	9903      	ldr	r1, [sp, #12]
 801805a:	f991 1003 	ldrsb.w	r1, [r1, #3]
 801805e:	ee07 1a90 	vmov	s15, r1
 8018062:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018066:	edd2 6a00 	vldr	s13, [r2]
 801806a:	eef4 6ac0 	vcmpe.f32	s13, s0
 801806e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018072:	dc01      	bgt.n	8018078 <assign_sum_to_group_output_4row16col+0xec0>
 8018074:	eef0 6a40 	vmov.f32	s13, s0
 8018078:	eef4 6ae0 	vcmpe.f32	s13, s1
 801807c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018080:	d401      	bmi.n	8018086 <assign_sum_to_group_output_4row16col+0xece>
 8018082:	eef0 6a60 	vmov.f32	s13, s1
 8018086:	9904      	ldr	r1, [sp, #16]
 8018088:	ed91 7a00 	vldr	s14, [r1]
 801808c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8018090:	ee27 7a01 	vmul.f32	s14, s14, s2
 8018094:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8018098:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801809c:	ee17 1a90 	vmov	r1, s15
 80180a0:	9803      	ldr	r0, [sp, #12]
 80180a2:	70c1      	strb	r1, [r0, #3]
  *out_1++ -= TN_MIN(TN_MAX(sum_3[1], output_activation_min), output_activation_max) * scales[i_output_depth + 1] * learning_rate;
 80180a4:	9901      	ldr	r1, [sp, #4]
 80180a6:	f991 1003 	ldrsb.w	r1, [r1, #3]
 80180aa:	ee07 1a90 	vmov	s15, r1
 80180ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80180b2:	edd2 6a01 	vldr	s13, [r2, #4]
 80180b6:	eef4 6ac0 	vcmpe.f32	s13, s0
 80180ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80180be:	dc01      	bgt.n	80180c4 <assign_sum_to_group_output_4row16col+0xf0c>
 80180c0:	eef0 6a40 	vmov.f32	s13, s0
 80180c4:	eef4 6ae0 	vcmpe.f32	s13, s1
 80180c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80180cc:	d401      	bmi.n	80180d2 <assign_sum_to_group_output_4row16col+0xf1a>
 80180ce:	eef0 6a60 	vmov.f32	s13, s1
 80180d2:	9905      	ldr	r1, [sp, #20]
 80180d4:	ed91 7a00 	vldr	s14, [r1]
 80180d8:	ee27 7a26 	vmul.f32	s14, s14, s13
 80180dc:	ee27 7a01 	vmul.f32	s14, s14, s2
 80180e0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80180e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80180e8:	ee17 1a90 	vmov	r1, s15
 80180ec:	9801      	ldr	r0, [sp, #4]
 80180ee:	70c1      	strb	r1, [r0, #3]
  *out_2++ -= TN_MIN(TN_MAX(sum_3[2], output_activation_min), output_activation_max) * scales[i_output_depth + 2] * learning_rate;
 80180f0:	9902      	ldr	r1, [sp, #8]
 80180f2:	f991 1003 	ldrsb.w	r1, [r1, #3]
 80180f6:	ee07 1a90 	vmov	s15, r1
 80180fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80180fe:	edd2 6a02 	vldr	s13, [r2, #8]
 8018102:	eef4 6ac0 	vcmpe.f32	s13, s0
 8018106:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801810a:	dc01      	bgt.n	8018110 <assign_sum_to_group_output_4row16col+0xf58>
 801810c:	eef0 6a40 	vmov.f32	s13, s0
 8018110:	eef4 6ae0 	vcmpe.f32	s13, s1
 8018114:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018118:	d401      	bmi.n	801811e <assign_sum_to_group_output_4row16col+0xf66>
 801811a:	eef0 6a60 	vmov.f32	s13, s1
 801811e:	9906      	ldr	r1, [sp, #24]
 8018120:	ed91 7a00 	vldr	s14, [r1]
 8018124:	ee27 7a26 	vmul.f32	s14, s14, s13
 8018128:	ee27 7a01 	vmul.f32	s14, s14, s2
 801812c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8018130:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8018134:	ee17 1a90 	vmov	r1, s15
 8018138:	9802      	ldr	r0, [sp, #8]
 801813a:	70c1      	strb	r1, [r0, #3]
  *out_3++ -= TN_MIN(TN_MAX(sum_3[3], output_activation_min), output_activation_max) * scales[i_output_depth + 3] * learning_rate;
 801813c:	f99c 1003 	ldrsb.w	r1, [ip, #3]
 8018140:	ee07 1a90 	vmov	s15, r1
 8018144:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018148:	edd2 6a03 	vldr	s13, [r2, #12]
 801814c:	eef4 6ac0 	vcmpe.f32	s13, s0
 8018150:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018154:	dc01      	bgt.n	801815a <assign_sum_to_group_output_4row16col+0xfa2>
 8018156:	eef0 6a40 	vmov.f32	s13, s0
 801815a:	eef4 6ae0 	vcmpe.f32	s13, s1
 801815e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018162:	d401      	bmi.n	8018168 <assign_sum_to_group_output_4row16col+0xfb0>
 8018164:	eef0 6a60 	vmov.f32	s13, s1
 8018168:	9907      	ldr	r1, [sp, #28]
 801816a:	ed91 7a00 	vldr	s14, [r1]
 801816e:	ee27 7a26 	vmul.f32	s14, s14, s13
 8018172:	ee27 7a01 	vmul.f32	s14, s14, s2
 8018176:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801817a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801817e:	ee17 1a90 	vmov	r1, s15
 8018182:	f88c 1003 	strb.w	r1, [ip, #3]
  *out_4++ -= TN_MIN(TN_MAX(sum_3[4], output_activation_min), output_activation_max) * scales[i_output_depth + 4] * learning_rate;
 8018186:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8018188:	f991 1003 	ldrsb.w	r1, [r1, #3]
 801818c:	ee07 1a90 	vmov	s15, r1
 8018190:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018194:	edd2 6a04 	vldr	s13, [r2, #16]
 8018198:	eef4 6ac0 	vcmpe.f32	s13, s0
 801819c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80181a0:	dc01      	bgt.n	80181a6 <assign_sum_to_group_output_4row16col+0xfee>
 80181a2:	eef0 6a40 	vmov.f32	s13, s0
 80181a6:	eef4 6ae0 	vcmpe.f32	s13, s1
 80181aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80181ae:	d401      	bmi.n	80181b4 <assign_sum_to_group_output_4row16col+0xffc>
 80181b0:	eef0 6a60 	vmov.f32	s13, s1
 80181b4:	9908      	ldr	r1, [sp, #32]
 80181b6:	ed91 7a00 	vldr	s14, [r1]
 80181ba:	ee27 7a26 	vmul.f32	s14, s14, s13
 80181be:	ee27 7a01 	vmul.f32	s14, s14, s2
 80181c2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80181c6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80181ca:	ee17 1a90 	vmov	r1, s15
 80181ce:	9818      	ldr	r0, [sp, #96]	@ 0x60
 80181d0:	70c1      	strb	r1, [r0, #3]
  *out_5++ -= TN_MIN(TN_MAX(sum_3[5], output_activation_min), output_activation_max) * scales[i_output_depth + 5] * learning_rate;
 80181d2:	9919      	ldr	r1, [sp, #100]	@ 0x64
 80181d4:	f991 1003 	ldrsb.w	r1, [r1, #3]
 80181d8:	ee07 1a90 	vmov	s15, r1
 80181dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80181e0:	edd2 6a05 	vldr	s13, [r2, #20]
 80181e4:	eef4 6ac0 	vcmpe.f32	s13, s0
 80181e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80181ec:	dc01      	bgt.n	80181f2 <assign_sum_to_group_output_4row16col+0x103a>
 80181ee:	eef0 6a40 	vmov.f32	s13, s0
 80181f2:	eef4 6ae0 	vcmpe.f32	s13, s1
 80181f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80181fa:	d401      	bmi.n	8018200 <assign_sum_to_group_output_4row16col+0x1048>
 80181fc:	eef0 6a60 	vmov.f32	s13, s1
 8018200:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8018202:	ed91 7a00 	vldr	s14, [r1]
 8018206:	ee27 7a26 	vmul.f32	s14, s14, s13
 801820a:	ee27 7a01 	vmul.f32	s14, s14, s2
 801820e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8018212:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8018216:	ee17 1a90 	vmov	r1, s15
 801821a:	9819      	ldr	r0, [sp, #100]	@ 0x64
 801821c:	70c1      	strb	r1, [r0, #3]
  *out_6++ -= TN_MIN(TN_MAX(sum_3[6], output_activation_min), output_activation_max) * scales[i_output_depth + 6] * learning_rate;
 801821e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8018220:	f991 1003 	ldrsb.w	r1, [r1, #3]
 8018224:	ee07 1a90 	vmov	s15, r1
 8018228:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801822c:	edd2 6a06 	vldr	s13, [r2, #24]
 8018230:	eef4 6ac0 	vcmpe.f32	s13, s0
 8018234:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018238:	dc01      	bgt.n	801823e <assign_sum_to_group_output_4row16col+0x1086>
 801823a:	eef0 6a40 	vmov.f32	s13, s0
 801823e:	eef4 6ae0 	vcmpe.f32	s13, s1
 8018242:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018246:	d401      	bmi.n	801824c <assign_sum_to_group_output_4row16col+0x1094>
 8018248:	eef0 6a60 	vmov.f32	s13, s1
 801824c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801824e:	ed91 7a00 	vldr	s14, [r1]
 8018252:	ee27 7a26 	vmul.f32	s14, s14, s13
 8018256:	ee27 7a01 	vmul.f32	s14, s14, s2
 801825a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801825e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8018262:	ee17 1a90 	vmov	r1, s15
 8018266:	981a      	ldr	r0, [sp, #104]	@ 0x68
 8018268:	70c1      	strb	r1, [r0, #3]
  *out_7++ -= TN_MIN(TN_MAX(sum_3[7], output_activation_min), output_activation_max) * scales[i_output_depth + 7] * learning_rate;
 801826a:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 801826c:	f991 1003 	ldrsb.w	r1, [r1, #3]
 8018270:	ee07 1a90 	vmov	s15, r1
 8018274:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018278:	edd2 6a07 	vldr	s13, [r2, #28]
 801827c:	eef4 6ac0 	vcmpe.f32	s13, s0
 8018280:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018284:	dc01      	bgt.n	801828a <assign_sum_to_group_output_4row16col+0x10d2>
 8018286:	eef0 6a40 	vmov.f32	s13, s0
 801828a:	eef4 6ae0 	vcmpe.f32	s13, s1
 801828e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018292:	d401      	bmi.n	8018298 <assign_sum_to_group_output_4row16col+0x10e0>
 8018294:	eef0 6a60 	vmov.f32	s13, s1
 8018298:	ed9b 7a00 	vldr	s14, [fp]
 801829c:	ee27 7a26 	vmul.f32	s14, s14, s13
 80182a0:	ee27 7a01 	vmul.f32	s14, s14, s2
 80182a4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80182a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80182ac:	ee17 1a90 	vmov	r1, s15
 80182b0:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 80182b2:	70c1      	strb	r1, [r0, #3]
  *out_8++ -= TN_MIN(TN_MAX(sum_3[8], output_activation_min), output_activation_max) * scales[i_output_depth + 8] * learning_rate;
 80182b4:	991c      	ldr	r1, [sp, #112]	@ 0x70
 80182b6:	f991 1003 	ldrsb.w	r1, [r1, #3]
 80182ba:	ee07 1a90 	vmov	s15, r1
 80182be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80182c2:	edd2 6a08 	vldr	s13, [r2, #32]
 80182c6:	eef4 6ac0 	vcmpe.f32	s13, s0
 80182ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80182ce:	dc01      	bgt.n	80182d4 <assign_sum_to_group_output_4row16col+0x111c>
 80182d0:	eef0 6a40 	vmov.f32	s13, s0
 80182d4:	eef4 6ae0 	vcmpe.f32	s13, s1
 80182d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80182dc:	d401      	bmi.n	80182e2 <assign_sum_to_group_output_4row16col+0x112a>
 80182de:	eef0 6a60 	vmov.f32	s13, s1
 80182e2:	ed9a 7a00 	vldr	s14, [sl]
 80182e6:	ee27 7a26 	vmul.f32	s14, s14, s13
 80182ea:	ee27 7a01 	vmul.f32	s14, s14, s2
 80182ee:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80182f2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80182f6:	ee17 1a90 	vmov	r1, s15
 80182fa:	981c      	ldr	r0, [sp, #112]	@ 0x70
 80182fc:	70c1      	strb	r1, [r0, #3]
  *out_9++ -= TN_MIN(TN_MAX(sum_3[9], output_activation_min), output_activation_max) * scales[i_output_depth + 9] * learning_rate;
 80182fe:	991d      	ldr	r1, [sp, #116]	@ 0x74
 8018300:	f991 1003 	ldrsb.w	r1, [r1, #3]
 8018304:	ee07 1a90 	vmov	s15, r1
 8018308:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801830c:	edd2 6a09 	vldr	s13, [r2, #36]	@ 0x24
 8018310:	eef4 6ac0 	vcmpe.f32	s13, s0
 8018314:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018318:	dc01      	bgt.n	801831e <assign_sum_to_group_output_4row16col+0x1166>
 801831a:	eef0 6a40 	vmov.f32	s13, s0
 801831e:	eef4 6ae0 	vcmpe.f32	s13, s1
 8018322:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018326:	d401      	bmi.n	801832c <assign_sum_to_group_output_4row16col+0x1174>
 8018328:	eef0 6a60 	vmov.f32	s13, s1
 801832c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801832e:	ed91 7a00 	vldr	s14, [r1]
 8018332:	ee27 7a26 	vmul.f32	s14, s14, s13
 8018336:	ee27 7a01 	vmul.f32	s14, s14, s2
 801833a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801833e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8018342:	ee17 1a90 	vmov	r1, s15
 8018346:	981d      	ldr	r0, [sp, #116]	@ 0x74
 8018348:	70c1      	strb	r1, [r0, #3]
  *out_10++ -= TN_MIN(TN_MAX(sum_3[10], output_activation_min), output_activation_max) * scales[i_output_depth + 10] * learning_rate;
 801834a:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801834c:	f991 1003 	ldrsb.w	r1, [r1, #3]
 8018350:	ee07 1a90 	vmov	s15, r1
 8018354:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018358:	edd2 6a0a 	vldr	s13, [r2, #40]	@ 0x28
 801835c:	eef4 6ac0 	vcmpe.f32	s13, s0
 8018360:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018364:	dc01      	bgt.n	801836a <assign_sum_to_group_output_4row16col+0x11b2>
 8018366:	eef0 6a40 	vmov.f32	s13, s0
 801836a:	eef4 6ae0 	vcmpe.f32	s13, s1
 801836e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018372:	d401      	bmi.n	8018378 <assign_sum_to_group_output_4row16col+0x11c0>
 8018374:	eef0 6a60 	vmov.f32	s13, s1
 8018378:	ed99 7a00 	vldr	s14, [r9]
 801837c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8018380:	ee27 7a01 	vmul.f32	s14, s14, s2
 8018384:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8018388:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801838c:	ee17 1a90 	vmov	r1, s15
 8018390:	981e      	ldr	r0, [sp, #120]	@ 0x78
 8018392:	70c1      	strb	r1, [r0, #3]
  *out_11++ -= TN_MIN(TN_MAX(sum_3[11], output_activation_min), output_activation_max) * scales[i_output_depth + 11] * learning_rate;
 8018394:	991f      	ldr	r1, [sp, #124]	@ 0x7c
 8018396:	f991 1003 	ldrsb.w	r1, [r1, #3]
 801839a:	ee07 1a90 	vmov	s15, r1
 801839e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80183a2:	edd2 6a0b 	vldr	s13, [r2, #44]	@ 0x2c
 80183a6:	eef4 6ac0 	vcmpe.f32	s13, s0
 80183aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80183ae:	dc01      	bgt.n	80183b4 <assign_sum_to_group_output_4row16col+0x11fc>
 80183b0:	eef0 6a40 	vmov.f32	s13, s0
 80183b4:	eef4 6ae0 	vcmpe.f32	s13, s1
 80183b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80183bc:	d401      	bmi.n	80183c2 <assign_sum_to_group_output_4row16col+0x120a>
 80183be:	eef0 6a60 	vmov.f32	s13, s1
 80183c2:	ed98 7a00 	vldr	s14, [r8]
 80183c6:	ee27 7a26 	vmul.f32	s14, s14, s13
 80183ca:	ee27 7a01 	vmul.f32	s14, s14, s2
 80183ce:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80183d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80183d6:	ee17 1a90 	vmov	r1, s15
 80183da:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 80183dc:	70c1      	strb	r1, [r0, #3]
  *out_12++ -= TN_MIN(TN_MAX(sum_3[12], output_activation_min), output_activation_max) * scales[i_output_depth + 12] * learning_rate;
 80183de:	9920      	ldr	r1, [sp, #128]	@ 0x80
 80183e0:	f991 1003 	ldrsb.w	r1, [r1, #3]
 80183e4:	ee07 1a90 	vmov	s15, r1
 80183e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80183ec:	edd2 6a0c 	vldr	s13, [r2, #48]	@ 0x30
 80183f0:	eef4 6ac0 	vcmpe.f32	s13, s0
 80183f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80183f8:	dc01      	bgt.n	80183fe <assign_sum_to_group_output_4row16col+0x1246>
 80183fa:	eef0 6a40 	vmov.f32	s13, s0
 80183fe:	eef4 6ae0 	vcmpe.f32	s13, s1
 8018402:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018406:	d401      	bmi.n	801840c <assign_sum_to_group_output_4row16col+0x1254>
 8018408:	eef0 6a60 	vmov.f32	s13, s1
 801840c:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801840e:	ed91 7a00 	vldr	s14, [r1]
 8018412:	ee27 7a26 	vmul.f32	s14, s14, s13
 8018416:	ee27 7a01 	vmul.f32	s14, s14, s2
 801841a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801841e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8018422:	ee17 1a90 	vmov	r1, s15
 8018426:	9820      	ldr	r0, [sp, #128]	@ 0x80
 8018428:	70c1      	strb	r1, [r0, #3]
  *out_13++ -= TN_MIN(TN_MAX(sum_3[13], output_activation_min), output_activation_max) * scales[i_output_depth + 13] * learning_rate;
 801842a:	9921      	ldr	r1, [sp, #132]	@ 0x84
 801842c:	f991 1003 	ldrsb.w	r1, [r1, #3]
 8018430:	ee07 1a90 	vmov	s15, r1
 8018434:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018438:	edd2 6a0d 	vldr	s13, [r2, #52]	@ 0x34
 801843c:	eef4 6ac0 	vcmpe.f32	s13, s0
 8018440:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018444:	dc01      	bgt.n	801844a <assign_sum_to_group_output_4row16col+0x1292>
 8018446:	eef0 6a40 	vmov.f32	s13, s0
 801844a:	eef4 6ae0 	vcmpe.f32	s13, s1
 801844e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018452:	d401      	bmi.n	8018458 <assign_sum_to_group_output_4row16col+0x12a0>
 8018454:	eef0 6a60 	vmov.f32	s13, s1
 8018458:	990d      	ldr	r1, [sp, #52]	@ 0x34
 801845a:	ed91 7a00 	vldr	s14, [r1]
 801845e:	ee27 7a26 	vmul.f32	s14, s14, s13
 8018462:	ee27 7a01 	vmul.f32	s14, s14, s2
 8018466:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801846a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801846e:	ee17 1a90 	vmov	r1, s15
 8018472:	9821      	ldr	r0, [sp, #132]	@ 0x84
 8018474:	70c1      	strb	r1, [r0, #3]
  *out_14++ -= TN_MIN(TN_MAX(sum_3[14], output_activation_min), output_activation_max) * scales[i_output_depth + 14] * learning_rate;
 8018476:	9922      	ldr	r1, [sp, #136]	@ 0x88
 8018478:	f991 1003 	ldrsb.w	r1, [r1, #3]
 801847c:	ee07 1a90 	vmov	s15, r1
 8018480:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018484:	edd2 6a0e 	vldr	s13, [r2, #56]	@ 0x38
 8018488:	eef4 6ac0 	vcmpe.f32	s13, s0
 801848c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018490:	dc01      	bgt.n	8018496 <assign_sum_to_group_output_4row16col+0x12de>
 8018492:	eef0 6a40 	vmov.f32	s13, s0
 8018496:	eef4 6ae0 	vcmpe.f32	s13, s1
 801849a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801849e:	d401      	bmi.n	80184a4 <assign_sum_to_group_output_4row16col+0x12ec>
 80184a0:	eef0 6a60 	vmov.f32	s13, s1
 80184a4:	ed9e 7a00 	vldr	s14, [lr]
 80184a8:	ee27 7a26 	vmul.f32	s14, s14, s13
 80184ac:	ee27 7a01 	vmul.f32	s14, s14, s2
 80184b0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80184b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80184b8:	ee17 1a90 	vmov	r1, s15
 80184bc:	9822      	ldr	r0, [sp, #136]	@ 0x88
 80184be:	70c1      	strb	r1, [r0, #3]
  *out_15++ -= TN_MIN(TN_MAX(sum_3[15], output_activation_min), output_activation_max) * scales[i_output_depth + 15] * learning_rate;
 80184c0:	9923      	ldr	r1, [sp, #140]	@ 0x8c
 80184c2:	f991 1003 	ldrsb.w	r1, [r1, #3]
 80184c6:	ee07 1a90 	vmov	s15, r1
 80184ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80184ce:	edd2 6a0f 	vldr	s13, [r2, #60]	@ 0x3c
 80184d2:	eef4 6ac0 	vcmpe.f32	s13, s0
 80184d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80184da:	dc01      	bgt.n	80184e0 <assign_sum_to_group_output_4row16col+0x1328>
 80184dc:	eef0 6a40 	vmov.f32	s13, s0
 80184e0:	eef4 6ae0 	vcmpe.f32	s13, s1
 80184e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80184e8:	d401      	bmi.n	80184ee <assign_sum_to_group_output_4row16col+0x1336>
 80184ea:	eef0 6a60 	vmov.f32	s13, s1
 80184ee:	ed93 7a00 	vldr	s14, [r3]
 80184f2:	ee27 7a26 	vmul.f32	s14, s14, s13
 80184f6:	ee27 7a01 	vmul.f32	s14, s14, s2
 80184fa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80184fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8018502:	ee17 3a90 	vmov	r3, s15
 8018506:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8018508:	70d3      	strb	r3, [r2, #3]
}
 801850a:	b00f      	add	sp, #60	@ 0x3c
 801850c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018510 <group_conv_fp_kernel8_stride1_pad0_in8x8_out1x1_uniweight_4row16col_inplace>:
                 const uint16_t input_height, const uint16_t input_width, const uint16_t input_depth, 
                 const float* filter_data, const float* bias_data, 
                 int8_t* output_weight_data, const uint16_t output_height, const uint16_t output_width, const uint16_t output_depth, 
                 const float output_activation_min, const float output_activation_max,
                 float* im2col_data, const uint16_t batches, const uint16_t groups,
                 const float* scales, const float learning_rate) {
 8018510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018514:	ed2d 8b04 	vpush	{d8-d9}
 8018518:	f5ad 7d07 	sub.w	sp, sp, #540	@ 0x21c
 801851c:	9042      	str	r0, [sp, #264]	@ 0x108
 801851e:	913f      	str	r1, [sp, #252]	@ 0xfc
 8018520:	9243      	str	r2, [sp, #268]	@ 0x10c
 8018522:	9344      	str	r3, [sp, #272]	@ 0x110
 8018524:	9a94      	ldr	r2, [sp, #592]	@ 0x250
 8018526:	eeb0 9a40 	vmov.f32	s18, s0
 801852a:	eef0 8a60 	vmov.f32	s17, s1
 801852e:	f8bd 6270 	ldrh.w	r6, [sp, #624]	@ 0x270
 8018532:	eeb0 8a41 	vmov.f32	s16, s2
  int i_output_depth, i , j;
  int output_depth_per_group = output_depth / groups;
 8018536:	f8bd 3264 	ldrh.w	r3, [sp, #612]	@ 0x264
 801853a:	fbb3 f3f6 	udiv	r3, r3, r6
 801853e:	9340      	str	r3, [sp, #256]	@ 0x100

  for (i_output_depth = 0; i_output_depth < output_depth_per_group; i_output_depth += 16) {
 8018540:	2300      	movs	r3, #0
 8018542:	932f      	str	r3, [sp, #188]	@ 0xbc
 8018544:	4613      	mov	r3, r2
 8018546:	e2d3      	b.n	8018af0 <group_conv_fp_kernel8_stride1_pad0_in8x8_out1x1_uniweight_4row16col_inplace+0x5e0>
    const float* src_8 = filter_data++; const float* src_9 = filter_data++; const float* src_10 = filter_data++; const float* src_11 = filter_data++;
    const float* src_12 = filter_data++; const float* src_13 = filter_data++; const float* src_14 = filter_data++; const float* src_15 = filter_data++;

    for (i = 0; i < DIM_KER_X; i++) {
      for (j = 0; j < DIM_KER_Y; j++) {
        *two_column_buffer_0++ = *src_0; src_0 += output_depth_per_group;
 8018548:	9f2c      	ldr	r7, [sp, #176]	@ 0xb0
 801854a:	9a94      	ldr	r2, [sp, #592]	@ 0x250
 801854c:	edd2 7a00 	vldr	s15, [r2]
 8018550:	ece7 7a01 	vstmia	r7!, {s15}
 8018554:	972c      	str	r7, [sp, #176]	@ 0xb0
 8018556:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801855a:	9294      	str	r2, [sp, #592]	@ 0x250
        *two_column_buffer_1++ = *src_1; src_1 += output_depth_per_group;
 801855c:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 801855e:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 8018560:	edd2 7a00 	vldr	s15, [r2]
 8018564:	ece7 7a01 	vstmia	r7!, {s15}
 8018568:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801856c:	9229      	str	r2, [sp, #164]	@ 0xa4
        *two_column_buffer_2++ = *src_2; src_2 += output_depth_per_group;
 801856e:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8018570:	992a      	ldr	r1, [sp, #168]	@ 0xa8
 8018572:	edd1 7a00 	vldr	s15, [r1]
 8018576:	ece2 7a01 	vstmia	r2!, {s15}
 801857a:	921a      	str	r2, [sp, #104]	@ 0x68
 801857c:	eb01 0283 	add.w	r2, r1, r3, lsl #2
 8018580:	922a      	str	r2, [sp, #168]	@ 0xa8
        *two_column_buffer_3++ = *src_3; src_3 += output_depth_per_group;
 8018582:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8018584:	9a2b      	ldr	r2, [sp, #172]	@ 0xac
 8018586:	edd2 7a00 	vldr	s15, [r2]
 801858a:	ece1 7a01 	vstmia	r1!, {s15}
 801858e:	911b      	str	r1, [sp, #108]	@ 0x6c
 8018590:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8018594:	922b      	str	r2, [sp, #172]	@ 0xac
        *two_column_buffer_4++ = *src_4; src_4 += output_depth_per_group;
 8018596:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8018598:	9915      	ldr	r1, [sp, #84]	@ 0x54
 801859a:	edd1 7a00 	vldr	s15, [r1]
 801859e:	ece2 7a01 	vstmia	r2!, {s15}
 80185a2:	921c      	str	r2, [sp, #112]	@ 0x70
 80185a4:	eb01 0283 	add.w	r2, r1, r3, lsl #2
 80185a8:	9215      	str	r2, [sp, #84]	@ 0x54
        *two_column_buffer_5++ = *src_5; src_5 += output_depth_per_group;
 80185aa:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 80185ac:	eddc 7a00 	vldr	s15, [ip]
 80185b0:	ece2 7a01 	vstmia	r2!, {s15}
 80185b4:	921d      	str	r2, [sp, #116]	@ 0x74
 80185b6:	eb0c 0c83 	add.w	ip, ip, r3, lsl #2
        *two_column_buffer_6++ = *src_6; src_6 += output_depth_per_group;
 80185ba:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 80185bc:	9916      	ldr	r1, [sp, #88]	@ 0x58
 80185be:	edd1 7a00 	vldr	s15, [r1]
 80185c2:	ece2 7a01 	vstmia	r2!, {s15}
 80185c6:	922d      	str	r2, [sp, #180]	@ 0xb4
 80185c8:	eb01 0283 	add.w	r2, r1, r3, lsl #2
 80185cc:	9216      	str	r2, [sp, #88]	@ 0x58
        *two_column_buffer_7++ = *src_7; src_7 += output_depth_per_group;
 80185ce:	9920      	ldr	r1, [sp, #128]	@ 0x80
 80185d0:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80185d2:	edd2 7a00 	vldr	s15, [r2]
 80185d6:	ece1 7a01 	vstmia	r1!, {s15}
 80185da:	911e      	str	r1, [sp, #120]	@ 0x78
 80185dc:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80185e0:	9214      	str	r2, [sp, #80]	@ 0x50
        *two_column_buffer_8++ = *src_8; src_8 += output_depth_per_group;
 80185e2:	9921      	ldr	r1, [sp, #132]	@ 0x84
 80185e4:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80185e6:	edd2 7a00 	vldr	s15, [r2]
 80185ea:	ece1 7a01 	vstmia	r1!, {s15}
 80185ee:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80185f2:	9217      	str	r2, [sp, #92]	@ 0x5c
        *two_column_buffer_9++ = *src_9; src_9 += output_depth_per_group;
 80185f4:	9822      	ldr	r0, [sp, #136]	@ 0x88
 80185f6:	edde 7a00 	vldr	s15, [lr]
 80185fa:	ece0 7a01 	vstmia	r0!, {s15}
 80185fe:	901f      	str	r0, [sp, #124]	@ 0x7c
 8018600:	eb0e 0e83 	add.w	lr, lr, r3, lsl #2
        *two_column_buffer_10++ = *src_10; src_10 += output_depth_per_group;
 8018604:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 8018606:	edd8 7a00 	vldr	s15, [r8]
 801860a:	ece0 7a01 	vstmia	r0!, {s15}
 801860e:	eb08 0883 	add.w	r8, r8, r3, lsl #2
        *two_column_buffer_11++ = *src_11; src_11 += output_depth_per_group;
 8018612:	9c24      	ldr	r4, [sp, #144]	@ 0x90
 8018614:	edd9 7a00 	vldr	s15, [r9]
 8018618:	ece4 7a01 	vstmia	r4!, {s15}
 801861c:	9420      	str	r4, [sp, #128]	@ 0x80
 801861e:	eb09 0983 	add.w	r9, r9, r3, lsl #2
        *two_column_buffer_12++ = *src_12; src_12 += output_depth_per_group;
 8018622:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 8018624:	edda 7a00 	vldr	s15, [sl]
 8018628:	ece4 7a01 	vstmia	r4!, {s15}
 801862c:	eb0a 0a83 	add.w	sl, sl, r3, lsl #2
        *two_column_buffer_13++ = *src_13; src_13 += output_depth_per_group;
 8018630:	9d26      	ldr	r5, [sp, #152]	@ 0x98
 8018632:	eddb 7a00 	vldr	s15, [fp]
 8018636:	ece5 7a01 	vstmia	r5!, {s15}
 801863a:	9521      	str	r5, [sp, #132]	@ 0x84
 801863c:	eb0b 0b83 	add.w	fp, fp, r3, lsl #2
        *two_column_buffer_14++ = *src_14; src_14 += output_depth_per_group;
 8018640:	9d27      	ldr	r5, [sp, #156]	@ 0x9c
 8018642:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8018644:	edd2 7a00 	vldr	s15, [r2]
 8018648:	ece5 7a01 	vstmia	r5!, {s15}
 801864c:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8018650:	9218      	str	r2, [sp, #96]	@ 0x60
        *two_column_buffer_15++ = *src_15; src_15 += output_depth_per_group;
 8018652:	9e28      	ldr	r6, [sp, #160]	@ 0xa0
 8018654:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8018656:	edd2 7a00 	vldr	s15, [r2]
 801865a:	ece6 7a01 	vstmia	r6!, {s15}
 801865e:	9622      	str	r6, [sp, #136]	@ 0x88
 8018660:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8018664:	9219      	str	r2, [sp, #100]	@ 0x64
      for (j = 0; j < DIM_KER_Y; j++) {
 8018666:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8018668:	3601      	adds	r6, #1
 801866a:	9613      	str	r6, [sp, #76]	@ 0x4c
        *two_column_buffer_15++ = *src_15; src_15 += output_depth_per_group;
 801866c:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 801866e:	9628      	str	r6, [sp, #160]	@ 0xa0
        *two_column_buffer_14++ = *src_14; src_14 += output_depth_per_group;
 8018670:	9527      	str	r5, [sp, #156]	@ 0x9c
        *two_column_buffer_13++ = *src_13; src_13 += output_depth_per_group;
 8018672:	9d21      	ldr	r5, [sp, #132]	@ 0x84
 8018674:	9526      	str	r5, [sp, #152]	@ 0x98
        *two_column_buffer_12++ = *src_12; src_12 += output_depth_per_group;
 8018676:	9425      	str	r4, [sp, #148]	@ 0x94
        *two_column_buffer_11++ = *src_11; src_11 += output_depth_per_group;
 8018678:	9c20      	ldr	r4, [sp, #128]	@ 0x80
 801867a:	9424      	str	r4, [sp, #144]	@ 0x90
        *two_column_buffer_10++ = *src_10; src_10 += output_depth_per_group;
 801867c:	9023      	str	r0, [sp, #140]	@ 0x8c
        *two_column_buffer_9++ = *src_9; src_9 += output_depth_per_group;
 801867e:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 8018680:	9022      	str	r0, [sp, #136]	@ 0x88
        *two_column_buffer_8++ = *src_8; src_8 += output_depth_per_group;
 8018682:	9121      	str	r1, [sp, #132]	@ 0x84
        *two_column_buffer_7++ = *src_7; src_7 += output_depth_per_group;
 8018684:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8018686:	9120      	str	r1, [sp, #128]	@ 0x80
        *two_column_buffer_6++ = *src_6; src_6 += output_depth_per_group;
 8018688:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 801868a:	921f      	str	r2, [sp, #124]	@ 0x7c
        *two_column_buffer_5++ = *src_5; src_5 += output_depth_per_group;
 801868c:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 801868e:	921e      	str	r2, [sp, #120]	@ 0x78
        *two_column_buffer_4++ = *src_4; src_4 += output_depth_per_group;
 8018690:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8018692:	921d      	str	r2, [sp, #116]	@ 0x74
        *two_column_buffer_3++ = *src_3; src_3 += output_depth_per_group;
 8018694:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 8018696:	911c      	str	r1, [sp, #112]	@ 0x70
        *two_column_buffer_2++ = *src_2; src_2 += output_depth_per_group;
 8018698:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801869a:	921b      	str	r2, [sp, #108]	@ 0x6c
        *two_column_buffer_1++ = *src_1; src_1 += output_depth_per_group;
 801869c:	971a      	str	r7, [sp, #104]	@ 0x68
      for (j = 0; j < DIM_KER_Y; j++) {
 801869e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80186a0:	2a07      	cmp	r2, #7
 80186a2:	f67f af51 	bls.w	8018548 <group_conv_fp_kernel8_stride1_pad0_in8x8_out1x1_uniweight_4row16col_inplace+0x38>
    for (i = 0; i < DIM_KER_X; i++) {
 80186a6:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 80186a8:	9f17      	ldr	r7, [sp, #92]	@ 0x5c
 80186aa:	4665      	mov	r5, ip
 80186ac:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 80186ae:	9919      	ldr	r1, [sp, #100]	@ 0x64
 80186b0:	9894      	ldr	r0, [sp, #592]	@ 0x250
 80186b2:	9e16      	ldr	r6, [sp, #88]	@ 0x58
 80186b4:	46bc      	mov	ip, r7
 80186b6:	9f2e      	ldr	r7, [sp, #184]	@ 0xb8
 80186b8:	3701      	adds	r7, #1
 80186ba:	972e      	str	r7, [sp, #184]	@ 0xb8
 80186bc:	9f2e      	ldr	r7, [sp, #184]	@ 0xb8
 80186be:	2f07      	cmp	r7, #7
 80186c0:	d80a      	bhi.n	80186d8 <group_conv_fp_kernel8_stride1_pad0_in8x8_out1x1_uniweight_4row16col_inplace+0x1c8>
      for (j = 0; j < DIM_KER_Y; j++) {
 80186c2:	2700      	movs	r7, #0
 80186c4:	9713      	str	r7, [sp, #76]	@ 0x4c
 80186c6:	9415      	str	r4, [sp, #84]	@ 0x54
 80186c8:	4664      	mov	r4, ip
 80186ca:	46ac      	mov	ip, r5
 80186cc:	9218      	str	r2, [sp, #96]	@ 0x60
 80186ce:	9119      	str	r1, [sp, #100]	@ 0x64
 80186d0:	9094      	str	r0, [sp, #592]	@ 0x250
 80186d2:	9616      	str	r6, [sp, #88]	@ 0x58
 80186d4:	9417      	str	r4, [sp, #92]	@ 0x5c
 80186d6:	e7e2      	b.n	801869e <group_conv_fp_kernel8_stride1_pad0_in8x8_out1x1_uniweight_4row16col_inplace+0x18e>
      }
    }

    /* Setup output_weight_data */
    int8_t* out_0 = &output_weight_data[i_output_depth * groups]; int8_t* out_1 = &output_weight_data[(i_output_depth + 1) * groups];
 80186d8:	9e45      	ldr	r6, [sp, #276]	@ 0x114
 80186da:	9b96      	ldr	r3, [sp, #600]	@ 0x258
 80186dc:	9a2f      	ldr	r2, [sp, #188]	@ 0xbc
 80186de:	fb02 3306 	mla	r3, r2, r6, r3
 80186e2:	9320      	str	r3, [sp, #128]	@ 0x80
 80186e4:	fb02 6306 	mla	r3, r2, r6, r6
 80186e8:	9996      	ldr	r1, [sp, #600]	@ 0x258
 80186ea:	18cb      	adds	r3, r1, r3
 80186ec:	9321      	str	r3, [sp, #132]	@ 0x84
    int8_t* out_2 = &output_weight_data[(i_output_depth + 2) * groups]; int8_t* out_3 = &output_weight_data[(i_output_depth + 3) * groups];
 80186ee:	1c93      	adds	r3, r2, #2
 80186f0:	fb03 1306 	mla	r3, r3, r6, r1
 80186f4:	9322      	str	r3, [sp, #136]	@ 0x88
 80186f6:	1cd3      	adds	r3, r2, #3
 80186f8:	fb03 1306 	mla	r3, r3, r6, r1
 80186fc:	9323      	str	r3, [sp, #140]	@ 0x8c
    int8_t* out_4 = &output_weight_data[(i_output_depth + 4) * groups]; int8_t* out_5 = &output_weight_data[(i_output_depth + 5) * groups];
 80186fe:	1d13      	adds	r3, r2, #4
 8018700:	fb03 1306 	mla	r3, r3, r6, r1
 8018704:	9315      	str	r3, [sp, #84]	@ 0x54
 8018706:	1d53      	adds	r3, r2, #5
 8018708:	fb03 1306 	mla	r3, r3, r6, r1
 801870c:	9316      	str	r3, [sp, #88]	@ 0x58
    int8_t* out_6 = &output_weight_data[(i_output_depth + 6) * groups]; int8_t* out_7 = &output_weight_data[(i_output_depth + 7) * groups];
 801870e:	1d93      	adds	r3, r2, #6
 8018710:	fb03 1306 	mla	r3, r3, r6, r1
 8018714:	9317      	str	r3, [sp, #92]	@ 0x5c
 8018716:	1dd3      	adds	r3, r2, #7
 8018718:	fb03 1306 	mla	r3, r3, r6, r1
 801871c:	9318      	str	r3, [sp, #96]	@ 0x60
    int8_t* out_8 = &output_weight_data[(i_output_depth + 8) * groups]; int8_t* out_9 = &output_weight_data[(i_output_depth + 9) * groups];
 801871e:	f102 0308 	add.w	r3, r2, #8
 8018722:	fb03 1306 	mla	r3, r3, r6, r1
 8018726:	9319      	str	r3, [sp, #100]	@ 0x64
 8018728:	f102 0309 	add.w	r3, r2, #9
 801872c:	fb03 1306 	mla	r3, r3, r6, r1
 8018730:	931a      	str	r3, [sp, #104]	@ 0x68
    int8_t* out_10 = &output_weight_data[(i_output_depth + 10) * groups]; int8_t* out_11 = &output_weight_data[(i_output_depth + 11) * groups];
 8018732:	f102 030a 	add.w	r3, r2, #10
 8018736:	fb03 1306 	mla	r3, r3, r6, r1
 801873a:	931b      	str	r3, [sp, #108]	@ 0x6c
 801873c:	f102 030b 	add.w	r3, r2, #11
 8018740:	fb03 1306 	mla	r3, r3, r6, r1
 8018744:	931c      	str	r3, [sp, #112]	@ 0x70
    int8_t* out_12 = &output_weight_data[(i_output_depth + 12) * groups]; int8_t* out_13 = &output_weight_data[(i_output_depth + 13) * groups];
 8018746:	f102 030c 	add.w	r3, r2, #12
 801874a:	fb03 1306 	mla	r3, r3, r6, r1
 801874e:	931d      	str	r3, [sp, #116]	@ 0x74
 8018750:	f102 030d 	add.w	r3, r2, #13
 8018754:	fb03 1306 	mla	r3, r3, r6, r1
 8018758:	931e      	str	r3, [sp, #120]	@ 0x78
    int8_t* out_14 = &output_weight_data[(i_output_depth + 14) * groups]; int8_t* out_15 = &output_weight_data[(i_output_depth + 15) * groups];
 801875a:	f102 030e 	add.w	r3, r2, #14
 801875e:	fb03 1306 	mla	r3, r3, r6, r1
 8018762:	9324      	str	r3, [sp, #144]	@ 0x90
 8018764:	f102 030f 	add.w	r3, r2, #15
 8018768:	fb03 1306 	mla	r3, r3, r6, r1
 801876c:	9325      	str	r3, [sp, #148]	@ 0x94

    const float* input = input_data;

    /* Calculate 4 rows(input channels) at a time */
    uint16_t group_cnt = groups >> 2;
 801876e:	08b3      	lsrs	r3, r6, #2
    const float* input = input_data;
 8018770:	f8dd e108 	ldr.w	lr, [sp, #264]	@ 0x108
 8018774:	9d43      	ldr	r5, [sp, #268]	@ 0x10c
 8018776:	9c44      	ldr	r4, [sp, #272]	@ 0x110
 8018778:	9628      	str	r6, [sp, #160]	@ 0xa0
    while (group_cnt--) {
 801877a:	e195      	b.n	8018aa8 <group_conv_fp_kernel8_stride1_pad0_in8x8_out1x1_uniweight_4row16col_inplace+0x598>
      src_2 = input++;
      src_3 = input++;

      for (i = 0; i < input_height; i++) {
        for (j = 0; j < input_width; j++) {
          *two_column_buffer_0++ = *src_0;
 801877c:	edde 7a00 	vldr	s15, [lr]
 8018780:	ece3 7a01 	vstmia	r3!, {s15}
          src_0 += input_depth;
 8018784:	eb0e 0e84 	add.w	lr, lr, r4, lsl #2
          *two_column_buffer_1++ = *src_1;
 8018788:	edd9 7a00 	vldr	s15, [r9]
 801878c:	ece2 7a01 	vstmia	r2!, {s15}
          src_1 += input_depth;
 8018790:	eb09 0984 	add.w	r9, r9, r4, lsl #2
          *two_column_buffer_2++ = *src_2;
 8018794:	edd8 7a00 	vldr	s15, [r8]
 8018798:	ece1 7a01 	vstmia	r1!, {s15}
          src_2 += input_depth;
 801879c:	eb08 0884 	add.w	r8, r8, r4, lsl #2
          *two_column_buffer_3++ = *src_3;
 80187a0:	eddc 7a00 	vldr	s15, [ip]
 80187a4:	ece0 7a01 	vstmia	r0!, {s15}
          src_3 += input_depth;
 80187a8:	eb0c 0c84 	add.w	ip, ip, r4, lsl #2
        for (j = 0; j < input_width; j++) {
 80187ac:	3601      	adds	r6, #1
 80187ae:	42b5      	cmp	r5, r6
 80187b0:	dce4      	bgt.n	801877c <group_conv_fp_kernel8_stride1_pad0_in8x8_out1x1_uniweight_4row16col_inplace+0x26c>
      for (i = 0; i < input_height; i++) {
 80187b2:	f10a 0a01 	add.w	sl, sl, #1
 80187b6:	4557      	cmp	r7, sl
 80187b8:	dd01      	ble.n	80187be <group_conv_fp_kernel8_stride1_pad0_in8x8_out1x1_uniweight_4row16col_inplace+0x2ae>
        for (j = 0; j < input_width; j++) {
 80187ba:	2600      	movs	r6, #0
 80187bc:	e7f7      	b.n	80187ae <group_conv_fp_kernel8_stride1_pad0_in8x8_out1x1_uniweight_4row16col_inplace+0x29e>
      const float* input_3 = &im2col_data[DIM_KER_X * DIM_KER_Y * 19];

      const float* filter = im2col_data;

      // We assume bias_data as zeros.
      float sum_0[16] = {};
 80187be:	9f27      	ldr	r7, [sp, #156]	@ 0x9c
 80187c0:	ae46      	add	r6, sp, #280	@ 0x118
 80187c2:	f04f 0840 	mov.w	r8, #64	@ 0x40
 80187c6:	4642      	mov	r2, r8
 80187c8:	2100      	movs	r1, #0
 80187ca:	4630      	mov	r0, r6
 80187cc:	f00b fa76 	bl	8023cbc <memset>
      float sum_1[16] = {};
 80187d0:	f50d 79ac 	add.w	r9, sp, #344	@ 0x158
 80187d4:	4642      	mov	r2, r8
 80187d6:	2100      	movs	r1, #0
 80187d8:	4648      	mov	r0, r9
 80187da:	f00b fa6f 	bl	8023cbc <memset>
      float sum_2[16] = {};
 80187de:	f50d 7acc 	add.w	sl, sp, #408	@ 0x198
 80187e2:	4642      	mov	r2, r8
 80187e4:	2100      	movs	r1, #0
 80187e6:	4650      	mov	r0, sl
 80187e8:	f00b fa68 	bl	8023cbc <memset>
      float sum_3[16] = {};
 80187ec:	4642      	mov	r2, r8
 80187ee:	2100      	movs	r1, #0
 80187f0:	a876      	add	r0, sp, #472	@ 0x1d8
 80187f2:	f00b fa63 	bl	8023cbc <memset>
      
      /* Group Conv Computation */
      group_mac_kernel8_4row_fp_uniweight_reuse_output_input(&sum_0[0], &sum_1[0], &sum_2[0], &sum_3[0], input_0, input_1, input_2, input_3, filter);
 80187f6:	9b9a      	ldr	r3, [sp, #616]	@ 0x268
 80187f8:	9304      	str	r3, [sp, #16]
 80187fa:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80187fc:	9303      	str	r3, [sp, #12]
 80187fe:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8018800:	9202      	str	r2, [sp, #8]
 8018802:	f8cd b004 	str.w	fp, [sp, #4]
 8018806:	9700      	str	r7, [sp, #0]
 8018808:	a976      	add	r1, sp, #472	@ 0x1d8
 801880a:	460b      	mov	r3, r1
 801880c:	4652      	mov	r2, sl
 801880e:	4649      	mov	r1, r9
 8018810:	4630      	mov	r0, r6
 8018812:	f7fd fcab 	bl	801616c <group_mac_kernel8_4row_fp_uniweight_reuse_output_input>
      filter += DIM_KER_X * DIM_KER_Y;
      group_mac_kernel8_4row_fp_uniweight_reuse_output_input(&sum_0[1], &sum_1[1], &sum_2[1], &sum_3[1], input_0, input_1, input_2, input_3, filter);
 8018816:	9930      	ldr	r1, [sp, #192]	@ 0xc0
 8018818:	9104      	str	r1, [sp, #16]
 801881a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801881c:	9303      	str	r3, [sp, #12]
 801881e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8018820:	9202      	str	r2, [sp, #8]
 8018822:	f8cd b004 	str.w	fp, [sp, #4]
 8018826:	9700      	str	r7, [sp, #0]
 8018828:	ab77      	add	r3, sp, #476	@ 0x1dc
 801882a:	aa67      	add	r2, sp, #412	@ 0x19c
 801882c:	a957      	add	r1, sp, #348	@ 0x15c
 801882e:	a847      	add	r0, sp, #284	@ 0x11c
 8018830:	f7fd fc9c 	bl	801616c <group_mac_kernel8_4row_fp_uniweight_reuse_output_input>
      filter += DIM_KER_X * DIM_KER_Y;
      group_mac_kernel8_4row_fp_uniweight_reuse_output_input(&sum_0[2], &sum_1[2], &sum_2[2], &sum_3[2], input_0, input_1, input_2, input_3, filter);
 8018834:	9931      	ldr	r1, [sp, #196]	@ 0xc4
 8018836:	9104      	str	r1, [sp, #16]
 8018838:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801883a:	9303      	str	r3, [sp, #12]
 801883c:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801883e:	9202      	str	r2, [sp, #8]
 8018840:	f8cd b004 	str.w	fp, [sp, #4]
 8018844:	9700      	str	r7, [sp, #0]
 8018846:	ab78      	add	r3, sp, #480	@ 0x1e0
 8018848:	aa68      	add	r2, sp, #416	@ 0x1a0
 801884a:	a958      	add	r1, sp, #352	@ 0x160
 801884c:	a848      	add	r0, sp, #288	@ 0x120
 801884e:	f7fd fc8d 	bl	801616c <group_mac_kernel8_4row_fp_uniweight_reuse_output_input>
      filter += DIM_KER_X * DIM_KER_Y;
      group_mac_kernel8_4row_fp_uniweight_reuse_output_input(&sum_0[3], &sum_1[3], &sum_2[3], &sum_3[3], input_0, input_1, input_2, input_3, filter);
 8018852:	9932      	ldr	r1, [sp, #200]	@ 0xc8
 8018854:	9104      	str	r1, [sp, #16]
 8018856:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8018858:	9303      	str	r3, [sp, #12]
 801885a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801885c:	9202      	str	r2, [sp, #8]
 801885e:	f8cd b004 	str.w	fp, [sp, #4]
 8018862:	9700      	str	r7, [sp, #0]
 8018864:	ab79      	add	r3, sp, #484	@ 0x1e4
 8018866:	aa69      	add	r2, sp, #420	@ 0x1a4
 8018868:	a959      	add	r1, sp, #356	@ 0x164
 801886a:	a849      	add	r0, sp, #292	@ 0x124
 801886c:	f7fd fc7e 	bl	801616c <group_mac_kernel8_4row_fp_uniweight_reuse_output_input>
      filter += DIM_KER_X * DIM_KER_Y;
      group_mac_kernel8_4row_fp_uniweight_reuse_output_input(&sum_0[4], &sum_1[4], &sum_2[4], &sum_3[4], input_0, input_1, input_2, input_3, filter);
 8018870:	9933      	ldr	r1, [sp, #204]	@ 0xcc
 8018872:	9104      	str	r1, [sp, #16]
 8018874:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8018876:	9303      	str	r3, [sp, #12]
 8018878:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801887a:	9202      	str	r2, [sp, #8]
 801887c:	f8cd b004 	str.w	fp, [sp, #4]
 8018880:	9700      	str	r7, [sp, #0]
 8018882:	ab7a      	add	r3, sp, #488	@ 0x1e8
 8018884:	aa6a      	add	r2, sp, #424	@ 0x1a8
 8018886:	a95a      	add	r1, sp, #360	@ 0x168
 8018888:	a84a      	add	r0, sp, #296	@ 0x128
 801888a:	f7fd fc6f 	bl	801616c <group_mac_kernel8_4row_fp_uniweight_reuse_output_input>
      filter += DIM_KER_X * DIM_KER_Y;
      group_mac_kernel8_4row_fp_uniweight_reuse_output_input(&sum_0[5], &sum_1[5], &sum_2[5], &sum_3[5], input_0, input_1, input_2, input_3, filter);
 801888e:	9934      	ldr	r1, [sp, #208]	@ 0xd0
 8018890:	9104      	str	r1, [sp, #16]
 8018892:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8018894:	9303      	str	r3, [sp, #12]
 8018896:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8018898:	9202      	str	r2, [sp, #8]
 801889a:	f8cd b004 	str.w	fp, [sp, #4]
 801889e:	9700      	str	r7, [sp, #0]
 80188a0:	ab7b      	add	r3, sp, #492	@ 0x1ec
 80188a2:	aa6b      	add	r2, sp, #428	@ 0x1ac
 80188a4:	a95b      	add	r1, sp, #364	@ 0x16c
 80188a6:	a84b      	add	r0, sp, #300	@ 0x12c
 80188a8:	f7fd fc60 	bl	801616c <group_mac_kernel8_4row_fp_uniweight_reuse_output_input>
      filter += DIM_KER_X * DIM_KER_Y;
      group_mac_kernel8_4row_fp_uniweight_reuse_output_input(&sum_0[6], &sum_1[6], &sum_2[6], &sum_3[6], input_0, input_1, input_2, input_3, filter);
 80188ac:	993a      	ldr	r1, [sp, #232]	@ 0xe8
 80188ae:	9104      	str	r1, [sp, #16]
 80188b0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80188b2:	9303      	str	r3, [sp, #12]
 80188b4:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80188b6:	9202      	str	r2, [sp, #8]
 80188b8:	f8cd b004 	str.w	fp, [sp, #4]
 80188bc:	9700      	str	r7, [sp, #0]
 80188be:	ab7c      	add	r3, sp, #496	@ 0x1f0
 80188c0:	aa6c      	add	r2, sp, #432	@ 0x1b0
 80188c2:	a95c      	add	r1, sp, #368	@ 0x170
 80188c4:	a84c      	add	r0, sp, #304	@ 0x130
 80188c6:	f7fd fc51 	bl	801616c <group_mac_kernel8_4row_fp_uniweight_reuse_output_input>
      filter += DIM_KER_X * DIM_KER_Y;
      group_mac_kernel8_4row_fp_uniweight_reuse_output_input(&sum_0[7], &sum_1[7], &sum_2[7], &sum_3[7], input_0, input_1, input_2, input_3, filter);
 80188ca:	9935      	ldr	r1, [sp, #212]	@ 0xd4
 80188cc:	9104      	str	r1, [sp, #16]
 80188ce:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80188d0:	9303      	str	r3, [sp, #12]
 80188d2:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80188d4:	9202      	str	r2, [sp, #8]
 80188d6:	f8cd b004 	str.w	fp, [sp, #4]
 80188da:	9700      	str	r7, [sp, #0]
 80188dc:	ab7d      	add	r3, sp, #500	@ 0x1f4
 80188de:	aa6d      	add	r2, sp, #436	@ 0x1b4
 80188e0:	a95d      	add	r1, sp, #372	@ 0x174
 80188e2:	a84d      	add	r0, sp, #308	@ 0x134
 80188e4:	f7fd fc42 	bl	801616c <group_mac_kernel8_4row_fp_uniweight_reuse_output_input>
      filter += DIM_KER_X * DIM_KER_Y;
      group_mac_kernel8_4row_fp_uniweight_reuse_output_input(&sum_0[8], &sum_1[8], &sum_2[8], &sum_3[8], input_0, input_1, input_2, input_3, filter);
 80188e8:	993b      	ldr	r1, [sp, #236]	@ 0xec
 80188ea:	9104      	str	r1, [sp, #16]
 80188ec:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80188ee:	9303      	str	r3, [sp, #12]
 80188f0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80188f2:	9202      	str	r2, [sp, #8]
 80188f4:	f8cd b004 	str.w	fp, [sp, #4]
 80188f8:	9700      	str	r7, [sp, #0]
 80188fa:	ab7e      	add	r3, sp, #504	@ 0x1f8
 80188fc:	aa6e      	add	r2, sp, #440	@ 0x1b8
 80188fe:	a95e      	add	r1, sp, #376	@ 0x178
 8018900:	a84e      	add	r0, sp, #312	@ 0x138
 8018902:	f7fd fc33 	bl	801616c <group_mac_kernel8_4row_fp_uniweight_reuse_output_input>
      filter += DIM_KER_X * DIM_KER_Y;
      group_mac_kernel8_4row_fp_uniweight_reuse_output_input(&sum_0[9], &sum_1[9], &sum_2[9], &sum_3[9], input_0, input_1, input_2, input_3, filter);
 8018906:	9936      	ldr	r1, [sp, #216]	@ 0xd8
 8018908:	9104      	str	r1, [sp, #16]
 801890a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801890c:	9303      	str	r3, [sp, #12]
 801890e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8018910:	9202      	str	r2, [sp, #8]
 8018912:	f8cd b004 	str.w	fp, [sp, #4]
 8018916:	9700      	str	r7, [sp, #0]
 8018918:	ab7f      	add	r3, sp, #508	@ 0x1fc
 801891a:	aa6f      	add	r2, sp, #444	@ 0x1bc
 801891c:	a95f      	add	r1, sp, #380	@ 0x17c
 801891e:	a84f      	add	r0, sp, #316	@ 0x13c
 8018920:	f7fd fc24 	bl	801616c <group_mac_kernel8_4row_fp_uniweight_reuse_output_input>
      filter += DIM_KER_X * DIM_KER_Y;
      group_mac_kernel8_4row_fp_uniweight_reuse_output_input(&sum_0[10], &sum_1[10], &sum_2[10], &sum_3[10], input_0, input_1, input_2, input_3, filter);
 8018924:	993c      	ldr	r1, [sp, #240]	@ 0xf0
 8018926:	9104      	str	r1, [sp, #16]
 8018928:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801892a:	9303      	str	r3, [sp, #12]
 801892c:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801892e:	9202      	str	r2, [sp, #8]
 8018930:	f8cd b004 	str.w	fp, [sp, #4]
 8018934:	9700      	str	r7, [sp, #0]
 8018936:	ab80      	add	r3, sp, #512	@ 0x200
 8018938:	aa70      	add	r2, sp, #448	@ 0x1c0
 801893a:	a960      	add	r1, sp, #384	@ 0x180
 801893c:	a850      	add	r0, sp, #320	@ 0x140
 801893e:	f7fd fc15 	bl	801616c <group_mac_kernel8_4row_fp_uniweight_reuse_output_input>
      filter += DIM_KER_X * DIM_KER_Y;
      group_mac_kernel8_4row_fp_uniweight_reuse_output_input(&sum_0[11], &sum_1[11], &sum_2[11], &sum_3[11], input_0, input_1, input_2, input_3, filter);
 8018942:	9937      	ldr	r1, [sp, #220]	@ 0xdc
 8018944:	9104      	str	r1, [sp, #16]
 8018946:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8018948:	9303      	str	r3, [sp, #12]
 801894a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801894c:	9202      	str	r2, [sp, #8]
 801894e:	f8cd b004 	str.w	fp, [sp, #4]
 8018952:	9700      	str	r7, [sp, #0]
 8018954:	ab81      	add	r3, sp, #516	@ 0x204
 8018956:	aa71      	add	r2, sp, #452	@ 0x1c4
 8018958:	a961      	add	r1, sp, #388	@ 0x184
 801895a:	a851      	add	r0, sp, #324	@ 0x144
 801895c:	f7fd fc06 	bl	801616c <group_mac_kernel8_4row_fp_uniweight_reuse_output_input>
      filter += DIM_KER_X * DIM_KER_Y;
      group_mac_kernel8_4row_fp_uniweight_reuse_output_input(&sum_0[12], &sum_1[12], &sum_2[12], &sum_3[12], input_0, input_1, input_2, input_3, filter);
 8018960:	993d      	ldr	r1, [sp, #244]	@ 0xf4
 8018962:	9104      	str	r1, [sp, #16]
 8018964:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8018966:	9303      	str	r3, [sp, #12]
 8018968:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801896a:	9202      	str	r2, [sp, #8]
 801896c:	f8cd b004 	str.w	fp, [sp, #4]
 8018970:	9700      	str	r7, [sp, #0]
 8018972:	ab82      	add	r3, sp, #520	@ 0x208
 8018974:	aa72      	add	r2, sp, #456	@ 0x1c8
 8018976:	a962      	add	r1, sp, #392	@ 0x188
 8018978:	a852      	add	r0, sp, #328	@ 0x148
 801897a:	f7fd fbf7 	bl	801616c <group_mac_kernel8_4row_fp_uniweight_reuse_output_input>
      filter += DIM_KER_X * DIM_KER_Y;
      group_mac_kernel8_4row_fp_uniweight_reuse_output_input(&sum_0[13], &sum_1[13], &sum_2[13], &sum_3[13], input_0, input_1, input_2, input_3, filter);
 801897e:	9938      	ldr	r1, [sp, #224]	@ 0xe0
 8018980:	9104      	str	r1, [sp, #16]
 8018982:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8018984:	9303      	str	r3, [sp, #12]
 8018986:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8018988:	9202      	str	r2, [sp, #8]
 801898a:	f8cd b004 	str.w	fp, [sp, #4]
 801898e:	9700      	str	r7, [sp, #0]
 8018990:	ab83      	add	r3, sp, #524	@ 0x20c
 8018992:	aa73      	add	r2, sp, #460	@ 0x1cc
 8018994:	a963      	add	r1, sp, #396	@ 0x18c
 8018996:	a853      	add	r0, sp, #332	@ 0x14c
 8018998:	f7fd fbe8 	bl	801616c <group_mac_kernel8_4row_fp_uniweight_reuse_output_input>
      filter += DIM_KER_X * DIM_KER_Y;
      group_mac_kernel8_4row_fp_uniweight_reuse_output_input(&sum_0[14], &sum_1[14], &sum_2[14], &sum_3[14], input_0, input_1, input_2, input_3, filter);
 801899c:	993e      	ldr	r1, [sp, #248]	@ 0xf8
 801899e:	9104      	str	r1, [sp, #16]
 80189a0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80189a2:	9303      	str	r3, [sp, #12]
 80189a4:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80189a6:	9202      	str	r2, [sp, #8]
 80189a8:	f8cd b004 	str.w	fp, [sp, #4]
 80189ac:	9700      	str	r7, [sp, #0]
 80189ae:	ab84      	add	r3, sp, #528	@ 0x210
 80189b0:	aa74      	add	r2, sp, #464	@ 0x1d0
 80189b2:	a964      	add	r1, sp, #400	@ 0x190
 80189b4:	a854      	add	r0, sp, #336	@ 0x150
 80189b6:	f7fd fbd9 	bl	801616c <group_mac_kernel8_4row_fp_uniweight_reuse_output_input>
      filter += DIM_KER_X * DIM_KER_Y;
      group_mac_kernel8_4row_fp_uniweight_reuse_output_input(&sum_0[15], &sum_1[15], &sum_2[15], &sum_3[15], input_0, input_1, input_2, input_3, filter);
 80189ba:	9939      	ldr	r1, [sp, #228]	@ 0xe4
 80189bc:	9104      	str	r1, [sp, #16]
 80189be:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80189c0:	9303      	str	r3, [sp, #12]
 80189c2:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80189c4:	9202      	str	r2, [sp, #8]
 80189c6:	f8cd b004 	str.w	fp, [sp, #4]
 80189ca:	9700      	str	r7, [sp, #0]
 80189cc:	ab85      	add	r3, sp, #532	@ 0x214
 80189ce:	aa75      	add	r2, sp, #468	@ 0x1d4
 80189d0:	a965      	add	r1, sp, #404	@ 0x194
 80189d2:	a855      	add	r0, sp, #340	@ 0x154
 80189d4:	f7fd fbca 	bl	801616c <group_mac_kernel8_4row_fp_uniweight_reuse_output_input>
      filter += DIM_KER_X * DIM_KER_Y;

      /* Calculate outputs */      
      assign_sum_to_group_output_4row16col(out_0, out_1, out_2, out_3, out_4, out_5, out_6, out_7, out_8, out_9, out_10, out_11, out_12, out_13, out_14, out_15, 
 80189d8:	9b2f      	ldr	r3, [sp, #188]	@ 0xbc
 80189da:	9311      	str	r3, [sp, #68]	@ 0x44
 80189dc:	9b9d      	ldr	r3, [sp, #628]	@ 0x274
 80189de:	9310      	str	r3, [sp, #64]	@ 0x40
 80189e0:	ab76      	add	r3, sp, #472	@ 0x1d8
 80189e2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80189e4:	f8cd a038 	str.w	sl, [sp, #56]	@ 0x38
 80189e8:	f8cd 9034 	str.w	r9, [sp, #52]	@ 0x34
 80189ec:	960c      	str	r6, [sp, #48]	@ 0x30
 80189ee:	9e25      	ldr	r6, [sp, #148]	@ 0x94
 80189f0:	960b      	str	r6, [sp, #44]	@ 0x2c
 80189f2:	9f24      	ldr	r7, [sp, #144]	@ 0x90
 80189f4:	970a      	str	r7, [sp, #40]	@ 0x28
 80189f6:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80189f8:	9309      	str	r3, [sp, #36]	@ 0x24
 80189fa:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 80189fc:	9208      	str	r2, [sp, #32]
 80189fe:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8018a00:	9107      	str	r1, [sp, #28]
 8018a02:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 8018a04:	9006      	str	r0, [sp, #24]
 8018a06:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8018a08:	9305      	str	r3, [sp, #20]
 8018a0a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8018a0c:	9204      	str	r2, [sp, #16]
 8018a0e:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8018a10:	9103      	str	r1, [sp, #12]
 8018a12:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8018a14:	9002      	str	r0, [sp, #8]
 8018a16:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8018a18:	9301      	str	r3, [sp, #4]
 8018a1a:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8018a1c:	9200      	str	r2, [sp, #0]
 8018a1e:	eeb0 1a48 	vmov.f32	s2, s16
 8018a22:	eef0 0a68 	vmov.f32	s1, s17
 8018a26:	eeb0 0a49 	vmov.f32	s0, s18
 8018a2a:	f8dd b08c 	ldr.w	fp, [sp, #140]	@ 0x8c
 8018a2e:	465b      	mov	r3, fp
 8018a30:	f8dd a088 	ldr.w	sl, [sp, #136]	@ 0x88
 8018a34:	4652      	mov	r2, sl
 8018a36:	f8dd 9084 	ldr.w	r9, [sp, #132]	@ 0x84
 8018a3a:	4649      	mov	r1, r9
 8018a3c:	f8dd 8080 	ldr.w	r8, [sp, #128]	@ 0x80
 8018a40:	4640      	mov	r0, r8
 8018a42:	f7fe fbb9 	bl	80171b8 <assign_sum_to_group_output_4row16col>
                                    sum_0, sum_1, sum_2, sum_3, output_activation_min, output_activation_max, scales, learning_rate, i_output_depth);
      out_0 += 4; out_1 += 4; out_2 += 4; out_3 += 4; out_4 += 4; out_5 += 4; out_6 += 4; out_7 += 4; 
 8018a46:	4640      	mov	r0, r8
 8018a48:	3004      	adds	r0, #4
 8018a4a:	9020      	str	r0, [sp, #128]	@ 0x80
 8018a4c:	4649      	mov	r1, r9
 8018a4e:	3104      	adds	r1, #4
 8018a50:	9121      	str	r1, [sp, #132]	@ 0x84
 8018a52:	4651      	mov	r1, sl
 8018a54:	3104      	adds	r1, #4
 8018a56:	9122      	str	r1, [sp, #136]	@ 0x88
 8018a58:	4659      	mov	r1, fp
 8018a5a:	3104      	adds	r1, #4
 8018a5c:	9123      	str	r1, [sp, #140]	@ 0x8c
 8018a5e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8018a60:	3204      	adds	r2, #4
 8018a62:	9215      	str	r2, [sp, #84]	@ 0x54
 8018a64:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8018a66:	3304      	adds	r3, #4
 8018a68:	9316      	str	r3, [sp, #88]	@ 0x58
 8018a6a:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8018a6c:	3004      	adds	r0, #4
 8018a6e:	9017      	str	r0, [sp, #92]	@ 0x5c
 8018a70:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8018a72:	3104      	adds	r1, #4
 8018a74:	9118      	str	r1, [sp, #96]	@ 0x60
      out_8 += 4; out_9 += 4; out_10 += 4; out_11 += 4; out_12 += 4; out_13 += 4; out_14 += 4; out_15 += 4; 
 8018a76:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8018a78:	3204      	adds	r2, #4
 8018a7a:	9219      	str	r2, [sp, #100]	@ 0x64
 8018a7c:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8018a7e:	3304      	adds	r3, #4
 8018a80:	931a      	str	r3, [sp, #104]	@ 0x68
 8018a82:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 8018a84:	3004      	adds	r0, #4
 8018a86:	901b      	str	r0, [sp, #108]	@ 0x6c
 8018a88:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8018a8a:	3104      	adds	r1, #4
 8018a8c:	911c      	str	r1, [sp, #112]	@ 0x70
 8018a8e:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8018a90:	3204      	adds	r2, #4
 8018a92:	921d      	str	r2, [sp, #116]	@ 0x74
 8018a94:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8018a96:	3304      	adds	r3, #4
 8018a98:	931e      	str	r3, [sp, #120]	@ 0x78
 8018a9a:	1d3b      	adds	r3, r7, #4
 8018a9c:	9324      	str	r3, [sp, #144]	@ 0x90
 8018a9e:	1d33      	adds	r3, r6, #4
 8018aa0:	9325      	str	r3, [sp, #148]	@ 0x94
    while (group_cnt--) {
 8018aa2:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
      src_3 = input++;
 8018aa4:	f8dd e098 	ldr.w	lr, [sp, #152]	@ 0x98
    while (group_cnt--) {
 8018aa8:	1e5a      	subs	r2, r3, #1
 8018aaa:	b292      	uxth	r2, r2
 8018aac:	921f      	str	r2, [sp, #124]	@ 0x7c
 8018aae:	b1d3      	cbz	r3, 8018ae6 <group_conv_fp_kernel8_stride1_pad0_in8x8_out1x1_uniweight_4row16col_inplace+0x5d6>
      two_column_buffer_0 = &im2col_data[DIM_KER_X * DIM_KER_Y * 16];
 8018ab0:	9b9a      	ldr	r3, [sp, #616]	@ 0x268
 8018ab2:	f503 5780 	add.w	r7, r3, #4096	@ 0x1000
      two_column_buffer_1 = &im2col_data[DIM_KER_X * DIM_KER_Y * 17];
 8018ab6:	f503 5b88 	add.w	fp, r3, #4352	@ 0x1100
      two_column_buffer_2 = &im2col_data[DIM_KER_X * DIM_KER_Y * 18];
 8018aba:	f503 5190 	add.w	r1, r3, #4608	@ 0x1200
 8018abe:	9113      	str	r1, [sp, #76]	@ 0x4c
      two_column_buffer_3 = &im2col_data[DIM_KER_X * DIM_KER_Y * 19];
 8018ac0:	f503 5098 	add.w	r0, r3, #4864	@ 0x1300
 8018ac4:	9014      	str	r0, [sp, #80]	@ 0x50
      src_0 = input++;
 8018ac6:	f10e 0904 	add.w	r9, lr, #4
      src_1 = input++;
 8018aca:	f10e 0808 	add.w	r8, lr, #8
      src_2 = input++;
 8018ace:	f10e 0c0c 	add.w	ip, lr, #12
      src_3 = input++;
 8018ad2:	f10e 0310 	add.w	r3, lr, #16
 8018ad6:	9326      	str	r3, [sp, #152]	@ 0x98
      two_column_buffer_1 = &im2col_data[DIM_KER_X * DIM_KER_Y * 17];
 8018ad8:	465a      	mov	r2, fp
      two_column_buffer_0 = &im2col_data[DIM_KER_X * DIM_KER_Y * 16];
 8018ada:	463b      	mov	r3, r7
      for (i = 0; i < input_height; i++) {
 8018adc:	f04f 0a00 	mov.w	sl, #0
 8018ae0:	9727      	str	r7, [sp, #156]	@ 0x9c
 8018ae2:	9f3f      	ldr	r7, [sp, #252]	@ 0xfc
 8018ae4:	e667      	b.n	80187b6 <group_conv_fp_kernel8_stride1_pad0_in8x8_out1x1_uniweight_4row16col_inplace+0x2a6>
  for (i_output_depth = 0; i_output_depth < output_depth_per_group; i_output_depth += 16) {
 8018ae6:	9e28      	ldr	r6, [sp, #160]	@ 0xa0
 8018ae8:	9b2f      	ldr	r3, [sp, #188]	@ 0xbc
 8018aea:	3310      	adds	r3, #16
 8018aec:	932f      	str	r3, [sp, #188]	@ 0xbc
    const float* src_12 = filter_data++; const float* src_13 = filter_data++; const float* src_14 = filter_data++; const float* src_15 = filter_data++;
 8018aee:	9b41      	ldr	r3, [sp, #260]	@ 0x104
  for (i_output_depth = 0; i_output_depth < output_depth_per_group; i_output_depth += 16) {
 8018af0:	9a2f      	ldr	r2, [sp, #188]	@ 0xbc
 8018af2:	9940      	ldr	r1, [sp, #256]	@ 0x100
 8018af4:	428a      	cmp	r2, r1
 8018af6:	f280 809c 	bge.w	8018c32 <group_conv_fp_kernel8_stride1_pad0_in8x8_out1x1_uniweight_4row16col_inplace+0x722>
    float* two_column_buffer_0 = im2col_data; float* two_column_buffer_1 = &im2col_data[DIM_KER_X * DIM_KER_Y];
 8018afa:	9a9a      	ldr	r2, [sp, #616]	@ 0x268
 8018afc:	f502 7780 	add.w	r7, r2, #256	@ 0x100
 8018b00:	9730      	str	r7, [sp, #192]	@ 0xc0
    float* two_column_buffer_2 = &im2col_data[DIM_KER_X * DIM_KER_Y * 2]; float* two_column_buffer_3 = &im2col_data[DIM_KER_X * DIM_KER_Y * 3];
 8018b02:	f502 7500 	add.w	r5, r2, #512	@ 0x200
 8018b06:	9531      	str	r5, [sp, #196]	@ 0xc4
 8018b08:	f502 7240 	add.w	r2, r2, #768	@ 0x300
 8018b0c:	9232      	str	r2, [sp, #200]	@ 0xc8
    float* two_column_buffer_4 = &im2col_data[DIM_KER_X * DIM_KER_Y * 4]; float* two_column_buffer_5 = &im2col_data[DIM_KER_X * DIM_KER_Y * 5];
 8018b0e:	999a      	ldr	r1, [sp, #616]	@ 0x268
 8018b10:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8018b14:	9133      	str	r1, [sp, #204]	@ 0xcc
 8018b16:	999a      	ldr	r1, [sp, #616]	@ 0x268
 8018b18:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 8018b1c:	9134      	str	r1, [sp, #208]	@ 0xd0
    float* two_column_buffer_6 = &im2col_data[DIM_KER_X * DIM_KER_Y * 6]; float* two_column_buffer_7 = &im2col_data[DIM_KER_X * DIM_KER_Y * 7];
 8018b1e:	989a      	ldr	r0, [sp, #616]	@ 0x268
 8018b20:	f500 60c0 	add.w	r0, r0, #1536	@ 0x600
 8018b24:	4601      	mov	r1, r0
 8018b26:	903a      	str	r0, [sp, #232]	@ 0xe8
 8018b28:	989a      	ldr	r0, [sp, #616]	@ 0x268
 8018b2a:	f500 60e0 	add.w	r0, r0, #1792	@ 0x700
 8018b2e:	9035      	str	r0, [sp, #212]	@ 0xd4
    float* two_column_buffer_8 = &im2col_data[DIM_KER_X * DIM_KER_Y * 8]; float* two_column_buffer_9 = &im2col_data[DIM_KER_X * DIM_KER_Y * 9];
 8018b30:	9c9a      	ldr	r4, [sp, #616]	@ 0x268
 8018b32:	f504 6400 	add.w	r4, r4, #2048	@ 0x800
 8018b36:	4620      	mov	r0, r4
 8018b38:	943b      	str	r4, [sp, #236]	@ 0xec
 8018b3a:	9c9a      	ldr	r4, [sp, #616]	@ 0x268
 8018b3c:	f504 6410 	add.w	r4, r4, #2304	@ 0x900
 8018b40:	9436      	str	r4, [sp, #216]	@ 0xd8
    float* two_column_buffer_10 = &im2col_data[DIM_KER_X * DIM_KER_Y * 10]; float* two_column_buffer_11 = &im2col_data[DIM_KER_X * DIM_KER_Y * 11];
 8018b42:	9d9a      	ldr	r5, [sp, #616]	@ 0x268
 8018b44:	f505 6420 	add.w	r4, r5, #2560	@ 0xa00
 8018b48:	943c      	str	r4, [sp, #240]	@ 0xf0
 8018b4a:	f505 6730 	add.w	r7, r5, #2816	@ 0xb00
 8018b4e:	9737      	str	r7, [sp, #220]	@ 0xdc
    float* two_column_buffer_12 = &im2col_data[DIM_KER_X * DIM_KER_Y * 12]; float* two_column_buffer_13 = &im2col_data[DIM_KER_X * DIM_KER_Y * 13];
 8018b50:	f505 6540 	add.w	r5, r5, #3072	@ 0xc00
 8018b54:	462f      	mov	r7, r5
 8018b56:	953d      	str	r5, [sp, #244]	@ 0xf4
 8018b58:	9d9a      	ldr	r5, [sp, #616]	@ 0x268
 8018b5a:	f505 6550 	add.w	r5, r5, #3328	@ 0xd00
 8018b5e:	9538      	str	r5, [sp, #224]	@ 0xe0
    float* two_column_buffer_14 = &im2col_data[DIM_KER_X * DIM_KER_Y * 14]; float* two_column_buffer_15 = &im2col_data[DIM_KER_X * DIM_KER_Y * 15];
 8018b60:	9a9a      	ldr	r2, [sp, #616]	@ 0x268
 8018b62:	f502 6560 	add.w	r5, r2, #3584	@ 0xe00
 8018b66:	953e      	str	r5, [sp, #248]	@ 0xf8
 8018b68:	f502 6c70 	add.w	ip, r2, #3840	@ 0xf00
 8018b6c:	f8cd c0e4 	str.w	ip, [sp, #228]	@ 0xe4
    const float* src_0 = filter_data++; const float* src_1 = filter_data++; const float* src_2 = filter_data++; const float* src_3 = filter_data++;
 8018b70:	1d1a      	adds	r2, r3, #4
 8018b72:	9229      	str	r2, [sp, #164]	@ 0xa4
 8018b74:	f103 0c08 	add.w	ip, r3, #8
 8018b78:	f8cd c0a8 	str.w	ip, [sp, #168]	@ 0xa8
 8018b7c:	f103 0c0c 	add.w	ip, r3, #12
 8018b80:	f8cd c0ac 	str.w	ip, [sp, #172]	@ 0xac
 8018b84:	f103 0c10 	add.w	ip, r3, #16
 8018b88:	f8cd c04c 	str.w	ip, [sp, #76]	@ 0x4c
    const float* src_4 = filter_data++; const float* src_5 = filter_data++; const float* src_6 = filter_data++; const float* src_7 = filter_data++;
 8018b8c:	f103 0c14 	add.w	ip, r3, #20
 8018b90:	f8cd c050 	str.w	ip, [sp, #80]	@ 0x50
 8018b94:	f103 0b18 	add.w	fp, r3, #24
 8018b98:	f103 0a1c 	add.w	sl, r3, #28
 8018b9c:	f103 0920 	add.w	r9, r3, #32
    const float* src_8 = filter_data++; const float* src_9 = filter_data++; const float* src_10 = filter_data++; const float* src_11 = filter_data++;
 8018ba0:	f103 0824 	add.w	r8, r3, #36	@ 0x24
 8018ba4:	f103 0e28 	add.w	lr, r3, #40	@ 0x28
 8018ba8:	f103 0c2c 	add.w	ip, r3, #44	@ 0x2c
 8018bac:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8018bb0:	9215      	str	r2, [sp, #84]	@ 0x54
    const float* src_12 = filter_data++; const float* src_13 = filter_data++; const float* src_14 = filter_data++; const float* src_15 = filter_data++;
 8018bb2:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8018bb6:	9216      	str	r2, [sp, #88]	@ 0x58
 8018bb8:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8018bbc:	9217      	str	r2, [sp, #92]	@ 0x5c
 8018bbe:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 8018bc2:	9218      	str	r2, [sp, #96]	@ 0x60
 8018bc4:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 8018bc8:	9241      	str	r2, [sp, #260]	@ 0x104
    float* two_column_buffer_14 = &im2col_data[DIM_KER_X * DIM_KER_Y * 14]; float* two_column_buffer_15 = &im2col_data[DIM_KER_X * DIM_KER_Y * 15];
 8018bca:	9a39      	ldr	r2, [sp, #228]	@ 0xe4
 8018bcc:	9228      	str	r2, [sp, #160]	@ 0xa0
 8018bce:	9527      	str	r5, [sp, #156]	@ 0x9c
    float* two_column_buffer_12 = &im2col_data[DIM_KER_X * DIM_KER_Y * 12]; float* two_column_buffer_13 = &im2col_data[DIM_KER_X * DIM_KER_Y * 13];
 8018bd0:	9d38      	ldr	r5, [sp, #224]	@ 0xe0
 8018bd2:	9526      	str	r5, [sp, #152]	@ 0x98
 8018bd4:	9725      	str	r7, [sp, #148]	@ 0x94
    float* two_column_buffer_10 = &im2col_data[DIM_KER_X * DIM_KER_Y * 10]; float* two_column_buffer_11 = &im2col_data[DIM_KER_X * DIM_KER_Y * 11];
 8018bd6:	9f37      	ldr	r7, [sp, #220]	@ 0xdc
 8018bd8:	9724      	str	r7, [sp, #144]	@ 0x90
 8018bda:	9423      	str	r4, [sp, #140]	@ 0x8c
    float* two_column_buffer_8 = &im2col_data[DIM_KER_X * DIM_KER_Y * 8]; float* two_column_buffer_9 = &im2col_data[DIM_KER_X * DIM_KER_Y * 9];
 8018bdc:	9c36      	ldr	r4, [sp, #216]	@ 0xd8
 8018bde:	9422      	str	r4, [sp, #136]	@ 0x88
 8018be0:	9021      	str	r0, [sp, #132]	@ 0x84
    float* two_column_buffer_6 = &im2col_data[DIM_KER_X * DIM_KER_Y * 6]; float* two_column_buffer_7 = &im2col_data[DIM_KER_X * DIM_KER_Y * 7];
 8018be2:	9835      	ldr	r0, [sp, #212]	@ 0xd4
 8018be4:	9020      	str	r0, [sp, #128]	@ 0x80
 8018be6:	911f      	str	r1, [sp, #124]	@ 0x7c
    float* two_column_buffer_4 = &im2col_data[DIM_KER_X * DIM_KER_Y * 4]; float* two_column_buffer_5 = &im2col_data[DIM_KER_X * DIM_KER_Y * 5];
 8018be8:	9934      	ldr	r1, [sp, #208]	@ 0xd0
 8018bea:	911e      	str	r1, [sp, #120]	@ 0x78
 8018bec:	9a33      	ldr	r2, [sp, #204]	@ 0xcc
 8018bee:	921d      	str	r2, [sp, #116]	@ 0x74
    float* two_column_buffer_2 = &im2col_data[DIM_KER_X * DIM_KER_Y * 2]; float* two_column_buffer_3 = &im2col_data[DIM_KER_X * DIM_KER_Y * 3];
 8018bf0:	9a32      	ldr	r2, [sp, #200]	@ 0xc8
 8018bf2:	921c      	str	r2, [sp, #112]	@ 0x70
 8018bf4:	9d31      	ldr	r5, [sp, #196]	@ 0xc4
 8018bf6:	951b      	str	r5, [sp, #108]	@ 0x6c
    float* two_column_buffer_0 = im2col_data; float* two_column_buffer_1 = &im2col_data[DIM_KER_X * DIM_KER_Y];
 8018bf8:	9f30      	ldr	r7, [sp, #192]	@ 0xc0
 8018bfa:	971a      	str	r7, [sp, #104]	@ 0x68
 8018bfc:	9f9a      	ldr	r7, [sp, #616]	@ 0x268
    for (i = 0; i < DIM_KER_X; i++) {
 8018bfe:	2100      	movs	r1, #0
 8018c00:	912e      	str	r1, [sp, #184]	@ 0xb8
 8018c02:	972c      	str	r7, [sp, #176]	@ 0xb0
 8018c04:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8018c06:	f8cd a050 	str.w	sl, [sp, #80]	@ 0x50
 8018c0a:	f8cd e064 	str.w	lr, [sp, #100]	@ 0x64
 8018c0e:	46c6      	mov	lr, r8
 8018c10:	4667      	mov	r7, ip
 8018c12:	46cc      	mov	ip, r9
 8018c14:	f8dd a054 	ldr.w	sl, [sp, #84]	@ 0x54
 8018c18:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8018c1a:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8018c1c:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8018c1e:	9645      	str	r6, [sp, #276]	@ 0x114
 8018c20:	465e      	mov	r6, fp
 8018c22:	f8dd b058 	ldr.w	fp, [sp, #88]	@ 0x58
 8018c26:	4618      	mov	r0, r3
 8018c28:	9b40      	ldr	r3, [sp, #256]	@ 0x100
 8018c2a:	46b9      	mov	r9, r7
 8018c2c:	f8dd 8064 	ldr.w	r8, [sp, #100]	@ 0x64
 8018c30:	e544      	b.n	80186bc <group_conv_fp_kernel8_stride1_pad0_in8x8_out1x1_uniweight_4row16col_inplace+0x1ac>
    }
  }
  
  /* Return to application */
  return STATE_SUCCESS_fp;
}
 8018c32:	2000      	movs	r0, #0
 8018c34:	f50d 7d07 	add.w	sp, sp, #540	@ 0x21c
 8018c38:	ecbd 8b04 	vpop	{d8-d9}
 8018c3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018c40 <group_pointwise_conv_fp_in1x1_out1x1_1row10col_uniweight_int8input_inplace>:
                 const uint16_t input_height, const uint16_t input_width, const uint16_t input_depth, 
                 const float* filter_data, const float* bias_data, 
                 int8_t* output_weight_data, const uint16_t output_height, const uint16_t output_width, const uint16_t output_depth, 
                 const float output_activation_min, const float output_activation_max,
                 float* im2col_data, const uint16_t batches, const uint16_t groups,
                 const float* scales, const float learning_rate) {
 8018c40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018c44:	ed2d 8b0e 	vpush	{d8-d14}
 8018c48:	b0a1      	sub	sp, #132	@ 0x84
 8018c4a:	900b      	str	r0, [sp, #44]	@ 0x2c
 8018c4c:	9b38      	ldr	r3, [sp, #224]	@ 0xe0
 8018c4e:	f8dd 80e8 	ldr.w	r8, [sp, #232]	@ 0xe8
 8018c52:	eef0 8a40 	vmov.f32	s17, s0
 8018c56:	eeb0 8a60 	vmov.f32	s16, s1
 8018c5a:	f8bd 5100 	ldrh.w	r5, [sp, #256]	@ 0x100
 8018c5e:	9f41      	ldr	r7, [sp, #260]	@ 0x104
 8018c60:	eef0 9a41 	vmov.f32	s19, s2
  (void) input_height;
  (void) input_width;

  int group;
  int output_depth_per_group = output_depth / groups;
 8018c64:	f8bd 20f4 	ldrh.w	r2, [sp, #244]	@ 0xf4
 8018c68:	fbb2 f9f5 	udiv	r9, r2, r5

  for (group = 0; group < groups; group++) {
 8018c6c:	2600      	movs	r6, #0
 8018c6e:	4634      	mov	r4, r6
 8018c70:	462e      	mov	r6, r5
 8018c72:	4645      	mov	r5, r8
 8018c74:	e241      	b.n	80190fa <group_pointwise_conv_fp_in1x1_out1x1_1row10col_uniweight_int8input_inplace+0x4ba>
        output_weight_data[(i_ch_out + 4) * groups + group] -= TN_MIN(TN_MAX(sum[4], output_activation_min), output_activation_max) * scales[i_ch_out + 4] * learning_rate;
        output_weight_data[(i_ch_out + 5) * groups + group] -= TN_MIN(TN_MAX(sum[5], output_activation_min), output_activation_max) * scales[i_ch_out + 5] * learning_rate;
        output_weight_data[(i_ch_out + 6) * groups + group] -= TN_MIN(TN_MAX(sum[6], output_activation_min), output_activation_max) * scales[i_ch_out + 6] * learning_rate;
        output_weight_data[(i_ch_out + 7) * groups + group] -= TN_MIN(TN_MAX(sum[7], output_activation_min), output_activation_max) * scales[i_ch_out + 7] * learning_rate;
        output_weight_data[(i_ch_out + 8) * groups + group] -= TN_MIN(TN_MAX(sum[8], output_activation_min), output_activation_max) * scales[i_ch_out + 8] * learning_rate;
        output_weight_data[(i_ch_out + 9) * groups + group] -= TN_MIN(TN_MAX(sum[9], output_activation_min), output_activation_max) * scales[i_ch_out + 9] * learning_rate;
 8018c76:	eb07 020b 	add.w	r2, r7, fp
 8018c7a:	edd2 6a00 	vldr	s13, [r2]
 8018c7e:	ee26 7a87 	vmul.f32	s14, s13, s14
 8018c82:	ee27 7a29 	vmul.f32	s14, s14, s19
 8018c86:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8018c8a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8018c8e:	ee17 2a90 	vmov	r2, s15
 8018c92:	54ea      	strb	r2, [r5, r3]
      while (col_count_div10--) {
 8018c94:	4649      	mov	r1, r9
 8018c96:	f101 39ff 	add.w	r9, r1, #4294967295	@ 0xffffffff
 8018c9a:	fa1f f989 	uxth.w	r9, r9
 8018c9e:	2900      	cmp	r1, #0
 8018ca0:	f000 81b2 	beq.w	8019008 <group_pointwise_conv_fp_in1x1_out1x1_1row10col_uniweight_int8input_inplace+0x3c8>
        float sum[10] = {};
 8018ca4:	2228      	movs	r2, #40	@ 0x28
 8018ca6:	2100      	movs	r1, #0
 8018ca8:	a816      	add	r0, sp, #88	@ 0x58
 8018caa:	f00b f807 	bl	8023cbc <memset>
        sum[0] += input_0 * filter[0];
 8018cae:	ee6e 2a89 	vmul.f32	s5, s29, s18
 8018cb2:	eddf 7ad4 	vldr	s15, [pc, #848]	@ 8019004 <group_pointwise_conv_fp_in1x1_out1x1_1row10col_uniweight_int8input_inplace+0x3c4>
 8018cb6:	ee72 2aa7 	vadd.f32	s5, s5, s15
 8018cba:	edcd 2a16 	vstr	s5, [sp, #88]	@ 0x58
        sum[1] += input_0 * filter[1];
 8018cbe:	ee2e 3a09 	vmul.f32	s6, s28, s18
 8018cc2:	ee33 3a27 	vadd.f32	s6, s6, s15
 8018cc6:	ed8d 3a17 	vstr	s6, [sp, #92]	@ 0x5c
        sum[2] += input_0 * filter[2];
 8018cca:	ee6d 3a89 	vmul.f32	s7, s27, s18
 8018cce:	ee73 3aa7 	vadd.f32	s7, s7, s15
 8018cd2:	edcd 3a18 	vstr	s7, [sp, #96]	@ 0x60
        sum[3] += input_0 * filter[3];
 8018cd6:	ee2d 4a09 	vmul.f32	s8, s26, s18
 8018cda:	ee34 4a27 	vadd.f32	s8, s8, s15
 8018cde:	ed8d 4a19 	vstr	s8, [sp, #100]	@ 0x64
        sum[4] += input_0 * filter[4];
 8018ce2:	ee6c 4a89 	vmul.f32	s9, s25, s18
 8018ce6:	ee74 4aa7 	vadd.f32	s9, s9, s15
 8018cea:	edcd 4a1a 	vstr	s9, [sp, #104]	@ 0x68
        sum[5] += input_0 * filter[5];
 8018cee:	ee2c 5a09 	vmul.f32	s10, s24, s18
 8018cf2:	ee35 5a27 	vadd.f32	s10, s10, s15
 8018cf6:	ed8d 5a1b 	vstr	s10, [sp, #108]	@ 0x6c
        sum[6] += input_0 * filter[6];
 8018cfa:	ee6b 5a89 	vmul.f32	s11, s23, s18
 8018cfe:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8018d02:	edcd 5a1c 	vstr	s11, [sp, #112]	@ 0x70
        sum[7] += input_0 * filter[7];
 8018d06:	ee2b 6a09 	vmul.f32	s12, s22, s18
 8018d0a:	ee36 6a27 	vadd.f32	s12, s12, s15
 8018d0e:	ed8d 6a1d 	vstr	s12, [sp, #116]	@ 0x74
        sum[8] += input_0 * filter[8];
 8018d12:	ee6a 6a89 	vmul.f32	s13, s21, s18
 8018d16:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8018d1a:	edcd 6a1e 	vstr	s13, [sp, #120]	@ 0x78
        sum[9] += input_0 * filter[9];
 8018d1e:	ee2a 7a09 	vmul.f32	s14, s20, s18
 8018d22:	ee37 7a27 	vadd.f32	s14, s14, s15
 8018d26:	ed8d 7a1f 	vstr	s14, [sp, #124]	@ 0x7c
        output_weight_data[i_ch_out + group] -= TN_MIN(TN_MAX(sum[0], output_activation_min), output_activation_max) * scales[i_ch_out] * learning_rate;
 8018d2a:	eb04 0208 	add.w	r2, r4, r8
 8018d2e:	56ab      	ldrsb	r3, [r5, r2]
 8018d30:	ee07 3a90 	vmov	s15, r3
 8018d34:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018d38:	eef4 2ae8 	vcmpe.f32	s5, s17
 8018d3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018d40:	dc01      	bgt.n	8018d46 <group_pointwise_conv_fp_in1x1_out1x1_1row10col_uniweight_int8input_inplace+0x106>
 8018d42:	eef0 2a68 	vmov.f32	s5, s17
 8018d46:	eef4 2ac8 	vcmpe.f32	s5, s16
 8018d4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018d4e:	d401      	bmi.n	8018d54 <group_pointwise_conv_fp_in1x1_out1x1_1row10col_uniweight_int8input_inplace+0x114>
 8018d50:	eef0 2a48 	vmov.f32	s5, s16
 8018d54:	9b01      	ldr	r3, [sp, #4]
 8018d56:	18fb      	adds	r3, r7, r3
 8018d58:	ed93 2a00 	vldr	s4, [r3]
 8018d5c:	ee62 2a22 	vmul.f32	s5, s4, s5
 8018d60:	ee62 2aa9 	vmul.f32	s5, s5, s19
 8018d64:	ee77 7ae2 	vsub.f32	s15, s15, s5
 8018d68:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8018d6c:	ee17 3a90 	vmov	r3, s15
 8018d70:	54ab      	strb	r3, [r5, r2]
        output_weight_data[(i_ch_out + 1) * groups + group] -= TN_MIN(TN_MAX(sum[1], output_activation_min), output_activation_max) * scales[i_ch_out + 1] * learning_rate;
 8018d72:	fb08 6306 	mla	r3, r8, r6, r6
 8018d76:	4423      	add	r3, r4
 8018d78:	56ea      	ldrsb	r2, [r5, r3]
 8018d7a:	ee07 2a90 	vmov	s15, r2
 8018d7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018d82:	eeb4 3ae8 	vcmpe.f32	s6, s17
 8018d86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018d8a:	dc01      	bgt.n	8018d90 <group_pointwise_conv_fp_in1x1_out1x1_1row10col_uniweight_int8input_inplace+0x150>
 8018d8c:	eeb0 3a68 	vmov.f32	s6, s17
 8018d90:	eeb4 3ac8 	vcmpe.f32	s6, s16
 8018d94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018d98:	d401      	bmi.n	8018d9e <group_pointwise_conv_fp_in1x1_out1x1_1row10col_uniweight_int8input_inplace+0x15e>
 8018d9a:	eeb0 3a48 	vmov.f32	s6, s16
 8018d9e:	9a02      	ldr	r2, [sp, #8]
 8018da0:	18ba      	adds	r2, r7, r2
 8018da2:	edd2 2a00 	vldr	s5, [r2]
 8018da6:	ee22 3a83 	vmul.f32	s6, s5, s6
 8018daa:	ee23 3a29 	vmul.f32	s6, s6, s19
 8018dae:	ee77 7ac3 	vsub.f32	s15, s15, s6
 8018db2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8018db6:	ee17 2a90 	vmov	r2, s15
 8018dba:	54ea      	strb	r2, [r5, r3]
        output_weight_data[(i_ch_out + 2) * groups + group] -= TN_MIN(TN_MAX(sum[2], output_activation_min), output_activation_max) * scales[i_ch_out + 2] * learning_rate;
 8018dbc:	f108 0302 	add.w	r3, r8, #2
 8018dc0:	fb06 4303 	mla	r3, r6, r3, r4
 8018dc4:	56ea      	ldrsb	r2, [r5, r3]
 8018dc6:	ee07 2a90 	vmov	s15, r2
 8018dca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018dce:	eef4 3ae8 	vcmpe.f32	s7, s17
 8018dd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018dd6:	dc01      	bgt.n	8018ddc <group_pointwise_conv_fp_in1x1_out1x1_1row10col_uniweight_int8input_inplace+0x19c>
 8018dd8:	eef0 3a68 	vmov.f32	s7, s17
 8018ddc:	eef4 3ac8 	vcmpe.f32	s7, s16
 8018de0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018de4:	d401      	bmi.n	8018dea <group_pointwise_conv_fp_in1x1_out1x1_1row10col_uniweight_int8input_inplace+0x1aa>
 8018de6:	eef0 3a48 	vmov.f32	s7, s16
 8018dea:	9a03      	ldr	r2, [sp, #12]
 8018dec:	18ba      	adds	r2, r7, r2
 8018dee:	ed92 3a00 	vldr	s6, [r2]
 8018df2:	ee63 3a23 	vmul.f32	s7, s6, s7
 8018df6:	ee63 3aa9 	vmul.f32	s7, s7, s19
 8018dfa:	ee77 7ae3 	vsub.f32	s15, s15, s7
 8018dfe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8018e02:	ee17 2a90 	vmov	r2, s15
 8018e06:	54ea      	strb	r2, [r5, r3]
        output_weight_data[(i_ch_out + 3) * groups + group] -= TN_MIN(TN_MAX(sum[3], output_activation_min), output_activation_max) * scales[i_ch_out + 3] * learning_rate;
 8018e08:	f108 0303 	add.w	r3, r8, #3
 8018e0c:	fb06 4303 	mla	r3, r6, r3, r4
 8018e10:	56ea      	ldrsb	r2, [r5, r3]
 8018e12:	ee07 2a90 	vmov	s15, r2
 8018e16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018e1a:	eeb4 4ae8 	vcmpe.f32	s8, s17
 8018e1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018e22:	dc01      	bgt.n	8018e28 <group_pointwise_conv_fp_in1x1_out1x1_1row10col_uniweight_int8input_inplace+0x1e8>
 8018e24:	eeb0 4a68 	vmov.f32	s8, s17
 8018e28:	eeb4 4ac8 	vcmpe.f32	s8, s16
 8018e2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018e30:	d401      	bmi.n	8018e36 <group_pointwise_conv_fp_in1x1_out1x1_1row10col_uniweight_int8input_inplace+0x1f6>
 8018e32:	eeb0 4a48 	vmov.f32	s8, s16
 8018e36:	9a04      	ldr	r2, [sp, #16]
 8018e38:	18ba      	adds	r2, r7, r2
 8018e3a:	edd2 3a00 	vldr	s7, [r2]
 8018e3e:	ee23 4a84 	vmul.f32	s8, s7, s8
 8018e42:	ee24 4a29 	vmul.f32	s8, s8, s19
 8018e46:	ee77 7ac4 	vsub.f32	s15, s15, s8
 8018e4a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8018e4e:	ee17 2a90 	vmov	r2, s15
 8018e52:	54ea      	strb	r2, [r5, r3]
        output_weight_data[(i_ch_out + 4) * groups + group] -= TN_MIN(TN_MAX(sum[4], output_activation_min), output_activation_max) * scales[i_ch_out + 4] * learning_rate;
 8018e54:	f108 0304 	add.w	r3, r8, #4
 8018e58:	fb06 4303 	mla	r3, r6, r3, r4
 8018e5c:	56ea      	ldrsb	r2, [r5, r3]
 8018e5e:	ee07 2a90 	vmov	s15, r2
 8018e62:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018e66:	eef4 4ae8 	vcmpe.f32	s9, s17
 8018e6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018e6e:	dc01      	bgt.n	8018e74 <group_pointwise_conv_fp_in1x1_out1x1_1row10col_uniweight_int8input_inplace+0x234>
 8018e70:	eef0 4a68 	vmov.f32	s9, s17
 8018e74:	eef4 4ac8 	vcmpe.f32	s9, s16
 8018e78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018e7c:	d401      	bmi.n	8018e82 <group_pointwise_conv_fp_in1x1_out1x1_1row10col_uniweight_int8input_inplace+0x242>
 8018e7e:	eef0 4a48 	vmov.f32	s9, s16
 8018e82:	9a05      	ldr	r2, [sp, #20]
 8018e84:	18ba      	adds	r2, r7, r2
 8018e86:	ed92 4a00 	vldr	s8, [r2]
 8018e8a:	ee64 4a24 	vmul.f32	s9, s8, s9
 8018e8e:	ee64 4aa9 	vmul.f32	s9, s9, s19
 8018e92:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8018e96:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8018e9a:	ee17 2a90 	vmov	r2, s15
 8018e9e:	54ea      	strb	r2, [r5, r3]
        output_weight_data[(i_ch_out + 5) * groups + group] -= TN_MIN(TN_MAX(sum[5], output_activation_min), output_activation_max) * scales[i_ch_out + 5] * learning_rate;
 8018ea0:	f108 0305 	add.w	r3, r8, #5
 8018ea4:	fb06 4303 	mla	r3, r6, r3, r4
 8018ea8:	56ea      	ldrsb	r2, [r5, r3]
 8018eaa:	ee07 2a90 	vmov	s15, r2
 8018eae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018eb2:	eeb4 5ae8 	vcmpe.f32	s10, s17
 8018eb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018eba:	dc01      	bgt.n	8018ec0 <group_pointwise_conv_fp_in1x1_out1x1_1row10col_uniweight_int8input_inplace+0x280>
 8018ebc:	eeb0 5a68 	vmov.f32	s10, s17
 8018ec0:	eeb4 5ac8 	vcmpe.f32	s10, s16
 8018ec4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018ec8:	d401      	bmi.n	8018ece <group_pointwise_conv_fp_in1x1_out1x1_1row10col_uniweight_int8input_inplace+0x28e>
 8018eca:	eeb0 5a48 	vmov.f32	s10, s16
 8018ece:	9a06      	ldr	r2, [sp, #24]
 8018ed0:	18ba      	adds	r2, r7, r2
 8018ed2:	edd2 4a00 	vldr	s9, [r2]
 8018ed6:	ee24 5a85 	vmul.f32	s10, s9, s10
 8018eda:	ee25 5a29 	vmul.f32	s10, s10, s19
 8018ede:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8018ee2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8018ee6:	ee17 2a90 	vmov	r2, s15
 8018eea:	54ea      	strb	r2, [r5, r3]
        output_weight_data[(i_ch_out + 6) * groups + group] -= TN_MIN(TN_MAX(sum[6], output_activation_min), output_activation_max) * scales[i_ch_out + 6] * learning_rate;
 8018eec:	f108 0306 	add.w	r3, r8, #6
 8018ef0:	fb06 4303 	mla	r3, r6, r3, r4
 8018ef4:	56ea      	ldrsb	r2, [r5, r3]
 8018ef6:	ee07 2a90 	vmov	s15, r2
 8018efa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018efe:	eef4 5ae8 	vcmpe.f32	s11, s17
 8018f02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018f06:	dc01      	bgt.n	8018f0c <group_pointwise_conv_fp_in1x1_out1x1_1row10col_uniweight_int8input_inplace+0x2cc>
 8018f08:	eef0 5a68 	vmov.f32	s11, s17
 8018f0c:	eef4 5ac8 	vcmpe.f32	s11, s16
 8018f10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018f14:	d401      	bmi.n	8018f1a <group_pointwise_conv_fp_in1x1_out1x1_1row10col_uniweight_int8input_inplace+0x2da>
 8018f16:	eef0 5a48 	vmov.f32	s11, s16
 8018f1a:	9a07      	ldr	r2, [sp, #28]
 8018f1c:	18ba      	adds	r2, r7, r2
 8018f1e:	ed92 5a00 	vldr	s10, [r2]
 8018f22:	ee65 5a25 	vmul.f32	s11, s10, s11
 8018f26:	ee65 5aa9 	vmul.f32	s11, s11, s19
 8018f2a:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8018f2e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8018f32:	ee17 2a90 	vmov	r2, s15
 8018f36:	54ea      	strb	r2, [r5, r3]
        output_weight_data[(i_ch_out + 7) * groups + group] -= TN_MIN(TN_MAX(sum[7], output_activation_min), output_activation_max) * scales[i_ch_out + 7] * learning_rate;
 8018f38:	f108 0307 	add.w	r3, r8, #7
 8018f3c:	fb06 4303 	mla	r3, r6, r3, r4
 8018f40:	56ea      	ldrsb	r2, [r5, r3]
 8018f42:	ee07 2a90 	vmov	s15, r2
 8018f46:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018f4a:	eeb4 6ae8 	vcmpe.f32	s12, s17
 8018f4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018f52:	dc01      	bgt.n	8018f58 <group_pointwise_conv_fp_in1x1_out1x1_1row10col_uniweight_int8input_inplace+0x318>
 8018f54:	eeb0 6a68 	vmov.f32	s12, s17
 8018f58:	eeb4 6ac8 	vcmpe.f32	s12, s16
 8018f5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018f60:	d401      	bmi.n	8018f66 <group_pointwise_conv_fp_in1x1_out1x1_1row10col_uniweight_int8input_inplace+0x326>
 8018f62:	eeb0 6a48 	vmov.f32	s12, s16
 8018f66:	eb07 020a 	add.w	r2, r7, sl
 8018f6a:	edd2 5a00 	vldr	s11, [r2]
 8018f6e:	ee25 6a86 	vmul.f32	s12, s11, s12
 8018f72:	ee26 6a29 	vmul.f32	s12, s12, s19
 8018f76:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8018f7a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8018f7e:	ee17 2a90 	vmov	r2, s15
 8018f82:	54ea      	strb	r2, [r5, r3]
        output_weight_data[(i_ch_out + 8) * groups + group] -= TN_MIN(TN_MAX(sum[8], output_activation_min), output_activation_max) * scales[i_ch_out + 8] * learning_rate;
 8018f84:	f108 0308 	add.w	r3, r8, #8
 8018f88:	fb06 4303 	mla	r3, r6, r3, r4
 8018f8c:	56ea      	ldrsb	r2, [r5, r3]
 8018f8e:	ee07 2a90 	vmov	s15, r2
 8018f92:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018f96:	eef4 6ae8 	vcmpe.f32	s13, s17
 8018f9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018f9e:	dc01      	bgt.n	8018fa4 <group_pointwise_conv_fp_in1x1_out1x1_1row10col_uniweight_int8input_inplace+0x364>
 8018fa0:	eef0 6a68 	vmov.f32	s13, s17
 8018fa4:	eef4 6ac8 	vcmpe.f32	s13, s16
 8018fa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018fac:	d401      	bmi.n	8018fb2 <group_pointwise_conv_fp_in1x1_out1x1_1row10col_uniweight_int8input_inplace+0x372>
 8018fae:	eef0 6a48 	vmov.f32	s13, s16
 8018fb2:	9a08      	ldr	r2, [sp, #32]
 8018fb4:	18ba      	adds	r2, r7, r2
 8018fb6:	ed92 6a00 	vldr	s12, [r2]
 8018fba:	ee66 6a26 	vmul.f32	s13, s12, s13
 8018fbe:	ee66 6aa9 	vmul.f32	s13, s13, s19
 8018fc2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8018fc6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8018fca:	ee17 2a90 	vmov	r2, s15
 8018fce:	54ea      	strb	r2, [r5, r3]
        output_weight_data[(i_ch_out + 9) * groups + group] -= TN_MIN(TN_MAX(sum[9], output_activation_min), output_activation_max) * scales[i_ch_out + 9] * learning_rate;
 8018fd0:	f108 0309 	add.w	r3, r8, #9
 8018fd4:	fb06 4303 	mla	r3, r6, r3, r4
 8018fd8:	56ea      	ldrsb	r2, [r5, r3]
 8018fda:	ee07 2a90 	vmov	s15, r2
 8018fde:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018fe2:	eeb4 7ae8 	vcmpe.f32	s14, s17
 8018fe6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018fea:	dc01      	bgt.n	8018ff0 <group_pointwise_conv_fp_in1x1_out1x1_1row10col_uniweight_int8input_inplace+0x3b0>
 8018fec:	eeb0 7a68 	vmov.f32	s14, s17
 8018ff0:	eeb4 7ac8 	vcmpe.f32	s14, s16
 8018ff4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018ff8:	f53f ae3d 	bmi.w	8018c76 <group_pointwise_conv_fp_in1x1_out1x1_1row10col_uniweight_int8input_inplace+0x36>
 8018ffc:	eeb0 7a48 	vmov.f32	s14, s16
 8019000:	e639      	b.n	8018c76 <group_pointwise_conv_fp_in1x1_out1x1_1row10col_uniweight_int8input_inplace+0x36>
 8019002:	bf00      	nop
 8019004:	00000000 	.word	0x00000000
    for (i_ch_out = 0; i_ch_out < output_depth_per_group; i_ch_out+=10) {
 8019008:	f8dd 9024 	ldr.w	r9, [sp, #36]	@ 0x24
 801900c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801900e:	f108 080a 	add.w	r8, r8, #10
 8019012:	45c8      	cmp	r8, r9
 8019014:	da70      	bge.n	80190f8 <group_pointwise_conv_fp_in1x1_out1x1_1row10col_uniweight_int8input_inplace+0x4b8>
      const float input_0 = (float)input_data[group];
 8019016:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8019018:	5712      	ldrsb	r2, [r2, r4]
 801901a:	ee09 2a10 	vmov	s18, r2
 801901e:	eeb8 9ac9 	vcvt.f32.s32	s18, s18
      const float filter[10] = {filter_data[i_ch_out], filter_data[i_ch_out + 1], filter_data[i_ch_out + 2], filter_data[i_ch_out + 3], filter_data[i_ch_out + 4], 
 8019022:	ea4f 0288 	mov.w	r2, r8, lsl #2
 8019026:	9201      	str	r2, [sp, #4]
 8019028:	eb03 0188 	add.w	r1, r3, r8, lsl #2
 801902c:	edd1 ea00 	vldr	s29, [r1]
 8019030:	edcd ea0c 	vstr	s29, [sp, #48]	@ 0x30
 8019034:	f108 0101 	add.w	r1, r8, #1
 8019038:	008a      	lsls	r2, r1, #2
 801903a:	9202      	str	r2, [sp, #8]
 801903c:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8019040:	ed91 ea00 	vldr	s28, [r1]
 8019044:	ed8d ea0d 	vstr	s28, [sp, #52]	@ 0x34
 8019048:	f108 0102 	add.w	r1, r8, #2
 801904c:	008a      	lsls	r2, r1, #2
 801904e:	9203      	str	r2, [sp, #12]
 8019050:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8019054:	edd1 da00 	vldr	s27, [r1]
 8019058:	edcd da0e 	vstr	s27, [sp, #56]	@ 0x38
 801905c:	f108 0103 	add.w	r1, r8, #3
 8019060:	008a      	lsls	r2, r1, #2
 8019062:	9204      	str	r2, [sp, #16]
 8019064:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8019068:	ed91 da00 	vldr	s26, [r1]
 801906c:	ed8d da0f 	vstr	s26, [sp, #60]	@ 0x3c
 8019070:	f108 0104 	add.w	r1, r8, #4
 8019074:	008a      	lsls	r2, r1, #2
 8019076:	9205      	str	r2, [sp, #20]
 8019078:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 801907c:	edd1 ca00 	vldr	s25, [r1]
 8019080:	edcd ca10 	vstr	s25, [sp, #64]	@ 0x40
                      filter_data[i_ch_out + 5], filter_data[i_ch_out + 6], filter_data[i_ch_out + 7], filter_data[i_ch_out + 8], filter_data[i_ch_out + 9]};
 8019084:	f108 0105 	add.w	r1, r8, #5
 8019088:	008a      	lsls	r2, r1, #2
 801908a:	9206      	str	r2, [sp, #24]
 801908c:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8019090:	ed91 ca00 	vldr	s24, [r1]
      const float filter[10] = {filter_data[i_ch_out], filter_data[i_ch_out + 1], filter_data[i_ch_out + 2], filter_data[i_ch_out + 3], filter_data[i_ch_out + 4], 
 8019094:	ed8d ca11 	vstr	s24, [sp, #68]	@ 0x44
                      filter_data[i_ch_out + 5], filter_data[i_ch_out + 6], filter_data[i_ch_out + 7], filter_data[i_ch_out + 8], filter_data[i_ch_out + 9]};
 8019098:	f108 0106 	add.w	r1, r8, #6
 801909c:	008a      	lsls	r2, r1, #2
 801909e:	9207      	str	r2, [sp, #28]
 80190a0:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 80190a4:	edd1 ba00 	vldr	s23, [r1]
      const float filter[10] = {filter_data[i_ch_out], filter_data[i_ch_out + 1], filter_data[i_ch_out + 2], filter_data[i_ch_out + 3], filter_data[i_ch_out + 4], 
 80190a8:	edcd ba12 	vstr	s23, [sp, #72]	@ 0x48
                      filter_data[i_ch_out + 5], filter_data[i_ch_out + 6], filter_data[i_ch_out + 7], filter_data[i_ch_out + 8], filter_data[i_ch_out + 9]};
 80190ac:	f108 0107 	add.w	r1, r8, #7
 80190b0:	ea4f 0a81 	mov.w	sl, r1, lsl #2
 80190b4:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 80190b8:	ed91 ba00 	vldr	s22, [r1]
      const float filter[10] = {filter_data[i_ch_out], filter_data[i_ch_out + 1], filter_data[i_ch_out + 2], filter_data[i_ch_out + 3], filter_data[i_ch_out + 4], 
 80190bc:	ed8d ba13 	vstr	s22, [sp, #76]	@ 0x4c
                      filter_data[i_ch_out + 5], filter_data[i_ch_out + 6], filter_data[i_ch_out + 7], filter_data[i_ch_out + 8], filter_data[i_ch_out + 9]};
 80190c0:	f108 0108 	add.w	r1, r8, #8
 80190c4:	008a      	lsls	r2, r1, #2
 80190c6:	9208      	str	r2, [sp, #32]
 80190c8:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 80190cc:	edd1 aa00 	vldr	s21, [r1]
      const float filter[10] = {filter_data[i_ch_out], filter_data[i_ch_out + 1], filter_data[i_ch_out + 2], filter_data[i_ch_out + 3], filter_data[i_ch_out + 4], 
 80190d0:	edcd aa14 	vstr	s21, [sp, #80]	@ 0x50
                      filter_data[i_ch_out + 5], filter_data[i_ch_out + 6], filter_data[i_ch_out + 7], filter_data[i_ch_out + 8], filter_data[i_ch_out + 9]};
 80190d4:	f108 0109 	add.w	r1, r8, #9
 80190d8:	ea4f 0b81 	mov.w	fp, r1, lsl #2
 80190dc:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 80190e0:	ed91 aa00 	vldr	s20, [r1]
      const float filter[10] = {filter_data[i_ch_out], filter_data[i_ch_out + 1], filter_data[i_ch_out + 2], filter_data[i_ch_out + 3], filter_data[i_ch_out + 4], 
 80190e4:	ed8d aa15 	vstr	s20, [sp, #84]	@ 0x54
      uint16_t col_count_div10 = (output_depth_per_group * DIM_KER_X * DIM_KER_Y) / 10;
 80190e8:	4909      	ldr	r1, [pc, #36]	@ (8019110 <group_pointwise_conv_fp_in1x1_out1x1_1row10col_uniweight_int8input_inplace+0x4d0>)
 80190ea:	fba1 0109 	umull	r0, r1, r1, r9
 80190ee:	08c9      	lsrs	r1, r1, #3
      while (col_count_div10--) {
 80190f0:	f8cd 9024 	str.w	r9, [sp, #36]	@ 0x24
 80190f4:	930a      	str	r3, [sp, #40]	@ 0x28
 80190f6:	e5ce      	b.n	8018c96 <group_pointwise_conv_fp_in1x1_out1x1_1row10col_uniweight_int8input_inplace+0x56>
  for (group = 0; group < groups; group++) {
 80190f8:	3401      	adds	r4, #1
 80190fa:	42a6      	cmp	r6, r4
 80190fc:	dd02      	ble.n	8019104 <group_pointwise_conv_fp_in1x1_out1x1_1row10col_uniweight_int8input_inplace+0x4c4>
    for (i_ch_out = 0; i_ch_out < output_depth_per_group; i_ch_out+=10) {
 80190fe:	f04f 0800 	mov.w	r8, #0
 8019102:	e786      	b.n	8019012 <group_pointwise_conv_fp_in1x1_out1x1_1row10col_uniweight_int8input_inplace+0x3d2>
    }
  }

  /* Return to application */
  return STATE_SUCCESS_fp;
}
 8019104:	2000      	movs	r0, #0
 8019106:	b021      	add	sp, #132	@ 0x84
 8019108:	ecbd 8b0e 	vpop	{d8-d14}
 801910c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019110:	cccccccd 	.word	0xcccccccd

08019114 <LogSoftmax>:

#include "tinyengine_function_fp.h"
#include "tinyengine_function.h"

tinyengine_status_fp LogSoftmax(const float* input_data, const uint16_t input_height, const uint16_t input_width, const uint16_t input_depth, 
                       float* output_data, const uint16_t output_height, const uint16_t output_width, const uint16_t output_depth) {
 8019114:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019118:	ed2d 8b02 	vpush	{d8}
 801911c:	b083      	sub	sp, #12
 801911e:	4682      	mov	sl, r0
 8019120:	f8dd b038 	ldr.w	fp, [sp, #56]	@ 0x38
  const int outer_size = input_height * input_width;
 8019124:	fb02 f201 	mul.w	r2, r2, r1
 8019128:	9201      	str	r2, [sp, #4]
  const int depth = TN_MIN(input_depth, output_depth);
 801912a:	f8bd 4044 	ldrh.w	r4, [sp, #68]	@ 0x44
 801912e:	429c      	cmp	r4, r3
 8019130:	bf28      	it	cs
 8019132:	461c      	movcs	r4, r3

  for (int i = 0; i < outer_size; ++i) {
 8019134:	2700      	movs	r7, #0
 8019136:	e053      	b.n	80191e0 <LogSoftmax+0xcc>
    float max = FLT_MIN;
    for (int c = 0; c < depth; ++c) {
 8019138:	3301      	adds	r3, #1
 801913a:	42a3      	cmp	r3, r4
 801913c:	da0d      	bge.n	801915a <LogSoftmax+0x46>
      max = TN_MAX(max, input_data[i * depth + c]);
 801913e:	fb04 3207 	mla	r2, r4, r7, r3
 8019142:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
 8019146:	edd2 7a00 	vldr	s15, [r2]
 801914a:	eef4 7ac8 	vcmpe.f32	s15, s16
 801914e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019152:	d4f1      	bmi.n	8019138 <LogSoftmax+0x24>
 8019154:	eeb0 8a67 	vmov.f32	s16, s15
 8019158:	e7ee      	b.n	8019138 <LogSoftmax+0x24>
    }

    float sum = 0.f;
    for (int c = 0; c < depth; ++c) {
 801915a:	2600      	movs	r6, #0
    float sum = 0.f;
 801915c:	2500      	movs	r5, #0
 801915e:	e01c      	b.n	801919a <LogSoftmax+0x86>
      sum += exp(input_data[i * depth + c] - max);
 8019160:	fb04 6307 	mla	r3, r4, r7, r6
 8019164:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
 8019168:	edd3 7a00 	vldr	s15, [r3]
 801916c:	ee77 7ac8 	vsub.f32	s15, s15, s16
 8019170:	ee17 0a90 	vmov	r0, s15
 8019174:	f7ed fa00 	bl	8006578 <__aeabi_f2d>
 8019178:	ec41 0b10 	vmov	d0, r0, r1
 801917c:	f009 f998 	bl	80224b0 <exp>
 8019180:	ec59 8b10 	vmov	r8, r9, d0
 8019184:	4628      	mov	r0, r5
 8019186:	f7ed f9f7 	bl	8006578 <__aeabi_f2d>
 801918a:	4642      	mov	r2, r8
 801918c:	464b      	mov	r3, r9
 801918e:	f7ed f895 	bl	80062bc <__adddf3>
 8019192:	f7ed fd21 	bl	8006bd8 <__aeabi_d2f>
 8019196:	4605      	mov	r5, r0
    for (int c = 0; c < depth; ++c) {
 8019198:	3601      	adds	r6, #1
 801919a:	42a6      	cmp	r6, r4
 801919c:	dbe0      	blt.n	8019160 <LogSoftmax+0x4c>
    }

    const float log_sum = log(sum);
 801919e:	4628      	mov	r0, r5
 80191a0:	f7ed f9ea 	bl	8006578 <__aeabi_f2d>
 80191a4:	ec41 0b10 	vmov	d0, r0, r1
 80191a8:	f009 f9ca 	bl	8022540 <log>
 80191ac:	ec51 0b10 	vmov	r0, r1, d0
 80191b0:	f7ed fd12 	bl	8006bd8 <__aeabi_d2f>
 80191b4:	ee07 0a10 	vmov	s14, r0
    for (int c = 0; c < depth; ++c) {
 80191b8:	2200      	movs	r2, #0
 80191ba:	e00e      	b.n	80191da <LogSoftmax+0xc6>
      output_data[i * depth + c] = input_data[i * depth + c] - max - log_sum;
 80191bc:	fb04 2307 	mla	r3, r4, r7, r2
 80191c0:	eb0a 0183 	add.w	r1, sl, r3, lsl #2
 80191c4:	edd1 7a00 	vldr	s15, [r1]
 80191c8:	ee77 7ac8 	vsub.f32	s15, s15, s16
 80191cc:	eb0b 0383 	add.w	r3, fp, r3, lsl #2
 80191d0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80191d4:	edc3 7a00 	vstr	s15, [r3]
    for (int c = 0; c < depth; ++c) {
 80191d8:	3201      	adds	r2, #1
 80191da:	42a2      	cmp	r2, r4
 80191dc:	dbee      	blt.n	80191bc <LogSoftmax+0xa8>
  for (int i = 0; i < outer_size; ++i) {
 80191de:	3701      	adds	r7, #1
 80191e0:	9b01      	ldr	r3, [sp, #4]
 80191e2:	429f      	cmp	r7, r3
 80191e4:	da03      	bge.n	80191ee <LogSoftmax+0xda>
    for (int c = 0; c < depth; ++c) {
 80191e6:	2300      	movs	r3, #0
    float max = FLT_MIN;
 80191e8:	ed9f 8a04 	vldr	s16, [pc, #16]	@ 80191fc <LogSoftmax+0xe8>
 80191ec:	e7a5      	b.n	801913a <LogSoftmax+0x26>
    }
  }
  
  /* Return to application */
  return STATE_SUCCESS_fp;
}
 80191ee:	2000      	movs	r0, #0
 80191f0:	b003      	add	sp, #12
 80191f2:	ecbd 8b02 	vpop	{d8}
 80191f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80191fa:	bf00      	nop
 80191fc:	00800000 	.word	0x00800000

08019200 <mul>:

tinyengine_status_fp mul(const uint16_t size, const float* input1_data,
			               const float* input2_data, float* output_data) {
  int i;
  
  for (i = 0; i < size; ++i) {
 8019200:	f04f 0c00 	mov.w	ip, #0
 8019204:	4560      	cmp	r0, ip
 8019206:	dd15      	ble.n	8019234 <mul+0x34>
			               const float* input2_data, float* output_data) {
 8019208:	b500      	push	{lr}
    output_data[i] = input1_data[i] * input2_data[i];
 801920a:	eb01 0e8c 	add.w	lr, r1, ip, lsl #2
 801920e:	edde 7a00 	vldr	s15, [lr]
 8019212:	eb02 0e8c 	add.w	lr, r2, ip, lsl #2
 8019216:	ed9e 7a00 	vldr	s14, [lr]
 801921a:	eb03 0e8c 	add.w	lr, r3, ip, lsl #2
 801921e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8019222:	edce 7a00 	vstr	s15, [lr]
  for (i = 0; i < size; ++i) {
 8019226:	f10c 0c01 	add.w	ip, ip, #1
 801922a:	4560      	cmp	r0, ip
 801922c:	dced      	bgt.n	801920a <mul+0xa>
  }
  
  /* Return to application */
  return STATE_SUCCESS_fp;
}
 801922e:	2000      	movs	r0, #0
 8019230:	f85d fb04 	ldr.w	pc, [sp], #4
 8019234:	2000      	movs	r0, #0
 8019236:	4770      	bx	lr

08019238 <nll_loss>:
 * -------------------------------------------------------------------- */

#include "tinyengine_function_fp.h"

tinyengine_status_fp nll_loss(const float* input_data, const uint16_t input_dim, const uint16_t input_depth, 
                       const float* target, const uint16_t target_size, float* output_data) {
 8019238:	b500      	push	{lr}
 801923a:	f8bd c004 	ldrh.w	ip, [sp, #4]
  int idx;

  for(int i = 0; i < target_size; i++){
 801923e:	2200      	movs	r2, #0
 8019240:	e000      	b.n	8019244 <nll_loss+0xc>
 8019242:	3201      	adds	r2, #1
 8019244:	4594      	cmp	ip, r2
 8019246:	dd09      	ble.n	801925c <nll_loss+0x24>
	  if (target[i] > 0){
 8019248:	eb03 0182 	add.w	r1, r3, r2, lsl #2
 801924c:	edd1 7a00 	vldr	s15, [r1]
 8019250:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8019254:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019258:	ddf3      	ble.n	8019242 <nll_loss+0xa>
		  idx = i;
 801925a:	4696      	mov	lr, r2
		  break;
	  }
  }

  output_data[0] = -input_data[idx];
 801925c:	eb00 008e 	add.w	r0, r0, lr, lsl #2
 8019260:	edd0 7a00 	vldr	s15, [r0]
 8019264:	eef1 7a67 	vneg.f32	s15, s15
 8019268:	9b02      	ldr	r3, [sp, #8]
 801926a:	edc3 7a00 	vstr	s15, [r3]
  
  /* Return to application */
  return STATE_SUCCESS_fp;
}
 801926e:	2000      	movs	r0, #0
 8019270:	f85d fb04 	ldr.w	pc, [sp], #4

08019274 <mac_1row_10col_fp_IOHW_forint8w>:
  *sum += *input_0++ * filter_0;
 8019274:	edd1 7a00 	vldr	s15, [r1]
 8019278:	ee67 7a80 	vmul.f32	s15, s15, s0
 801927c:	ed90 0a00 	vldr	s0, [r0]
 8019280:	ee30 0a27 	vadd.f32	s0, s0, s15
 8019284:	ed80 0a00 	vstr	s0, [r0]
  *sum += *input_0++ * filter_1;
 8019288:	edd1 7a01 	vldr	s15, [r1, #4]
 801928c:	ee67 7aa0 	vmul.f32	s15, s15, s1
 8019290:	ee30 0a27 	vadd.f32	s0, s0, s15
 8019294:	ed80 0a00 	vstr	s0, [r0]
  *sum += *input_0++ * filter_2;
 8019298:	edd1 7a02 	vldr	s15, [r1, #8]
 801929c:	ee67 7a81 	vmul.f32	s15, s15, s2
 80192a0:	ee30 0a27 	vadd.f32	s0, s0, s15
 80192a4:	ed80 0a00 	vstr	s0, [r0]
  *sum += *input_0++ * filter_3;
 80192a8:	edd1 7a03 	vldr	s15, [r1, #12]
 80192ac:	ee67 7aa1 	vmul.f32	s15, s15, s3
 80192b0:	ee30 0a27 	vadd.f32	s0, s0, s15
 80192b4:	ed80 0a00 	vstr	s0, [r0]
  *sum += *input_0++ * filter_4;
 80192b8:	edd1 7a04 	vldr	s15, [r1, #16]
 80192bc:	ee67 7a82 	vmul.f32	s15, s15, s4
 80192c0:	ee30 0a27 	vadd.f32	s0, s0, s15
 80192c4:	ed80 0a00 	vstr	s0, [r0]
  *sum += *input_0++ * filter_5;
 80192c8:	edd1 7a05 	vldr	s15, [r1, #20]
 80192cc:	ee67 7aa2 	vmul.f32	s15, s15, s5
 80192d0:	ee30 0a27 	vadd.f32	s0, s0, s15
 80192d4:	ed80 0a00 	vstr	s0, [r0]
  *sum += *input_0++ * filter_6;
 80192d8:	edd1 7a06 	vldr	s15, [r1, #24]
 80192dc:	ee67 7a83 	vmul.f32	s15, s15, s6
 80192e0:	ee30 0a27 	vadd.f32	s0, s0, s15
 80192e4:	ed80 0a00 	vstr	s0, [r0]
  *sum += *input_0++ * filter_7;
 80192e8:	edd1 7a07 	vldr	s15, [r1, #28]
 80192ec:	ee67 7aa3 	vmul.f32	s15, s15, s7
 80192f0:	ee30 0a27 	vadd.f32	s0, s0, s15
 80192f4:	ed80 0a00 	vstr	s0, [r0]
  *sum += *input_0++ * filter_8;
 80192f8:	edd1 7a08 	vldr	s15, [r1, #32]
 80192fc:	ee67 7a84 	vmul.f32	s15, s15, s8
 8019300:	ee30 0a27 	vadd.f32	s0, s0, s15
 8019304:	ed80 0a00 	vstr	s0, [r0]
  *sum += *input_0++ * filter_9;
 8019308:	edd1 7a09 	vldr	s15, [r1, #36]	@ 0x24
 801930c:	ee67 7aa4 	vmul.f32	s15, s15, s9
 8019310:	ee30 0a27 	vadd.f32	s0, s0, s15
 8019314:	ed80 0a00 	vstr	s0, [r0]
}
 8019318:	4770      	bx	lr

0801931a <mac_4row_4col_fp_IOHW_forint8w>:
                      const float filter_0, const float filter_1, const float filter_2, const float filter_3) {
 801931a:	b410      	push	{r4}
 801931c:	9c01      	ldr	r4, [sp, #4]
  *sum += *input_0++ * filter_0;
 801931e:	ed91 7a00 	vldr	s14, [r1]
 8019322:	ee27 7a00 	vmul.f32	s14, s14, s0
 8019326:	edd0 7a00 	vldr	s15, [r0]
 801932a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801932e:	edc0 7a00 	vstr	s15, [r0]
  *sum += *input_0++ * filter_1;
 8019332:	ed91 7a01 	vldr	s14, [r1, #4]
 8019336:	ee27 7a20 	vmul.f32	s14, s14, s1
 801933a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801933e:	edc0 7a00 	vstr	s15, [r0]
  *sum += *input_0++ * filter_2;
 8019342:	ed91 7a02 	vldr	s14, [r1, #8]
 8019346:	ee27 7a01 	vmul.f32	s14, s14, s2
 801934a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801934e:	edc0 7a00 	vstr	s15, [r0]
  *sum++ += *input_0++ * filter_3;
 8019352:	ed91 7a03 	vldr	s14, [r1, #12]
 8019356:	ee27 7a21 	vmul.f32	s14, s14, s3
 801935a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801935e:	edc0 7a00 	vstr	s15, [r0]
  *sum += *input_1++ * filter_0;
 8019362:	ed92 7a00 	vldr	s14, [r2]
 8019366:	ee27 7a00 	vmul.f32	s14, s14, s0
 801936a:	edd0 7a01 	vldr	s15, [r0, #4]
 801936e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8019372:	edc0 7a01 	vstr	s15, [r0, #4]
  *sum += *input_1++ * filter_1;
 8019376:	ed92 7a01 	vldr	s14, [r2, #4]
 801937a:	ee27 7a20 	vmul.f32	s14, s14, s1
 801937e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8019382:	edc0 7a01 	vstr	s15, [r0, #4]
  *sum += *input_1++ * filter_2;
 8019386:	ed92 7a02 	vldr	s14, [r2, #8]
 801938a:	ee27 7a01 	vmul.f32	s14, s14, s2
 801938e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8019392:	edc0 7a01 	vstr	s15, [r0, #4]
  *sum++ += *input_1++ * filter_3;
 8019396:	ed92 7a03 	vldr	s14, [r2, #12]
 801939a:	ee27 7a21 	vmul.f32	s14, s14, s3
 801939e:	ee77 7a87 	vadd.f32	s15, s15, s14
 80193a2:	edc0 7a01 	vstr	s15, [r0, #4]
  *sum += *input_2++ * filter_0;
 80193a6:	ed93 7a00 	vldr	s14, [r3]
 80193aa:	ee27 7a00 	vmul.f32	s14, s14, s0
 80193ae:	edd0 7a02 	vldr	s15, [r0, #8]
 80193b2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80193b6:	edc0 7a02 	vstr	s15, [r0, #8]
  *sum += *input_2++ * filter_1;
 80193ba:	ed93 7a01 	vldr	s14, [r3, #4]
 80193be:	ee27 7a20 	vmul.f32	s14, s14, s1
 80193c2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80193c6:	edc0 7a02 	vstr	s15, [r0, #8]
  *sum += *input_2++ * filter_2;
 80193ca:	ed93 7a02 	vldr	s14, [r3, #8]
 80193ce:	ee27 7a01 	vmul.f32	s14, s14, s2
 80193d2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80193d6:	edc0 7a02 	vstr	s15, [r0, #8]
  *sum++ += *input_2++ * filter_3;
 80193da:	ed93 7a03 	vldr	s14, [r3, #12]
 80193de:	ee27 7a21 	vmul.f32	s14, s14, s3
 80193e2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80193e6:	edc0 7a02 	vstr	s15, [r0, #8]
  *sum += *input_3++ * filter_0;
 80193ea:	edd4 7a00 	vldr	s15, [r4]
 80193ee:	ee67 7a80 	vmul.f32	s15, s15, s0
 80193f2:	ed90 0a03 	vldr	s0, [r0, #12]
 80193f6:	ee30 0a27 	vadd.f32	s0, s0, s15
 80193fa:	ed80 0a03 	vstr	s0, [r0, #12]
  *sum += *input_3++ * filter_1;
 80193fe:	edd4 7a01 	vldr	s15, [r4, #4]
 8019402:	ee67 7aa0 	vmul.f32	s15, s15, s1
 8019406:	ee70 0a27 	vadd.f32	s1, s0, s15
 801940a:	edc0 0a03 	vstr	s1, [r0, #12]
  *sum += *input_3++ * filter_2;
 801940e:	edd4 7a02 	vldr	s15, [r4, #8]
 8019412:	ee67 7a81 	vmul.f32	s15, s15, s2
 8019416:	ee30 1aa7 	vadd.f32	s2, s1, s15
 801941a:	ed80 1a03 	vstr	s2, [r0, #12]
  *sum++ += *input_3++ * filter_3;
 801941e:	edd4 7a03 	vldr	s15, [r4, #12]
 8019422:	ee67 7aa1 	vmul.f32	s15, s15, s3
 8019426:	ee31 1a27 	vadd.f32	s2, s2, s15
 801942a:	ed80 1a03 	vstr	s2, [r0, #12]
}
 801942e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019432:	4770      	bx	lr

08019434 <assign_sum_to_pointwise_output_4row8col>:
}
/* END: For Group Conv */

/* START: For Pointwise Conv */
static inline void assign_sum_to_pointwise_output_4row8col(float* out_0, float* out_1, float* out_2, float* out_3, 
                      const float* sum, const float output_activation_min, const float output_activation_max) {
 8019434:	b410      	push	{r4}
 8019436:	9c01      	ldr	r4, [sp, #4]
    *out_0++ += TN_MIN(TN_MAX(sum[0], output_activation_min), output_activation_max);
 8019438:	ed90 7a00 	vldr	s14, [r0]
 801943c:	edd4 7a00 	vldr	s15, [r4]
 8019440:	eef4 7ac0 	vcmpe.f32	s15, s0
 8019444:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019448:	dc01      	bgt.n	801944e <assign_sum_to_pointwise_output_4row8col+0x1a>
 801944a:	eef0 7a40 	vmov.f32	s15, s0
 801944e:	eef4 7ae0 	vcmpe.f32	s15, s1
 8019452:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019456:	d401      	bmi.n	801945c <assign_sum_to_pointwise_output_4row8col+0x28>
 8019458:	eef0 7a60 	vmov.f32	s15, s1
 801945c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019460:	edc0 7a00 	vstr	s15, [r0]
    *out_1++ += TN_MIN(TN_MAX(sum[1], output_activation_min), output_activation_max);
 8019464:	ed91 7a00 	vldr	s14, [r1]
 8019468:	edd4 7a01 	vldr	s15, [r4, #4]
 801946c:	eef4 7ac0 	vcmpe.f32	s15, s0
 8019470:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019474:	dc01      	bgt.n	801947a <assign_sum_to_pointwise_output_4row8col+0x46>
 8019476:	eef0 7a40 	vmov.f32	s15, s0
 801947a:	eef4 7ae0 	vcmpe.f32	s15, s1
 801947e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019482:	d401      	bmi.n	8019488 <assign_sum_to_pointwise_output_4row8col+0x54>
 8019484:	eef0 7a60 	vmov.f32	s15, s1
 8019488:	ee77 7a27 	vadd.f32	s15, s14, s15
 801948c:	edc1 7a00 	vstr	s15, [r1]
    *out_2++ += TN_MIN(TN_MAX(sum[2], output_activation_min), output_activation_max);
 8019490:	ed92 7a00 	vldr	s14, [r2]
 8019494:	edd4 7a02 	vldr	s15, [r4, #8]
 8019498:	eef4 7ac0 	vcmpe.f32	s15, s0
 801949c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80194a0:	dc01      	bgt.n	80194a6 <assign_sum_to_pointwise_output_4row8col+0x72>
 80194a2:	eef0 7a40 	vmov.f32	s15, s0
 80194a6:	eef4 7ae0 	vcmpe.f32	s15, s1
 80194aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80194ae:	d401      	bmi.n	80194b4 <assign_sum_to_pointwise_output_4row8col+0x80>
 80194b0:	eef0 7a60 	vmov.f32	s15, s1
 80194b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80194b8:	edc2 7a00 	vstr	s15, [r2]
    *out_3++ += TN_MIN(TN_MAX(sum[3], output_activation_min), output_activation_max);
 80194bc:	ed93 7a00 	vldr	s14, [r3]
 80194c0:	edd4 7a03 	vldr	s15, [r4, #12]
 80194c4:	eef4 7ac0 	vcmpe.f32	s15, s0
 80194c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80194cc:	dc01      	bgt.n	80194d2 <assign_sum_to_pointwise_output_4row8col+0x9e>
 80194ce:	eef0 7a40 	vmov.f32	s15, s0
 80194d2:	eef4 7ae0 	vcmpe.f32	s15, s1
 80194d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80194da:	d401      	bmi.n	80194e0 <assign_sum_to_pointwise_output_4row8col+0xac>
 80194dc:	eef0 7a60 	vmov.f32	s15, s1
 80194e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80194e4:	edc3 7a00 	vstr	s15, [r3]
    *out_0++ += TN_MIN(TN_MAX(sum[4], output_activation_min), output_activation_max);
 80194e8:	ed90 7a01 	vldr	s14, [r0, #4]
 80194ec:	edd4 7a04 	vldr	s15, [r4, #16]
 80194f0:	eef4 7ac0 	vcmpe.f32	s15, s0
 80194f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80194f8:	dc01      	bgt.n	80194fe <assign_sum_to_pointwise_output_4row8col+0xca>
 80194fa:	eef0 7a40 	vmov.f32	s15, s0
 80194fe:	eef4 7ae0 	vcmpe.f32	s15, s1
 8019502:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019506:	d401      	bmi.n	801950c <assign_sum_to_pointwise_output_4row8col+0xd8>
 8019508:	eef0 7a60 	vmov.f32	s15, s1
 801950c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019510:	edc0 7a01 	vstr	s15, [r0, #4]
    *out_1++ += TN_MIN(TN_MAX(sum[5], output_activation_min), output_activation_max);
 8019514:	ed91 7a01 	vldr	s14, [r1, #4]
 8019518:	edd4 7a05 	vldr	s15, [r4, #20]
 801951c:	eef4 7ac0 	vcmpe.f32	s15, s0
 8019520:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019524:	dc01      	bgt.n	801952a <assign_sum_to_pointwise_output_4row8col+0xf6>
 8019526:	eef0 7a40 	vmov.f32	s15, s0
 801952a:	eef4 7ae0 	vcmpe.f32	s15, s1
 801952e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019532:	d401      	bmi.n	8019538 <assign_sum_to_pointwise_output_4row8col+0x104>
 8019534:	eef0 7a60 	vmov.f32	s15, s1
 8019538:	ee77 7a27 	vadd.f32	s15, s14, s15
 801953c:	edc1 7a01 	vstr	s15, [r1, #4]
    *out_2++ += TN_MIN(TN_MAX(sum[6], output_activation_min), output_activation_max);
 8019540:	ed92 7a01 	vldr	s14, [r2, #4]
 8019544:	edd4 7a06 	vldr	s15, [r4, #24]
 8019548:	eef4 7ac0 	vcmpe.f32	s15, s0
 801954c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019550:	dc01      	bgt.n	8019556 <assign_sum_to_pointwise_output_4row8col+0x122>
 8019552:	eef0 7a40 	vmov.f32	s15, s0
 8019556:	eef4 7ae0 	vcmpe.f32	s15, s1
 801955a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801955e:	d401      	bmi.n	8019564 <assign_sum_to_pointwise_output_4row8col+0x130>
 8019560:	eef0 7a60 	vmov.f32	s15, s1
 8019564:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019568:	edc2 7a01 	vstr	s15, [r2, #4]
    *out_3++ += TN_MIN(TN_MAX(sum[7], output_activation_min), output_activation_max);
 801956c:	ed93 7a01 	vldr	s14, [r3, #4]
 8019570:	edd4 7a07 	vldr	s15, [r4, #28]
 8019574:	eef4 7ac0 	vcmpe.f32	s15, s0
 8019578:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801957c:	dc01      	bgt.n	8019582 <assign_sum_to_pointwise_output_4row8col+0x14e>
 801957e:	eef0 7a40 	vmov.f32	s15, s0
 8019582:	eef4 7ae0 	vcmpe.f32	s15, s1
 8019586:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801958a:	d401      	bmi.n	8019590 <assign_sum_to_pointwise_output_4row8col+0x15c>
 801958c:	eef0 7a60 	vmov.f32	s15, s1
 8019590:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019594:	edc3 7a01 	vstr	s15, [r3, #4]
    *out_0++ += TN_MIN(TN_MAX(sum[8], output_activation_min), output_activation_max);
 8019598:	ed90 7a02 	vldr	s14, [r0, #8]
 801959c:	edd4 7a08 	vldr	s15, [r4, #32]
 80195a0:	eef4 7ac0 	vcmpe.f32	s15, s0
 80195a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80195a8:	dc01      	bgt.n	80195ae <assign_sum_to_pointwise_output_4row8col+0x17a>
 80195aa:	eef0 7a40 	vmov.f32	s15, s0
 80195ae:	eef4 7ae0 	vcmpe.f32	s15, s1
 80195b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80195b6:	d401      	bmi.n	80195bc <assign_sum_to_pointwise_output_4row8col+0x188>
 80195b8:	eef0 7a60 	vmov.f32	s15, s1
 80195bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80195c0:	edc0 7a02 	vstr	s15, [r0, #8]
    *out_1++ += TN_MIN(TN_MAX(sum[9], output_activation_min), output_activation_max);
 80195c4:	ed91 7a02 	vldr	s14, [r1, #8]
 80195c8:	edd4 7a09 	vldr	s15, [r4, #36]	@ 0x24
 80195cc:	eef4 7ac0 	vcmpe.f32	s15, s0
 80195d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80195d4:	dc01      	bgt.n	80195da <assign_sum_to_pointwise_output_4row8col+0x1a6>
 80195d6:	eef0 7a40 	vmov.f32	s15, s0
 80195da:	eef4 7ae0 	vcmpe.f32	s15, s1
 80195de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80195e2:	d401      	bmi.n	80195e8 <assign_sum_to_pointwise_output_4row8col+0x1b4>
 80195e4:	eef0 7a60 	vmov.f32	s15, s1
 80195e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80195ec:	edc1 7a02 	vstr	s15, [r1, #8]
    *out_2++ += TN_MIN(TN_MAX(sum[10], output_activation_min), output_activation_max);
 80195f0:	ed92 7a02 	vldr	s14, [r2, #8]
 80195f4:	edd4 7a0a 	vldr	s15, [r4, #40]	@ 0x28
 80195f8:	eef4 7ac0 	vcmpe.f32	s15, s0
 80195fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019600:	dc01      	bgt.n	8019606 <assign_sum_to_pointwise_output_4row8col+0x1d2>
 8019602:	eef0 7a40 	vmov.f32	s15, s0
 8019606:	eef4 7ae0 	vcmpe.f32	s15, s1
 801960a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801960e:	d401      	bmi.n	8019614 <assign_sum_to_pointwise_output_4row8col+0x1e0>
 8019610:	eef0 7a60 	vmov.f32	s15, s1
 8019614:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019618:	edc2 7a02 	vstr	s15, [r2, #8]
    *out_3++ += TN_MIN(TN_MAX(sum[11], output_activation_min), output_activation_max);
 801961c:	ed93 7a02 	vldr	s14, [r3, #8]
 8019620:	edd4 7a0b 	vldr	s15, [r4, #44]	@ 0x2c
 8019624:	eef4 7ac0 	vcmpe.f32	s15, s0
 8019628:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801962c:	dc01      	bgt.n	8019632 <assign_sum_to_pointwise_output_4row8col+0x1fe>
 801962e:	eef0 7a40 	vmov.f32	s15, s0
 8019632:	eef4 7ae0 	vcmpe.f32	s15, s1
 8019636:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801963a:	d401      	bmi.n	8019640 <assign_sum_to_pointwise_output_4row8col+0x20c>
 801963c:	eef0 7a60 	vmov.f32	s15, s1
 8019640:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019644:	edc3 7a02 	vstr	s15, [r3, #8]
    *out_0++ += TN_MIN(TN_MAX(sum[12], output_activation_min), output_activation_max);
 8019648:	ed90 7a03 	vldr	s14, [r0, #12]
 801964c:	edd4 7a0c 	vldr	s15, [r4, #48]	@ 0x30
 8019650:	eef4 7ac0 	vcmpe.f32	s15, s0
 8019654:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019658:	dc01      	bgt.n	801965e <assign_sum_to_pointwise_output_4row8col+0x22a>
 801965a:	eef0 7a40 	vmov.f32	s15, s0
 801965e:	eef4 7ae0 	vcmpe.f32	s15, s1
 8019662:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019666:	d401      	bmi.n	801966c <assign_sum_to_pointwise_output_4row8col+0x238>
 8019668:	eef0 7a60 	vmov.f32	s15, s1
 801966c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019670:	edc0 7a03 	vstr	s15, [r0, #12]
    *out_1++ += TN_MIN(TN_MAX(sum[13], output_activation_min), output_activation_max);
 8019674:	ed91 7a03 	vldr	s14, [r1, #12]
 8019678:	edd4 7a0d 	vldr	s15, [r4, #52]	@ 0x34
 801967c:	eef4 7ac0 	vcmpe.f32	s15, s0
 8019680:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019684:	dc01      	bgt.n	801968a <assign_sum_to_pointwise_output_4row8col+0x256>
 8019686:	eef0 7a40 	vmov.f32	s15, s0
 801968a:	eef4 7ae0 	vcmpe.f32	s15, s1
 801968e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019692:	d401      	bmi.n	8019698 <assign_sum_to_pointwise_output_4row8col+0x264>
 8019694:	eef0 7a60 	vmov.f32	s15, s1
 8019698:	ee77 7a27 	vadd.f32	s15, s14, s15
 801969c:	edc1 7a03 	vstr	s15, [r1, #12]
    *out_2++ += TN_MIN(TN_MAX(sum[14], output_activation_min), output_activation_max);
 80196a0:	ed92 7a03 	vldr	s14, [r2, #12]
 80196a4:	edd4 7a0e 	vldr	s15, [r4, #56]	@ 0x38
 80196a8:	eef4 7ac0 	vcmpe.f32	s15, s0
 80196ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80196b0:	dc01      	bgt.n	80196b6 <assign_sum_to_pointwise_output_4row8col+0x282>
 80196b2:	eef0 7a40 	vmov.f32	s15, s0
 80196b6:	eef4 7ae0 	vcmpe.f32	s15, s1
 80196ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80196be:	d401      	bmi.n	80196c4 <assign_sum_to_pointwise_output_4row8col+0x290>
 80196c0:	eef0 7a60 	vmov.f32	s15, s1
 80196c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80196c8:	edc2 7a03 	vstr	s15, [r2, #12]
    *out_3++ += TN_MIN(TN_MAX(sum[15], output_activation_min), output_activation_max);
 80196cc:	ed93 7a03 	vldr	s14, [r3, #12]
 80196d0:	edd4 7a0f 	vldr	s15, [r4, #60]	@ 0x3c
 80196d4:	eef4 7ac0 	vcmpe.f32	s15, s0
 80196d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80196dc:	dc01      	bgt.n	80196e2 <assign_sum_to_pointwise_output_4row8col+0x2ae>
 80196de:	eef0 7a40 	vmov.f32	s15, s0
 80196e2:	eef4 7ae0 	vcmpe.f32	s15, s1
 80196e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80196ea:	d401      	bmi.n	80196f0 <assign_sum_to_pointwise_output_4row8col+0x2bc>
 80196ec:	eef0 7a60 	vmov.f32	s15, s1
 80196f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80196f4:	edc3 7a03 	vstr	s15, [r3, #12]
    *out_0++ += TN_MIN(TN_MAX(sum[16], output_activation_min), output_activation_max);
 80196f8:	ed90 7a04 	vldr	s14, [r0, #16]
 80196fc:	edd4 7a10 	vldr	s15, [r4, #64]	@ 0x40
 8019700:	eef4 7ac0 	vcmpe.f32	s15, s0
 8019704:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019708:	dc01      	bgt.n	801970e <assign_sum_to_pointwise_output_4row8col+0x2da>
 801970a:	eef0 7a40 	vmov.f32	s15, s0
 801970e:	eef4 7ae0 	vcmpe.f32	s15, s1
 8019712:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019716:	d401      	bmi.n	801971c <assign_sum_to_pointwise_output_4row8col+0x2e8>
 8019718:	eef0 7a60 	vmov.f32	s15, s1
 801971c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019720:	edc0 7a04 	vstr	s15, [r0, #16]
    *out_1++ += TN_MIN(TN_MAX(sum[17], output_activation_min), output_activation_max);
 8019724:	ed91 7a04 	vldr	s14, [r1, #16]
 8019728:	edd4 7a11 	vldr	s15, [r4, #68]	@ 0x44
 801972c:	eef4 7ac0 	vcmpe.f32	s15, s0
 8019730:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019734:	dc01      	bgt.n	801973a <assign_sum_to_pointwise_output_4row8col+0x306>
 8019736:	eef0 7a40 	vmov.f32	s15, s0
 801973a:	eef4 7ae0 	vcmpe.f32	s15, s1
 801973e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019742:	d401      	bmi.n	8019748 <assign_sum_to_pointwise_output_4row8col+0x314>
 8019744:	eef0 7a60 	vmov.f32	s15, s1
 8019748:	ee77 7a27 	vadd.f32	s15, s14, s15
 801974c:	edc1 7a04 	vstr	s15, [r1, #16]
    *out_2++ += TN_MIN(TN_MAX(sum[18], output_activation_min), output_activation_max);
 8019750:	ed92 7a04 	vldr	s14, [r2, #16]
 8019754:	edd4 7a12 	vldr	s15, [r4, #72]	@ 0x48
 8019758:	eef4 7ac0 	vcmpe.f32	s15, s0
 801975c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019760:	dc01      	bgt.n	8019766 <assign_sum_to_pointwise_output_4row8col+0x332>
 8019762:	eef0 7a40 	vmov.f32	s15, s0
 8019766:	eef4 7ae0 	vcmpe.f32	s15, s1
 801976a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801976e:	d401      	bmi.n	8019774 <assign_sum_to_pointwise_output_4row8col+0x340>
 8019770:	eef0 7a60 	vmov.f32	s15, s1
 8019774:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019778:	edc2 7a04 	vstr	s15, [r2, #16]
    *out_3++ += TN_MIN(TN_MAX(sum[19], output_activation_min), output_activation_max);
 801977c:	ed93 7a04 	vldr	s14, [r3, #16]
 8019780:	edd4 7a13 	vldr	s15, [r4, #76]	@ 0x4c
 8019784:	eef4 7ac0 	vcmpe.f32	s15, s0
 8019788:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801978c:	dc01      	bgt.n	8019792 <assign_sum_to_pointwise_output_4row8col+0x35e>
 801978e:	eef0 7a40 	vmov.f32	s15, s0
 8019792:	eef4 7ae0 	vcmpe.f32	s15, s1
 8019796:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801979a:	d401      	bmi.n	80197a0 <assign_sum_to_pointwise_output_4row8col+0x36c>
 801979c:	eef0 7a60 	vmov.f32	s15, s1
 80197a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80197a4:	edc3 7a04 	vstr	s15, [r3, #16]
    *out_0++ += TN_MIN(TN_MAX(sum[20], output_activation_min), output_activation_max);
 80197a8:	ed90 7a05 	vldr	s14, [r0, #20]
 80197ac:	edd4 7a14 	vldr	s15, [r4, #80]	@ 0x50
 80197b0:	eef4 7ac0 	vcmpe.f32	s15, s0
 80197b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80197b8:	dc01      	bgt.n	80197be <assign_sum_to_pointwise_output_4row8col+0x38a>
 80197ba:	eef0 7a40 	vmov.f32	s15, s0
 80197be:	eef4 7ae0 	vcmpe.f32	s15, s1
 80197c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80197c6:	d401      	bmi.n	80197cc <assign_sum_to_pointwise_output_4row8col+0x398>
 80197c8:	eef0 7a60 	vmov.f32	s15, s1
 80197cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80197d0:	edc0 7a05 	vstr	s15, [r0, #20]
    *out_1++ += TN_MIN(TN_MAX(sum[21], output_activation_min), output_activation_max);
 80197d4:	ed91 7a05 	vldr	s14, [r1, #20]
 80197d8:	edd4 7a15 	vldr	s15, [r4, #84]	@ 0x54
 80197dc:	eef4 7ac0 	vcmpe.f32	s15, s0
 80197e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80197e4:	dc01      	bgt.n	80197ea <assign_sum_to_pointwise_output_4row8col+0x3b6>
 80197e6:	eef0 7a40 	vmov.f32	s15, s0
 80197ea:	eef4 7ae0 	vcmpe.f32	s15, s1
 80197ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80197f2:	d401      	bmi.n	80197f8 <assign_sum_to_pointwise_output_4row8col+0x3c4>
 80197f4:	eef0 7a60 	vmov.f32	s15, s1
 80197f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80197fc:	edc1 7a05 	vstr	s15, [r1, #20]
    *out_2++ += TN_MIN(TN_MAX(sum[22], output_activation_min), output_activation_max);
 8019800:	ed92 7a05 	vldr	s14, [r2, #20]
 8019804:	edd4 7a16 	vldr	s15, [r4, #88]	@ 0x58
 8019808:	eef4 7ac0 	vcmpe.f32	s15, s0
 801980c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019810:	dc01      	bgt.n	8019816 <assign_sum_to_pointwise_output_4row8col+0x3e2>
 8019812:	eef0 7a40 	vmov.f32	s15, s0
 8019816:	eef4 7ae0 	vcmpe.f32	s15, s1
 801981a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801981e:	d401      	bmi.n	8019824 <assign_sum_to_pointwise_output_4row8col+0x3f0>
 8019820:	eef0 7a60 	vmov.f32	s15, s1
 8019824:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019828:	edc2 7a05 	vstr	s15, [r2, #20]
    *out_3++ += TN_MIN(TN_MAX(sum[23], output_activation_min), output_activation_max);
 801982c:	ed93 7a05 	vldr	s14, [r3, #20]
 8019830:	edd4 7a17 	vldr	s15, [r4, #92]	@ 0x5c
 8019834:	eef4 7ac0 	vcmpe.f32	s15, s0
 8019838:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801983c:	dc01      	bgt.n	8019842 <assign_sum_to_pointwise_output_4row8col+0x40e>
 801983e:	eef0 7a40 	vmov.f32	s15, s0
 8019842:	eef4 7ae0 	vcmpe.f32	s15, s1
 8019846:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801984a:	d401      	bmi.n	8019850 <assign_sum_to_pointwise_output_4row8col+0x41c>
 801984c:	eef0 7a60 	vmov.f32	s15, s1
 8019850:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019854:	edc3 7a05 	vstr	s15, [r3, #20]
    *out_0++ += TN_MIN(TN_MAX(sum[24], output_activation_min), output_activation_max);
 8019858:	ed90 7a06 	vldr	s14, [r0, #24]
 801985c:	edd4 7a18 	vldr	s15, [r4, #96]	@ 0x60
 8019860:	eef4 7ac0 	vcmpe.f32	s15, s0
 8019864:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019868:	dc01      	bgt.n	801986e <assign_sum_to_pointwise_output_4row8col+0x43a>
 801986a:	eef0 7a40 	vmov.f32	s15, s0
 801986e:	eef4 7ae0 	vcmpe.f32	s15, s1
 8019872:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019876:	d401      	bmi.n	801987c <assign_sum_to_pointwise_output_4row8col+0x448>
 8019878:	eef0 7a60 	vmov.f32	s15, s1
 801987c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019880:	edc0 7a06 	vstr	s15, [r0, #24]
    *out_1++ += TN_MIN(TN_MAX(sum[25], output_activation_min), output_activation_max);
 8019884:	ed91 7a06 	vldr	s14, [r1, #24]
 8019888:	edd4 7a19 	vldr	s15, [r4, #100]	@ 0x64
 801988c:	eef4 7ac0 	vcmpe.f32	s15, s0
 8019890:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019894:	dc01      	bgt.n	801989a <assign_sum_to_pointwise_output_4row8col+0x466>
 8019896:	eef0 7a40 	vmov.f32	s15, s0
 801989a:	eef4 7ae0 	vcmpe.f32	s15, s1
 801989e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80198a2:	d401      	bmi.n	80198a8 <assign_sum_to_pointwise_output_4row8col+0x474>
 80198a4:	eef0 7a60 	vmov.f32	s15, s1
 80198a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80198ac:	edc1 7a06 	vstr	s15, [r1, #24]
    *out_2++ += TN_MIN(TN_MAX(sum[26], output_activation_min), output_activation_max);
 80198b0:	ed92 7a06 	vldr	s14, [r2, #24]
 80198b4:	edd4 7a1a 	vldr	s15, [r4, #104]	@ 0x68
 80198b8:	eef4 7ac0 	vcmpe.f32	s15, s0
 80198bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80198c0:	dc01      	bgt.n	80198c6 <assign_sum_to_pointwise_output_4row8col+0x492>
 80198c2:	eef0 7a40 	vmov.f32	s15, s0
 80198c6:	eef4 7ae0 	vcmpe.f32	s15, s1
 80198ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80198ce:	d401      	bmi.n	80198d4 <assign_sum_to_pointwise_output_4row8col+0x4a0>
 80198d0:	eef0 7a60 	vmov.f32	s15, s1
 80198d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80198d8:	edc2 7a06 	vstr	s15, [r2, #24]
    *out_3++ += TN_MIN(TN_MAX(sum[27], output_activation_min), output_activation_max);
 80198dc:	ed93 7a06 	vldr	s14, [r3, #24]
 80198e0:	edd4 7a1b 	vldr	s15, [r4, #108]	@ 0x6c
 80198e4:	eef4 7ac0 	vcmpe.f32	s15, s0
 80198e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80198ec:	dc01      	bgt.n	80198f2 <assign_sum_to_pointwise_output_4row8col+0x4be>
 80198ee:	eef0 7a40 	vmov.f32	s15, s0
 80198f2:	eef4 7ae0 	vcmpe.f32	s15, s1
 80198f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80198fa:	d401      	bmi.n	8019900 <assign_sum_to_pointwise_output_4row8col+0x4cc>
 80198fc:	eef0 7a60 	vmov.f32	s15, s1
 8019900:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019904:	edc3 7a06 	vstr	s15, [r3, #24]
    *out_0++ += TN_MIN(TN_MAX(sum[28], output_activation_min), output_activation_max);
 8019908:	ed90 7a07 	vldr	s14, [r0, #28]
 801990c:	edd4 7a1c 	vldr	s15, [r4, #112]	@ 0x70
 8019910:	eef4 7ac0 	vcmpe.f32	s15, s0
 8019914:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019918:	dc01      	bgt.n	801991e <assign_sum_to_pointwise_output_4row8col+0x4ea>
 801991a:	eef0 7a40 	vmov.f32	s15, s0
 801991e:	eef4 7ae0 	vcmpe.f32	s15, s1
 8019922:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019926:	d401      	bmi.n	801992c <assign_sum_to_pointwise_output_4row8col+0x4f8>
 8019928:	eef0 7a60 	vmov.f32	s15, s1
 801992c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019930:	edc0 7a07 	vstr	s15, [r0, #28]
    *out_1++ += TN_MIN(TN_MAX(sum[29], output_activation_min), output_activation_max);
 8019934:	ed91 7a07 	vldr	s14, [r1, #28]
 8019938:	edd4 7a1d 	vldr	s15, [r4, #116]	@ 0x74
 801993c:	eef4 7ac0 	vcmpe.f32	s15, s0
 8019940:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019944:	dc01      	bgt.n	801994a <assign_sum_to_pointwise_output_4row8col+0x516>
 8019946:	eef0 7a40 	vmov.f32	s15, s0
 801994a:	eef4 7ae0 	vcmpe.f32	s15, s1
 801994e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019952:	d401      	bmi.n	8019958 <assign_sum_to_pointwise_output_4row8col+0x524>
 8019954:	eef0 7a60 	vmov.f32	s15, s1
 8019958:	ee77 7a27 	vadd.f32	s15, s14, s15
 801995c:	edc1 7a07 	vstr	s15, [r1, #28]
    *out_2++ += TN_MIN(TN_MAX(sum[30], output_activation_min), output_activation_max);
 8019960:	ed92 7a07 	vldr	s14, [r2, #28]
 8019964:	edd4 7a1e 	vldr	s15, [r4, #120]	@ 0x78
 8019968:	eef4 7ac0 	vcmpe.f32	s15, s0
 801996c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019970:	dc01      	bgt.n	8019976 <assign_sum_to_pointwise_output_4row8col+0x542>
 8019972:	eef0 7a40 	vmov.f32	s15, s0
 8019976:	eef4 7ae0 	vcmpe.f32	s15, s1
 801997a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801997e:	d401      	bmi.n	8019984 <assign_sum_to_pointwise_output_4row8col+0x550>
 8019980:	eef0 7a60 	vmov.f32	s15, s1
 8019984:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019988:	edc2 7a07 	vstr	s15, [r2, #28]
    *out_3++ += TN_MIN(TN_MAX(sum[31], output_activation_min), output_activation_max);
 801998c:	ed93 7a07 	vldr	s14, [r3, #28]
 8019990:	edd4 7a1f 	vldr	s15, [r4, #124]	@ 0x7c
 8019994:	eef4 7ac0 	vcmpe.f32	s15, s0
 8019998:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801999c:	dc01      	bgt.n	80199a2 <assign_sum_to_pointwise_output_4row8col+0x56e>
 801999e:	eef0 7a40 	vmov.f32	s15, s0
 80199a2:	eef4 7ae0 	vcmpe.f32	s15, s1
 80199a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80199aa:	d401      	bmi.n	80199b0 <assign_sum_to_pointwise_output_4row8col+0x57c>
 80199ac:	eef0 7a60 	vmov.f32	s15, s1
 80199b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80199b4:	edc3 7a07 	vstr	s15, [r3, #28]
}
 80199b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80199bc:	4770      	bx	lr

080199be <assign_sum_to_pointwise_output_1row8col>:

static inline void assign_sum_to_pointwise_output_1row8col(float* out_0, 
                      const float* sum, const float output_activation_min, const float output_activation_max) {
    *out_0++ += TN_MIN(TN_MAX(sum[0], output_activation_min), output_activation_max);
 80199be:	ed90 7a00 	vldr	s14, [r0]
 80199c2:	edd1 7a00 	vldr	s15, [r1]
 80199c6:	eef4 7ac0 	vcmpe.f32	s15, s0
 80199ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80199ce:	dc01      	bgt.n	80199d4 <assign_sum_to_pointwise_output_1row8col+0x16>
 80199d0:	eef0 7a40 	vmov.f32	s15, s0
 80199d4:	eef4 7ae0 	vcmpe.f32	s15, s1
 80199d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80199dc:	d401      	bmi.n	80199e2 <assign_sum_to_pointwise_output_1row8col+0x24>
 80199de:	eef0 7a60 	vmov.f32	s15, s1
 80199e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80199e6:	edc0 7a00 	vstr	s15, [r0]
    *out_0++ += TN_MIN(TN_MAX(sum[1], output_activation_min), output_activation_max);
 80199ea:	ed90 7a01 	vldr	s14, [r0, #4]
 80199ee:	edd1 7a01 	vldr	s15, [r1, #4]
 80199f2:	eef4 7ac0 	vcmpe.f32	s15, s0
 80199f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80199fa:	dc01      	bgt.n	8019a00 <assign_sum_to_pointwise_output_1row8col+0x42>
 80199fc:	eef0 7a40 	vmov.f32	s15, s0
 8019a00:	eef4 7ae0 	vcmpe.f32	s15, s1
 8019a04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019a08:	d401      	bmi.n	8019a0e <assign_sum_to_pointwise_output_1row8col+0x50>
 8019a0a:	eef0 7a60 	vmov.f32	s15, s1
 8019a0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019a12:	edc0 7a01 	vstr	s15, [r0, #4]
    *out_0++ += TN_MIN(TN_MAX(sum[2], output_activation_min), output_activation_max);
 8019a16:	ed90 7a02 	vldr	s14, [r0, #8]
 8019a1a:	edd1 7a02 	vldr	s15, [r1, #8]
 8019a1e:	eef4 7ac0 	vcmpe.f32	s15, s0
 8019a22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019a26:	dc01      	bgt.n	8019a2c <assign_sum_to_pointwise_output_1row8col+0x6e>
 8019a28:	eef0 7a40 	vmov.f32	s15, s0
 8019a2c:	eef4 7ae0 	vcmpe.f32	s15, s1
 8019a30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019a34:	d401      	bmi.n	8019a3a <assign_sum_to_pointwise_output_1row8col+0x7c>
 8019a36:	eef0 7a60 	vmov.f32	s15, s1
 8019a3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019a3e:	edc0 7a02 	vstr	s15, [r0, #8]
    *out_0++ += TN_MIN(TN_MAX(sum[3], output_activation_min), output_activation_max);
 8019a42:	ed90 7a03 	vldr	s14, [r0, #12]
 8019a46:	edd1 7a03 	vldr	s15, [r1, #12]
 8019a4a:	eef4 7ac0 	vcmpe.f32	s15, s0
 8019a4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019a52:	dc01      	bgt.n	8019a58 <assign_sum_to_pointwise_output_1row8col+0x9a>
 8019a54:	eef0 7a40 	vmov.f32	s15, s0
 8019a58:	eef4 7ae0 	vcmpe.f32	s15, s1
 8019a5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019a60:	d401      	bmi.n	8019a66 <assign_sum_to_pointwise_output_1row8col+0xa8>
 8019a62:	eef0 7a60 	vmov.f32	s15, s1
 8019a66:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019a6a:	edc0 7a03 	vstr	s15, [r0, #12]
    *out_0++ += TN_MIN(TN_MAX(sum[4], output_activation_min), output_activation_max);
 8019a6e:	ed90 7a04 	vldr	s14, [r0, #16]
 8019a72:	edd1 7a04 	vldr	s15, [r1, #16]
 8019a76:	eef4 7ac0 	vcmpe.f32	s15, s0
 8019a7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019a7e:	dc01      	bgt.n	8019a84 <assign_sum_to_pointwise_output_1row8col+0xc6>
 8019a80:	eef0 7a40 	vmov.f32	s15, s0
 8019a84:	eef4 7ae0 	vcmpe.f32	s15, s1
 8019a88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019a8c:	d401      	bmi.n	8019a92 <assign_sum_to_pointwise_output_1row8col+0xd4>
 8019a8e:	eef0 7a60 	vmov.f32	s15, s1
 8019a92:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019a96:	edc0 7a04 	vstr	s15, [r0, #16]
    *out_0++ += TN_MIN(TN_MAX(sum[5], output_activation_min), output_activation_max);
 8019a9a:	ed90 7a05 	vldr	s14, [r0, #20]
 8019a9e:	edd1 7a05 	vldr	s15, [r1, #20]
 8019aa2:	eef4 7ac0 	vcmpe.f32	s15, s0
 8019aa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019aaa:	dc01      	bgt.n	8019ab0 <assign_sum_to_pointwise_output_1row8col+0xf2>
 8019aac:	eef0 7a40 	vmov.f32	s15, s0
 8019ab0:	eef4 7ae0 	vcmpe.f32	s15, s1
 8019ab4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019ab8:	d401      	bmi.n	8019abe <assign_sum_to_pointwise_output_1row8col+0x100>
 8019aba:	eef0 7a60 	vmov.f32	s15, s1
 8019abe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019ac2:	edc0 7a05 	vstr	s15, [r0, #20]
    *out_0++ += TN_MIN(TN_MAX(sum[6], output_activation_min), output_activation_max);
 8019ac6:	ed90 7a06 	vldr	s14, [r0, #24]
 8019aca:	edd1 7a06 	vldr	s15, [r1, #24]
 8019ace:	eef4 7ac0 	vcmpe.f32	s15, s0
 8019ad2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019ad6:	dc01      	bgt.n	8019adc <assign_sum_to_pointwise_output_1row8col+0x11e>
 8019ad8:	eef0 7a40 	vmov.f32	s15, s0
 8019adc:	eef4 7ae0 	vcmpe.f32	s15, s1
 8019ae0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019ae4:	d401      	bmi.n	8019aea <assign_sum_to_pointwise_output_1row8col+0x12c>
 8019ae6:	eef0 7a60 	vmov.f32	s15, s1
 8019aea:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019aee:	edc0 7a06 	vstr	s15, [r0, #24]
    *out_0++ += TN_MIN(TN_MAX(sum[7], output_activation_min), output_activation_max);
 8019af2:	ed90 7a07 	vldr	s14, [r0, #28]
 8019af6:	edd1 7a07 	vldr	s15, [r1, #28]
 8019afa:	eef4 7ac0 	vcmpe.f32	s15, s0
 8019afe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019b02:	dc01      	bgt.n	8019b08 <assign_sum_to_pointwise_output_1row8col+0x14a>
 8019b04:	eef0 7a40 	vmov.f32	s15, s0
 8019b08:	eef4 7ae0 	vcmpe.f32	s15, s1
 8019b0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019b10:	d401      	bmi.n	8019b16 <assign_sum_to_pointwise_output_1row8col+0x158>
 8019b12:	eef0 7a60 	vmov.f32	s15, s1
 8019b16:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019b1a:	edc0 7a07 	vstr	s15, [r0, #28]
}
 8019b1e:	4770      	bx	lr

08019b20 <assign_sum_to_pointwise_output_4row4col>:
    *out_0++ += sum[6];
    *out_0++ += sum[7];
}

static inline void assign_sum_to_pointwise_output_4row4col(float* out_0, float* out_1, float* out_2, float* out_3, 
                      const float* sum, const float output_activation_min, const float output_activation_max) {
 8019b20:	b410      	push	{r4}
 8019b22:	9c01      	ldr	r4, [sp, #4]
    *out_0++ += TN_MIN(TN_MAX(sum[0], output_activation_min), output_activation_max);
 8019b24:	ed90 7a00 	vldr	s14, [r0]
 8019b28:	edd4 7a00 	vldr	s15, [r4]
 8019b2c:	eef4 7ac0 	vcmpe.f32	s15, s0
 8019b30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019b34:	dc01      	bgt.n	8019b3a <assign_sum_to_pointwise_output_4row4col+0x1a>
 8019b36:	eef0 7a40 	vmov.f32	s15, s0
 8019b3a:	eef4 7ae0 	vcmpe.f32	s15, s1
 8019b3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019b42:	d401      	bmi.n	8019b48 <assign_sum_to_pointwise_output_4row4col+0x28>
 8019b44:	eef0 7a60 	vmov.f32	s15, s1
 8019b48:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019b4c:	edc0 7a00 	vstr	s15, [r0]
    *out_1++ += TN_MIN(TN_MAX(sum[1], output_activation_min), output_activation_max);
 8019b50:	ed91 7a00 	vldr	s14, [r1]
 8019b54:	edd4 7a01 	vldr	s15, [r4, #4]
 8019b58:	eef4 7ac0 	vcmpe.f32	s15, s0
 8019b5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019b60:	dc01      	bgt.n	8019b66 <assign_sum_to_pointwise_output_4row4col+0x46>
 8019b62:	eef0 7a40 	vmov.f32	s15, s0
 8019b66:	eef4 7ae0 	vcmpe.f32	s15, s1
 8019b6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019b6e:	d401      	bmi.n	8019b74 <assign_sum_to_pointwise_output_4row4col+0x54>
 8019b70:	eef0 7a60 	vmov.f32	s15, s1
 8019b74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019b78:	edc1 7a00 	vstr	s15, [r1]
    *out_2++ += TN_MIN(TN_MAX(sum[2], output_activation_min), output_activation_max);
 8019b7c:	ed92 7a00 	vldr	s14, [r2]
 8019b80:	edd4 7a02 	vldr	s15, [r4, #8]
 8019b84:	eef4 7ac0 	vcmpe.f32	s15, s0
 8019b88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019b8c:	dc01      	bgt.n	8019b92 <assign_sum_to_pointwise_output_4row4col+0x72>
 8019b8e:	eef0 7a40 	vmov.f32	s15, s0
 8019b92:	eef4 7ae0 	vcmpe.f32	s15, s1
 8019b96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019b9a:	d401      	bmi.n	8019ba0 <assign_sum_to_pointwise_output_4row4col+0x80>
 8019b9c:	eef0 7a60 	vmov.f32	s15, s1
 8019ba0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019ba4:	edc2 7a00 	vstr	s15, [r2]
    *out_3++ += TN_MIN(TN_MAX(sum[3], output_activation_min), output_activation_max);
 8019ba8:	ed93 7a00 	vldr	s14, [r3]
 8019bac:	edd4 7a03 	vldr	s15, [r4, #12]
 8019bb0:	eef4 7ac0 	vcmpe.f32	s15, s0
 8019bb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019bb8:	dc01      	bgt.n	8019bbe <assign_sum_to_pointwise_output_4row4col+0x9e>
 8019bba:	eef0 7a40 	vmov.f32	s15, s0
 8019bbe:	eef4 7ae0 	vcmpe.f32	s15, s1
 8019bc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019bc6:	d401      	bmi.n	8019bcc <assign_sum_to_pointwise_output_4row4col+0xac>
 8019bc8:	eef0 7a60 	vmov.f32	s15, s1
 8019bcc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019bd0:	edc3 7a00 	vstr	s15, [r3]
    *out_0++ += TN_MIN(TN_MAX(sum[4], output_activation_min), output_activation_max);
 8019bd4:	ed90 7a01 	vldr	s14, [r0, #4]
 8019bd8:	edd4 7a04 	vldr	s15, [r4, #16]
 8019bdc:	eef4 7ac0 	vcmpe.f32	s15, s0
 8019be0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019be4:	dc01      	bgt.n	8019bea <assign_sum_to_pointwise_output_4row4col+0xca>
 8019be6:	eef0 7a40 	vmov.f32	s15, s0
 8019bea:	eef4 7ae0 	vcmpe.f32	s15, s1
 8019bee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019bf2:	d401      	bmi.n	8019bf8 <assign_sum_to_pointwise_output_4row4col+0xd8>
 8019bf4:	eef0 7a60 	vmov.f32	s15, s1
 8019bf8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019bfc:	edc0 7a01 	vstr	s15, [r0, #4]
    *out_1++ += TN_MIN(TN_MAX(sum[5], output_activation_min), output_activation_max);
 8019c00:	ed91 7a01 	vldr	s14, [r1, #4]
 8019c04:	edd4 7a05 	vldr	s15, [r4, #20]
 8019c08:	eef4 7ac0 	vcmpe.f32	s15, s0
 8019c0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019c10:	dc01      	bgt.n	8019c16 <assign_sum_to_pointwise_output_4row4col+0xf6>
 8019c12:	eef0 7a40 	vmov.f32	s15, s0
 8019c16:	eef4 7ae0 	vcmpe.f32	s15, s1
 8019c1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019c1e:	d401      	bmi.n	8019c24 <assign_sum_to_pointwise_output_4row4col+0x104>
 8019c20:	eef0 7a60 	vmov.f32	s15, s1
 8019c24:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019c28:	edc1 7a01 	vstr	s15, [r1, #4]
    *out_2++ += TN_MIN(TN_MAX(sum[6], output_activation_min), output_activation_max);
 8019c2c:	ed92 7a01 	vldr	s14, [r2, #4]
 8019c30:	edd4 7a06 	vldr	s15, [r4, #24]
 8019c34:	eef4 7ac0 	vcmpe.f32	s15, s0
 8019c38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019c3c:	dc01      	bgt.n	8019c42 <assign_sum_to_pointwise_output_4row4col+0x122>
 8019c3e:	eef0 7a40 	vmov.f32	s15, s0
 8019c42:	eef4 7ae0 	vcmpe.f32	s15, s1
 8019c46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019c4a:	d401      	bmi.n	8019c50 <assign_sum_to_pointwise_output_4row4col+0x130>
 8019c4c:	eef0 7a60 	vmov.f32	s15, s1
 8019c50:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019c54:	edc2 7a01 	vstr	s15, [r2, #4]
    *out_3++ += TN_MIN(TN_MAX(sum[7], output_activation_min), output_activation_max);
 8019c58:	ed93 7a01 	vldr	s14, [r3, #4]
 8019c5c:	edd4 7a07 	vldr	s15, [r4, #28]
 8019c60:	eef4 7ac0 	vcmpe.f32	s15, s0
 8019c64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019c68:	dc01      	bgt.n	8019c6e <assign_sum_to_pointwise_output_4row4col+0x14e>
 8019c6a:	eef0 7a40 	vmov.f32	s15, s0
 8019c6e:	eef4 7ae0 	vcmpe.f32	s15, s1
 8019c72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019c76:	d401      	bmi.n	8019c7c <assign_sum_to_pointwise_output_4row4col+0x15c>
 8019c78:	eef0 7a60 	vmov.f32	s15, s1
 8019c7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019c80:	edc3 7a01 	vstr	s15, [r3, #4]
    *out_0++ += TN_MIN(TN_MAX(sum[8], output_activation_min), output_activation_max);
 8019c84:	ed90 7a02 	vldr	s14, [r0, #8]
 8019c88:	edd4 7a08 	vldr	s15, [r4, #32]
 8019c8c:	eef4 7ac0 	vcmpe.f32	s15, s0
 8019c90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019c94:	dc01      	bgt.n	8019c9a <assign_sum_to_pointwise_output_4row4col+0x17a>
 8019c96:	eef0 7a40 	vmov.f32	s15, s0
 8019c9a:	eef4 7ae0 	vcmpe.f32	s15, s1
 8019c9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019ca2:	d401      	bmi.n	8019ca8 <assign_sum_to_pointwise_output_4row4col+0x188>
 8019ca4:	eef0 7a60 	vmov.f32	s15, s1
 8019ca8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019cac:	edc0 7a02 	vstr	s15, [r0, #8]
    *out_1++ += TN_MIN(TN_MAX(sum[9], output_activation_min), output_activation_max);
 8019cb0:	ed91 7a02 	vldr	s14, [r1, #8]
 8019cb4:	edd4 7a09 	vldr	s15, [r4, #36]	@ 0x24
 8019cb8:	eef4 7ac0 	vcmpe.f32	s15, s0
 8019cbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019cc0:	dc01      	bgt.n	8019cc6 <assign_sum_to_pointwise_output_4row4col+0x1a6>
 8019cc2:	eef0 7a40 	vmov.f32	s15, s0
 8019cc6:	eef4 7ae0 	vcmpe.f32	s15, s1
 8019cca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019cce:	d401      	bmi.n	8019cd4 <assign_sum_to_pointwise_output_4row4col+0x1b4>
 8019cd0:	eef0 7a60 	vmov.f32	s15, s1
 8019cd4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019cd8:	edc1 7a02 	vstr	s15, [r1, #8]
    *out_2++ += TN_MIN(TN_MAX(sum[10], output_activation_min), output_activation_max);
 8019cdc:	ed92 7a02 	vldr	s14, [r2, #8]
 8019ce0:	edd4 7a0a 	vldr	s15, [r4, #40]	@ 0x28
 8019ce4:	eef4 7ac0 	vcmpe.f32	s15, s0
 8019ce8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019cec:	dc01      	bgt.n	8019cf2 <assign_sum_to_pointwise_output_4row4col+0x1d2>
 8019cee:	eef0 7a40 	vmov.f32	s15, s0
 8019cf2:	eef4 7ae0 	vcmpe.f32	s15, s1
 8019cf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019cfa:	d401      	bmi.n	8019d00 <assign_sum_to_pointwise_output_4row4col+0x1e0>
 8019cfc:	eef0 7a60 	vmov.f32	s15, s1
 8019d00:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019d04:	edc2 7a02 	vstr	s15, [r2, #8]
    *out_3++ += TN_MIN(TN_MAX(sum[11], output_activation_min), output_activation_max);
 8019d08:	ed93 7a02 	vldr	s14, [r3, #8]
 8019d0c:	edd4 7a0b 	vldr	s15, [r4, #44]	@ 0x2c
 8019d10:	eef4 7ac0 	vcmpe.f32	s15, s0
 8019d14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019d18:	dc01      	bgt.n	8019d1e <assign_sum_to_pointwise_output_4row4col+0x1fe>
 8019d1a:	eef0 7a40 	vmov.f32	s15, s0
 8019d1e:	eef4 7ae0 	vcmpe.f32	s15, s1
 8019d22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019d26:	d401      	bmi.n	8019d2c <assign_sum_to_pointwise_output_4row4col+0x20c>
 8019d28:	eef0 7a60 	vmov.f32	s15, s1
 8019d2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019d30:	edc3 7a02 	vstr	s15, [r3, #8]
    *out_0++ += TN_MIN(TN_MAX(sum[12], output_activation_min), output_activation_max);
 8019d34:	ed90 7a03 	vldr	s14, [r0, #12]
 8019d38:	edd4 7a0c 	vldr	s15, [r4, #48]	@ 0x30
 8019d3c:	eef4 7ac0 	vcmpe.f32	s15, s0
 8019d40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019d44:	dc01      	bgt.n	8019d4a <assign_sum_to_pointwise_output_4row4col+0x22a>
 8019d46:	eef0 7a40 	vmov.f32	s15, s0
 8019d4a:	eef4 7ae0 	vcmpe.f32	s15, s1
 8019d4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019d52:	d401      	bmi.n	8019d58 <assign_sum_to_pointwise_output_4row4col+0x238>
 8019d54:	eef0 7a60 	vmov.f32	s15, s1
 8019d58:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019d5c:	edc0 7a03 	vstr	s15, [r0, #12]
    *out_1++ += TN_MIN(TN_MAX(sum[13], output_activation_min), output_activation_max);
 8019d60:	ed91 7a03 	vldr	s14, [r1, #12]
 8019d64:	edd4 7a0d 	vldr	s15, [r4, #52]	@ 0x34
 8019d68:	eef4 7ac0 	vcmpe.f32	s15, s0
 8019d6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019d70:	dc01      	bgt.n	8019d76 <assign_sum_to_pointwise_output_4row4col+0x256>
 8019d72:	eef0 7a40 	vmov.f32	s15, s0
 8019d76:	eef4 7ae0 	vcmpe.f32	s15, s1
 8019d7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019d7e:	d401      	bmi.n	8019d84 <assign_sum_to_pointwise_output_4row4col+0x264>
 8019d80:	eef0 7a60 	vmov.f32	s15, s1
 8019d84:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019d88:	edc1 7a03 	vstr	s15, [r1, #12]
    *out_2++ += TN_MIN(TN_MAX(sum[14], output_activation_min), output_activation_max);
 8019d8c:	ed92 7a03 	vldr	s14, [r2, #12]
 8019d90:	edd4 7a0e 	vldr	s15, [r4, #56]	@ 0x38
 8019d94:	eef4 7ac0 	vcmpe.f32	s15, s0
 8019d98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019d9c:	dc01      	bgt.n	8019da2 <assign_sum_to_pointwise_output_4row4col+0x282>
 8019d9e:	eef0 7a40 	vmov.f32	s15, s0
 8019da2:	eef4 7ae0 	vcmpe.f32	s15, s1
 8019da6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019daa:	d401      	bmi.n	8019db0 <assign_sum_to_pointwise_output_4row4col+0x290>
 8019dac:	eef0 7a60 	vmov.f32	s15, s1
 8019db0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019db4:	edc2 7a03 	vstr	s15, [r2, #12]
    *out_3++ += TN_MIN(TN_MAX(sum[15], output_activation_min), output_activation_max);
 8019db8:	ed93 7a03 	vldr	s14, [r3, #12]
 8019dbc:	edd4 7a0f 	vldr	s15, [r4, #60]	@ 0x3c
 8019dc0:	eef4 7ac0 	vcmpe.f32	s15, s0
 8019dc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019dc8:	dc01      	bgt.n	8019dce <assign_sum_to_pointwise_output_4row4col+0x2ae>
 8019dca:	eef0 7a40 	vmov.f32	s15, s0
 8019dce:	eef4 7ae0 	vcmpe.f32	s15, s1
 8019dd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019dd6:	d401      	bmi.n	8019ddc <assign_sum_to_pointwise_output_4row4col+0x2bc>
 8019dd8:	eef0 7a60 	vmov.f32	s15, s1
 8019ddc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019de0:	edc3 7a03 	vstr	s15, [r3, #12]
}
 8019de4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019de8:	4770      	bx	lr

08019dea <assign_sum_to_pointwise_output_1row4col>:

static inline void assign_sum_to_pointwise_output_1row4col(float* out_0, 
                      const float* sum, const float output_activation_min, const float output_activation_max) {
    *out_0++ += TN_MIN(TN_MAX(sum[0], output_activation_min), output_activation_max);
 8019dea:	ed90 7a00 	vldr	s14, [r0]
 8019dee:	edd1 7a00 	vldr	s15, [r1]
 8019df2:	eef4 7ac0 	vcmpe.f32	s15, s0
 8019df6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019dfa:	dc01      	bgt.n	8019e00 <assign_sum_to_pointwise_output_1row4col+0x16>
 8019dfc:	eef0 7a40 	vmov.f32	s15, s0
 8019e00:	eef4 7ae0 	vcmpe.f32	s15, s1
 8019e04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019e08:	d401      	bmi.n	8019e0e <assign_sum_to_pointwise_output_1row4col+0x24>
 8019e0a:	eef0 7a60 	vmov.f32	s15, s1
 8019e0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019e12:	edc0 7a00 	vstr	s15, [r0]
    *out_0++ += TN_MIN(TN_MAX(sum[1], output_activation_min), output_activation_max);
 8019e16:	ed90 7a01 	vldr	s14, [r0, #4]
 8019e1a:	edd1 7a01 	vldr	s15, [r1, #4]
 8019e1e:	eef4 7ac0 	vcmpe.f32	s15, s0
 8019e22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019e26:	dc01      	bgt.n	8019e2c <assign_sum_to_pointwise_output_1row4col+0x42>
 8019e28:	eef0 7a40 	vmov.f32	s15, s0
 8019e2c:	eef4 7ae0 	vcmpe.f32	s15, s1
 8019e30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019e34:	d401      	bmi.n	8019e3a <assign_sum_to_pointwise_output_1row4col+0x50>
 8019e36:	eef0 7a60 	vmov.f32	s15, s1
 8019e3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019e3e:	edc0 7a01 	vstr	s15, [r0, #4]
    *out_0++ += TN_MIN(TN_MAX(sum[2], output_activation_min), output_activation_max);
 8019e42:	ed90 7a02 	vldr	s14, [r0, #8]
 8019e46:	edd1 7a02 	vldr	s15, [r1, #8]
 8019e4a:	eef4 7ac0 	vcmpe.f32	s15, s0
 8019e4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019e52:	dc01      	bgt.n	8019e58 <assign_sum_to_pointwise_output_1row4col+0x6e>
 8019e54:	eef0 7a40 	vmov.f32	s15, s0
 8019e58:	eef4 7ae0 	vcmpe.f32	s15, s1
 8019e5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019e60:	d401      	bmi.n	8019e66 <assign_sum_to_pointwise_output_1row4col+0x7c>
 8019e62:	eef0 7a60 	vmov.f32	s15, s1
 8019e66:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019e6a:	edc0 7a02 	vstr	s15, [r0, #8]
    *out_0++ += TN_MIN(TN_MAX(sum[3], output_activation_min), output_activation_max);
 8019e6e:	ed90 7a03 	vldr	s14, [r0, #12]
 8019e72:	edd1 7a03 	vldr	s15, [r1, #12]
 8019e76:	eef4 7ac0 	vcmpe.f32	s15, s0
 8019e7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019e7e:	dc01      	bgt.n	8019e84 <assign_sum_to_pointwise_output_1row4col+0x9a>
 8019e80:	eef0 7a40 	vmov.f32	s15, s0
 8019e84:	eef4 7ae0 	vcmpe.f32	s15, s1
 8019e88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019e8c:	d401      	bmi.n	8019e92 <assign_sum_to_pointwise_output_1row4col+0xa8>
 8019e8e:	eef0 7a60 	vmov.f32	s15, s1
 8019e92:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019e96:	edc0 7a03 	vstr	s15, [r0, #12]
}
 8019e9a:	4770      	bx	lr

08019e9c <pointwise_conv_fp_1row10col_10inputdepth_IOHW_int8weight>:
tinyengine_status_fp pointwise_conv_fp_1row10col_10inputdepth_IOHW_int8weight(const float* input_data, 
                 const uint16_t input_height, const uint16_t input_width, const uint16_t input_depth, 
                 const int8_t* filter_data, const float* bias_data, 
                 float* output_data, const uint16_t output_height, const uint16_t output_width, const uint16_t output_depth, 
                 const float output_activation_min, const float output_activation_max,
                 float* im2col_data, const uint16_t batches) {
 8019e9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019ea0:	ed2d 8b02 	vpush	{d8}
 8019ea4:	b099      	sub	sp, #100	@ 0x64
 8019ea6:	900e      	str	r0, [sp, #56]	@ 0x38
 8019ea8:	469c      	mov	ip, r3
 8019eaa:	9824      	ldr	r0, [sp, #144]	@ 0x90
 8019eac:	f8bd 10a4 	ldrh.w	r1, [sp, #164]	@ 0xa4
 8019eb0:	eef0 8a40 	vmov.f32	s17, s0
 8019eb4:	eeb0 8a60 	vmov.f32	s16, s1
  (void) input_width;

  float* out = output_data;

  int i_element;
  const int num_elements = output_height * output_width;
 8019eb8:	f8bd 309c 	ldrh.w	r3, [sp, #156]	@ 0x9c
 8019ebc:	f8bd 20a0 	ldrh.w	r2, [sp, #160]	@ 0xa0
 8019ec0:	fb02 f403 	mul.w	r4, r2, r3

  for (i_element = 0; i_element < num_elements; i_element++) {
 8019ec4:	f04f 0e00 	mov.w	lr, #0
 8019ec8:	940f      	str	r4, [sp, #60]	@ 0x3c
 8019eca:	e321      	b.n	801a510 <pointwise_conv_fp_1row10col_10inputdepth_IOHW_int8weight+0x674>
        *out++ = TN_MIN(TN_MAX(sum[2], output_activation_min), output_activation_max);
        *out++ = TN_MIN(TN_MAX(sum[3], output_activation_min), output_activation_max);
        *out++ = TN_MIN(TN_MAX(sum[4], output_activation_min), output_activation_max);
        *out++ = TN_MIN(TN_MAX(sum[5], output_activation_min), output_activation_max);
        *out++ = TN_MIN(TN_MAX(sum[6], output_activation_min), output_activation_max);
        *out++ = TN_MIN(TN_MAX(sum[7], output_activation_min), output_activation_max);
 8019ecc:	edcb 7a07 	vstr	s15, [fp, #28]
      while (col_count_div8--) {
 8019ed0:	9b05      	ldr	r3, [sp, #20]
        filter_8 = (float)*filter_8_int8++; filter_9 = (float)*filter_9_int8++;
 8019ed2:	f8cd 8008 	str.w	r8, [sp, #8]
 8019ed6:	9401      	str	r4, [sp, #4]
        filter_4 = (float)*filter_4_int8++; filter_5 = (float)*filter_5_int8++; filter_6 = (float)*filter_6_int8++; filter_7 = (float)*filter_7_int8++;
 8019ed8:	463c      	mov	r4, r7
 8019eda:	9603      	str	r6, [sp, #12]
 8019edc:	46a8      	mov	r8, r5
 8019ede:	464f      	mov	r7, r9
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8019ee0:	4656      	mov	r6, sl
 8019ee2:	9d08      	ldr	r5, [sp, #32]
 8019ee4:	f8dd 901c 	ldr.w	r9, [sp, #28]
 8019ee8:	f8dd a018 	ldr.w	sl, [sp, #24]
        *out++ = TN_MIN(TN_MAX(sum[7], output_activation_min), output_activation_max);
 8019eec:	f10b 0b20 	add.w	fp, fp, #32
      while (col_count_div8--) {
 8019ef0:	1e5a      	subs	r2, r3, #1
 8019ef2:	b292      	uxth	r2, r2
 8019ef4:	9205      	str	r2, [sp, #20]
 8019ef6:	2b00      	cmp	r3, #0
 8019ef8:	f000 82c7 	beq.w	801a48a <pointwise_conv_fp_1row10col_10inputdepth_IOHW_int8weight+0x5ee>
        float sum[8] = {};
 8019efc:	2220      	movs	r2, #32
 8019efe:	2100      	movs	r1, #0
 8019f00:	a810      	add	r0, sp, #64	@ 0x40
 8019f02:	f009 fedb 	bl	8023cbc <memset>
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8019f06:	f99a 3000 	ldrsb.w	r3, [sl]
 8019f0a:	ee00 3a10 	vmov	s0, r3
 8019f0e:	f999 3000 	ldrsb.w	r3, [r9]
 8019f12:	ee00 3a90 	vmov	s1, r3
 8019f16:	f995 3000 	ldrsb.w	r3, [r5]
 8019f1a:	ee01 3a10 	vmov	s2, r3
 8019f1e:	f996 3000 	ldrsb.w	r3, [r6]
 8019f22:	ee01 3a90 	vmov	s3, r3
        filter_4 = (float)*filter_4_int8++; filter_5 = (float)*filter_5_int8++; filter_6 = (float)*filter_6_int8++; filter_7 = (float)*filter_7_int8++;
 8019f26:	f997 3000 	ldrsb.w	r3, [r7]
 8019f2a:	ee02 3a10 	vmov	s4, r3
 8019f2e:	f998 3000 	ldrsb.w	r3, [r8]
 8019f32:	ee02 3a90 	vmov	s5, r3
 8019f36:	9b03      	ldr	r3, [sp, #12]
 8019f38:	f993 2000 	ldrsb.w	r2, [r3]
 8019f3c:	ee03 2a10 	vmov	s6, r2
 8019f40:	f994 2000 	ldrsb.w	r2, [r4]
 8019f44:	ee03 2a90 	vmov	s7, r2
        filter_8 = (float)*filter_8_int8++; filter_9 = (float)*filter_9_int8++;
 8019f48:	9a01      	ldr	r2, [sp, #4]
 8019f4a:	f992 1000 	ldrsb.w	r1, [r2]
 8019f4e:	ee04 1a10 	vmov	s8, r1
 8019f52:	9902      	ldr	r1, [sp, #8]
 8019f54:	f991 c000 	ldrsb.w	ip, [r1]
 8019f58:	ee04 ca90 	vmov	s9, ip
        mac_1row_10col_fp_IOHW_forint8w(&sum[0], input_0, filter_0, filter_1, filter_2, filter_3, filter_4, filter_5, filter_6, filter_7, filter_8, filter_9);
 8019f5c:	eef8 4ae4 	vcvt.f32.s32	s9, s9
 8019f60:	eeb8 4ac4 	vcvt.f32.s32	s8, s8
 8019f64:	eef8 3ae3 	vcvt.f32.s32	s7, s7
 8019f68:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 8019f6c:	eef8 2ae2 	vcvt.f32.s32	s5, s5
 8019f70:	eeb8 2ac2 	vcvt.f32.s32	s4, s4
 8019f74:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 8019f78:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 8019f7c:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 8019f80:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8019f84:	9904      	ldr	r1, [sp, #16]
 8019f86:	a810      	add	r0, sp, #64	@ 0x40
 8019f88:	f7ff f974 	bl	8019274 <mac_1row_10col_fp_IOHW_forint8w>
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8019f8c:	f99a c001 	ldrsb.w	ip, [sl, #1]
 8019f90:	ee00 ca10 	vmov	s0, ip
 8019f94:	f999 c001 	ldrsb.w	ip, [r9, #1]
 8019f98:	ee00 ca90 	vmov	s1, ip
 8019f9c:	f995 c001 	ldrsb.w	ip, [r5, #1]
 8019fa0:	ee01 ca10 	vmov	s2, ip
 8019fa4:	f996 c001 	ldrsb.w	ip, [r6, #1]
 8019fa8:	ee01 ca90 	vmov	s3, ip
        filter_4 = (float)*filter_4_int8++; filter_5 = (float)*filter_5_int8++; filter_6 = (float)*filter_6_int8++; filter_7 = (float)*filter_7_int8++;
 8019fac:	f997 c001 	ldrsb.w	ip, [r7, #1]
 8019fb0:	ee02 ca10 	vmov	s4, ip
 8019fb4:	f998 c001 	ldrsb.w	ip, [r8, #1]
 8019fb8:	ee02 ca90 	vmov	s5, ip
 8019fbc:	9b03      	ldr	r3, [sp, #12]
 8019fbe:	f993 c001 	ldrsb.w	ip, [r3, #1]
 8019fc2:	ee03 ca10 	vmov	s6, ip
 8019fc6:	f994 c001 	ldrsb.w	ip, [r4, #1]
 8019fca:	ee03 ca90 	vmov	s7, ip
        filter_8 = (float)*filter_8_int8++; filter_9 = (float)*filter_9_int8++;
 8019fce:	9a01      	ldr	r2, [sp, #4]
 8019fd0:	f992 c001 	ldrsb.w	ip, [r2, #1]
 8019fd4:	ee04 ca10 	vmov	s8, ip
 8019fd8:	9802      	ldr	r0, [sp, #8]
 8019fda:	f990 c001 	ldrsb.w	ip, [r0, #1]
 8019fde:	ee04 ca90 	vmov	s9, ip
        mac_1row_10col_fp_IOHW_forint8w(&sum[1], input_0, filter_0, filter_1, filter_2, filter_3, filter_4, filter_5, filter_6, filter_7, filter_8, filter_9);
 8019fe2:	eef8 4ae4 	vcvt.f32.s32	s9, s9
 8019fe6:	eeb8 4ac4 	vcvt.f32.s32	s8, s8
 8019fea:	eef8 3ae3 	vcvt.f32.s32	s7, s7
 8019fee:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 8019ff2:	eef8 2ae2 	vcvt.f32.s32	s5, s5
 8019ff6:	eeb8 2ac2 	vcvt.f32.s32	s4, s4
 8019ffa:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 8019ffe:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 801a002:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 801a006:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 801a00a:	9904      	ldr	r1, [sp, #16]
 801a00c:	a811      	add	r0, sp, #68	@ 0x44
 801a00e:	f7ff f931 	bl	8019274 <mac_1row_10col_fp_IOHW_forint8w>
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801a012:	f99a c002 	ldrsb.w	ip, [sl, #2]
 801a016:	ee00 ca10 	vmov	s0, ip
 801a01a:	f999 c002 	ldrsb.w	ip, [r9, #2]
 801a01e:	ee00 ca90 	vmov	s1, ip
 801a022:	f995 c002 	ldrsb.w	ip, [r5, #2]
 801a026:	ee01 ca10 	vmov	s2, ip
 801a02a:	f996 c002 	ldrsb.w	ip, [r6, #2]
 801a02e:	ee01 ca90 	vmov	s3, ip
        filter_4 = (float)*filter_4_int8++; filter_5 = (float)*filter_5_int8++; filter_6 = (float)*filter_6_int8++; filter_7 = (float)*filter_7_int8++;
 801a032:	f997 c002 	ldrsb.w	ip, [r7, #2]
 801a036:	ee02 ca10 	vmov	s4, ip
 801a03a:	f998 c002 	ldrsb.w	ip, [r8, #2]
 801a03e:	ee02 ca90 	vmov	s5, ip
 801a042:	9b03      	ldr	r3, [sp, #12]
 801a044:	f993 c002 	ldrsb.w	ip, [r3, #2]
 801a048:	ee03 ca10 	vmov	s6, ip
 801a04c:	f994 c002 	ldrsb.w	ip, [r4, #2]
 801a050:	ee03 ca90 	vmov	s7, ip
        filter_8 = (float)*filter_8_int8++; filter_9 = (float)*filter_9_int8++;
 801a054:	9a01      	ldr	r2, [sp, #4]
 801a056:	f992 c002 	ldrsb.w	ip, [r2, #2]
 801a05a:	ee04 ca10 	vmov	s8, ip
 801a05e:	9802      	ldr	r0, [sp, #8]
 801a060:	f990 c002 	ldrsb.w	ip, [r0, #2]
 801a064:	ee04 ca90 	vmov	s9, ip
        mac_1row_10col_fp_IOHW_forint8w(&sum[2], input_0, filter_0, filter_1, filter_2, filter_3, filter_4, filter_5, filter_6, filter_7, filter_8, filter_9);
 801a068:	eef8 4ae4 	vcvt.f32.s32	s9, s9
 801a06c:	eeb8 4ac4 	vcvt.f32.s32	s8, s8
 801a070:	eef8 3ae3 	vcvt.f32.s32	s7, s7
 801a074:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801a078:	eef8 2ae2 	vcvt.f32.s32	s5, s5
 801a07c:	eeb8 2ac2 	vcvt.f32.s32	s4, s4
 801a080:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 801a084:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 801a088:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 801a08c:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 801a090:	9904      	ldr	r1, [sp, #16]
 801a092:	a812      	add	r0, sp, #72	@ 0x48
 801a094:	f7ff f8ee 	bl	8019274 <mac_1row_10col_fp_IOHW_forint8w>
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801a098:	f99a c003 	ldrsb.w	ip, [sl, #3]
 801a09c:	ee00 ca10 	vmov	s0, ip
 801a0a0:	f999 c003 	ldrsb.w	ip, [r9, #3]
 801a0a4:	ee00 ca90 	vmov	s1, ip
 801a0a8:	f995 c003 	ldrsb.w	ip, [r5, #3]
 801a0ac:	ee01 ca10 	vmov	s2, ip
 801a0b0:	f996 c003 	ldrsb.w	ip, [r6, #3]
 801a0b4:	ee01 ca90 	vmov	s3, ip
        filter_4 = (float)*filter_4_int8++; filter_5 = (float)*filter_5_int8++; filter_6 = (float)*filter_6_int8++; filter_7 = (float)*filter_7_int8++;
 801a0b8:	f997 c003 	ldrsb.w	ip, [r7, #3]
 801a0bc:	ee02 ca10 	vmov	s4, ip
 801a0c0:	f998 c003 	ldrsb.w	ip, [r8, #3]
 801a0c4:	ee02 ca90 	vmov	s5, ip
 801a0c8:	9b03      	ldr	r3, [sp, #12]
 801a0ca:	f993 c003 	ldrsb.w	ip, [r3, #3]
 801a0ce:	ee03 ca10 	vmov	s6, ip
 801a0d2:	f994 c003 	ldrsb.w	ip, [r4, #3]
 801a0d6:	ee03 ca90 	vmov	s7, ip
        filter_8 = (float)*filter_8_int8++; filter_9 = (float)*filter_9_int8++;
 801a0da:	9a01      	ldr	r2, [sp, #4]
 801a0dc:	f992 c003 	ldrsb.w	ip, [r2, #3]
 801a0e0:	ee04 ca10 	vmov	s8, ip
 801a0e4:	9802      	ldr	r0, [sp, #8]
 801a0e6:	f990 c003 	ldrsb.w	ip, [r0, #3]
 801a0ea:	ee04 ca90 	vmov	s9, ip
        mac_1row_10col_fp_IOHW_forint8w(&sum[3], input_0, filter_0, filter_1, filter_2, filter_3, filter_4, filter_5, filter_6, filter_7, filter_8, filter_9);
 801a0ee:	eef8 4ae4 	vcvt.f32.s32	s9, s9
 801a0f2:	eeb8 4ac4 	vcvt.f32.s32	s8, s8
 801a0f6:	eef8 3ae3 	vcvt.f32.s32	s7, s7
 801a0fa:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801a0fe:	eef8 2ae2 	vcvt.f32.s32	s5, s5
 801a102:	eeb8 2ac2 	vcvt.f32.s32	s4, s4
 801a106:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 801a10a:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 801a10e:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 801a112:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 801a116:	9904      	ldr	r1, [sp, #16]
 801a118:	a813      	add	r0, sp, #76	@ 0x4c
 801a11a:	f7ff f8ab 	bl	8019274 <mac_1row_10col_fp_IOHW_forint8w>
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801a11e:	f99a c004 	ldrsb.w	ip, [sl, #4]
 801a122:	ee00 ca10 	vmov	s0, ip
 801a126:	f999 c004 	ldrsb.w	ip, [r9, #4]
 801a12a:	ee00 ca90 	vmov	s1, ip
 801a12e:	f995 c004 	ldrsb.w	ip, [r5, #4]
 801a132:	ee01 ca10 	vmov	s2, ip
 801a136:	f996 c004 	ldrsb.w	ip, [r6, #4]
 801a13a:	ee01 ca90 	vmov	s3, ip
        filter_4 = (float)*filter_4_int8++; filter_5 = (float)*filter_5_int8++; filter_6 = (float)*filter_6_int8++; filter_7 = (float)*filter_7_int8++;
 801a13e:	f997 c004 	ldrsb.w	ip, [r7, #4]
 801a142:	ee02 ca10 	vmov	s4, ip
 801a146:	f998 c004 	ldrsb.w	ip, [r8, #4]
 801a14a:	ee02 ca90 	vmov	s5, ip
 801a14e:	9b03      	ldr	r3, [sp, #12]
 801a150:	f993 c004 	ldrsb.w	ip, [r3, #4]
 801a154:	ee03 ca10 	vmov	s6, ip
 801a158:	f994 c004 	ldrsb.w	ip, [r4, #4]
 801a15c:	ee03 ca90 	vmov	s7, ip
        filter_8 = (float)*filter_8_int8++; filter_9 = (float)*filter_9_int8++;
 801a160:	9a01      	ldr	r2, [sp, #4]
 801a162:	f992 c004 	ldrsb.w	ip, [r2, #4]
 801a166:	ee04 ca10 	vmov	s8, ip
 801a16a:	9802      	ldr	r0, [sp, #8]
 801a16c:	f990 c004 	ldrsb.w	ip, [r0, #4]
 801a170:	ee04 ca90 	vmov	s9, ip
        mac_1row_10col_fp_IOHW_forint8w(&sum[4], input_0, filter_0, filter_1, filter_2, filter_3, filter_4, filter_5, filter_6, filter_7, filter_8, filter_9);
 801a174:	eef8 4ae4 	vcvt.f32.s32	s9, s9
 801a178:	eeb8 4ac4 	vcvt.f32.s32	s8, s8
 801a17c:	eef8 3ae3 	vcvt.f32.s32	s7, s7
 801a180:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801a184:	eef8 2ae2 	vcvt.f32.s32	s5, s5
 801a188:	eeb8 2ac2 	vcvt.f32.s32	s4, s4
 801a18c:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 801a190:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 801a194:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 801a198:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 801a19c:	9904      	ldr	r1, [sp, #16]
 801a19e:	a814      	add	r0, sp, #80	@ 0x50
 801a1a0:	f7ff f868 	bl	8019274 <mac_1row_10col_fp_IOHW_forint8w>
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801a1a4:	f99a c005 	ldrsb.w	ip, [sl, #5]
 801a1a8:	ee00 ca10 	vmov	s0, ip
 801a1ac:	f999 c005 	ldrsb.w	ip, [r9, #5]
 801a1b0:	ee00 ca90 	vmov	s1, ip
 801a1b4:	f995 c005 	ldrsb.w	ip, [r5, #5]
 801a1b8:	ee01 ca10 	vmov	s2, ip
 801a1bc:	f996 c005 	ldrsb.w	ip, [r6, #5]
 801a1c0:	ee01 ca90 	vmov	s3, ip
        filter_4 = (float)*filter_4_int8++; filter_5 = (float)*filter_5_int8++; filter_6 = (float)*filter_6_int8++; filter_7 = (float)*filter_7_int8++;
 801a1c4:	f997 c005 	ldrsb.w	ip, [r7, #5]
 801a1c8:	ee02 ca10 	vmov	s4, ip
 801a1cc:	f998 c005 	ldrsb.w	ip, [r8, #5]
 801a1d0:	ee02 ca90 	vmov	s5, ip
 801a1d4:	9b03      	ldr	r3, [sp, #12]
 801a1d6:	f993 c005 	ldrsb.w	ip, [r3, #5]
 801a1da:	ee03 ca10 	vmov	s6, ip
 801a1de:	f994 c005 	ldrsb.w	ip, [r4, #5]
 801a1e2:	ee03 ca90 	vmov	s7, ip
        filter_8 = (float)*filter_8_int8++; filter_9 = (float)*filter_9_int8++;
 801a1e6:	9a01      	ldr	r2, [sp, #4]
 801a1e8:	f992 c005 	ldrsb.w	ip, [r2, #5]
 801a1ec:	ee04 ca10 	vmov	s8, ip
 801a1f0:	9802      	ldr	r0, [sp, #8]
 801a1f2:	f990 c005 	ldrsb.w	ip, [r0, #5]
 801a1f6:	ee04 ca90 	vmov	s9, ip
        mac_1row_10col_fp_IOHW_forint8w(&sum[5], input_0, filter_0, filter_1, filter_2, filter_3, filter_4, filter_5, filter_6, filter_7, filter_8, filter_9);
 801a1fa:	eef8 4ae4 	vcvt.f32.s32	s9, s9
 801a1fe:	eeb8 4ac4 	vcvt.f32.s32	s8, s8
 801a202:	eef8 3ae3 	vcvt.f32.s32	s7, s7
 801a206:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801a20a:	eef8 2ae2 	vcvt.f32.s32	s5, s5
 801a20e:	eeb8 2ac2 	vcvt.f32.s32	s4, s4
 801a212:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 801a216:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 801a21a:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 801a21e:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 801a222:	9904      	ldr	r1, [sp, #16]
 801a224:	a815      	add	r0, sp, #84	@ 0x54
 801a226:	f7ff f825 	bl	8019274 <mac_1row_10col_fp_IOHW_forint8w>
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801a22a:	f99a c006 	ldrsb.w	ip, [sl, #6]
 801a22e:	ee00 ca10 	vmov	s0, ip
 801a232:	f999 c006 	ldrsb.w	ip, [r9, #6]
 801a236:	ee00 ca90 	vmov	s1, ip
 801a23a:	f995 c006 	ldrsb.w	ip, [r5, #6]
 801a23e:	ee01 ca10 	vmov	s2, ip
 801a242:	f996 c006 	ldrsb.w	ip, [r6, #6]
 801a246:	ee01 ca90 	vmov	s3, ip
        filter_4 = (float)*filter_4_int8++; filter_5 = (float)*filter_5_int8++; filter_6 = (float)*filter_6_int8++; filter_7 = (float)*filter_7_int8++;
 801a24a:	f997 c006 	ldrsb.w	ip, [r7, #6]
 801a24e:	ee02 ca10 	vmov	s4, ip
 801a252:	f998 c006 	ldrsb.w	ip, [r8, #6]
 801a256:	ee02 ca90 	vmov	s5, ip
 801a25a:	9b03      	ldr	r3, [sp, #12]
 801a25c:	f993 c006 	ldrsb.w	ip, [r3, #6]
 801a260:	ee03 ca10 	vmov	s6, ip
 801a264:	f994 c006 	ldrsb.w	ip, [r4, #6]
 801a268:	ee03 ca90 	vmov	s7, ip
        filter_8 = (float)*filter_8_int8++; filter_9 = (float)*filter_9_int8++;
 801a26c:	9a01      	ldr	r2, [sp, #4]
 801a26e:	f992 c006 	ldrsb.w	ip, [r2, #6]
 801a272:	ee04 ca10 	vmov	s8, ip
 801a276:	9802      	ldr	r0, [sp, #8]
 801a278:	f990 c006 	ldrsb.w	ip, [r0, #6]
 801a27c:	ee04 ca90 	vmov	s9, ip
        mac_1row_10col_fp_IOHW_forint8w(&sum[6], input_0, filter_0, filter_1, filter_2, filter_3, filter_4, filter_5, filter_6, filter_7, filter_8, filter_9);
 801a280:	eef8 4ae4 	vcvt.f32.s32	s9, s9
 801a284:	eeb8 4ac4 	vcvt.f32.s32	s8, s8
 801a288:	eef8 3ae3 	vcvt.f32.s32	s7, s7
 801a28c:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801a290:	eef8 2ae2 	vcvt.f32.s32	s5, s5
 801a294:	eeb8 2ac2 	vcvt.f32.s32	s4, s4
 801a298:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 801a29c:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 801a2a0:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 801a2a4:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 801a2a8:	9904      	ldr	r1, [sp, #16]
 801a2aa:	a816      	add	r0, sp, #88	@ 0x58
 801a2ac:	f7fe ffe2 	bl	8019274 <mac_1row_10col_fp_IOHW_forint8w>
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801a2b0:	f10a 0c08 	add.w	ip, sl, #8
 801a2b4:	f8cd c018 	str.w	ip, [sp, #24]
 801a2b8:	f99a c007 	ldrsb.w	ip, [sl, #7]
 801a2bc:	ee00 ca10 	vmov	s0, ip
 801a2c0:	f109 0c08 	add.w	ip, r9, #8
 801a2c4:	f8cd c01c 	str.w	ip, [sp, #28]
 801a2c8:	f999 c007 	ldrsb.w	ip, [r9, #7]
 801a2cc:	ee00 ca90 	vmov	s1, ip
 801a2d0:	f105 0c08 	add.w	ip, r5, #8
 801a2d4:	f8cd c020 	str.w	ip, [sp, #32]
 801a2d8:	f995 5007 	ldrsb.w	r5, [r5, #7]
 801a2dc:	ee01 5a10 	vmov	s2, r5
 801a2e0:	f106 0a08 	add.w	sl, r6, #8
 801a2e4:	f996 5007 	ldrsb.w	r5, [r6, #7]
 801a2e8:	ee01 5a90 	vmov	s3, r5
        filter_4 = (float)*filter_4_int8++; filter_5 = (float)*filter_5_int8++; filter_6 = (float)*filter_6_int8++; filter_7 = (float)*filter_7_int8++;
 801a2ec:	f107 0908 	add.w	r9, r7, #8
 801a2f0:	f997 5007 	ldrsb.w	r5, [r7, #7]
 801a2f4:	ee02 5a10 	vmov	s4, r5
 801a2f8:	f108 0508 	add.w	r5, r8, #8
 801a2fc:	f998 6007 	ldrsb.w	r6, [r8, #7]
 801a300:	ee02 6a90 	vmov	s5, r6
 801a304:	9b03      	ldr	r3, [sp, #12]
 801a306:	f103 0608 	add.w	r6, r3, #8
 801a30a:	f993 7007 	ldrsb.w	r7, [r3, #7]
 801a30e:	ee03 7a10 	vmov	s6, r7
 801a312:	f104 0708 	add.w	r7, r4, #8
 801a316:	f994 4007 	ldrsb.w	r4, [r4, #7]
 801a31a:	ee03 4a90 	vmov	s7, r4
        filter_8 = (float)*filter_8_int8++; filter_9 = (float)*filter_9_int8++;
 801a31e:	9b01      	ldr	r3, [sp, #4]
 801a320:	f103 0408 	add.w	r4, r3, #8
 801a324:	f993 2007 	ldrsb.w	r2, [r3, #7]
 801a328:	ee04 2a10 	vmov	s8, r2
 801a32c:	9b02      	ldr	r3, [sp, #8]
 801a32e:	f103 0808 	add.w	r8, r3, #8
 801a332:	f993 3007 	ldrsb.w	r3, [r3, #7]
 801a336:	ee04 3a90 	vmov	s9, r3
        mac_1row_10col_fp_IOHW_forint8w(&sum[7], input_0, filter_0, filter_1, filter_2, filter_3, filter_4, filter_5, filter_6, filter_7, filter_8, filter_9);
 801a33a:	eef8 4ae4 	vcvt.f32.s32	s9, s9
 801a33e:	eeb8 4ac4 	vcvt.f32.s32	s8, s8
 801a342:	eef8 3ae3 	vcvt.f32.s32	s7, s7
 801a346:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801a34a:	eef8 2ae2 	vcvt.f32.s32	s5, s5
 801a34e:	eeb8 2ac2 	vcvt.f32.s32	s4, s4
 801a352:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 801a356:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 801a35a:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 801a35e:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 801a362:	9904      	ldr	r1, [sp, #16]
 801a364:	a817      	add	r0, sp, #92	@ 0x5c
 801a366:	f7fe ff85 	bl	8019274 <mac_1row_10col_fp_IOHW_forint8w>
        *out++ = TN_MIN(TN_MAX(sum[0], output_activation_min), output_activation_max);
 801a36a:	eddd 7a10 	vldr	s15, [sp, #64]	@ 0x40
 801a36e:	eef4 7ae8 	vcmpe.f32	s15, s17
 801a372:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a376:	dc01      	bgt.n	801a37c <pointwise_conv_fp_1row10col_10inputdepth_IOHW_int8weight+0x4e0>
 801a378:	eef0 7a68 	vmov.f32	s15, s17
 801a37c:	eef4 7ac8 	vcmpe.f32	s15, s16
 801a380:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a384:	d401      	bmi.n	801a38a <pointwise_conv_fp_1row10col_10inputdepth_IOHW_int8weight+0x4ee>
 801a386:	eef0 7a48 	vmov.f32	s15, s16
 801a38a:	edcb 7a00 	vstr	s15, [fp]
        *out++ = TN_MIN(TN_MAX(sum[1], output_activation_min), output_activation_max);
 801a38e:	eddd 7a11 	vldr	s15, [sp, #68]	@ 0x44
 801a392:	eef4 7ae8 	vcmpe.f32	s15, s17
 801a396:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a39a:	dc01      	bgt.n	801a3a0 <pointwise_conv_fp_1row10col_10inputdepth_IOHW_int8weight+0x504>
 801a39c:	eef0 7a68 	vmov.f32	s15, s17
 801a3a0:	eef4 7ac8 	vcmpe.f32	s15, s16
 801a3a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a3a8:	d401      	bmi.n	801a3ae <pointwise_conv_fp_1row10col_10inputdepth_IOHW_int8weight+0x512>
 801a3aa:	eef0 7a48 	vmov.f32	s15, s16
 801a3ae:	edcb 7a01 	vstr	s15, [fp, #4]
        *out++ = TN_MIN(TN_MAX(sum[2], output_activation_min), output_activation_max);
 801a3b2:	eddd 7a12 	vldr	s15, [sp, #72]	@ 0x48
 801a3b6:	eef4 7ae8 	vcmpe.f32	s15, s17
 801a3ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a3be:	dc01      	bgt.n	801a3c4 <pointwise_conv_fp_1row10col_10inputdepth_IOHW_int8weight+0x528>
 801a3c0:	eef0 7a68 	vmov.f32	s15, s17
 801a3c4:	eef4 7ac8 	vcmpe.f32	s15, s16
 801a3c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a3cc:	d401      	bmi.n	801a3d2 <pointwise_conv_fp_1row10col_10inputdepth_IOHW_int8weight+0x536>
 801a3ce:	eef0 7a48 	vmov.f32	s15, s16
 801a3d2:	edcb 7a02 	vstr	s15, [fp, #8]
        *out++ = TN_MIN(TN_MAX(sum[3], output_activation_min), output_activation_max);
 801a3d6:	eddd 7a13 	vldr	s15, [sp, #76]	@ 0x4c
 801a3da:	eef4 7ae8 	vcmpe.f32	s15, s17
 801a3de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a3e2:	dc01      	bgt.n	801a3e8 <pointwise_conv_fp_1row10col_10inputdepth_IOHW_int8weight+0x54c>
 801a3e4:	eef0 7a68 	vmov.f32	s15, s17
 801a3e8:	eef4 7ac8 	vcmpe.f32	s15, s16
 801a3ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a3f0:	d401      	bmi.n	801a3f6 <pointwise_conv_fp_1row10col_10inputdepth_IOHW_int8weight+0x55a>
 801a3f2:	eef0 7a48 	vmov.f32	s15, s16
 801a3f6:	edcb 7a03 	vstr	s15, [fp, #12]
        *out++ = TN_MIN(TN_MAX(sum[4], output_activation_min), output_activation_max);
 801a3fa:	eddd 7a14 	vldr	s15, [sp, #80]	@ 0x50
 801a3fe:	eef4 7ae8 	vcmpe.f32	s15, s17
 801a402:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a406:	dc01      	bgt.n	801a40c <pointwise_conv_fp_1row10col_10inputdepth_IOHW_int8weight+0x570>
 801a408:	eef0 7a68 	vmov.f32	s15, s17
 801a40c:	eef4 7ac8 	vcmpe.f32	s15, s16
 801a410:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a414:	d401      	bmi.n	801a41a <pointwise_conv_fp_1row10col_10inputdepth_IOHW_int8weight+0x57e>
 801a416:	eef0 7a48 	vmov.f32	s15, s16
 801a41a:	edcb 7a04 	vstr	s15, [fp, #16]
        *out++ = TN_MIN(TN_MAX(sum[5], output_activation_min), output_activation_max);
 801a41e:	eddd 7a15 	vldr	s15, [sp, #84]	@ 0x54
 801a422:	eef4 7ae8 	vcmpe.f32	s15, s17
 801a426:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a42a:	dc01      	bgt.n	801a430 <pointwise_conv_fp_1row10col_10inputdepth_IOHW_int8weight+0x594>
 801a42c:	eef0 7a68 	vmov.f32	s15, s17
 801a430:	eef4 7ac8 	vcmpe.f32	s15, s16
 801a434:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a438:	d401      	bmi.n	801a43e <pointwise_conv_fp_1row10col_10inputdepth_IOHW_int8weight+0x5a2>
 801a43a:	eef0 7a48 	vmov.f32	s15, s16
 801a43e:	edcb 7a05 	vstr	s15, [fp, #20]
        *out++ = TN_MIN(TN_MAX(sum[6], output_activation_min), output_activation_max);
 801a442:	eddd 7a16 	vldr	s15, [sp, #88]	@ 0x58
 801a446:	eef4 7ae8 	vcmpe.f32	s15, s17
 801a44a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a44e:	dc01      	bgt.n	801a454 <pointwise_conv_fp_1row10col_10inputdepth_IOHW_int8weight+0x5b8>
 801a450:	eef0 7a68 	vmov.f32	s15, s17
 801a454:	eef4 7ac8 	vcmpe.f32	s15, s16
 801a458:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a45c:	d401      	bmi.n	801a462 <pointwise_conv_fp_1row10col_10inputdepth_IOHW_int8weight+0x5c6>
 801a45e:	eef0 7a48 	vmov.f32	s15, s16
 801a462:	edcb 7a06 	vstr	s15, [fp, #24]
        *out++ = TN_MIN(TN_MAX(sum[7], output_activation_min), output_activation_max);
 801a466:	eddd 7a17 	vldr	s15, [sp, #92]	@ 0x5c
 801a46a:	eef4 7ae8 	vcmpe.f32	s15, s17
 801a46e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a472:	dc01      	bgt.n	801a478 <pointwise_conv_fp_1row10col_10inputdepth_IOHW_int8weight+0x5dc>
 801a474:	eef0 7a68 	vmov.f32	s15, s17
 801a478:	eef4 7ac8 	vcmpe.f32	s15, s16
 801a47c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a480:	f53f ad24 	bmi.w	8019ecc <pointwise_conv_fp_1row10col_10inputdepth_IOHW_int8weight+0x30>
 801a484:	eef0 7a48 	vmov.f32	s15, s16
 801a488:	e520      	b.n	8019ecc <pointwise_conv_fp_1row10col_10inputdepth_IOHW_int8weight+0x30>
    for (i_ch_in = 0; i_ch_in < input_depth; i_ch_in+=10) {
 801a48a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801a48c:	f8dd c028 	ldr.w	ip, [sp, #40]	@ 0x28
 801a490:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 801a492:	465c      	mov	r4, fp
 801a494:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801a496:	320a      	adds	r2, #10
 801a498:	4594      	cmp	ip, r2
 801a49a:	dd34      	ble.n	801a506 <pointwise_conv_fp_1row10col_10inputdepth_IOHW_int8weight+0x66a>
      const float* input_0 = &input_data[i_element * input_depth];
 801a49c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801a49e:	fb03 f30c 	mul.w	r3, r3, ip
 801a4a2:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 801a4a4:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 801a4a8:	9304      	str	r3, [sp, #16]
      const int8_t* filter_0_int8 = &filter_data[i_ch_in * output_depth];
 801a4aa:	fb02 0a01 	mla	sl, r2, r1, r0
      const int8_t* filter_1_int8 = &filter_data[(i_ch_in + 1) * output_depth];
 801a4ae:	fb02 1901 	mla	r9, r2, r1, r1
 801a4b2:	4481      	add	r9, r0
      const int8_t* filter_2_int8 = &filter_data[(i_ch_in + 2) * output_depth];
 801a4b4:	1c95      	adds	r5, r2, #2
 801a4b6:	fb05 0501 	mla	r5, r5, r1, r0
      const int8_t* filter_3_int8 = &filter_data[(i_ch_in + 3) * output_depth];
 801a4ba:	1cd6      	adds	r6, r2, #3
 801a4bc:	fb06 0601 	mla	r6, r6, r1, r0
      const int8_t* filter_4_int8 = &filter_data[(i_ch_in + 4) * output_depth];
 801a4c0:	1d17      	adds	r7, r2, #4
 801a4c2:	fb07 0701 	mla	r7, r7, r1, r0
      const int8_t* filter_5_int8 = &filter_data[(i_ch_in + 5) * output_depth];
 801a4c6:	f102 0805 	add.w	r8, r2, #5
 801a4ca:	fb08 0801 	mla	r8, r8, r1, r0
      const int8_t* filter_6_int8 = &filter_data[(i_ch_in + 6) * output_depth];
 801a4ce:	1d93      	adds	r3, r2, #6
 801a4d0:	fb03 0b01 	mla	fp, r3, r1, r0
      const int8_t* filter_7_int8 = &filter_data[(i_ch_in + 7) * output_depth];
 801a4d4:	1dd3      	adds	r3, r2, #7
 801a4d6:	fb03 0301 	mla	r3, r3, r1, r0
 801a4da:	9305      	str	r3, [sp, #20]
      const int8_t* filter_8_int8 = &filter_data[(i_ch_in + 8) * output_depth];
 801a4dc:	f102 0308 	add.w	r3, r2, #8
 801a4e0:	fb03 0301 	mla	r3, r3, r1, r0
 801a4e4:	9301      	str	r3, [sp, #4]
      const int8_t* filter_9_int8 = &filter_data[(i_ch_in + 9) * output_depth];
 801a4e6:	f102 0309 	add.w	r3, r2, #9
 801a4ea:	fb03 0301 	mla	r3, r3, r1, r0
 801a4ee:	9302      	str	r3, [sp, #8]
      uint16_t col_count_div8 = (output_depth * DIM_KER_X * DIM_KER_Y) >> 3;
 801a4f0:	08cb      	lsrs	r3, r1, #3
      while (col_count_div8--) {
 801a4f2:	9209      	str	r2, [sp, #36]	@ 0x24
 801a4f4:	f8cd b00c 	str.w	fp, [sp, #12]
 801a4f8:	f8cd c028 	str.w	ip, [sp, #40]	@ 0x28
 801a4fc:	900b      	str	r0, [sp, #44]	@ 0x2c
 801a4fe:	46a3      	mov	fp, r4
 801a500:	9c05      	ldr	r4, [sp, #20]
 801a502:	910c      	str	r1, [sp, #48]	@ 0x30
 801a504:	e4f4      	b.n	8019ef0 <pointwise_conv_fp_1row10col_10inputdepth_IOHW_int8weight+0x54>
  for (i_element = 0; i_element < num_elements; i_element++) {
 801a506:	f8dd e034 	ldr.w	lr, [sp, #52]	@ 0x34
 801a50a:	9426      	str	r4, [sp, #152]	@ 0x98
 801a50c:	f10e 0e01 	add.w	lr, lr, #1
 801a510:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801a512:	459e      	cmp	lr, r3
 801a514:	da04      	bge.n	801a520 <pointwise_conv_fp_1row10col_10inputdepth_IOHW_int8weight+0x684>
    for (i_ch_in = 0; i_ch_in < input_depth; i_ch_in+=10) {
 801a516:	2200      	movs	r2, #0
 801a518:	f8cd e034 	str.w	lr, [sp, #52]	@ 0x34
 801a51c:	9c26      	ldr	r4, [sp, #152]	@ 0x98
 801a51e:	e7bb      	b.n	801a498 <pointwise_conv_fp_1row10col_10inputdepth_IOHW_int8weight+0x5fc>
      }
    }
  }
}
 801a520:	b019      	add	sp, #100	@ 0x64
 801a522:	ecbd 8b02 	vpop	{d8}
 801a526:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801a52c <pointwise_conv_fp_4row4col_IOHW_int8weight>:
tinyengine_status_fp pointwise_conv_fp_4row4col_IOHW_int8weight(const float* input_data, 
                 const uint16_t input_height, const uint16_t input_width, const uint16_t input_depth, 
                 const int8_t* filter_data, const float* bias_data, 
                 float* output_data, const uint16_t output_height, const uint16_t output_width, const uint16_t output_depth, 
                 const float output_activation_min, const float output_activation_max,
                 float* im2col_data, const uint16_t batches) {
 801a52c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a530:	ed2d 8b02 	vpush	{d8}
 801a534:	b0b1      	sub	sp, #196	@ 0xc4
 801a536:	9009      	str	r0, [sp, #36]	@ 0x24
 801a538:	4618      	mov	r0, r3
 801a53a:	f8dd e0f0 	ldr.w	lr, [sp, #240]	@ 0xf0
 801a53e:	f8bd 2104 	ldrh.w	r2, [sp, #260]	@ 0x104
 801a542:	eeb0 8a40 	vmov.f32	s16, s0
 801a546:	eef0 8a60 	vmov.f32	s17, s1
  (void) input_height;
  (void) input_width;

  int i_element;
  const int num_elements = output_height * output_width;
 801a54a:	f8bd 30fc 	ldrh.w	r3, [sp, #252]	@ 0xfc
 801a54e:	f8bd 1100 	ldrh.w	r1, [sp, #256]	@ 0x100
 801a552:	fb01 f503 	mul.w	r5, r1, r3
 801a556:	950e      	str	r5, [sp, #56]	@ 0x38

  /* Initialize output data as 0 (assume bias == NULL) */
  for(i_element = 0; i_element < output_depth*num_elements; i_element++) {
 801a558:	2300      	movs	r3, #0
 801a55a:	9e3e      	ldr	r6, [sp, #248]	@ 0xf8
 801a55c:	e004      	b.n	801a568 <pointwise_conv_fp_4row4col_IOHW_int8weight+0x3c>
    output_data[i_element] = 0;
 801a55e:	eb06 0183 	add.w	r1, r6, r3, lsl #2
 801a562:	2400      	movs	r4, #0
 801a564:	600c      	str	r4, [r1, #0]
  for(i_element = 0; i_element < output_depth*num_elements; i_element++) {
 801a566:	3301      	adds	r3, #1
 801a568:	fb05 f102 	mul.w	r1, r5, r2
 801a56c:	4299      	cmp	r1, r3
 801a56e:	dcf6      	bgt.n	801a55e <pointwise_conv_fp_4row4col_IOHW_int8weight+0x32>
  }

  for (i_element = 0; i_element/4 < num_elements/4; i_element+=4) {
 801a570:	f04f 0c00 	mov.w	ip, #0
 801a574:	920f      	str	r2, [sp, #60]	@ 0x3c
 801a576:	e180      	b.n	801a87a <pointwise_conv_fp_4row4col_IOHW_int8weight+0x34e>

      uint16_t col_count_div8 = (output_depth * DIM_KER_X * DIM_KER_Y) >> 3;

      while (col_count_div8--) {
        /* Initialize partial sum (assume bias == NULL) */
        float sum[32] = {};
 801a578:	2280      	movs	r2, #128	@ 0x80
 801a57a:	2100      	movs	r1, #0
 801a57c:	a810      	add	r0, sp, #64	@ 0x40
 801a57e:	f009 fb9d 	bl	8023cbc <memset>

        /* MAC computation */
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801a582:	f997 3000 	ldrsb.w	r3, [r7]
 801a586:	ee00 3a10 	vmov	s0, r3
 801a58a:	f996 3000 	ldrsb.w	r3, [r6]
 801a58e:	ee00 3a90 	vmov	s1, r3
 801a592:	f995 3000 	ldrsb.w	r3, [r5]
 801a596:	ee01 3a10 	vmov	s2, r3
 801a59a:	f994 3000 	ldrsb.w	r3, [r4]
 801a59e:	ee01 3a90 	vmov	s3, r3
        mac_4row_4col_fp_IOHW_forint8w(&sum[0], input_0, input_1, input_2, input_3, filter_0, filter_1, filter_2, filter_3);
 801a5a2:	f8cd 8000 	str.w	r8, [sp]
 801a5a6:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 801a5aa:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 801a5ae:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 801a5b2:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 801a5b6:	465b      	mov	r3, fp
 801a5b8:	464a      	mov	r2, r9
 801a5ba:	4651      	mov	r1, sl
 801a5bc:	a810      	add	r0, sp, #64	@ 0x40
 801a5be:	f7fe feac 	bl	801931a <mac_4row_4col_fp_IOHW_forint8w>
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801a5c2:	f997 3001 	ldrsb.w	r3, [r7, #1]
 801a5c6:	ee00 3a10 	vmov	s0, r3
 801a5ca:	f996 3001 	ldrsb.w	r3, [r6, #1]
 801a5ce:	ee00 3a90 	vmov	s1, r3
 801a5d2:	f995 3001 	ldrsb.w	r3, [r5, #1]
 801a5d6:	ee01 3a10 	vmov	s2, r3
 801a5da:	f994 3001 	ldrsb.w	r3, [r4, #1]
 801a5de:	ee01 3a90 	vmov	s3, r3
        mac_4row_4col_fp_IOHW_forint8w(&sum[4], input_0, input_1, input_2, input_3, filter_0, filter_1, filter_2, filter_3);
 801a5e2:	f8cd 8000 	str.w	r8, [sp]
 801a5e6:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 801a5ea:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 801a5ee:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 801a5f2:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 801a5f6:	465b      	mov	r3, fp
 801a5f8:	464a      	mov	r2, r9
 801a5fa:	4651      	mov	r1, sl
 801a5fc:	a814      	add	r0, sp, #80	@ 0x50
 801a5fe:	f7fe fe8c 	bl	801931a <mac_4row_4col_fp_IOHW_forint8w>
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801a602:	f997 3002 	ldrsb.w	r3, [r7, #2]
 801a606:	ee00 3a10 	vmov	s0, r3
 801a60a:	f996 3002 	ldrsb.w	r3, [r6, #2]
 801a60e:	ee00 3a90 	vmov	s1, r3
 801a612:	f995 3002 	ldrsb.w	r3, [r5, #2]
 801a616:	ee01 3a10 	vmov	s2, r3
 801a61a:	f994 3002 	ldrsb.w	r3, [r4, #2]
 801a61e:	ee01 3a90 	vmov	s3, r3
        mac_4row_4col_fp_IOHW_forint8w(&sum[8], input_0, input_1, input_2, input_3, filter_0, filter_1, filter_2, filter_3);
 801a622:	f8cd 8000 	str.w	r8, [sp]
 801a626:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 801a62a:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 801a62e:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 801a632:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 801a636:	465b      	mov	r3, fp
 801a638:	464a      	mov	r2, r9
 801a63a:	4651      	mov	r1, sl
 801a63c:	a818      	add	r0, sp, #96	@ 0x60
 801a63e:	f7fe fe6c 	bl	801931a <mac_4row_4col_fp_IOHW_forint8w>
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801a642:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801a646:	ee00 3a10 	vmov	s0, r3
 801a64a:	f996 3003 	ldrsb.w	r3, [r6, #3]
 801a64e:	ee00 3a90 	vmov	s1, r3
 801a652:	f995 3003 	ldrsb.w	r3, [r5, #3]
 801a656:	ee01 3a10 	vmov	s2, r3
 801a65a:	f994 3003 	ldrsb.w	r3, [r4, #3]
 801a65e:	ee01 3a90 	vmov	s3, r3
        mac_4row_4col_fp_IOHW_forint8w(&sum[12], input_0, input_1, input_2, input_3, filter_0, filter_1, filter_2, filter_3);
 801a662:	f8cd 8000 	str.w	r8, [sp]
 801a666:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 801a66a:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 801a66e:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 801a672:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 801a676:	465b      	mov	r3, fp
 801a678:	464a      	mov	r2, r9
 801a67a:	4651      	mov	r1, sl
 801a67c:	a81c      	add	r0, sp, #112	@ 0x70
 801a67e:	f7fe fe4c 	bl	801931a <mac_4row_4col_fp_IOHW_forint8w>
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801a682:	f997 3004 	ldrsb.w	r3, [r7, #4]
 801a686:	ee00 3a10 	vmov	s0, r3
 801a68a:	f996 3004 	ldrsb.w	r3, [r6, #4]
 801a68e:	ee00 3a90 	vmov	s1, r3
 801a692:	f995 3004 	ldrsb.w	r3, [r5, #4]
 801a696:	ee01 3a10 	vmov	s2, r3
 801a69a:	f994 3004 	ldrsb.w	r3, [r4, #4]
 801a69e:	ee01 3a90 	vmov	s3, r3
        mac_4row_4col_fp_IOHW_forint8w(&sum[16], input_0, input_1, input_2, input_3, filter_0, filter_1, filter_2, filter_3);
 801a6a2:	f8cd 8000 	str.w	r8, [sp]
 801a6a6:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 801a6aa:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 801a6ae:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 801a6b2:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 801a6b6:	465b      	mov	r3, fp
 801a6b8:	464a      	mov	r2, r9
 801a6ba:	4651      	mov	r1, sl
 801a6bc:	a820      	add	r0, sp, #128	@ 0x80
 801a6be:	f7fe fe2c 	bl	801931a <mac_4row_4col_fp_IOHW_forint8w>
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801a6c2:	f997 3005 	ldrsb.w	r3, [r7, #5]
 801a6c6:	ee00 3a10 	vmov	s0, r3
 801a6ca:	f996 3005 	ldrsb.w	r3, [r6, #5]
 801a6ce:	ee00 3a90 	vmov	s1, r3
 801a6d2:	f995 3005 	ldrsb.w	r3, [r5, #5]
 801a6d6:	ee01 3a10 	vmov	s2, r3
 801a6da:	f994 3005 	ldrsb.w	r3, [r4, #5]
 801a6de:	ee01 3a90 	vmov	s3, r3
        mac_4row_4col_fp_IOHW_forint8w(&sum[20], input_0, input_1, input_2, input_3, filter_0, filter_1, filter_2, filter_3);
 801a6e2:	f8cd 8000 	str.w	r8, [sp]
 801a6e6:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 801a6ea:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 801a6ee:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 801a6f2:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 801a6f6:	465b      	mov	r3, fp
 801a6f8:	464a      	mov	r2, r9
 801a6fa:	4651      	mov	r1, sl
 801a6fc:	a824      	add	r0, sp, #144	@ 0x90
 801a6fe:	f7fe fe0c 	bl	801931a <mac_4row_4col_fp_IOHW_forint8w>
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801a702:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801a706:	ee00 3a10 	vmov	s0, r3
 801a70a:	f996 3006 	ldrsb.w	r3, [r6, #6]
 801a70e:	ee00 3a90 	vmov	s1, r3
 801a712:	f995 3006 	ldrsb.w	r3, [r5, #6]
 801a716:	ee01 3a10 	vmov	s2, r3
 801a71a:	f994 3006 	ldrsb.w	r3, [r4, #6]
 801a71e:	ee01 3a90 	vmov	s3, r3
        mac_4row_4col_fp_IOHW_forint8w(&sum[24], input_0, input_1, input_2, input_3, filter_0, filter_1, filter_2, filter_3);
 801a722:	f8cd 8000 	str.w	r8, [sp]
 801a726:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 801a72a:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 801a72e:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 801a732:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 801a736:	465b      	mov	r3, fp
 801a738:	464a      	mov	r2, r9
 801a73a:	4651      	mov	r1, sl
 801a73c:	a828      	add	r0, sp, #160	@ 0xa0
 801a73e:	f7fe fdec 	bl	801931a <mac_4row_4col_fp_IOHW_forint8w>
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801a742:	f107 0308 	add.w	r3, r7, #8
 801a746:	9307      	str	r3, [sp, #28]
 801a748:	f997 2007 	ldrsb.w	r2, [r7, #7]
 801a74c:	ee00 2a10 	vmov	s0, r2
 801a750:	f106 0708 	add.w	r7, r6, #8
 801a754:	f996 2007 	ldrsb.w	r2, [r6, #7]
 801a758:	ee00 2a90 	vmov	s1, r2
 801a75c:	f105 0608 	add.w	r6, r5, #8
 801a760:	f995 2007 	ldrsb.w	r2, [r5, #7]
 801a764:	ee01 2a10 	vmov	s2, r2
 801a768:	f104 0508 	add.w	r5, r4, #8
 801a76c:	f994 2007 	ldrsb.w	r2, [r4, #7]
 801a770:	ee01 2a90 	vmov	s3, r2
        mac_4row_4col_fp_IOHW_forint8w(&sum[28], input_0, input_1, input_2, input_3, filter_0, filter_1, filter_2, filter_3);
 801a774:	f8cd 8000 	str.w	r8, [sp]
 801a778:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 801a77c:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 801a780:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 801a784:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 801a788:	465b      	mov	r3, fp
 801a78a:	464a      	mov	r2, r9
 801a78c:	4651      	mov	r1, sl
 801a78e:	a82c      	add	r0, sp, #176	@ 0xb0
 801a790:	f7fe fdc3 	bl	801931a <mac_4row_4col_fp_IOHW_forint8w>

        /* Accumulate partial sum into output data */
        assign_sum_to_pointwise_output_4row8col(out_0, out_1, out_2, out_3, sum, output_activation_min, output_activation_max);
 801a794:	aa10      	add	r2, sp, #64	@ 0x40
 801a796:	9200      	str	r2, [sp, #0]
 801a798:	eef0 0a68 	vmov.f32	s1, s17
 801a79c:	eeb0 0a48 	vmov.f32	s0, s16
 801a7a0:	9b04      	ldr	r3, [sp, #16]
 801a7a2:	9a03      	ldr	r2, [sp, #12]
 801a7a4:	9902      	ldr	r1, [sp, #8]
 801a7a6:	9c05      	ldr	r4, [sp, #20]
 801a7a8:	4620      	mov	r0, r4
 801a7aa:	f7fe fe43 	bl	8019434 <assign_sum_to_pointwise_output_4row8col>
        out_0 += 8; out_1 += 8; out_2 += 8; out_3 += 8;
 801a7ae:	4620      	mov	r0, r4
 801a7b0:	3020      	adds	r0, #32
 801a7b2:	9005      	str	r0, [sp, #20]
 801a7b4:	9902      	ldr	r1, [sp, #8]
 801a7b6:	3120      	adds	r1, #32
 801a7b8:	9102      	str	r1, [sp, #8]
 801a7ba:	9a03      	ldr	r2, [sp, #12]
 801a7bc:	3220      	adds	r2, #32
 801a7be:	9203      	str	r2, [sp, #12]
 801a7c0:	9b04      	ldr	r3, [sp, #16]
 801a7c2:	3320      	adds	r3, #32
 801a7c4:	9304      	str	r3, [sp, #16]
      while (col_count_div8--) {
 801a7c6:	9b06      	ldr	r3, [sp, #24]
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801a7c8:	462c      	mov	r4, r5
 801a7ca:	4635      	mov	r5, r6
 801a7cc:	463e      	mov	r6, r7
 801a7ce:	9f07      	ldr	r7, [sp, #28]
      while (col_count_div8--) {
 801a7d0:	1e5a      	subs	r2, r3, #1
 801a7d2:	b292      	uxth	r2, r2
 801a7d4:	9206      	str	r2, [sp, #24]
 801a7d6:	2b00      	cmp	r3, #0
 801a7d8:	f47f aece 	bne.w	801a578 <pointwise_conv_fp_4row4col_IOHW_int8weight+0x4c>
    for (i_ch_in = 0; i_ch_in < input_depth; i_ch_in+=4) {
 801a7dc:	f8dd c028 	ldr.w	ip, [sp, #40]	@ 0x28
 801a7e0:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 801a7e2:	f8dd e030 	ldr.w	lr, [sp, #48]	@ 0x30
 801a7e6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801a7e8:	9b08      	ldr	r3, [sp, #32]
 801a7ea:	3304      	adds	r3, #4
 801a7ec:	9308      	str	r3, [sp, #32]
 801a7ee:	9b08      	ldr	r3, [sp, #32]
 801a7f0:	4298      	cmp	r0, r3
 801a7f2:	dd40      	ble.n	801a876 <pointwise_conv_fp_4row4col_IOHW_int8weight+0x34a>
      float* out_0 = &output_data[i_element * output_depth];
 801a7f4:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801a7f6:	fb0c f304 	mul.w	r3, ip, r4
 801a7fa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801a7fe:	9305      	str	r3, [sp, #20]
      float* out_1 = &output_data[(i_element + 1) * output_depth];
 801a800:	fb0c 4304 	mla	r3, ip, r4, r4
 801a804:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801a808:	9302      	str	r3, [sp, #8]
      float* out_2 = &output_data[(i_element + 2) * output_depth];
 801a80a:	f10c 0302 	add.w	r3, ip, #2
 801a80e:	fb03 f104 	mul.w	r1, r3, r4
 801a812:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 801a816:	9103      	str	r1, [sp, #12]
      float* out_3 = &output_data[(i_element + 3) * output_depth];
 801a818:	f10c 0803 	add.w	r8, ip, #3
 801a81c:	fb08 f104 	mul.w	r1, r8, r4
 801a820:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 801a824:	9104      	str	r1, [sp, #16]
      const float* input_0 = &input_data[i_element * input_depth + i_ch_in];
 801a826:	9d08      	ldr	r5, [sp, #32]
 801a828:	fb0c 5100 	mla	r1, ip, r0, r5
 801a82c:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 801a82e:	eb06 0a81 	add.w	sl, r6, r1, lsl #2
      const float* input_1 = &input_data[(i_element + 1) * input_depth + i_ch_in];
 801a832:	fb0c 0100 	mla	r1, ip, r0, r0
 801a836:	4429      	add	r1, r5
 801a838:	eb06 0981 	add.w	r9, r6, r1, lsl #2
      const float* input_2 = &input_data[(i_element + 2) * input_depth + i_ch_in];
 801a83c:	4629      	mov	r1, r5
 801a83e:	fb00 5303 	mla	r3, r0, r3, r5
 801a842:	eb06 0b83 	add.w	fp, r6, r3, lsl #2
      const float* input_3 = &input_data[(i_element + 3) * input_depth + i_ch_in];
 801a846:	fb00 5808 	mla	r8, r0, r8, r5
 801a84a:	eb06 0888 	add.w	r8, r6, r8, lsl #2
      const int8_t* filter_0_int8 = &filter_data[i_ch_in * output_depth];
 801a84e:	fb05 e704 	mla	r7, r5, r4, lr
      const int8_t* filter_1_int8 = &filter_data[(i_ch_in + 1) * output_depth];
 801a852:	fb05 4604 	mla	r6, r5, r4, r4
 801a856:	4476      	add	r6, lr
      const int8_t* filter_2_int8 = &filter_data[(i_ch_in + 2) * output_depth];
 801a858:	3502      	adds	r5, #2
 801a85a:	4623      	mov	r3, r4
 801a85c:	fb05 e504 	mla	r5, r5, r4, lr
      const int8_t* filter_3_int8 = &filter_data[(i_ch_in + 3) * output_depth];
 801a860:	1ccc      	adds	r4, r1, #3
 801a862:	fb04 e403 	mla	r4, r4, r3, lr
      uint16_t col_count_div8 = (output_depth * DIM_KER_X * DIM_KER_Y) >> 3;
 801a866:	08db      	lsrs	r3, r3, #3
      while (col_count_div8--) {
 801a868:	f8cd c028 	str.w	ip, [sp, #40]	@ 0x28
 801a86c:	900b      	str	r0, [sp, #44]	@ 0x2c
 801a86e:	f8cd e030 	str.w	lr, [sp, #48]	@ 0x30
 801a872:	920d      	str	r2, [sp, #52]	@ 0x34
 801a874:	e7ac      	b.n	801a7d0 <pointwise_conv_fp_4row4col_IOHW_int8weight+0x2a4>
  for (i_element = 0; i_element/4 < num_elements/4; i_element+=4) {
 801a876:	f10c 0c04 	add.w	ip, ip, #4
 801a87a:	4663      	mov	r3, ip
 801a87c:	f1bc 0f00 	cmp.w	ip, #0
 801a880:	db0b      	blt.n	801a89a <pointwise_conv_fp_4row4col_IOHW_int8weight+0x36e>
 801a882:	109b      	asrs	r3, r3, #2
 801a884:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801a886:	4611      	mov	r1, r2
 801a888:	2a00      	cmp	r2, #0
 801a88a:	db09      	blt.n	801a8a0 <pointwise_conv_fp_4row4col_IOHW_int8weight+0x374>
 801a88c:	ebb3 0fa1 	cmp.w	r3, r1, asr #2
 801a890:	da08      	bge.n	801a8a4 <pointwise_conv_fp_4row4col_IOHW_int8weight+0x378>
    for (i_ch_in = 0; i_ch_in < input_depth; i_ch_in+=4) {
 801a892:	2100      	movs	r1, #0
 801a894:	9108      	str	r1, [sp, #32]
 801a896:	9a3e      	ldr	r2, [sp, #248]	@ 0xf8
 801a898:	e7a9      	b.n	801a7ee <pointwise_conv_fp_4row4col_IOHW_int8weight+0x2c2>
  for (i_element = 0; i_element/4 < num_elements/4; i_element+=4) {
 801a89a:	f10c 0303 	add.w	r3, ip, #3
 801a89e:	e7f0      	b.n	801a882 <pointwise_conv_fp_4row4col_IOHW_int8weight+0x356>
 801a8a0:	1cd1      	adds	r1, r2, #3
 801a8a2:	e7f3      	b.n	801a88c <pointwise_conv_fp_4row4col_IOHW_int8weight+0x360>
      }
    }
  }

  /* Handle left-over part */
  int leftover_elements = num_elements & 0x3;
 801a8a4:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801a8a6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801a8a8:	f003 0103 	and.w	r1, r3, #3

  while (leftover_elements) {
 801a8ac:	e1d6      	b.n	801ac5c <pointwise_conv_fp_4row4col_IOHW_int8weight+0x730>

      uint16_t col_count_div8 = (output_depth * DIM_KER_X * DIM_KER_Y) >> 3;

      while (col_count_div8--) {
        /* Initialize partial sum (assume bias == NULL) */
        float sum[8] = {};
 801a8ae:	2220      	movs	r2, #32
 801a8b0:	2100      	movs	r1, #0
 801a8b2:	a810      	add	r0, sp, #64	@ 0x40
 801a8b4:	f009 fa02 	bl	8023cbc <memset>

        /* MAC computation */
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801a8b8:	f997 3000 	ldrsb.w	r3, [r7]
 801a8bc:	ee07 3a90 	vmov	s15, r3
 801a8c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a8c4:	f996 3000 	ldrsb.w	r3, [r6]
 801a8c8:	ee06 3a90 	vmov	s13, r3
 801a8cc:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801a8d0:	f995 3000 	ldrsb.w	r3, [r5]
 801a8d4:	ee07 3a10 	vmov	s14, r3
 801a8d8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801a8dc:	f994 3000 	ldrsb.w	r3, [r4]
 801a8e0:	ee04 3a90 	vmov	s9, r3
 801a8e4:	eef8 4ae4 	vcvt.f32.s32	s9, s9
  *sum += *input_0++ * filter_0;
 801a8e8:	ed98 5a00 	vldr	s10, [r8]
 801a8ec:	ee67 7a85 	vmul.f32	s15, s15, s10
 801a8f0:	eddf 5ae0 	vldr	s11, [pc, #896]	@ 801ac74 <pointwise_conv_fp_4row4col_IOHW_int8weight+0x748>
 801a8f4:	ee77 7aa5 	vadd.f32	s15, s15, s11
 801a8f8:	edcd 7a10 	vstr	s15, [sp, #64]	@ 0x40
  *sum += *input_0++ * filter_1;
 801a8fc:	ed98 6a01 	vldr	s12, [r8, #4]
 801a900:	ee66 6a86 	vmul.f32	s13, s13, s12
 801a904:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801a908:	edcd 7a10 	vstr	s15, [sp, #64]	@ 0x40
  *sum += *input_0++ * filter_2;
 801a90c:	edd8 6a02 	vldr	s13, [r8, #8]
 801a910:	ee27 7a26 	vmul.f32	s14, s14, s13
 801a914:	ee77 7a87 	vadd.f32	s15, s15, s14
 801a918:	edcd 7a10 	vstr	s15, [sp, #64]	@ 0x40
  *sum += *input_0++ * filter_3;
 801a91c:	ed98 7a03 	vldr	s14, [r8, #12]
 801a920:	ee64 4a87 	vmul.f32	s9, s9, s14
 801a924:	ee77 7aa4 	vadd.f32	s15, s15, s9
 801a928:	edcd 7a10 	vstr	s15, [sp, #64]	@ 0x40
        mac_1row_4col_fp_IOHW_forint8w(&sum[0], input_0, filter_0, filter_1, filter_2, filter_3);
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801a92c:	f997 3001 	ldrsb.w	r3, [r7, #1]
 801a930:	ee07 3a90 	vmov	s15, r3
 801a934:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a938:	f996 3001 	ldrsb.w	r3, [r6, #1]
 801a93c:	ee03 3a90 	vmov	s7, r3
 801a940:	eef8 3ae3 	vcvt.f32.s32	s7, s7
 801a944:	f995 3001 	ldrsb.w	r3, [r5, #1]
 801a948:	ee04 3a10 	vmov	s8, r3
 801a94c:	eeb8 4ac4 	vcvt.f32.s32	s8, s8
 801a950:	f994 3001 	ldrsb.w	r3, [r4, #1]
 801a954:	ee04 3a90 	vmov	s9, r3
 801a958:	eef8 4ae4 	vcvt.f32.s32	s9, s9
  *sum += *input_0++ * filter_0;
 801a95c:	ee67 7a85 	vmul.f32	s15, s15, s10
 801a960:	ee77 7aa5 	vadd.f32	s15, s15, s11
 801a964:	edcd 7a11 	vstr	s15, [sp, #68]	@ 0x44
  *sum += *input_0++ * filter_1;
 801a968:	ee63 3a86 	vmul.f32	s7, s7, s12
 801a96c:	ee77 7aa3 	vadd.f32	s15, s15, s7
 801a970:	edcd 7a11 	vstr	s15, [sp, #68]	@ 0x44
  *sum += *input_0++ * filter_2;
 801a974:	ee24 4a26 	vmul.f32	s8, s8, s13
 801a978:	ee77 7a84 	vadd.f32	s15, s15, s8
 801a97c:	edcd 7a11 	vstr	s15, [sp, #68]	@ 0x44
  *sum += *input_0++ * filter_3;
 801a980:	ee64 4a87 	vmul.f32	s9, s9, s14
 801a984:	ee77 7aa4 	vadd.f32	s15, s15, s9
 801a988:	edcd 7a11 	vstr	s15, [sp, #68]	@ 0x44
        mac_1row_4col_fp_IOHW_forint8w(&sum[1], input_0, filter_0, filter_1, filter_2, filter_3);
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801a98c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 801a990:	ee07 3a90 	vmov	s15, r3
 801a994:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a998:	f996 3002 	ldrsb.w	r3, [r6, #2]
 801a99c:	ee03 3a90 	vmov	s7, r3
 801a9a0:	eef8 3ae3 	vcvt.f32.s32	s7, s7
 801a9a4:	f995 3002 	ldrsb.w	r3, [r5, #2]
 801a9a8:	ee04 3a10 	vmov	s8, r3
 801a9ac:	eeb8 4ac4 	vcvt.f32.s32	s8, s8
 801a9b0:	f994 3002 	ldrsb.w	r3, [r4, #2]
 801a9b4:	ee04 3a90 	vmov	s9, r3
 801a9b8:	eef8 4ae4 	vcvt.f32.s32	s9, s9
  *sum += *input_0++ * filter_0;
 801a9bc:	ee67 7a85 	vmul.f32	s15, s15, s10
 801a9c0:	ee77 7aa5 	vadd.f32	s15, s15, s11
 801a9c4:	edcd 7a12 	vstr	s15, [sp, #72]	@ 0x48
  *sum += *input_0++ * filter_1;
 801a9c8:	ee63 3a86 	vmul.f32	s7, s7, s12
 801a9cc:	ee77 7aa3 	vadd.f32	s15, s15, s7
 801a9d0:	edcd 7a12 	vstr	s15, [sp, #72]	@ 0x48
  *sum += *input_0++ * filter_2;
 801a9d4:	ee24 4a26 	vmul.f32	s8, s8, s13
 801a9d8:	ee77 7a84 	vadd.f32	s15, s15, s8
 801a9dc:	edcd 7a12 	vstr	s15, [sp, #72]	@ 0x48
  *sum += *input_0++ * filter_3;
 801a9e0:	ee64 4a87 	vmul.f32	s9, s9, s14
 801a9e4:	ee77 7aa4 	vadd.f32	s15, s15, s9
 801a9e8:	edcd 7a12 	vstr	s15, [sp, #72]	@ 0x48
        mac_1row_4col_fp_IOHW_forint8w(&sum[2], input_0, filter_0, filter_1, filter_2, filter_3);
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801a9ec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801a9f0:	ee07 3a90 	vmov	s15, r3
 801a9f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a9f8:	f996 3003 	ldrsb.w	r3, [r6, #3]
 801a9fc:	ee03 3a90 	vmov	s7, r3
 801aa00:	eef8 3ae3 	vcvt.f32.s32	s7, s7
 801aa04:	f995 3003 	ldrsb.w	r3, [r5, #3]
 801aa08:	ee04 3a10 	vmov	s8, r3
 801aa0c:	eeb8 4ac4 	vcvt.f32.s32	s8, s8
 801aa10:	f994 3003 	ldrsb.w	r3, [r4, #3]
 801aa14:	ee04 3a90 	vmov	s9, r3
 801aa18:	eef8 4ae4 	vcvt.f32.s32	s9, s9
  *sum += *input_0++ * filter_0;
 801aa1c:	ee67 7a85 	vmul.f32	s15, s15, s10
 801aa20:	ee77 7aa5 	vadd.f32	s15, s15, s11
 801aa24:	edcd 7a13 	vstr	s15, [sp, #76]	@ 0x4c
  *sum += *input_0++ * filter_1;
 801aa28:	ee63 3a86 	vmul.f32	s7, s7, s12
 801aa2c:	ee77 7aa3 	vadd.f32	s15, s15, s7
 801aa30:	edcd 7a13 	vstr	s15, [sp, #76]	@ 0x4c
  *sum += *input_0++ * filter_2;
 801aa34:	ee24 4a26 	vmul.f32	s8, s8, s13
 801aa38:	ee77 7a84 	vadd.f32	s15, s15, s8
 801aa3c:	edcd 7a13 	vstr	s15, [sp, #76]	@ 0x4c
  *sum += *input_0++ * filter_3;
 801aa40:	ee64 4a87 	vmul.f32	s9, s9, s14
 801aa44:	ee77 7aa4 	vadd.f32	s15, s15, s9
 801aa48:	edcd 7a13 	vstr	s15, [sp, #76]	@ 0x4c
        mac_1row_4col_fp_IOHW_forint8w(&sum[3], input_0, filter_0, filter_1, filter_2, filter_3);
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801aa4c:	f997 3004 	ldrsb.w	r3, [r7, #4]
 801aa50:	ee07 3a90 	vmov	s15, r3
 801aa54:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801aa58:	f996 3004 	ldrsb.w	r3, [r6, #4]
 801aa5c:	ee03 3a90 	vmov	s7, r3
 801aa60:	eef8 3ae3 	vcvt.f32.s32	s7, s7
 801aa64:	f995 3004 	ldrsb.w	r3, [r5, #4]
 801aa68:	ee04 3a10 	vmov	s8, r3
 801aa6c:	eeb8 4ac4 	vcvt.f32.s32	s8, s8
 801aa70:	f994 3004 	ldrsb.w	r3, [r4, #4]
 801aa74:	ee04 3a90 	vmov	s9, r3
 801aa78:	eef8 4ae4 	vcvt.f32.s32	s9, s9
  *sum += *input_0++ * filter_0;
 801aa7c:	ee67 7a85 	vmul.f32	s15, s15, s10
 801aa80:	ee77 7aa5 	vadd.f32	s15, s15, s11
 801aa84:	edcd 7a14 	vstr	s15, [sp, #80]	@ 0x50
  *sum += *input_0++ * filter_1;
 801aa88:	ee63 3a86 	vmul.f32	s7, s7, s12
 801aa8c:	ee77 7aa3 	vadd.f32	s15, s15, s7
 801aa90:	edcd 7a14 	vstr	s15, [sp, #80]	@ 0x50
  *sum += *input_0++ * filter_2;
 801aa94:	ee24 4a26 	vmul.f32	s8, s8, s13
 801aa98:	ee77 7a84 	vadd.f32	s15, s15, s8
 801aa9c:	edcd 7a14 	vstr	s15, [sp, #80]	@ 0x50
  *sum += *input_0++ * filter_3;
 801aaa0:	ee64 4a87 	vmul.f32	s9, s9, s14
 801aaa4:	ee77 7aa4 	vadd.f32	s15, s15, s9
 801aaa8:	edcd 7a14 	vstr	s15, [sp, #80]	@ 0x50
        mac_1row_4col_fp_IOHW_forint8w(&sum[4], input_0, filter_0, filter_1, filter_2, filter_3);
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801aaac:	f997 3005 	ldrsb.w	r3, [r7, #5]
 801aab0:	ee07 3a90 	vmov	s15, r3
 801aab4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801aab8:	f996 3005 	ldrsb.w	r3, [r6, #5]
 801aabc:	ee03 3a90 	vmov	s7, r3
 801aac0:	eef8 3ae3 	vcvt.f32.s32	s7, s7
 801aac4:	f995 3005 	ldrsb.w	r3, [r5, #5]
 801aac8:	ee04 3a10 	vmov	s8, r3
 801aacc:	eeb8 4ac4 	vcvt.f32.s32	s8, s8
 801aad0:	f994 3005 	ldrsb.w	r3, [r4, #5]
 801aad4:	ee04 3a90 	vmov	s9, r3
 801aad8:	eef8 4ae4 	vcvt.f32.s32	s9, s9
  *sum += *input_0++ * filter_0;
 801aadc:	ee67 7a85 	vmul.f32	s15, s15, s10
 801aae0:	ee77 7aa5 	vadd.f32	s15, s15, s11
 801aae4:	edcd 7a15 	vstr	s15, [sp, #84]	@ 0x54
  *sum += *input_0++ * filter_1;
 801aae8:	ee63 3a86 	vmul.f32	s7, s7, s12
 801aaec:	ee77 7aa3 	vadd.f32	s15, s15, s7
 801aaf0:	edcd 7a15 	vstr	s15, [sp, #84]	@ 0x54
  *sum += *input_0++ * filter_2;
 801aaf4:	ee24 4a26 	vmul.f32	s8, s8, s13
 801aaf8:	ee77 7a84 	vadd.f32	s15, s15, s8
 801aafc:	edcd 7a15 	vstr	s15, [sp, #84]	@ 0x54
  *sum += *input_0++ * filter_3;
 801ab00:	ee64 4a87 	vmul.f32	s9, s9, s14
 801ab04:	ee77 7aa4 	vadd.f32	s15, s15, s9
 801ab08:	edcd 7a15 	vstr	s15, [sp, #84]	@ 0x54
        mac_1row_4col_fp_IOHW_forint8w(&sum[5], input_0, filter_0, filter_1, filter_2, filter_3);
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801ab0c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801ab10:	ee07 3a90 	vmov	s15, r3
 801ab14:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801ab18:	f996 3006 	ldrsb.w	r3, [r6, #6]
 801ab1c:	ee03 3a90 	vmov	s7, r3
 801ab20:	eef8 3ae3 	vcvt.f32.s32	s7, s7
 801ab24:	f995 3006 	ldrsb.w	r3, [r5, #6]
 801ab28:	ee04 3a10 	vmov	s8, r3
 801ab2c:	eeb8 4ac4 	vcvt.f32.s32	s8, s8
 801ab30:	f994 3006 	ldrsb.w	r3, [r4, #6]
 801ab34:	ee04 3a90 	vmov	s9, r3
 801ab38:	eef8 4ae4 	vcvt.f32.s32	s9, s9
  *sum += *input_0++ * filter_0;
 801ab3c:	ee67 7a85 	vmul.f32	s15, s15, s10
 801ab40:	ee77 7aa5 	vadd.f32	s15, s15, s11
 801ab44:	edcd 7a16 	vstr	s15, [sp, #88]	@ 0x58
  *sum += *input_0++ * filter_1;
 801ab48:	ee63 3a86 	vmul.f32	s7, s7, s12
 801ab4c:	ee77 7aa3 	vadd.f32	s15, s15, s7
 801ab50:	edcd 7a16 	vstr	s15, [sp, #88]	@ 0x58
  *sum += *input_0++ * filter_2;
 801ab54:	ee24 4a26 	vmul.f32	s8, s8, s13
 801ab58:	ee77 7a84 	vadd.f32	s15, s15, s8
 801ab5c:	edcd 7a16 	vstr	s15, [sp, #88]	@ 0x58
  *sum += *input_0++ * filter_3;
 801ab60:	ee64 4a87 	vmul.f32	s9, s9, s14
 801ab64:	ee77 7aa4 	vadd.f32	s15, s15, s9
 801ab68:	edcd 7a16 	vstr	s15, [sp, #88]	@ 0x58
        mac_1row_4col_fp_IOHW_forint8w(&sum[6], input_0, filter_0, filter_1, filter_2, filter_3);
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801ab6c:	f107 0b08 	add.w	fp, r7, #8
 801ab70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801ab74:	ee07 3a90 	vmov	s15, r3
 801ab78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801ab7c:	f106 0708 	add.w	r7, r6, #8
 801ab80:	f996 3007 	ldrsb.w	r3, [r6, #7]
 801ab84:	ee03 3a90 	vmov	s7, r3
 801ab88:	eef8 3ae3 	vcvt.f32.s32	s7, s7
 801ab8c:	f105 0608 	add.w	r6, r5, #8
 801ab90:	f995 3007 	ldrsb.w	r3, [r5, #7]
 801ab94:	ee04 3a10 	vmov	s8, r3
 801ab98:	eeb8 4ac4 	vcvt.f32.s32	s8, s8
 801ab9c:	f104 0508 	add.w	r5, r4, #8
 801aba0:	f994 3007 	ldrsb.w	r3, [r4, #7]
 801aba4:	ee04 3a90 	vmov	s9, r3
 801aba8:	eef8 4ae4 	vcvt.f32.s32	s9, s9
  *sum += *input_0++ * filter_0;
 801abac:	ee67 7a85 	vmul.f32	s15, s15, s10
 801abb0:	ee77 7aa5 	vadd.f32	s15, s15, s11
 801abb4:	edcd 7a17 	vstr	s15, [sp, #92]	@ 0x5c
  *sum += *input_0++ * filter_1;
 801abb8:	ee23 6a86 	vmul.f32	s12, s7, s12
 801abbc:	ee77 7a86 	vadd.f32	s15, s15, s12
 801abc0:	edcd 7a17 	vstr	s15, [sp, #92]	@ 0x5c
  *sum += *input_0++ * filter_2;
 801abc4:	ee64 6a26 	vmul.f32	s13, s8, s13
 801abc8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801abcc:	edcd 7a17 	vstr	s15, [sp, #92]	@ 0x5c
  *sum += *input_0++ * filter_3;
 801abd0:	ee24 7a87 	vmul.f32	s14, s9, s14
 801abd4:	ee77 7a87 	vadd.f32	s15, s15, s14
 801abd8:	edcd 7a17 	vstr	s15, [sp, #92]	@ 0x5c
        mac_1row_4col_fp_IOHW_forint8w(&sum[7], input_0, filter_0, filter_1, filter_2, filter_3);

        /* Accumulate partial sum into output data */
        assign_sum_to_pointwise_output_1row8col(out_0, sum, output_activation_min, output_activation_max);
 801abdc:	eef0 0a68 	vmov.f32	s1, s17
 801abe0:	eeb0 0a48 	vmov.f32	s0, s16
 801abe4:	a910      	add	r1, sp, #64	@ 0x40
 801abe6:	4650      	mov	r0, sl
 801abe8:	f7fe fee9 	bl	80199be <assign_sum_to_pointwise_output_1row8col>
        out_0 += 8;
 801abec:	f10a 0a20 	add.w	sl, sl, #32
      while (col_count_div8--) {
 801abf0:	464b      	mov	r3, r9
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801abf2:	462c      	mov	r4, r5
 801abf4:	4635      	mov	r5, r6
 801abf6:	463e      	mov	r6, r7
 801abf8:	465f      	mov	r7, fp
      while (col_count_div8--) {
 801abfa:	f103 39ff 	add.w	r9, r3, #4294967295	@ 0xffffffff
 801abfe:	fa1f f989 	uxth.w	r9, r9
 801ac02:	2b00      	cmp	r3, #0
 801ac04:	f47f ae53 	bne.w	801a8ae <pointwise_conv_fp_4row4col_IOHW_int8weight+0x382>
    for (i_ch_in = 0; i_ch_in < input_depth; i_ch_in+=4) {
 801ac08:	9902      	ldr	r1, [sp, #8]
 801ac0a:	9803      	ldr	r0, [sp, #12]
 801ac0c:	f8dd e010 	ldr.w	lr, [sp, #16]
 801ac10:	9a05      	ldr	r2, [sp, #20]
 801ac12:	3104      	adds	r1, #4
 801ac14:	4288      	cmp	r0, r1
 801ac16:	dd1f      	ble.n	801ac58 <pointwise_conv_fp_4row4col_IOHW_int8weight+0x72c>
      float* out_0 = &output_data[(num_elements - leftover_elements) * output_depth];
 801ac18:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ac1a:	9c06      	ldr	r4, [sp, #24]
 801ac1c:	eba3 0804 	sub.w	r8, r3, r4
 801ac20:	fb08 fa02 	mul.w	sl, r8, r2
 801ac24:	9b3e      	ldr	r3, [sp, #248]	@ 0xf8
 801ac26:	eb03 0a8a 	add.w	sl, r3, sl, lsl #2
      const float* input_0 = &input_data[(num_elements - leftover_elements) * input_depth + i_ch_in];
 801ac2a:	fb00 1808 	mla	r8, r0, r8, r1
 801ac2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ac30:	eb03 0888 	add.w	r8, r3, r8, lsl #2
      const int8_t* filter_0_int8 = &filter_data[i_ch_in * output_depth];
 801ac34:	fb01 e702 	mla	r7, r1, r2, lr
      const int8_t* filter_1_int8 = &filter_data[(i_ch_in + 1) * output_depth];
 801ac38:	fb01 2602 	mla	r6, r1, r2, r2
 801ac3c:	4476      	add	r6, lr
      const int8_t* filter_2_int8 = &filter_data[(i_ch_in + 2) * output_depth];
 801ac3e:	1c8d      	adds	r5, r1, #2
 801ac40:	fb05 e502 	mla	r5, r5, r2, lr
      const int8_t* filter_3_int8 = &filter_data[(i_ch_in + 3) * output_depth];
 801ac44:	1ccc      	adds	r4, r1, #3
 801ac46:	fb04 e402 	mla	r4, r4, r2, lr
      uint16_t col_count_div8 = (output_depth * DIM_KER_X * DIM_KER_Y) >> 3;
 801ac4a:	08d3      	lsrs	r3, r2, #3
      while (col_count_div8--) {
 801ac4c:	9102      	str	r1, [sp, #8]
 801ac4e:	9003      	str	r0, [sp, #12]
 801ac50:	f8cd e010 	str.w	lr, [sp, #16]
 801ac54:	9205      	str	r2, [sp, #20]
 801ac56:	e7d0      	b.n	801abfa <pointwise_conv_fp_4row4col_IOHW_int8weight+0x6ce>
      }
    }

    leftover_elements--;
 801ac58:	9906      	ldr	r1, [sp, #24]
 801ac5a:	3901      	subs	r1, #1
  while (leftover_elements) {
 801ac5c:	b121      	cbz	r1, 801ac68 <pointwise_conv_fp_4row4col_IOHW_int8weight+0x73c>
    for (i_ch_in = 0; i_ch_in < input_depth; i_ch_in+=4) {
 801ac5e:	f04f 0c00 	mov.w	ip, #0
 801ac62:	9106      	str	r1, [sp, #24]
 801ac64:	4661      	mov	r1, ip
 801ac66:	e7d5      	b.n	801ac14 <pointwise_conv_fp_4row4col_IOHW_int8weight+0x6e8>
  }
  
  /* Return to application */
  return STATE_SUCCESS_fp;
}
 801ac68:	2000      	movs	r0, #0
 801ac6a:	b031      	add	sp, #196	@ 0xc4
 801ac6c:	ecbd 8b02 	vpop	{d8}
 801ac70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ac74:	00000000 	.word	0x00000000

0801ac78 <pointwise_conv_fp_4row4col_IOHW_int8weight_partialCH_8innercol>:
tinyengine_status_fp pointwise_conv_fp_4row4col_IOHW_int8weight_partialCH_8innercol(const float* input_data, 
                 const uint16_t input_height, const uint16_t input_width, const uint16_t input_depth, 
                 const int8_t* filter_sram, const int8_t* filter_flash, const uint16_t first_k_channel, const float* bias_data, 
                 float* output_data, const uint16_t output_height, const uint16_t output_width, const uint16_t output_depth, 
                 const float output_activation_min, const float output_activation_max,
                 float* im2col_data, const uint16_t batches) {
 801ac78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ac7c:	ed2d 8b02 	vpush	{d8}
 801ac80:	b0b5      	sub	sp, #212	@ 0xd4
 801ac82:	900c      	str	r0, [sp, #48]	@ 0x30
 801ac84:	930a      	str	r3, [sp, #40]	@ 0x28
 801ac86:	f8bd 0108 	ldrh.w	r0, [sp, #264]	@ 0x108
 801ac8a:	f8bd c11c 	ldrh.w	ip, [sp, #284]	@ 0x11c
 801ac8e:	eeb0 8a40 	vmov.f32	s16, s0
 801ac92:	eef0 8a60 	vmov.f32	s17, s1
  (void) input_height;
  (void) input_width;

  int i_element;
  const int num_elements = output_height * output_width;
 801ac96:	f8bd 3114 	ldrh.w	r3, [sp, #276]	@ 0x114
 801ac9a:	f8bd 2118 	ldrh.w	r2, [sp, #280]	@ 0x118
 801ac9e:	fb02 f403 	mul.w	r4, r2, r3
 801aca2:	9413      	str	r4, [sp, #76]	@ 0x4c

  /* Initialize output data as 0 (assume bias == NULL) */
  for(i_element = 0; i_element < output_depth*num_elements; i_element++) {
 801aca4:	2300      	movs	r3, #0
 801aca6:	9d44      	ldr	r5, [sp, #272]	@ 0x110
 801aca8:	e004      	b.n	801acb4 <pointwise_conv_fp_4row4col_IOHW_int8weight_partialCH_8innercol+0x3c>
    output_data[i_element] = 0;
 801acaa:	eb05 0283 	add.w	r2, r5, r3, lsl #2
 801acae:	2100      	movs	r1, #0
 801acb0:	6011      	str	r1, [r2, #0]
  for(i_element = 0; i_element < output_depth*num_elements; i_element++) {
 801acb2:	3301      	adds	r3, #1
 801acb4:	fb04 f20c 	mul.w	r2, r4, ip
 801acb8:	429a      	cmp	r2, r3
 801acba:	dcf6      	bgt.n	801acaa <pointwise_conv_fp_4row4col_IOHW_int8weight_partialCH_8innercol+0x32>
  }

  for (i_element = 0; i_element/4 < num_elements/4; i_element+=4) {
 801acbc:	f04f 0e00 	mov.w	lr, #0
 801acc0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801acc2:	900b      	str	r0, [sp, #44]	@ 0x2c
 801acc4:	4660      	mov	r0, ip
 801acc6:	46f4      	mov	ip, lr
 801acc8:	e2ca      	b.n	801b260 <pointwise_conv_fp_4row4col_IOHW_int8weight_partialCH_8innercol+0x5e8>

      /* Compute weights in SRAM */
      uint16_t col_count_div8 = (first_k_channel * DIM_KER_X * DIM_KER_Y) >> 3;
      while (col_count_div8--) {
        /* Initialize partial sum (assume bias == NULL) */
        float sum[32] = {};
 801acca:	2280      	movs	r2, #128	@ 0x80
 801accc:	2100      	movs	r1, #0
 801acce:	a814      	add	r0, sp, #80	@ 0x50
 801acd0:	f008 fff4 	bl	8023cbc <memset>

        /* MAC computation */
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801acd4:	f998 3000 	ldrsb.w	r3, [r8]
 801acd8:	ee00 3a10 	vmov	s0, r3
 801acdc:	f995 3000 	ldrsb.w	r3, [r5]
 801ace0:	ee00 3a90 	vmov	s1, r3
 801ace4:	f997 3000 	ldrsb.w	r3, [r7]
 801ace8:	ee01 3a10 	vmov	s2, r3
 801acec:	f996 3000 	ldrsb.w	r3, [r6]
 801acf0:	ee01 3a90 	vmov	s3, r3
        mac_4row_4col_fp_IOHW_forint8w(&sum[0], input_0, input_1, input_2, input_3, filter_0, filter_1, filter_2, filter_3);
 801acf4:	9400      	str	r4, [sp, #0]
 801acf6:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 801acfa:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 801acfe:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 801ad02:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 801ad06:	4653      	mov	r3, sl
 801ad08:	465a      	mov	r2, fp
 801ad0a:	4649      	mov	r1, r9
 801ad0c:	a814      	add	r0, sp, #80	@ 0x50
 801ad0e:	f7fe fb04 	bl	801931a <mac_4row_4col_fp_IOHW_forint8w>
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801ad12:	f998 3001 	ldrsb.w	r3, [r8, #1]
 801ad16:	ee00 3a10 	vmov	s0, r3
 801ad1a:	f995 3001 	ldrsb.w	r3, [r5, #1]
 801ad1e:	ee00 3a90 	vmov	s1, r3
 801ad22:	f997 3001 	ldrsb.w	r3, [r7, #1]
 801ad26:	ee01 3a10 	vmov	s2, r3
 801ad2a:	f996 3001 	ldrsb.w	r3, [r6, #1]
 801ad2e:	ee01 3a90 	vmov	s3, r3
        mac_4row_4col_fp_IOHW_forint8w(&sum[4], input_0, input_1, input_2, input_3, filter_0, filter_1, filter_2, filter_3);
 801ad32:	9400      	str	r4, [sp, #0]
 801ad34:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 801ad38:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 801ad3c:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 801ad40:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 801ad44:	4653      	mov	r3, sl
 801ad46:	465a      	mov	r2, fp
 801ad48:	4649      	mov	r1, r9
 801ad4a:	a818      	add	r0, sp, #96	@ 0x60
 801ad4c:	f7fe fae5 	bl	801931a <mac_4row_4col_fp_IOHW_forint8w>
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801ad50:	f998 3002 	ldrsb.w	r3, [r8, #2]
 801ad54:	ee00 3a10 	vmov	s0, r3
 801ad58:	f995 3002 	ldrsb.w	r3, [r5, #2]
 801ad5c:	ee00 3a90 	vmov	s1, r3
 801ad60:	f997 3002 	ldrsb.w	r3, [r7, #2]
 801ad64:	ee01 3a10 	vmov	s2, r3
 801ad68:	f996 3002 	ldrsb.w	r3, [r6, #2]
 801ad6c:	ee01 3a90 	vmov	s3, r3
        mac_4row_4col_fp_IOHW_forint8w(&sum[8], input_0, input_1, input_2, input_3, filter_0, filter_1, filter_2, filter_3);
 801ad70:	9400      	str	r4, [sp, #0]
 801ad72:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 801ad76:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 801ad7a:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 801ad7e:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 801ad82:	4653      	mov	r3, sl
 801ad84:	465a      	mov	r2, fp
 801ad86:	4649      	mov	r1, r9
 801ad88:	a81c      	add	r0, sp, #112	@ 0x70
 801ad8a:	f7fe fac6 	bl	801931a <mac_4row_4col_fp_IOHW_forint8w>
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801ad8e:	f998 3003 	ldrsb.w	r3, [r8, #3]
 801ad92:	ee00 3a10 	vmov	s0, r3
 801ad96:	f995 3003 	ldrsb.w	r3, [r5, #3]
 801ad9a:	ee00 3a90 	vmov	s1, r3
 801ad9e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801ada2:	ee01 3a10 	vmov	s2, r3
 801ada6:	f996 3003 	ldrsb.w	r3, [r6, #3]
 801adaa:	ee01 3a90 	vmov	s3, r3
        mac_4row_4col_fp_IOHW_forint8w(&sum[12], input_0, input_1, input_2, input_3, filter_0, filter_1, filter_2, filter_3);
 801adae:	9400      	str	r4, [sp, #0]
 801adb0:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 801adb4:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 801adb8:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 801adbc:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 801adc0:	4653      	mov	r3, sl
 801adc2:	465a      	mov	r2, fp
 801adc4:	4649      	mov	r1, r9
 801adc6:	a820      	add	r0, sp, #128	@ 0x80
 801adc8:	f7fe faa7 	bl	801931a <mac_4row_4col_fp_IOHW_forint8w>
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801adcc:	f998 3004 	ldrsb.w	r3, [r8, #4]
 801add0:	ee00 3a10 	vmov	s0, r3
 801add4:	f995 3004 	ldrsb.w	r3, [r5, #4]
 801add8:	ee00 3a90 	vmov	s1, r3
 801addc:	f997 3004 	ldrsb.w	r3, [r7, #4]
 801ade0:	ee01 3a10 	vmov	s2, r3
 801ade4:	f996 3004 	ldrsb.w	r3, [r6, #4]
 801ade8:	ee01 3a90 	vmov	s3, r3
        mac_4row_4col_fp_IOHW_forint8w(&sum[16], input_0, input_1, input_2, input_3, filter_0, filter_1, filter_2, filter_3);
 801adec:	9400      	str	r4, [sp, #0]
 801adee:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 801adf2:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 801adf6:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 801adfa:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 801adfe:	4653      	mov	r3, sl
 801ae00:	465a      	mov	r2, fp
 801ae02:	4649      	mov	r1, r9
 801ae04:	a824      	add	r0, sp, #144	@ 0x90
 801ae06:	f7fe fa88 	bl	801931a <mac_4row_4col_fp_IOHW_forint8w>
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801ae0a:	f998 3005 	ldrsb.w	r3, [r8, #5]
 801ae0e:	ee00 3a10 	vmov	s0, r3
 801ae12:	f995 3005 	ldrsb.w	r3, [r5, #5]
 801ae16:	ee00 3a90 	vmov	s1, r3
 801ae1a:	f997 3005 	ldrsb.w	r3, [r7, #5]
 801ae1e:	ee01 3a10 	vmov	s2, r3
 801ae22:	f996 3005 	ldrsb.w	r3, [r6, #5]
 801ae26:	ee01 3a90 	vmov	s3, r3
        mac_4row_4col_fp_IOHW_forint8w(&sum[20], input_0, input_1, input_2, input_3, filter_0, filter_1, filter_2, filter_3);
 801ae2a:	9400      	str	r4, [sp, #0]
 801ae2c:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 801ae30:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 801ae34:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 801ae38:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 801ae3c:	4653      	mov	r3, sl
 801ae3e:	465a      	mov	r2, fp
 801ae40:	4649      	mov	r1, r9
 801ae42:	a828      	add	r0, sp, #160	@ 0xa0
 801ae44:	f7fe fa69 	bl	801931a <mac_4row_4col_fp_IOHW_forint8w>
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801ae48:	f998 3006 	ldrsb.w	r3, [r8, #6]
 801ae4c:	ee00 3a10 	vmov	s0, r3
 801ae50:	f995 3006 	ldrsb.w	r3, [r5, #6]
 801ae54:	ee00 3a90 	vmov	s1, r3
 801ae58:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801ae5c:	ee01 3a10 	vmov	s2, r3
 801ae60:	f996 3006 	ldrsb.w	r3, [r6, #6]
 801ae64:	ee01 3a90 	vmov	s3, r3
        mac_4row_4col_fp_IOHW_forint8w(&sum[24], input_0, input_1, input_2, input_3, filter_0, filter_1, filter_2, filter_3);
 801ae68:	9400      	str	r4, [sp, #0]
 801ae6a:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 801ae6e:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 801ae72:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 801ae76:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 801ae7a:	4653      	mov	r3, sl
 801ae7c:	465a      	mov	r2, fp
 801ae7e:	4649      	mov	r1, r9
 801ae80:	a82c      	add	r0, sp, #176	@ 0xb0
 801ae82:	f7fe fa4a 	bl	801931a <mac_4row_4col_fp_IOHW_forint8w>
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801ae86:	f108 0308 	add.w	r3, r8, #8
 801ae8a:	9308      	str	r3, [sp, #32]
 801ae8c:	f998 2007 	ldrsb.w	r2, [r8, #7]
 801ae90:	ee00 2a10 	vmov	s0, r2
 801ae94:	f105 0808 	add.w	r8, r5, #8
 801ae98:	f995 2007 	ldrsb.w	r2, [r5, #7]
 801ae9c:	ee00 2a90 	vmov	s1, r2
 801aea0:	f107 0508 	add.w	r5, r7, #8
 801aea4:	f997 2007 	ldrsb.w	r2, [r7, #7]
 801aea8:	ee01 2a10 	vmov	s2, r2
 801aeac:	f106 0708 	add.w	r7, r6, #8
 801aeb0:	f996 2007 	ldrsb.w	r2, [r6, #7]
 801aeb4:	ee01 2a90 	vmov	s3, r2
        mac_4row_4col_fp_IOHW_forint8w(&sum[28], input_0, input_1, input_2, input_3, filter_0, filter_1, filter_2, filter_3);
 801aeb8:	9400      	str	r4, [sp, #0]
 801aeba:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 801aebe:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 801aec2:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 801aec6:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 801aeca:	4653      	mov	r3, sl
 801aecc:	465a      	mov	r2, fp
 801aece:	4649      	mov	r1, r9
 801aed0:	a830      	add	r0, sp, #192	@ 0xc0
 801aed2:	f7fe fa22 	bl	801931a <mac_4row_4col_fp_IOHW_forint8w>

        /* Accumulate partial sum into output data */
        assign_sum_to_pointwise_output_4row8col(out_0, out_1, out_2, out_3, sum, output_activation_min, output_activation_max);
 801aed6:	aa14      	add	r2, sp, #80	@ 0x50
 801aed8:	9200      	str	r2, [sp, #0]
 801aeda:	eef0 0a68 	vmov.f32	s1, s17
 801aede:	eeb0 0a48 	vmov.f32	s0, s16
 801aee2:	9b05      	ldr	r3, [sp, #20]
 801aee4:	9a04      	ldr	r2, [sp, #16]
 801aee6:	9903      	ldr	r1, [sp, #12]
 801aee8:	9e06      	ldr	r6, [sp, #24]
 801aeea:	4630      	mov	r0, r6
 801aeec:	f7fe faa2 	bl	8019434 <assign_sum_to_pointwise_output_4row8col>
        out_0 += 8; out_1 += 8; out_2 += 8; out_3 += 8;
 801aef0:	4630      	mov	r0, r6
 801aef2:	3020      	adds	r0, #32
 801aef4:	9006      	str	r0, [sp, #24]
 801aef6:	9903      	ldr	r1, [sp, #12]
 801aef8:	3120      	adds	r1, #32
 801aefa:	9103      	str	r1, [sp, #12]
 801aefc:	9a04      	ldr	r2, [sp, #16]
 801aefe:	3220      	adds	r2, #32
 801af00:	9204      	str	r2, [sp, #16]
 801af02:	9b05      	ldr	r3, [sp, #20]
 801af04:	3320      	adds	r3, #32
 801af06:	9305      	str	r3, [sp, #20]
      while (col_count_div8--) {
 801af08:	9b07      	ldr	r3, [sp, #28]
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801af0a:	463e      	mov	r6, r7
 801af0c:	462f      	mov	r7, r5
 801af0e:	4645      	mov	r5, r8
 801af10:	f8dd 8020 	ldr.w	r8, [sp, #32]
      while (col_count_div8--) {
 801af14:	1e5a      	subs	r2, r3, #1
 801af16:	b292      	uxth	r2, r2
 801af18:	9207      	str	r2, [sp, #28]
 801af1a:	2b00      	cmp	r3, #0
 801af1c:	f47f aed5 	bne.w	801acca <pointwise_conv_fp_4row4col_IOHW_int8weight_partialCH_8innercol+0x52>
      }

      filter_0_int8 = &filter_flash[i_ch_in * (output_depth - first_k_channel)];
 801af20:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801af22:	f8dd e03c 	ldr.w	lr, [sp, #60]	@ 0x3c
 801af26:	f8dd c040 	ldr.w	ip, [sp, #64]	@ 0x40
 801af2a:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801af2c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801af2e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801af30:	1ac3      	subs	r3, r0, r3
 801af32:	9d41      	ldr	r5, [sp, #260]	@ 0x104
 801af34:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 801af36:	fb06 5803 	mla	r8, r6, r3, r5
      filter_1_int8 = &filter_flash[(i_ch_in + 1) * (output_depth - first_k_channel)];
 801af3a:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
 801af3c:	fb03 5706 	mla	r7, r3, r6, r5
      filter_2_int8 = &filter_flash[(i_ch_in + 2) * (output_depth - first_k_channel)];
 801af40:	fb03 5602 	mla	r6, r3, r2, r5
      filter_3_int8 = &filter_flash[(i_ch_in + 3) * (output_depth - first_k_channel)];
 801af44:	fb03 550e 	mla	r5, r3, lr, r5

      /* Compute weights in FLASH */
      col_count_div8 = ((output_depth - first_k_channel) * DIM_KER_X * DIM_KER_Y) >> 3;
 801af48:	f3c3 03cf 	ubfx	r3, r3, #3, #16
      while (col_count_div8--) {
 801af4c:	f8cd c034 	str.w	ip, [sp, #52]	@ 0x34
 801af50:	910e      	str	r1, [sp, #56]	@ 0x38
 801af52:	900f      	str	r0, [sp, #60]	@ 0x3c
 801af54:	e124      	b.n	801b1a0 <pointwise_conv_fp_4row4col_IOHW_int8weight_partialCH_8innercol+0x528>
        /* Initialize partial sum (assume bias == NULL) */
        float sum[32] = {};
 801af56:	2280      	movs	r2, #128	@ 0x80
 801af58:	2100      	movs	r1, #0
 801af5a:	a814      	add	r0, sp, #80	@ 0x50
 801af5c:	f008 feae 	bl	8023cbc <memset>

        /* MAC computation */
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801af60:	f998 3000 	ldrsb.w	r3, [r8]
 801af64:	ee00 3a10 	vmov	s0, r3
 801af68:	f997 3000 	ldrsb.w	r3, [r7]
 801af6c:	ee00 3a90 	vmov	s1, r3
 801af70:	f996 3000 	ldrsb.w	r3, [r6]
 801af74:	ee01 3a10 	vmov	s2, r3
 801af78:	f995 3000 	ldrsb.w	r3, [r5]
 801af7c:	ee01 3a90 	vmov	s3, r3
        mac_4row_4col_fp_IOHW_forint8w(&sum[0], input_0, input_1, input_2, input_3, filter_0, filter_1, filter_2, filter_3);
 801af80:	9400      	str	r4, [sp, #0]
 801af82:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 801af86:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 801af8a:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 801af8e:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 801af92:	4653      	mov	r3, sl
 801af94:	465a      	mov	r2, fp
 801af96:	4649      	mov	r1, r9
 801af98:	a814      	add	r0, sp, #80	@ 0x50
 801af9a:	f7fe f9be 	bl	801931a <mac_4row_4col_fp_IOHW_forint8w>
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801af9e:	f998 3001 	ldrsb.w	r3, [r8, #1]
 801afa2:	ee00 3a10 	vmov	s0, r3
 801afa6:	f997 3001 	ldrsb.w	r3, [r7, #1]
 801afaa:	ee00 3a90 	vmov	s1, r3
 801afae:	f996 3001 	ldrsb.w	r3, [r6, #1]
 801afb2:	ee01 3a10 	vmov	s2, r3
 801afb6:	f995 3001 	ldrsb.w	r3, [r5, #1]
 801afba:	ee01 3a90 	vmov	s3, r3
        mac_4row_4col_fp_IOHW_forint8w(&sum[4], input_0, input_1, input_2, input_3, filter_0, filter_1, filter_2, filter_3);
 801afbe:	9400      	str	r4, [sp, #0]
 801afc0:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 801afc4:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 801afc8:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 801afcc:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 801afd0:	4653      	mov	r3, sl
 801afd2:	465a      	mov	r2, fp
 801afd4:	4649      	mov	r1, r9
 801afd6:	a818      	add	r0, sp, #96	@ 0x60
 801afd8:	f7fe f99f 	bl	801931a <mac_4row_4col_fp_IOHW_forint8w>
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801afdc:	f998 3002 	ldrsb.w	r3, [r8, #2]
 801afe0:	ee00 3a10 	vmov	s0, r3
 801afe4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 801afe8:	ee00 3a90 	vmov	s1, r3
 801afec:	f996 3002 	ldrsb.w	r3, [r6, #2]
 801aff0:	ee01 3a10 	vmov	s2, r3
 801aff4:	f995 3002 	ldrsb.w	r3, [r5, #2]
 801aff8:	ee01 3a90 	vmov	s3, r3
        mac_4row_4col_fp_IOHW_forint8w(&sum[8], input_0, input_1, input_2, input_3, filter_0, filter_1, filter_2, filter_3);
 801affc:	9400      	str	r4, [sp, #0]
 801affe:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 801b002:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 801b006:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 801b00a:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 801b00e:	4653      	mov	r3, sl
 801b010:	465a      	mov	r2, fp
 801b012:	4649      	mov	r1, r9
 801b014:	a81c      	add	r0, sp, #112	@ 0x70
 801b016:	f7fe f980 	bl	801931a <mac_4row_4col_fp_IOHW_forint8w>
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801b01a:	f998 3003 	ldrsb.w	r3, [r8, #3]
 801b01e:	ee00 3a10 	vmov	s0, r3
 801b022:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801b026:	ee00 3a90 	vmov	s1, r3
 801b02a:	f996 3003 	ldrsb.w	r3, [r6, #3]
 801b02e:	ee01 3a10 	vmov	s2, r3
 801b032:	f995 3003 	ldrsb.w	r3, [r5, #3]
 801b036:	ee01 3a90 	vmov	s3, r3
        mac_4row_4col_fp_IOHW_forint8w(&sum[12], input_0, input_1, input_2, input_3, filter_0, filter_1, filter_2, filter_3);
 801b03a:	9400      	str	r4, [sp, #0]
 801b03c:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 801b040:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 801b044:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 801b048:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 801b04c:	4653      	mov	r3, sl
 801b04e:	465a      	mov	r2, fp
 801b050:	4649      	mov	r1, r9
 801b052:	a820      	add	r0, sp, #128	@ 0x80
 801b054:	f7fe f961 	bl	801931a <mac_4row_4col_fp_IOHW_forint8w>
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801b058:	f998 3004 	ldrsb.w	r3, [r8, #4]
 801b05c:	ee00 3a10 	vmov	s0, r3
 801b060:	f997 3004 	ldrsb.w	r3, [r7, #4]
 801b064:	ee00 3a90 	vmov	s1, r3
 801b068:	f996 3004 	ldrsb.w	r3, [r6, #4]
 801b06c:	ee01 3a10 	vmov	s2, r3
 801b070:	f995 3004 	ldrsb.w	r3, [r5, #4]
 801b074:	ee01 3a90 	vmov	s3, r3
        mac_4row_4col_fp_IOHW_forint8w(&sum[16], input_0, input_1, input_2, input_3, filter_0, filter_1, filter_2, filter_3);
 801b078:	9400      	str	r4, [sp, #0]
 801b07a:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 801b07e:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 801b082:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 801b086:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 801b08a:	4653      	mov	r3, sl
 801b08c:	465a      	mov	r2, fp
 801b08e:	4649      	mov	r1, r9
 801b090:	a824      	add	r0, sp, #144	@ 0x90
 801b092:	f7fe f942 	bl	801931a <mac_4row_4col_fp_IOHW_forint8w>
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801b096:	f998 3005 	ldrsb.w	r3, [r8, #5]
 801b09a:	ee00 3a10 	vmov	s0, r3
 801b09e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 801b0a2:	ee00 3a90 	vmov	s1, r3
 801b0a6:	f996 3005 	ldrsb.w	r3, [r6, #5]
 801b0aa:	ee01 3a10 	vmov	s2, r3
 801b0ae:	f995 3005 	ldrsb.w	r3, [r5, #5]
 801b0b2:	ee01 3a90 	vmov	s3, r3
        mac_4row_4col_fp_IOHW_forint8w(&sum[20], input_0, input_1, input_2, input_3, filter_0, filter_1, filter_2, filter_3);
 801b0b6:	9400      	str	r4, [sp, #0]
 801b0b8:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 801b0bc:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 801b0c0:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 801b0c4:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 801b0c8:	4653      	mov	r3, sl
 801b0ca:	465a      	mov	r2, fp
 801b0cc:	4649      	mov	r1, r9
 801b0ce:	a828      	add	r0, sp, #160	@ 0xa0
 801b0d0:	f7fe f923 	bl	801931a <mac_4row_4col_fp_IOHW_forint8w>
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801b0d4:	f998 3006 	ldrsb.w	r3, [r8, #6]
 801b0d8:	ee00 3a10 	vmov	s0, r3
 801b0dc:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801b0e0:	ee00 3a90 	vmov	s1, r3
 801b0e4:	f996 3006 	ldrsb.w	r3, [r6, #6]
 801b0e8:	ee01 3a10 	vmov	s2, r3
 801b0ec:	f995 3006 	ldrsb.w	r3, [r5, #6]
 801b0f0:	ee01 3a90 	vmov	s3, r3
        mac_4row_4col_fp_IOHW_forint8w(&sum[24], input_0, input_1, input_2, input_3, filter_0, filter_1, filter_2, filter_3);
 801b0f4:	9400      	str	r4, [sp, #0]
 801b0f6:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 801b0fa:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 801b0fe:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 801b102:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 801b106:	4653      	mov	r3, sl
 801b108:	465a      	mov	r2, fp
 801b10a:	4649      	mov	r1, r9
 801b10c:	a82c      	add	r0, sp, #176	@ 0xb0
 801b10e:	f7fe f904 	bl	801931a <mac_4row_4col_fp_IOHW_forint8w>
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801b112:	f108 0308 	add.w	r3, r8, #8
 801b116:	9308      	str	r3, [sp, #32]
 801b118:	f998 2007 	ldrsb.w	r2, [r8, #7]
 801b11c:	ee00 2a10 	vmov	s0, r2
 801b120:	f107 0808 	add.w	r8, r7, #8
 801b124:	f997 2007 	ldrsb.w	r2, [r7, #7]
 801b128:	ee00 2a90 	vmov	s1, r2
 801b12c:	f106 0708 	add.w	r7, r6, #8
 801b130:	f996 2007 	ldrsb.w	r2, [r6, #7]
 801b134:	ee01 2a10 	vmov	s2, r2
 801b138:	f105 0608 	add.w	r6, r5, #8
 801b13c:	f995 2007 	ldrsb.w	r2, [r5, #7]
 801b140:	ee01 2a90 	vmov	s3, r2
        mac_4row_4col_fp_IOHW_forint8w(&sum[28], input_0, input_1, input_2, input_3, filter_0, filter_1, filter_2, filter_3);
 801b144:	9400      	str	r4, [sp, #0]
 801b146:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 801b14a:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 801b14e:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 801b152:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 801b156:	4653      	mov	r3, sl
 801b158:	465a      	mov	r2, fp
 801b15a:	4649      	mov	r1, r9
 801b15c:	a830      	add	r0, sp, #192	@ 0xc0
 801b15e:	f7fe f8dc 	bl	801931a <mac_4row_4col_fp_IOHW_forint8w>

        /* Accumulate partial sum into output data */
        assign_sum_to_pointwise_output_4row8col(out_0, out_1, out_2, out_3, sum, output_activation_min, output_activation_max);
 801b162:	aa14      	add	r2, sp, #80	@ 0x50
 801b164:	9200      	str	r2, [sp, #0]
 801b166:	eef0 0a68 	vmov.f32	s1, s17
 801b16a:	eeb0 0a48 	vmov.f32	s0, s16
 801b16e:	9b05      	ldr	r3, [sp, #20]
 801b170:	9a04      	ldr	r2, [sp, #16]
 801b172:	9903      	ldr	r1, [sp, #12]
 801b174:	9d06      	ldr	r5, [sp, #24]
 801b176:	4628      	mov	r0, r5
 801b178:	f7fe f95c 	bl	8019434 <assign_sum_to_pointwise_output_4row8col>
        out_0 += 8; out_1 += 8; out_2 += 8; out_3 += 8;
 801b17c:	4628      	mov	r0, r5
 801b17e:	3020      	adds	r0, #32
 801b180:	9006      	str	r0, [sp, #24]
 801b182:	9903      	ldr	r1, [sp, #12]
 801b184:	3120      	adds	r1, #32
 801b186:	9103      	str	r1, [sp, #12]
 801b188:	9a04      	ldr	r2, [sp, #16]
 801b18a:	3220      	adds	r2, #32
 801b18c:	9204      	str	r2, [sp, #16]
 801b18e:	9b05      	ldr	r3, [sp, #20]
 801b190:	3320      	adds	r3, #32
 801b192:	9305      	str	r3, [sp, #20]
      while (col_count_div8--) {
 801b194:	9b07      	ldr	r3, [sp, #28]
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801b196:	4635      	mov	r5, r6
 801b198:	463e      	mov	r6, r7
 801b19a:	4647      	mov	r7, r8
 801b19c:	f8dd 8020 	ldr.w	r8, [sp, #32]
      while (col_count_div8--) {
 801b1a0:	1e5a      	subs	r2, r3, #1
 801b1a2:	b292      	uxth	r2, r2
 801b1a4:	9207      	str	r2, [sp, #28]
 801b1a6:	2b00      	cmp	r3, #0
 801b1a8:	f47f aed5 	bne.w	801af56 <pointwise_conv_fp_4row4col_IOHW_int8weight_partialCH_8innercol+0x2de>
    for (i_ch_in = 0; i_ch_in < input_depth; i_ch_in+=4) {
 801b1ac:	f8dd c034 	ldr.w	ip, [sp, #52]	@ 0x34
 801b1b0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801b1b2:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 801b1b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b1b6:	3304      	adds	r3, #4
 801b1b8:	9309      	str	r3, [sp, #36]	@ 0x24
 801b1ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b1bc:	4299      	cmp	r1, r3
 801b1be:	dd4d      	ble.n	801b25c <pointwise_conv_fp_4row4col_IOHW_int8weight_partialCH_8innercol+0x5e4>
      float* out_0 = &output_data[i_element * output_depth];
 801b1c0:	fb0c f300 	mul.w	r3, ip, r0
 801b1c4:	9a44      	ldr	r2, [sp, #272]	@ 0x110
 801b1c6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801b1ca:	9306      	str	r3, [sp, #24]
      float* out_1 = &output_data[(i_element + 1) * output_depth];
 801b1cc:	fb0c 0300 	mla	r3, ip, r0, r0
 801b1d0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801b1d4:	9303      	str	r3, [sp, #12]
      float* out_2 = &output_data[(i_element + 2) * output_depth];
 801b1d6:	f10c 0302 	add.w	r3, ip, #2
 801b1da:	fb03 f200 	mul.w	r2, r3, r0
 801b1de:	9c44      	ldr	r4, [sp, #272]	@ 0x110
 801b1e0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801b1e4:	9204      	str	r2, [sp, #16]
      float* out_3 = &output_data[(i_element + 3) * output_depth];
 801b1e6:	f10c 0403 	add.w	r4, ip, #3
 801b1ea:	fb04 f200 	mul.w	r2, r4, r0
 801b1ee:	9d44      	ldr	r5, [sp, #272]	@ 0x110
 801b1f0:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 801b1f4:	9205      	str	r2, [sp, #20]
      const float* input_0 = &input_data[i_element * input_depth + i_ch_in];
 801b1f6:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 801b1f8:	fb0c 5201 	mla	r2, ip, r1, r5
 801b1fc:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801b1fe:	eb06 0982 	add.w	r9, r6, r2, lsl #2
      const float* input_1 = &input_data[(i_element + 1) * input_depth + i_ch_in];
 801b202:	fb0c 1201 	mla	r2, ip, r1, r1
 801b206:	442a      	add	r2, r5
 801b208:	eb06 0b82 	add.w	fp, r6, r2, lsl #2
      const float* input_2 = &input_data[(i_element + 2) * input_depth + i_ch_in];
 801b20c:	fb01 5303 	mla	r3, r1, r3, r5
 801b210:	eb06 0a83 	add.w	sl, r6, r3, lsl #2
      const float* input_3 = &input_data[(i_element + 3) * input_depth + i_ch_in];
 801b214:	462b      	mov	r3, r5
 801b216:	fb01 5404 	mla	r4, r1, r4, r5
 801b21a:	eb06 0484 	add.w	r4, r6, r4, lsl #2
      const int8_t* filter_0_int8 = &filter_sram[i_ch_in * first_k_channel];
 801b21e:	9a40      	ldr	r2, [sp, #256]	@ 0x100
 801b220:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801b222:	fb05 2806 	mla	r8, r5, r6, r2
      const int8_t* filter_1_int8 = &filter_sram[(i_ch_in + 1) * first_k_channel];
 801b226:	1c6a      	adds	r2, r5, #1
 801b228:	920d      	str	r2, [sp, #52]	@ 0x34
 801b22a:	fb05 6506 	mla	r5, r5, r6, r6
 801b22e:	9a40      	ldr	r2, [sp, #256]	@ 0x100
 801b230:	18aa      	adds	r2, r5, r2
 801b232:	9207      	str	r2, [sp, #28]
      const int8_t* filter_2_int8 = &filter_sram[(i_ch_in + 2) * first_k_channel];
 801b234:	1c9a      	adds	r2, r3, #2
 801b236:	9f40      	ldr	r7, [sp, #256]	@ 0x100
 801b238:	fb02 7706 	mla	r7, r2, r6, r7
      const int8_t* filter_3_int8 = &filter_sram[(i_ch_in + 3) * first_k_channel];
 801b23c:	f103 0e03 	add.w	lr, r3, #3
 801b240:	9d40      	ldr	r5, [sp, #256]	@ 0x100
 801b242:	4633      	mov	r3, r6
 801b244:	fb0e 5606 	mla	r6, lr, r6, r5
      uint16_t col_count_div8 = (first_k_channel * DIM_KER_X * DIM_KER_Y) >> 3;
 801b248:	08db      	lsrs	r3, r3, #3
      while (col_count_div8--) {
 801b24a:	920e      	str	r2, [sp, #56]	@ 0x38
 801b24c:	f8cd e03c 	str.w	lr, [sp, #60]	@ 0x3c
 801b250:	f8cd c040 	str.w	ip, [sp, #64]	@ 0x40
 801b254:	9d07      	ldr	r5, [sp, #28]
 801b256:	9111      	str	r1, [sp, #68]	@ 0x44
 801b258:	9012      	str	r0, [sp, #72]	@ 0x48
 801b25a:	e65b      	b.n	801af14 <pointwise_conv_fp_4row4col_IOHW_int8weight_partialCH_8innercol+0x29c>
  for (i_element = 0; i_element/4 < num_elements/4; i_element+=4) {
 801b25c:	f10c 0c04 	add.w	ip, ip, #4
 801b260:	4663      	mov	r3, ip
 801b262:	f1bc 0f00 	cmp.w	ip, #0
 801b266:	db0a      	blt.n	801b27e <pointwise_conv_fp_4row4col_IOHW_int8weight_partialCH_8innercol+0x606>
 801b268:	109b      	asrs	r3, r3, #2
 801b26a:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801b26c:	4622      	mov	r2, r4
 801b26e:	2c00      	cmp	r4, #0
 801b270:	db08      	blt.n	801b284 <pointwise_conv_fp_4row4col_IOHW_int8weight_partialCH_8innercol+0x60c>
 801b272:	ebb3 0fa2 	cmp.w	r3, r2, asr #2
 801b276:	da07      	bge.n	801b288 <pointwise_conv_fp_4row4col_IOHW_int8weight_partialCH_8innercol+0x610>
    for (i_ch_in = 0; i_ch_in < input_depth; i_ch_in+=4) {
 801b278:	2300      	movs	r3, #0
 801b27a:	9309      	str	r3, [sp, #36]	@ 0x24
 801b27c:	e79d      	b.n	801b1ba <pointwise_conv_fp_4row4col_IOHW_int8weight_partialCH_8innercol+0x542>
  for (i_element = 0; i_element/4 < num_elements/4; i_element+=4) {
 801b27e:	f10c 0303 	add.w	r3, ip, #3
 801b282:	e7f1      	b.n	801b268 <pointwise_conv_fp_4row4col_IOHW_int8weight_partialCH_8innercol+0x5f0>
 801b284:	1ce2      	adds	r2, r4, #3
 801b286:	e7f4      	b.n	801b272 <pointwise_conv_fp_4row4col_IOHW_int8weight_partialCH_8innercol+0x5fa>
      }
    }
  }

  /* Handle left-over part */
  int leftover_elements = num_elements & 0x3;
 801b288:	4684      	mov	ip, r0
 801b28a:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 801b28c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801b28e:	f003 0e03 	and.w	lr, r3, #3

  while (leftover_elements) {
 801b292:	f8cd c00c 	str.w	ip, [sp, #12]
 801b296:	e39c      	b.n	801b9d2 <pointwise_conv_fp_4row4col_IOHW_int8weight_partialCH_8innercol+0xd5a>

      /* Compute weights in SRAM */
      uint16_t col_count_div8 = (first_k_channel * DIM_KER_X * DIM_KER_Y) >> 3;
      while (col_count_div8--) {
        /* Initialize partial sum (assume bias == NULL) */
        float sum[8] = {};
 801b298:	2220      	movs	r2, #32
 801b29a:	2100      	movs	r1, #0
 801b29c:	a814      	add	r0, sp, #80	@ 0x50
 801b29e:	f008 fd0d 	bl	8023cbc <memset>

        /* MAC computation */
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801b2a2:	f994 3000 	ldrsb.w	r3, [r4]
 801b2a6:	ee07 3a90 	vmov	s15, r3
 801b2aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b2ae:	f997 3000 	ldrsb.w	r3, [r7]
 801b2b2:	ee06 3a90 	vmov	s13, r3
 801b2b6:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801b2ba:	f99b 3000 	ldrsb.w	r3, [fp]
 801b2be:	ee07 3a10 	vmov	s14, r3
 801b2c2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801b2c6:	f998 3000 	ldrsb.w	r3, [r8]
 801b2ca:	ee04 3a90 	vmov	s9, r3
 801b2ce:	eef8 4ae4 	vcvt.f32.s32	s9, s9
  *sum += *input_0++ * filter_0;
 801b2d2:	ed99 5a00 	vldr	s10, [r9]
 801b2d6:	ee67 7a85 	vmul.f32	s15, s15, s10
 801b2da:	eddf 5acf 	vldr	s11, [pc, #828]	@ 801b618 <pointwise_conv_fp_4row4col_IOHW_int8weight_partialCH_8innercol+0x9a0>
 801b2de:	ee77 7aa5 	vadd.f32	s15, s15, s11
 801b2e2:	edcd 7a14 	vstr	s15, [sp, #80]	@ 0x50
  *sum += *input_0++ * filter_1;
 801b2e6:	ed99 6a01 	vldr	s12, [r9, #4]
 801b2ea:	ee66 6a86 	vmul.f32	s13, s13, s12
 801b2ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801b2f2:	edcd 7a14 	vstr	s15, [sp, #80]	@ 0x50
  *sum += *input_0++ * filter_2;
 801b2f6:	edd9 6a02 	vldr	s13, [r9, #8]
 801b2fa:	ee27 7a26 	vmul.f32	s14, s14, s13
 801b2fe:	ee77 7a87 	vadd.f32	s15, s15, s14
 801b302:	edcd 7a14 	vstr	s15, [sp, #80]	@ 0x50
  *sum += *input_0++ * filter_3;
 801b306:	ed99 7a03 	vldr	s14, [r9, #12]
 801b30a:	ee64 4a87 	vmul.f32	s9, s9, s14
 801b30e:	ee77 7aa4 	vadd.f32	s15, s15, s9
 801b312:	edcd 7a14 	vstr	s15, [sp, #80]	@ 0x50
        mac_1row_4col_fp_IOHW_forint8w(&sum[0], input_0, filter_0, filter_1, filter_2, filter_3);
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801b316:	f994 3001 	ldrsb.w	r3, [r4, #1]
 801b31a:	ee07 3a90 	vmov	s15, r3
 801b31e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b322:	f997 3001 	ldrsb.w	r3, [r7, #1]
 801b326:	ee03 3a90 	vmov	s7, r3
 801b32a:	eef8 3ae3 	vcvt.f32.s32	s7, s7
 801b32e:	f99b 3001 	ldrsb.w	r3, [fp, #1]
 801b332:	ee04 3a10 	vmov	s8, r3
 801b336:	eeb8 4ac4 	vcvt.f32.s32	s8, s8
 801b33a:	f998 3001 	ldrsb.w	r3, [r8, #1]
 801b33e:	ee04 3a90 	vmov	s9, r3
 801b342:	eef8 4ae4 	vcvt.f32.s32	s9, s9
  *sum += *input_0++ * filter_0;
 801b346:	ee67 7a85 	vmul.f32	s15, s15, s10
 801b34a:	ee77 7aa5 	vadd.f32	s15, s15, s11
 801b34e:	edcd 7a15 	vstr	s15, [sp, #84]	@ 0x54
  *sum += *input_0++ * filter_1;
 801b352:	ee63 3a86 	vmul.f32	s7, s7, s12
 801b356:	ee77 7aa3 	vadd.f32	s15, s15, s7
 801b35a:	edcd 7a15 	vstr	s15, [sp, #84]	@ 0x54
  *sum += *input_0++ * filter_2;
 801b35e:	ee24 4a26 	vmul.f32	s8, s8, s13
 801b362:	ee77 7a84 	vadd.f32	s15, s15, s8
 801b366:	edcd 7a15 	vstr	s15, [sp, #84]	@ 0x54
  *sum += *input_0++ * filter_3;
 801b36a:	ee64 4a87 	vmul.f32	s9, s9, s14
 801b36e:	ee77 7aa4 	vadd.f32	s15, s15, s9
 801b372:	edcd 7a15 	vstr	s15, [sp, #84]	@ 0x54
        mac_1row_4col_fp_IOHW_forint8w(&sum[1], input_0, filter_0, filter_1, filter_2, filter_3);
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801b376:	f994 3002 	ldrsb.w	r3, [r4, #2]
 801b37a:	ee07 3a90 	vmov	s15, r3
 801b37e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b382:	f997 3002 	ldrsb.w	r3, [r7, #2]
 801b386:	ee03 3a90 	vmov	s7, r3
 801b38a:	eef8 3ae3 	vcvt.f32.s32	s7, s7
 801b38e:	f99b 3002 	ldrsb.w	r3, [fp, #2]
 801b392:	ee04 3a10 	vmov	s8, r3
 801b396:	eeb8 4ac4 	vcvt.f32.s32	s8, s8
 801b39a:	f998 3002 	ldrsb.w	r3, [r8, #2]
 801b39e:	ee04 3a90 	vmov	s9, r3
 801b3a2:	eef8 4ae4 	vcvt.f32.s32	s9, s9
  *sum += *input_0++ * filter_0;
 801b3a6:	ee67 7a85 	vmul.f32	s15, s15, s10
 801b3aa:	ee77 7aa5 	vadd.f32	s15, s15, s11
 801b3ae:	edcd 7a16 	vstr	s15, [sp, #88]	@ 0x58
  *sum += *input_0++ * filter_1;
 801b3b2:	ee63 3a86 	vmul.f32	s7, s7, s12
 801b3b6:	ee77 7aa3 	vadd.f32	s15, s15, s7
 801b3ba:	edcd 7a16 	vstr	s15, [sp, #88]	@ 0x58
  *sum += *input_0++ * filter_2;
 801b3be:	ee24 4a26 	vmul.f32	s8, s8, s13
 801b3c2:	ee77 7a84 	vadd.f32	s15, s15, s8
 801b3c6:	edcd 7a16 	vstr	s15, [sp, #88]	@ 0x58
  *sum += *input_0++ * filter_3;
 801b3ca:	ee64 4a87 	vmul.f32	s9, s9, s14
 801b3ce:	ee77 7aa4 	vadd.f32	s15, s15, s9
 801b3d2:	edcd 7a16 	vstr	s15, [sp, #88]	@ 0x58
        mac_1row_4col_fp_IOHW_forint8w(&sum[2], input_0, filter_0, filter_1, filter_2, filter_3);
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801b3d6:	f994 3003 	ldrsb.w	r3, [r4, #3]
 801b3da:	ee07 3a90 	vmov	s15, r3
 801b3de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b3e2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801b3e6:	ee03 3a90 	vmov	s7, r3
 801b3ea:	eef8 3ae3 	vcvt.f32.s32	s7, s7
 801b3ee:	f99b 3003 	ldrsb.w	r3, [fp, #3]
 801b3f2:	ee04 3a10 	vmov	s8, r3
 801b3f6:	eeb8 4ac4 	vcvt.f32.s32	s8, s8
 801b3fa:	f998 3003 	ldrsb.w	r3, [r8, #3]
 801b3fe:	ee04 3a90 	vmov	s9, r3
 801b402:	eef8 4ae4 	vcvt.f32.s32	s9, s9
  *sum += *input_0++ * filter_0;
 801b406:	ee67 7a85 	vmul.f32	s15, s15, s10
 801b40a:	ee77 7aa5 	vadd.f32	s15, s15, s11
 801b40e:	edcd 7a17 	vstr	s15, [sp, #92]	@ 0x5c
  *sum += *input_0++ * filter_1;
 801b412:	ee63 3a86 	vmul.f32	s7, s7, s12
 801b416:	ee77 7aa3 	vadd.f32	s15, s15, s7
 801b41a:	edcd 7a17 	vstr	s15, [sp, #92]	@ 0x5c
  *sum += *input_0++ * filter_2;
 801b41e:	ee24 4a26 	vmul.f32	s8, s8, s13
 801b422:	ee77 7a84 	vadd.f32	s15, s15, s8
 801b426:	edcd 7a17 	vstr	s15, [sp, #92]	@ 0x5c
  *sum += *input_0++ * filter_3;
 801b42a:	ee64 4a87 	vmul.f32	s9, s9, s14
 801b42e:	ee77 7aa4 	vadd.f32	s15, s15, s9
 801b432:	edcd 7a17 	vstr	s15, [sp, #92]	@ 0x5c
        mac_1row_4col_fp_IOHW_forint8w(&sum[3], input_0, filter_0, filter_1, filter_2, filter_3);
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801b436:	f994 3004 	ldrsb.w	r3, [r4, #4]
 801b43a:	ee07 3a90 	vmov	s15, r3
 801b43e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b442:	f997 3004 	ldrsb.w	r3, [r7, #4]
 801b446:	ee03 3a90 	vmov	s7, r3
 801b44a:	eef8 3ae3 	vcvt.f32.s32	s7, s7
 801b44e:	f99b 3004 	ldrsb.w	r3, [fp, #4]
 801b452:	ee04 3a10 	vmov	s8, r3
 801b456:	eeb8 4ac4 	vcvt.f32.s32	s8, s8
 801b45a:	f998 3004 	ldrsb.w	r3, [r8, #4]
 801b45e:	ee04 3a90 	vmov	s9, r3
 801b462:	eef8 4ae4 	vcvt.f32.s32	s9, s9
  *sum += *input_0++ * filter_0;
 801b466:	ee67 7a85 	vmul.f32	s15, s15, s10
 801b46a:	ee77 7aa5 	vadd.f32	s15, s15, s11
 801b46e:	edcd 7a18 	vstr	s15, [sp, #96]	@ 0x60
  *sum += *input_0++ * filter_1;
 801b472:	ee63 3a86 	vmul.f32	s7, s7, s12
 801b476:	ee77 7aa3 	vadd.f32	s15, s15, s7
 801b47a:	edcd 7a18 	vstr	s15, [sp, #96]	@ 0x60
  *sum += *input_0++ * filter_2;
 801b47e:	ee24 4a26 	vmul.f32	s8, s8, s13
 801b482:	ee77 7a84 	vadd.f32	s15, s15, s8
 801b486:	edcd 7a18 	vstr	s15, [sp, #96]	@ 0x60
  *sum += *input_0++ * filter_3;
 801b48a:	ee64 4a87 	vmul.f32	s9, s9, s14
 801b48e:	ee77 7aa4 	vadd.f32	s15, s15, s9
 801b492:	edcd 7a18 	vstr	s15, [sp, #96]	@ 0x60
        mac_1row_4col_fp_IOHW_forint8w(&sum[4], input_0, filter_0, filter_1, filter_2, filter_3);
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801b496:	f994 3005 	ldrsb.w	r3, [r4, #5]
 801b49a:	ee07 3a90 	vmov	s15, r3
 801b49e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b4a2:	f997 3005 	ldrsb.w	r3, [r7, #5]
 801b4a6:	ee03 3a90 	vmov	s7, r3
 801b4aa:	eef8 3ae3 	vcvt.f32.s32	s7, s7
 801b4ae:	f99b 3005 	ldrsb.w	r3, [fp, #5]
 801b4b2:	ee04 3a10 	vmov	s8, r3
 801b4b6:	eeb8 4ac4 	vcvt.f32.s32	s8, s8
 801b4ba:	f998 3005 	ldrsb.w	r3, [r8, #5]
 801b4be:	ee04 3a90 	vmov	s9, r3
 801b4c2:	eef8 4ae4 	vcvt.f32.s32	s9, s9
  *sum += *input_0++ * filter_0;
 801b4c6:	ee67 7a85 	vmul.f32	s15, s15, s10
 801b4ca:	ee77 7aa5 	vadd.f32	s15, s15, s11
 801b4ce:	edcd 7a19 	vstr	s15, [sp, #100]	@ 0x64
  *sum += *input_0++ * filter_1;
 801b4d2:	ee63 3a86 	vmul.f32	s7, s7, s12
 801b4d6:	ee77 7aa3 	vadd.f32	s15, s15, s7
 801b4da:	edcd 7a19 	vstr	s15, [sp, #100]	@ 0x64
  *sum += *input_0++ * filter_2;
 801b4de:	ee24 4a26 	vmul.f32	s8, s8, s13
 801b4e2:	ee77 7a84 	vadd.f32	s15, s15, s8
 801b4e6:	edcd 7a19 	vstr	s15, [sp, #100]	@ 0x64
  *sum += *input_0++ * filter_3;
 801b4ea:	ee64 4a87 	vmul.f32	s9, s9, s14
 801b4ee:	ee77 7aa4 	vadd.f32	s15, s15, s9
 801b4f2:	edcd 7a19 	vstr	s15, [sp, #100]	@ 0x64
        mac_1row_4col_fp_IOHW_forint8w(&sum[5], input_0, filter_0, filter_1, filter_2, filter_3);
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801b4f6:	f994 3006 	ldrsb.w	r3, [r4, #6]
 801b4fa:	ee07 3a90 	vmov	s15, r3
 801b4fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b502:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801b506:	ee03 3a90 	vmov	s7, r3
 801b50a:	eef8 3ae3 	vcvt.f32.s32	s7, s7
 801b50e:	f99b 3006 	ldrsb.w	r3, [fp, #6]
 801b512:	ee04 3a10 	vmov	s8, r3
 801b516:	eeb8 4ac4 	vcvt.f32.s32	s8, s8
 801b51a:	f998 3006 	ldrsb.w	r3, [r8, #6]
 801b51e:	ee04 3a90 	vmov	s9, r3
 801b522:	eef8 4ae4 	vcvt.f32.s32	s9, s9
  *sum += *input_0++ * filter_0;
 801b526:	ee67 7a85 	vmul.f32	s15, s15, s10
 801b52a:	ee77 7aa5 	vadd.f32	s15, s15, s11
 801b52e:	edcd 7a1a 	vstr	s15, [sp, #104]	@ 0x68
  *sum += *input_0++ * filter_1;
 801b532:	ee63 3a86 	vmul.f32	s7, s7, s12
 801b536:	ee77 7aa3 	vadd.f32	s15, s15, s7
 801b53a:	edcd 7a1a 	vstr	s15, [sp, #104]	@ 0x68
  *sum += *input_0++ * filter_2;
 801b53e:	ee24 4a26 	vmul.f32	s8, s8, s13
 801b542:	ee77 7a84 	vadd.f32	s15, s15, s8
 801b546:	edcd 7a1a 	vstr	s15, [sp, #104]	@ 0x68
  *sum += *input_0++ * filter_3;
 801b54a:	ee64 4a87 	vmul.f32	s9, s9, s14
 801b54e:	ee77 7aa4 	vadd.f32	s15, s15, s9
 801b552:	edcd 7a1a 	vstr	s15, [sp, #104]	@ 0x68
        mac_1row_4col_fp_IOHW_forint8w(&sum[6], input_0, filter_0, filter_1, filter_2, filter_3);
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801b556:	f104 0608 	add.w	r6, r4, #8
 801b55a:	f994 3007 	ldrsb.w	r3, [r4, #7]
 801b55e:	ee07 3a90 	vmov	s15, r3
 801b562:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b566:	f107 0408 	add.w	r4, r7, #8
 801b56a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801b56e:	ee03 3a90 	vmov	s7, r3
 801b572:	eef8 3ae3 	vcvt.f32.s32	s7, s7
 801b576:	f10b 0708 	add.w	r7, fp, #8
 801b57a:	f99b 3007 	ldrsb.w	r3, [fp, #7]
 801b57e:	ee04 3a10 	vmov	s8, r3
 801b582:	eeb8 4ac4 	vcvt.f32.s32	s8, s8
 801b586:	f108 0b08 	add.w	fp, r8, #8
 801b58a:	f998 3007 	ldrsb.w	r3, [r8, #7]
 801b58e:	ee04 3a90 	vmov	s9, r3
 801b592:	eef8 4ae4 	vcvt.f32.s32	s9, s9
  *sum += *input_0++ * filter_0;
 801b596:	ee67 7a85 	vmul.f32	s15, s15, s10
 801b59a:	ee77 7aa5 	vadd.f32	s15, s15, s11
 801b59e:	edcd 7a1b 	vstr	s15, [sp, #108]	@ 0x6c
  *sum += *input_0++ * filter_1;
 801b5a2:	ee23 6a86 	vmul.f32	s12, s7, s12
 801b5a6:	ee77 7a86 	vadd.f32	s15, s15, s12
 801b5aa:	edcd 7a1b 	vstr	s15, [sp, #108]	@ 0x6c
  *sum += *input_0++ * filter_2;
 801b5ae:	ee64 6a26 	vmul.f32	s13, s8, s13
 801b5b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801b5b6:	edcd 7a1b 	vstr	s15, [sp, #108]	@ 0x6c
  *sum += *input_0++ * filter_3;
 801b5ba:	ee24 7a87 	vmul.f32	s14, s9, s14
 801b5be:	ee77 7a87 	vadd.f32	s15, s15, s14
 801b5c2:	edcd 7a1b 	vstr	s15, [sp, #108]	@ 0x6c
        mac_1row_4col_fp_IOHW_forint8w(&sum[7], input_0, filter_0, filter_1, filter_2, filter_3);

        /* Accumulate partial sum into output data */
        assign_sum_to_pointwise_output_1row8col(out_0, sum, output_activation_min, output_activation_max);
 801b5c6:	eef0 0a68 	vmov.f32	s1, s17
 801b5ca:	eeb0 0a48 	vmov.f32	s0, s16
 801b5ce:	a914      	add	r1, sp, #80	@ 0x50
 801b5d0:	4650      	mov	r0, sl
 801b5d2:	f7fe f9f4 	bl	80199be <assign_sum_to_pointwise_output_1row8col>
        out_0 += 8;
 801b5d6:	f10a 0a20 	add.w	sl, sl, #32
      while (col_count_div8--) {
 801b5da:	462b      	mov	r3, r5
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801b5dc:	46d8      	mov	r8, fp
 801b5de:	46bb      	mov	fp, r7
 801b5e0:	4627      	mov	r7, r4
 801b5e2:	4634      	mov	r4, r6
      while (col_count_div8--) {
 801b5e4:	1e5d      	subs	r5, r3, #1
 801b5e6:	b2ad      	uxth	r5, r5
 801b5e8:	2b00      	cmp	r3, #0
 801b5ea:	f47f ae55 	bne.w	801b298 <pointwise_conv_fp_4row4col_IOHW_int8weight_partialCH_8innercol+0x620>
      }

      filter_0_int8 = &filter_flash[i_ch_in * (output_depth - first_k_channel)];
 801b5ee:	9e04      	ldr	r6, [sp, #16]
 801b5f0:	9d05      	ldr	r5, [sp, #20]
 801b5f2:	9906      	ldr	r1, [sp, #24]
 801b5f4:	9a07      	ldr	r2, [sp, #28]
 801b5f6:	9808      	ldr	r0, [sp, #32]
 801b5f8:	9b03      	ldr	r3, [sp, #12]
 801b5fa:	1a1b      	subs	r3, r3, r0
 801b5fc:	9c41      	ldr	r4, [sp, #260]	@ 0x104
 801b5fe:	fb02 4703 	mla	r7, r2, r3, r4
      filter_1_int8 = &filter_flash[(i_ch_in + 1) * (output_depth - first_k_channel)];
 801b602:	fb03 4606 	mla	r6, r3, r6, r4
      filter_2_int8 = &filter_flash[(i_ch_in + 2) * (output_depth - first_k_channel)];
 801b606:	fb03 4505 	mla	r5, r3, r5, r4
      filter_3_int8 = &filter_flash[(i_ch_in + 3) * (output_depth - first_k_channel)];
 801b60a:	fb03 4401 	mla	r4, r3, r1, r4

      /* Compute weights in FLASH */
      col_count_div8 = ((output_depth - first_k_channel) * DIM_KER_X * DIM_KER_Y) >> 3;
 801b60e:	f3c3 03cf 	ubfx	r3, r3, #3, #16
      while (col_count_div8--) {
 801b612:	9204      	str	r2, [sp, #16]
 801b614:	9005      	str	r0, [sp, #20]
 801b616:	e1a7      	b.n	801b968 <pointwise_conv_fp_4row4col_IOHW_int8weight_partialCH_8innercol+0xcf0>
 801b618:	00000000 	.word	0x00000000
        /* Initialize partial sum (assume bias == NULL) */
        float sum[8] = {};
 801b61c:	2220      	movs	r2, #32
 801b61e:	2100      	movs	r1, #0
 801b620:	a814      	add	r0, sp, #80	@ 0x50
 801b622:	f008 fb4b 	bl	8023cbc <memset>

        /* MAC computation */
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801b626:	f997 3000 	ldrsb.w	r3, [r7]
 801b62a:	ee07 3a90 	vmov	s15, r3
 801b62e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b632:	f996 3000 	ldrsb.w	r3, [r6]
 801b636:	ee06 3a90 	vmov	s13, r3
 801b63a:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801b63e:	f995 3000 	ldrsb.w	r3, [r5]
 801b642:	ee07 3a10 	vmov	s14, r3
 801b646:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801b64a:	f994 3000 	ldrsb.w	r3, [r4]
 801b64e:	ee04 3a90 	vmov	s9, r3
 801b652:	eef8 4ae4 	vcvt.f32.s32	s9, s9
  *sum += *input_0++ * filter_0;
 801b656:	ed99 5a00 	vldr	s10, [r9]
 801b65a:	ee67 7a85 	vmul.f32	s15, s15, s10
 801b65e:	ed5f 5a12 	vldr	s11, [pc, #-72]	@ 801b618 <pointwise_conv_fp_4row4col_IOHW_int8weight_partialCH_8innercol+0x9a0>
 801b662:	ee77 7aa5 	vadd.f32	s15, s15, s11
 801b666:	edcd 7a14 	vstr	s15, [sp, #80]	@ 0x50
  *sum += *input_0++ * filter_1;
 801b66a:	ed99 6a01 	vldr	s12, [r9, #4]
 801b66e:	ee66 6a86 	vmul.f32	s13, s13, s12
 801b672:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801b676:	edcd 7a14 	vstr	s15, [sp, #80]	@ 0x50
  *sum += *input_0++ * filter_2;
 801b67a:	edd9 6a02 	vldr	s13, [r9, #8]
 801b67e:	ee27 7a26 	vmul.f32	s14, s14, s13
 801b682:	ee77 7a87 	vadd.f32	s15, s15, s14
 801b686:	edcd 7a14 	vstr	s15, [sp, #80]	@ 0x50
  *sum += *input_0++ * filter_3;
 801b68a:	ed99 7a03 	vldr	s14, [r9, #12]
 801b68e:	ee64 4a87 	vmul.f32	s9, s9, s14
 801b692:	ee77 7aa4 	vadd.f32	s15, s15, s9
 801b696:	edcd 7a14 	vstr	s15, [sp, #80]	@ 0x50
        mac_1row_4col_fp_IOHW_forint8w(&sum[0], input_0, filter_0, filter_1, filter_2, filter_3);
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801b69a:	f997 3001 	ldrsb.w	r3, [r7, #1]
 801b69e:	ee07 3a90 	vmov	s15, r3
 801b6a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b6a6:	f996 3001 	ldrsb.w	r3, [r6, #1]
 801b6aa:	ee03 3a90 	vmov	s7, r3
 801b6ae:	eef8 3ae3 	vcvt.f32.s32	s7, s7
 801b6b2:	f995 3001 	ldrsb.w	r3, [r5, #1]
 801b6b6:	ee04 3a10 	vmov	s8, r3
 801b6ba:	eeb8 4ac4 	vcvt.f32.s32	s8, s8
 801b6be:	f994 3001 	ldrsb.w	r3, [r4, #1]
 801b6c2:	ee04 3a90 	vmov	s9, r3
 801b6c6:	eef8 4ae4 	vcvt.f32.s32	s9, s9
  *sum += *input_0++ * filter_0;
 801b6ca:	ee67 7a85 	vmul.f32	s15, s15, s10
 801b6ce:	ee77 7aa5 	vadd.f32	s15, s15, s11
 801b6d2:	edcd 7a15 	vstr	s15, [sp, #84]	@ 0x54
  *sum += *input_0++ * filter_1;
 801b6d6:	ee63 3a86 	vmul.f32	s7, s7, s12
 801b6da:	ee77 7aa3 	vadd.f32	s15, s15, s7
 801b6de:	edcd 7a15 	vstr	s15, [sp, #84]	@ 0x54
  *sum += *input_0++ * filter_2;
 801b6e2:	ee24 4a26 	vmul.f32	s8, s8, s13
 801b6e6:	ee77 7a84 	vadd.f32	s15, s15, s8
 801b6ea:	edcd 7a15 	vstr	s15, [sp, #84]	@ 0x54
  *sum += *input_0++ * filter_3;
 801b6ee:	ee64 4a87 	vmul.f32	s9, s9, s14
 801b6f2:	ee77 7aa4 	vadd.f32	s15, s15, s9
 801b6f6:	edcd 7a15 	vstr	s15, [sp, #84]	@ 0x54
        mac_1row_4col_fp_IOHW_forint8w(&sum[1], input_0, filter_0, filter_1, filter_2, filter_3);
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801b6fa:	f997 3002 	ldrsb.w	r3, [r7, #2]
 801b6fe:	ee07 3a90 	vmov	s15, r3
 801b702:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b706:	f996 3002 	ldrsb.w	r3, [r6, #2]
 801b70a:	ee03 3a90 	vmov	s7, r3
 801b70e:	eef8 3ae3 	vcvt.f32.s32	s7, s7
 801b712:	f995 3002 	ldrsb.w	r3, [r5, #2]
 801b716:	ee04 3a10 	vmov	s8, r3
 801b71a:	eeb8 4ac4 	vcvt.f32.s32	s8, s8
 801b71e:	f994 3002 	ldrsb.w	r3, [r4, #2]
 801b722:	ee04 3a90 	vmov	s9, r3
 801b726:	eef8 4ae4 	vcvt.f32.s32	s9, s9
  *sum += *input_0++ * filter_0;
 801b72a:	ee67 7a85 	vmul.f32	s15, s15, s10
 801b72e:	ee77 7aa5 	vadd.f32	s15, s15, s11
 801b732:	edcd 7a16 	vstr	s15, [sp, #88]	@ 0x58
  *sum += *input_0++ * filter_1;
 801b736:	ee63 3a86 	vmul.f32	s7, s7, s12
 801b73a:	ee77 7aa3 	vadd.f32	s15, s15, s7
 801b73e:	edcd 7a16 	vstr	s15, [sp, #88]	@ 0x58
  *sum += *input_0++ * filter_2;
 801b742:	ee24 4a26 	vmul.f32	s8, s8, s13
 801b746:	ee77 7a84 	vadd.f32	s15, s15, s8
 801b74a:	edcd 7a16 	vstr	s15, [sp, #88]	@ 0x58
  *sum += *input_0++ * filter_3;
 801b74e:	ee64 4a87 	vmul.f32	s9, s9, s14
 801b752:	ee77 7aa4 	vadd.f32	s15, s15, s9
 801b756:	edcd 7a16 	vstr	s15, [sp, #88]	@ 0x58
        mac_1row_4col_fp_IOHW_forint8w(&sum[2], input_0, filter_0, filter_1, filter_2, filter_3);
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801b75a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801b75e:	ee07 3a90 	vmov	s15, r3
 801b762:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b766:	f996 3003 	ldrsb.w	r3, [r6, #3]
 801b76a:	ee03 3a90 	vmov	s7, r3
 801b76e:	eef8 3ae3 	vcvt.f32.s32	s7, s7
 801b772:	f995 3003 	ldrsb.w	r3, [r5, #3]
 801b776:	ee04 3a10 	vmov	s8, r3
 801b77a:	eeb8 4ac4 	vcvt.f32.s32	s8, s8
 801b77e:	f994 3003 	ldrsb.w	r3, [r4, #3]
 801b782:	ee04 3a90 	vmov	s9, r3
 801b786:	eef8 4ae4 	vcvt.f32.s32	s9, s9
  *sum += *input_0++ * filter_0;
 801b78a:	ee67 7a85 	vmul.f32	s15, s15, s10
 801b78e:	ee77 7aa5 	vadd.f32	s15, s15, s11
 801b792:	edcd 7a17 	vstr	s15, [sp, #92]	@ 0x5c
  *sum += *input_0++ * filter_1;
 801b796:	ee63 3a86 	vmul.f32	s7, s7, s12
 801b79a:	ee77 7aa3 	vadd.f32	s15, s15, s7
 801b79e:	edcd 7a17 	vstr	s15, [sp, #92]	@ 0x5c
  *sum += *input_0++ * filter_2;
 801b7a2:	ee24 4a26 	vmul.f32	s8, s8, s13
 801b7a6:	ee77 7a84 	vadd.f32	s15, s15, s8
 801b7aa:	edcd 7a17 	vstr	s15, [sp, #92]	@ 0x5c
  *sum += *input_0++ * filter_3;
 801b7ae:	ee64 4a87 	vmul.f32	s9, s9, s14
 801b7b2:	ee77 7aa4 	vadd.f32	s15, s15, s9
 801b7b6:	edcd 7a17 	vstr	s15, [sp, #92]	@ 0x5c
        mac_1row_4col_fp_IOHW_forint8w(&sum[3], input_0, filter_0, filter_1, filter_2, filter_3);
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801b7ba:	f997 3004 	ldrsb.w	r3, [r7, #4]
 801b7be:	ee07 3a90 	vmov	s15, r3
 801b7c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b7c6:	f996 3004 	ldrsb.w	r3, [r6, #4]
 801b7ca:	ee03 3a90 	vmov	s7, r3
 801b7ce:	eef8 3ae3 	vcvt.f32.s32	s7, s7
 801b7d2:	f995 3004 	ldrsb.w	r3, [r5, #4]
 801b7d6:	ee04 3a10 	vmov	s8, r3
 801b7da:	eeb8 4ac4 	vcvt.f32.s32	s8, s8
 801b7de:	f994 3004 	ldrsb.w	r3, [r4, #4]
 801b7e2:	ee04 3a90 	vmov	s9, r3
 801b7e6:	eef8 4ae4 	vcvt.f32.s32	s9, s9
  *sum += *input_0++ * filter_0;
 801b7ea:	ee67 7a85 	vmul.f32	s15, s15, s10
 801b7ee:	ee77 7aa5 	vadd.f32	s15, s15, s11
 801b7f2:	edcd 7a18 	vstr	s15, [sp, #96]	@ 0x60
  *sum += *input_0++ * filter_1;
 801b7f6:	ee63 3a86 	vmul.f32	s7, s7, s12
 801b7fa:	ee77 7aa3 	vadd.f32	s15, s15, s7
 801b7fe:	edcd 7a18 	vstr	s15, [sp, #96]	@ 0x60
  *sum += *input_0++ * filter_2;
 801b802:	ee24 4a26 	vmul.f32	s8, s8, s13
 801b806:	ee77 7a84 	vadd.f32	s15, s15, s8
 801b80a:	edcd 7a18 	vstr	s15, [sp, #96]	@ 0x60
  *sum += *input_0++ * filter_3;
 801b80e:	ee64 4a87 	vmul.f32	s9, s9, s14
 801b812:	ee77 7aa4 	vadd.f32	s15, s15, s9
 801b816:	edcd 7a18 	vstr	s15, [sp, #96]	@ 0x60
        mac_1row_4col_fp_IOHW_forint8w(&sum[4], input_0, filter_0, filter_1, filter_2, filter_3);
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801b81a:	f997 3005 	ldrsb.w	r3, [r7, #5]
 801b81e:	ee07 3a90 	vmov	s15, r3
 801b822:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b826:	f996 3005 	ldrsb.w	r3, [r6, #5]
 801b82a:	ee03 3a90 	vmov	s7, r3
 801b82e:	eef8 3ae3 	vcvt.f32.s32	s7, s7
 801b832:	f995 3005 	ldrsb.w	r3, [r5, #5]
 801b836:	ee04 3a10 	vmov	s8, r3
 801b83a:	eeb8 4ac4 	vcvt.f32.s32	s8, s8
 801b83e:	f994 3005 	ldrsb.w	r3, [r4, #5]
 801b842:	ee04 3a90 	vmov	s9, r3
 801b846:	eef8 4ae4 	vcvt.f32.s32	s9, s9
  *sum += *input_0++ * filter_0;
 801b84a:	ee67 7a85 	vmul.f32	s15, s15, s10
 801b84e:	ee77 7aa5 	vadd.f32	s15, s15, s11
 801b852:	edcd 7a19 	vstr	s15, [sp, #100]	@ 0x64
  *sum += *input_0++ * filter_1;
 801b856:	ee63 3a86 	vmul.f32	s7, s7, s12
 801b85a:	ee77 7aa3 	vadd.f32	s15, s15, s7
 801b85e:	edcd 7a19 	vstr	s15, [sp, #100]	@ 0x64
  *sum += *input_0++ * filter_2;
 801b862:	ee24 4a26 	vmul.f32	s8, s8, s13
 801b866:	ee77 7a84 	vadd.f32	s15, s15, s8
 801b86a:	edcd 7a19 	vstr	s15, [sp, #100]	@ 0x64
  *sum += *input_0++ * filter_3;
 801b86e:	ee64 4a87 	vmul.f32	s9, s9, s14
 801b872:	ee77 7aa4 	vadd.f32	s15, s15, s9
 801b876:	edcd 7a19 	vstr	s15, [sp, #100]	@ 0x64
        mac_1row_4col_fp_IOHW_forint8w(&sum[5], input_0, filter_0, filter_1, filter_2, filter_3);
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801b87a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801b87e:	ee07 3a90 	vmov	s15, r3
 801b882:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b886:	f996 3006 	ldrsb.w	r3, [r6, #6]
 801b88a:	ee03 3a90 	vmov	s7, r3
 801b88e:	eef8 3ae3 	vcvt.f32.s32	s7, s7
 801b892:	f995 3006 	ldrsb.w	r3, [r5, #6]
 801b896:	ee04 3a10 	vmov	s8, r3
 801b89a:	eeb8 4ac4 	vcvt.f32.s32	s8, s8
 801b89e:	f994 3006 	ldrsb.w	r3, [r4, #6]
 801b8a2:	ee04 3a90 	vmov	s9, r3
 801b8a6:	eef8 4ae4 	vcvt.f32.s32	s9, s9
  *sum += *input_0++ * filter_0;
 801b8aa:	ee67 7a85 	vmul.f32	s15, s15, s10
 801b8ae:	ee77 7aa5 	vadd.f32	s15, s15, s11
 801b8b2:	edcd 7a1a 	vstr	s15, [sp, #104]	@ 0x68
  *sum += *input_0++ * filter_1;
 801b8b6:	ee63 3a86 	vmul.f32	s7, s7, s12
 801b8ba:	ee77 7aa3 	vadd.f32	s15, s15, s7
 801b8be:	edcd 7a1a 	vstr	s15, [sp, #104]	@ 0x68
  *sum += *input_0++ * filter_2;
 801b8c2:	ee24 4a26 	vmul.f32	s8, s8, s13
 801b8c6:	ee77 7a84 	vadd.f32	s15, s15, s8
 801b8ca:	edcd 7a1a 	vstr	s15, [sp, #104]	@ 0x68
  *sum += *input_0++ * filter_3;
 801b8ce:	ee64 4a87 	vmul.f32	s9, s9, s14
 801b8d2:	ee77 7aa4 	vadd.f32	s15, s15, s9
 801b8d6:	edcd 7a1a 	vstr	s15, [sp, #104]	@ 0x68
        mac_1row_4col_fp_IOHW_forint8w(&sum[6], input_0, filter_0, filter_1, filter_2, filter_3);
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801b8da:	f107 0b08 	add.w	fp, r7, #8
 801b8de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801b8e2:	ee07 3a90 	vmov	s15, r3
 801b8e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b8ea:	f106 0708 	add.w	r7, r6, #8
 801b8ee:	f996 3007 	ldrsb.w	r3, [r6, #7]
 801b8f2:	ee03 3a90 	vmov	s7, r3
 801b8f6:	eef8 3ae3 	vcvt.f32.s32	s7, s7
 801b8fa:	f105 0608 	add.w	r6, r5, #8
 801b8fe:	f995 3007 	ldrsb.w	r3, [r5, #7]
 801b902:	ee04 3a10 	vmov	s8, r3
 801b906:	eeb8 4ac4 	vcvt.f32.s32	s8, s8
 801b90a:	f104 0508 	add.w	r5, r4, #8
 801b90e:	f994 3007 	ldrsb.w	r3, [r4, #7]
 801b912:	ee04 3a90 	vmov	s9, r3
 801b916:	eef8 4ae4 	vcvt.f32.s32	s9, s9
  *sum += *input_0++ * filter_0;
 801b91a:	ee67 7a85 	vmul.f32	s15, s15, s10
 801b91e:	ee77 7aa5 	vadd.f32	s15, s15, s11
 801b922:	edcd 7a1b 	vstr	s15, [sp, #108]	@ 0x6c
  *sum += *input_0++ * filter_1;
 801b926:	ee23 6a86 	vmul.f32	s12, s7, s12
 801b92a:	ee77 7a86 	vadd.f32	s15, s15, s12
 801b92e:	edcd 7a1b 	vstr	s15, [sp, #108]	@ 0x6c
  *sum += *input_0++ * filter_2;
 801b932:	ee64 6a26 	vmul.f32	s13, s8, s13
 801b936:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801b93a:	edcd 7a1b 	vstr	s15, [sp, #108]	@ 0x6c
  *sum += *input_0++ * filter_3;
 801b93e:	ee24 7a87 	vmul.f32	s14, s9, s14
 801b942:	ee77 7a87 	vadd.f32	s15, s15, s14
 801b946:	edcd 7a1b 	vstr	s15, [sp, #108]	@ 0x6c
        mac_1row_4col_fp_IOHW_forint8w(&sum[7], input_0, filter_0, filter_1, filter_2, filter_3);

        /* Accumulate partial sum into output data */
        assign_sum_to_pointwise_output_1row8col(out_0, sum, output_activation_min, output_activation_max);
 801b94a:	eef0 0a68 	vmov.f32	s1, s17
 801b94e:	eeb0 0a48 	vmov.f32	s0, s16
 801b952:	a914      	add	r1, sp, #80	@ 0x50
 801b954:	4650      	mov	r0, sl
 801b956:	f7fe f832 	bl	80199be <assign_sum_to_pointwise_output_1row8col>
        out_0 += 8;
 801b95a:	f10a 0a20 	add.w	sl, sl, #32
      while (col_count_div8--) {
 801b95e:	4643      	mov	r3, r8
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801b960:	462c      	mov	r4, r5
 801b962:	4635      	mov	r5, r6
 801b964:	463e      	mov	r6, r7
 801b966:	465f      	mov	r7, fp
      while (col_count_div8--) {
 801b968:	f103 38ff 	add.w	r8, r3, #4294967295	@ 0xffffffff
 801b96c:	fa1f f888 	uxth.w	r8, r8
 801b970:	2b00      	cmp	r3, #0
 801b972:	f47f ae53 	bne.w	801b61c <pointwise_conv_fp_4row4col_IOHW_int8weight_partialCH_8innercol+0x9a4>
    for (i_ch_in = 0; i_ch_in < input_depth; i_ch_in+=4) {
 801b976:	9a04      	ldr	r2, [sp, #16]
 801b978:	9805      	ldr	r0, [sp, #20]
 801b97a:	3204      	adds	r2, #4
 801b97c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801b97e:	4293      	cmp	r3, r2
 801b980:	dd23      	ble.n	801b9ca <pointwise_conv_fp_4row4col_IOHW_int8weight_partialCH_8innercol+0xd52>
      float* out_0 = &output_data[(num_elements - leftover_elements) * output_depth];
 801b982:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801b984:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801b986:	eba3 0901 	sub.w	r9, r3, r1
 801b98a:	9b03      	ldr	r3, [sp, #12]
 801b98c:	fb09 fa03 	mul.w	sl, r9, r3
 801b990:	9b44      	ldr	r3, [sp, #272]	@ 0x110
 801b992:	eb03 0a8a 	add.w	sl, r3, sl, lsl #2
      const float* input_0 = &input_data[(num_elements - leftover_elements) * input_depth + i_ch_in];
 801b996:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801b998:	fb03 2909 	mla	r9, r3, r9, r2
 801b99c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801b99e:	eb03 0989 	add.w	r9, r3, r9, lsl #2
      const int8_t* filter_0_int8 = &filter_sram[i_ch_in * first_k_channel];
 801b9a2:	9b40      	ldr	r3, [sp, #256]	@ 0x100
 801b9a4:	fb02 3400 	mla	r4, r2, r0, r3
      const int8_t* filter_1_int8 = &filter_sram[(i_ch_in + 1) * first_k_channel];
 801b9a8:	1c56      	adds	r6, r2, #1
 801b9aa:	fb02 0700 	mla	r7, r2, r0, r0
 801b9ae:	441f      	add	r7, r3
      const int8_t* filter_2_int8 = &filter_sram[(i_ch_in + 2) * first_k_channel];
 801b9b0:	1c95      	adds	r5, r2, #2
 801b9b2:	fb05 3b00 	mla	fp, r5, r0, r3
      const int8_t* filter_3_int8 = &filter_sram[(i_ch_in + 3) * first_k_channel];
 801b9b6:	1cd1      	adds	r1, r2, #3
 801b9b8:	fb01 3800 	mla	r8, r1, r0, r3
      uint16_t col_count_div8 = (first_k_channel * DIM_KER_X * DIM_KER_Y) >> 3;
 801b9bc:	08c3      	lsrs	r3, r0, #3
      while (col_count_div8--) {
 801b9be:	9604      	str	r6, [sp, #16]
 801b9c0:	9505      	str	r5, [sp, #20]
 801b9c2:	9106      	str	r1, [sp, #24]
 801b9c4:	9207      	str	r2, [sp, #28]
 801b9c6:	9008      	str	r0, [sp, #32]
 801b9c8:	e60c      	b.n	801b5e4 <pointwise_conv_fp_4row4col_IOHW_int8weight_partialCH_8innercol+0x96c>
      }
    }

    leftover_elements--;
 801b9ca:	f8dd e024 	ldr.w	lr, [sp, #36]	@ 0x24
 801b9ce:	f10e 3eff 	add.w	lr, lr, #4294967295	@ 0xffffffff
  while (leftover_elements) {
 801b9d2:	f1be 0f00 	cmp.w	lr, #0
 801b9d6:	d003      	beq.n	801b9e0 <pointwise_conv_fp_4row4col_IOHW_int8weight_partialCH_8innercol+0xd68>
    for (i_ch_in = 0; i_ch_in < input_depth; i_ch_in+=4) {
 801b9d8:	2200      	movs	r2, #0
 801b9da:	f8cd e024 	str.w	lr, [sp, #36]	@ 0x24
 801b9de:	e7cd      	b.n	801b97c <pointwise_conv_fp_4row4col_IOHW_int8weight_partialCH_8innercol+0xd04>
  }

  /* Return to application */
  return STATE_SUCCESS_fp;
}
 801b9e0:	2000      	movs	r0, #0
 801b9e2:	b035      	add	sp, #212	@ 0xd4
 801b9e4:	ecbd 8b02 	vpop	{d8}
 801b9e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b9ec <pointwise_conv_fp_4row4col_IOHW_int8weight_partialCH_4innercol>:
tinyengine_status_fp pointwise_conv_fp_4row4col_IOHW_int8weight_partialCH_4innercol(const float* input_data, 
                 const uint16_t input_height, const uint16_t input_width, const uint16_t input_depth, 
                 const int8_t* filter_sram, const int8_t* filter_flash, const uint16_t first_k_channel, const float* bias_data, 
                 float* output_data, const uint16_t output_height, const uint16_t output_width, const uint16_t output_depth, 
                 const float output_activation_min, const float output_activation_max,
                 float* im2col_data, const uint16_t batches) {
 801b9ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b9f0:	ed2d 8b02 	vpush	{d8}
 801b9f4:	b0a7      	sub	sp, #156	@ 0x9c
 801b9f6:	900d      	str	r0, [sp, #52]	@ 0x34
 801b9f8:	930a      	str	r3, [sp, #40]	@ 0x28
 801b9fa:	f8bd 20d0 	ldrh.w	r2, [sp, #208]	@ 0xd0
 801b9fe:	f8bd 50e4 	ldrh.w	r5, [sp, #228]	@ 0xe4
 801ba02:	950b      	str	r5, [sp, #44]	@ 0x2c
 801ba04:	eeb0 8a40 	vmov.f32	s16, s0
 801ba08:	eef0 8a60 	vmov.f32	s17, s1
  (void) input_height;
  (void) input_width;

  int i_element;
  const int num_elements = output_height * output_width;
 801ba0c:	f8bd 30dc 	ldrh.w	r3, [sp, #220]	@ 0xdc
 801ba10:	f8bd 10e0 	ldrh.w	r1, [sp, #224]	@ 0xe0
 801ba14:	fb01 f403 	mul.w	r4, r1, r3
 801ba18:	9415      	str	r4, [sp, #84]	@ 0x54

  /* Initialize output data as 0 (assume bias == NULL) */
  for(i_element = 0; i_element < output_depth*num_elements; i_element++) {
 801ba1a:	2300      	movs	r3, #0
 801ba1c:	9e36      	ldr	r6, [sp, #216]	@ 0xd8
 801ba1e:	e004      	b.n	801ba2a <pointwise_conv_fp_4row4col_IOHW_int8weight_partialCH_4innercol+0x3e>
    output_data[i_element] = 0;
 801ba20:	eb06 0183 	add.w	r1, r6, r3, lsl #2
 801ba24:	2000      	movs	r0, #0
 801ba26:	6008      	str	r0, [r1, #0]
  for(i_element = 0; i_element < output_depth*num_elements; i_element++) {
 801ba28:	3301      	adds	r3, #1
 801ba2a:	fb04 f105 	mul.w	r1, r4, r5
 801ba2e:	4299      	cmp	r1, r3
 801ba30:	dcf6      	bgt.n	801ba20 <pointwise_conv_fp_4row4col_IOHW_int8weight_partialCH_4innercol+0x34>
  }

  for (i_element = 0; i_element/4 < num_elements/4; i_element+=4) {
 801ba32:	f04f 0e00 	mov.w	lr, #0
 801ba36:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801ba38:	920c      	str	r2, [sp, #48]	@ 0x30
 801ba3a:	f8dd c02c 	ldr.w	ip, [sp, #44]	@ 0x2c
 801ba3e:	e1db      	b.n	801bdf8 <pointwise_conv_fp_4row4col_IOHW_int8weight_partialCH_4innercol+0x40c>

      /* Compute weights in SRAM */
      uint16_t col_count_div4 = (first_k_channel * DIM_KER_X * DIM_KER_Y) >> 2;
      while (col_count_div4--) {
        /* Initialize partial sum (assume bias == NULL) */
        float sum[16] = {};
 801ba40:	f10d 0a58 	add.w	sl, sp, #88	@ 0x58
 801ba44:	2240      	movs	r2, #64	@ 0x40
 801ba46:	2100      	movs	r1, #0
 801ba48:	4650      	mov	r0, sl
 801ba4a:	f008 f937 	bl	8023cbc <memset>

        /* MAC computation */
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801ba4e:	f998 3000 	ldrsb.w	r3, [r8]
 801ba52:	ee00 3a10 	vmov	s0, r3
 801ba56:	f995 3000 	ldrsb.w	r3, [r5]
 801ba5a:	ee00 3a90 	vmov	s1, r3
 801ba5e:	f997 3000 	ldrsb.w	r3, [r7]
 801ba62:	ee01 3a10 	vmov	s2, r3
 801ba66:	f996 3000 	ldrsb.w	r3, [r6]
 801ba6a:	ee01 3a90 	vmov	s3, r3
        mac_4row_4col_fp_IOHW_forint8w(&sum[0], input_0, input_1, input_2, input_3, filter_0, filter_1, filter_2, filter_3);
 801ba6e:	9400      	str	r4, [sp, #0]
 801ba70:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 801ba74:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 801ba78:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 801ba7c:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 801ba80:	9b03      	ldr	r3, [sp, #12]
 801ba82:	465a      	mov	r2, fp
 801ba84:	4649      	mov	r1, r9
 801ba86:	4650      	mov	r0, sl
 801ba88:	f7fd fc47 	bl	801931a <mac_4row_4col_fp_IOHW_forint8w>
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801ba8c:	f998 2001 	ldrsb.w	r2, [r8, #1]
 801ba90:	ee00 2a10 	vmov	s0, r2
 801ba94:	f995 2001 	ldrsb.w	r2, [r5, #1]
 801ba98:	ee00 2a90 	vmov	s1, r2
 801ba9c:	f997 2001 	ldrsb.w	r2, [r7, #1]
 801baa0:	ee01 2a10 	vmov	s2, r2
 801baa4:	f996 2001 	ldrsb.w	r2, [r6, #1]
 801baa8:	ee01 2a90 	vmov	s3, r2
        mac_4row_4col_fp_IOHW_forint8w(&sum[4], input_0, input_1, input_2, input_3, filter_0, filter_1, filter_2, filter_3);
 801baac:	9400      	str	r4, [sp, #0]
 801baae:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 801bab2:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 801bab6:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 801baba:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 801babe:	9b03      	ldr	r3, [sp, #12]
 801bac0:	465a      	mov	r2, fp
 801bac2:	4649      	mov	r1, r9
 801bac4:	a81a      	add	r0, sp, #104	@ 0x68
 801bac6:	f7fd fc28 	bl	801931a <mac_4row_4col_fp_IOHW_forint8w>
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801baca:	f998 2002 	ldrsb.w	r2, [r8, #2]
 801bace:	ee00 2a10 	vmov	s0, r2
 801bad2:	f995 2002 	ldrsb.w	r2, [r5, #2]
 801bad6:	ee00 2a90 	vmov	s1, r2
 801bada:	f997 2002 	ldrsb.w	r2, [r7, #2]
 801bade:	ee01 2a10 	vmov	s2, r2
 801bae2:	f996 2002 	ldrsb.w	r2, [r6, #2]
 801bae6:	ee01 2a90 	vmov	s3, r2
        mac_4row_4col_fp_IOHW_forint8w(&sum[8], input_0, input_1, input_2, input_3, filter_0, filter_1, filter_2, filter_3);
 801baea:	9400      	str	r4, [sp, #0]
 801baec:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 801baf0:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 801baf4:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 801baf8:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 801bafc:	9b03      	ldr	r3, [sp, #12]
 801bafe:	465a      	mov	r2, fp
 801bb00:	4649      	mov	r1, r9
 801bb02:	a81e      	add	r0, sp, #120	@ 0x78
 801bb04:	f7fd fc09 	bl	801931a <mac_4row_4col_fp_IOHW_forint8w>
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801bb08:	f108 0204 	add.w	r2, r8, #4
 801bb0c:	9209      	str	r2, [sp, #36]	@ 0x24
 801bb0e:	f998 1003 	ldrsb.w	r1, [r8, #3]
 801bb12:	ee00 1a10 	vmov	s0, r1
 801bb16:	f105 0804 	add.w	r8, r5, #4
 801bb1a:	f995 1003 	ldrsb.w	r1, [r5, #3]
 801bb1e:	ee00 1a90 	vmov	s1, r1
 801bb22:	1d3d      	adds	r5, r7, #4
 801bb24:	f997 1003 	ldrsb.w	r1, [r7, #3]
 801bb28:	ee01 1a10 	vmov	s2, r1
 801bb2c:	1d37      	adds	r7, r6, #4
 801bb2e:	f996 1003 	ldrsb.w	r1, [r6, #3]
 801bb32:	ee01 1a90 	vmov	s3, r1
        mac_4row_4col_fp_IOHW_forint8w(&sum[12], input_0, input_1, input_2, input_3, filter_0, filter_1, filter_2, filter_3);
 801bb36:	9400      	str	r4, [sp, #0]
 801bb38:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 801bb3c:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 801bb40:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 801bb44:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 801bb48:	9b03      	ldr	r3, [sp, #12]
 801bb4a:	465a      	mov	r2, fp
 801bb4c:	4649      	mov	r1, r9
 801bb4e:	a822      	add	r0, sp, #136	@ 0x88
 801bb50:	f7fd fbe3 	bl	801931a <mac_4row_4col_fp_IOHW_forint8w>

        /* Accumulate partial sum into output data */
        assign_sum_to_pointwise_output_4row4col(out_0, out_1, out_2, out_3, sum, output_activation_min, output_activation_max);
 801bb54:	f8cd a000 	str.w	sl, [sp]
 801bb58:	eef0 0a68 	vmov.f32	s1, s17
 801bb5c:	eeb0 0a48 	vmov.f32	s0, s16
 801bb60:	9b05      	ldr	r3, [sp, #20]
 801bb62:	9a04      	ldr	r2, [sp, #16]
 801bb64:	f8dd a01c 	ldr.w	sl, [sp, #28]
 801bb68:	4651      	mov	r1, sl
 801bb6a:	9e06      	ldr	r6, [sp, #24]
 801bb6c:	4630      	mov	r0, r6
 801bb6e:	f7fd ffd7 	bl	8019b20 <assign_sum_to_pointwise_output_4row4col>
        out_0 += 4; out_1 += 4; out_2 += 4; out_3 += 4;
 801bb72:	4630      	mov	r0, r6
 801bb74:	3010      	adds	r0, #16
 801bb76:	9006      	str	r0, [sp, #24]
 801bb78:	4651      	mov	r1, sl
 801bb7a:	3110      	adds	r1, #16
 801bb7c:	9107      	str	r1, [sp, #28]
 801bb7e:	9a04      	ldr	r2, [sp, #16]
 801bb80:	3210      	adds	r2, #16
 801bb82:	9204      	str	r2, [sp, #16]
 801bb84:	9b05      	ldr	r3, [sp, #20]
 801bb86:	3310      	adds	r3, #16
 801bb88:	9305      	str	r3, [sp, #20]
      while (col_count_div4--) {
 801bb8a:	9b08      	ldr	r3, [sp, #32]
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801bb8c:	463e      	mov	r6, r7
 801bb8e:	462f      	mov	r7, r5
 801bb90:	4645      	mov	r5, r8
 801bb92:	f8dd 8024 	ldr.w	r8, [sp, #36]	@ 0x24
      while (col_count_div4--) {
 801bb96:	1e5a      	subs	r2, r3, #1
 801bb98:	b292      	uxth	r2, r2
 801bb9a:	9208      	str	r2, [sp, #32]
 801bb9c:	2b00      	cmp	r3, #0
 801bb9e:	f47f af4f 	bne.w	801ba40 <pointwise_conv_fp_4row4col_IOHW_int8weight_partialCH_4innercol+0x54>
      }

      filter_0_int8 = &filter_flash[i_ch_in * (output_depth - first_k_channel)];
 801bba2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801bba4:	9910      	ldr	r1, [sp, #64]	@ 0x40
 801bba6:	f8dd e044 	ldr.w	lr, [sp, #68]	@ 0x44
 801bbaa:	f8dd a048 	ldr.w	sl, [sp, #72]	@ 0x48
 801bbae:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801bbb0:	f8dd c050 	ldr.w	ip, [sp, #80]	@ 0x50
 801bbb4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801bbb6:	ebac 0303 	sub.w	r3, ip, r3
 801bbba:	9d33      	ldr	r5, [sp, #204]	@ 0xcc
 801bbbc:	fb0a 5803 	mla	r8, sl, r3, r5
      filter_1_int8 = &filter_flash[(i_ch_in + 1) * (output_depth - first_k_channel)];
 801bbc0:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 801bbc2:	fb03 5706 	mla	r7, r3, r6, r5
      filter_2_int8 = &filter_flash[(i_ch_in + 2) * (output_depth - first_k_channel)];
 801bbc6:	fb03 5602 	mla	r6, r3, r2, r5
      filter_3_int8 = &filter_flash[(i_ch_in + 3) * (output_depth - first_k_channel)];
 801bbca:	fb03 5501 	mla	r5, r3, r1, r5

      /* Compute weights in FLASH */
      col_count_div4 = ((output_depth - first_k_channel) * DIM_KER_X * DIM_KER_Y) >> 2;
 801bbce:	f3c3 038f 	ubfx	r3, r3, #2, #16
      while (col_count_div4--) {
 801bbd2:	f8cd e038 	str.w	lr, [sp, #56]	@ 0x38
 801bbd6:	f8cd a03c 	str.w	sl, [sp, #60]	@ 0x3c
 801bbda:	9010      	str	r0, [sp, #64]	@ 0x40
 801bbdc:	f8cd c044 	str.w	ip, [sp, #68]	@ 0x44
 801bbe0:	e0aa      	b.n	801bd38 <pointwise_conv_fp_4row4col_IOHW_int8weight_partialCH_4innercol+0x34c>
        /* Initialize partial sum (assume bias == NULL) */
        float sum[16] = {};
 801bbe2:	f10d 0a58 	add.w	sl, sp, #88	@ 0x58
 801bbe6:	2240      	movs	r2, #64	@ 0x40
 801bbe8:	2100      	movs	r1, #0
 801bbea:	4650      	mov	r0, sl
 801bbec:	f008 f866 	bl	8023cbc <memset>

        /* MAC computation */
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801bbf0:	f998 3000 	ldrsb.w	r3, [r8]
 801bbf4:	ee00 3a10 	vmov	s0, r3
 801bbf8:	f997 3000 	ldrsb.w	r3, [r7]
 801bbfc:	ee00 3a90 	vmov	s1, r3
 801bc00:	f996 3000 	ldrsb.w	r3, [r6]
 801bc04:	ee01 3a10 	vmov	s2, r3
 801bc08:	f995 3000 	ldrsb.w	r3, [r5]
 801bc0c:	ee01 3a90 	vmov	s3, r3
        mac_4row_4col_fp_IOHW_forint8w(&sum[0], input_0, input_1, input_2, input_3, filter_0, filter_1, filter_2, filter_3);
 801bc10:	9400      	str	r4, [sp, #0]
 801bc12:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 801bc16:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 801bc1a:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 801bc1e:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 801bc22:	9b03      	ldr	r3, [sp, #12]
 801bc24:	465a      	mov	r2, fp
 801bc26:	4649      	mov	r1, r9
 801bc28:	4650      	mov	r0, sl
 801bc2a:	f7fd fb76 	bl	801931a <mac_4row_4col_fp_IOHW_forint8w>
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801bc2e:	f998 2001 	ldrsb.w	r2, [r8, #1]
 801bc32:	ee00 2a10 	vmov	s0, r2
 801bc36:	f997 2001 	ldrsb.w	r2, [r7, #1]
 801bc3a:	ee00 2a90 	vmov	s1, r2
 801bc3e:	f996 2001 	ldrsb.w	r2, [r6, #1]
 801bc42:	ee01 2a10 	vmov	s2, r2
 801bc46:	f995 2001 	ldrsb.w	r2, [r5, #1]
 801bc4a:	ee01 2a90 	vmov	s3, r2
        mac_4row_4col_fp_IOHW_forint8w(&sum[4], input_0, input_1, input_2, input_3, filter_0, filter_1, filter_2, filter_3);
 801bc4e:	9400      	str	r4, [sp, #0]
 801bc50:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 801bc54:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 801bc58:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 801bc5c:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 801bc60:	9b03      	ldr	r3, [sp, #12]
 801bc62:	465a      	mov	r2, fp
 801bc64:	4649      	mov	r1, r9
 801bc66:	a81a      	add	r0, sp, #104	@ 0x68
 801bc68:	f7fd fb57 	bl	801931a <mac_4row_4col_fp_IOHW_forint8w>
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801bc6c:	f998 2002 	ldrsb.w	r2, [r8, #2]
 801bc70:	ee00 2a10 	vmov	s0, r2
 801bc74:	f997 2002 	ldrsb.w	r2, [r7, #2]
 801bc78:	ee00 2a90 	vmov	s1, r2
 801bc7c:	f996 2002 	ldrsb.w	r2, [r6, #2]
 801bc80:	ee01 2a10 	vmov	s2, r2
 801bc84:	f995 2002 	ldrsb.w	r2, [r5, #2]
 801bc88:	ee01 2a90 	vmov	s3, r2
        mac_4row_4col_fp_IOHW_forint8w(&sum[8], input_0, input_1, input_2, input_3, filter_0, filter_1, filter_2, filter_3);
 801bc8c:	9400      	str	r4, [sp, #0]
 801bc8e:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 801bc92:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 801bc96:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 801bc9a:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 801bc9e:	9b03      	ldr	r3, [sp, #12]
 801bca0:	465a      	mov	r2, fp
 801bca2:	4649      	mov	r1, r9
 801bca4:	a81e      	add	r0, sp, #120	@ 0x78
 801bca6:	f7fd fb38 	bl	801931a <mac_4row_4col_fp_IOHW_forint8w>
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801bcaa:	f108 0204 	add.w	r2, r8, #4
 801bcae:	9209      	str	r2, [sp, #36]	@ 0x24
 801bcb0:	f998 1003 	ldrsb.w	r1, [r8, #3]
 801bcb4:	ee00 1a10 	vmov	s0, r1
 801bcb8:	f107 0804 	add.w	r8, r7, #4
 801bcbc:	f997 1003 	ldrsb.w	r1, [r7, #3]
 801bcc0:	ee00 1a90 	vmov	s1, r1
 801bcc4:	1d37      	adds	r7, r6, #4
 801bcc6:	f996 1003 	ldrsb.w	r1, [r6, #3]
 801bcca:	ee01 1a10 	vmov	s2, r1
 801bcce:	1d2e      	adds	r6, r5, #4
 801bcd0:	f995 1003 	ldrsb.w	r1, [r5, #3]
 801bcd4:	ee01 1a90 	vmov	s3, r1
        mac_4row_4col_fp_IOHW_forint8w(&sum[12], input_0, input_1, input_2, input_3, filter_0, filter_1, filter_2, filter_3);
 801bcd8:	9400      	str	r4, [sp, #0]
 801bcda:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 801bcde:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 801bce2:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 801bce6:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 801bcea:	9b03      	ldr	r3, [sp, #12]
 801bcec:	465a      	mov	r2, fp
 801bcee:	4649      	mov	r1, r9
 801bcf0:	a822      	add	r0, sp, #136	@ 0x88
 801bcf2:	f7fd fb12 	bl	801931a <mac_4row_4col_fp_IOHW_forint8w>

        /* Accumulate partial sum into output data */
        assign_sum_to_pointwise_output_4row4col(out_0, out_1, out_2, out_3, sum, output_activation_min, output_activation_max);
 801bcf6:	f8cd a000 	str.w	sl, [sp]
 801bcfa:	eef0 0a68 	vmov.f32	s1, s17
 801bcfe:	eeb0 0a48 	vmov.f32	s0, s16
 801bd02:	9b05      	ldr	r3, [sp, #20]
 801bd04:	9a04      	ldr	r2, [sp, #16]
 801bd06:	f8dd a01c 	ldr.w	sl, [sp, #28]
 801bd0a:	4651      	mov	r1, sl
 801bd0c:	9d06      	ldr	r5, [sp, #24]
 801bd0e:	4628      	mov	r0, r5
 801bd10:	f7fd ff06 	bl	8019b20 <assign_sum_to_pointwise_output_4row4col>
        out_0 += 4; out_1 += 4; out_2 += 4; out_3 += 4;
 801bd14:	4628      	mov	r0, r5
 801bd16:	3010      	adds	r0, #16
 801bd18:	9006      	str	r0, [sp, #24]
 801bd1a:	4651      	mov	r1, sl
 801bd1c:	3110      	adds	r1, #16
 801bd1e:	9107      	str	r1, [sp, #28]
 801bd20:	9a04      	ldr	r2, [sp, #16]
 801bd22:	3210      	adds	r2, #16
 801bd24:	9204      	str	r2, [sp, #16]
 801bd26:	9b05      	ldr	r3, [sp, #20]
 801bd28:	3310      	adds	r3, #16
 801bd2a:	9305      	str	r3, [sp, #20]
      while (col_count_div4--) {
 801bd2c:	9b08      	ldr	r3, [sp, #32]
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801bd2e:	4635      	mov	r5, r6
 801bd30:	463e      	mov	r6, r7
 801bd32:	4647      	mov	r7, r8
 801bd34:	f8dd 8024 	ldr.w	r8, [sp, #36]	@ 0x24
      while (col_count_div4--) {
 801bd38:	1e5a      	subs	r2, r3, #1
 801bd3a:	b292      	uxth	r2, r2
 801bd3c:	9208      	str	r2, [sp, #32]
 801bd3e:	2b00      	cmp	r3, #0
 801bd40:	f47f af4f 	bne.w	801bbe2 <pointwise_conv_fp_4row4col_IOHW_int8weight_partialCH_4innercol+0x1f6>
    for (i_ch_in = 0; i_ch_in < input_depth; i_ch_in+=4) {
 801bd44:	f8dd e038 	ldr.w	lr, [sp, #56]	@ 0x38
 801bd48:	f8dd a03c 	ldr.w	sl, [sp, #60]	@ 0x3c
 801bd4c:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801bd4e:	f8dd c044 	ldr.w	ip, [sp, #68]	@ 0x44
 801bd52:	f10a 0a04 	add.w	sl, sl, #4
 801bd56:	4550      	cmp	r0, sl
 801bd58:	dd4c      	ble.n	801bdf4 <pointwise_conv_fp_4row4col_IOHW_int8weight_partialCH_4innercol+0x408>
      float* out_0 = &output_data[i_element * output_depth];
 801bd5a:	fb0e f30c 	mul.w	r3, lr, ip
 801bd5e:	9a36      	ldr	r2, [sp, #216]	@ 0xd8
 801bd60:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801bd64:	9306      	str	r3, [sp, #24]
      float* out_1 = &output_data[(i_element + 1) * output_depth];
 801bd66:	fb0e c30c 	mla	r3, lr, ip, ip
 801bd6a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801bd6e:	9307      	str	r3, [sp, #28]
      float* out_2 = &output_data[(i_element + 2) * output_depth];
 801bd70:	f10e 0302 	add.w	r3, lr, #2
 801bd74:	fb03 f20c 	mul.w	r2, r3, ip
 801bd78:	9936      	ldr	r1, [sp, #216]	@ 0xd8
 801bd7a:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 801bd7e:	9204      	str	r2, [sp, #16]
      float* out_3 = &output_data[(i_element + 3) * output_depth];
 801bd80:	f10e 0403 	add.w	r4, lr, #3
 801bd84:	fb04 f20c 	mul.w	r2, r4, ip
 801bd88:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 801bd8c:	9205      	str	r2, [sp, #20]
      const float* input_0 = &input_data[i_element * input_depth + i_ch_in];
 801bd8e:	fb0e a200 	mla	r2, lr, r0, sl
 801bd92:	990d      	ldr	r1, [sp, #52]	@ 0x34
 801bd94:	eb01 0982 	add.w	r9, r1, r2, lsl #2
      const float* input_1 = &input_data[(i_element + 1) * input_depth + i_ch_in];
 801bd98:	fb0e 0200 	mla	r2, lr, r0, r0
 801bd9c:	4452      	add	r2, sl
 801bd9e:	eb01 0b82 	add.w	fp, r1, r2, lsl #2
      const float* input_2 = &input_data[(i_element + 2) * input_depth + i_ch_in];
 801bda2:	fb00 a303 	mla	r3, r0, r3, sl
 801bda6:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801bdaa:	9303      	str	r3, [sp, #12]
      const float* input_3 = &input_data[(i_element + 3) * input_depth + i_ch_in];
 801bdac:	fb00 a404 	mla	r4, r0, r4, sl
 801bdb0:	eb01 0484 	add.w	r4, r1, r4, lsl #2
      const int8_t* filter_0_int8 = &filter_sram[i_ch_in * first_k_channel];
 801bdb4:	9a32      	ldr	r2, [sp, #200]	@ 0xc8
 801bdb6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801bdb8:	fb0a 2803 	mla	r8, sl, r3, r2
      const int8_t* filter_1_int8 = &filter_sram[(i_ch_in + 1) * first_k_channel];
 801bdbc:	f10a 0201 	add.w	r2, sl, #1
 801bdc0:	920e      	str	r2, [sp, #56]	@ 0x38
 801bdc2:	fb0a 3503 	mla	r5, sl, r3, r3
 801bdc6:	9a32      	ldr	r2, [sp, #200]	@ 0xc8
 801bdc8:	4415      	add	r5, r2
      const int8_t* filter_2_int8 = &filter_sram[(i_ch_in + 2) * first_k_channel];
 801bdca:	f10a 0202 	add.w	r2, sl, #2
 801bdce:	9932      	ldr	r1, [sp, #200]	@ 0xc8
 801bdd0:	fb02 1703 	mla	r7, r2, r3, r1
      const int8_t* filter_3_int8 = &filter_sram[(i_ch_in + 3) * first_k_channel];
 801bdd4:	f10a 0103 	add.w	r1, sl, #3
 801bdd8:	9e32      	ldr	r6, [sp, #200]	@ 0xc8
 801bdda:	fb01 6603 	mla	r6, r1, r3, r6
      uint16_t col_count_div4 = (first_k_channel * DIM_KER_X * DIM_KER_Y) >> 2;
 801bdde:	089b      	lsrs	r3, r3, #2
      while (col_count_div4--) {
 801bde0:	920f      	str	r2, [sp, #60]	@ 0x3c
 801bde2:	9110      	str	r1, [sp, #64]	@ 0x40
 801bde4:	f8cd e044 	str.w	lr, [sp, #68]	@ 0x44
 801bde8:	f8cd a048 	str.w	sl, [sp, #72]	@ 0x48
 801bdec:	9013      	str	r0, [sp, #76]	@ 0x4c
 801bdee:	f8cd c050 	str.w	ip, [sp, #80]	@ 0x50
 801bdf2:	e6d0      	b.n	801bb96 <pointwise_conv_fp_4row4col_IOHW_int8weight_partialCH_4innercol+0x1aa>
  for (i_element = 0; i_element/4 < num_elements/4; i_element+=4) {
 801bdf4:	f10e 0e04 	add.w	lr, lr, #4
 801bdf8:	4673      	mov	r3, lr
 801bdfa:	f1be 0f00 	cmp.w	lr, #0
 801bdfe:	db0a      	blt.n	801be16 <pointwise_conv_fp_4row4col_IOHW_int8weight_partialCH_4innercol+0x42a>
 801be00:	109b      	asrs	r3, r3, #2
 801be02:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801be04:	4611      	mov	r1, r2
 801be06:	2a00      	cmp	r2, #0
 801be08:	db08      	blt.n	801be1c <pointwise_conv_fp_4row4col_IOHW_int8weight_partialCH_4innercol+0x430>
 801be0a:	ebb3 0fa1 	cmp.w	r3, r1, asr #2
 801be0e:	da07      	bge.n	801be20 <pointwise_conv_fp_4row4col_IOHW_int8weight_partialCH_4innercol+0x434>
    for (i_ch_in = 0; i_ch_in < input_depth; i_ch_in+=4) {
 801be10:	2100      	movs	r1, #0
 801be12:	468a      	mov	sl, r1
 801be14:	e79f      	b.n	801bd56 <pointwise_conv_fp_4row4col_IOHW_int8weight_partialCH_4innercol+0x36a>
  for (i_element = 0; i_element/4 < num_elements/4; i_element+=4) {
 801be16:	f10e 0303 	add.w	r3, lr, #3
 801be1a:	e7f1      	b.n	801be00 <pointwise_conv_fp_4row4col_IOHW_int8weight_partialCH_4innercol+0x414>
 801be1c:	1cd1      	adds	r1, r2, #3
 801be1e:	e7f4      	b.n	801be0a <pointwise_conv_fp_4row4col_IOHW_int8weight_partialCH_4innercol+0x41e>
      }
    }
  }

  /* Handle left-over part */
  int leftover_elements = num_elements & 0x3;
 801be20:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801be22:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801be24:	f003 0603 	and.w	r6, r3, #3

  while (leftover_elements) {
 801be28:	46b6      	mov	lr, r6
 801be2a:	f8dd 80cc 	ldr.w	r8, [sp, #204]	@ 0xcc
 801be2e:	4693      	mov	fp, r2
 801be30:	e224      	b.n	801c27c <pointwise_conv_fp_4row4col_IOHW_int8weight_partialCH_4innercol+0x890>

      /* Compute weights in SRAM */
      uint16_t col_count_div4 = (first_k_channel * DIM_KER_X * DIM_KER_Y) >> 2;
      while (col_count_div4--) {
        /* Initialize partial sum (assume bias == NULL) */
        float sum[4] = {};
 801be32:	2200      	movs	r2, #0
 801be34:	9216      	str	r2, [sp, #88]	@ 0x58
 801be36:	9217      	str	r2, [sp, #92]	@ 0x5c
 801be38:	9218      	str	r2, [sp, #96]	@ 0x60
 801be3a:	9219      	str	r2, [sp, #100]	@ 0x64

        /* MAC computation */
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801be3c:	f99c 2000 	ldrsb.w	r2, [ip]
 801be40:	ee07 2a90 	vmov	s15, r2
 801be44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801be48:	f990 2000 	ldrsb.w	r2, [r0]
 801be4c:	ee06 2a10 	vmov	s12, r2
 801be50:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 801be54:	f991 2000 	ldrsb.w	r2, [r1]
 801be58:	ee06 2a90 	vmov	s13, r2
 801be5c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801be60:	f993 2000 	ldrsb.w	r2, [r3]
 801be64:	ee07 2a10 	vmov	s14, r2
 801be68:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  *sum += *input_0++ * filter_0;
 801be6c:	ed94 4a00 	vldr	s8, [r4]
 801be70:	ee67 7a84 	vmul.f32	s15, s15, s8
 801be74:	eddf 4a70 	vldr	s9, [pc, #448]	@ 801c038 <pointwise_conv_fp_4row4col_IOHW_int8weight_partialCH_4innercol+0x64c>
 801be78:	ee77 7aa4 	vadd.f32	s15, s15, s9
 801be7c:	edcd 7a16 	vstr	s15, [sp, #88]	@ 0x58
  *sum += *input_0++ * filter_1;
 801be80:	ed94 5a01 	vldr	s10, [r4, #4]
 801be84:	ee26 6a05 	vmul.f32	s12, s12, s10
 801be88:	ee77 7a86 	vadd.f32	s15, s15, s12
 801be8c:	edcd 7a16 	vstr	s15, [sp, #88]	@ 0x58
  *sum += *input_0++ * filter_2;
 801be90:	edd4 5a02 	vldr	s11, [r4, #8]
 801be94:	ee66 6aa5 	vmul.f32	s13, s13, s11
 801be98:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801be9c:	edcd 7a16 	vstr	s15, [sp, #88]	@ 0x58
  *sum += *input_0++ * filter_3;
 801bea0:	ed94 6a03 	vldr	s12, [r4, #12]
 801bea4:	ee27 7a06 	vmul.f32	s14, s14, s12
 801bea8:	ee77 7a87 	vadd.f32	s15, s15, s14
 801beac:	edcd 7a16 	vstr	s15, [sp, #88]	@ 0x58
        mac_1row_4col_fp_IOHW_forint8w(&sum[0], input_0, filter_0, filter_1, filter_2, filter_3);
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801beb0:	f99c 2001 	ldrsb.w	r2, [ip, #1]
 801beb4:	ee07 2a90 	vmov	s15, r2
 801beb8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801bebc:	f990 2001 	ldrsb.w	r2, [r0, #1]
 801bec0:	ee03 2a90 	vmov	s7, r2
 801bec4:	eef8 3ae3 	vcvt.f32.s32	s7, s7
 801bec8:	f991 2001 	ldrsb.w	r2, [r1, #1]
 801becc:	ee06 2a90 	vmov	s13, r2
 801bed0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801bed4:	f993 2001 	ldrsb.w	r2, [r3, #1]
 801bed8:	ee07 2a10 	vmov	s14, r2
 801bedc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  *sum += *input_0++ * filter_0;
 801bee0:	ee67 7a84 	vmul.f32	s15, s15, s8
 801bee4:	ee77 7aa4 	vadd.f32	s15, s15, s9
 801bee8:	edcd 7a17 	vstr	s15, [sp, #92]	@ 0x5c
  *sum += *input_0++ * filter_1;
 801beec:	ee63 3a85 	vmul.f32	s7, s7, s10
 801bef0:	ee77 7aa3 	vadd.f32	s15, s15, s7
 801bef4:	edcd 7a17 	vstr	s15, [sp, #92]	@ 0x5c
  *sum += *input_0++ * filter_2;
 801bef8:	ee66 6aa5 	vmul.f32	s13, s13, s11
 801befc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801bf00:	edcd 7a17 	vstr	s15, [sp, #92]	@ 0x5c
  *sum += *input_0++ * filter_3;
 801bf04:	ee27 7a06 	vmul.f32	s14, s14, s12
 801bf08:	ee77 7a87 	vadd.f32	s15, s15, s14
 801bf0c:	edcd 7a17 	vstr	s15, [sp, #92]	@ 0x5c
        mac_1row_4col_fp_IOHW_forint8w(&sum[1], input_0, filter_0, filter_1, filter_2, filter_3);
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801bf10:	f99c 2002 	ldrsb.w	r2, [ip, #2]
 801bf14:	ee07 2a90 	vmov	s15, r2
 801bf18:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801bf1c:	f990 2002 	ldrsb.w	r2, [r0, #2]
 801bf20:	ee03 2a90 	vmov	s7, r2
 801bf24:	eef8 3ae3 	vcvt.f32.s32	s7, s7
 801bf28:	f991 2002 	ldrsb.w	r2, [r1, #2]
 801bf2c:	ee06 2a90 	vmov	s13, r2
 801bf30:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801bf34:	f993 2002 	ldrsb.w	r2, [r3, #2]
 801bf38:	ee07 2a10 	vmov	s14, r2
 801bf3c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  *sum += *input_0++ * filter_0;
 801bf40:	ee67 7a84 	vmul.f32	s15, s15, s8
 801bf44:	ee77 7aa4 	vadd.f32	s15, s15, s9
 801bf48:	edcd 7a18 	vstr	s15, [sp, #96]	@ 0x60
  *sum += *input_0++ * filter_1;
 801bf4c:	ee63 3a85 	vmul.f32	s7, s7, s10
 801bf50:	ee77 7aa3 	vadd.f32	s15, s15, s7
 801bf54:	edcd 7a18 	vstr	s15, [sp, #96]	@ 0x60
  *sum += *input_0++ * filter_2;
 801bf58:	ee66 6aa5 	vmul.f32	s13, s13, s11
 801bf5c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801bf60:	edcd 7a18 	vstr	s15, [sp, #96]	@ 0x60
  *sum += *input_0++ * filter_3;
 801bf64:	ee27 7a06 	vmul.f32	s14, s14, s12
 801bf68:	ee77 7a87 	vadd.f32	s15, s15, s14
 801bf6c:	edcd 7a18 	vstr	s15, [sp, #96]	@ 0x60
        mac_1row_4col_fp_IOHW_forint8w(&sum[2], input_0, filter_0, filter_1, filter_2, filter_3);
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801bf70:	f10c 0704 	add.w	r7, ip, #4
 801bf74:	f99c 2003 	ldrsb.w	r2, [ip, #3]
 801bf78:	ee07 2a90 	vmov	s15, r2
 801bf7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801bf80:	f100 0804 	add.w	r8, r0, #4
 801bf84:	f990 2003 	ldrsb.w	r2, [r0, #3]
 801bf88:	ee03 2a90 	vmov	s7, r2
 801bf8c:	eef8 3ae3 	vcvt.f32.s32	s7, s7
 801bf90:	f101 0904 	add.w	r9, r1, #4
 801bf94:	f991 2003 	ldrsb.w	r2, [r1, #3]
 801bf98:	ee06 2a90 	vmov	s13, r2
 801bf9c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801bfa0:	f103 0a04 	add.w	sl, r3, #4
 801bfa4:	f993 3003 	ldrsb.w	r3, [r3, #3]
 801bfa8:	ee07 3a10 	vmov	s14, r3
 801bfac:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  *sum += *input_0++ * filter_0;
 801bfb0:	ee67 7a84 	vmul.f32	s15, s15, s8
 801bfb4:	ee77 7aa4 	vadd.f32	s15, s15, s9
 801bfb8:	edcd 7a19 	vstr	s15, [sp, #100]	@ 0x64
  *sum += *input_0++ * filter_1;
 801bfbc:	ee23 5a85 	vmul.f32	s10, s7, s10
 801bfc0:	ee77 7a85 	vadd.f32	s15, s15, s10
 801bfc4:	edcd 7a19 	vstr	s15, [sp, #100]	@ 0x64
  *sum += *input_0++ * filter_2;
 801bfc8:	ee66 6aa5 	vmul.f32	s13, s13, s11
 801bfcc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801bfd0:	edcd 7a19 	vstr	s15, [sp, #100]	@ 0x64
  *sum += *input_0++ * filter_3;
 801bfd4:	ee27 7a06 	vmul.f32	s14, s14, s12
 801bfd8:	ee77 7a87 	vadd.f32	s15, s15, s14
 801bfdc:	edcd 7a19 	vstr	s15, [sp, #100]	@ 0x64
        mac_1row_4col_fp_IOHW_forint8w(&sum[3], input_0, filter_0, filter_1, filter_2, filter_3);

        /* Accumulate partial sum into output data */
        assign_sum_to_pointwise_output_1row4col(out_0, sum, output_activation_min, output_activation_max);
 801bfe0:	eef0 0a68 	vmov.f32	s1, s17
 801bfe4:	eeb0 0a48 	vmov.f32	s0, s16
 801bfe8:	a916      	add	r1, sp, #88	@ 0x58
 801bfea:	4630      	mov	r0, r6
 801bfec:	f7fd fefd 	bl	8019dea <assign_sum_to_pointwise_output_1row4col>
        out_0 += 4;
 801bff0:	3610      	adds	r6, #16
      while (col_count_div4--) {
 801bff2:	462a      	mov	r2, r5
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801bff4:	4653      	mov	r3, sl
 801bff6:	4649      	mov	r1, r9
 801bff8:	4640      	mov	r0, r8
 801bffa:	46bc      	mov	ip, r7
      while (col_count_div4--) {
 801bffc:	1e55      	subs	r5, r2, #1
 801bffe:	b2ad      	uxth	r5, r5
 801c000:	2a00      	cmp	r2, #0
 801c002:	f47f af16 	bne.w	801be32 <pointwise_conv_fp_4row4col_IOHW_int8weight_partialCH_4innercol+0x446>
      }

      filter_0_int8 = &filter_flash[i_ch_in * (output_depth - first_k_channel)];
 801c006:	9d03      	ldr	r5, [sp, #12]
 801c008:	f8dd a010 	ldr.w	sl, [sp, #16]
 801c00c:	f8dd e014 	ldr.w	lr, [sp, #20]
 801c010:	f8dd 8018 	ldr.w	r8, [sp, #24]
 801c014:	9f07      	ldr	r7, [sp, #28]
 801c016:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801c018:	eba3 010b 	sub.w	r1, r3, fp
 801c01c:	fb08 7001 	mla	r0, r8, r1, r7
      filter_1_int8 = &filter_flash[(i_ch_in + 1) * (output_depth - first_k_channel)];
 801c020:	fb01 7205 	mla	r2, r1, r5, r7
      filter_2_int8 = &filter_flash[(i_ch_in + 2) * (output_depth - first_k_channel)];
 801c024:	fb01 7a0a 	mla	sl, r1, sl, r7
      filter_3_int8 = &filter_flash[(i_ch_in + 3) * (output_depth - first_k_channel)];
 801c028:	fb01 730e 	mla	r3, r1, lr, r7

      /* Compute weights in FLASH */
      col_count_div4 = ((output_depth - first_k_channel) * DIM_KER_X * DIM_KER_Y) >> 2;
 801c02c:	f3c1 018f 	ubfx	r1, r1, #2, #16
      while (col_count_div4--) {
 801c030:	f8cd 800c 	str.w	r8, [sp, #12]
 801c034:	9704      	str	r7, [sp, #16]
 801c036:	e0e5      	b.n	801c204 <pointwise_conv_fp_4row4col_IOHW_int8weight_partialCH_4innercol+0x818>
 801c038:	00000000 	.word	0x00000000
        /* Initialize partial sum (assume bias == NULL) */
        float sum[4] = {};
 801c03c:	2100      	movs	r1, #0
 801c03e:	9116      	str	r1, [sp, #88]	@ 0x58
 801c040:	9117      	str	r1, [sp, #92]	@ 0x5c
 801c042:	9118      	str	r1, [sp, #96]	@ 0x60
 801c044:	9119      	str	r1, [sp, #100]	@ 0x64

        /* MAC computation */
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801c046:	f990 1000 	ldrsb.w	r1, [r0]
 801c04a:	ee07 1a90 	vmov	s15, r1
 801c04e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c052:	f992 1000 	ldrsb.w	r1, [r2]
 801c056:	ee06 1a10 	vmov	s12, r1
 801c05a:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 801c05e:	f99a 1000 	ldrsb.w	r1, [sl]
 801c062:	ee06 1a90 	vmov	s13, r1
 801c066:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801c06a:	f993 1000 	ldrsb.w	r1, [r3]
 801c06e:	ee07 1a10 	vmov	s14, r1
 801c072:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  *sum += *input_0++ * filter_0;
 801c076:	ed94 4a00 	vldr	s8, [r4]
 801c07a:	ee67 7a84 	vmul.f32	s15, s15, s8
 801c07e:	ed5f 4a12 	vldr	s9, [pc, #-72]	@ 801c038 <pointwise_conv_fp_4row4col_IOHW_int8weight_partialCH_4innercol+0x64c>
 801c082:	ee77 7aa4 	vadd.f32	s15, s15, s9
 801c086:	edcd 7a16 	vstr	s15, [sp, #88]	@ 0x58
  *sum += *input_0++ * filter_1;
 801c08a:	ed94 5a01 	vldr	s10, [r4, #4]
 801c08e:	ee26 6a05 	vmul.f32	s12, s12, s10
 801c092:	ee77 7a86 	vadd.f32	s15, s15, s12
 801c096:	edcd 7a16 	vstr	s15, [sp, #88]	@ 0x58
  *sum += *input_0++ * filter_2;
 801c09a:	edd4 5a02 	vldr	s11, [r4, #8]
 801c09e:	ee66 6aa5 	vmul.f32	s13, s13, s11
 801c0a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801c0a6:	edcd 7a16 	vstr	s15, [sp, #88]	@ 0x58
  *sum += *input_0++ * filter_3;
 801c0aa:	ed94 6a03 	vldr	s12, [r4, #12]
 801c0ae:	ee27 7a06 	vmul.f32	s14, s14, s12
 801c0b2:	ee77 7a87 	vadd.f32	s15, s15, s14
 801c0b6:	edcd 7a16 	vstr	s15, [sp, #88]	@ 0x58
        mac_1row_4col_fp_IOHW_forint8w(&sum[0], input_0, filter_0, filter_1, filter_2, filter_3);
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801c0ba:	f990 1001 	ldrsb.w	r1, [r0, #1]
 801c0be:	ee07 1a90 	vmov	s15, r1
 801c0c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c0c6:	f992 1001 	ldrsb.w	r1, [r2, #1]
 801c0ca:	ee03 1a90 	vmov	s7, r1
 801c0ce:	eef8 3ae3 	vcvt.f32.s32	s7, s7
 801c0d2:	f99a 1001 	ldrsb.w	r1, [sl, #1]
 801c0d6:	ee06 1a90 	vmov	s13, r1
 801c0da:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801c0de:	f993 1001 	ldrsb.w	r1, [r3, #1]
 801c0e2:	ee07 1a10 	vmov	s14, r1
 801c0e6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  *sum += *input_0++ * filter_0;
 801c0ea:	ee67 7a84 	vmul.f32	s15, s15, s8
 801c0ee:	ee77 7aa4 	vadd.f32	s15, s15, s9
 801c0f2:	edcd 7a17 	vstr	s15, [sp, #92]	@ 0x5c
  *sum += *input_0++ * filter_1;
 801c0f6:	ee63 3a85 	vmul.f32	s7, s7, s10
 801c0fa:	ee77 7aa3 	vadd.f32	s15, s15, s7
 801c0fe:	edcd 7a17 	vstr	s15, [sp, #92]	@ 0x5c
  *sum += *input_0++ * filter_2;
 801c102:	ee66 6aa5 	vmul.f32	s13, s13, s11
 801c106:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801c10a:	edcd 7a17 	vstr	s15, [sp, #92]	@ 0x5c
  *sum += *input_0++ * filter_3;
 801c10e:	ee27 7a06 	vmul.f32	s14, s14, s12
 801c112:	ee77 7a87 	vadd.f32	s15, s15, s14
 801c116:	edcd 7a17 	vstr	s15, [sp, #92]	@ 0x5c
        mac_1row_4col_fp_IOHW_forint8w(&sum[1], input_0, filter_0, filter_1, filter_2, filter_3);
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801c11a:	f990 1002 	ldrsb.w	r1, [r0, #2]
 801c11e:	ee07 1a90 	vmov	s15, r1
 801c122:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c126:	f992 1002 	ldrsb.w	r1, [r2, #2]
 801c12a:	ee03 1a90 	vmov	s7, r1
 801c12e:	eef8 3ae3 	vcvt.f32.s32	s7, s7
 801c132:	f99a 1002 	ldrsb.w	r1, [sl, #2]
 801c136:	ee06 1a90 	vmov	s13, r1
 801c13a:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801c13e:	f993 1002 	ldrsb.w	r1, [r3, #2]
 801c142:	ee07 1a10 	vmov	s14, r1
 801c146:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  *sum += *input_0++ * filter_0;
 801c14a:	ee67 7a84 	vmul.f32	s15, s15, s8
 801c14e:	ee77 7aa4 	vadd.f32	s15, s15, s9
 801c152:	edcd 7a18 	vstr	s15, [sp, #96]	@ 0x60
  *sum += *input_0++ * filter_1;
 801c156:	ee63 3a85 	vmul.f32	s7, s7, s10
 801c15a:	ee77 7aa3 	vadd.f32	s15, s15, s7
 801c15e:	edcd 7a18 	vstr	s15, [sp, #96]	@ 0x60
  *sum += *input_0++ * filter_2;
 801c162:	ee66 6aa5 	vmul.f32	s13, s13, s11
 801c166:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801c16a:	edcd 7a18 	vstr	s15, [sp, #96]	@ 0x60
  *sum += *input_0++ * filter_3;
 801c16e:	ee27 7a06 	vmul.f32	s14, s14, s12
 801c172:	ee77 7a87 	vadd.f32	s15, s15, s14
 801c176:	edcd 7a18 	vstr	s15, [sp, #96]	@ 0x60
        mac_1row_4col_fp_IOHW_forint8w(&sum[2], input_0, filter_0, filter_1, filter_2, filter_3);
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801c17a:	1d07      	adds	r7, r0, #4
 801c17c:	f990 1003 	ldrsb.w	r1, [r0, #3]
 801c180:	ee07 1a90 	vmov	s15, r1
 801c184:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c188:	f102 0804 	add.w	r8, r2, #4
 801c18c:	f992 2003 	ldrsb.w	r2, [r2, #3]
 801c190:	ee03 2a90 	vmov	s7, r2
 801c194:	eef8 3ae3 	vcvt.f32.s32	s7, s7
 801c198:	f10a 0904 	add.w	r9, sl, #4
 801c19c:	f99a 2003 	ldrsb.w	r2, [sl, #3]
 801c1a0:	ee06 2a90 	vmov	s13, r2
 801c1a4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801c1a8:	f103 0a04 	add.w	sl, r3, #4
 801c1ac:	f993 3003 	ldrsb.w	r3, [r3, #3]
 801c1b0:	ee07 3a10 	vmov	s14, r3
 801c1b4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  *sum += *input_0++ * filter_0;
 801c1b8:	ee67 7a84 	vmul.f32	s15, s15, s8
 801c1bc:	ee77 7aa4 	vadd.f32	s15, s15, s9
 801c1c0:	edcd 7a19 	vstr	s15, [sp, #100]	@ 0x64
  *sum += *input_0++ * filter_1;
 801c1c4:	ee23 5a85 	vmul.f32	s10, s7, s10
 801c1c8:	ee77 7a85 	vadd.f32	s15, s15, s10
 801c1cc:	edcd 7a19 	vstr	s15, [sp, #100]	@ 0x64
  *sum += *input_0++ * filter_2;
 801c1d0:	ee66 6aa5 	vmul.f32	s13, s13, s11
 801c1d4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801c1d8:	edcd 7a19 	vstr	s15, [sp, #100]	@ 0x64
  *sum += *input_0++ * filter_3;
 801c1dc:	ee27 7a06 	vmul.f32	s14, s14, s12
 801c1e0:	ee77 7a87 	vadd.f32	s15, s15, s14
 801c1e4:	edcd 7a19 	vstr	s15, [sp, #100]	@ 0x64
        mac_1row_4col_fp_IOHW_forint8w(&sum[3], input_0, filter_0, filter_1, filter_2, filter_3);

        /* Accumulate partial sum into output data */
        assign_sum_to_pointwise_output_1row4col(out_0, sum, output_activation_min, output_activation_max);
 801c1e8:	eef0 0a68 	vmov.f32	s1, s17
 801c1ec:	eeb0 0a48 	vmov.f32	s0, s16
 801c1f0:	a916      	add	r1, sp, #88	@ 0x58
 801c1f2:	4630      	mov	r0, r6
 801c1f4:	f7fd fdf9 	bl	8019dea <assign_sum_to_pointwise_output_1row4col>
        out_0 += 4;
 801c1f8:	3610      	adds	r6, #16
      while (col_count_div4--) {
 801c1fa:	4629      	mov	r1, r5
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801c1fc:	4653      	mov	r3, sl
 801c1fe:	46ca      	mov	sl, r9
 801c200:	4642      	mov	r2, r8
 801c202:	4638      	mov	r0, r7
      while (col_count_div4--) {
 801c204:	1e4d      	subs	r5, r1, #1
 801c206:	b2ad      	uxth	r5, r5
 801c208:	2900      	cmp	r1, #0
 801c20a:	f47f af17 	bne.w	801c03c <pointwise_conv_fp_4row4col_IOHW_int8weight_partialCH_4innercol+0x650>
    for (i_ch_in = 0; i_ch_in < input_depth; i_ch_in+=4) {
 801c20e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 801c212:	9f04      	ldr	r7, [sp, #16]
 801c214:	f108 0804 	add.w	r8, r8, #4
 801c218:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801c21a:	4543      	cmp	r3, r8
 801c21c:	dd29      	ble.n	801c272 <pointwise_conv_fp_4row4col_IOHW_int8weight_partialCH_4innercol+0x886>
      float* out_0 = &output_data[(num_elements - leftover_elements) * output_depth];
 801c21e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801c220:	9a08      	ldr	r2, [sp, #32]
 801c222:	1a9c      	subs	r4, r3, r2
 801c224:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801c226:	fb04 f603 	mul.w	r6, r4, r3
 801c22a:	9b36      	ldr	r3, [sp, #216]	@ 0xd8
 801c22c:	eb03 0686 	add.w	r6, r3, r6, lsl #2
      const float* input_0 = &input_data[(num_elements - leftover_elements) * input_depth + i_ch_in];
 801c230:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801c232:	fb03 8404 	mla	r4, r3, r4, r8
 801c236:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801c238:	eb03 0484 	add.w	r4, r3, r4, lsl #2
      const int8_t* filter_0_int8 = &filter_sram[i_ch_in * first_k_channel];
 801c23c:	9b32      	ldr	r3, [sp, #200]	@ 0xc8
 801c23e:	fb08 3c0b 	mla	ip, r8, fp, r3
      const int8_t* filter_1_int8 = &filter_sram[(i_ch_in + 1) * first_k_channel];
 801c242:	f108 0501 	add.w	r5, r8, #1
 801c246:	fb08 b00b 	mla	r0, r8, fp, fp
 801c24a:	4418      	add	r0, r3
      const int8_t* filter_2_int8 = &filter_sram[(i_ch_in + 2) * first_k_channel];
 801c24c:	f108 0a02 	add.w	sl, r8, #2
 801c250:	fb0a 310b 	mla	r1, sl, fp, r3
      const int8_t* filter_3_int8 = &filter_sram[(i_ch_in + 3) * first_k_channel];
 801c254:	f108 0e03 	add.w	lr, r8, #3
 801c258:	fb0e 330b 	mla	r3, lr, fp, r3
      uint16_t col_count_div4 = (first_k_channel * DIM_KER_X * DIM_KER_Y) >> 2;
 801c25c:	ea4f 029b 	mov.w	r2, fp, lsr #2
      while (col_count_div4--) {
 801c260:	9503      	str	r5, [sp, #12]
 801c262:	f8cd a010 	str.w	sl, [sp, #16]
 801c266:	f8cd e014 	str.w	lr, [sp, #20]
 801c26a:	f8cd 8018 	str.w	r8, [sp, #24]
 801c26e:	9707      	str	r7, [sp, #28]
 801c270:	e6c4      	b.n	801bffc <pointwise_conv_fp_4row4col_IOHW_int8weight_partialCH_4innercol+0x610>
      }
    }

    leftover_elements--;
 801c272:	f8dd e020 	ldr.w	lr, [sp, #32]
 801c276:	46b8      	mov	r8, r7
 801c278:	f10e 3eff 	add.w	lr, lr, #4294967295	@ 0xffffffff
  while (leftover_elements) {
 801c27c:	f1be 0f00 	cmp.w	lr, #0
 801c280:	d006      	beq.n	801c290 <pointwise_conv_fp_4row4col_IOHW_int8weight_partialCH_4innercol+0x8a4>
    for (i_ch_in = 0; i_ch_in < input_depth; i_ch_in+=4) {
 801c282:	f04f 0a00 	mov.w	sl, #0
 801c286:	f8cd e020 	str.w	lr, [sp, #32]
 801c28a:	4647      	mov	r7, r8
 801c28c:	46d0      	mov	r8, sl
 801c28e:	e7c3      	b.n	801c218 <pointwise_conv_fp_4row4col_IOHW_int8weight_partialCH_4innercol+0x82c>
  }

  /* Return to application */
  return STATE_SUCCESS_fp;
}
 801c290:	2000      	movs	r0, #0
 801c292:	b027      	add	sp, #156	@ 0x9c
 801c294:	ecbd 8b02 	vpop	{d8}
 801c298:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c29c <strided_slice_4Dto4D>:

#include "tinyengine_function_fp.h"

tinyengine_status_fp strided_slice_4Dto4D(const float* input, const uint16_t inn, const uint16_t inc, const uint16_t inh, const uint16_t inw,
                                          const uint16_t* begin, const uint16_t* end, const uint16_t* stride,
                                          float* output, const uint16_t on, const uint16_t oc, const uint16_t oh, const uint16_t ow) {
 801c29c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c2a0:	b083      	sub	sp, #12
 801c2a2:	4607      	mov	r7, r0
 801c2a4:	4616      	mov	r6, r2
 801c2a6:	9301      	str	r3, [sp, #4]
 801c2a8:	f8bd b030 	ldrh.w	fp, [sp, #48]	@ 0x30
 801c2ac:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801c2ae:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801c2b0:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 801c2b2:	f8bd a048 	ldrh.w	sl, [sp, #72]	@ 0x48
 801c2b6:	f8bd 904c 	ldrh.w	r9, [sp, #76]	@ 0x4c
 801c2ba:	f8bd 8050 	ldrh.w	r8, [sp, #80]	@ 0x50
  int n, c, h, w;
  //begin and end are in [n, c, h, w]
  for(n = begin[0]; n < end[0]; n += stride[0]){
 801c2be:	f8b2 e000 	ldrh.w	lr, [r2]
 801c2c2:	e02e      	b.n	801c322 <strided_slice_4Dto4D+0x86>
		for(h = begin[2]; h < end[2]; h += stride[0]){
		  for(w = begin[3]; w < end[3]; w += stride[0]){
				for(c = begin[1]; c < end[1]; c += stride[0]){
					output[((h + n * oh) * ow + w) * oc + c] = input[((h + n * inh) * inw + w) * inc + c];
 801c2c4:	9b01      	ldr	r3, [sp, #4]
 801c2c6:	fb0e c203 	mla	r2, lr, r3, ip
 801c2ca:	fb02 020b 	mla	r2, r2, fp, r0
 801c2ce:	fb02 1206 	mla	r2, r2, r6, r1
 801c2d2:	fb0e c309 	mla	r3, lr, r9, ip
 801c2d6:	fb03 0308 	mla	r3, r3, r8, r0
 801c2da:	fb03 130a 	mla	r3, r3, sl, r1
 801c2de:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 801c2e0:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 801c2e4:	eb07 0282 	add.w	r2, r7, r2, lsl #2
 801c2e8:	6812      	ldr	r2, [r2, #0]
 801c2ea:	601a      	str	r2, [r3, #0]
				for(c = begin[1]; c < end[1]; c += stride[0]){
 801c2ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801c2ee:	881b      	ldrh	r3, [r3, #0]
 801c2f0:	4419      	add	r1, r3
 801c2f2:	8863      	ldrh	r3, [r4, #2]
 801c2f4:	428b      	cmp	r3, r1
 801c2f6:	dce5      	bgt.n	801c2c4 <strided_slice_4Dto4D+0x28>
		  for(w = begin[3]; w < end[3]; w += stride[0]){
 801c2f8:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 801c2fa:	882b      	ldrh	r3, [r5, #0]
 801c2fc:	4418      	add	r0, r3
 801c2fe:	88e3      	ldrh	r3, [r4, #6]
 801c300:	4283      	cmp	r3, r0
 801c302:	dd03      	ble.n	801c30c <strided_slice_4Dto4D+0x70>
				for(c = begin[1]; c < end[1]; c += stride[0]){
 801c304:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801c306:	8859      	ldrh	r1, [r3, #2]
 801c308:	950f      	str	r5, [sp, #60]	@ 0x3c
 801c30a:	e7f2      	b.n	801c2f2 <strided_slice_4Dto4D+0x56>
		for(h = begin[2]; h < end[2]; h += stride[0]){
 801c30c:	882b      	ldrh	r3, [r5, #0]
 801c30e:	449c      	add	ip, r3
 801c310:	88a3      	ldrh	r3, [r4, #4]
 801c312:	4563      	cmp	r3, ip
 801c314:	dd02      	ble.n	801c31c <strided_slice_4Dto4D+0x80>
		  for(w = begin[3]; w < end[3]; w += stride[0]){
 801c316:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801c318:	88d8      	ldrh	r0, [r3, #6]
 801c31a:	e7f0      	b.n	801c2fe <strided_slice_4Dto4D+0x62>
  for(n = begin[0]; n < end[0]; n += stride[0]){
 801c31c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801c31e:	882b      	ldrh	r3, [r5, #0]
 801c320:	449e      	add	lr, r3
 801c322:	8823      	ldrh	r3, [r4, #0]
 801c324:	4573      	cmp	r3, lr
 801c326:	dd03      	ble.n	801c330 <strided_slice_4Dto4D+0x94>
		for(h = begin[2]; h < end[2]; h += stride[0]){
 801c328:	f8b2 c004 	ldrh.w	ip, [r2, #4]
 801c32c:	920d      	str	r2, [sp, #52]	@ 0x34
 801c32e:	e7ef      	b.n	801c310 <strided_slice_4Dto4D+0x74>
	  }
	}
	
	/* Return to application */
	return STATE_SUCCESS_fp;
}
 801c330:	2000      	movs	r0, #0
 801c332:	b003      	add	sp, #12
 801c334:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c338 <sub>:

tinyengine_status_fp sub(const uint16_t size, const float* input1_data,
			               const float* input2_data, float* output_data) {
  int i;
  
  for (i = 0; i < size; ++i) {
 801c338:	f04f 0c00 	mov.w	ip, #0
 801c33c:	4560      	cmp	r0, ip
 801c33e:	dd15      	ble.n	801c36c <sub+0x34>
			               const float* input2_data, float* output_data) {
 801c340:	b500      	push	{lr}
    output_data[i] = input1_data[i] - input2_data[i];
 801c342:	eb01 0e8c 	add.w	lr, r1, ip, lsl #2
 801c346:	edde 7a00 	vldr	s15, [lr]
 801c34a:	eb02 0e8c 	add.w	lr, r2, ip, lsl #2
 801c34e:	ed9e 7a00 	vldr	s14, [lr]
 801c352:	eb03 0e8c 	add.w	lr, r3, ip, lsl #2
 801c356:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801c35a:	edce 7a00 	vstr	s15, [lr]
  for (i = 0; i < size; ++i) {
 801c35e:	f10c 0c01 	add.w	ip, ip, #1
 801c362:	4560      	cmp	r0, ip
 801c364:	dced      	bgt.n	801c342 <sub+0xa>
  }
  
  /* Return to application */
  return STATE_SUCCESS_fp;
}
 801c366:	2000      	movs	r0, #0
 801c368:	f85d fb04 	ldr.w	pc, [sp], #4
 801c36c:	2000      	movs	r0, #0
 801c36e:	4770      	bx	lr

0801c370 <sum_3D>:
 * -------------------------------------------------------------------- */

#include "tinyengine_function_fp.h"

tinyengine_status_fp sum_3D(const float* input_data, const uint16_t input_w, const uint16_t input_h,
                      const uint16_t input_c, const uint16_t axis, float* output_data) {
 801c370:	b570      	push	{r4, r5, r6, lr}
 801c372:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 801c376:	9c05      	ldr	r4, [sp, #20]
  int c, h, w, i;
  float sum;

  if (axis == 2){
 801c378:	2d02      	cmp	r5, #2
 801c37a:	d024      	beq.n	801c3c6 <sum_3D+0x56>

        output_data[c + (h * input_c)] = sum;
      }
    }
  }
  else if (axis == 1){
 801c37c:	2d01      	cmp	r5, #1
 801c37e:	d045      	beq.n	801c40c <sum_3D+0x9c>
        output_data[c + (w * input_c)] = sum;
      }
    }
  }
  else{ /* axis == 0 */
    for (h = 0; h < input_h; ++h) {
 801c380:	2600      	movs	r6, #0
 801c382:	e062      	b.n	801c44a <sum_3D+0xda>
          sum += input_data[(w + h * input_w) * input_c + c];
 801c384:	fb05 ec01 	mla	ip, r5, r1, lr
 801c388:	fb03 6c0c 	mla	ip, r3, ip, r6
 801c38c:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 801c390:	ed9c 7a00 	vldr	s14, [ip]
 801c394:	ee77 7a87 	vadd.f32	s15, s15, s14
        for (w = 0; w < input_w; ++w) {
 801c398:	f10e 0e01 	add.w	lr, lr, #1
 801c39c:	4571      	cmp	r1, lr
 801c39e:	dcf1      	bgt.n	801c384 <sum_3D+0x14>
        output_data[c + (h * input_c)] = sum;
 801c3a0:	fb05 6c03 	mla	ip, r5, r3, r6
 801c3a4:	eb04 0c8c 	add.w	ip, r4, ip, lsl #2
 801c3a8:	edcc 7a00 	vstr	s15, [ip]
      for (h = 0; h < input_h; ++h) {
 801c3ac:	3501      	adds	r5, #1
 801c3ae:	42aa      	cmp	r2, r5
 801c3b0:	dd04      	ble.n	801c3bc <sum_3D+0x4c>
        sum = 0;
 801c3b2:	eddf 7a29 	vldr	s15, [pc, #164]	@ 801c458 <sum_3D+0xe8>
        for (w = 0; w < input_w; ++w) {
 801c3b6:	f04f 0e00 	mov.w	lr, #0
 801c3ba:	e7ef      	b.n	801c39c <sum_3D+0x2c>
    for (c = 0; c < input_c; ++c) {
 801c3bc:	3601      	adds	r6, #1
 801c3be:	42b3      	cmp	r3, r6
 801c3c0:	dd47      	ble.n	801c452 <sum_3D+0xe2>
      for (h = 0; h < input_h; ++h) {
 801c3c2:	2500      	movs	r5, #0
 801c3c4:	e7f3      	b.n	801c3ae <sum_3D+0x3e>
    for (c = 0; c < input_c; ++c) {
 801c3c6:	2600      	movs	r6, #0
 801c3c8:	e7f9      	b.n	801c3be <sum_3D+0x4e>
        output_data[c + (w * input_c)] = sum;
 801c3ca:	fb05 6c03 	mla	ip, r5, r3, r6
 801c3ce:	eb04 0c8c 	add.w	ip, r4, ip, lsl #2
 801c3d2:	edcc 7a00 	vstr	s15, [ip]
      for (w = 0; w < input_w; ++w) {
 801c3d6:	3501      	adds	r5, #1
 801c3d8:	42a9      	cmp	r1, r5
 801c3da:	dd12      	ble.n	801c402 <sum_3D+0x92>
        sum = 0;
 801c3dc:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 801c458 <sum_3D+0xe8>
        for (h = 0; h < input_h; ++h) {
 801c3e0:	f04f 0e00 	mov.w	lr, #0
 801c3e4:	4572      	cmp	r2, lr
 801c3e6:	ddf0      	ble.n	801c3ca <sum_3D+0x5a>
          sum += input_data[(w + h * input_w) * input_c + c];
 801c3e8:	fb0e 5c01 	mla	ip, lr, r1, r5
 801c3ec:	fb03 6c0c 	mla	ip, r3, ip, r6
 801c3f0:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 801c3f4:	ed9c 7a00 	vldr	s14, [ip]
 801c3f8:	ee77 7a87 	vadd.f32	s15, s15, s14
        for (h = 0; h < input_h; ++h) {
 801c3fc:	f10e 0e01 	add.w	lr, lr, #1
 801c400:	e7f0      	b.n	801c3e4 <sum_3D+0x74>
    for (c = 0; c < input_c; ++c) {
 801c402:	3601      	adds	r6, #1
 801c404:	42b3      	cmp	r3, r6
 801c406:	dd24      	ble.n	801c452 <sum_3D+0xe2>
      for (w = 0; w < input_w; ++w) {
 801c408:	2500      	movs	r5, #0
 801c40a:	e7e5      	b.n	801c3d8 <sum_3D+0x68>
    for (c = 0; c < input_c; ++c) {
 801c40c:	2600      	movs	r6, #0
 801c40e:	e7f9      	b.n	801c404 <sum_3D+0x94>
      for (w = 0; w < input_w; ++w) {
        sum = 0;

        for (c = 0; c < input_c; ++c) {
          sum += input_data[(w + h * input_w) * input_c + c];
 801c410:	fb06 5c01 	mla	ip, r6, r1, r5
 801c414:	fb03 ec0c 	mla	ip, r3, ip, lr
 801c418:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 801c41c:	ed9c 7a00 	vldr	s14, [ip]
 801c420:	ee77 7a87 	vadd.f32	s15, s15, s14
        for (c = 0; c < input_c; ++c) {
 801c424:	f10e 0e01 	add.w	lr, lr, #1
 801c428:	4573      	cmp	r3, lr
 801c42a:	dcf1      	bgt.n	801c410 <sum_3D+0xa0>
      }

        output_data[w + (h * input_w)] = sum;
 801c42c:	fb06 5c01 	mla	ip, r6, r1, r5
 801c430:	eb04 0c8c 	add.w	ip, r4, ip, lsl #2
 801c434:	edcc 7a00 	vstr	s15, [ip]
      for (w = 0; w < input_w; ++w) {
 801c438:	3501      	adds	r5, #1
 801c43a:	42a9      	cmp	r1, r5
 801c43c:	dd04      	ble.n	801c448 <sum_3D+0xd8>
        sum = 0;
 801c43e:	eddf 7a06 	vldr	s15, [pc, #24]	@ 801c458 <sum_3D+0xe8>
        for (c = 0; c < input_c; ++c) {
 801c442:	f04f 0e00 	mov.w	lr, #0
 801c446:	e7ef      	b.n	801c428 <sum_3D+0xb8>
    for (h = 0; h < input_h; ++h) {
 801c448:	3601      	adds	r6, #1
 801c44a:	42b2      	cmp	r2, r6
 801c44c:	dd01      	ble.n	801c452 <sum_3D+0xe2>
      for (w = 0; w < input_w; ++w) {
 801c44e:	2500      	movs	r5, #0
 801c450:	e7f3      	b.n	801c43a <sum_3D+0xca>
    }
  }
  
  /* Return to application */
  return STATE_SUCCESS_fp;
}
 801c452:	2000      	movs	r0, #0
 801c454:	bd70      	pop	{r4, r5, r6, pc}
 801c456:	bf00      	nop
 801c458:	00000000 	.word	0x00000000

0801c45c <sum_4D_exclude>:
 * -------------------------------------------------------------------- */

#include "tinyengine_function_fp.h"

tinyengine_status_fp sum_4D_exclude(const float* input_data, const uint16_t d1, const uint16_t d2,
                      const uint16_t d3, const uint16_t d4, const uint16_t axis, float* output_data) {
 801c45c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c460:	468c      	mov	ip, r1
 801c462:	4696      	mov	lr, r2
 801c464:	4619      	mov	r1, r3
 801c466:	f8bd 2018 	ldrh.w	r2, [sp, #24]
 801c46a:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 801c46e:	9c08      	ldr	r4, [sp, #32]
  int i, j, m, n;

  if (axis == 0){
 801c470:	2b03      	cmp	r3, #3
 801c472:	f200 80a4 	bhi.w	801c5be <sum_4D_exclude+0x162>
 801c476:	e8df f003 	tbb	[pc, r3]
 801c47a:	4f27      	.short	0x4f27
 801c47c:	9f77      	.short	0x9f77
    for (i = 0; i < d1; i++){
      float sum = 0;
      for (j = 0; j < d2; j++){
        for (m = 0; m < d3; m++) {
          for (n = 0; n < d4; n++){
            sum += input_data[((i * d2 + j) * d3 + m) * d4 + n];
 801c47e:	fb08 730e 	mla	r3, r8, lr, r7
 801c482:	fb01 6303 	mla	r3, r1, r3, r6
 801c486:	fb02 5303 	mla	r3, r2, r3, r5
 801c48a:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 801c48e:	ed93 7a00 	vldr	s14, [r3]
 801c492:	ee77 7a87 	vadd.f32	s15, s15, s14
          for (n = 0; n < d4; n++){
 801c496:	3501      	adds	r5, #1
 801c498:	42aa      	cmp	r2, r5
 801c49a:	dcf0      	bgt.n	801c47e <sum_4D_exclude+0x22>
        for (m = 0; m < d3; m++) {
 801c49c:	3601      	adds	r6, #1
 801c49e:	42b1      	cmp	r1, r6
 801c4a0:	dd01      	ble.n	801c4a6 <sum_4D_exclude+0x4a>
          for (n = 0; n < d4; n++){
 801c4a2:	2500      	movs	r5, #0
 801c4a4:	e7f8      	b.n	801c498 <sum_4D_exclude+0x3c>
      for (j = 0; j < d2; j++){
 801c4a6:	3701      	adds	r7, #1
 801c4a8:	45be      	cmp	lr, r7
 801c4aa:	dd01      	ble.n	801c4b0 <sum_4D_exclude+0x54>
        for (m = 0; m < d3; m++) {
 801c4ac:	2600      	movs	r6, #0
 801c4ae:	e7f6      	b.n	801c49e <sum_4D_exclude+0x42>
          }
        }
      }
      output_data[i] = sum;
 801c4b0:	eb04 0388 	add.w	r3, r4, r8, lsl #2
 801c4b4:	edc3 7a00 	vstr	s15, [r3]
    for (i = 0; i < d1; i++){
 801c4b8:	f108 0801 	add.w	r8, r8, #1
 801c4bc:	45c4      	cmp	ip, r8
 801c4be:	dd7e      	ble.n	801c5be <sum_4D_exclude+0x162>
      float sum = 0;
 801c4c0:	eddf 7a40 	vldr	s15, [pc, #256]	@ 801c5c4 <sum_4D_exclude+0x168>
      for (j = 0; j < d2; j++){
 801c4c4:	2700      	movs	r7, #0
 801c4c6:	e7ef      	b.n	801c4a8 <sum_4D_exclude+0x4c>
 801c4c8:	f04f 0800 	mov.w	r8, #0
 801c4cc:	e7f6      	b.n	801c4bc <sum_4D_exclude+0x60>
    for (j = 0; j < d2; j++){
      float sum = 0;
      for (i = 0; i < d1; i++){
        for (m = 0; m < d3; m++) {
          for (n = 0; n < d4; n++){
            sum += input_data[((i * d2 + j) * d3 + m) * d4 + n];
 801c4ce:	fb07 830e 	mla	r3, r7, lr, r8
 801c4d2:	fb01 6303 	mla	r3, r1, r3, r6
 801c4d6:	fb02 5303 	mla	r3, r2, r3, r5
 801c4da:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 801c4de:	ed93 7a00 	vldr	s14, [r3]
 801c4e2:	ee77 7a87 	vadd.f32	s15, s15, s14
          for (n = 0; n < d4; n++){
 801c4e6:	3501      	adds	r5, #1
 801c4e8:	42aa      	cmp	r2, r5
 801c4ea:	dcf0      	bgt.n	801c4ce <sum_4D_exclude+0x72>
        for (m = 0; m < d3; m++) {
 801c4ec:	3601      	adds	r6, #1
 801c4ee:	42b1      	cmp	r1, r6
 801c4f0:	dd01      	ble.n	801c4f6 <sum_4D_exclude+0x9a>
          for (n = 0; n < d4; n++){
 801c4f2:	2500      	movs	r5, #0
 801c4f4:	e7f8      	b.n	801c4e8 <sum_4D_exclude+0x8c>
      for (i = 0; i < d1; i++){
 801c4f6:	3701      	adds	r7, #1
 801c4f8:	45bc      	cmp	ip, r7
 801c4fa:	dd01      	ble.n	801c500 <sum_4D_exclude+0xa4>
        for (m = 0; m < d3; m++) {
 801c4fc:	2600      	movs	r6, #0
 801c4fe:	e7f6      	b.n	801c4ee <sum_4D_exclude+0x92>
          }
        }
      }
      output_data[j] = sum;
 801c500:	eb04 0388 	add.w	r3, r4, r8, lsl #2
 801c504:	edc3 7a00 	vstr	s15, [r3]
    for (j = 0; j < d2; j++){
 801c508:	f108 0801 	add.w	r8, r8, #1
 801c50c:	45c6      	cmp	lr, r8
 801c50e:	dd56      	ble.n	801c5be <sum_4D_exclude+0x162>
      float sum = 0;
 801c510:	eddf 7a2c 	vldr	s15, [pc, #176]	@ 801c5c4 <sum_4D_exclude+0x168>
      for (i = 0; i < d1; i++){
 801c514:	2700      	movs	r7, #0
 801c516:	e7ef      	b.n	801c4f8 <sum_4D_exclude+0x9c>
 801c518:	f04f 0800 	mov.w	r8, #0
 801c51c:	e7f6      	b.n	801c50c <sum_4D_exclude+0xb0>
    for (m = 0; m < d3; m++) {
      float sum = 0;
        for (i = 0; i < d1; i++){
          for (j = 0; j < d2; j++){
          for (n = 0; n < d4; n++){
            sum += input_data[((i * d2 + j) * d3 + m) * d4 + n];
 801c51e:	fb07 630e 	mla	r3, r7, lr, r6
 801c522:	fb01 8303 	mla	r3, r1, r3, r8
 801c526:	fb02 5303 	mla	r3, r2, r3, r5
 801c52a:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 801c52e:	ed93 7a00 	vldr	s14, [r3]
 801c532:	ee77 7a87 	vadd.f32	s15, s15, s14
          for (n = 0; n < d4; n++){
 801c536:	3501      	adds	r5, #1
 801c538:	42aa      	cmp	r2, r5
 801c53a:	dcf0      	bgt.n	801c51e <sum_4D_exclude+0xc2>
          for (j = 0; j < d2; j++){
 801c53c:	3601      	adds	r6, #1
 801c53e:	45b6      	cmp	lr, r6
 801c540:	dd01      	ble.n	801c546 <sum_4D_exclude+0xea>
          for (n = 0; n < d4; n++){
 801c542:	2500      	movs	r5, #0
 801c544:	e7f8      	b.n	801c538 <sum_4D_exclude+0xdc>
        for (i = 0; i < d1; i++){
 801c546:	3701      	adds	r7, #1
 801c548:	45bc      	cmp	ip, r7
 801c54a:	dd01      	ble.n	801c550 <sum_4D_exclude+0xf4>
          for (j = 0; j < d2; j++){
 801c54c:	2600      	movs	r6, #0
 801c54e:	e7f6      	b.n	801c53e <sum_4D_exclude+0xe2>
          }
        }
      }
      output_data[m] = sum;
 801c550:	eb04 0388 	add.w	r3, r4, r8, lsl #2
 801c554:	edc3 7a00 	vstr	s15, [r3]
    for (m = 0; m < d3; m++) {
 801c558:	f108 0801 	add.w	r8, r8, #1
 801c55c:	4541      	cmp	r1, r8
 801c55e:	dd2e      	ble.n	801c5be <sum_4D_exclude+0x162>
      float sum = 0;
 801c560:	eddf 7a18 	vldr	s15, [pc, #96]	@ 801c5c4 <sum_4D_exclude+0x168>
        for (i = 0; i < d1; i++){
 801c564:	2700      	movs	r7, #0
 801c566:	e7ef      	b.n	801c548 <sum_4D_exclude+0xec>
 801c568:	f04f 0800 	mov.w	r8, #0
 801c56c:	e7f6      	b.n	801c55c <sum_4D_exclude+0x100>
    for (n = 0; n < d4; n++){
      float sum = 0;
        for (i = 0; i < d1; i++){
          for (j = 0; j < d2; j++){
            for (m = 0; m < d3; m++) {
            sum += input_data[((i * d2 + j) * d3 + m) * d4 + n];
 801c56e:	fb07 630e 	mla	r3, r7, lr, r6
 801c572:	fb01 5303 	mla	r3, r1, r3, r5
 801c576:	fb02 8303 	mla	r3, r2, r3, r8
 801c57a:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 801c57e:	ed93 7a00 	vldr	s14, [r3]
 801c582:	ee77 7a87 	vadd.f32	s15, s15, s14
            for (m = 0; m < d3; m++) {
 801c586:	3501      	adds	r5, #1
 801c588:	42a9      	cmp	r1, r5
 801c58a:	dcf0      	bgt.n	801c56e <sum_4D_exclude+0x112>
          for (j = 0; j < d2; j++){
 801c58c:	3601      	adds	r6, #1
 801c58e:	45b6      	cmp	lr, r6
 801c590:	dd01      	ble.n	801c596 <sum_4D_exclude+0x13a>
            for (m = 0; m < d3; m++) {
 801c592:	2500      	movs	r5, #0
 801c594:	e7f8      	b.n	801c588 <sum_4D_exclude+0x12c>
        for (i = 0; i < d1; i++){
 801c596:	3701      	adds	r7, #1
 801c598:	45bc      	cmp	ip, r7
 801c59a:	dd01      	ble.n	801c5a0 <sum_4D_exclude+0x144>
          for (j = 0; j < d2; j++){
 801c59c:	2600      	movs	r6, #0
 801c59e:	e7f6      	b.n	801c58e <sum_4D_exclude+0x132>
          }
        }
      }
      output_data[n] = sum;
 801c5a0:	eb04 0388 	add.w	r3, r4, r8, lsl #2
 801c5a4:	edc3 7a00 	vstr	s15, [r3]
    for (n = 0; n < d4; n++){
 801c5a8:	f108 0801 	add.w	r8, r8, #1
 801c5ac:	4542      	cmp	r2, r8
 801c5ae:	dd06      	ble.n	801c5be <sum_4D_exclude+0x162>
      float sum = 0;
 801c5b0:	eddf 7a04 	vldr	s15, [pc, #16]	@ 801c5c4 <sum_4D_exclude+0x168>
        for (i = 0; i < d1; i++){
 801c5b4:	2700      	movs	r7, #0
 801c5b6:	e7ef      	b.n	801c598 <sum_4D_exclude+0x13c>
 801c5b8:	f04f 0800 	mov.w	r8, #0
 801c5bc:	e7f6      	b.n	801c5ac <sum_4D_exclude+0x150>
    }
  }
  
  /* Return to application */
  return STATE_SUCCESS_fp;
 801c5be:	2000      	movs	r0, #0
 801c5c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c5c4:	00000000 	.word	0x00000000

0801c5c8 <transpose_depthwise_mac_kernel3_2row_fp_uniweight>:
                      const uint16_t STRIDE, const uint16_t IN_PAD, const uint16_t OUT_PAD) {
 801c5c8:	b500      	push	{lr}
    *sum_0 += two_column_buffer[0] * ksrc_transposed[0];
 801c5ca:	edd0 7a00 	vldr	s15, [r0]
 801c5ce:	ed92 7a00 	vldr	s14, [r2]
 801c5d2:	edd3 6a00 	vldr	s13, [r3]
 801c5d6:	ee27 7a26 	vmul.f32	s14, s14, s13
 801c5da:	ee77 7a87 	vadd.f32	s15, s15, s14
 801c5de:	edc0 7a00 	vstr	s15, [r0]
    *sum_1 += two_column_buffer[1] * ksrc_transposed[0];
 801c5e2:	edd1 7a00 	vldr	s15, [r1]
 801c5e6:	ed92 7a01 	vldr	s14, [r2, #4]
 801c5ea:	edd3 6a00 	vldr	s13, [r3]
 801c5ee:	ee27 7a26 	vmul.f32	s14, s14, s13
 801c5f2:	ee77 7a87 	vadd.f32	s15, s15, s14
 801c5f6:	edc1 7a00 	vstr	s15, [r1]
    *sum_0 += two_column_buffer[1] * ksrc_transposed[1];
 801c5fa:	edd0 7a00 	vldr	s15, [r0]
 801c5fe:	ed92 7a01 	vldr	s14, [r2, #4]
 801c602:	edd3 6a01 	vldr	s13, [r3, #4]
 801c606:	ee27 7a26 	vmul.f32	s14, s14, s13
 801c60a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801c60e:	edc0 7a00 	vstr	s15, [r0]
    *sum_1 += two_column_buffer[2] * ksrc_transposed[1];
 801c612:	edd1 7a00 	vldr	s15, [r1]
 801c616:	ed92 7a02 	vldr	s14, [r2, #8]
 801c61a:	edd3 6a01 	vldr	s13, [r3, #4]
 801c61e:	ee27 7a26 	vmul.f32	s14, s14, s13
 801c622:	ee77 7a87 	vadd.f32	s15, s15, s14
 801c626:	edc1 7a00 	vstr	s15, [r1]
    *sum_0 += two_column_buffer[2] * ksrc_transposed[2];
 801c62a:	edd0 7a00 	vldr	s15, [r0]
 801c62e:	ed92 7a02 	vldr	s14, [r2, #8]
 801c632:	edd3 6a02 	vldr	s13, [r3, #8]
 801c636:	ee27 7a26 	vmul.f32	s14, s14, s13
 801c63a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801c63e:	edc0 7a00 	vstr	s15, [r0]
    *sum_1 += two_column_buffer[3] * ksrc_transposed[2];
 801c642:	edd1 7a00 	vldr	s15, [r1]
 801c646:	ed92 7a03 	vldr	s14, [r2, #12]
 801c64a:	edd3 6a02 	vldr	s13, [r3, #8]
 801c64e:	ee27 7a26 	vmul.f32	s14, s14, s13
 801c652:	ee77 7a87 	vadd.f32	s15, s15, s14
 801c656:	edc1 7a00 	vstr	s15, [r1]
    two_column_buffer += (input_width - 1) * STRIDE + 1 + IN_PAD * 2 + OUT_PAD;
 801c65a:	f8bd e004 	ldrh.w	lr, [sp, #4]
 801c65e:	f10e 3eff 	add.w	lr, lr, #4294967295	@ 0xffffffff
 801c662:	f8bd c008 	ldrh.w	ip, [sp, #8]
 801c666:	fb0e fc0c 	mul.w	ip, lr, ip
 801c66a:	f10c 0c01 	add.w	ip, ip, #1
 801c66e:	f8bd e00c 	ldrh.w	lr, [sp, #12]
 801c672:	eb0c 0c4e 	add.w	ip, ip, lr, lsl #1
 801c676:	f8bd e010 	ldrh.w	lr, [sp, #16]
 801c67a:	44f4      	add	ip, lr
 801c67c:	eb02 028c 	add.w	r2, r2, ip, lsl #2
    *sum_0 += two_column_buffer[0] * ksrc_transposed[3];
 801c680:	edd0 7a00 	vldr	s15, [r0]
 801c684:	ed92 7a00 	vldr	s14, [r2]
 801c688:	edd3 6a03 	vldr	s13, [r3, #12]
 801c68c:	ee27 7a26 	vmul.f32	s14, s14, s13
 801c690:	ee77 7a87 	vadd.f32	s15, s15, s14
 801c694:	edc0 7a00 	vstr	s15, [r0]
    *sum_1 += two_column_buffer[1] * ksrc_transposed[3];
 801c698:	edd1 7a00 	vldr	s15, [r1]
 801c69c:	ed92 7a01 	vldr	s14, [r2, #4]
 801c6a0:	edd3 6a03 	vldr	s13, [r3, #12]
 801c6a4:	ee27 7a26 	vmul.f32	s14, s14, s13
 801c6a8:	ee77 7a87 	vadd.f32	s15, s15, s14
 801c6ac:	edc1 7a00 	vstr	s15, [r1]
    *sum_0 += two_column_buffer[1] * ksrc_transposed[4];
 801c6b0:	edd0 7a00 	vldr	s15, [r0]
 801c6b4:	ed92 7a01 	vldr	s14, [r2, #4]
 801c6b8:	edd3 6a04 	vldr	s13, [r3, #16]
 801c6bc:	ee27 7a26 	vmul.f32	s14, s14, s13
 801c6c0:	ee77 7a87 	vadd.f32	s15, s15, s14
 801c6c4:	edc0 7a00 	vstr	s15, [r0]
    *sum_1 += two_column_buffer[2] * ksrc_transposed[4];
 801c6c8:	edd1 7a00 	vldr	s15, [r1]
 801c6cc:	ed92 7a02 	vldr	s14, [r2, #8]
 801c6d0:	edd3 6a04 	vldr	s13, [r3, #16]
 801c6d4:	ee27 7a26 	vmul.f32	s14, s14, s13
 801c6d8:	ee77 7a87 	vadd.f32	s15, s15, s14
 801c6dc:	edc1 7a00 	vstr	s15, [r1]
    *sum_0 += two_column_buffer[2] * ksrc_transposed[5];
 801c6e0:	edd0 7a00 	vldr	s15, [r0]
 801c6e4:	ed92 7a02 	vldr	s14, [r2, #8]
 801c6e8:	edd3 6a05 	vldr	s13, [r3, #20]
 801c6ec:	ee27 7a26 	vmul.f32	s14, s14, s13
 801c6f0:	ee77 7a87 	vadd.f32	s15, s15, s14
 801c6f4:	edc0 7a00 	vstr	s15, [r0]
    *sum_1 += two_column_buffer[3] * ksrc_transposed[5];
 801c6f8:	edd1 7a00 	vldr	s15, [r1]
 801c6fc:	ed92 7a03 	vldr	s14, [r2, #12]
 801c700:	edd3 6a05 	vldr	s13, [r3, #20]
 801c704:	ee27 7a26 	vmul.f32	s14, s14, s13
 801c708:	ee77 7a87 	vadd.f32	s15, s15, s14
 801c70c:	edc1 7a00 	vstr	s15, [r1]
    two_column_buffer += (input_width - 1) * STRIDE + 1 + IN_PAD * 2 + OUT_PAD;
 801c710:	eb02 028c 	add.w	r2, r2, ip, lsl #2
    *sum_0 += two_column_buffer[0] * ksrc_transposed[6];
 801c714:	edd0 7a00 	vldr	s15, [r0]
 801c718:	ed92 7a00 	vldr	s14, [r2]
 801c71c:	edd3 6a06 	vldr	s13, [r3, #24]
 801c720:	ee27 7a26 	vmul.f32	s14, s14, s13
 801c724:	ee77 7a87 	vadd.f32	s15, s15, s14
 801c728:	edc0 7a00 	vstr	s15, [r0]
    *sum_1 += two_column_buffer[1] * ksrc_transposed[6];
 801c72c:	edd1 7a00 	vldr	s15, [r1]
 801c730:	ed92 7a01 	vldr	s14, [r2, #4]
 801c734:	edd3 6a06 	vldr	s13, [r3, #24]
 801c738:	ee27 7a26 	vmul.f32	s14, s14, s13
 801c73c:	ee77 7a87 	vadd.f32	s15, s15, s14
 801c740:	edc1 7a00 	vstr	s15, [r1]
    *sum_0 += two_column_buffer[1] * ksrc_transposed[7];
 801c744:	edd0 7a00 	vldr	s15, [r0]
 801c748:	ed92 7a01 	vldr	s14, [r2, #4]
 801c74c:	edd3 6a07 	vldr	s13, [r3, #28]
 801c750:	ee27 7a26 	vmul.f32	s14, s14, s13
 801c754:	ee77 7a87 	vadd.f32	s15, s15, s14
 801c758:	edc0 7a00 	vstr	s15, [r0]
    *sum_1 += two_column_buffer[2] * ksrc_transposed[7];
 801c75c:	edd1 7a00 	vldr	s15, [r1]
 801c760:	ed92 7a02 	vldr	s14, [r2, #8]
 801c764:	edd3 6a07 	vldr	s13, [r3, #28]
 801c768:	ee27 7a26 	vmul.f32	s14, s14, s13
 801c76c:	ee77 7a87 	vadd.f32	s15, s15, s14
 801c770:	edc1 7a00 	vstr	s15, [r1]
    *sum_0 += two_column_buffer[2] * ksrc_transposed[8];
 801c774:	edd0 7a00 	vldr	s15, [r0]
 801c778:	ed92 7a02 	vldr	s14, [r2, #8]
 801c77c:	edd3 6a08 	vldr	s13, [r3, #32]
 801c780:	ee27 7a26 	vmul.f32	s14, s14, s13
 801c784:	ee77 7a87 	vadd.f32	s15, s15, s14
 801c788:	edc0 7a00 	vstr	s15, [r0]
    *sum_1 += two_column_buffer[3] * ksrc_transposed[8];
 801c78c:	edd1 7a00 	vldr	s15, [r1]
 801c790:	ed92 7a03 	vldr	s14, [r2, #12]
 801c794:	edd3 6a08 	vldr	s13, [r3, #32]
 801c798:	ee27 7a26 	vmul.f32	s14, s14, s13
 801c79c:	ee77 7a87 	vadd.f32	s15, s15, s14
 801c7a0:	edc1 7a00 	vstr	s15, [r1]
}
 801c7a4:	f85d fb04 	ldr.w	pc, [sp], #4

0801c7a8 <transpose_depthwise_mac_kernel3_1row_fp_uniweight>:
    *sum_0 += two_column_buffer[0] * ksrc_transposed[0];
 801c7a8:	edd0 7a00 	vldr	s15, [r0]
 801c7ac:	ed91 7a00 	vldr	s14, [r1]
 801c7b0:	edd2 6a00 	vldr	s13, [r2]
 801c7b4:	ee27 7a26 	vmul.f32	s14, s14, s13
 801c7b8:	ee77 7a87 	vadd.f32	s15, s15, s14
 801c7bc:	edc0 7a00 	vstr	s15, [r0]
    *sum_0 += two_column_buffer[1] * ksrc_transposed[1];
 801c7c0:	ed91 7a01 	vldr	s14, [r1, #4]
 801c7c4:	edd2 6a01 	vldr	s13, [r2, #4]
 801c7c8:	ee27 7a26 	vmul.f32	s14, s14, s13
 801c7cc:	ee77 7a87 	vadd.f32	s15, s15, s14
 801c7d0:	edc0 7a00 	vstr	s15, [r0]
    *sum_0 += two_column_buffer[2] * ksrc_transposed[2];
 801c7d4:	ed91 7a02 	vldr	s14, [r1, #8]
 801c7d8:	edd2 6a02 	vldr	s13, [r2, #8]
 801c7dc:	ee27 7a26 	vmul.f32	s14, s14, s13
 801c7e0:	ee77 7a87 	vadd.f32	s15, s15, s14
 801c7e4:	edc0 7a00 	vstr	s15, [r0]
    two_column_buffer += (input_width - 1) * STRIDE + 1 + IN_PAD * 2 + OUT_PAD;
 801c7e8:	f103 3cff 	add.w	ip, r3, #4294967295	@ 0xffffffff
 801c7ec:	f8bd 3000 	ldrh.w	r3, [sp]
 801c7f0:	fb0c f303 	mul.w	r3, ip, r3
 801c7f4:	3301      	adds	r3, #1
 801c7f6:	f8bd c004 	ldrh.w	ip, [sp, #4]
 801c7fa:	eb03 034c 	add.w	r3, r3, ip, lsl #1
 801c7fe:	f8bd c008 	ldrh.w	ip, [sp, #8]
 801c802:	4463      	add	r3, ip
 801c804:	eb01 0183 	add.w	r1, r1, r3, lsl #2
    *sum_0 += two_column_buffer[0] * ksrc_transposed[3];
 801c808:	ed91 7a00 	vldr	s14, [r1]
 801c80c:	edd2 6a03 	vldr	s13, [r2, #12]
 801c810:	ee27 7a26 	vmul.f32	s14, s14, s13
 801c814:	ee77 7a87 	vadd.f32	s15, s15, s14
 801c818:	edc0 7a00 	vstr	s15, [r0]
    *sum_0 += two_column_buffer[1] * ksrc_transposed[4];
 801c81c:	ed91 7a01 	vldr	s14, [r1, #4]
 801c820:	edd2 6a04 	vldr	s13, [r2, #16]
 801c824:	ee27 7a26 	vmul.f32	s14, s14, s13
 801c828:	ee77 7a87 	vadd.f32	s15, s15, s14
 801c82c:	edc0 7a00 	vstr	s15, [r0]
    *sum_0 += two_column_buffer[2] * ksrc_transposed[5];
 801c830:	ed91 7a02 	vldr	s14, [r1, #8]
 801c834:	edd2 6a05 	vldr	s13, [r2, #20]
 801c838:	ee27 7a26 	vmul.f32	s14, s14, s13
 801c83c:	ee77 7a87 	vadd.f32	s15, s15, s14
 801c840:	edc0 7a00 	vstr	s15, [r0]
    two_column_buffer += (input_width - 1) * STRIDE + 1 + IN_PAD * 2 + OUT_PAD;
 801c844:	eb01 0183 	add.w	r1, r1, r3, lsl #2
    *sum_0 += two_column_buffer[0] * ksrc_transposed[6];
 801c848:	ed91 7a00 	vldr	s14, [r1]
 801c84c:	edd2 6a06 	vldr	s13, [r2, #24]
 801c850:	ee27 7a26 	vmul.f32	s14, s14, s13
 801c854:	ee77 7a87 	vadd.f32	s15, s15, s14
 801c858:	edc0 7a00 	vstr	s15, [r0]
    *sum_0 += two_column_buffer[1] * ksrc_transposed[7];
 801c85c:	ed91 7a01 	vldr	s14, [r1, #4]
 801c860:	edd2 6a07 	vldr	s13, [r2, #28]
 801c864:	ee27 7a26 	vmul.f32	s14, s14, s13
 801c868:	ee77 7a87 	vadd.f32	s15, s15, s14
 801c86c:	edc0 7a00 	vstr	s15, [r0]
    *sum_0 += two_column_buffer[2] * ksrc_transposed[8];
 801c870:	ed91 7a02 	vldr	s14, [r1, #8]
 801c874:	edd2 6a08 	vldr	s13, [r2, #32]
 801c878:	ee27 7a26 	vmul.f32	s14, s14, s13
 801c87c:	ee77 7a87 	vadd.f32	s15, s15, s14
 801c880:	edc0 7a00 	vstr	s15, [r0]
}
 801c884:	4770      	bx	lr

0801c886 <transpose_depthwise_conv_fp_kernel3_stride1_inpad1_outpad0_IOHW_int8weight>:
tinyengine_status_fp transpose_depthwise_conv_fp_kernel3_stride1_inpad1_outpad0_IOHW_int8weight(float* input_output_data, 
                 const uint16_t input_height, const uint16_t input_width, const uint16_t input_depth, 
                 const int8_t* filter_data, const float* bias_data, 
                 float* output_data, const uint16_t output_height, const uint16_t output_width, const uint16_t output_depth, 
                 const float output_activation_min, const float output_activation_max,
                 float* im2col_data, const uint16_t batches, const int pad_value) {
 801c886:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c88a:	ed2d 8b02 	vpush	{d8}
 801c88e:	b095      	sub	sp, #84	@ 0x54
 801c890:	4683      	mov	fp, r0
 801c892:	4690      	mov	r8, r2
 801c894:	461a      	mov	r2, r3
 801c896:	9820      	ldr	r0, [sp, #128]	@ 0x80
 801c898:	f8bd a08c 	ldrh.w	sl, [sp, #140]	@ 0x8c
 801c89c:	f8bd 7090 	ldrh.w	r7, [sp, #144]	@ 0x90
 801c8a0:	f8bd 6094 	ldrh.w	r6, [sp, #148]	@ 0x94
 801c8a4:	eeb0 8a40 	vmov.f32	s16, s0
 801c8a8:	eef0 8a60 	vmov.f32	s17, s1
 801c8ac:	eddd 7a28 	vldr	s15, [sp, #160]	@ 0xa0
  float* two_column_buffer = im2col_data;
 801c8b0:	9b26      	ldr	r3, [sp, #152]	@ 0x98
  int i, j, c;

  /* Setup the padding regions for the buffer */
  // Top region: 8bit x (input_x + pad_w * 2) x pad_h: unroll by pad_value
  for (i = 0; i < input_width + 2; i++) {
 801c8b2:	2500      	movs	r5, #0
 801c8b4:	e004      	b.n	801c8c0 <transpose_depthwise_conv_fp_kernel3_stride1_inpad1_outpad0_IOHW_int8weight+0x3a>
    *two_column_buffer++ = pad_value;
 801c8b6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801c8ba:	eca3 7a01 	vstmia	r3!, {s14}
  for (i = 0; i < input_width + 2; i++) {
 801c8be:	3501      	adds	r5, #1
 801c8c0:	f108 0401 	add.w	r4, r8, #1
 801c8c4:	42ac      	cmp	r4, r5
 801c8c6:	daf6      	bge.n	801c8b6 <transpose_depthwise_conv_fp_kernel3_stride1_inpad1_outpad0_IOHW_int8weight+0x30>
  }
  // Middle regions: left and right regions
  for (i = 0; i < input_height; i++) {
 801c8c8:	2500      	movs	r5, #0
 801c8ca:	e00a      	b.n	801c8e2 <transpose_depthwise_conv_fp_kernel3_stride1_inpad1_outpad0_IOHW_int8weight+0x5c>
    *two_column_buffer++ = pad_value; // left
 801c8cc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801c8d0:	ed83 7a00 	vstr	s14, [r3]
    two_column_buffer += input_width; // skip middle
 801c8d4:	f108 0c01 	add.w	ip, r8, #1
    *two_column_buffer++ = pad_value; // right
 801c8d8:	eb03 038c 	add.w	r3, r3, ip, lsl #2
 801c8dc:	eca3 7a01 	vstmia	r3!, {s14}
  for (i = 0; i < input_height; i++) {
 801c8e0:	3501      	adds	r5, #1
 801c8e2:	42a9      	cmp	r1, r5
 801c8e4:	dcf2      	bgt.n	801c8cc <transpose_depthwise_conv_fp_kernel3_stride1_inpad1_outpad0_IOHW_int8weight+0x46>
  }
  // Bottom region: 8bit x (input_x + pad_w * 2) x pad_h: unroll by pad_value
  for (i = 0; i < input_width + 2; i++) {
 801c8e6:	2500      	movs	r5, #0
 801c8e8:	e004      	b.n	801c8f4 <transpose_depthwise_conv_fp_kernel3_stride1_inpad1_outpad0_IOHW_int8weight+0x6e>
    *two_column_buffer++ = pad_value;
 801c8ea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801c8ee:	eca3 7a01 	vstmia	r3!, {s14}
  for (i = 0; i < input_width + 2; i++) {
 801c8f2:	3501      	adds	r5, #1
 801c8f4:	42ac      	cmp	r4, r5
 801c8f6:	daf8      	bge.n	801c8ea <transpose_depthwise_conv_fp_kernel3_stride1_inpad1_outpad0_IOHW_int8weight+0x64>
  /* Setup the input_output_data regions for HWC->CHW buffers */
  const float* src;
  const int8_t* ksrc;
  float ksrc_transposed[9];

  for (c = 0; c < input_depth; c++) {
 801c8f8:	2400      	movs	r4, #0
 801c8fa:	4625      	mov	r5, r4
 801c8fc:	4644      	mov	r4, r8
 801c8fe:	4684      	mov	ip, r0
 801c900:	e0b0      	b.n	801ca64 <transpose_depthwise_conv_fp_kernel3_stride1_inpad1_outpad0_IOHW_int8weight+0x1de>
    // Place input data into two_column_buffer
    for (i = 0; i < input_height; i++) {
      two_column_buffer++;

      for (j = 0; j < input_width; j++) {
        *two_column_buffer++ = *src;
 801c902:	f8d8 e000 	ldr.w	lr, [r8]
 801c906:	f843 eb04 	str.w	lr, [r3], #4
        src += input_depth;
 801c90a:	eb08 0882 	add.w	r8, r8, r2, lsl #2
      for (j = 0; j < input_width; j++) {
 801c90e:	f10c 0c01 	add.w	ip, ip, #1
 801c912:	4564      	cmp	r4, ip
 801c914:	dcf5      	bgt.n	801c902 <transpose_depthwise_conv_fp_kernel3_stride1_inpad1_outpad0_IOHW_int8weight+0x7c>
      }

      two_column_buffer++;
 801c916:	3304      	adds	r3, #4
    for (i = 0; i < input_height; i++) {
 801c918:	f109 0901 	add.w	r9, r9, #1
 801c91c:	4549      	cmp	r1, r9
 801c91e:	dd03      	ble.n	801c928 <transpose_depthwise_conv_fp_kernel3_stride1_inpad1_outpad0_IOHW_int8weight+0xa2>
      two_column_buffer++;
 801c920:	3304      	adds	r3, #4
      for (j = 0; j < input_width; j++) {
 801c922:	f04f 0c00 	mov.w	ip, #0
 801c926:	e7f4      	b.n	801c912 <transpose_depthwise_conv_fp_kernel3_stride1_inpad1_outpad0_IOHW_int8weight+0x8c>
    }

    // Transpose filter data
    ksrc = filter_data++;
 801c928:	1c43      	adds	r3, r0, #1
 801c92a:	9304      	str	r3, [sp, #16]
    for (i = 0; i < DIM_KER_Y * DIM_KER_X; i++) {
 801c92c:	2300      	movs	r3, #0
 801c92e:	e00f      	b.n	801c950 <transpose_depthwise_conv_fp_kernel3_stride1_inpad1_outpad0_IOHW_int8weight+0xca>
      ksrc_transposed[8 - i] = (float)*ksrc;
 801c930:	f990 c000 	ldrsb.w	ip, [r0]
 801c934:	ee07 ca90 	vmov	s15, ip
 801c938:	f1c3 0c08 	rsb	ip, r3, #8
 801c93c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c940:	f10d 0e50 	add.w	lr, sp, #80	@ 0x50
 801c944:	eb0e 0c8c 	add.w	ip, lr, ip, lsl #2
 801c948:	ed4c 7a09 	vstr	s15, [ip, #-36]	@ 0xffffffdc
      ksrc += input_depth;
 801c94c:	4410      	add	r0, r2
    for (i = 0; i < DIM_KER_Y * DIM_KER_X; i++) {
 801c94e:	3301      	adds	r3, #1
 801c950:	2b08      	cmp	r3, #8
 801c952:	d9ed      	bls.n	801c930 <transpose_depthwise_conv_fp_kernel3_stride1_inpad1_outpad0_IOHW_int8weight+0xaa>
    }

    float* inplace_output = input_output_data;
    float* two_column_buffer_start = im2col_data;
 801c954:	f8dd 9098 	ldr.w	r9, [sp, #152]	@ 0x98

    /* MAC Computation */
    for (i = 0; i < output_height; i++) {
 801c958:	f04f 0800 	mov.w	r8, #0
 801c95c:	9505      	str	r5, [sp, #20]
 801c95e:	9106      	str	r1, [sp, #24]
 801c960:	9207      	str	r2, [sp, #28]
 801c962:	e04a      	b.n	801c9fa <transpose_depthwise_conv_fp_kernel3_stride1_inpad1_outpad0_IOHW_int8weight+0x174>
        // We assume bias_data as zeros.
        float sum_0 = 0.0f;
        float sum_1 = 0.0f;
        transpose_depthwise_mac_kernel3_2row_fp_uniweight(&sum_0, &sum_1, two_column_buffer, ksrc_transposed, input_width, STRIDE, IN_PAD, OUT_PAD);
        inplace_output[(i * output_width + j) * output_depth] = TN_MIN(TN_MAX(sum_0, output_activation_min), output_activation_max);
        inplace_output[(i * output_width + j + 1) * output_depth] = TN_MIN(TN_MAX(sum_1, output_activation_min), output_activation_max);
 801c964:	fb03 6306 	mla	r3, r3, r6, r6
 801c968:	eb0b 0383 	add.w	r3, fp, r3, lsl #2
 801c96c:	edc3 7a00 	vstr	s15, [r3]

        two_column_buffer_start += 2;
 801c970:	f109 0908 	add.w	r9, r9, #8
      for (j = 0; j < output_width - 1; j+=2) {
 801c974:	3502      	adds	r5, #2
 801c976:	1e7b      	subs	r3, r7, #1
 801c978:	42ab      	cmp	r3, r5
 801c97a:	dd37      	ble.n	801c9ec <transpose_depthwise_conv_fp_kernel3_stride1_inpad1_outpad0_IOHW_int8weight+0x166>
        float sum_0 = 0.0f;
 801c97c:	2300      	movs	r3, #0
 801c97e:	9309      	str	r3, [sp, #36]	@ 0x24
        float sum_1 = 0.0f;
 801c980:	930a      	str	r3, [sp, #40]	@ 0x28
        transpose_depthwise_mac_kernel3_2row_fp_uniweight(&sum_0, &sum_1, two_column_buffer, ksrc_transposed, input_width, STRIDE, IN_PAD, OUT_PAD);
 801c982:	2300      	movs	r3, #0
 801c984:	9303      	str	r3, [sp, #12]
 801c986:	2301      	movs	r3, #1
 801c988:	9302      	str	r3, [sp, #8]
 801c98a:	9301      	str	r3, [sp, #4]
 801c98c:	9400      	str	r4, [sp, #0]
 801c98e:	ab0b      	add	r3, sp, #44	@ 0x2c
 801c990:	464a      	mov	r2, r9
 801c992:	a90a      	add	r1, sp, #40	@ 0x28
 801c994:	a809      	add	r0, sp, #36	@ 0x24
 801c996:	f7ff fe17 	bl	801c5c8 <transpose_depthwise_mac_kernel3_2row_fp_uniweight>
        inplace_output[(i * output_width + j) * output_depth] = TN_MIN(TN_MAX(sum_0, output_activation_min), output_activation_max);
 801c99a:	eddd 7a09 	vldr	s15, [sp, #36]	@ 0x24
 801c99e:	eef4 7ac8 	vcmpe.f32	s15, s16
 801c9a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c9a6:	dc01      	bgt.n	801c9ac <transpose_depthwise_conv_fp_kernel3_stride1_inpad1_outpad0_IOHW_int8weight+0x126>
 801c9a8:	eef0 7a48 	vmov.f32	s15, s16
 801c9ac:	eef4 7ae8 	vcmpe.f32	s15, s17
 801c9b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c9b4:	d401      	bmi.n	801c9ba <transpose_depthwise_conv_fp_kernel3_stride1_inpad1_outpad0_IOHW_int8weight+0x134>
 801c9b6:	eef0 7a68 	vmov.f32	s15, s17
 801c9ba:	fb08 5307 	mla	r3, r8, r7, r5
 801c9be:	fb06 f203 	mul.w	r2, r6, r3
 801c9c2:	eb0b 0282 	add.w	r2, fp, r2, lsl #2
 801c9c6:	edc2 7a00 	vstr	s15, [r2]
        inplace_output[(i * output_width + j + 1) * output_depth] = TN_MIN(TN_MAX(sum_1, output_activation_min), output_activation_max);
 801c9ca:	eddd 7a0a 	vldr	s15, [sp, #40]	@ 0x28
 801c9ce:	eef4 7ac8 	vcmpe.f32	s15, s16
 801c9d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c9d6:	dc01      	bgt.n	801c9dc <transpose_depthwise_conv_fp_kernel3_stride1_inpad1_outpad0_IOHW_int8weight+0x156>
 801c9d8:	eef0 7a48 	vmov.f32	s15, s16
 801c9dc:	eef4 7ae8 	vcmpe.f32	s15, s17
 801c9e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c9e4:	d4be      	bmi.n	801c964 <transpose_depthwise_conv_fp_kernel3_stride1_inpad1_outpad0_IOHW_int8weight+0xde>
 801c9e6:	eef0 7a68 	vmov.f32	s15, s17
 801c9ea:	e7bb      	b.n	801c964 <transpose_depthwise_conv_fp_kernel3_stride1_inpad1_outpad0_IOHW_int8weight+0xde>
      }

      /* left-over because odd number of output pixels */
      if (output_width & 0x1) {
 801c9ec:	f017 0f01 	tst.w	r7, #1
 801c9f0:	d107      	bne.n	801ca02 <transpose_depthwise_conv_fp_kernel3_stride1_inpad1_outpad0_IOHW_int8weight+0x17c>

        two_column_buffer_start++;
      }
      /* End of MAC Computation */

      two_column_buffer_start += 2;
 801c9f2:	f109 0908 	add.w	r9, r9, #8
    for (i = 0; i < output_height; i++) {
 801c9f6:	f108 0801 	add.w	r8, r8, #1
 801c9fa:	45c2      	cmp	sl, r8
 801c9fc:	dd2a      	ble.n	801ca54 <transpose_depthwise_conv_fp_kernel3_stride1_inpad1_outpad0_IOHW_int8weight+0x1ce>
      for (j = 0; j < output_width - 1; j+=2) {
 801c9fe:	2500      	movs	r5, #0
 801ca00:	e7b9      	b.n	801c976 <transpose_depthwise_conv_fp_kernel3_stride1_inpad1_outpad0_IOHW_int8weight+0xf0>
        float sum_0 = 0.0f;
 801ca02:	2300      	movs	r3, #0
 801ca04:	930a      	str	r3, [sp, #40]	@ 0x28
        transpose_depthwise_mac_kernel3_1row_fp_uniweight(&sum_0, two_column_buffer, ksrc_transposed, input_width, STRIDE, IN_PAD, OUT_PAD);
 801ca06:	2300      	movs	r3, #0
 801ca08:	9302      	str	r3, [sp, #8]
 801ca0a:	2301      	movs	r3, #1
 801ca0c:	9301      	str	r3, [sp, #4]
 801ca0e:	9300      	str	r3, [sp, #0]
 801ca10:	4623      	mov	r3, r4
 801ca12:	aa0b      	add	r2, sp, #44	@ 0x2c
 801ca14:	4649      	mov	r1, r9
 801ca16:	a80a      	add	r0, sp, #40	@ 0x28
 801ca18:	f7ff fec6 	bl	801c7a8 <transpose_depthwise_mac_kernel3_1row_fp_uniweight>
        inplace_output[(i * output_width + output_width - 1) * output_depth] = TN_MIN(TN_MAX(sum_0, output_activation_min), output_activation_max);
 801ca1c:	eddd 7a0a 	vldr	s15, [sp, #40]	@ 0x28
 801ca20:	eef4 7ac8 	vcmpe.f32	s15, s16
 801ca24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ca28:	dc01      	bgt.n	801ca2e <transpose_depthwise_conv_fp_kernel3_stride1_inpad1_outpad0_IOHW_int8weight+0x1a8>
 801ca2a:	eef0 7a48 	vmov.f32	s15, s16
 801ca2e:	eef4 7ae8 	vcmpe.f32	s15, s17
 801ca32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ca36:	d401      	bmi.n	801ca3c <transpose_depthwise_conv_fp_kernel3_stride1_inpad1_outpad0_IOHW_int8weight+0x1b6>
 801ca38:	eef0 7a68 	vmov.f32	s15, s17
 801ca3c:	fb08 7307 	mla	r3, r8, r7, r7
 801ca40:	3b01      	subs	r3, #1
 801ca42:	fb06 f303 	mul.w	r3, r6, r3
 801ca46:	eb0b 0383 	add.w	r3, fp, r3, lsl #2
 801ca4a:	edc3 7a00 	vstr	s15, [r3]
        two_column_buffer_start++;
 801ca4e:	f109 0904 	add.w	r9, r9, #4
 801ca52:	e7ce      	b.n	801c9f2 <transpose_depthwise_conv_fp_kernel3_stride1_inpad1_outpad0_IOHW_int8weight+0x16c>
    }

    bias_data++;
    input_output_data++;
 801ca54:	9d05      	ldr	r5, [sp, #20]
 801ca56:	9906      	ldr	r1, [sp, #24]
 801ca58:	9a07      	ldr	r2, [sp, #28]
 801ca5a:	f10b 0b04 	add.w	fp, fp, #4
  for (c = 0; c < input_depth; c++) {
 801ca5e:	3501      	adds	r5, #1
    ksrc = filter_data++;
 801ca60:	f8dd c010 	ldr.w	ip, [sp, #16]
  for (c = 0; c < input_depth; c++) {
 801ca64:	42aa      	cmp	r2, r5
 801ca66:	dd08      	ble.n	801ca7a <transpose_depthwise_conv_fp_kernel3_stride1_inpad1_outpad0_IOHW_int8weight+0x1f4>
    two_column_buffer = im2col_data + input_width + 2;
 801ca68:	1ca3      	adds	r3, r4, #2
 801ca6a:	9826      	ldr	r0, [sp, #152]	@ 0x98
 801ca6c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    src = input_output_data;
 801ca70:	46d8      	mov	r8, fp
    for (i = 0; i < input_height; i++) {
 801ca72:	f04f 0900 	mov.w	r9, #0
 801ca76:	4660      	mov	r0, ip
 801ca78:	e750      	b.n	801c91c <transpose_depthwise_conv_fp_kernel3_stride1_inpad1_outpad0_IOHW_int8weight+0x96>
  }
  
  /* Return to application */
  return STATE_SUCCESS_fp;
} 
 801ca7a:	2000      	movs	r0, #0
 801ca7c:	b015      	add	sp, #84	@ 0x54
 801ca7e:	ecbd 8b02 	vpop	{d8}
 801ca82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ca86 <transpose_depthwise_mac_kernel5_2row_fp_uniweight>:
                      const uint16_t STRIDE, const uint16_t IN_PAD, const uint16_t OUT_PAD) {
 801ca86:	b500      	push	{lr}
    *sum_0 += two_column_buffer[0] * ksrc_transposed[0];
 801ca88:	edd0 7a00 	vldr	s15, [r0]
 801ca8c:	ed92 7a00 	vldr	s14, [r2]
 801ca90:	edd3 6a00 	vldr	s13, [r3]
 801ca94:	ee27 7a26 	vmul.f32	s14, s14, s13
 801ca98:	ee77 7a87 	vadd.f32	s15, s15, s14
 801ca9c:	edc0 7a00 	vstr	s15, [r0]
    *sum_1 += two_column_buffer[1] * ksrc_transposed[0];
 801caa0:	edd1 7a00 	vldr	s15, [r1]
 801caa4:	ed92 7a01 	vldr	s14, [r2, #4]
 801caa8:	edd3 6a00 	vldr	s13, [r3]
 801caac:	ee27 7a26 	vmul.f32	s14, s14, s13
 801cab0:	ee77 7a87 	vadd.f32	s15, s15, s14
 801cab4:	edc1 7a00 	vstr	s15, [r1]
    *sum_0 += two_column_buffer[1] * ksrc_transposed[1];
 801cab8:	edd0 7a00 	vldr	s15, [r0]
 801cabc:	ed92 7a01 	vldr	s14, [r2, #4]
 801cac0:	edd3 6a01 	vldr	s13, [r3, #4]
 801cac4:	ee27 7a26 	vmul.f32	s14, s14, s13
 801cac8:	ee77 7a87 	vadd.f32	s15, s15, s14
 801cacc:	edc0 7a00 	vstr	s15, [r0]
    *sum_1 += two_column_buffer[2] * ksrc_transposed[1];
 801cad0:	edd1 7a00 	vldr	s15, [r1]
 801cad4:	ed92 7a02 	vldr	s14, [r2, #8]
 801cad8:	edd3 6a01 	vldr	s13, [r3, #4]
 801cadc:	ee27 7a26 	vmul.f32	s14, s14, s13
 801cae0:	ee77 7a87 	vadd.f32	s15, s15, s14
 801cae4:	edc1 7a00 	vstr	s15, [r1]
    *sum_0 += two_column_buffer[2] * ksrc_transposed[2];
 801cae8:	edd0 7a00 	vldr	s15, [r0]
 801caec:	ed92 7a02 	vldr	s14, [r2, #8]
 801caf0:	edd3 6a02 	vldr	s13, [r3, #8]
 801caf4:	ee27 7a26 	vmul.f32	s14, s14, s13
 801caf8:	ee77 7a87 	vadd.f32	s15, s15, s14
 801cafc:	edc0 7a00 	vstr	s15, [r0]
    *sum_1 += two_column_buffer[3] * ksrc_transposed[2];
 801cb00:	edd1 7a00 	vldr	s15, [r1]
 801cb04:	ed92 7a03 	vldr	s14, [r2, #12]
 801cb08:	edd3 6a02 	vldr	s13, [r3, #8]
 801cb0c:	ee27 7a26 	vmul.f32	s14, s14, s13
 801cb10:	ee77 7a87 	vadd.f32	s15, s15, s14
 801cb14:	edc1 7a00 	vstr	s15, [r1]
    *sum_0 += two_column_buffer[3] * ksrc_transposed[3];
 801cb18:	edd0 7a00 	vldr	s15, [r0]
 801cb1c:	ed92 7a03 	vldr	s14, [r2, #12]
 801cb20:	edd3 6a03 	vldr	s13, [r3, #12]
 801cb24:	ee27 7a26 	vmul.f32	s14, s14, s13
 801cb28:	ee77 7a87 	vadd.f32	s15, s15, s14
 801cb2c:	edc0 7a00 	vstr	s15, [r0]
    *sum_1 += two_column_buffer[4] * ksrc_transposed[3];
 801cb30:	edd1 7a00 	vldr	s15, [r1]
 801cb34:	ed92 7a04 	vldr	s14, [r2, #16]
 801cb38:	edd3 6a03 	vldr	s13, [r3, #12]
 801cb3c:	ee27 7a26 	vmul.f32	s14, s14, s13
 801cb40:	ee77 7a87 	vadd.f32	s15, s15, s14
 801cb44:	edc1 7a00 	vstr	s15, [r1]
    *sum_0 += two_column_buffer[4] * ksrc_transposed[4];
 801cb48:	edd0 7a00 	vldr	s15, [r0]
 801cb4c:	ed92 7a04 	vldr	s14, [r2, #16]
 801cb50:	edd3 6a04 	vldr	s13, [r3, #16]
 801cb54:	ee27 7a26 	vmul.f32	s14, s14, s13
 801cb58:	ee77 7a87 	vadd.f32	s15, s15, s14
 801cb5c:	edc0 7a00 	vstr	s15, [r0]
    *sum_1 += two_column_buffer[5] * ksrc_transposed[4];
 801cb60:	edd1 7a00 	vldr	s15, [r1]
 801cb64:	ed92 7a05 	vldr	s14, [r2, #20]
 801cb68:	edd3 6a04 	vldr	s13, [r3, #16]
 801cb6c:	ee27 7a26 	vmul.f32	s14, s14, s13
 801cb70:	ee77 7a87 	vadd.f32	s15, s15, s14
 801cb74:	edc1 7a00 	vstr	s15, [r1]
    two_column_buffer += (input_width - 1) * STRIDE + 1 + IN_PAD * 2 + OUT_PAD;
 801cb78:	f8bd e004 	ldrh.w	lr, [sp, #4]
 801cb7c:	f10e 3eff 	add.w	lr, lr, #4294967295	@ 0xffffffff
 801cb80:	f8bd c008 	ldrh.w	ip, [sp, #8]
 801cb84:	fb0e fc0c 	mul.w	ip, lr, ip
 801cb88:	f10c 0c01 	add.w	ip, ip, #1
 801cb8c:	f8bd e00c 	ldrh.w	lr, [sp, #12]
 801cb90:	eb0c 0c4e 	add.w	ip, ip, lr, lsl #1
 801cb94:	f8bd e010 	ldrh.w	lr, [sp, #16]
 801cb98:	44f4      	add	ip, lr
 801cb9a:	eb02 028c 	add.w	r2, r2, ip, lsl #2
    *sum_0 += two_column_buffer[0] * ksrc_transposed[5];
 801cb9e:	edd0 7a00 	vldr	s15, [r0]
 801cba2:	ed92 7a00 	vldr	s14, [r2]
 801cba6:	edd3 6a05 	vldr	s13, [r3, #20]
 801cbaa:	ee27 7a26 	vmul.f32	s14, s14, s13
 801cbae:	ee77 7a87 	vadd.f32	s15, s15, s14
 801cbb2:	edc0 7a00 	vstr	s15, [r0]
    *sum_1 += two_column_buffer[1] * ksrc_transposed[5];
 801cbb6:	edd1 7a00 	vldr	s15, [r1]
 801cbba:	ed92 7a01 	vldr	s14, [r2, #4]
 801cbbe:	edd3 6a05 	vldr	s13, [r3, #20]
 801cbc2:	ee27 7a26 	vmul.f32	s14, s14, s13
 801cbc6:	ee77 7a87 	vadd.f32	s15, s15, s14
 801cbca:	edc1 7a00 	vstr	s15, [r1]
    *sum_0 += two_column_buffer[1] * ksrc_transposed[6];
 801cbce:	edd0 7a00 	vldr	s15, [r0]
 801cbd2:	ed92 7a01 	vldr	s14, [r2, #4]
 801cbd6:	edd3 6a06 	vldr	s13, [r3, #24]
 801cbda:	ee27 7a26 	vmul.f32	s14, s14, s13
 801cbde:	ee77 7a87 	vadd.f32	s15, s15, s14
 801cbe2:	edc0 7a00 	vstr	s15, [r0]
    *sum_1 += two_column_buffer[2] * ksrc_transposed[6];
 801cbe6:	edd1 7a00 	vldr	s15, [r1]
 801cbea:	ed92 7a02 	vldr	s14, [r2, #8]
 801cbee:	edd3 6a06 	vldr	s13, [r3, #24]
 801cbf2:	ee27 7a26 	vmul.f32	s14, s14, s13
 801cbf6:	ee77 7a87 	vadd.f32	s15, s15, s14
 801cbfa:	edc1 7a00 	vstr	s15, [r1]
    *sum_0 += two_column_buffer[2] * ksrc_transposed[7];
 801cbfe:	edd0 7a00 	vldr	s15, [r0]
 801cc02:	ed92 7a02 	vldr	s14, [r2, #8]
 801cc06:	edd3 6a07 	vldr	s13, [r3, #28]
 801cc0a:	ee27 7a26 	vmul.f32	s14, s14, s13
 801cc0e:	ee77 7a87 	vadd.f32	s15, s15, s14
 801cc12:	edc0 7a00 	vstr	s15, [r0]
    *sum_1 += two_column_buffer[3] * ksrc_transposed[7];
 801cc16:	edd1 7a00 	vldr	s15, [r1]
 801cc1a:	ed92 7a03 	vldr	s14, [r2, #12]
 801cc1e:	edd3 6a07 	vldr	s13, [r3, #28]
 801cc22:	ee27 7a26 	vmul.f32	s14, s14, s13
 801cc26:	ee77 7a87 	vadd.f32	s15, s15, s14
 801cc2a:	edc1 7a00 	vstr	s15, [r1]
    *sum_0 += two_column_buffer[3] * ksrc_transposed[8];
 801cc2e:	edd0 7a00 	vldr	s15, [r0]
 801cc32:	ed92 7a03 	vldr	s14, [r2, #12]
 801cc36:	edd3 6a08 	vldr	s13, [r3, #32]
 801cc3a:	ee27 7a26 	vmul.f32	s14, s14, s13
 801cc3e:	ee77 7a87 	vadd.f32	s15, s15, s14
 801cc42:	edc0 7a00 	vstr	s15, [r0]
    *sum_1 += two_column_buffer[4] * ksrc_transposed[8];
 801cc46:	edd1 7a00 	vldr	s15, [r1]
 801cc4a:	ed92 7a04 	vldr	s14, [r2, #16]
 801cc4e:	edd3 6a08 	vldr	s13, [r3, #32]
 801cc52:	ee27 7a26 	vmul.f32	s14, s14, s13
 801cc56:	ee77 7a87 	vadd.f32	s15, s15, s14
 801cc5a:	edc1 7a00 	vstr	s15, [r1]
    *sum_0 += two_column_buffer[4] * ksrc_transposed[9];
 801cc5e:	edd0 7a00 	vldr	s15, [r0]
 801cc62:	ed92 7a04 	vldr	s14, [r2, #16]
 801cc66:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 801cc6a:	ee27 7a26 	vmul.f32	s14, s14, s13
 801cc6e:	ee77 7a87 	vadd.f32	s15, s15, s14
 801cc72:	edc0 7a00 	vstr	s15, [r0]
    *sum_1 += two_column_buffer[5] * ksrc_transposed[9];
 801cc76:	edd1 7a00 	vldr	s15, [r1]
 801cc7a:	ed92 7a05 	vldr	s14, [r2, #20]
 801cc7e:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 801cc82:	ee27 7a26 	vmul.f32	s14, s14, s13
 801cc86:	ee77 7a87 	vadd.f32	s15, s15, s14
 801cc8a:	edc1 7a00 	vstr	s15, [r1]
    two_column_buffer += (input_width - 1) * STRIDE + 1 + IN_PAD * 2 + OUT_PAD;
 801cc8e:	eb02 028c 	add.w	r2, r2, ip, lsl #2
    *sum_0 += two_column_buffer[0] * ksrc_transposed[10];
 801cc92:	edd0 7a00 	vldr	s15, [r0]
 801cc96:	ed92 7a00 	vldr	s14, [r2]
 801cc9a:	edd3 6a0a 	vldr	s13, [r3, #40]	@ 0x28
 801cc9e:	ee27 7a26 	vmul.f32	s14, s14, s13
 801cca2:	ee77 7a87 	vadd.f32	s15, s15, s14
 801cca6:	edc0 7a00 	vstr	s15, [r0]
    *sum_1 += two_column_buffer[1] * ksrc_transposed[10];
 801ccaa:	edd1 7a00 	vldr	s15, [r1]
 801ccae:	ed92 7a01 	vldr	s14, [r2, #4]
 801ccb2:	edd3 6a0a 	vldr	s13, [r3, #40]	@ 0x28
 801ccb6:	ee27 7a26 	vmul.f32	s14, s14, s13
 801ccba:	ee77 7a87 	vadd.f32	s15, s15, s14
 801ccbe:	edc1 7a00 	vstr	s15, [r1]
    *sum_0 += two_column_buffer[1] * ksrc_transposed[11];
 801ccc2:	edd0 7a00 	vldr	s15, [r0]
 801ccc6:	ed92 7a01 	vldr	s14, [r2, #4]
 801ccca:	edd3 6a0b 	vldr	s13, [r3, #44]	@ 0x2c
 801ccce:	ee27 7a26 	vmul.f32	s14, s14, s13
 801ccd2:	ee77 7a87 	vadd.f32	s15, s15, s14
 801ccd6:	edc0 7a00 	vstr	s15, [r0]
    *sum_1 += two_column_buffer[2] * ksrc_transposed[11];
 801ccda:	edd1 7a00 	vldr	s15, [r1]
 801ccde:	ed92 7a02 	vldr	s14, [r2, #8]
 801cce2:	edd3 6a0b 	vldr	s13, [r3, #44]	@ 0x2c
 801cce6:	ee27 7a26 	vmul.f32	s14, s14, s13
 801ccea:	ee77 7a87 	vadd.f32	s15, s15, s14
 801ccee:	edc1 7a00 	vstr	s15, [r1]
    *sum_0 += two_column_buffer[2] * ksrc_transposed[12];
 801ccf2:	edd0 7a00 	vldr	s15, [r0]
 801ccf6:	ed92 7a02 	vldr	s14, [r2, #8]
 801ccfa:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 801ccfe:	ee27 7a26 	vmul.f32	s14, s14, s13
 801cd02:	ee77 7a87 	vadd.f32	s15, s15, s14
 801cd06:	edc0 7a00 	vstr	s15, [r0]
    *sum_1 += two_column_buffer[3] * ksrc_transposed[12];
 801cd0a:	edd1 7a00 	vldr	s15, [r1]
 801cd0e:	ed92 7a03 	vldr	s14, [r2, #12]
 801cd12:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 801cd16:	ee27 7a26 	vmul.f32	s14, s14, s13
 801cd1a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801cd1e:	edc1 7a00 	vstr	s15, [r1]
    *sum_0 += two_column_buffer[3] * ksrc_transposed[13];
 801cd22:	edd0 7a00 	vldr	s15, [r0]
 801cd26:	ed92 7a03 	vldr	s14, [r2, #12]
 801cd2a:	edd3 6a0d 	vldr	s13, [r3, #52]	@ 0x34
 801cd2e:	ee27 7a26 	vmul.f32	s14, s14, s13
 801cd32:	ee77 7a87 	vadd.f32	s15, s15, s14
 801cd36:	edc0 7a00 	vstr	s15, [r0]
    *sum_1 += two_column_buffer[4] * ksrc_transposed[13];
 801cd3a:	edd1 7a00 	vldr	s15, [r1]
 801cd3e:	ed92 7a04 	vldr	s14, [r2, #16]
 801cd42:	edd3 6a0d 	vldr	s13, [r3, #52]	@ 0x34
 801cd46:	ee27 7a26 	vmul.f32	s14, s14, s13
 801cd4a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801cd4e:	edc1 7a00 	vstr	s15, [r1]
    *sum_0 += two_column_buffer[4] * ksrc_transposed[14];
 801cd52:	edd0 7a00 	vldr	s15, [r0]
 801cd56:	ed92 7a04 	vldr	s14, [r2, #16]
 801cd5a:	edd3 6a0e 	vldr	s13, [r3, #56]	@ 0x38
 801cd5e:	ee27 7a26 	vmul.f32	s14, s14, s13
 801cd62:	ee77 7a87 	vadd.f32	s15, s15, s14
 801cd66:	edc0 7a00 	vstr	s15, [r0]
    *sum_1 += two_column_buffer[5] * ksrc_transposed[14];
 801cd6a:	edd1 7a00 	vldr	s15, [r1]
 801cd6e:	ed92 7a05 	vldr	s14, [r2, #20]
 801cd72:	edd3 6a0e 	vldr	s13, [r3, #56]	@ 0x38
 801cd76:	ee27 7a26 	vmul.f32	s14, s14, s13
 801cd7a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801cd7e:	edc1 7a00 	vstr	s15, [r1]
    two_column_buffer += (input_width - 1) * STRIDE + 1 + IN_PAD * 2 + OUT_PAD;
 801cd82:	eb02 028c 	add.w	r2, r2, ip, lsl #2
    *sum_0 += two_column_buffer[0] * ksrc_transposed[15];
 801cd86:	edd0 7a00 	vldr	s15, [r0]
 801cd8a:	ed92 7a00 	vldr	s14, [r2]
 801cd8e:	edd3 6a0f 	vldr	s13, [r3, #60]	@ 0x3c
 801cd92:	ee27 7a26 	vmul.f32	s14, s14, s13
 801cd96:	ee77 7a87 	vadd.f32	s15, s15, s14
 801cd9a:	edc0 7a00 	vstr	s15, [r0]
    *sum_1 += two_column_buffer[1] * ksrc_transposed[15];
 801cd9e:	edd1 7a00 	vldr	s15, [r1]
 801cda2:	ed92 7a01 	vldr	s14, [r2, #4]
 801cda6:	edd3 6a0f 	vldr	s13, [r3, #60]	@ 0x3c
 801cdaa:	ee27 7a26 	vmul.f32	s14, s14, s13
 801cdae:	ee77 7a87 	vadd.f32	s15, s15, s14
 801cdb2:	edc1 7a00 	vstr	s15, [r1]
    *sum_0 += two_column_buffer[1] * ksrc_transposed[16];
 801cdb6:	edd0 7a00 	vldr	s15, [r0]
 801cdba:	ed92 7a01 	vldr	s14, [r2, #4]
 801cdbe:	edd3 6a10 	vldr	s13, [r3, #64]	@ 0x40
 801cdc2:	ee27 7a26 	vmul.f32	s14, s14, s13
 801cdc6:	ee77 7a87 	vadd.f32	s15, s15, s14
 801cdca:	edc0 7a00 	vstr	s15, [r0]
    *sum_1 += two_column_buffer[2] * ksrc_transposed[16];
 801cdce:	edd1 7a00 	vldr	s15, [r1]
 801cdd2:	ed92 7a02 	vldr	s14, [r2, #8]
 801cdd6:	edd3 6a10 	vldr	s13, [r3, #64]	@ 0x40
 801cdda:	ee27 7a26 	vmul.f32	s14, s14, s13
 801cdde:	ee77 7a87 	vadd.f32	s15, s15, s14
 801cde2:	edc1 7a00 	vstr	s15, [r1]
    *sum_0 += two_column_buffer[2] * ksrc_transposed[17];
 801cde6:	edd0 7a00 	vldr	s15, [r0]
 801cdea:	ed92 7a02 	vldr	s14, [r2, #8]
 801cdee:	edd3 6a11 	vldr	s13, [r3, #68]	@ 0x44
 801cdf2:	ee27 7a26 	vmul.f32	s14, s14, s13
 801cdf6:	ee77 7a87 	vadd.f32	s15, s15, s14
 801cdfa:	edc0 7a00 	vstr	s15, [r0]
    *sum_1 += two_column_buffer[3] * ksrc_transposed[17];
 801cdfe:	edd1 7a00 	vldr	s15, [r1]
 801ce02:	ed92 7a03 	vldr	s14, [r2, #12]
 801ce06:	edd3 6a11 	vldr	s13, [r3, #68]	@ 0x44
 801ce0a:	ee27 7a26 	vmul.f32	s14, s14, s13
 801ce0e:	ee77 7a87 	vadd.f32	s15, s15, s14
 801ce12:	edc1 7a00 	vstr	s15, [r1]
    *sum_0 += two_column_buffer[3] * ksrc_transposed[18];
 801ce16:	edd0 7a00 	vldr	s15, [r0]
 801ce1a:	ed92 7a03 	vldr	s14, [r2, #12]
 801ce1e:	edd3 6a12 	vldr	s13, [r3, #72]	@ 0x48
 801ce22:	ee27 7a26 	vmul.f32	s14, s14, s13
 801ce26:	ee77 7a87 	vadd.f32	s15, s15, s14
 801ce2a:	edc0 7a00 	vstr	s15, [r0]
    *sum_1 += two_column_buffer[4] * ksrc_transposed[18];
 801ce2e:	edd1 7a00 	vldr	s15, [r1]
 801ce32:	ed92 7a04 	vldr	s14, [r2, #16]
 801ce36:	edd3 6a12 	vldr	s13, [r3, #72]	@ 0x48
 801ce3a:	ee27 7a26 	vmul.f32	s14, s14, s13
 801ce3e:	ee77 7a87 	vadd.f32	s15, s15, s14
 801ce42:	edc1 7a00 	vstr	s15, [r1]
    *sum_0 += two_column_buffer[4] * ksrc_transposed[19];
 801ce46:	edd0 7a00 	vldr	s15, [r0]
 801ce4a:	ed92 7a04 	vldr	s14, [r2, #16]
 801ce4e:	edd3 6a13 	vldr	s13, [r3, #76]	@ 0x4c
 801ce52:	ee27 7a26 	vmul.f32	s14, s14, s13
 801ce56:	ee77 7a87 	vadd.f32	s15, s15, s14
 801ce5a:	edc0 7a00 	vstr	s15, [r0]
    *sum_1 += two_column_buffer[5] * ksrc_transposed[19];
 801ce5e:	edd1 7a00 	vldr	s15, [r1]
 801ce62:	ed92 7a05 	vldr	s14, [r2, #20]
 801ce66:	edd3 6a13 	vldr	s13, [r3, #76]	@ 0x4c
 801ce6a:	ee27 7a26 	vmul.f32	s14, s14, s13
 801ce6e:	ee77 7a87 	vadd.f32	s15, s15, s14
 801ce72:	edc1 7a00 	vstr	s15, [r1]
    two_column_buffer += (input_width - 1) * STRIDE + 1 + IN_PAD * 2 + OUT_PAD;
 801ce76:	eb02 028c 	add.w	r2, r2, ip, lsl #2
    *sum_0 += two_column_buffer[0] * ksrc_transposed[20];
 801ce7a:	edd0 7a00 	vldr	s15, [r0]
 801ce7e:	ed92 7a00 	vldr	s14, [r2]
 801ce82:	edd3 6a14 	vldr	s13, [r3, #80]	@ 0x50
 801ce86:	ee27 7a26 	vmul.f32	s14, s14, s13
 801ce8a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801ce8e:	edc0 7a00 	vstr	s15, [r0]
    *sum_1 += two_column_buffer[1] * ksrc_transposed[20];
 801ce92:	edd1 7a00 	vldr	s15, [r1]
 801ce96:	ed92 7a01 	vldr	s14, [r2, #4]
 801ce9a:	edd3 6a14 	vldr	s13, [r3, #80]	@ 0x50
 801ce9e:	ee27 7a26 	vmul.f32	s14, s14, s13
 801cea2:	ee77 7a87 	vadd.f32	s15, s15, s14
 801cea6:	edc1 7a00 	vstr	s15, [r1]
    *sum_0 += two_column_buffer[1] * ksrc_transposed[21];
 801ceaa:	edd0 7a00 	vldr	s15, [r0]
 801ceae:	ed92 7a01 	vldr	s14, [r2, #4]
 801ceb2:	edd3 6a15 	vldr	s13, [r3, #84]	@ 0x54
 801ceb6:	ee27 7a26 	vmul.f32	s14, s14, s13
 801ceba:	ee77 7a87 	vadd.f32	s15, s15, s14
 801cebe:	edc0 7a00 	vstr	s15, [r0]
    *sum_1 += two_column_buffer[2] * ksrc_transposed[21];
 801cec2:	edd1 7a00 	vldr	s15, [r1]
 801cec6:	ed92 7a02 	vldr	s14, [r2, #8]
 801ceca:	edd3 6a15 	vldr	s13, [r3, #84]	@ 0x54
 801cece:	ee27 7a26 	vmul.f32	s14, s14, s13
 801ced2:	ee77 7a87 	vadd.f32	s15, s15, s14
 801ced6:	edc1 7a00 	vstr	s15, [r1]
    *sum_0 += two_column_buffer[2] * ksrc_transposed[22];
 801ceda:	edd0 7a00 	vldr	s15, [r0]
 801cede:	ed92 7a02 	vldr	s14, [r2, #8]
 801cee2:	edd3 6a16 	vldr	s13, [r3, #88]	@ 0x58
 801cee6:	ee27 7a26 	vmul.f32	s14, s14, s13
 801ceea:	ee77 7a87 	vadd.f32	s15, s15, s14
 801ceee:	edc0 7a00 	vstr	s15, [r0]
    *sum_1 += two_column_buffer[3] * ksrc_transposed[22];
 801cef2:	edd1 7a00 	vldr	s15, [r1]
 801cef6:	ed92 7a03 	vldr	s14, [r2, #12]
 801cefa:	edd3 6a16 	vldr	s13, [r3, #88]	@ 0x58
 801cefe:	ee27 7a26 	vmul.f32	s14, s14, s13
 801cf02:	ee77 7a87 	vadd.f32	s15, s15, s14
 801cf06:	edc1 7a00 	vstr	s15, [r1]
    *sum_0 += two_column_buffer[3] * ksrc_transposed[23];
 801cf0a:	edd0 7a00 	vldr	s15, [r0]
 801cf0e:	ed92 7a03 	vldr	s14, [r2, #12]
 801cf12:	edd3 6a17 	vldr	s13, [r3, #92]	@ 0x5c
 801cf16:	ee27 7a26 	vmul.f32	s14, s14, s13
 801cf1a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801cf1e:	edc0 7a00 	vstr	s15, [r0]
    *sum_1 += two_column_buffer[4] * ksrc_transposed[23];
 801cf22:	edd1 7a00 	vldr	s15, [r1]
 801cf26:	ed92 7a04 	vldr	s14, [r2, #16]
 801cf2a:	edd3 6a17 	vldr	s13, [r3, #92]	@ 0x5c
 801cf2e:	ee27 7a26 	vmul.f32	s14, s14, s13
 801cf32:	ee77 7a87 	vadd.f32	s15, s15, s14
 801cf36:	edc1 7a00 	vstr	s15, [r1]
    *sum_0 += two_column_buffer[4] * ksrc_transposed[24];
 801cf3a:	edd0 7a00 	vldr	s15, [r0]
 801cf3e:	ed92 7a04 	vldr	s14, [r2, #16]
 801cf42:	edd3 6a18 	vldr	s13, [r3, #96]	@ 0x60
 801cf46:	ee27 7a26 	vmul.f32	s14, s14, s13
 801cf4a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801cf4e:	edc0 7a00 	vstr	s15, [r0]
    *sum_1 += two_column_buffer[5] * ksrc_transposed[24];
 801cf52:	edd1 7a00 	vldr	s15, [r1]
 801cf56:	ed92 7a05 	vldr	s14, [r2, #20]
 801cf5a:	edd3 6a18 	vldr	s13, [r3, #96]	@ 0x60
 801cf5e:	ee27 7a26 	vmul.f32	s14, s14, s13
 801cf62:	ee77 7a87 	vadd.f32	s15, s15, s14
 801cf66:	edc1 7a00 	vstr	s15, [r1]
}
 801cf6a:	f85d fb04 	ldr.w	pc, [sp], #4

0801cf6e <transpose_depthwise_mac_kernel5_1row_fp_uniweight>:
    *sum_0 += two_column_buffer[0] * ksrc_transposed[0];
 801cf6e:	edd0 7a00 	vldr	s15, [r0]
 801cf72:	ed91 7a00 	vldr	s14, [r1]
 801cf76:	edd2 6a00 	vldr	s13, [r2]
 801cf7a:	ee27 7a26 	vmul.f32	s14, s14, s13
 801cf7e:	ee77 7a87 	vadd.f32	s15, s15, s14
 801cf82:	edc0 7a00 	vstr	s15, [r0]
    *sum_0 += two_column_buffer[1] * ksrc_transposed[1];
 801cf86:	ed91 7a01 	vldr	s14, [r1, #4]
 801cf8a:	edd2 6a01 	vldr	s13, [r2, #4]
 801cf8e:	ee27 7a26 	vmul.f32	s14, s14, s13
 801cf92:	ee77 7a87 	vadd.f32	s15, s15, s14
 801cf96:	edc0 7a00 	vstr	s15, [r0]
    *sum_0 += two_column_buffer[2] * ksrc_transposed[2];
 801cf9a:	ed91 7a02 	vldr	s14, [r1, #8]
 801cf9e:	edd2 6a02 	vldr	s13, [r2, #8]
 801cfa2:	ee27 7a26 	vmul.f32	s14, s14, s13
 801cfa6:	ee77 7a87 	vadd.f32	s15, s15, s14
 801cfaa:	edc0 7a00 	vstr	s15, [r0]
    *sum_0 += two_column_buffer[3] * ksrc_transposed[3];
 801cfae:	ed91 7a03 	vldr	s14, [r1, #12]
 801cfb2:	edd2 6a03 	vldr	s13, [r2, #12]
 801cfb6:	ee27 7a26 	vmul.f32	s14, s14, s13
 801cfba:	ee77 7a87 	vadd.f32	s15, s15, s14
 801cfbe:	edc0 7a00 	vstr	s15, [r0]
    *sum_0 += two_column_buffer[4] * ksrc_transposed[4];
 801cfc2:	ed91 7a04 	vldr	s14, [r1, #16]
 801cfc6:	edd2 6a04 	vldr	s13, [r2, #16]
 801cfca:	ee27 7a26 	vmul.f32	s14, s14, s13
 801cfce:	ee77 7a87 	vadd.f32	s15, s15, s14
 801cfd2:	edc0 7a00 	vstr	s15, [r0]
    two_column_buffer += (input_width - 1) * STRIDE + 1 + IN_PAD * 2 + OUT_PAD;
 801cfd6:	f103 3cff 	add.w	ip, r3, #4294967295	@ 0xffffffff
 801cfda:	f8bd 3000 	ldrh.w	r3, [sp]
 801cfde:	fb0c f303 	mul.w	r3, ip, r3
 801cfe2:	3301      	adds	r3, #1
 801cfe4:	f8bd c004 	ldrh.w	ip, [sp, #4]
 801cfe8:	eb03 034c 	add.w	r3, r3, ip, lsl #1
 801cfec:	f8bd c008 	ldrh.w	ip, [sp, #8]
 801cff0:	4463      	add	r3, ip
 801cff2:	eb01 0183 	add.w	r1, r1, r3, lsl #2
    *sum_0 += two_column_buffer[0] * ksrc_transposed[5];
 801cff6:	ed91 7a00 	vldr	s14, [r1]
 801cffa:	edd2 6a05 	vldr	s13, [r2, #20]
 801cffe:	ee27 7a26 	vmul.f32	s14, s14, s13
 801d002:	ee77 7a87 	vadd.f32	s15, s15, s14
 801d006:	edc0 7a00 	vstr	s15, [r0]
    *sum_0 += two_column_buffer[1] * ksrc_transposed[6];
 801d00a:	ed91 7a01 	vldr	s14, [r1, #4]
 801d00e:	edd2 6a06 	vldr	s13, [r2, #24]
 801d012:	ee27 7a26 	vmul.f32	s14, s14, s13
 801d016:	ee77 7a87 	vadd.f32	s15, s15, s14
 801d01a:	edc0 7a00 	vstr	s15, [r0]
    *sum_0 += two_column_buffer[2] * ksrc_transposed[7];
 801d01e:	ed91 7a02 	vldr	s14, [r1, #8]
 801d022:	edd2 6a07 	vldr	s13, [r2, #28]
 801d026:	ee27 7a26 	vmul.f32	s14, s14, s13
 801d02a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801d02e:	edc0 7a00 	vstr	s15, [r0]
    *sum_0 += two_column_buffer[3] * ksrc_transposed[8];
 801d032:	ed91 7a03 	vldr	s14, [r1, #12]
 801d036:	edd2 6a08 	vldr	s13, [r2, #32]
 801d03a:	ee27 7a26 	vmul.f32	s14, s14, s13
 801d03e:	ee77 7a87 	vadd.f32	s15, s15, s14
 801d042:	edc0 7a00 	vstr	s15, [r0]
    *sum_0 += two_column_buffer[4] * ksrc_transposed[9];
 801d046:	ed91 7a04 	vldr	s14, [r1, #16]
 801d04a:	edd2 6a09 	vldr	s13, [r2, #36]	@ 0x24
 801d04e:	ee27 7a26 	vmul.f32	s14, s14, s13
 801d052:	ee77 7a87 	vadd.f32	s15, s15, s14
 801d056:	edc0 7a00 	vstr	s15, [r0]
    two_column_buffer += (input_width - 1) * STRIDE + 1 + IN_PAD * 2 + OUT_PAD;
 801d05a:	eb01 0183 	add.w	r1, r1, r3, lsl #2
    *sum_0 += two_column_buffer[0] * ksrc_transposed[10];
 801d05e:	ed91 7a00 	vldr	s14, [r1]
 801d062:	edd2 6a0a 	vldr	s13, [r2, #40]	@ 0x28
 801d066:	ee27 7a26 	vmul.f32	s14, s14, s13
 801d06a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801d06e:	edc0 7a00 	vstr	s15, [r0]
    *sum_0 += two_column_buffer[1] * ksrc_transposed[11];
 801d072:	ed91 7a01 	vldr	s14, [r1, #4]
 801d076:	edd2 6a0b 	vldr	s13, [r2, #44]	@ 0x2c
 801d07a:	ee27 7a26 	vmul.f32	s14, s14, s13
 801d07e:	ee77 7a87 	vadd.f32	s15, s15, s14
 801d082:	edc0 7a00 	vstr	s15, [r0]
    *sum_0 += two_column_buffer[2] * ksrc_transposed[12];
 801d086:	ed91 7a02 	vldr	s14, [r1, #8]
 801d08a:	edd2 6a0c 	vldr	s13, [r2, #48]	@ 0x30
 801d08e:	ee27 7a26 	vmul.f32	s14, s14, s13
 801d092:	ee77 7a87 	vadd.f32	s15, s15, s14
 801d096:	edc0 7a00 	vstr	s15, [r0]
    *sum_0 += two_column_buffer[3] * ksrc_transposed[13];
 801d09a:	ed91 7a03 	vldr	s14, [r1, #12]
 801d09e:	edd2 6a0d 	vldr	s13, [r2, #52]	@ 0x34
 801d0a2:	ee27 7a26 	vmul.f32	s14, s14, s13
 801d0a6:	ee77 7a87 	vadd.f32	s15, s15, s14
 801d0aa:	edc0 7a00 	vstr	s15, [r0]
    *sum_0 += two_column_buffer[4] * ksrc_transposed[14];
 801d0ae:	ed91 7a04 	vldr	s14, [r1, #16]
 801d0b2:	edd2 6a0e 	vldr	s13, [r2, #56]	@ 0x38
 801d0b6:	ee27 7a26 	vmul.f32	s14, s14, s13
 801d0ba:	ee77 7a87 	vadd.f32	s15, s15, s14
 801d0be:	edc0 7a00 	vstr	s15, [r0]
    two_column_buffer += (input_width - 1) * STRIDE + 1 + IN_PAD * 2 + OUT_PAD;
 801d0c2:	eb01 0183 	add.w	r1, r1, r3, lsl #2
    *sum_0 += two_column_buffer[0] * ksrc_transposed[15];
 801d0c6:	ed91 7a00 	vldr	s14, [r1]
 801d0ca:	edd2 6a0f 	vldr	s13, [r2, #60]	@ 0x3c
 801d0ce:	ee27 7a26 	vmul.f32	s14, s14, s13
 801d0d2:	ee77 7a87 	vadd.f32	s15, s15, s14
 801d0d6:	edc0 7a00 	vstr	s15, [r0]
    *sum_0 += two_column_buffer[1] * ksrc_transposed[16];
 801d0da:	ed91 7a01 	vldr	s14, [r1, #4]
 801d0de:	edd2 6a10 	vldr	s13, [r2, #64]	@ 0x40
 801d0e2:	ee27 7a26 	vmul.f32	s14, s14, s13
 801d0e6:	ee77 7a87 	vadd.f32	s15, s15, s14
 801d0ea:	edc0 7a00 	vstr	s15, [r0]
    *sum_0 += two_column_buffer[2] * ksrc_transposed[17];
 801d0ee:	ed91 7a02 	vldr	s14, [r1, #8]
 801d0f2:	edd2 6a11 	vldr	s13, [r2, #68]	@ 0x44
 801d0f6:	ee27 7a26 	vmul.f32	s14, s14, s13
 801d0fa:	ee77 7a87 	vadd.f32	s15, s15, s14
 801d0fe:	edc0 7a00 	vstr	s15, [r0]
    *sum_0 += two_column_buffer[3] * ksrc_transposed[18];
 801d102:	ed91 7a03 	vldr	s14, [r1, #12]
 801d106:	edd2 6a12 	vldr	s13, [r2, #72]	@ 0x48
 801d10a:	ee27 7a26 	vmul.f32	s14, s14, s13
 801d10e:	ee77 7a87 	vadd.f32	s15, s15, s14
 801d112:	edc0 7a00 	vstr	s15, [r0]
    *sum_0 += two_column_buffer[4] * ksrc_transposed[19];
 801d116:	ed91 7a04 	vldr	s14, [r1, #16]
 801d11a:	edd2 6a13 	vldr	s13, [r2, #76]	@ 0x4c
 801d11e:	ee27 7a26 	vmul.f32	s14, s14, s13
 801d122:	ee77 7a87 	vadd.f32	s15, s15, s14
 801d126:	edc0 7a00 	vstr	s15, [r0]
    two_column_buffer += (input_width - 1) * STRIDE + 1 + IN_PAD * 2 + OUT_PAD;
 801d12a:	eb01 0183 	add.w	r1, r1, r3, lsl #2
    *sum_0 += two_column_buffer[0] * ksrc_transposed[20];
 801d12e:	ed91 7a00 	vldr	s14, [r1]
 801d132:	edd2 6a14 	vldr	s13, [r2, #80]	@ 0x50
 801d136:	ee27 7a26 	vmul.f32	s14, s14, s13
 801d13a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801d13e:	edc0 7a00 	vstr	s15, [r0]
    *sum_0 += two_column_buffer[1] * ksrc_transposed[21];
 801d142:	ed91 7a01 	vldr	s14, [r1, #4]
 801d146:	edd2 6a15 	vldr	s13, [r2, #84]	@ 0x54
 801d14a:	ee27 7a26 	vmul.f32	s14, s14, s13
 801d14e:	ee77 7a87 	vadd.f32	s15, s15, s14
 801d152:	edc0 7a00 	vstr	s15, [r0]
    *sum_0 += two_column_buffer[2] * ksrc_transposed[22];
 801d156:	ed91 7a02 	vldr	s14, [r1, #8]
 801d15a:	edd2 6a16 	vldr	s13, [r2, #88]	@ 0x58
 801d15e:	ee27 7a26 	vmul.f32	s14, s14, s13
 801d162:	ee77 7a87 	vadd.f32	s15, s15, s14
 801d166:	edc0 7a00 	vstr	s15, [r0]
    *sum_0 += two_column_buffer[3] * ksrc_transposed[23];
 801d16a:	ed91 7a03 	vldr	s14, [r1, #12]
 801d16e:	edd2 6a17 	vldr	s13, [r2, #92]	@ 0x5c
 801d172:	ee27 7a26 	vmul.f32	s14, s14, s13
 801d176:	ee77 7a87 	vadd.f32	s15, s15, s14
 801d17a:	edc0 7a00 	vstr	s15, [r0]
    *sum_0 += two_column_buffer[4] * ksrc_transposed[24];
 801d17e:	ed91 7a04 	vldr	s14, [r1, #16]
 801d182:	edd2 6a18 	vldr	s13, [r2, #96]	@ 0x60
 801d186:	ee27 7a26 	vmul.f32	s14, s14, s13
 801d18a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801d18e:	edc0 7a00 	vstr	s15, [r0]
}
 801d192:	4770      	bx	lr

0801d194 <transpose_depthwise_conv_fp_kernel5_stride1_inpad2_outpad0_IOHW_int8weight>:
tinyengine_status_fp transpose_depthwise_conv_fp_kernel5_stride1_inpad2_outpad0_IOHW_int8weight(float* input_output_data, 
                 const uint16_t input_height, const uint16_t input_width, const uint16_t input_depth, 
                 const int8_t* filter_data, const float* bias_data, 
                 float* output_data, const uint16_t output_height, const uint16_t output_width, const uint16_t output_depth, 
                 const float output_activation_min, const float output_activation_max,
                 float* im2col_data, const uint16_t batches, const int pad_value) {
 801d194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d198:	ed2d 8b02 	vpush	{d8}
 801d19c:	b0a5      	sub	sp, #148	@ 0x94
 801d19e:	4683      	mov	fp, r0
 801d1a0:	4690      	mov	r8, r2
 801d1a2:	461a      	mov	r2, r3
 801d1a4:	9830      	ldr	r0, [sp, #192]	@ 0xc0
 801d1a6:	f8bd a0cc 	ldrh.w	sl, [sp, #204]	@ 0xcc
 801d1aa:	f8bd 70d0 	ldrh.w	r7, [sp, #208]	@ 0xd0
 801d1ae:	f8bd 60d4 	ldrh.w	r6, [sp, #212]	@ 0xd4
 801d1b2:	eeb0 8a40 	vmov.f32	s16, s0
 801d1b6:	eef0 8a60 	vmov.f32	s17, s1
 801d1ba:	ed9d 7a38 	vldr	s14, [sp, #224]	@ 0xe0
  float* two_column_buffer = im2col_data;
 801d1be:	9b36      	ldr	r3, [sp, #216]	@ 0xd8
  int i, j, c;

  /* Setup the padding regions for the buffer */
  // Top region: 8bit x (input_x + pad_w * 2) x pad_h: unroll by pad_value
  for (i = 0; i < input_width + 4; i++) {
 801d1c0:	f04f 0c00 	mov.w	ip, #0
 801d1c4:	e00a      	b.n	801d1dc <transpose_depthwise_conv_fp_kernel5_stride1_inpad2_outpad0_IOHW_int8weight+0x48>
    *two_column_buffer++ = pad_value;
 801d1c6:	eef8 7ac7 	vcvt.f32.s32	s15, s14
 801d1ca:	461c      	mov	r4, r3
 801d1cc:	3408      	adds	r4, #8
 801d1ce:	edc3 7a00 	vstr	s15, [r3]
    *two_column_buffer++ = pad_value;
 801d1d2:	edc3 7a01 	vstr	s15, [r3, #4]
  for (i = 0; i < input_width + 4; i++) {
 801d1d6:	f10c 0c01 	add.w	ip, ip, #1
    *two_column_buffer++ = pad_value;
 801d1da:	4623      	mov	r3, r4
  for (i = 0; i < input_width + 4; i++) {
 801d1dc:	f108 0503 	add.w	r5, r8, #3
 801d1e0:	4565      	cmp	r5, ip
 801d1e2:	daf0      	bge.n	801d1c6 <transpose_depthwise_conv_fp_kernel5_stride1_inpad2_outpad0_IOHW_int8weight+0x32>
  }
  // Middle regions: left and right regions
  for (i = 0; i < input_height; i++) {
 801d1e4:	f04f 0c00 	mov.w	ip, #0
 801d1e8:	e012      	b.n	801d210 <transpose_depthwise_conv_fp_kernel5_stride1_inpad2_outpad0_IOHW_int8weight+0x7c>
    *two_column_buffer++ = pad_value; // left 1
 801d1ea:	eef8 7ac7 	vcvt.f32.s32	s15, s14
 801d1ee:	edc3 7a00 	vstr	s15, [r3]
    *two_column_buffer++ = pad_value; // left 2
 801d1f2:	edc3 7a01 	vstr	s15, [r3, #4]
    two_column_buffer += input_width; // skip middle
 801d1f6:	ea4f 0488 	mov.w	r4, r8, lsl #2
 801d1fa:	3408      	adds	r4, #8
 801d1fc:	441c      	add	r4, r3
    *two_column_buffer++ = pad_value; // right 1
 801d1fe:	4623      	mov	r3, r4
 801d200:	46a6      	mov	lr, r4
 801d202:	3308      	adds	r3, #8
 801d204:	edc4 7a00 	vstr	s15, [r4]
    *two_column_buffer++ = pad_value; // right 2
 801d208:	edc4 7a01 	vstr	s15, [r4, #4]
  for (i = 0; i < input_height; i++) {
 801d20c:	f10c 0c01 	add.w	ip, ip, #1
 801d210:	4561      	cmp	r1, ip
 801d212:	dcea      	bgt.n	801d1ea <transpose_depthwise_conv_fp_kernel5_stride1_inpad2_outpad0_IOHW_int8weight+0x56>
  }
  // Bottom region: 8bit x (input_x + pad_w * 2) x pad_h: unroll by pad_value
  for (i = 0; i < input_width + 4; i++) {
 801d214:	f04f 0c00 	mov.w	ip, #0
 801d218:	e00b      	b.n	801d232 <transpose_depthwise_conv_fp_kernel5_stride1_inpad2_outpad0_IOHW_int8weight+0x9e>
    *two_column_buffer++ = pad_value;
 801d21a:	eef8 7ac7 	vcvt.f32.s32	s15, s14
 801d21e:	461c      	mov	r4, r3
 801d220:	469e      	mov	lr, r3
 801d222:	3408      	adds	r4, #8
 801d224:	edc3 7a00 	vstr	s15, [r3]
    *two_column_buffer++ = pad_value;
 801d228:	edc3 7a01 	vstr	s15, [r3, #4]
  for (i = 0; i < input_width + 4; i++) {
 801d22c:	f10c 0c01 	add.w	ip, ip, #1
    *two_column_buffer++ = pad_value;
 801d230:	4623      	mov	r3, r4
  for (i = 0; i < input_width + 4; i++) {
 801d232:	4565      	cmp	r5, ip
 801d234:	daf1      	bge.n	801d21a <transpose_depthwise_conv_fp_kernel5_stride1_inpad2_outpad0_IOHW_int8weight+0x86>
  /* Setup the input_output_data regions for HWC->CHW buffers */
  const float* src;
  const int8_t* ksrc;
  float ksrc_transposed[25];

  for (c = 0; c < input_depth; c++) {
 801d236:	2400      	movs	r4, #0
 801d238:	4625      	mov	r5, r4
 801d23a:	4644      	mov	r4, r8
 801d23c:	4684      	mov	ip, r0
 801d23e:	e0b2      	b.n	801d3a6 <transpose_depthwise_conv_fp_kernel5_stride1_inpad2_outpad0_IOHW_int8weight+0x212>
    // Place input data into two_column_buffer
    for (i = 0; i < input_height; i++) {
      two_column_buffer += 2;

      for (j = 0; j < input_width; j++) {
        *two_column_buffer++ = *src;
 801d240:	f8d8 e000 	ldr.w	lr, [r8]
 801d244:	f843 eb04 	str.w	lr, [r3], #4
        src += input_depth;
 801d248:	eb08 0882 	add.w	r8, r8, r2, lsl #2
      for (j = 0; j < input_width; j++) {
 801d24c:	f10c 0c01 	add.w	ip, ip, #1
 801d250:	4564      	cmp	r4, ip
 801d252:	dcf5      	bgt.n	801d240 <transpose_depthwise_conv_fp_kernel5_stride1_inpad2_outpad0_IOHW_int8weight+0xac>
      }

      two_column_buffer += 2;
 801d254:	3308      	adds	r3, #8
    for (i = 0; i < input_height; i++) {
 801d256:	f109 0901 	add.w	r9, r9, #1
 801d25a:	4549      	cmp	r1, r9
 801d25c:	dd03      	ble.n	801d266 <transpose_depthwise_conv_fp_kernel5_stride1_inpad2_outpad0_IOHW_int8weight+0xd2>
      two_column_buffer += 2;
 801d25e:	3308      	adds	r3, #8
      for (j = 0; j < input_width; j++) {
 801d260:	f04f 0c00 	mov.w	ip, #0
 801d264:	e7f4      	b.n	801d250 <transpose_depthwise_conv_fp_kernel5_stride1_inpad2_outpad0_IOHW_int8weight+0xbc>
    }

    // Transpose filter data
    ksrc = filter_data++;
 801d266:	1c43      	adds	r3, r0, #1
 801d268:	9304      	str	r3, [sp, #16]
    for (i = 0; i < DIM_KER_Y * DIM_KER_X; i++) {
 801d26a:	2300      	movs	r3, #0
 801d26c:	e00f      	b.n	801d28e <transpose_depthwise_conv_fp_kernel5_stride1_inpad2_outpad0_IOHW_int8weight+0xfa>
      ksrc_transposed[24 - i] = (float)*ksrc;
 801d26e:	f990 c000 	ldrsb.w	ip, [r0]
 801d272:	ee07 ca90 	vmov	s15, ip
 801d276:	f1c3 0c18 	rsb	ip, r3, #24
 801d27a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d27e:	f10d 0e90 	add.w	lr, sp, #144	@ 0x90
 801d282:	eb0e 0c8c 	add.w	ip, lr, ip, lsl #2
 801d286:	ed4c 7a19 	vstr	s15, [ip, #-100]	@ 0xffffff9c
      ksrc += input_depth;
 801d28a:	4410      	add	r0, r2
    for (i = 0; i < DIM_KER_Y * DIM_KER_X; i++) {
 801d28c:	3301      	adds	r3, #1
 801d28e:	2b18      	cmp	r3, #24
 801d290:	d9ed      	bls.n	801d26e <transpose_depthwise_conv_fp_kernel5_stride1_inpad2_outpad0_IOHW_int8weight+0xda>
    }

    float* inplace_output = input_output_data;
    float* two_column_buffer_start = im2col_data;
 801d292:	f8dd 90d8 	ldr.w	r9, [sp, #216]	@ 0xd8

    /* MAC Computation */
    for (i = 0; i < output_height; i++) {
 801d296:	f04f 0800 	mov.w	r8, #0
 801d29a:	9505      	str	r5, [sp, #20]
 801d29c:	9106      	str	r1, [sp, #24]
 801d29e:	9207      	str	r2, [sp, #28]
 801d2a0:	e04b      	b.n	801d33a <transpose_depthwise_conv_fp_kernel5_stride1_inpad2_outpad0_IOHW_int8weight+0x1a6>
        // We assume bias_data as zeros.
        float sum_0 = 0.0f;
        float sum_1 = 0.0f;
        transpose_depthwise_mac_kernel5_2row_fp_uniweight(&sum_0, &sum_1, two_column_buffer, ksrc_transposed, input_width, STRIDE, IN_PAD, OUT_PAD);
        inplace_output[(i * output_width + j) * output_depth] = TN_MIN(TN_MAX(sum_0, output_activation_min), output_activation_max);
        inplace_output[(i * output_width + j + 1) * output_depth] = TN_MIN(TN_MAX(sum_1, output_activation_min), output_activation_max);
 801d2a2:	fb03 6306 	mla	r3, r3, r6, r6
 801d2a6:	eb0b 0383 	add.w	r3, fp, r3, lsl #2
 801d2aa:	edc3 7a00 	vstr	s15, [r3]

        two_column_buffer_start += 2;
 801d2ae:	f109 0908 	add.w	r9, r9, #8
      for (j = 0; j < output_width - 1; j+=2) {
 801d2b2:	3502      	adds	r5, #2
 801d2b4:	1e7b      	subs	r3, r7, #1
 801d2b6:	42ab      	cmp	r3, r5
 801d2b8:	dd38      	ble.n	801d32c <transpose_depthwise_conv_fp_kernel5_stride1_inpad2_outpad0_IOHW_int8weight+0x198>
        float sum_0 = 0.0f;
 801d2ba:	2300      	movs	r3, #0
 801d2bc:	9309      	str	r3, [sp, #36]	@ 0x24
        float sum_1 = 0.0f;
 801d2be:	930a      	str	r3, [sp, #40]	@ 0x28
        transpose_depthwise_mac_kernel5_2row_fp_uniweight(&sum_0, &sum_1, two_column_buffer, ksrc_transposed, input_width, STRIDE, IN_PAD, OUT_PAD);
 801d2c0:	2300      	movs	r3, #0
 801d2c2:	9303      	str	r3, [sp, #12]
 801d2c4:	2302      	movs	r3, #2
 801d2c6:	9302      	str	r3, [sp, #8]
 801d2c8:	2301      	movs	r3, #1
 801d2ca:	9301      	str	r3, [sp, #4]
 801d2cc:	9400      	str	r4, [sp, #0]
 801d2ce:	ab0b      	add	r3, sp, #44	@ 0x2c
 801d2d0:	464a      	mov	r2, r9
 801d2d2:	a90a      	add	r1, sp, #40	@ 0x28
 801d2d4:	a809      	add	r0, sp, #36	@ 0x24
 801d2d6:	f7ff fbd6 	bl	801ca86 <transpose_depthwise_mac_kernel5_2row_fp_uniweight>
        inplace_output[(i * output_width + j) * output_depth] = TN_MIN(TN_MAX(sum_0, output_activation_min), output_activation_max);
 801d2da:	eddd 7a09 	vldr	s15, [sp, #36]	@ 0x24
 801d2de:	eef4 7ac8 	vcmpe.f32	s15, s16
 801d2e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d2e6:	dc01      	bgt.n	801d2ec <transpose_depthwise_conv_fp_kernel5_stride1_inpad2_outpad0_IOHW_int8weight+0x158>
 801d2e8:	eef0 7a48 	vmov.f32	s15, s16
 801d2ec:	eef4 7ae8 	vcmpe.f32	s15, s17
 801d2f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d2f4:	d401      	bmi.n	801d2fa <transpose_depthwise_conv_fp_kernel5_stride1_inpad2_outpad0_IOHW_int8weight+0x166>
 801d2f6:	eef0 7a68 	vmov.f32	s15, s17
 801d2fa:	fb08 5307 	mla	r3, r8, r7, r5
 801d2fe:	fb06 f203 	mul.w	r2, r6, r3
 801d302:	eb0b 0282 	add.w	r2, fp, r2, lsl #2
 801d306:	edc2 7a00 	vstr	s15, [r2]
        inplace_output[(i * output_width + j + 1) * output_depth] = TN_MIN(TN_MAX(sum_1, output_activation_min), output_activation_max);
 801d30a:	eddd 7a0a 	vldr	s15, [sp, #40]	@ 0x28
 801d30e:	eef4 7ac8 	vcmpe.f32	s15, s16
 801d312:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d316:	dc01      	bgt.n	801d31c <transpose_depthwise_conv_fp_kernel5_stride1_inpad2_outpad0_IOHW_int8weight+0x188>
 801d318:	eef0 7a48 	vmov.f32	s15, s16
 801d31c:	eef4 7ae8 	vcmpe.f32	s15, s17
 801d320:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d324:	d4bd      	bmi.n	801d2a2 <transpose_depthwise_conv_fp_kernel5_stride1_inpad2_outpad0_IOHW_int8weight+0x10e>
 801d326:	eef0 7a68 	vmov.f32	s15, s17
 801d32a:	e7ba      	b.n	801d2a2 <transpose_depthwise_conv_fp_kernel5_stride1_inpad2_outpad0_IOHW_int8weight+0x10e>
      }

      /* left-over because odd number of output pixels */
      if (output_width & 0x1) {
 801d32c:	f017 0f01 	tst.w	r7, #1
 801d330:	d107      	bne.n	801d342 <transpose_depthwise_conv_fp_kernel5_stride1_inpad2_outpad0_IOHW_int8weight+0x1ae>

        two_column_buffer_start++;
      }
      /* End of MAC Computation */

      two_column_buffer_start += 4;
 801d332:	f109 0910 	add.w	r9, r9, #16
    for (i = 0; i < output_height; i++) {
 801d336:	f108 0801 	add.w	r8, r8, #1
 801d33a:	45c2      	cmp	sl, r8
 801d33c:	dd2b      	ble.n	801d396 <transpose_depthwise_conv_fp_kernel5_stride1_inpad2_outpad0_IOHW_int8weight+0x202>
      for (j = 0; j < output_width - 1; j+=2) {
 801d33e:	2500      	movs	r5, #0
 801d340:	e7b8      	b.n	801d2b4 <transpose_depthwise_conv_fp_kernel5_stride1_inpad2_outpad0_IOHW_int8weight+0x120>
        float sum_0 = 0.0f;
 801d342:	2300      	movs	r3, #0
 801d344:	930a      	str	r3, [sp, #40]	@ 0x28
        transpose_depthwise_mac_kernel5_1row_fp_uniweight(&sum_0, two_column_buffer, ksrc_transposed, input_width, STRIDE, IN_PAD, OUT_PAD);
 801d346:	2300      	movs	r3, #0
 801d348:	9302      	str	r3, [sp, #8]
 801d34a:	2302      	movs	r3, #2
 801d34c:	9301      	str	r3, [sp, #4]
 801d34e:	2301      	movs	r3, #1
 801d350:	9300      	str	r3, [sp, #0]
 801d352:	4623      	mov	r3, r4
 801d354:	aa0b      	add	r2, sp, #44	@ 0x2c
 801d356:	4649      	mov	r1, r9
 801d358:	a80a      	add	r0, sp, #40	@ 0x28
 801d35a:	f7ff fe08 	bl	801cf6e <transpose_depthwise_mac_kernel5_1row_fp_uniweight>
        inplace_output[(i * output_width + output_width - 1) * output_depth] = TN_MIN(TN_MAX(sum_0, output_activation_min), output_activation_max);
 801d35e:	eddd 7a0a 	vldr	s15, [sp, #40]	@ 0x28
 801d362:	eef4 7ac8 	vcmpe.f32	s15, s16
 801d366:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d36a:	dc01      	bgt.n	801d370 <transpose_depthwise_conv_fp_kernel5_stride1_inpad2_outpad0_IOHW_int8weight+0x1dc>
 801d36c:	eef0 7a48 	vmov.f32	s15, s16
 801d370:	eef4 7ae8 	vcmpe.f32	s15, s17
 801d374:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d378:	d401      	bmi.n	801d37e <transpose_depthwise_conv_fp_kernel5_stride1_inpad2_outpad0_IOHW_int8weight+0x1ea>
 801d37a:	eef0 7a68 	vmov.f32	s15, s17
 801d37e:	fb08 7307 	mla	r3, r8, r7, r7
 801d382:	3b01      	subs	r3, #1
 801d384:	fb06 f303 	mul.w	r3, r6, r3
 801d388:	eb0b 0383 	add.w	r3, fp, r3, lsl #2
 801d38c:	edc3 7a00 	vstr	s15, [r3]
        two_column_buffer_start++;
 801d390:	f109 0904 	add.w	r9, r9, #4
 801d394:	e7cd      	b.n	801d332 <transpose_depthwise_conv_fp_kernel5_stride1_inpad2_outpad0_IOHW_int8weight+0x19e>
    }

    bias_data++;
    input_output_data++;
 801d396:	9d05      	ldr	r5, [sp, #20]
 801d398:	9906      	ldr	r1, [sp, #24]
 801d39a:	9a07      	ldr	r2, [sp, #28]
 801d39c:	f10b 0b04 	add.w	fp, fp, #4
  for (c = 0; c < input_depth; c++) {
 801d3a0:	3501      	adds	r5, #1
    ksrc = filter_data++;
 801d3a2:	f8dd c010 	ldr.w	ip, [sp, #16]
  for (c = 0; c < input_depth; c++) {
 801d3a6:	42aa      	cmp	r2, r5
 801d3a8:	dd08      	ble.n	801d3bc <transpose_depthwise_conv_fp_kernel5_stride1_inpad2_outpad0_IOHW_int8weight+0x228>
    two_column_buffer = im2col_data + (input_width + 4) * 2;
 801d3aa:	1d23      	adds	r3, r4, #4
 801d3ac:	9836      	ldr	r0, [sp, #216]	@ 0xd8
 801d3ae:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
    src = input_output_data;
 801d3b2:	46d8      	mov	r8, fp
    for (i = 0; i < input_height; i++) {
 801d3b4:	f04f 0900 	mov.w	r9, #0
 801d3b8:	4660      	mov	r0, ip
 801d3ba:	e74e      	b.n	801d25a <transpose_depthwise_conv_fp_kernel5_stride1_inpad2_outpad0_IOHW_int8weight+0xc6>
  }
  
  /* Return to application */
  return STATE_SUCCESS_fp;
} 
 801d3bc:	2000      	movs	r0, #0
 801d3be:	b025      	add	sp, #148	@ 0x94
 801d3c0:	ecbd 8b02 	vpop	{d8}
 801d3c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d3c8 <transpose_depthwise_mac_kernel7_2row_fp_uniweight>:
                      const uint16_t STRIDE, const uint16_t IN_PAD, const uint16_t OUT_PAD) {
 801d3c8:	b500      	push	{lr}
    *sum_0 += two_column_buffer[0] * ksrc_transposed[0];
 801d3ca:	edd0 7a00 	vldr	s15, [r0]
 801d3ce:	ed92 7a00 	vldr	s14, [r2]
 801d3d2:	edd3 6a00 	vldr	s13, [r3]
 801d3d6:	ee27 7a26 	vmul.f32	s14, s14, s13
 801d3da:	ee77 7a87 	vadd.f32	s15, s15, s14
 801d3de:	edc0 7a00 	vstr	s15, [r0]
    *sum_1 += two_column_buffer[1] * ksrc_transposed[0];
 801d3e2:	edd1 7a00 	vldr	s15, [r1]
 801d3e6:	ed92 7a01 	vldr	s14, [r2, #4]
 801d3ea:	edd3 6a00 	vldr	s13, [r3]
 801d3ee:	ee27 7a26 	vmul.f32	s14, s14, s13
 801d3f2:	ee77 7a87 	vadd.f32	s15, s15, s14
 801d3f6:	edc1 7a00 	vstr	s15, [r1]
    *sum_0 += two_column_buffer[1] * ksrc_transposed[1];
 801d3fa:	edd0 7a00 	vldr	s15, [r0]
 801d3fe:	ed92 7a01 	vldr	s14, [r2, #4]
 801d402:	edd3 6a01 	vldr	s13, [r3, #4]
 801d406:	ee27 7a26 	vmul.f32	s14, s14, s13
 801d40a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801d40e:	edc0 7a00 	vstr	s15, [r0]
    *sum_1 += two_column_buffer[2] * ksrc_transposed[1];
 801d412:	edd1 7a00 	vldr	s15, [r1]
 801d416:	ed92 7a02 	vldr	s14, [r2, #8]
 801d41a:	edd3 6a01 	vldr	s13, [r3, #4]
 801d41e:	ee27 7a26 	vmul.f32	s14, s14, s13
 801d422:	ee77 7a87 	vadd.f32	s15, s15, s14
 801d426:	edc1 7a00 	vstr	s15, [r1]
    *sum_0 += two_column_buffer[2] * ksrc_transposed[2];
 801d42a:	edd0 7a00 	vldr	s15, [r0]
 801d42e:	ed92 7a02 	vldr	s14, [r2, #8]
 801d432:	edd3 6a02 	vldr	s13, [r3, #8]
 801d436:	ee27 7a26 	vmul.f32	s14, s14, s13
 801d43a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801d43e:	edc0 7a00 	vstr	s15, [r0]
    *sum_1 += two_column_buffer[3] * ksrc_transposed[2];
 801d442:	edd1 7a00 	vldr	s15, [r1]
 801d446:	ed92 7a03 	vldr	s14, [r2, #12]
 801d44a:	edd3 6a02 	vldr	s13, [r3, #8]
 801d44e:	ee27 7a26 	vmul.f32	s14, s14, s13
 801d452:	ee77 7a87 	vadd.f32	s15, s15, s14
 801d456:	edc1 7a00 	vstr	s15, [r1]
    *sum_0 += two_column_buffer[3] * ksrc_transposed[3];
 801d45a:	edd0 7a00 	vldr	s15, [r0]
 801d45e:	ed92 7a03 	vldr	s14, [r2, #12]
 801d462:	edd3 6a03 	vldr	s13, [r3, #12]
 801d466:	ee27 7a26 	vmul.f32	s14, s14, s13
 801d46a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801d46e:	edc0 7a00 	vstr	s15, [r0]
    *sum_1 += two_column_buffer[4] * ksrc_transposed[3];
 801d472:	edd1 7a00 	vldr	s15, [r1]
 801d476:	ed92 7a04 	vldr	s14, [r2, #16]
 801d47a:	edd3 6a03 	vldr	s13, [r3, #12]
 801d47e:	ee27 7a26 	vmul.f32	s14, s14, s13
 801d482:	ee77 7a87 	vadd.f32	s15, s15, s14
 801d486:	edc1 7a00 	vstr	s15, [r1]
    *sum_0 += two_column_buffer[4] * ksrc_transposed[4];
 801d48a:	edd0 7a00 	vldr	s15, [r0]
 801d48e:	ed92 7a04 	vldr	s14, [r2, #16]
 801d492:	edd3 6a04 	vldr	s13, [r3, #16]
 801d496:	ee27 7a26 	vmul.f32	s14, s14, s13
 801d49a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801d49e:	edc0 7a00 	vstr	s15, [r0]
    *sum_1 += two_column_buffer[5] * ksrc_transposed[4];
 801d4a2:	edd1 7a00 	vldr	s15, [r1]
 801d4a6:	ed92 7a05 	vldr	s14, [r2, #20]
 801d4aa:	edd3 6a04 	vldr	s13, [r3, #16]
 801d4ae:	ee27 7a26 	vmul.f32	s14, s14, s13
 801d4b2:	ee77 7a87 	vadd.f32	s15, s15, s14
 801d4b6:	edc1 7a00 	vstr	s15, [r1]
    *sum_0 += two_column_buffer[5] * ksrc_transposed[5];
 801d4ba:	edd0 7a00 	vldr	s15, [r0]
 801d4be:	ed92 7a05 	vldr	s14, [r2, #20]
 801d4c2:	edd3 6a05 	vldr	s13, [r3, #20]
 801d4c6:	ee27 7a26 	vmul.f32	s14, s14, s13
 801d4ca:	ee77 7a87 	vadd.f32	s15, s15, s14
 801d4ce:	edc0 7a00 	vstr	s15, [r0]
    *sum_1 += two_column_buffer[6] * ksrc_transposed[5];
 801d4d2:	edd1 7a00 	vldr	s15, [r1]
 801d4d6:	ed92 7a06 	vldr	s14, [r2, #24]
 801d4da:	edd3 6a05 	vldr	s13, [r3, #20]
 801d4de:	ee27 7a26 	vmul.f32	s14, s14, s13
 801d4e2:	ee77 7a87 	vadd.f32	s15, s15, s14
 801d4e6:	edc1 7a00 	vstr	s15, [r1]
    *sum_0 += two_column_buffer[6] * ksrc_transposed[6];
 801d4ea:	edd0 7a00 	vldr	s15, [r0]
 801d4ee:	ed92 7a06 	vldr	s14, [r2, #24]
 801d4f2:	edd3 6a06 	vldr	s13, [r3, #24]
 801d4f6:	ee27 7a26 	vmul.f32	s14, s14, s13
 801d4fa:	ee77 7a87 	vadd.f32	s15, s15, s14
 801d4fe:	edc0 7a00 	vstr	s15, [r0]
    *sum_1 += two_column_buffer[7] * ksrc_transposed[6];
 801d502:	edd1 7a00 	vldr	s15, [r1]
 801d506:	ed92 7a07 	vldr	s14, [r2, #28]
 801d50a:	edd3 6a06 	vldr	s13, [r3, #24]
 801d50e:	ee27 7a26 	vmul.f32	s14, s14, s13
 801d512:	ee77 7a87 	vadd.f32	s15, s15, s14
 801d516:	edc1 7a00 	vstr	s15, [r1]
    two_column_buffer += (input_width - 1) * STRIDE + 1 + IN_PAD * 2 + OUT_PAD;
 801d51a:	f8bd c004 	ldrh.w	ip, [sp, #4]
 801d51e:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 801d522:	f8bd e008 	ldrh.w	lr, [sp, #8]
 801d526:	fb0c fe0e 	mul.w	lr, ip, lr
 801d52a:	f10e 0e01 	add.w	lr, lr, #1
 801d52e:	f8bd c00c 	ldrh.w	ip, [sp, #12]
 801d532:	eb0e 0e4c 	add.w	lr, lr, ip, lsl #1
 801d536:	f8bd c010 	ldrh.w	ip, [sp, #16]
 801d53a:	44f4      	add	ip, lr
 801d53c:	eb02 028c 	add.w	r2, r2, ip, lsl #2
    *sum_0 += two_column_buffer[0] * ksrc_transposed[7];
 801d540:	edd0 7a00 	vldr	s15, [r0]
 801d544:	ed92 7a00 	vldr	s14, [r2]
 801d548:	edd3 6a07 	vldr	s13, [r3, #28]
 801d54c:	ee27 7a26 	vmul.f32	s14, s14, s13
 801d550:	ee77 7a87 	vadd.f32	s15, s15, s14
 801d554:	edc0 7a00 	vstr	s15, [r0]
    *sum_1 += two_column_buffer[1] * ksrc_transposed[7];
 801d558:	edd1 7a00 	vldr	s15, [r1]
 801d55c:	ed92 7a01 	vldr	s14, [r2, #4]
 801d560:	edd3 6a07 	vldr	s13, [r3, #28]
 801d564:	ee27 7a26 	vmul.f32	s14, s14, s13
 801d568:	ee77 7a87 	vadd.f32	s15, s15, s14
 801d56c:	edc1 7a00 	vstr	s15, [r1]
    *sum_0 += two_column_buffer[1] * ksrc_transposed[8];
 801d570:	edd0 7a00 	vldr	s15, [r0]
 801d574:	ed92 7a01 	vldr	s14, [r2, #4]
 801d578:	edd3 6a08 	vldr	s13, [r3, #32]
 801d57c:	ee27 7a26 	vmul.f32	s14, s14, s13
 801d580:	ee77 7a87 	vadd.f32	s15, s15, s14
 801d584:	edc0 7a00 	vstr	s15, [r0]
    *sum_1 += two_column_buffer[2] * ksrc_transposed[8];
 801d588:	edd1 7a00 	vldr	s15, [r1]
 801d58c:	ed92 7a02 	vldr	s14, [r2, #8]
 801d590:	edd3 6a08 	vldr	s13, [r3, #32]
 801d594:	ee27 7a26 	vmul.f32	s14, s14, s13
 801d598:	ee77 7a87 	vadd.f32	s15, s15, s14
 801d59c:	edc1 7a00 	vstr	s15, [r1]
    *sum_0 += two_column_buffer[2] * ksrc_transposed[9];
 801d5a0:	edd0 7a00 	vldr	s15, [r0]
 801d5a4:	ed92 7a02 	vldr	s14, [r2, #8]
 801d5a8:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 801d5ac:	ee27 7a26 	vmul.f32	s14, s14, s13
 801d5b0:	ee77 7a87 	vadd.f32	s15, s15, s14
 801d5b4:	edc0 7a00 	vstr	s15, [r0]
    *sum_1 += two_column_buffer[3] * ksrc_transposed[9];
 801d5b8:	edd1 7a00 	vldr	s15, [r1]
 801d5bc:	ed92 7a03 	vldr	s14, [r2, #12]
 801d5c0:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 801d5c4:	ee27 7a26 	vmul.f32	s14, s14, s13
 801d5c8:	ee77 7a87 	vadd.f32	s15, s15, s14
 801d5cc:	edc1 7a00 	vstr	s15, [r1]
    *sum_0 += two_column_buffer[3] * ksrc_transposed[10];
 801d5d0:	edd0 7a00 	vldr	s15, [r0]
 801d5d4:	ed92 7a03 	vldr	s14, [r2, #12]
 801d5d8:	edd3 6a0a 	vldr	s13, [r3, #40]	@ 0x28
 801d5dc:	ee27 7a26 	vmul.f32	s14, s14, s13
 801d5e0:	ee77 7a87 	vadd.f32	s15, s15, s14
 801d5e4:	edc0 7a00 	vstr	s15, [r0]
    *sum_1 += two_column_buffer[4] * ksrc_transposed[10];
 801d5e8:	edd1 7a00 	vldr	s15, [r1]
 801d5ec:	ed92 7a04 	vldr	s14, [r2, #16]
 801d5f0:	edd3 6a0a 	vldr	s13, [r3, #40]	@ 0x28
 801d5f4:	ee27 7a26 	vmul.f32	s14, s14, s13
 801d5f8:	ee77 7a87 	vadd.f32	s15, s15, s14
 801d5fc:	edc1 7a00 	vstr	s15, [r1]
    *sum_0 += two_column_buffer[4] * ksrc_transposed[11];
 801d600:	edd0 7a00 	vldr	s15, [r0]
 801d604:	ed92 7a04 	vldr	s14, [r2, #16]
 801d608:	edd3 6a0b 	vldr	s13, [r3, #44]	@ 0x2c
 801d60c:	ee27 7a26 	vmul.f32	s14, s14, s13
 801d610:	ee77 7a87 	vadd.f32	s15, s15, s14
 801d614:	edc0 7a00 	vstr	s15, [r0]
    *sum_1 += two_column_buffer[5] * ksrc_transposed[11];
 801d618:	edd1 7a00 	vldr	s15, [r1]
 801d61c:	ed92 7a05 	vldr	s14, [r2, #20]
 801d620:	edd3 6a0b 	vldr	s13, [r3, #44]	@ 0x2c
 801d624:	ee27 7a26 	vmul.f32	s14, s14, s13
 801d628:	ee77 7a87 	vadd.f32	s15, s15, s14
 801d62c:	edc1 7a00 	vstr	s15, [r1]
    *sum_0 += two_column_buffer[5] * ksrc_transposed[12];
 801d630:	edd0 7a00 	vldr	s15, [r0]
 801d634:	ed92 7a05 	vldr	s14, [r2, #20]
 801d638:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 801d63c:	ee27 7a26 	vmul.f32	s14, s14, s13
 801d640:	ee77 7a87 	vadd.f32	s15, s15, s14
 801d644:	edc0 7a00 	vstr	s15, [r0]
    *sum_1 += two_column_buffer[6] * ksrc_transposed[12];
 801d648:	edd1 7a00 	vldr	s15, [r1]
 801d64c:	ed92 7a06 	vldr	s14, [r2, #24]
 801d650:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 801d654:	ee27 7a26 	vmul.f32	s14, s14, s13
 801d658:	ee77 7a87 	vadd.f32	s15, s15, s14
 801d65c:	edc1 7a00 	vstr	s15, [r1]
    *sum_0 += two_column_buffer[6] * ksrc_transposed[13];
 801d660:	edd0 7a00 	vldr	s15, [r0]
 801d664:	ed92 7a06 	vldr	s14, [r2, #24]
 801d668:	edd3 6a0d 	vldr	s13, [r3, #52]	@ 0x34
 801d66c:	ee27 7a26 	vmul.f32	s14, s14, s13
 801d670:	ee77 7a87 	vadd.f32	s15, s15, s14
 801d674:	edc0 7a00 	vstr	s15, [r0]
    *sum_1 += two_column_buffer[7] * ksrc_transposed[13];
 801d678:	edd1 7a00 	vldr	s15, [r1]
 801d67c:	ed92 7a07 	vldr	s14, [r2, #28]
 801d680:	edd3 6a0d 	vldr	s13, [r3, #52]	@ 0x34
 801d684:	ee27 7a26 	vmul.f32	s14, s14, s13
 801d688:	ee77 7a87 	vadd.f32	s15, s15, s14
 801d68c:	edc1 7a00 	vstr	s15, [r1]
    two_column_buffer += (input_width - 1) * STRIDE + 1 + IN_PAD * 2 + OUT_PAD;
 801d690:	eb02 028c 	add.w	r2, r2, ip, lsl #2
    *sum_0 += two_column_buffer[0] * ksrc_transposed[14];
 801d694:	edd0 7a00 	vldr	s15, [r0]
 801d698:	ed92 7a00 	vldr	s14, [r2]
 801d69c:	edd3 6a0e 	vldr	s13, [r3, #56]	@ 0x38
 801d6a0:	ee27 7a26 	vmul.f32	s14, s14, s13
 801d6a4:	ee77 7a87 	vadd.f32	s15, s15, s14
 801d6a8:	edc0 7a00 	vstr	s15, [r0]
    *sum_1 += two_column_buffer[1] * ksrc_transposed[14];
 801d6ac:	edd1 7a00 	vldr	s15, [r1]
 801d6b0:	ed92 7a01 	vldr	s14, [r2, #4]
 801d6b4:	edd3 6a0e 	vldr	s13, [r3, #56]	@ 0x38
 801d6b8:	ee27 7a26 	vmul.f32	s14, s14, s13
 801d6bc:	ee77 7a87 	vadd.f32	s15, s15, s14
 801d6c0:	edc1 7a00 	vstr	s15, [r1]
    *sum_0 += two_column_buffer[1] * ksrc_transposed[15];
 801d6c4:	edd0 7a00 	vldr	s15, [r0]
 801d6c8:	ed92 7a01 	vldr	s14, [r2, #4]
 801d6cc:	edd3 6a0f 	vldr	s13, [r3, #60]	@ 0x3c
 801d6d0:	ee27 7a26 	vmul.f32	s14, s14, s13
 801d6d4:	ee77 7a87 	vadd.f32	s15, s15, s14
 801d6d8:	edc0 7a00 	vstr	s15, [r0]
    *sum_1 += two_column_buffer[2] * ksrc_transposed[15];
 801d6dc:	edd1 7a00 	vldr	s15, [r1]
 801d6e0:	ed92 7a02 	vldr	s14, [r2, #8]
 801d6e4:	edd3 6a0f 	vldr	s13, [r3, #60]	@ 0x3c
 801d6e8:	ee27 7a26 	vmul.f32	s14, s14, s13
 801d6ec:	ee77 7a87 	vadd.f32	s15, s15, s14
 801d6f0:	edc1 7a00 	vstr	s15, [r1]
    *sum_0 += two_column_buffer[2] * ksrc_transposed[16];
 801d6f4:	edd0 7a00 	vldr	s15, [r0]
 801d6f8:	ed92 7a02 	vldr	s14, [r2, #8]
 801d6fc:	edd3 6a10 	vldr	s13, [r3, #64]	@ 0x40
 801d700:	ee27 7a26 	vmul.f32	s14, s14, s13
 801d704:	ee77 7a87 	vadd.f32	s15, s15, s14
 801d708:	edc0 7a00 	vstr	s15, [r0]
    *sum_1 += two_column_buffer[3] * ksrc_transposed[16];
 801d70c:	edd1 7a00 	vldr	s15, [r1]
 801d710:	ed92 7a03 	vldr	s14, [r2, #12]
 801d714:	edd3 6a10 	vldr	s13, [r3, #64]	@ 0x40
 801d718:	ee27 7a26 	vmul.f32	s14, s14, s13
 801d71c:	ee77 7a87 	vadd.f32	s15, s15, s14
 801d720:	edc1 7a00 	vstr	s15, [r1]
    *sum_0 += two_column_buffer[3] * ksrc_transposed[17];
 801d724:	edd0 7a00 	vldr	s15, [r0]
 801d728:	ed92 7a03 	vldr	s14, [r2, #12]
 801d72c:	edd3 6a11 	vldr	s13, [r3, #68]	@ 0x44
 801d730:	ee27 7a26 	vmul.f32	s14, s14, s13
 801d734:	ee77 7a87 	vadd.f32	s15, s15, s14
 801d738:	edc0 7a00 	vstr	s15, [r0]
    *sum_1 += two_column_buffer[4] * ksrc_transposed[17];
 801d73c:	edd1 7a00 	vldr	s15, [r1]
 801d740:	ed92 7a04 	vldr	s14, [r2, #16]
 801d744:	edd3 6a11 	vldr	s13, [r3, #68]	@ 0x44
 801d748:	ee27 7a26 	vmul.f32	s14, s14, s13
 801d74c:	ee77 7a87 	vadd.f32	s15, s15, s14
 801d750:	edc1 7a00 	vstr	s15, [r1]
    *sum_0 += two_column_buffer[4] * ksrc_transposed[18];
 801d754:	edd0 7a00 	vldr	s15, [r0]
 801d758:	ed92 7a04 	vldr	s14, [r2, #16]
 801d75c:	edd3 6a12 	vldr	s13, [r3, #72]	@ 0x48
 801d760:	ee27 7a26 	vmul.f32	s14, s14, s13
 801d764:	ee77 7a87 	vadd.f32	s15, s15, s14
 801d768:	edc0 7a00 	vstr	s15, [r0]
    *sum_1 += two_column_buffer[5] * ksrc_transposed[18];
 801d76c:	edd1 7a00 	vldr	s15, [r1]
 801d770:	ed92 7a05 	vldr	s14, [r2, #20]
 801d774:	edd3 6a12 	vldr	s13, [r3, #72]	@ 0x48
 801d778:	ee27 7a26 	vmul.f32	s14, s14, s13
 801d77c:	ee77 7a87 	vadd.f32	s15, s15, s14
 801d780:	edc1 7a00 	vstr	s15, [r1]
    *sum_0 += two_column_buffer[5] * ksrc_transposed[19];
 801d784:	edd0 7a00 	vldr	s15, [r0]
 801d788:	ed92 7a05 	vldr	s14, [r2, #20]
 801d78c:	edd3 6a13 	vldr	s13, [r3, #76]	@ 0x4c
 801d790:	ee27 7a26 	vmul.f32	s14, s14, s13
 801d794:	ee77 7a87 	vadd.f32	s15, s15, s14
 801d798:	edc0 7a00 	vstr	s15, [r0]
    *sum_1 += two_column_buffer[6] * ksrc_transposed[19];
 801d79c:	edd1 7a00 	vldr	s15, [r1]
 801d7a0:	ed92 7a06 	vldr	s14, [r2, #24]
 801d7a4:	edd3 6a13 	vldr	s13, [r3, #76]	@ 0x4c
 801d7a8:	ee27 7a26 	vmul.f32	s14, s14, s13
 801d7ac:	ee77 7a87 	vadd.f32	s15, s15, s14
 801d7b0:	edc1 7a00 	vstr	s15, [r1]
    *sum_0 += two_column_buffer[6] * ksrc_transposed[20];
 801d7b4:	edd0 7a00 	vldr	s15, [r0]
 801d7b8:	ed92 7a06 	vldr	s14, [r2, #24]
 801d7bc:	edd3 6a14 	vldr	s13, [r3, #80]	@ 0x50
 801d7c0:	ee27 7a26 	vmul.f32	s14, s14, s13
 801d7c4:	ee77 7a87 	vadd.f32	s15, s15, s14
 801d7c8:	edc0 7a00 	vstr	s15, [r0]
    *sum_1 += two_column_buffer[7] * ksrc_transposed[20];
 801d7cc:	edd1 7a00 	vldr	s15, [r1]
 801d7d0:	ed92 7a07 	vldr	s14, [r2, #28]
 801d7d4:	edd3 6a14 	vldr	s13, [r3, #80]	@ 0x50
 801d7d8:	ee27 7a26 	vmul.f32	s14, s14, s13
 801d7dc:	ee77 7a87 	vadd.f32	s15, s15, s14
 801d7e0:	edc1 7a00 	vstr	s15, [r1]
    two_column_buffer += (input_width - 1) * STRIDE + 1 + IN_PAD * 2 + OUT_PAD;
 801d7e4:	eb02 028c 	add.w	r2, r2, ip, lsl #2
    *sum_0 += two_column_buffer[0] * ksrc_transposed[21];
 801d7e8:	edd0 7a00 	vldr	s15, [r0]
 801d7ec:	ed92 7a00 	vldr	s14, [r2]
 801d7f0:	edd3 6a15 	vldr	s13, [r3, #84]	@ 0x54
 801d7f4:	ee27 7a26 	vmul.f32	s14, s14, s13
 801d7f8:	ee77 7a87 	vadd.f32	s15, s15, s14
 801d7fc:	edc0 7a00 	vstr	s15, [r0]
    *sum_1 += two_column_buffer[1] * ksrc_transposed[21];
 801d800:	edd1 7a00 	vldr	s15, [r1]
 801d804:	ed92 7a01 	vldr	s14, [r2, #4]
 801d808:	edd3 6a15 	vldr	s13, [r3, #84]	@ 0x54
 801d80c:	ee27 7a26 	vmul.f32	s14, s14, s13
 801d810:	ee77 7a87 	vadd.f32	s15, s15, s14
 801d814:	edc1 7a00 	vstr	s15, [r1]
    *sum_0 += two_column_buffer[1] * ksrc_transposed[22];
 801d818:	edd0 7a00 	vldr	s15, [r0]
 801d81c:	ed92 7a01 	vldr	s14, [r2, #4]
 801d820:	edd3 6a16 	vldr	s13, [r3, #88]	@ 0x58
 801d824:	ee27 7a26 	vmul.f32	s14, s14, s13
 801d828:	ee77 7a87 	vadd.f32	s15, s15, s14
 801d82c:	edc0 7a00 	vstr	s15, [r0]
    *sum_1 += two_column_buffer[2] * ksrc_transposed[22];
 801d830:	edd1 7a00 	vldr	s15, [r1]
 801d834:	ed92 7a02 	vldr	s14, [r2, #8]
 801d838:	edd3 6a16 	vldr	s13, [r3, #88]	@ 0x58
 801d83c:	ee27 7a26 	vmul.f32	s14, s14, s13
 801d840:	ee77 7a87 	vadd.f32	s15, s15, s14
 801d844:	edc1 7a00 	vstr	s15, [r1]
    *sum_0 += two_column_buffer[2] * ksrc_transposed[23];
 801d848:	edd0 7a00 	vldr	s15, [r0]
 801d84c:	ed92 7a02 	vldr	s14, [r2, #8]
 801d850:	edd3 6a17 	vldr	s13, [r3, #92]	@ 0x5c
 801d854:	ee27 7a26 	vmul.f32	s14, s14, s13
 801d858:	ee77 7a87 	vadd.f32	s15, s15, s14
 801d85c:	edc0 7a00 	vstr	s15, [r0]
    *sum_1 += two_column_buffer[3] * ksrc_transposed[23];
 801d860:	edd1 7a00 	vldr	s15, [r1]
 801d864:	ed92 7a03 	vldr	s14, [r2, #12]
 801d868:	edd3 6a17 	vldr	s13, [r3, #92]	@ 0x5c
 801d86c:	ee27 7a26 	vmul.f32	s14, s14, s13
 801d870:	ee77 7a87 	vadd.f32	s15, s15, s14
 801d874:	edc1 7a00 	vstr	s15, [r1]
    *sum_0 += two_column_buffer[3] * ksrc_transposed[24];
 801d878:	edd0 7a00 	vldr	s15, [r0]
 801d87c:	ed92 7a03 	vldr	s14, [r2, #12]
 801d880:	edd3 6a18 	vldr	s13, [r3, #96]	@ 0x60
 801d884:	ee27 7a26 	vmul.f32	s14, s14, s13
 801d888:	ee77 7a87 	vadd.f32	s15, s15, s14
 801d88c:	edc0 7a00 	vstr	s15, [r0]
    *sum_1 += two_column_buffer[4] * ksrc_transposed[24];
 801d890:	edd1 7a00 	vldr	s15, [r1]
 801d894:	ed92 7a04 	vldr	s14, [r2, #16]
 801d898:	edd3 6a18 	vldr	s13, [r3, #96]	@ 0x60
 801d89c:	ee27 7a26 	vmul.f32	s14, s14, s13
 801d8a0:	ee77 7a87 	vadd.f32	s15, s15, s14
 801d8a4:	edc1 7a00 	vstr	s15, [r1]
    *sum_0 += two_column_buffer[4] * ksrc_transposed[25];
 801d8a8:	edd0 7a00 	vldr	s15, [r0]
 801d8ac:	ed92 7a04 	vldr	s14, [r2, #16]
 801d8b0:	edd3 6a19 	vldr	s13, [r3, #100]	@ 0x64
 801d8b4:	ee27 7a26 	vmul.f32	s14, s14, s13
 801d8b8:	ee77 7a87 	vadd.f32	s15, s15, s14
 801d8bc:	edc0 7a00 	vstr	s15, [r0]
    *sum_1 += two_column_buffer[5] * ksrc_transposed[25];
 801d8c0:	edd1 7a00 	vldr	s15, [r1]
 801d8c4:	ed92 7a05 	vldr	s14, [r2, #20]
 801d8c8:	edd3 6a19 	vldr	s13, [r3, #100]	@ 0x64
 801d8cc:	ee27 7a26 	vmul.f32	s14, s14, s13
 801d8d0:	ee77 7a87 	vadd.f32	s15, s15, s14
 801d8d4:	edc1 7a00 	vstr	s15, [r1]
    *sum_0 += two_column_buffer[5] * ksrc_transposed[26];
 801d8d8:	edd0 7a00 	vldr	s15, [r0]
 801d8dc:	ed92 7a05 	vldr	s14, [r2, #20]
 801d8e0:	edd3 6a1a 	vldr	s13, [r3, #104]	@ 0x68
 801d8e4:	ee27 7a26 	vmul.f32	s14, s14, s13
 801d8e8:	ee77 7a87 	vadd.f32	s15, s15, s14
 801d8ec:	edc0 7a00 	vstr	s15, [r0]
    *sum_1 += two_column_buffer[6] * ksrc_transposed[26];
 801d8f0:	edd1 7a00 	vldr	s15, [r1]
 801d8f4:	ed92 7a06 	vldr	s14, [r2, #24]
 801d8f8:	edd3 6a1a 	vldr	s13, [r3, #104]	@ 0x68
 801d8fc:	ee27 7a26 	vmul.f32	s14, s14, s13
 801d900:	ee77 7a87 	vadd.f32	s15, s15, s14
 801d904:	edc1 7a00 	vstr	s15, [r1]
    *sum_0 += two_column_buffer[6] * ksrc_transposed[27];
 801d908:	edd0 7a00 	vldr	s15, [r0]
 801d90c:	ed92 7a06 	vldr	s14, [r2, #24]
 801d910:	edd3 6a1b 	vldr	s13, [r3, #108]	@ 0x6c
 801d914:	ee27 7a26 	vmul.f32	s14, s14, s13
 801d918:	ee77 7a87 	vadd.f32	s15, s15, s14
 801d91c:	edc0 7a00 	vstr	s15, [r0]
    *sum_1 += two_column_buffer[7] * ksrc_transposed[27];
 801d920:	edd1 7a00 	vldr	s15, [r1]
 801d924:	ed92 7a07 	vldr	s14, [r2, #28]
 801d928:	edd3 6a1b 	vldr	s13, [r3, #108]	@ 0x6c
 801d92c:	ee27 7a26 	vmul.f32	s14, s14, s13
 801d930:	ee77 7a87 	vadd.f32	s15, s15, s14
 801d934:	edc1 7a00 	vstr	s15, [r1]
    two_column_buffer += (input_width - 1) * STRIDE + 1 + IN_PAD * 2 + OUT_PAD;
 801d938:	eb02 028c 	add.w	r2, r2, ip, lsl #2
    *sum_0 += two_column_buffer[0] * ksrc_transposed[28];
 801d93c:	edd0 7a00 	vldr	s15, [r0]
 801d940:	ed92 7a00 	vldr	s14, [r2]
 801d944:	edd3 6a1c 	vldr	s13, [r3, #112]	@ 0x70
 801d948:	ee27 7a26 	vmul.f32	s14, s14, s13
 801d94c:	ee77 7a87 	vadd.f32	s15, s15, s14
 801d950:	edc0 7a00 	vstr	s15, [r0]
    *sum_1 += two_column_buffer[1] * ksrc_transposed[28];
 801d954:	edd1 7a00 	vldr	s15, [r1]
 801d958:	ed92 7a01 	vldr	s14, [r2, #4]
 801d95c:	edd3 6a1c 	vldr	s13, [r3, #112]	@ 0x70
 801d960:	ee27 7a26 	vmul.f32	s14, s14, s13
 801d964:	ee77 7a87 	vadd.f32	s15, s15, s14
 801d968:	edc1 7a00 	vstr	s15, [r1]
    *sum_0 += two_column_buffer[1] * ksrc_transposed[29];
 801d96c:	edd0 7a00 	vldr	s15, [r0]
 801d970:	ed92 7a01 	vldr	s14, [r2, #4]
 801d974:	edd3 6a1d 	vldr	s13, [r3, #116]	@ 0x74
 801d978:	ee27 7a26 	vmul.f32	s14, s14, s13
 801d97c:	ee77 7a87 	vadd.f32	s15, s15, s14
 801d980:	edc0 7a00 	vstr	s15, [r0]
    *sum_1 += two_column_buffer[2] * ksrc_transposed[29];
 801d984:	edd1 7a00 	vldr	s15, [r1]
 801d988:	ed92 7a02 	vldr	s14, [r2, #8]
 801d98c:	edd3 6a1d 	vldr	s13, [r3, #116]	@ 0x74
 801d990:	ee27 7a26 	vmul.f32	s14, s14, s13
 801d994:	ee77 7a87 	vadd.f32	s15, s15, s14
 801d998:	edc1 7a00 	vstr	s15, [r1]
    *sum_0 += two_column_buffer[2] * ksrc_transposed[30];
 801d99c:	edd0 7a00 	vldr	s15, [r0]
 801d9a0:	ed92 7a02 	vldr	s14, [r2, #8]
 801d9a4:	edd3 6a1e 	vldr	s13, [r3, #120]	@ 0x78
 801d9a8:	ee27 7a26 	vmul.f32	s14, s14, s13
 801d9ac:	ee77 7a87 	vadd.f32	s15, s15, s14
 801d9b0:	edc0 7a00 	vstr	s15, [r0]
    *sum_1 += two_column_buffer[3] * ksrc_transposed[30];
 801d9b4:	edd1 7a00 	vldr	s15, [r1]
 801d9b8:	ed92 7a03 	vldr	s14, [r2, #12]
 801d9bc:	edd3 6a1e 	vldr	s13, [r3, #120]	@ 0x78
 801d9c0:	ee27 7a26 	vmul.f32	s14, s14, s13
 801d9c4:	ee77 7a87 	vadd.f32	s15, s15, s14
 801d9c8:	edc1 7a00 	vstr	s15, [r1]
    *sum_0 += two_column_buffer[3] * ksrc_transposed[31];
 801d9cc:	edd0 7a00 	vldr	s15, [r0]
 801d9d0:	ed92 7a03 	vldr	s14, [r2, #12]
 801d9d4:	edd3 6a1f 	vldr	s13, [r3, #124]	@ 0x7c
 801d9d8:	ee27 7a26 	vmul.f32	s14, s14, s13
 801d9dc:	ee77 7a87 	vadd.f32	s15, s15, s14
 801d9e0:	edc0 7a00 	vstr	s15, [r0]
    *sum_1 += two_column_buffer[4] * ksrc_transposed[31];
 801d9e4:	edd1 7a00 	vldr	s15, [r1]
 801d9e8:	ed92 7a04 	vldr	s14, [r2, #16]
 801d9ec:	edd3 6a1f 	vldr	s13, [r3, #124]	@ 0x7c
 801d9f0:	ee27 7a26 	vmul.f32	s14, s14, s13
 801d9f4:	ee77 7a87 	vadd.f32	s15, s15, s14
 801d9f8:	edc1 7a00 	vstr	s15, [r1]
    *sum_0 += two_column_buffer[4] * ksrc_transposed[32];
 801d9fc:	edd0 7a00 	vldr	s15, [r0]
 801da00:	ed92 7a04 	vldr	s14, [r2, #16]
 801da04:	edd3 6a20 	vldr	s13, [r3, #128]	@ 0x80
 801da08:	ee27 7a26 	vmul.f32	s14, s14, s13
 801da0c:	ee77 7a87 	vadd.f32	s15, s15, s14
 801da10:	edc0 7a00 	vstr	s15, [r0]
    *sum_1 += two_column_buffer[5] * ksrc_transposed[32];
 801da14:	edd1 7a00 	vldr	s15, [r1]
 801da18:	ed92 7a05 	vldr	s14, [r2, #20]
 801da1c:	edd3 6a20 	vldr	s13, [r3, #128]	@ 0x80
 801da20:	ee27 7a26 	vmul.f32	s14, s14, s13
 801da24:	ee77 7a87 	vadd.f32	s15, s15, s14
 801da28:	edc1 7a00 	vstr	s15, [r1]
    *sum_0 += two_column_buffer[5] * ksrc_transposed[33];
 801da2c:	edd0 7a00 	vldr	s15, [r0]
 801da30:	ed92 7a05 	vldr	s14, [r2, #20]
 801da34:	edd3 6a21 	vldr	s13, [r3, #132]	@ 0x84
 801da38:	ee27 7a26 	vmul.f32	s14, s14, s13
 801da3c:	ee77 7a87 	vadd.f32	s15, s15, s14
 801da40:	edc0 7a00 	vstr	s15, [r0]
    *sum_1 += two_column_buffer[6] * ksrc_transposed[33];
 801da44:	edd1 7a00 	vldr	s15, [r1]
 801da48:	ed92 7a06 	vldr	s14, [r2, #24]
 801da4c:	edd3 6a21 	vldr	s13, [r3, #132]	@ 0x84
 801da50:	ee27 7a26 	vmul.f32	s14, s14, s13
 801da54:	ee77 7a87 	vadd.f32	s15, s15, s14
 801da58:	edc1 7a00 	vstr	s15, [r1]
    *sum_0 += two_column_buffer[6] * ksrc_transposed[34];
 801da5c:	edd0 7a00 	vldr	s15, [r0]
 801da60:	ed92 7a06 	vldr	s14, [r2, #24]
 801da64:	edd3 6a22 	vldr	s13, [r3, #136]	@ 0x88
 801da68:	ee27 7a26 	vmul.f32	s14, s14, s13
 801da6c:	ee77 7a87 	vadd.f32	s15, s15, s14
 801da70:	edc0 7a00 	vstr	s15, [r0]
    *sum_1 += two_column_buffer[7] * ksrc_transposed[34];
 801da74:	edd1 7a00 	vldr	s15, [r1]
 801da78:	ed92 7a07 	vldr	s14, [r2, #28]
 801da7c:	edd3 6a22 	vldr	s13, [r3, #136]	@ 0x88
 801da80:	ee27 7a26 	vmul.f32	s14, s14, s13
 801da84:	ee77 7a87 	vadd.f32	s15, s15, s14
 801da88:	edc1 7a00 	vstr	s15, [r1]
    two_column_buffer += (input_width - 1) * STRIDE + 1 + IN_PAD * 2 + OUT_PAD;
 801da8c:	eb02 028c 	add.w	r2, r2, ip, lsl #2
    *sum_0 += two_column_buffer[0] * ksrc_transposed[35];
 801da90:	edd0 7a00 	vldr	s15, [r0]
 801da94:	ed92 7a00 	vldr	s14, [r2]
 801da98:	edd3 6a23 	vldr	s13, [r3, #140]	@ 0x8c
 801da9c:	ee27 7a26 	vmul.f32	s14, s14, s13
 801daa0:	ee77 7a87 	vadd.f32	s15, s15, s14
 801daa4:	edc0 7a00 	vstr	s15, [r0]
    *sum_1 += two_column_buffer[1] * ksrc_transposed[35];
 801daa8:	edd1 7a00 	vldr	s15, [r1]
 801daac:	ed92 7a01 	vldr	s14, [r2, #4]
 801dab0:	edd3 6a23 	vldr	s13, [r3, #140]	@ 0x8c
 801dab4:	ee27 7a26 	vmul.f32	s14, s14, s13
 801dab8:	ee77 7a87 	vadd.f32	s15, s15, s14
 801dabc:	edc1 7a00 	vstr	s15, [r1]
    *sum_0 += two_column_buffer[1] * ksrc_transposed[36];
 801dac0:	edd0 7a00 	vldr	s15, [r0]
 801dac4:	ed92 7a01 	vldr	s14, [r2, #4]
 801dac8:	edd3 6a24 	vldr	s13, [r3, #144]	@ 0x90
 801dacc:	ee27 7a26 	vmul.f32	s14, s14, s13
 801dad0:	ee77 7a87 	vadd.f32	s15, s15, s14
 801dad4:	edc0 7a00 	vstr	s15, [r0]
    *sum_1 += two_column_buffer[2] * ksrc_transposed[36];
 801dad8:	edd1 7a00 	vldr	s15, [r1]
 801dadc:	ed92 7a02 	vldr	s14, [r2, #8]
 801dae0:	edd3 6a24 	vldr	s13, [r3, #144]	@ 0x90
 801dae4:	ee27 7a26 	vmul.f32	s14, s14, s13
 801dae8:	ee77 7a87 	vadd.f32	s15, s15, s14
 801daec:	edc1 7a00 	vstr	s15, [r1]
    *sum_0 += two_column_buffer[2] * ksrc_transposed[37];
 801daf0:	edd0 7a00 	vldr	s15, [r0]
 801daf4:	ed92 7a02 	vldr	s14, [r2, #8]
 801daf8:	edd3 6a25 	vldr	s13, [r3, #148]	@ 0x94
 801dafc:	ee27 7a26 	vmul.f32	s14, s14, s13
 801db00:	ee77 7a87 	vadd.f32	s15, s15, s14
 801db04:	edc0 7a00 	vstr	s15, [r0]
    *sum_1 += two_column_buffer[3] * ksrc_transposed[37];
 801db08:	edd1 7a00 	vldr	s15, [r1]
 801db0c:	ed92 7a03 	vldr	s14, [r2, #12]
 801db10:	edd3 6a25 	vldr	s13, [r3, #148]	@ 0x94
 801db14:	ee27 7a26 	vmul.f32	s14, s14, s13
 801db18:	ee77 7a87 	vadd.f32	s15, s15, s14
 801db1c:	edc1 7a00 	vstr	s15, [r1]
    *sum_0 += two_column_buffer[3] * ksrc_transposed[38];
 801db20:	edd0 7a00 	vldr	s15, [r0]
 801db24:	ed92 7a03 	vldr	s14, [r2, #12]
 801db28:	edd3 6a26 	vldr	s13, [r3, #152]	@ 0x98
 801db2c:	ee27 7a26 	vmul.f32	s14, s14, s13
 801db30:	ee77 7a87 	vadd.f32	s15, s15, s14
 801db34:	edc0 7a00 	vstr	s15, [r0]
    *sum_1 += two_column_buffer[4] * ksrc_transposed[38];
 801db38:	edd1 7a00 	vldr	s15, [r1]
 801db3c:	ed92 7a04 	vldr	s14, [r2, #16]
 801db40:	edd3 6a26 	vldr	s13, [r3, #152]	@ 0x98
 801db44:	ee27 7a26 	vmul.f32	s14, s14, s13
 801db48:	ee77 7a87 	vadd.f32	s15, s15, s14
 801db4c:	edc1 7a00 	vstr	s15, [r1]
    *sum_0 += two_column_buffer[4] * ksrc_transposed[39];
 801db50:	edd0 7a00 	vldr	s15, [r0]
 801db54:	ed92 7a04 	vldr	s14, [r2, #16]
 801db58:	edd3 6a27 	vldr	s13, [r3, #156]	@ 0x9c
 801db5c:	ee27 7a26 	vmul.f32	s14, s14, s13
 801db60:	ee77 7a87 	vadd.f32	s15, s15, s14
 801db64:	edc0 7a00 	vstr	s15, [r0]
    *sum_1 += two_column_buffer[5] * ksrc_transposed[39];
 801db68:	edd1 7a00 	vldr	s15, [r1]
 801db6c:	ed92 7a05 	vldr	s14, [r2, #20]
 801db70:	edd3 6a27 	vldr	s13, [r3, #156]	@ 0x9c
 801db74:	ee27 7a26 	vmul.f32	s14, s14, s13
 801db78:	ee77 7a87 	vadd.f32	s15, s15, s14
 801db7c:	edc1 7a00 	vstr	s15, [r1]
    *sum_0 += two_column_buffer[5] * ksrc_transposed[40];
 801db80:	edd0 7a00 	vldr	s15, [r0]
 801db84:	ed92 7a05 	vldr	s14, [r2, #20]
 801db88:	edd3 6a28 	vldr	s13, [r3, #160]	@ 0xa0
 801db8c:	ee27 7a26 	vmul.f32	s14, s14, s13
 801db90:	ee77 7a87 	vadd.f32	s15, s15, s14
 801db94:	edc0 7a00 	vstr	s15, [r0]
    *sum_1 += two_column_buffer[6] * ksrc_transposed[40];
 801db98:	edd1 7a00 	vldr	s15, [r1]
 801db9c:	ed92 7a06 	vldr	s14, [r2, #24]
 801dba0:	edd3 6a28 	vldr	s13, [r3, #160]	@ 0xa0
 801dba4:	ee27 7a26 	vmul.f32	s14, s14, s13
 801dba8:	ee77 7a87 	vadd.f32	s15, s15, s14
 801dbac:	edc1 7a00 	vstr	s15, [r1]
    *sum_0 += two_column_buffer[6] * ksrc_transposed[41];
 801dbb0:	edd0 7a00 	vldr	s15, [r0]
 801dbb4:	ed92 7a06 	vldr	s14, [r2, #24]
 801dbb8:	edd3 6a29 	vldr	s13, [r3, #164]	@ 0xa4
 801dbbc:	ee27 7a26 	vmul.f32	s14, s14, s13
 801dbc0:	ee77 7a87 	vadd.f32	s15, s15, s14
 801dbc4:	edc0 7a00 	vstr	s15, [r0]
    *sum_1 += two_column_buffer[7] * ksrc_transposed[41];
 801dbc8:	edd1 7a00 	vldr	s15, [r1]
 801dbcc:	ed92 7a07 	vldr	s14, [r2, #28]
 801dbd0:	edd3 6a29 	vldr	s13, [r3, #164]	@ 0xa4
 801dbd4:	ee27 7a26 	vmul.f32	s14, s14, s13
 801dbd8:	ee77 7a87 	vadd.f32	s15, s15, s14
 801dbdc:	edc1 7a00 	vstr	s15, [r1]
    two_column_buffer += (input_width - 1) * STRIDE + 1 + IN_PAD * 2 + OUT_PAD;
 801dbe0:	eb02 028c 	add.w	r2, r2, ip, lsl #2
    *sum_0 += two_column_buffer[0] * ksrc_transposed[42];
 801dbe4:	edd0 7a00 	vldr	s15, [r0]
 801dbe8:	ed92 7a00 	vldr	s14, [r2]
 801dbec:	edd3 6a2a 	vldr	s13, [r3, #168]	@ 0xa8
 801dbf0:	ee27 7a26 	vmul.f32	s14, s14, s13
 801dbf4:	ee77 7a87 	vadd.f32	s15, s15, s14
 801dbf8:	edc0 7a00 	vstr	s15, [r0]
    *sum_1 += two_column_buffer[1] * ksrc_transposed[42];
 801dbfc:	edd1 7a00 	vldr	s15, [r1]
 801dc00:	ed92 7a01 	vldr	s14, [r2, #4]
 801dc04:	edd3 6a2a 	vldr	s13, [r3, #168]	@ 0xa8
 801dc08:	ee27 7a26 	vmul.f32	s14, s14, s13
 801dc0c:	ee77 7a87 	vadd.f32	s15, s15, s14
 801dc10:	edc1 7a00 	vstr	s15, [r1]
    *sum_0 += two_column_buffer[1] * ksrc_transposed[43];
 801dc14:	edd0 7a00 	vldr	s15, [r0]
 801dc18:	ed92 7a01 	vldr	s14, [r2, #4]
 801dc1c:	edd3 6a2b 	vldr	s13, [r3, #172]	@ 0xac
 801dc20:	ee27 7a26 	vmul.f32	s14, s14, s13
 801dc24:	ee77 7a87 	vadd.f32	s15, s15, s14
 801dc28:	edc0 7a00 	vstr	s15, [r0]
    *sum_1 += two_column_buffer[2] * ksrc_transposed[43];
 801dc2c:	edd1 7a00 	vldr	s15, [r1]
 801dc30:	ed92 7a02 	vldr	s14, [r2, #8]
 801dc34:	edd3 6a2b 	vldr	s13, [r3, #172]	@ 0xac
 801dc38:	ee27 7a26 	vmul.f32	s14, s14, s13
 801dc3c:	ee77 7a87 	vadd.f32	s15, s15, s14
 801dc40:	edc1 7a00 	vstr	s15, [r1]
    *sum_0 += two_column_buffer[2] * ksrc_transposed[44];
 801dc44:	edd0 7a00 	vldr	s15, [r0]
 801dc48:	ed92 7a02 	vldr	s14, [r2, #8]
 801dc4c:	edd3 6a2c 	vldr	s13, [r3, #176]	@ 0xb0
 801dc50:	ee27 7a26 	vmul.f32	s14, s14, s13
 801dc54:	ee77 7a87 	vadd.f32	s15, s15, s14
 801dc58:	edc0 7a00 	vstr	s15, [r0]
    *sum_1 += two_column_buffer[3] * ksrc_transposed[44];
 801dc5c:	edd1 7a00 	vldr	s15, [r1]
 801dc60:	ed92 7a03 	vldr	s14, [r2, #12]
 801dc64:	edd3 6a2c 	vldr	s13, [r3, #176]	@ 0xb0
 801dc68:	ee27 7a26 	vmul.f32	s14, s14, s13
 801dc6c:	ee77 7a87 	vadd.f32	s15, s15, s14
 801dc70:	edc1 7a00 	vstr	s15, [r1]
    *sum_0 += two_column_buffer[3] * ksrc_transposed[45];
 801dc74:	edd0 7a00 	vldr	s15, [r0]
 801dc78:	ed92 7a03 	vldr	s14, [r2, #12]
 801dc7c:	edd3 6a2d 	vldr	s13, [r3, #180]	@ 0xb4
 801dc80:	ee27 7a26 	vmul.f32	s14, s14, s13
 801dc84:	ee77 7a87 	vadd.f32	s15, s15, s14
 801dc88:	edc0 7a00 	vstr	s15, [r0]
    *sum_1 += two_column_buffer[4] * ksrc_transposed[45];
 801dc8c:	edd1 7a00 	vldr	s15, [r1]
 801dc90:	ed92 7a04 	vldr	s14, [r2, #16]
 801dc94:	edd3 6a2d 	vldr	s13, [r3, #180]	@ 0xb4
 801dc98:	ee27 7a26 	vmul.f32	s14, s14, s13
 801dc9c:	ee77 7a87 	vadd.f32	s15, s15, s14
 801dca0:	edc1 7a00 	vstr	s15, [r1]
    *sum_0 += two_column_buffer[4] * ksrc_transposed[46];
 801dca4:	edd0 7a00 	vldr	s15, [r0]
 801dca8:	ed92 7a04 	vldr	s14, [r2, #16]
 801dcac:	edd3 6a2e 	vldr	s13, [r3, #184]	@ 0xb8
 801dcb0:	ee27 7a26 	vmul.f32	s14, s14, s13
 801dcb4:	ee77 7a87 	vadd.f32	s15, s15, s14
 801dcb8:	edc0 7a00 	vstr	s15, [r0]
    *sum_1 += two_column_buffer[5] * ksrc_transposed[46];
 801dcbc:	edd1 7a00 	vldr	s15, [r1]
 801dcc0:	ed92 7a05 	vldr	s14, [r2, #20]
 801dcc4:	edd3 6a2e 	vldr	s13, [r3, #184]	@ 0xb8
 801dcc8:	ee27 7a26 	vmul.f32	s14, s14, s13
 801dccc:	ee77 7a87 	vadd.f32	s15, s15, s14
 801dcd0:	edc1 7a00 	vstr	s15, [r1]
    *sum_0 += two_column_buffer[5] * ksrc_transposed[47];
 801dcd4:	edd0 7a00 	vldr	s15, [r0]
 801dcd8:	ed92 7a05 	vldr	s14, [r2, #20]
 801dcdc:	edd3 6a2f 	vldr	s13, [r3, #188]	@ 0xbc
 801dce0:	ee27 7a26 	vmul.f32	s14, s14, s13
 801dce4:	ee77 7a87 	vadd.f32	s15, s15, s14
 801dce8:	edc0 7a00 	vstr	s15, [r0]
    *sum_1 += two_column_buffer[6] * ksrc_transposed[47];
 801dcec:	edd1 7a00 	vldr	s15, [r1]
 801dcf0:	ed92 7a06 	vldr	s14, [r2, #24]
 801dcf4:	edd3 6a2f 	vldr	s13, [r3, #188]	@ 0xbc
 801dcf8:	ee27 7a26 	vmul.f32	s14, s14, s13
 801dcfc:	ee77 7a87 	vadd.f32	s15, s15, s14
 801dd00:	edc1 7a00 	vstr	s15, [r1]
    *sum_0 += two_column_buffer[6] * ksrc_transposed[48];
 801dd04:	edd0 7a00 	vldr	s15, [r0]
 801dd08:	ed92 7a06 	vldr	s14, [r2, #24]
 801dd0c:	edd3 6a30 	vldr	s13, [r3, #192]	@ 0xc0
 801dd10:	ee27 7a26 	vmul.f32	s14, s14, s13
 801dd14:	ee77 7a87 	vadd.f32	s15, s15, s14
 801dd18:	edc0 7a00 	vstr	s15, [r0]
    *sum_1 += two_column_buffer[7] * ksrc_transposed[48];
 801dd1c:	edd1 7a00 	vldr	s15, [r1]
 801dd20:	ed92 7a07 	vldr	s14, [r2, #28]
 801dd24:	edd3 6a30 	vldr	s13, [r3, #192]	@ 0xc0
 801dd28:	ee27 7a26 	vmul.f32	s14, s14, s13
 801dd2c:	ee77 7a87 	vadd.f32	s15, s15, s14
 801dd30:	edc1 7a00 	vstr	s15, [r1]
}
 801dd34:	f85d fb04 	ldr.w	pc, [sp], #4

0801dd38 <transpose_depthwise_mac_kernel7_1row_fp_uniweight>:
    *sum_0 += two_column_buffer[0] * ksrc_transposed[0];
 801dd38:	edd0 7a00 	vldr	s15, [r0]
 801dd3c:	ed91 7a00 	vldr	s14, [r1]
 801dd40:	edd2 6a00 	vldr	s13, [r2]
 801dd44:	ee27 7a26 	vmul.f32	s14, s14, s13
 801dd48:	ee77 7a87 	vadd.f32	s15, s15, s14
 801dd4c:	edc0 7a00 	vstr	s15, [r0]
    *sum_0 += two_column_buffer[1] * ksrc_transposed[1];
 801dd50:	ed91 7a01 	vldr	s14, [r1, #4]
 801dd54:	edd2 6a01 	vldr	s13, [r2, #4]
 801dd58:	ee27 7a26 	vmul.f32	s14, s14, s13
 801dd5c:	ee77 7a87 	vadd.f32	s15, s15, s14
 801dd60:	edc0 7a00 	vstr	s15, [r0]
    *sum_0 += two_column_buffer[2] * ksrc_transposed[2];
 801dd64:	ed91 7a02 	vldr	s14, [r1, #8]
 801dd68:	edd2 6a02 	vldr	s13, [r2, #8]
 801dd6c:	ee27 7a26 	vmul.f32	s14, s14, s13
 801dd70:	ee77 7a87 	vadd.f32	s15, s15, s14
 801dd74:	edc0 7a00 	vstr	s15, [r0]
    *sum_0 += two_column_buffer[3] * ksrc_transposed[3];
 801dd78:	ed91 7a03 	vldr	s14, [r1, #12]
 801dd7c:	edd2 6a03 	vldr	s13, [r2, #12]
 801dd80:	ee27 7a26 	vmul.f32	s14, s14, s13
 801dd84:	ee77 7a87 	vadd.f32	s15, s15, s14
 801dd88:	edc0 7a00 	vstr	s15, [r0]
    *sum_0 += two_column_buffer[4] * ksrc_transposed[4];
 801dd8c:	ed91 7a04 	vldr	s14, [r1, #16]
 801dd90:	edd2 6a04 	vldr	s13, [r2, #16]
 801dd94:	ee27 7a26 	vmul.f32	s14, s14, s13
 801dd98:	ee77 7a87 	vadd.f32	s15, s15, s14
 801dd9c:	edc0 7a00 	vstr	s15, [r0]
    *sum_0 += two_column_buffer[5] * ksrc_transposed[5];
 801dda0:	ed91 7a05 	vldr	s14, [r1, #20]
 801dda4:	edd2 6a05 	vldr	s13, [r2, #20]
 801dda8:	ee27 7a26 	vmul.f32	s14, s14, s13
 801ddac:	ee77 7a87 	vadd.f32	s15, s15, s14
 801ddb0:	edc0 7a00 	vstr	s15, [r0]
    *sum_0 += two_column_buffer[6] * ksrc_transposed[6];
 801ddb4:	ed91 7a06 	vldr	s14, [r1, #24]
 801ddb8:	edd2 6a06 	vldr	s13, [r2, #24]
 801ddbc:	ee27 7a26 	vmul.f32	s14, s14, s13
 801ddc0:	ee77 7a87 	vadd.f32	s15, s15, s14
 801ddc4:	edc0 7a00 	vstr	s15, [r0]
    two_column_buffer += (input_width - 1) * STRIDE + 1 + IN_PAD * 2 + OUT_PAD;
 801ddc8:	f103 3cff 	add.w	ip, r3, #4294967295	@ 0xffffffff
 801ddcc:	f8bd 3000 	ldrh.w	r3, [sp]
 801ddd0:	fb0c f303 	mul.w	r3, ip, r3
 801ddd4:	3301      	adds	r3, #1
 801ddd6:	f8bd c004 	ldrh.w	ip, [sp, #4]
 801ddda:	eb03 034c 	add.w	r3, r3, ip, lsl #1
 801ddde:	f8bd c008 	ldrh.w	ip, [sp, #8]
 801dde2:	449c      	add	ip, r3
 801dde4:	eb01 038c 	add.w	r3, r1, ip, lsl #2
    *sum_0 += two_column_buffer[0] * ksrc_transposed[7];
 801dde8:	ed93 7a00 	vldr	s14, [r3]
 801ddec:	edd2 6a07 	vldr	s13, [r2, #28]
 801ddf0:	ee27 7a26 	vmul.f32	s14, s14, s13
 801ddf4:	ee77 7a87 	vadd.f32	s15, s15, s14
 801ddf8:	edc0 7a00 	vstr	s15, [r0]
    *sum_0 += two_column_buffer[1] * ksrc_transposed[8];
 801ddfc:	ed93 7a01 	vldr	s14, [r3, #4]
 801de00:	edd2 6a08 	vldr	s13, [r2, #32]
 801de04:	ee27 7a26 	vmul.f32	s14, s14, s13
 801de08:	ee77 7a87 	vadd.f32	s15, s15, s14
 801de0c:	edc0 7a00 	vstr	s15, [r0]
    *sum_0 += two_column_buffer[2] * ksrc_transposed[9];
 801de10:	ed93 7a02 	vldr	s14, [r3, #8]
 801de14:	edd2 6a09 	vldr	s13, [r2, #36]	@ 0x24
 801de18:	ee27 7a26 	vmul.f32	s14, s14, s13
 801de1c:	ee77 7a87 	vadd.f32	s15, s15, s14
 801de20:	edc0 7a00 	vstr	s15, [r0]
    *sum_0 += two_column_buffer[3] * ksrc_transposed[10];
 801de24:	ed93 7a03 	vldr	s14, [r3, #12]
 801de28:	edd2 6a0a 	vldr	s13, [r2, #40]	@ 0x28
 801de2c:	ee27 7a26 	vmul.f32	s14, s14, s13
 801de30:	ee77 7a87 	vadd.f32	s15, s15, s14
 801de34:	edc0 7a00 	vstr	s15, [r0]
    *sum_0 += two_column_buffer[4] * ksrc_transposed[11];
 801de38:	ed93 7a04 	vldr	s14, [r3, #16]
 801de3c:	edd2 6a0b 	vldr	s13, [r2, #44]	@ 0x2c
 801de40:	ee27 7a26 	vmul.f32	s14, s14, s13
 801de44:	ee77 7a87 	vadd.f32	s15, s15, s14
 801de48:	edc0 7a00 	vstr	s15, [r0]
    *sum_0 += two_column_buffer[5] * ksrc_transposed[12];
 801de4c:	ed93 7a05 	vldr	s14, [r3, #20]
 801de50:	edd2 6a0c 	vldr	s13, [r2, #48]	@ 0x30
 801de54:	ee27 7a26 	vmul.f32	s14, s14, s13
 801de58:	ee77 7a87 	vadd.f32	s15, s15, s14
 801de5c:	edc0 7a00 	vstr	s15, [r0]
    *sum_0 += two_column_buffer[6] * ksrc_transposed[13];
 801de60:	ed93 7a06 	vldr	s14, [r3, #24]
 801de64:	edd2 6a0d 	vldr	s13, [r2, #52]	@ 0x34
 801de68:	ee27 7a26 	vmul.f32	s14, s14, s13
 801de6c:	ee77 7a87 	vadd.f32	s15, s15, s14
 801de70:	edc0 7a00 	vstr	s15, [r0]
    two_column_buffer += (input_width - 1) * STRIDE + 1 + IN_PAD * 2 + OUT_PAD;
 801de74:	eb03 038c 	add.w	r3, r3, ip, lsl #2
    *sum_0 += two_column_buffer[0] * ksrc_transposed[14];
 801de78:	ed93 7a00 	vldr	s14, [r3]
 801de7c:	edd2 6a0e 	vldr	s13, [r2, #56]	@ 0x38
 801de80:	ee27 7a26 	vmul.f32	s14, s14, s13
 801de84:	ee77 7a87 	vadd.f32	s15, s15, s14
 801de88:	edc0 7a00 	vstr	s15, [r0]
    *sum_0 += two_column_buffer[1] * ksrc_transposed[15];
 801de8c:	ed93 7a01 	vldr	s14, [r3, #4]
 801de90:	edd2 6a0f 	vldr	s13, [r2, #60]	@ 0x3c
 801de94:	ee27 7a26 	vmul.f32	s14, s14, s13
 801de98:	ee77 7a87 	vadd.f32	s15, s15, s14
 801de9c:	edc0 7a00 	vstr	s15, [r0]
    *sum_0 += two_column_buffer[2] * ksrc_transposed[16];
 801dea0:	ed93 7a02 	vldr	s14, [r3, #8]
 801dea4:	edd2 6a10 	vldr	s13, [r2, #64]	@ 0x40
 801dea8:	ee27 7a26 	vmul.f32	s14, s14, s13
 801deac:	ee77 7a87 	vadd.f32	s15, s15, s14
 801deb0:	edc0 7a00 	vstr	s15, [r0]
    *sum_0 += two_column_buffer[3] * ksrc_transposed[17];
 801deb4:	ed93 7a03 	vldr	s14, [r3, #12]
 801deb8:	edd2 6a11 	vldr	s13, [r2, #68]	@ 0x44
 801debc:	ee27 7a26 	vmul.f32	s14, s14, s13
 801dec0:	ee77 7a87 	vadd.f32	s15, s15, s14
 801dec4:	edc0 7a00 	vstr	s15, [r0]
    *sum_0 += two_column_buffer[4] * ksrc_transposed[18];
 801dec8:	ed93 7a04 	vldr	s14, [r3, #16]
 801decc:	edd2 6a12 	vldr	s13, [r2, #72]	@ 0x48
 801ded0:	ee27 7a26 	vmul.f32	s14, s14, s13
 801ded4:	ee77 7a87 	vadd.f32	s15, s15, s14
 801ded8:	edc0 7a00 	vstr	s15, [r0]
    *sum_0 += two_column_buffer[5] * ksrc_transposed[19];
 801dedc:	ed93 7a05 	vldr	s14, [r3, #20]
 801dee0:	edd2 6a13 	vldr	s13, [r2, #76]	@ 0x4c
 801dee4:	ee27 7a26 	vmul.f32	s14, s14, s13
 801dee8:	ee77 7a87 	vadd.f32	s15, s15, s14
 801deec:	edc0 7a00 	vstr	s15, [r0]
    *sum_0 += two_column_buffer[6] * ksrc_transposed[20];
 801def0:	ed93 7a06 	vldr	s14, [r3, #24]
 801def4:	edd2 6a14 	vldr	s13, [r2, #80]	@ 0x50
 801def8:	ee27 7a26 	vmul.f32	s14, s14, s13
 801defc:	ee77 7a87 	vadd.f32	s15, s15, s14
 801df00:	edc0 7a00 	vstr	s15, [r0]
    two_column_buffer += (input_width - 1) * STRIDE + 1 + IN_PAD * 2 + OUT_PAD;
 801df04:	eb03 038c 	add.w	r3, r3, ip, lsl #2
    *sum_0 += two_column_buffer[0] * ksrc_transposed[21];
 801df08:	ed93 7a00 	vldr	s14, [r3]
 801df0c:	edd2 6a15 	vldr	s13, [r2, #84]	@ 0x54
 801df10:	ee27 7a26 	vmul.f32	s14, s14, s13
 801df14:	ee77 7a87 	vadd.f32	s15, s15, s14
 801df18:	edc0 7a00 	vstr	s15, [r0]
    *sum_0 += two_column_buffer[1] * ksrc_transposed[22];
 801df1c:	ed93 7a01 	vldr	s14, [r3, #4]
 801df20:	edd2 6a16 	vldr	s13, [r2, #88]	@ 0x58
 801df24:	ee27 7a26 	vmul.f32	s14, s14, s13
 801df28:	ee77 7a87 	vadd.f32	s15, s15, s14
 801df2c:	edc0 7a00 	vstr	s15, [r0]
    *sum_0 += two_column_buffer[2] * ksrc_transposed[23];
 801df30:	ed93 7a02 	vldr	s14, [r3, #8]
 801df34:	edd2 6a17 	vldr	s13, [r2, #92]	@ 0x5c
 801df38:	ee27 7a26 	vmul.f32	s14, s14, s13
 801df3c:	ee77 7a87 	vadd.f32	s15, s15, s14
 801df40:	edc0 7a00 	vstr	s15, [r0]
    *sum_0 += two_column_buffer[3] * ksrc_transposed[24];
 801df44:	ed93 7a03 	vldr	s14, [r3, #12]
 801df48:	edd2 6a18 	vldr	s13, [r2, #96]	@ 0x60
 801df4c:	ee27 7a26 	vmul.f32	s14, s14, s13
 801df50:	ee77 7a87 	vadd.f32	s15, s15, s14
 801df54:	edc0 7a00 	vstr	s15, [r0]
    *sum_0 += two_column_buffer[4] * ksrc_transposed[25];
 801df58:	ed93 7a04 	vldr	s14, [r3, #16]
 801df5c:	edd2 6a19 	vldr	s13, [r2, #100]	@ 0x64
 801df60:	ee27 7a26 	vmul.f32	s14, s14, s13
 801df64:	ee77 7a87 	vadd.f32	s15, s15, s14
 801df68:	edc0 7a00 	vstr	s15, [r0]
    *sum_0 += two_column_buffer[5] * ksrc_transposed[26];
 801df6c:	ed93 7a05 	vldr	s14, [r3, #20]
 801df70:	edd2 6a1a 	vldr	s13, [r2, #104]	@ 0x68
 801df74:	ee27 7a26 	vmul.f32	s14, s14, s13
 801df78:	ee77 7a87 	vadd.f32	s15, s15, s14
 801df7c:	edc0 7a00 	vstr	s15, [r0]
    *sum_0 += two_column_buffer[6] * ksrc_transposed[27];
 801df80:	ed93 7a06 	vldr	s14, [r3, #24]
 801df84:	edd2 6a1b 	vldr	s13, [r2, #108]	@ 0x6c
 801df88:	ee27 7a26 	vmul.f32	s14, s14, s13
 801df8c:	ee77 7a87 	vadd.f32	s15, s15, s14
 801df90:	edc0 7a00 	vstr	s15, [r0]
    two_column_buffer += (input_width - 1) * STRIDE + 1 + IN_PAD * 2 + OUT_PAD;
 801df94:	eb03 038c 	add.w	r3, r3, ip, lsl #2
    *sum_0 += two_column_buffer[0] * ksrc_transposed[28];
 801df98:	ed93 7a00 	vldr	s14, [r3]
 801df9c:	edd2 6a1c 	vldr	s13, [r2, #112]	@ 0x70
 801dfa0:	ee27 7a26 	vmul.f32	s14, s14, s13
 801dfa4:	ee77 7a87 	vadd.f32	s15, s15, s14
 801dfa8:	edc0 7a00 	vstr	s15, [r0]
    *sum_0 += two_column_buffer[1] * ksrc_transposed[29];
 801dfac:	ed93 7a01 	vldr	s14, [r3, #4]
 801dfb0:	edd2 6a1d 	vldr	s13, [r2, #116]	@ 0x74
 801dfb4:	ee27 7a26 	vmul.f32	s14, s14, s13
 801dfb8:	ee77 7a87 	vadd.f32	s15, s15, s14
 801dfbc:	edc0 7a00 	vstr	s15, [r0]
    *sum_0 += two_column_buffer[2] * ksrc_transposed[30];
 801dfc0:	ed93 7a02 	vldr	s14, [r3, #8]
 801dfc4:	edd2 6a1e 	vldr	s13, [r2, #120]	@ 0x78
 801dfc8:	ee27 7a26 	vmul.f32	s14, s14, s13
 801dfcc:	ee77 7a87 	vadd.f32	s15, s15, s14
 801dfd0:	edc0 7a00 	vstr	s15, [r0]
    *sum_0 += two_column_buffer[3] * ksrc_transposed[31];
 801dfd4:	ed93 7a03 	vldr	s14, [r3, #12]
 801dfd8:	edd2 6a1f 	vldr	s13, [r2, #124]	@ 0x7c
 801dfdc:	ee27 7a26 	vmul.f32	s14, s14, s13
 801dfe0:	ee77 7a87 	vadd.f32	s15, s15, s14
 801dfe4:	edc0 7a00 	vstr	s15, [r0]
    *sum_0 += two_column_buffer[4] * ksrc_transposed[32];
 801dfe8:	ed93 7a04 	vldr	s14, [r3, #16]
 801dfec:	edd2 6a20 	vldr	s13, [r2, #128]	@ 0x80
 801dff0:	ee27 7a26 	vmul.f32	s14, s14, s13
 801dff4:	ee77 7a87 	vadd.f32	s15, s15, s14
 801dff8:	edc0 7a00 	vstr	s15, [r0]
    *sum_0 += two_column_buffer[5] * ksrc_transposed[33];
 801dffc:	ed93 7a05 	vldr	s14, [r3, #20]
 801e000:	edd2 6a21 	vldr	s13, [r2, #132]	@ 0x84
 801e004:	ee27 7a26 	vmul.f32	s14, s14, s13
 801e008:	ee77 7a87 	vadd.f32	s15, s15, s14
 801e00c:	edc0 7a00 	vstr	s15, [r0]
    *sum_0 += two_column_buffer[6] * ksrc_transposed[34];
 801e010:	ed93 7a06 	vldr	s14, [r3, #24]
 801e014:	edd2 6a22 	vldr	s13, [r2, #136]	@ 0x88
 801e018:	ee27 7a26 	vmul.f32	s14, s14, s13
 801e01c:	ee77 7a87 	vadd.f32	s15, s15, s14
 801e020:	edc0 7a00 	vstr	s15, [r0]
    two_column_buffer += (input_width - 1) * STRIDE + 1 + IN_PAD * 2 + OUT_PAD;
 801e024:	eb03 038c 	add.w	r3, r3, ip, lsl #2
    *sum_0 += two_column_buffer[0] * ksrc_transposed[35];
 801e028:	ed93 7a00 	vldr	s14, [r3]
 801e02c:	edd2 6a23 	vldr	s13, [r2, #140]	@ 0x8c
 801e030:	ee27 7a26 	vmul.f32	s14, s14, s13
 801e034:	ee77 7a87 	vadd.f32	s15, s15, s14
 801e038:	edc0 7a00 	vstr	s15, [r0]
    *sum_0 += two_column_buffer[1] * ksrc_transposed[36];
 801e03c:	ed93 7a01 	vldr	s14, [r3, #4]
 801e040:	edd2 6a24 	vldr	s13, [r2, #144]	@ 0x90
 801e044:	ee27 7a26 	vmul.f32	s14, s14, s13
 801e048:	ee77 7a87 	vadd.f32	s15, s15, s14
 801e04c:	edc0 7a00 	vstr	s15, [r0]
    *sum_0 += two_column_buffer[2] * ksrc_transposed[37];
 801e050:	ed93 7a02 	vldr	s14, [r3, #8]
 801e054:	edd2 6a25 	vldr	s13, [r2, #148]	@ 0x94
 801e058:	ee27 7a26 	vmul.f32	s14, s14, s13
 801e05c:	ee77 7a87 	vadd.f32	s15, s15, s14
 801e060:	edc0 7a00 	vstr	s15, [r0]
    *sum_0 += two_column_buffer[3] * ksrc_transposed[38];
 801e064:	ed93 7a03 	vldr	s14, [r3, #12]
 801e068:	edd2 6a26 	vldr	s13, [r2, #152]	@ 0x98
 801e06c:	ee27 7a26 	vmul.f32	s14, s14, s13
 801e070:	ee77 7a87 	vadd.f32	s15, s15, s14
 801e074:	edc0 7a00 	vstr	s15, [r0]
    *sum_0 += two_column_buffer[4] * ksrc_transposed[39];
 801e078:	ed93 7a04 	vldr	s14, [r3, #16]
 801e07c:	edd2 6a27 	vldr	s13, [r2, #156]	@ 0x9c
 801e080:	ee27 7a26 	vmul.f32	s14, s14, s13
 801e084:	ee77 7a87 	vadd.f32	s15, s15, s14
 801e088:	edc0 7a00 	vstr	s15, [r0]
    *sum_0 += two_column_buffer[5] * ksrc_transposed[40];
 801e08c:	ed93 7a05 	vldr	s14, [r3, #20]
 801e090:	edd2 6a28 	vldr	s13, [r2, #160]	@ 0xa0
 801e094:	ee27 7a26 	vmul.f32	s14, s14, s13
 801e098:	ee77 7a87 	vadd.f32	s15, s15, s14
 801e09c:	edc0 7a00 	vstr	s15, [r0]
    *sum_0 += two_column_buffer[6] * ksrc_transposed[41];
 801e0a0:	ed93 7a06 	vldr	s14, [r3, #24]
 801e0a4:	edd2 6a29 	vldr	s13, [r2, #164]	@ 0xa4
 801e0a8:	ee27 7a26 	vmul.f32	s14, s14, s13
 801e0ac:	ee77 7a87 	vadd.f32	s15, s15, s14
 801e0b0:	edc0 7a00 	vstr	s15, [r0]
    two_column_buffer += (input_width - 1) * STRIDE + 1 + IN_PAD * 2 + OUT_PAD;
 801e0b4:	eb03 038c 	add.w	r3, r3, ip, lsl #2
    *sum_0 += two_column_buffer[0] * ksrc_transposed[42];
 801e0b8:	ed93 7a00 	vldr	s14, [r3]
 801e0bc:	edd2 6a2a 	vldr	s13, [r2, #168]	@ 0xa8
 801e0c0:	ee27 7a26 	vmul.f32	s14, s14, s13
 801e0c4:	ee77 7a87 	vadd.f32	s15, s15, s14
 801e0c8:	edc0 7a00 	vstr	s15, [r0]
    *sum_0 += two_column_buffer[1] * ksrc_transposed[43];
 801e0cc:	ed93 7a01 	vldr	s14, [r3, #4]
 801e0d0:	edd2 6a2b 	vldr	s13, [r2, #172]	@ 0xac
 801e0d4:	ee27 7a26 	vmul.f32	s14, s14, s13
 801e0d8:	ee77 7a87 	vadd.f32	s15, s15, s14
 801e0dc:	edc0 7a00 	vstr	s15, [r0]
    *sum_0 += two_column_buffer[2] * ksrc_transposed[44];
 801e0e0:	ed93 7a02 	vldr	s14, [r3, #8]
 801e0e4:	edd2 6a2c 	vldr	s13, [r2, #176]	@ 0xb0
 801e0e8:	ee27 7a26 	vmul.f32	s14, s14, s13
 801e0ec:	ee77 7a87 	vadd.f32	s15, s15, s14
 801e0f0:	edc0 7a00 	vstr	s15, [r0]
    *sum_0 += two_column_buffer[3] * ksrc_transposed[45];
 801e0f4:	ed93 7a03 	vldr	s14, [r3, #12]
 801e0f8:	edd2 6a2d 	vldr	s13, [r2, #180]	@ 0xb4
 801e0fc:	ee27 7a26 	vmul.f32	s14, s14, s13
 801e100:	ee77 7a87 	vadd.f32	s15, s15, s14
 801e104:	edc0 7a00 	vstr	s15, [r0]
    *sum_0 += two_column_buffer[4] * ksrc_transposed[46];
 801e108:	ed93 7a04 	vldr	s14, [r3, #16]
 801e10c:	edd2 6a2e 	vldr	s13, [r2, #184]	@ 0xb8
 801e110:	ee27 7a26 	vmul.f32	s14, s14, s13
 801e114:	ee77 7a87 	vadd.f32	s15, s15, s14
 801e118:	edc0 7a00 	vstr	s15, [r0]
    *sum_0 += two_column_buffer[5] * ksrc_transposed[47];
 801e11c:	ed93 7a05 	vldr	s14, [r3, #20]
 801e120:	edd2 6a2f 	vldr	s13, [r2, #188]	@ 0xbc
 801e124:	ee27 7a26 	vmul.f32	s14, s14, s13
 801e128:	ee77 7a87 	vadd.f32	s15, s15, s14
 801e12c:	edc0 7a00 	vstr	s15, [r0]
    *sum_0 += two_column_buffer[6] * ksrc_transposed[48];
 801e130:	ed93 7a06 	vldr	s14, [r3, #24]
 801e134:	edd2 6a30 	vldr	s13, [r2, #192]	@ 0xc0
 801e138:	ee27 7a26 	vmul.f32	s14, s14, s13
 801e13c:	ee77 7a87 	vadd.f32	s15, s15, s14
 801e140:	edc0 7a00 	vstr	s15, [r0]
}
 801e144:	4770      	bx	lr

0801e146 <transpose_depthwise_conv_fp_kernel7_stride2_inpad3_outpad1_IOHW_int8weight>:
tinyengine_status_fp transpose_depthwise_conv_fp_kernel7_stride2_inpad3_outpad1_IOHW_int8weight(float* input_data, 
                 const uint16_t input_height, const uint16_t input_width, const uint16_t input_depth, 
                 const int8_t* filter_data, const float* bias_data, 
                 float* output_data, const uint16_t output_height, const uint16_t output_width, const uint16_t output_depth, 
                 const float output_activation_min, const float output_activation_max,
                 float* im2col_data, const uint16_t batches, const int pad_value) {
 801e146:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e14a:	ed2d 8b02 	vpush	{d8}
 801e14e:	b0bf      	sub	sp, #252	@ 0xfc
 801e150:	9004      	str	r0, [sp, #16]
 801e152:	4608      	mov	r0, r1
 801e154:	4617      	mov	r7, r2
 801e156:	4619      	mov	r1, r3
 801e158:	9b4a      	ldr	r3, [sp, #296]	@ 0x128
 801e15a:	f8dd 9130 	ldr.w	r9, [sp, #304]	@ 0x130
 801e15e:	f8bd b134 	ldrh.w	fp, [sp, #308]	@ 0x134
 801e162:	f8bd 8138 	ldrh.w	r8, [sp, #312]	@ 0x138
 801e166:	f8bd 613c 	ldrh.w	r6, [sp, #316]	@ 0x13c
 801e16a:	eeb0 8a40 	vmov.f32	s16, s0
 801e16e:	eef0 8a60 	vmov.f32	s17, s1
 801e172:	ed9d 7a52 	vldr	s14, [sp, #328]	@ 0x148
  float* two_column_buffer = im2col_data;
 801e176:	9a50      	ldr	r2, [sp, #320]	@ 0x140
  int i, j, c;

  /* Setup the padding regions for the buffer */
  // Top region
  for (i = 0; i < input_width * 2 + 6; i++) {
 801e178:	2500      	movs	r5, #0
 801e17a:	e009      	b.n	801e190 <transpose_depthwise_conv_fp_kernel7_stride2_inpad3_outpad1_IOHW_int8weight+0x4a>
    *two_column_buffer++ = pad_value;
 801e17c:	eef8 7ac7 	vcvt.f32.s32	s15, s14
 801e180:	edc2 7a00 	vstr	s15, [r2]
    *two_column_buffer++ = pad_value;
 801e184:	edc2 7a01 	vstr	s15, [r2, #4]
    *two_column_buffer++ = pad_value;
 801e188:	edc2 7a02 	vstr	s15, [r2, #8]
  for (i = 0; i < input_width * 2 + 6; i++) {
 801e18c:	3501      	adds	r5, #1
    *two_column_buffer++ = pad_value;
 801e18e:	320c      	adds	r2, #12
  for (i = 0; i < input_width * 2 + 6; i++) {
 801e190:	1cfc      	adds	r4, r7, #3
 801e192:	ea4f 0c44 	mov.w	ip, r4, lsl #1
 801e196:	ebb5 0f44 	cmp.w	r5, r4, lsl #1
 801e19a:	dbef      	blt.n	801e17c <transpose_depthwise_conv_fp_kernel7_stride2_inpad3_outpad1_IOHW_int8weight+0x36>
  }
  // Middle regions: Pad the size of (input_height * 2) * (input_width * 2 + 2)
  for (i = 0; i < input_height; i++) {
 801e19c:	f04f 0e00 	mov.w	lr, #0
 801e1a0:	e019      	b.n	801e1d6 <transpose_depthwise_conv_fp_kernel7_stride2_inpad3_outpad1_IOHW_int8weight+0x90>
    // First type of middle
    *two_column_buffer++ = pad_value;
    *two_column_buffer++ = pad_value;
    for (j = 0; j < input_width; j++) {
      *two_column_buffer = pad_value;
 801e1a2:	46aa      	mov	sl, r5
 801e1a4:	3508      	adds	r5, #8
 801e1a6:	edca 7a00 	vstr	s15, [sl]
    for (j = 0; j < input_width; j++) {
 801e1aa:	3201      	adds	r2, #1
 801e1ac:	4297      	cmp	r7, r2
 801e1ae:	dcf8      	bgt.n	801e1a2 <transpose_depthwise_conv_fp_kernel7_stride2_inpad3_outpad1_IOHW_int8weight+0x5c>
      two_column_buffer += 2;
    }
    *two_column_buffer++ = pad_value;
 801e1b0:	edc5 7a00 	vstr	s15, [r5]
    *two_column_buffer++ = pad_value;
 801e1b4:	edc5 7a01 	vstr	s15, [r5, #4]
    *two_column_buffer++ = pad_value;
 801e1b8:	edc5 7a02 	vstr	s15, [r5, #8]
    *two_column_buffer++ = pad_value;
 801e1bc:	f105 0210 	add.w	r2, r5, #16
 801e1c0:	edc5 7a03 	vstr	s15, [r5, #12]

    // Second type of middle
    for (j = 0; j < input_width * 2 + 6; j++) {
 801e1c4:	2500      	movs	r5, #0
 801e1c6:	e002      	b.n	801e1ce <transpose_depthwise_conv_fp_kernel7_stride2_inpad3_outpad1_IOHW_int8weight+0x88>
      *two_column_buffer++ = pad_value;
 801e1c8:	ece2 7a01 	vstmia	r2!, {s15}
    for (j = 0; j < input_width * 2 + 6; j++) {
 801e1cc:	3501      	adds	r5, #1
 801e1ce:	45ac      	cmp	ip, r5
 801e1d0:	dcfa      	bgt.n	801e1c8 <transpose_depthwise_conv_fp_kernel7_stride2_inpad3_outpad1_IOHW_int8weight+0x82>
  for (i = 0; i < input_height; i++) {
 801e1d2:	f10e 0e01 	add.w	lr, lr, #1
 801e1d6:	4570      	cmp	r0, lr
 801e1d8:	dd09      	ble.n	801e1ee <transpose_depthwise_conv_fp_kernel7_stride2_inpad3_outpad1_IOHW_int8weight+0xa8>
    *two_column_buffer++ = pad_value;
 801e1da:	eef8 7ac7 	vcvt.f32.s32	s15, s14
 801e1de:	4615      	mov	r5, r2
 801e1e0:	3508      	adds	r5, #8
 801e1e2:	edc2 7a00 	vstr	s15, [r2]
    *two_column_buffer++ = pad_value;
 801e1e6:	edc2 7a01 	vstr	s15, [r2, #4]
    for (j = 0; j < input_width; j++) {
 801e1ea:	2200      	movs	r2, #0
 801e1ec:	e7de      	b.n	801e1ac <transpose_depthwise_conv_fp_kernel7_stride2_inpad3_outpad1_IOHW_int8weight+0x66>
    }
  }
  // Bottom region
  for (i = 0; i < input_width * 2 + 6; i++) {
 801e1ee:	2500      	movs	r5, #0
 801e1f0:	e009      	b.n	801e206 <transpose_depthwise_conv_fp_kernel7_stride2_inpad3_outpad1_IOHW_int8weight+0xc0>
    *two_column_buffer++ = pad_value;
 801e1f2:	eef8 7ac7 	vcvt.f32.s32	s15, s14
 801e1f6:	edc2 7a00 	vstr	s15, [r2]
    *two_column_buffer++ = pad_value;
 801e1fa:	edc2 7a01 	vstr	s15, [r2, #4]
    *two_column_buffer++ = pad_value;
 801e1fe:	edc2 7a02 	vstr	s15, [r2, #8]
  for (i = 0; i < input_width * 2 + 6; i++) {
 801e202:	3501      	adds	r5, #1
    *two_column_buffer++ = pad_value;
 801e204:	320c      	adds	r2, #12
  for (i = 0; i < input_width * 2 + 6; i++) {
 801e206:	45ac      	cmp	ip, r5
 801e208:	dcf3      	bgt.n	801e1f2 <transpose_depthwise_conv_fp_kernel7_stride2_inpad3_outpad1_IOHW_int8weight+0xac>
  /* Setup the input_data regions for HWC->CHW buffers */
  const float* src;
  const int8_t* ksrc;
  float ksrc_transposed[49];

  for (c = 0; c < input_depth; c++) {
 801e20a:	f04f 0c00 	mov.w	ip, #0
 801e20e:	4625      	mov	r5, r4
 801e210:	e0be      	b.n	801e390 <transpose_depthwise_conv_fp_kernel7_stride2_inpad3_outpad1_IOHW_int8weight+0x24a>
    // Place input data into two_column_buffer
    for (i = 0; i < input_height; i++) {
      two_column_buffer += 3;

      for (j = 0; j < input_width; j++) {
        *two_column_buffer = *src;
 801e212:	edd4 7a00 	vldr	s15, [r4]
 801e216:	4673      	mov	r3, lr
 801e218:	f10e 0e08 	add.w	lr, lr, #8
 801e21c:	edc3 7a00 	vstr	s15, [r3]
        two_column_buffer += 2;
        src += input_depth;
 801e220:	eb04 0481 	add.w	r4, r4, r1, lsl #2
      for (j = 0; j < input_width; j++) {
 801e224:	3201      	adds	r2, #1
 801e226:	4297      	cmp	r7, r2
 801e228:	dcf3      	bgt.n	801e212 <transpose_depthwise_conv_fp_kernel7_stride2_inpad3_outpad1_IOHW_int8weight+0xcc>
      }

      two_column_buffer += input_width * 2 + 9;
 801e22a:	9b4a      	ldr	r3, [sp, #296]	@ 0x128
 801e22c:	00fa      	lsls	r2, r7, #3
 801e22e:	3224      	adds	r2, #36	@ 0x24
 801e230:	4496      	add	lr, r2
    for (i = 0; i < input_height; i++) {
 801e232:	f10a 0a01 	add.w	sl, sl, #1
 801e236:	4550      	cmp	r0, sl
 801e238:	dd04      	ble.n	801e244 <transpose_depthwise_conv_fp_kernel7_stride2_inpad3_outpad1_IOHW_int8weight+0xfe>
      two_column_buffer += 3;
 801e23a:	f10e 0e0c 	add.w	lr, lr, #12
      for (j = 0; j < input_width; j++) {
 801e23e:	2200      	movs	r2, #0
 801e240:	934a      	str	r3, [sp, #296]	@ 0x128
 801e242:	e7f0      	b.n	801e226 <transpose_depthwise_conv_fp_kernel7_stride2_inpad3_outpad1_IOHW_int8weight+0xe0>
    }

    // Transpose filter data
    ksrc = filter_data++;
 801e244:	1c5a      	adds	r2, r3, #1
 801e246:	9205      	str	r2, [sp, #20]
    for (i = 0; i < DIM_KER_Y * DIM_KER_X; i++) {
 801e248:	2200      	movs	r2, #0
 801e24a:	e00f      	b.n	801e26c <transpose_depthwise_conv_fp_kernel7_stride2_inpad3_outpad1_IOHW_int8weight+0x126>
      ksrc_transposed[48 - i] = (float)*ksrc;
 801e24c:	f993 4000 	ldrsb.w	r4, [r3]
 801e250:	ee07 4a90 	vmov	s15, r4
 801e254:	f1c2 0430 	rsb	r4, r2, #48	@ 0x30
 801e258:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801e25c:	f10d 0ef8 	add.w	lr, sp, #248	@ 0xf8
 801e260:	eb0e 0484 	add.w	r4, lr, r4, lsl #2
 801e264:	ed44 7a31 	vstr	s15, [r4, #-196]	@ 0xffffff3c
      ksrc += input_depth;
 801e268:	440b      	add	r3, r1
    for (i = 0; i < DIM_KER_Y * DIM_KER_X; i++) {
 801e26a:	3201      	adds	r2, #1
 801e26c:	2a30      	cmp	r2, #48	@ 0x30
 801e26e:	d9ed      	bls.n	801e24c <transpose_depthwise_conv_fp_kernel7_stride2_inpad3_outpad1_IOHW_int8weight+0x106>
    }

    float* out = output_data;
    float* two_column_buffer_start = im2col_data;
 801e270:	f8dd a140 	ldr.w	sl, [sp, #320]	@ 0x140

    /* MAC Computation */
    for (i = 0; i < output_height; i++) {
 801e274:	2400      	movs	r4, #0
 801e276:	9506      	str	r5, [sp, #24]
 801e278:	f8cd c01c 	str.w	ip, [sp, #28]
 801e27c:	9008      	str	r0, [sp, #32]
 801e27e:	9109      	str	r1, [sp, #36]	@ 0x24
 801e280:	e04b      	b.n	801e31a <transpose_depthwise_conv_fp_kernel7_stride2_inpad3_outpad1_IOHW_int8weight+0x1d4>
        // We assume bias_data as zeros.
        float sum_0 = 0.0f;
        float sum_1 = 0.0f;
        transpose_depthwise_mac_kernel7_2row_fp_uniweight(&sum_0, &sum_1, two_column_buffer, ksrc_transposed, input_width, STRIDE, IN_PAD, OUT_PAD);
        out[(i * output_width + j) * output_depth] = TN_MIN(TN_MAX(sum_0, output_activation_min), output_activation_max);
        out[(i * output_width + j + 1) * output_depth] = TN_MIN(TN_MAX(sum_1, output_activation_min), output_activation_max);
 801e282:	fb03 6306 	mla	r3, r3, r6, r6
 801e286:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 801e28a:	edc3 7a00 	vstr	s15, [r3]

        two_column_buffer_start += 2;
 801e28e:	f10a 0a08 	add.w	sl, sl, #8
      for (j = 0; j < output_width - 1; j+=2) {
 801e292:	3502      	adds	r5, #2
 801e294:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 801e298:	42ab      	cmp	r3, r5
 801e29a:	dd38      	ble.n	801e30e <transpose_depthwise_conv_fp_kernel7_stride2_inpad3_outpad1_IOHW_int8weight+0x1c8>
        float sum_0 = 0.0f;
 801e29c:	2300      	movs	r3, #0
 801e29e:	930b      	str	r3, [sp, #44]	@ 0x2c
        float sum_1 = 0.0f;
 801e2a0:	930c      	str	r3, [sp, #48]	@ 0x30
        transpose_depthwise_mac_kernel7_2row_fp_uniweight(&sum_0, &sum_1, two_column_buffer, ksrc_transposed, input_width, STRIDE, IN_PAD, OUT_PAD);
 801e2a2:	2301      	movs	r3, #1
 801e2a4:	9303      	str	r3, [sp, #12]
 801e2a6:	2303      	movs	r3, #3
 801e2a8:	9302      	str	r3, [sp, #8]
 801e2aa:	2302      	movs	r3, #2
 801e2ac:	9301      	str	r3, [sp, #4]
 801e2ae:	9700      	str	r7, [sp, #0]
 801e2b0:	ab0d      	add	r3, sp, #52	@ 0x34
 801e2b2:	4652      	mov	r2, sl
 801e2b4:	a90c      	add	r1, sp, #48	@ 0x30
 801e2b6:	a80b      	add	r0, sp, #44	@ 0x2c
 801e2b8:	f7ff f886 	bl	801d3c8 <transpose_depthwise_mac_kernel7_2row_fp_uniweight>
        out[(i * output_width + j) * output_depth] = TN_MIN(TN_MAX(sum_0, output_activation_min), output_activation_max);
 801e2bc:	eddd 7a0b 	vldr	s15, [sp, #44]	@ 0x2c
 801e2c0:	eef4 7ac8 	vcmpe.f32	s15, s16
 801e2c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e2c8:	dc01      	bgt.n	801e2ce <transpose_depthwise_conv_fp_kernel7_stride2_inpad3_outpad1_IOHW_int8weight+0x188>
 801e2ca:	eef0 7a48 	vmov.f32	s15, s16
 801e2ce:	eef4 7ae8 	vcmpe.f32	s15, s17
 801e2d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e2d6:	d401      	bmi.n	801e2dc <transpose_depthwise_conv_fp_kernel7_stride2_inpad3_outpad1_IOHW_int8weight+0x196>
 801e2d8:	eef0 7a68 	vmov.f32	s15, s17
 801e2dc:	fb04 5308 	mla	r3, r4, r8, r5
 801e2e0:	fb06 f203 	mul.w	r2, r6, r3
 801e2e4:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 801e2e8:	edc2 7a00 	vstr	s15, [r2]
        out[(i * output_width + j + 1) * output_depth] = TN_MIN(TN_MAX(sum_1, output_activation_min), output_activation_max);
 801e2ec:	eddd 7a0c 	vldr	s15, [sp, #48]	@ 0x30
 801e2f0:	eef4 7ac8 	vcmpe.f32	s15, s16
 801e2f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e2f8:	dc01      	bgt.n	801e2fe <transpose_depthwise_conv_fp_kernel7_stride2_inpad3_outpad1_IOHW_int8weight+0x1b8>
 801e2fa:	eef0 7a48 	vmov.f32	s15, s16
 801e2fe:	eef4 7ae8 	vcmpe.f32	s15, s17
 801e302:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e306:	d4bc      	bmi.n	801e282 <transpose_depthwise_conv_fp_kernel7_stride2_inpad3_outpad1_IOHW_int8weight+0x13c>
 801e308:	eef0 7a68 	vmov.f32	s15, s17
 801e30c:	e7b9      	b.n	801e282 <transpose_depthwise_conv_fp_kernel7_stride2_inpad3_outpad1_IOHW_int8weight+0x13c>
      }

      /* left-over because odd number of output pixels */
      if (output_width & 0x1) {
 801e30e:	f018 0f01 	tst.w	r8, #1
 801e312:	d106      	bne.n	801e322 <transpose_depthwise_conv_fp_kernel7_stride2_inpad3_outpad1_IOHW_int8weight+0x1dc>

        two_column_buffer_start++;
      }
      /* End of MAC Computation */

      two_column_buffer_start += 6;
 801e314:	f10a 0a18 	add.w	sl, sl, #24
    for (i = 0; i < output_height; i++) {
 801e318:	3401      	adds	r4, #1
 801e31a:	45a3      	cmp	fp, r4
 801e31c:	dd2b      	ble.n	801e376 <transpose_depthwise_conv_fp_kernel7_stride2_inpad3_outpad1_IOHW_int8weight+0x230>
      for (j = 0; j < output_width - 1; j+=2) {
 801e31e:	2500      	movs	r5, #0
 801e320:	e7b8      	b.n	801e294 <transpose_depthwise_conv_fp_kernel7_stride2_inpad3_outpad1_IOHW_int8weight+0x14e>
        float sum_0 = 0.0f;
 801e322:	2300      	movs	r3, #0
 801e324:	930c      	str	r3, [sp, #48]	@ 0x30
        transpose_depthwise_mac_kernel7_1row_fp_uniweight(&sum_0, two_column_buffer, ksrc_transposed, input_width, STRIDE, IN_PAD, OUT_PAD);
 801e326:	2301      	movs	r3, #1
 801e328:	9302      	str	r3, [sp, #8]
 801e32a:	2303      	movs	r3, #3
 801e32c:	9301      	str	r3, [sp, #4]
 801e32e:	2302      	movs	r3, #2
 801e330:	9300      	str	r3, [sp, #0]
 801e332:	463b      	mov	r3, r7
 801e334:	aa0d      	add	r2, sp, #52	@ 0x34
 801e336:	4651      	mov	r1, sl
 801e338:	a80c      	add	r0, sp, #48	@ 0x30
 801e33a:	f7ff fcfd 	bl	801dd38 <transpose_depthwise_mac_kernel7_1row_fp_uniweight>
        out[(i * output_width + output_width - 1) * output_depth] = TN_MIN(TN_MAX(sum_0, output_activation_min), output_activation_max);
 801e33e:	eddd 7a0c 	vldr	s15, [sp, #48]	@ 0x30
 801e342:	eef4 7ac8 	vcmpe.f32	s15, s16
 801e346:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e34a:	dc01      	bgt.n	801e350 <transpose_depthwise_conv_fp_kernel7_stride2_inpad3_outpad1_IOHW_int8weight+0x20a>
 801e34c:	eef0 7a48 	vmov.f32	s15, s16
 801e350:	eef4 7ae8 	vcmpe.f32	s15, s17
 801e354:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e358:	d401      	bmi.n	801e35e <transpose_depthwise_conv_fp_kernel7_stride2_inpad3_outpad1_IOHW_int8weight+0x218>
 801e35a:	eef0 7a68 	vmov.f32	s15, s17
 801e35e:	fb04 8308 	mla	r3, r4, r8, r8
 801e362:	3b01      	subs	r3, #1
 801e364:	fb06 f303 	mul.w	r3, r6, r3
 801e368:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 801e36c:	edc3 7a00 	vstr	s15, [r3]
        two_column_buffer_start++;
 801e370:	f10a 0a04 	add.w	sl, sl, #4
 801e374:	e7ce      	b.n	801e314 <transpose_depthwise_conv_fp_kernel7_stride2_inpad3_outpad1_IOHW_int8weight+0x1ce>
    }

    bias_data++;
    input_data++;
 801e376:	9d06      	ldr	r5, [sp, #24]
 801e378:	f8dd c01c 	ldr.w	ip, [sp, #28]
 801e37c:	9808      	ldr	r0, [sp, #32]
 801e37e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801e380:	9b04      	ldr	r3, [sp, #16]
 801e382:	3304      	adds	r3, #4
 801e384:	9304      	str	r3, [sp, #16]
    output_data++;
 801e386:	f109 0904 	add.w	r9, r9, #4
  for (c = 0; c < input_depth; c++) {
 801e38a:	f10c 0c01 	add.w	ip, ip, #1
    ksrc = filter_data++;
 801e38e:	9b05      	ldr	r3, [sp, #20]
  for (c = 0; c < input_depth; c++) {
 801e390:	4561      	cmp	r1, ip
 801e392:	dd08      	ble.n	801e3a6 <transpose_depthwise_conv_fp_kernel7_stride2_inpad3_outpad1_IOHW_int8weight+0x260>
    two_column_buffer = im2col_data + (input_width * 2 + 6) * 3;
 801e394:	eb05 0e45 	add.w	lr, r5, r5, lsl #1
 801e398:	9a50      	ldr	r2, [sp, #320]	@ 0x140
 801e39a:	eb02 0ece 	add.w	lr, r2, lr, lsl #3
    src = input_data;
 801e39e:	9c04      	ldr	r4, [sp, #16]
    for (i = 0; i < input_height; i++) {
 801e3a0:	f04f 0a00 	mov.w	sl, #0
 801e3a4:	e747      	b.n	801e236 <transpose_depthwise_conv_fp_kernel7_stride2_inpad3_outpad1_IOHW_int8weight+0xf0>
  }
  
  /* Return to application */
  return STATE_SUCCESS_fp;
} 
 801e3a6:	2000      	movs	r0, #0
 801e3a8:	b03f      	add	sp, #252	@ 0xfc
 801e3aa:	ecbd 8b02 	vpop	{d8}
 801e3ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e3b2 <tte_exp>:
 * Target ISA:  ARMv7E-M
 * -------------------------------------------------------------------- */

#include "tinyengine_function_fp.h"

tinyengine_status_fp tte_exp(const uint16_t size, const float* input_data, float* output_data) {
 801e3b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e3b6:	4606      	mov	r6, r0
 801e3b8:	4688      	mov	r8, r1
 801e3ba:	4617      	mov	r7, r2
  int i;
  
  for (i = 0; i < size; ++i) {
 801e3bc:	2400      	movs	r4, #0
 801e3be:	e010      	b.n	801e3e2 <tte_exp+0x30>
    output_data[i] = exp(input_data[i]);
 801e3c0:	00a5      	lsls	r5, r4, #2
 801e3c2:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 801e3c6:	6818      	ldr	r0, [r3, #0]
 801e3c8:	f7e8 f8d6 	bl	8006578 <__aeabi_f2d>
 801e3cc:	ec41 0b10 	vmov	d0, r0, r1
 801e3d0:	f004 f86e 	bl	80224b0 <exp>
 801e3d4:	ec51 0b10 	vmov	r0, r1, d0
 801e3d8:	443d      	add	r5, r7
 801e3da:	f7e8 fbfd 	bl	8006bd8 <__aeabi_d2f>
 801e3de:	6028      	str	r0, [r5, #0]
  for (i = 0; i < size; ++i) {
 801e3e0:	3401      	adds	r4, #1
 801e3e2:	42a6      	cmp	r6, r4
 801e3e4:	dcec      	bgt.n	801e3c0 <tte_exp+0xe>
  }
  
  /* Return to application */
  return STATE_SUCCESS_fp;
}
 801e3e6:	2000      	movs	r0, #0
 801e3e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801e3ec <where_zeros_inplace_bit>:
}

tinyengine_status_fp where_zeros_inplace_bit(const unsigned char* inMask, const uint16_t size, float* input1_data) {
  int i;

  for (i = 0; i < size; ++i) {
 801e3ec:	2300      	movs	r3, #0
 801e3ee:	4299      	cmp	r1, r3
 801e3f0:	dd23      	ble.n	801e43a <where_zeros_inplace_bit+0x4e>
tinyengine_status_fp where_zeros_inplace_bit(const unsigned char* inMask, const uint16_t size, float* input1_data) {
 801e3f2:	b500      	push	{lr}
 801e3f4:	e00b      	b.n	801e40e <where_zeros_inplace_bit+0x22>
	  int bit_starting_idx = i % 8;
	  int mask = BIT_CHECK(inMask[i/8], bit_starting_idx);
 801e3f6:	f103 0c07 	add.w	ip, r3, #7
 801e3fa:	e00b      	b.n	801e414 <where_zeros_inplace_bit+0x28>
	  input1_data[i] = mask > 0 ? input1_data[i] : 0;
 801e3fc:	f04f 0e00 	mov.w	lr, #0
 801e400:	eb02 0c83 	add.w	ip, r2, r3, lsl #2
 801e404:	f8cc e000 	str.w	lr, [ip]
  for (i = 0; i < size; ++i) {
 801e408:	3301      	adds	r3, #1
 801e40a:	4299      	cmp	r1, r3
 801e40c:	dd12      	ble.n	801e434 <where_zeros_inplace_bit+0x48>
	  int mask = BIT_CHECK(inMask[i/8], bit_starting_idx);
 801e40e:	469c      	mov	ip, r3
 801e410:	2b00      	cmp	r3, #0
 801e412:	dbf0      	blt.n	801e3f6 <where_zeros_inplace_bit+0xa>
 801e414:	ea4f 0cec 	mov.w	ip, ip, asr #3
 801e418:	f810 c00c 	ldrb.w	ip, [r0, ip]
 801e41c:	f003 0e07 	and.w	lr, r3, #7
 801e420:	fa2c fc0e 	lsr.w	ip, ip, lr
	  input1_data[i] = mask > 0 ? input1_data[i] : 0;
 801e424:	f01c 0f01 	tst.w	ip, #1
 801e428:	d0e8      	beq.n	801e3fc <where_zeros_inplace_bit+0x10>
 801e42a:	eb02 0c83 	add.w	ip, r2, r3, lsl #2
 801e42e:	f8dc e000 	ldr.w	lr, [ip]
 801e432:	e7e5      	b.n	801e400 <where_zeros_inplace_bit+0x14>
  }
  
  /* Return to application */
  return STATE_SUCCESS_fp;
}
 801e434:	2000      	movs	r0, #0
 801e436:	f85d fb04 	ldr.w	pc, [sp], #4
 801e43a:	2000      	movs	r0, #0
 801e43c:	4770      	bx	lr

0801e43e <add_fpreq>:
#include "arm_math.h"
#include "tinyengine_function.h"

tinyengine_status add_fpreq(int size, const int8_t* input1_data, const float input1_scale, const float input1_zero,
			const int8_t* input2_data, const float input2_scale, const float input2_zero, const float output_scale,
			const float zero_y, int8_t* output_data) {
 801e43e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e442:	ed2d 8b06 	vpush	{d8-d10}
 801e446:	4607      	mov	r7, r0
 801e448:	460d      	mov	r5, r1
 801e44a:	eef0 aa40 	vmov.f32	s21, s0
 801e44e:	eeb0 aa60 	vmov.f32	s20, s1
 801e452:	4614      	mov	r4, r2
 801e454:	eef0 9a41 	vmov.f32	s19, s2
 801e458:	eeb0 9a61 	vmov.f32	s18, s3
 801e45c:	eef0 8a42 	vmov.f32	s17, s4
 801e460:	eeb0 8a62 	vmov.f32	s16, s5
 801e464:	4698      	mov	r8, r3
  for (int i = 0; i < size; ++i) {
 801e466:	2600      	movs	r6, #0
 801e468:	e030      	b.n	801e4cc <add_fpreq+0x8e>
	  float input1_fp = ((float)*input1_data++ - input1_zero) * input1_scale;
 801e46a:	f915 3b01 	ldrsb.w	r3, [r5], #1
 801e46e:	ee07 3a90 	vmov	s15, r3
 801e472:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801e476:	ee77 7aca 	vsub.f32	s15, s15, s20
 801e47a:	ee67 7aaa 	vmul.f32	s15, s15, s21
	  float input2_fp = ((float)*input2_data++ - input2_zero) * input2_scale;
 801e47e:	f914 3b01 	ldrsb.w	r3, [r4], #1
 801e482:	ee07 3a10 	vmov	s14, r3
 801e486:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801e48a:	ee37 7a49 	vsub.f32	s14, s14, s18
 801e48e:	ee27 7a29 	vmul.f32	s14, s14, s19
      int clamped_output = (int)round((input1_fp + input2_fp) / output_scale + zero_y); // to align with tvm implementation
 801e492:	ee77 7a87 	vadd.f32	s15, s15, s14
 801e496:	ee87 7aa8 	vdiv.f32	s14, s15, s17
 801e49a:	ee77 7a08 	vadd.f32	s15, s14, s16
 801e49e:	ee17 0a90 	vmov	r0, s15
 801e4a2:	f7e8 f869 	bl	8006578 <__aeabi_f2d>
 801e4a6:	ec41 0b10 	vmov	d0, r0, r1
 801e4aa:	f004 fa0f 	bl	80228cc <round>
 801e4ae:	ec51 0b10 	vmov	r0, r1, d0
 801e4b2:	f7e8 fb69 	bl	8006b88 <__aeabi_d2iz>
      clamped_output = TN_MAX(clamped_output, -128);
 801e4b6:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 801e4ba:	4298      	cmp	r0, r3
 801e4bc:	bfb8      	it	lt
 801e4be:	4618      	movlt	r0, r3
      clamped_output = TN_MIN(clamped_output, 127);
 801e4c0:	287f      	cmp	r0, #127	@ 0x7f
 801e4c2:	bfa8      	it	ge
 801e4c4:	207f      	movge	r0, #127	@ 0x7f
      output_data[i] = (int8_t)(clamped_output);
 801e4c6:	f808 0006 	strb.w	r0, [r8, r6]
  for (int i = 0; i < size; ++i) {
 801e4ca:	3601      	adds	r6, #1
 801e4cc:	42be      	cmp	r6, r7
 801e4ce:	dbcc      	blt.n	801e46a <add_fpreq+0x2c>
  }
}
 801e4d0:	ecbd 8b06 	vpop	{d8-d10}
 801e4d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801e4d8 <add_fpreq_bitmask>:
}


tinyengine_status add_fpreq_bitmask(int size, const int8_t* input1_data, const float input1_scale, const float input1_zero,
			const int8_t* input2_data, const float input2_scale, const float input2_zero, const float output_scale,
			const float zero_y, int8_t* output_data, int8_t* output_mask) {
 801e4d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e4dc:	ed2d 8b06 	vpush	{d8-d10}
 801e4e0:	4680      	mov	r8, r0
 801e4e2:	460c      	mov	r4, r1
 801e4e4:	eef0 aa40 	vmov.f32	s21, s0
 801e4e8:	eeb0 aa60 	vmov.f32	s20, s1
 801e4ec:	4692      	mov	sl, r2
 801e4ee:	eef0 9a41 	vmov.f32	s19, s2
 801e4f2:	eeb0 9a61 	vmov.f32	s18, s3
 801e4f6:	eef0 8a42 	vmov.f32	s17, s4
 801e4fa:	eeb0 8a62 	vmov.f32	s16, s5
 801e4fe:	4699      	mov	r9, r3
 801e500:	9f0e      	ldr	r7, [sp, #56]	@ 0x38
  int mask_idx = 0;
  for (int i = 0; i < size; ++i) {
 801e502:	2600      	movs	r6, #0
  int mask_idx = 0;
 801e504:	4635      	mov	r5, r6
  for (int i = 0; i < size; ++i) {
 801e506:	e011      	b.n	801e52c <add_fpreq_bitmask+0x54>
	  float input2_fp = ((float)*input2_data++ - input2_zero) * input2_scale;
      int clamped_output = (int)round((input1_fp + input2_fp) / output_scale + zero_y); // to align with tvm implementation
      int8_t mask_value = 1;
	  if (clamped_output < activation_min){
		  clamped_output = activation_min;
		  mask_value = 0;
 801e508:	2300      	movs	r3, #0
		  clamped_output = activation_min;
 801e50a:	f06f 007f 	mvn.w	r0, #127	@ 0x7f
	  }
	  if (clamped_output > activation_max){
		  clamped_output = activation_max;
		  mask_value = 0;
	  }
      output_data[i] = (int8_t)(clamped_output);
 801e50e:	f809 0006 	strb.w	r0, [r9, r6]
	  if (mask_value == 1)
 801e512:	bbeb      	cbnz	r3, 801e590 <add_fpreq_bitmask+0xb8>
		  BIT_SET(*output_mask, mask_idx);
	  else
		  BIT_CLEAR(*output_mask, mask_idx);
 801e514:	f997 2000 	ldrsb.w	r2, [r7]
 801e518:	2301      	movs	r3, #1
 801e51a:	40ab      	lsls	r3, r5
 801e51c:	43db      	mvns	r3, r3
 801e51e:	b2db      	uxtb	r3, r3
 801e520:	4013      	ands	r3, r2
 801e522:	703b      	strb	r3, [r7, #0]
	  mask_idx++;
 801e524:	3501      	adds	r5, #1
	  if (mask_idx == 8){
 801e526:	2d08      	cmp	r5, #8
 801e528:	d039      	beq.n	801e59e <add_fpreq_bitmask+0xc6>
  for (int i = 0; i < size; ++i) {
 801e52a:	3601      	adds	r6, #1
 801e52c:	4546      	cmp	r6, r8
 801e52e:	da39      	bge.n	801e5a4 <add_fpreq_bitmask+0xcc>
	  float input1_fp = ((float)*input1_data++ - input1_zero) * input1_scale;
 801e530:	f914 3b01 	ldrsb.w	r3, [r4], #1
 801e534:	ee07 3a90 	vmov	s15, r3
 801e538:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801e53c:	ee77 7aca 	vsub.f32	s15, s15, s20
 801e540:	ee67 7aaa 	vmul.f32	s15, s15, s21
	  float input2_fp = ((float)*input2_data++ - input2_zero) * input2_scale;
 801e544:	f91a 3b01 	ldrsb.w	r3, [sl], #1
 801e548:	ee07 3a10 	vmov	s14, r3
 801e54c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801e550:	ee37 7a49 	vsub.f32	s14, s14, s18
 801e554:	ee27 7a29 	vmul.f32	s14, s14, s19
      int clamped_output = (int)round((input1_fp + input2_fp) / output_scale + zero_y); // to align with tvm implementation
 801e558:	ee77 7a87 	vadd.f32	s15, s15, s14
 801e55c:	ee87 7aa8 	vdiv.f32	s14, s15, s17
 801e560:	ee77 7a08 	vadd.f32	s15, s14, s16
 801e564:	ee17 0a90 	vmov	r0, s15
 801e568:	f7e8 f806 	bl	8006578 <__aeabi_f2d>
 801e56c:	ec41 0b10 	vmov	d0, r0, r1
 801e570:	f004 f9ac 	bl	80228cc <round>
 801e574:	ec51 0b10 	vmov	r0, r1, d0
 801e578:	f7e8 fb06 	bl	8006b88 <__aeabi_d2iz>
	  if (clamped_output < activation_min){
 801e57c:	f110 0f80 	cmn.w	r0, #128	@ 0x80
 801e580:	dbc2      	blt.n	801e508 <add_fpreq_bitmask+0x30>
	  if (clamped_output > activation_max){
 801e582:	287f      	cmp	r0, #127	@ 0x7f
 801e584:	dc01      	bgt.n	801e58a <add_fpreq_bitmask+0xb2>
      int8_t mask_value = 1;
 801e586:	2301      	movs	r3, #1
 801e588:	e7c1      	b.n	801e50e <add_fpreq_bitmask+0x36>
		  mask_value = 0;
 801e58a:	2300      	movs	r3, #0
		  clamped_output = activation_max;
 801e58c:	207f      	movs	r0, #127	@ 0x7f
 801e58e:	e7be      	b.n	801e50e <add_fpreq_bitmask+0x36>
		  BIT_SET(*output_mask, mask_idx);
 801e590:	f997 3000 	ldrsb.w	r3, [r7]
 801e594:	2201      	movs	r2, #1
 801e596:	40aa      	lsls	r2, r5
 801e598:	4313      	orrs	r3, r2
 801e59a:	703b      	strb	r3, [r7, #0]
 801e59c:	e7c2      	b.n	801e524 <add_fpreq_bitmask+0x4c>
		  mask_idx = 0;
		  output_mask++;
 801e59e:	3701      	adds	r7, #1
		  mask_idx = 0;
 801e5a0:	2500      	movs	r5, #0
 801e5a2:	e7c2      	b.n	801e52a <add_fpreq_bitmask+0x52>
	  }
  }
}
 801e5a4:	ecbd 8b06 	vpop	{d8-d10}
 801e5a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0801e5ac <convolve_1x1_s8_ch16_fpreq>:
		const uint16_t input_x, const uint16_t input_y, const uint16_t input_ch,
		const q7_t *kernel, const int32_t *bias, const float *scales,
		const int32_t out_offset, const int32_t input_offset,
		const int32_t out_activation_min, const int32_t out_activation_max,
		q7_t *output, const uint16_t output_x, const uint16_t output_y,
		const uint16_t output_ch, q15_t *runtime_buf) {
 801e5ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e5b0:	b08b      	sub	sp, #44	@ 0x2c
 801e5b2:	4604      	mov	r4, r0
 801e5b4:	9008      	str	r0, [sp, #32]
 801e5b6:	4698      	mov	r8, r3
 801e5b8:	f8dd 9050 	ldr.w	r9, [sp, #80]	@ 0x50
 801e5bc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801e5be:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 801e5c0:	f8bd 2078 	ldrh.w	r2, [sp, #120]	@ 0x78
	(void) input_y;

	/* Partial(two columns) im2col buffer */
	q15_t *two_column_buffer = runtime_buf;
	q7_t *out = output;
	const int32_t num_elements = output_x * output_y;
 801e5c4:	f8bd a070 	ldrh.w	sl, [sp, #112]	@ 0x70
 801e5c8:	f8bd 1074 	ldrh.w	r1, [sp, #116]	@ 0x74
 801e5cc:	fb01 fa0a 	mul.w	sl, r1, sl
	const int channel_div4 = (input_ch >> 2);
 801e5d0:	ea4f 0b98 	mov.w	fp, r8, lsr #2

	const int16_t inoff16 = input_offset;
 801e5d4:	f9bd 5060 	ldrsh.w	r5, [sp, #96]	@ 0x60
	q31_t offset_q15x2 = __PKHBT(inoff16, inoff16, 16);
 801e5d8:	eac5 4505 	pkhbt	r5, r5, r5, lsl #16

	for (i_element = 0; i_element < num_elements / 2; i_element++) {
 801e5dc:	2700      	movs	r7, #0
 801e5de:	f8cd b01c 	str.w	fp, [sp, #28]
 801e5e2:	46a3      	mov	fp, r4
 801e5e4:	4644      	mov	r4, r8
 801e5e6:	461e      	mov	r6, r3
 801e5e8:	4690      	mov	r8, r2
 801e5ea:	e037      	b.n	801e65c <convolve_1x1_s8_ch16_fpreq+0xb0>
  @return        q31 value
 */
__STATIC_FORCEINLINE q31_t arm_nn_read_q7x4_ia(const q7_t **in_q7)
{
    q31_t val;
    memcpy(&val, *in_q7, 4);
 801e5ec:	f8dc 3000 	ldr.w	r3, [ip]
  op2 %= 32U;
  if (op2 == 0U)
  {
    return op1;
  }
  return (op1 >> op2) | (op1 << (32U - op2));
 801e5f0:	ea4f 2133 	mov.w	r1, r3, ror #8

__STATIC_FORCEINLINE uint32_t __SXTB16(uint32_t op1)
{
  uint32_t result;

  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801e5f4:	fa2f f181 	sxtb16	r1, r1
 801e5f8:	fa2f f383 	sxtb16	r3, r3
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801e5fc:	fa91 f105 	sadd16	r1, r1, r5
 801e600:	fa93 f305 	sadd16	r3, r3, r5
  q15_t ** pQ15,
  q31_t    value)
{
  q31_t val = value;
#ifdef __ARM_FEATURE_UNALIGNED
  memcpy (*pQ15, &val, 4);
 801e604:	6013      	str	r3, [r2, #0]
 801e606:	6051      	str	r1, [r2, #4]
 801e608:	f8dc 3004 	ldr.w	r3, [ip, #4]
    *in_q7 += 4;
 801e60c:	f10c 0c08 	add.w	ip, ip, #8
  return (op1 >> op2) | (op1 << (32U - op2));
 801e610:	ea4f 2133 	mov.w	r1, r3, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801e614:	fa2f f181 	sxtb16	r1, r1
 801e618:	fa2f f383 	sxtb16	r3, r3
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801e61c:	fa91 f105 	sadd16	r1, r1, r5
 801e620:	fa93 f305 	sadd16	r3, r3, r5
 801e624:	6093      	str	r3, [r2, #8]
 801e626:	60d1      	str	r1, [r2, #12]
#else
  (*pQ15)[0] = (val & 0x0FFFF);
  (*pQ15)[1] = (val >> 16) & 0x0FFFF;
#endif

 *pQ15 += 2;
 801e628:	3210      	adds	r2, #16

		int cnt = channel_div4;	//two columns
		while (cnt > 0) {
			q7_q15_offset_reordered_ele(src, dst)
			q7_q15_offset_reordered_ele(src, dst)
			cnt--;
 801e62a:	f10e 3eff 	add.w	lr, lr, #4294967295	@ 0xffffffff
		while (cnt > 0) {
 801e62e:	f1be 0f00 	cmp.w	lr, #0
 801e632:	dcdb      	bgt.n	801e5ec <convolve_1x1_s8_ch16_fpreq+0x40>
		}

		out = mat_mult_kernel_s8_s16_reordered_ch16_fpreq(kernel,
				two_column_buffer, output_ch, scales, (q7_t) out_offset,
 801e634:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801e636:	b25b      	sxtb	r3, r3
		out = mat_mult_kernel_s8_s16_reordered_ch16_fpreq(kernel,
 801e638:	9005      	str	r0, [sp, #20]
 801e63a:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801e63c:	9204      	str	r2, [sp, #16]
 801e63e:	9403      	str	r4, [sp, #12]
 801e640:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801e642:	b212      	sxth	r2, r2
 801e644:	9202      	str	r2, [sp, #8]
 801e646:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801e648:	b212      	sxth	r2, r2
 801e64a:	9201      	str	r2, [sp, #4]
 801e64c:	9300      	str	r3, [sp, #0]
 801e64e:	4633      	mov	r3, r6
 801e650:	4642      	mov	r2, r8
 801e652:	991f      	ldr	r1, [sp, #124]	@ 0x7c
 801e654:	4648      	mov	r0, r9
 801e656:	f001 fc77 	bl	801ff48 <mat_mult_kernel_s8_s16_reordered_ch16_fpreq>
	for (i_element = 0; i_element < num_elements / 2; i_element++) {
 801e65a:	3701      	adds	r7, #1
 801e65c:	4653      	mov	r3, sl
 801e65e:	f1ba 0f00 	cmp.w	sl, #0
 801e662:	db0a      	blt.n	801e67a <convolve_1x1_s8_ch16_fpreq+0xce>
 801e664:	ebb7 0f63 	cmp.w	r7, r3, asr #1
 801e668:	da0a      	bge.n	801e680 <convolve_1x1_s8_ch16_fpreq+0xd4>
		q7_t *src = &input[i_element * input_ch * 2];
 801e66a:	fb07 fc04 	mul.w	ip, r7, r4
 801e66e:	eb0b 0c4c 	add.w	ip, fp, ip, lsl #1
		q15_t *dst = two_column_buffer;
 801e672:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
		int cnt = channel_div4;	//two columns
 801e674:	f8dd e01c 	ldr.w	lr, [sp, #28]
		while (cnt > 0) {
 801e678:	e7d9      	b.n	801e62e <convolve_1x1_s8_ch16_fpreq+0x82>
	for (i_element = 0; i_element < num_elements / 2; i_element++) {
 801e67a:	f10a 0301 	add.w	r3, sl, #1
 801e67e:	e7f1      	b.n	801e664 <convolve_1x1_s8_ch16_fpreq+0xb8>
				out_activation_min, out_activation_max,
				input_ch * DIM_KER_Y * DIM_KER_X, bias, out);
	}

	/* check if there is an odd column left-over for computation */
	if (num_elements & 0x1) {
 801e680:	f8dd b01c 	ldr.w	fp, [sp, #28]
 801e684:	4633      	mov	r3, r6
 801e686:	4642      	mov	r2, r8
 801e688:	46a0      	mov	r8, r4
 801e68a:	f01a 0f01 	tst.w	sl, #1
 801e68e:	d063      	beq.n	801e758 <convolve_1x1_s8_ch16_fpreq+0x1ac>
		int32_t i_ch_out;
		const q7_t *ker_a = kernel;
		q7_t *src = &input[(num_elements - 1) * input_ch];
 801e690:	f10a 31ff 	add.w	r1, sl, #4294967295	@ 0xffffffff
 801e694:	9c08      	ldr	r4, [sp, #32]
 801e696:	fb01 4108 	mla	r1, r1, r8, r4
		q15_t *dst = two_column_buffer;
 801e69a:	9f1f      	ldr	r7, [sp, #124]	@ 0x7c
		q31_t in_q15x2_2;
		q31_t out_q15x2_1;
		q31_t out_q15x2_2;

		int cnt = channel_div4;	//two * numof2col columns
		while (cnt > 0) {
 801e69c:	e010      	b.n	801e6c0 <convolve_1x1_s8_ch16_fpreq+0x114>
    memcpy(&val, *in_q7, 4);
 801e69e:	f851 4b04 	ldr.w	r4, [r1], #4
  return (op1 >> op2) | (op1 << (32U - op2));
 801e6a2:	ea4f 2634 	mov.w	r6, r4, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801e6a6:	fa2f f686 	sxtb16	r6, r6
 801e6aa:	fa2f f484 	sxtb16	r4, r4
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801e6ae:	fa96 f605 	sadd16	r6, r6, r5
 801e6b2:	fa94 f405 	sadd16	r4, r4, r5
  memcpy (*pQ15, &val, 4);
 801e6b6:	603c      	str	r4, [r7, #0]
 801e6b8:	607e      	str	r6, [r7, #4]
 *pQ15 += 2;
 801e6ba:	3708      	adds	r7, #8
			q7_q15_offset_reordered_ele(src, dst)
			cnt--;
 801e6bc:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
		while (cnt > 0) {
 801e6c0:	f1bb 0f00 	cmp.w	fp, #0
 801e6c4:	dceb      	bgt.n	801e69e <convolve_1x1_s8_ch16_fpreq+0xf2>
		}

		for (i_ch_out = 0; i_ch_out < output_ch; i_ch_out++) {
 801e6c6:	f04f 0c00 	mov.w	ip, #0
 801e6ca:	f8cd 8024 	str.w	r8, [sp, #36]	@ 0x24
 801e6ce:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801e6d0:	f8dd b05c 	ldr.w	fp, [sp, #92]	@ 0x5c
 801e6d4:	f8dd e064 	ldr.w	lr, [sp, #100]	@ 0x64
 801e6d8:	f8dd a068 	ldr.w	sl, [sp, #104]	@ 0x68
 801e6dc:	e01a      	b.n	801e714 <convolve_1x1_s8_ch16_fpreq+0x168>
				sum = __SMLAD(ker_a2, in_b2, sum);

				col_count--;
			}

			sum = (float) sum * scales[i_ch_out];
 801e6de:	9f07      	ldr	r7, [sp, #28]
 801e6e0:	f8dd c020 	ldr.w	ip, [sp, #32]
 801e6e4:	ee07 1a90 	vmov	s15, r1
 801e6e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801e6ec:	441f      	add	r7, r3
 801e6ee:	ed97 7a00 	vldr	s14, [r7]
 801e6f2:	ee67 7a87 	vmul.f32	s15, s15, s14
 801e6f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801e6fa:	ee17 1a90 	vmov	r1, s15
			sum += out_offset;
 801e6fe:	4459      	add	r1, fp
			sum = MAX(sum, out_activation_min);
 801e700:	4571      	cmp	r1, lr
 801e702:	bfb8      	it	lt
 801e704:	4671      	movlt	r1, lr
			sum = MIN(sum, out_activation_max);
 801e706:	4551      	cmp	r1, sl
 801e708:	bfa8      	it	ge
 801e70a:	4651      	movge	r1, sl
			*out++ = (q7_t) sum;
 801e70c:	f800 1b01 	strb.w	r1, [r0], #1
		for (i_ch_out = 0; i_ch_out < output_ch; i_ch_out++) {
 801e710:	f10c 0c01 	add.w	ip, ip, #1
 801e714:	4562      	cmp	r2, ip
 801e716:	dd1f      	ble.n	801e758 <convolve_1x1_s8_ch16_fpreq+0x1ac>
			q31_t sum = bias[i_ch_out];
 801e718:	ea4f 078c 	mov.w	r7, ip, lsl #2
 801e71c:	f854 102c 	ldr.w	r1, [r4, ip, lsl #2]
			uint16_t col_count = (input_ch * DIM_KER_X * DIM_KER_Y) >> 2;
 801e720:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 801e722:	08ad      	lsrs	r5, r5, #2
			const q15_t *ip_as_col = runtime_buf;
 801e724:	9e1f      	ldr	r6, [sp, #124]	@ 0x7c
 801e726:	9707      	str	r7, [sp, #28]
 801e728:	f8cd c020 	str.w	ip, [sp, #32]
			while (col_count) {
 801e72c:	2d00      	cmp	r5, #0
 801e72e:	d0d6      	beq.n	801e6de <convolve_1x1_s8_ch16_fpreq+0x132>
 801e730:	f859 7b04 	ldr.w	r7, [r9], #4
  return (op1 >> op2) | (op1 << (32U - op2));
 801e734:	ea4f 2c37 	mov.w	ip, r7, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801e738:	fa2f fc8c 	sxtb16	ip, ip
 801e73c:	fa2f f787 	sxtb16	r7, r7
    memcpy(&val, *in_q15, 4);
 801e740:	f8d6 8000 	ldr.w	r8, [r6]

__STATIC_FORCEINLINE uint32_t __SMLAD (uint32_t op1, uint32_t op2, uint32_t op3)
{
  uint32_t result;

  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801e744:	fb27 1708 	smlad	r7, r7, r8, r1
 801e748:	6871      	ldr	r1, [r6, #4]
    *in_q15 += 2;
 801e74a:	3608      	adds	r6, #8
 801e74c:	fb2c 7c01 	smlad	ip, ip, r1, r7
				sum = __SMLAD(ker_a2, in_b2, sum);
 801e750:	4661      	mov	r1, ip
				col_count--;
 801e752:	3d01      	subs	r5, #1
 801e754:	b2ad      	uxth	r5, r5
 801e756:	e7e9      	b.n	801e72c <convolve_1x1_s8_ch16_fpreq+0x180>
		}
	}

	/* Return to application */
	return STATE_SUCCESS;
}
 801e758:	2000      	movs	r0, #0
 801e75a:	b00b      	add	sp, #44	@ 0x2c
 801e75c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e760 <convolve_1x1_s8_ch24_fpreq>:
		const uint16_t input_x, const uint16_t input_y, const uint16_t input_ch,
		const q7_t *kernel, const int32_t *bias, const float *scales,
		const int32_t out_offset, const int32_t input_offset,
		const int32_t out_activation_min, const int32_t out_activation_max,
		q7_t *output, const uint16_t output_x, const uint16_t output_y,
		const uint16_t output_ch, q15_t *runtime_buf) {
 801e760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e764:	b08b      	sub	sp, #44	@ 0x2c
 801e766:	4604      	mov	r4, r0
 801e768:	9008      	str	r0, [sp, #32]
 801e76a:	4698      	mov	r8, r3
 801e76c:	f8dd 9050 	ldr.w	r9, [sp, #80]	@ 0x50
 801e770:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801e772:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 801e774:	f8bd 2078 	ldrh.w	r2, [sp, #120]	@ 0x78
	(void) input_y;

	/* Partial(two columns) im2col buffer */
	q15_t *two_column_buffer = runtime_buf;
	q7_t *out = output;
	const int32_t num_elements = output_x * output_y;
 801e778:	f8bd a070 	ldrh.w	sl, [sp, #112]	@ 0x70
 801e77c:	f8bd 1074 	ldrh.w	r1, [sp, #116]	@ 0x74
 801e780:	fb01 fa0a 	mul.w	sl, r1, sl
	const int channel_div4 = (input_ch >> 2);
 801e784:	ea4f 0b98 	mov.w	fp, r8, lsr #2

	const int16_t inoff16 = input_offset;
 801e788:	f9bd 5060 	ldrsh.w	r5, [sp, #96]	@ 0x60
	q31_t offset_q15x2 = __PKHBT(inoff16, inoff16, 16);
 801e78c:	eac5 4505 	pkhbt	r5, r5, r5, lsl #16

	for (i_element = 0; i_element < num_elements / 2; i_element++) {
 801e790:	2700      	movs	r7, #0
 801e792:	f8cd b01c 	str.w	fp, [sp, #28]
 801e796:	46a3      	mov	fp, r4
 801e798:	4644      	mov	r4, r8
 801e79a:	461e      	mov	r6, r3
 801e79c:	4690      	mov	r8, r2
 801e79e:	e037      	b.n	801e810 <convolve_1x1_s8_ch24_fpreq+0xb0>
    memcpy(&val, *in_q7, 4);
 801e7a0:	f8dc 3000 	ldr.w	r3, [ip]
  return (op1 >> op2) | (op1 << (32U - op2));
 801e7a4:	ea4f 2133 	mov.w	r1, r3, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801e7a8:	fa2f f181 	sxtb16	r1, r1
 801e7ac:	fa2f f383 	sxtb16	r3, r3
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801e7b0:	fa91 f105 	sadd16	r1, r1, r5
 801e7b4:	fa93 f305 	sadd16	r3, r3, r5
  memcpy (*pQ15, &val, 4);
 801e7b8:	6013      	str	r3, [r2, #0]
 801e7ba:	6051      	str	r1, [r2, #4]
 801e7bc:	f8dc 3004 	ldr.w	r3, [ip, #4]
    *in_q7 += 4;
 801e7c0:	f10c 0c08 	add.w	ip, ip, #8
  return (op1 >> op2) | (op1 << (32U - op2));
 801e7c4:	ea4f 2133 	mov.w	r1, r3, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801e7c8:	fa2f f181 	sxtb16	r1, r1
 801e7cc:	fa2f f383 	sxtb16	r3, r3
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801e7d0:	fa91 f105 	sadd16	r1, r1, r5
 801e7d4:	fa93 f305 	sadd16	r3, r3, r5
 801e7d8:	6093      	str	r3, [r2, #8]
 801e7da:	60d1      	str	r1, [r2, #12]
 *pQ15 += 2;
 801e7dc:	3210      	adds	r2, #16

		int cnt = channel_div4;	//two columns
		while (cnt > 0) {
			q7_q15_offset_reordered_ele(src, dst)
			q7_q15_offset_reordered_ele(src, dst)
			cnt--;
 801e7de:	f10e 3eff 	add.w	lr, lr, #4294967295	@ 0xffffffff
		while (cnt > 0) {
 801e7e2:	f1be 0f00 	cmp.w	lr, #0
 801e7e6:	dcdb      	bgt.n	801e7a0 <convolve_1x1_s8_ch24_fpreq+0x40>
		}

		out = mat_mult_kernel_s8_s16_reordered_ch24_fpreq(kernel,
				two_column_buffer, output_ch, scales, (q7_t) out_offset,
 801e7e8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801e7ea:	b25b      	sxtb	r3, r3
		out = mat_mult_kernel_s8_s16_reordered_ch24_fpreq(kernel,
 801e7ec:	9005      	str	r0, [sp, #20]
 801e7ee:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801e7f0:	9204      	str	r2, [sp, #16]
 801e7f2:	9403      	str	r4, [sp, #12]
 801e7f4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801e7f6:	b212      	sxth	r2, r2
 801e7f8:	9202      	str	r2, [sp, #8]
 801e7fa:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801e7fc:	b212      	sxth	r2, r2
 801e7fe:	9201      	str	r2, [sp, #4]
 801e800:	9300      	str	r3, [sp, #0]
 801e802:	4633      	mov	r3, r6
 801e804:	4642      	mov	r2, r8
 801e806:	991f      	ldr	r1, [sp, #124]	@ 0x7c
 801e808:	4648      	mov	r0, r9
 801e80a:	f001 fcc4 	bl	8020196 <mat_mult_kernel_s8_s16_reordered_ch24_fpreq>
	for (i_element = 0; i_element < num_elements / 2; i_element++) {
 801e80e:	3701      	adds	r7, #1
 801e810:	4653      	mov	r3, sl
 801e812:	f1ba 0f00 	cmp.w	sl, #0
 801e816:	db0a      	blt.n	801e82e <convolve_1x1_s8_ch24_fpreq+0xce>
 801e818:	ebb7 0f63 	cmp.w	r7, r3, asr #1
 801e81c:	da0a      	bge.n	801e834 <convolve_1x1_s8_ch24_fpreq+0xd4>
		q7_t *src = &input[i_element * input_ch * 2];
 801e81e:	fb07 fc04 	mul.w	ip, r7, r4
 801e822:	eb0b 0c4c 	add.w	ip, fp, ip, lsl #1
		q15_t *dst = two_column_buffer;
 801e826:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
		int cnt = channel_div4;	//two columns
 801e828:	f8dd e01c 	ldr.w	lr, [sp, #28]
		while (cnt > 0) {
 801e82c:	e7d9      	b.n	801e7e2 <convolve_1x1_s8_ch24_fpreq+0x82>
	for (i_element = 0; i_element < num_elements / 2; i_element++) {
 801e82e:	f10a 0301 	add.w	r3, sl, #1
 801e832:	e7f1      	b.n	801e818 <convolve_1x1_s8_ch24_fpreq+0xb8>
				out_activation_min, out_activation_max,
				input_ch * DIM_KER_Y * DIM_KER_X, bias, out);
	}

	/* check if there is an odd column left-over for computation */
	if (num_elements & 0x1) {
 801e834:	f8dd b01c 	ldr.w	fp, [sp, #28]
 801e838:	4633      	mov	r3, r6
 801e83a:	4642      	mov	r2, r8
 801e83c:	46a0      	mov	r8, r4
 801e83e:	f01a 0f01 	tst.w	sl, #1
 801e842:	d063      	beq.n	801e90c <convolve_1x1_s8_ch24_fpreq+0x1ac>
		int32_t i_ch_out;
		const q7_t *ker_a = kernel;
		q7_t *src = &input[(num_elements - 1) * input_ch];
 801e844:	f10a 31ff 	add.w	r1, sl, #4294967295	@ 0xffffffff
 801e848:	9c08      	ldr	r4, [sp, #32]
 801e84a:	fb01 4108 	mla	r1, r1, r8, r4
		q15_t *dst = two_column_buffer;
 801e84e:	9f1f      	ldr	r7, [sp, #124]	@ 0x7c
		q31_t in_q15x2_2;
		q31_t out_q15x2_1;
		q31_t out_q15x2_2;

		int cnt = channel_div4;	//two * numof2col columns
		while (cnt > 0) {
 801e850:	e010      	b.n	801e874 <convolve_1x1_s8_ch24_fpreq+0x114>
    memcpy(&val, *in_q7, 4);
 801e852:	f851 4b04 	ldr.w	r4, [r1], #4
  return (op1 >> op2) | (op1 << (32U - op2));
 801e856:	ea4f 2634 	mov.w	r6, r4, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801e85a:	fa2f f686 	sxtb16	r6, r6
 801e85e:	fa2f f484 	sxtb16	r4, r4
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801e862:	fa96 f605 	sadd16	r6, r6, r5
 801e866:	fa94 f405 	sadd16	r4, r4, r5
  memcpy (*pQ15, &val, 4);
 801e86a:	603c      	str	r4, [r7, #0]
 801e86c:	607e      	str	r6, [r7, #4]
 *pQ15 += 2;
 801e86e:	3708      	adds	r7, #8
			q7_q15_offset_reordered_ele(src, dst)
			cnt--;
 801e870:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
		while (cnt > 0) {
 801e874:	f1bb 0f00 	cmp.w	fp, #0
 801e878:	dceb      	bgt.n	801e852 <convolve_1x1_s8_ch24_fpreq+0xf2>
		}

		for (i_ch_out = 0; i_ch_out < output_ch; i_ch_out++) {
 801e87a:	f04f 0c00 	mov.w	ip, #0
 801e87e:	f8cd 8024 	str.w	r8, [sp, #36]	@ 0x24
 801e882:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801e884:	f8dd b05c 	ldr.w	fp, [sp, #92]	@ 0x5c
 801e888:	f8dd e064 	ldr.w	lr, [sp, #100]	@ 0x64
 801e88c:	f8dd a068 	ldr.w	sl, [sp, #104]	@ 0x68
 801e890:	e01a      	b.n	801e8c8 <convolve_1x1_s8_ch24_fpreq+0x168>
				sum = __SMLAD(ker_a2, in_b2, sum);

				col_count--;
			}

			sum = (float) sum * scales[i_ch_out];
 801e892:	9f07      	ldr	r7, [sp, #28]
 801e894:	f8dd c020 	ldr.w	ip, [sp, #32]
 801e898:	ee07 1a90 	vmov	s15, r1
 801e89c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801e8a0:	441f      	add	r7, r3
 801e8a2:	ed97 7a00 	vldr	s14, [r7]
 801e8a6:	ee67 7a87 	vmul.f32	s15, s15, s14
 801e8aa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801e8ae:	ee17 1a90 	vmov	r1, s15
			sum += out_offset;
 801e8b2:	4459      	add	r1, fp
			sum = MAX(sum, out_activation_min);
 801e8b4:	4571      	cmp	r1, lr
 801e8b6:	bfb8      	it	lt
 801e8b8:	4671      	movlt	r1, lr
			sum = MIN(sum, out_activation_max);
 801e8ba:	4551      	cmp	r1, sl
 801e8bc:	bfa8      	it	ge
 801e8be:	4651      	movge	r1, sl
			*out++ = (q7_t) sum;
 801e8c0:	f800 1b01 	strb.w	r1, [r0], #1
		for (i_ch_out = 0; i_ch_out < output_ch; i_ch_out++) {
 801e8c4:	f10c 0c01 	add.w	ip, ip, #1
 801e8c8:	4562      	cmp	r2, ip
 801e8ca:	dd1f      	ble.n	801e90c <convolve_1x1_s8_ch24_fpreq+0x1ac>
			q31_t sum = bias[i_ch_out];
 801e8cc:	ea4f 078c 	mov.w	r7, ip, lsl #2
 801e8d0:	f854 102c 	ldr.w	r1, [r4, ip, lsl #2]
			uint16_t col_count = (input_ch * DIM_KER_X * DIM_KER_Y) >> 2;
 801e8d4:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 801e8d6:	08ad      	lsrs	r5, r5, #2
			const q15_t *ip_as_col = runtime_buf;
 801e8d8:	9e1f      	ldr	r6, [sp, #124]	@ 0x7c
 801e8da:	9707      	str	r7, [sp, #28]
 801e8dc:	f8cd c020 	str.w	ip, [sp, #32]
			while (col_count) {
 801e8e0:	2d00      	cmp	r5, #0
 801e8e2:	d0d6      	beq.n	801e892 <convolve_1x1_s8_ch24_fpreq+0x132>
 801e8e4:	f859 7b04 	ldr.w	r7, [r9], #4
  return (op1 >> op2) | (op1 << (32U - op2));
 801e8e8:	ea4f 2c37 	mov.w	ip, r7, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801e8ec:	fa2f fc8c 	sxtb16	ip, ip
 801e8f0:	fa2f f787 	sxtb16	r7, r7
    memcpy(&val, *in_q15, 4);
 801e8f4:	f8d6 8000 	ldr.w	r8, [r6]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801e8f8:	fb27 1708 	smlad	r7, r7, r8, r1
 801e8fc:	6871      	ldr	r1, [r6, #4]
    *in_q15 += 2;
 801e8fe:	3608      	adds	r6, #8
 801e900:	fb2c 7c01 	smlad	ip, ip, r1, r7
				sum = __SMLAD(ker_a2, in_b2, sum);
 801e904:	4661      	mov	r1, ip
				col_count--;
 801e906:	3d01      	subs	r5, #1
 801e908:	b2ad      	uxth	r5, r5
 801e90a:	e7e9      	b.n	801e8e0 <convolve_1x1_s8_ch24_fpreq+0x180>
		}
	}

	/* Return to application */
	return STATE_SUCCESS;
}
 801e90c:	2000      	movs	r0, #0
 801e90e:	b00b      	add	sp, #44	@ 0x2c
 801e910:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e914 <convolve_1x1_s8_ch48_fpreq>:
		const uint16_t input_x, const uint16_t input_y, const uint16_t input_ch,
		const q7_t *kernel, const int32_t *bias, const float *scales,
		const int32_t out_offset, const int32_t input_offset,
		const int32_t out_activation_min, const int32_t out_activation_max,
		q7_t *output, const uint16_t output_x, const uint16_t output_y,
		const uint16_t output_ch, q15_t *runtime_buf) {
 801e914:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e918:	b08b      	sub	sp, #44	@ 0x2c
 801e91a:	4604      	mov	r4, r0
 801e91c:	9008      	str	r0, [sp, #32]
 801e91e:	4698      	mov	r8, r3
 801e920:	f8dd 9050 	ldr.w	r9, [sp, #80]	@ 0x50
 801e924:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801e926:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 801e928:	f8bd 2078 	ldrh.w	r2, [sp, #120]	@ 0x78
	(void) input_y;

	/* Partial(two columns) im2col buffer */
	q15_t *two_column_buffer = runtime_buf;
	q7_t *out = output;
	const int32_t num_elements = output_x * output_y;
 801e92c:	f8bd a070 	ldrh.w	sl, [sp, #112]	@ 0x70
 801e930:	f8bd 1074 	ldrh.w	r1, [sp, #116]	@ 0x74
 801e934:	fb01 fa0a 	mul.w	sl, r1, sl
	const int channel_div4 = (input_ch >> 2);
 801e938:	ea4f 0b98 	mov.w	fp, r8, lsr #2

	const int16_t inoff16 = input_offset;
 801e93c:	f9bd 5060 	ldrsh.w	r5, [sp, #96]	@ 0x60
	q31_t offset_q15x2 = __PKHBT(inoff16, inoff16, 16);
 801e940:	eac5 4505 	pkhbt	r5, r5, r5, lsl #16

	for (i_element = 0; i_element < num_elements / 2; i_element++) {
 801e944:	2700      	movs	r7, #0
 801e946:	f8cd b01c 	str.w	fp, [sp, #28]
 801e94a:	46a3      	mov	fp, r4
 801e94c:	4644      	mov	r4, r8
 801e94e:	461e      	mov	r6, r3
 801e950:	4690      	mov	r8, r2
 801e952:	e037      	b.n	801e9c4 <convolve_1x1_s8_ch48_fpreq+0xb0>
    memcpy(&val, *in_q7, 4);
 801e954:	f8dc 3000 	ldr.w	r3, [ip]
  return (op1 >> op2) | (op1 << (32U - op2));
 801e958:	ea4f 2133 	mov.w	r1, r3, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801e95c:	fa2f f181 	sxtb16	r1, r1
 801e960:	fa2f f383 	sxtb16	r3, r3
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801e964:	fa91 f105 	sadd16	r1, r1, r5
 801e968:	fa93 f305 	sadd16	r3, r3, r5
  memcpy (*pQ15, &val, 4);
 801e96c:	6013      	str	r3, [r2, #0]
 801e96e:	6051      	str	r1, [r2, #4]
 801e970:	f8dc 3004 	ldr.w	r3, [ip, #4]
    *in_q7 += 4;
 801e974:	f10c 0c08 	add.w	ip, ip, #8
  return (op1 >> op2) | (op1 << (32U - op2));
 801e978:	ea4f 2133 	mov.w	r1, r3, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801e97c:	fa2f f181 	sxtb16	r1, r1
 801e980:	fa2f f383 	sxtb16	r3, r3
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801e984:	fa91 f105 	sadd16	r1, r1, r5
 801e988:	fa93 f305 	sadd16	r3, r3, r5
 801e98c:	6093      	str	r3, [r2, #8]
 801e98e:	60d1      	str	r1, [r2, #12]
 *pQ15 += 2;
 801e990:	3210      	adds	r2, #16

		int cnt = channel_div4;	//two columns
		while (cnt > 0) {
			q7_q15_offset_reordered_ele(src, dst)
			q7_q15_offset_reordered_ele(src, dst)
			cnt--;
 801e992:	f10e 3eff 	add.w	lr, lr, #4294967295	@ 0xffffffff
		while (cnt > 0) {
 801e996:	f1be 0f00 	cmp.w	lr, #0
 801e99a:	dcdb      	bgt.n	801e954 <convolve_1x1_s8_ch48_fpreq+0x40>
		}

		out = mat_mult_kernel_s8_s16_reordered_ch48_fpreq(kernel,
				two_column_buffer, output_ch, scales, (q7_t) out_offset,
 801e99c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801e99e:	b25b      	sxtb	r3, r3
		out = mat_mult_kernel_s8_s16_reordered_ch48_fpreq(kernel,
 801e9a0:	9005      	str	r0, [sp, #20]
 801e9a2:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801e9a4:	9204      	str	r2, [sp, #16]
 801e9a6:	9403      	str	r4, [sp, #12]
 801e9a8:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801e9aa:	b212      	sxth	r2, r2
 801e9ac:	9202      	str	r2, [sp, #8]
 801e9ae:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801e9b0:	b212      	sxth	r2, r2
 801e9b2:	9201      	str	r2, [sp, #4]
 801e9b4:	9300      	str	r3, [sp, #0]
 801e9b6:	4633      	mov	r3, r6
 801e9b8:	4642      	mov	r2, r8
 801e9ba:	991f      	ldr	r1, [sp, #124]	@ 0x7c
 801e9bc:	4648      	mov	r0, r9
 801e9be:	f001 f86b 	bl	801fa98 <mat_mult_kernel_s8_s16_reordered_ch48_fpreq>
	for (i_element = 0; i_element < num_elements / 2; i_element++) {
 801e9c2:	3701      	adds	r7, #1
 801e9c4:	4653      	mov	r3, sl
 801e9c6:	f1ba 0f00 	cmp.w	sl, #0
 801e9ca:	db0a      	blt.n	801e9e2 <convolve_1x1_s8_ch48_fpreq+0xce>
 801e9cc:	ebb7 0f63 	cmp.w	r7, r3, asr #1
 801e9d0:	da0a      	bge.n	801e9e8 <convolve_1x1_s8_ch48_fpreq+0xd4>
		q7_t *src = &input[i_element * input_ch * 2];
 801e9d2:	fb07 fc04 	mul.w	ip, r7, r4
 801e9d6:	eb0b 0c4c 	add.w	ip, fp, ip, lsl #1
		q15_t *dst = two_column_buffer;
 801e9da:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
		int cnt = channel_div4;	//two columns
 801e9dc:	f8dd e01c 	ldr.w	lr, [sp, #28]
		while (cnt > 0) {
 801e9e0:	e7d9      	b.n	801e996 <convolve_1x1_s8_ch48_fpreq+0x82>
	for (i_element = 0; i_element < num_elements / 2; i_element++) {
 801e9e2:	f10a 0301 	add.w	r3, sl, #1
 801e9e6:	e7f1      	b.n	801e9cc <convolve_1x1_s8_ch48_fpreq+0xb8>
				out_activation_min, out_activation_max,
				input_ch * DIM_KER_Y * DIM_KER_X, bias, out);
	}

	/* check if there is an odd column left-over for computation */
	if (num_elements & 0x1) {
 801e9e8:	f8dd b01c 	ldr.w	fp, [sp, #28]
 801e9ec:	4633      	mov	r3, r6
 801e9ee:	4642      	mov	r2, r8
 801e9f0:	46a0      	mov	r8, r4
 801e9f2:	f01a 0f01 	tst.w	sl, #1
 801e9f6:	d063      	beq.n	801eac0 <convolve_1x1_s8_ch48_fpreq+0x1ac>
		int32_t i_ch_out;
		const q7_t *ker_a = kernel;
		q7_t *src = &input[(num_elements - 1) * input_ch];
 801e9f8:	f10a 31ff 	add.w	r1, sl, #4294967295	@ 0xffffffff
 801e9fc:	9c08      	ldr	r4, [sp, #32]
 801e9fe:	fb01 4108 	mla	r1, r1, r8, r4
		q15_t *dst = two_column_buffer;
 801ea02:	9f1f      	ldr	r7, [sp, #124]	@ 0x7c
		q31_t in_q15x2_2;
		q31_t out_q15x2_1;
		q31_t out_q15x2_2;

		int cnt = channel_div4;	//two * numof2col columns
		while (cnt > 0) {
 801ea04:	e010      	b.n	801ea28 <convolve_1x1_s8_ch48_fpreq+0x114>
    memcpy(&val, *in_q7, 4);
 801ea06:	f851 4b04 	ldr.w	r4, [r1], #4
  return (op1 >> op2) | (op1 << (32U - op2));
 801ea0a:	ea4f 2634 	mov.w	r6, r4, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801ea0e:	fa2f f686 	sxtb16	r6, r6
 801ea12:	fa2f f484 	sxtb16	r4, r4
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801ea16:	fa96 f605 	sadd16	r6, r6, r5
 801ea1a:	fa94 f405 	sadd16	r4, r4, r5
  memcpy (*pQ15, &val, 4);
 801ea1e:	603c      	str	r4, [r7, #0]
 801ea20:	607e      	str	r6, [r7, #4]
 *pQ15 += 2;
 801ea22:	3708      	adds	r7, #8
			q7_q15_offset_reordered_ele(src, dst)
			cnt--;
 801ea24:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
		while (cnt > 0) {
 801ea28:	f1bb 0f00 	cmp.w	fp, #0
 801ea2c:	dceb      	bgt.n	801ea06 <convolve_1x1_s8_ch48_fpreq+0xf2>
		}

		for (i_ch_out = 0; i_ch_out < output_ch; i_ch_out++) {
 801ea2e:	f04f 0c00 	mov.w	ip, #0
 801ea32:	f8cd 8024 	str.w	r8, [sp, #36]	@ 0x24
 801ea36:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801ea38:	f8dd b05c 	ldr.w	fp, [sp, #92]	@ 0x5c
 801ea3c:	f8dd e064 	ldr.w	lr, [sp, #100]	@ 0x64
 801ea40:	f8dd a068 	ldr.w	sl, [sp, #104]	@ 0x68
 801ea44:	e01a      	b.n	801ea7c <convolve_1x1_s8_ch48_fpreq+0x168>
				sum = __SMLAD(ker_a2, in_b2, sum);

				col_count--;
			}

			sum = (float) sum * scales[i_ch_out];
 801ea46:	9f07      	ldr	r7, [sp, #28]
 801ea48:	f8dd c020 	ldr.w	ip, [sp, #32]
 801ea4c:	ee07 1a90 	vmov	s15, r1
 801ea50:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801ea54:	441f      	add	r7, r3
 801ea56:	ed97 7a00 	vldr	s14, [r7]
 801ea5a:	ee67 7a87 	vmul.f32	s15, s15, s14
 801ea5e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801ea62:	ee17 1a90 	vmov	r1, s15
			sum += out_offset;
 801ea66:	4459      	add	r1, fp
			sum = MAX(sum, out_activation_min);
 801ea68:	4571      	cmp	r1, lr
 801ea6a:	bfb8      	it	lt
 801ea6c:	4671      	movlt	r1, lr
			sum = MIN(sum, out_activation_max);
 801ea6e:	4551      	cmp	r1, sl
 801ea70:	bfa8      	it	ge
 801ea72:	4651      	movge	r1, sl
			*out++ = (q7_t) sum;
 801ea74:	f800 1b01 	strb.w	r1, [r0], #1
		for (i_ch_out = 0; i_ch_out < output_ch; i_ch_out++) {
 801ea78:	f10c 0c01 	add.w	ip, ip, #1
 801ea7c:	4562      	cmp	r2, ip
 801ea7e:	dd1f      	ble.n	801eac0 <convolve_1x1_s8_ch48_fpreq+0x1ac>
			q31_t sum = bias[i_ch_out];
 801ea80:	ea4f 078c 	mov.w	r7, ip, lsl #2
 801ea84:	f854 102c 	ldr.w	r1, [r4, ip, lsl #2]
			uint16_t col_count = (input_ch * DIM_KER_X * DIM_KER_Y) >> 2;
 801ea88:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 801ea8a:	08ad      	lsrs	r5, r5, #2
			const q15_t *ip_as_col = runtime_buf;
 801ea8c:	9e1f      	ldr	r6, [sp, #124]	@ 0x7c
 801ea8e:	9707      	str	r7, [sp, #28]
 801ea90:	f8cd c020 	str.w	ip, [sp, #32]
			while (col_count) {
 801ea94:	2d00      	cmp	r5, #0
 801ea96:	d0d6      	beq.n	801ea46 <convolve_1x1_s8_ch48_fpreq+0x132>
 801ea98:	f859 7b04 	ldr.w	r7, [r9], #4
  return (op1 >> op2) | (op1 << (32U - op2));
 801ea9c:	ea4f 2c37 	mov.w	ip, r7, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801eaa0:	fa2f fc8c 	sxtb16	ip, ip
 801eaa4:	fa2f f787 	sxtb16	r7, r7
    memcpy(&val, *in_q15, 4);
 801eaa8:	f8d6 8000 	ldr.w	r8, [r6]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801eaac:	fb27 1708 	smlad	r7, r7, r8, r1
 801eab0:	6871      	ldr	r1, [r6, #4]
    *in_q15 += 2;
 801eab2:	3608      	adds	r6, #8
 801eab4:	fb2c 7c01 	smlad	ip, ip, r1, r7
				sum = __SMLAD(ker_a2, in_b2, sum);
 801eab8:	4661      	mov	r1, ip
				col_count--;
 801eaba:	3d01      	subs	r5, #1
 801eabc:	b2ad      	uxth	r5, r5
 801eabe:	e7e9      	b.n	801ea94 <convolve_1x1_s8_ch48_fpreq+0x180>
		}
	}

	/* Return to application */
	return STATE_SUCCESS;
}
 801eac0:	2000      	movs	r0, #0
 801eac2:	b00b      	add	sp, #44	@ 0x2c
 801eac4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801eac8 <convolve_1x1_s8_ch8_fpreq>:
		const uint16_t input_x, const uint16_t input_y, const uint16_t input_ch,
		const q7_t *kernel, const int32_t *bias, const float *scales,
		const int32_t out_offset, const int32_t input_offset,
		const int32_t out_activation_min, const int32_t out_activation_max,
		q7_t *output, const uint16_t output_x, const uint16_t output_y,
		const uint16_t output_ch, q15_t *runtime_buf) {
 801eac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eacc:	b08b      	sub	sp, #44	@ 0x2c
 801eace:	4604      	mov	r4, r0
 801ead0:	9008      	str	r0, [sp, #32]
 801ead2:	4698      	mov	r8, r3
 801ead4:	f8dd 9050 	ldr.w	r9, [sp, #80]	@ 0x50
 801ead8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801eada:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 801eadc:	f8bd 2078 	ldrh.w	r2, [sp, #120]	@ 0x78
	(void) input_y;

	/* Partial(two columns) im2col buffer */
	q15_t *two_column_buffer = runtime_buf;
	q7_t *out = output;
	const int32_t num_elements = output_x * output_y;
 801eae0:	f8bd a070 	ldrh.w	sl, [sp, #112]	@ 0x70
 801eae4:	f8bd 1074 	ldrh.w	r1, [sp, #116]	@ 0x74
 801eae8:	fb01 fa0a 	mul.w	sl, r1, sl
	const int channel_div4 = (input_ch >> 2);
 801eaec:	ea4f 0b98 	mov.w	fp, r8, lsr #2

	const int16_t inoff16 = input_offset;
 801eaf0:	f9bd 5060 	ldrsh.w	r5, [sp, #96]	@ 0x60
	q31_t offset_q15x2 = __PKHBT(inoff16, inoff16, 16);
 801eaf4:	eac5 4505 	pkhbt	r5, r5, r5, lsl #16

	for (i_element = 0; i_element < num_elements / 2; i_element++) {
 801eaf8:	2700      	movs	r7, #0
 801eafa:	f8cd b01c 	str.w	fp, [sp, #28]
 801eafe:	46a3      	mov	fp, r4
 801eb00:	4644      	mov	r4, r8
 801eb02:	461e      	mov	r6, r3
 801eb04:	4690      	mov	r8, r2
 801eb06:	e037      	b.n	801eb78 <convolve_1x1_s8_ch8_fpreq+0xb0>
    memcpy(&val, *in_q7, 4);
 801eb08:	f8dc 3000 	ldr.w	r3, [ip]
  return (op1 >> op2) | (op1 << (32U - op2));
 801eb0c:	ea4f 2133 	mov.w	r1, r3, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801eb10:	fa2f f181 	sxtb16	r1, r1
 801eb14:	fa2f f383 	sxtb16	r3, r3
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801eb18:	fa91 f105 	sadd16	r1, r1, r5
 801eb1c:	fa93 f305 	sadd16	r3, r3, r5
  memcpy (*pQ15, &val, 4);
 801eb20:	6013      	str	r3, [r2, #0]
 801eb22:	6051      	str	r1, [r2, #4]
 801eb24:	f8dc 3004 	ldr.w	r3, [ip, #4]
    *in_q7 += 4;
 801eb28:	f10c 0c08 	add.w	ip, ip, #8
  return (op1 >> op2) | (op1 << (32U - op2));
 801eb2c:	ea4f 2133 	mov.w	r1, r3, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801eb30:	fa2f f181 	sxtb16	r1, r1
 801eb34:	fa2f f383 	sxtb16	r3, r3
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801eb38:	fa91 f105 	sadd16	r1, r1, r5
 801eb3c:	fa93 f305 	sadd16	r3, r3, r5
 801eb40:	6093      	str	r3, [r2, #8]
 801eb42:	60d1      	str	r1, [r2, #12]
 *pQ15 += 2;
 801eb44:	3210      	adds	r2, #16

		int cnt = channel_div4;	//two columns
		while (cnt > 0) {
			q7_q15_offset_reordered_ele(src, dst)
			q7_q15_offset_reordered_ele(src, dst)
			cnt--;
 801eb46:	f10e 3eff 	add.w	lr, lr, #4294967295	@ 0xffffffff
		while (cnt > 0) {
 801eb4a:	f1be 0f00 	cmp.w	lr, #0
 801eb4e:	dcdb      	bgt.n	801eb08 <convolve_1x1_s8_ch8_fpreq+0x40>
		}

		out = mat_mult_kernel_s8_s16_reordered_fpreq(kernel, two_column_buffer,
				output_ch, scales, (q7_t) out_offset, out_activation_min,
 801eb50:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801eb52:	b25b      	sxtb	r3, r3
		out = mat_mult_kernel_s8_s16_reordered_fpreq(kernel, two_column_buffer,
 801eb54:	9005      	str	r0, [sp, #20]
 801eb56:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801eb58:	9204      	str	r2, [sp, #16]
 801eb5a:	9403      	str	r4, [sp, #12]
 801eb5c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801eb5e:	b212      	sxth	r2, r2
 801eb60:	9202      	str	r2, [sp, #8]
 801eb62:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801eb64:	b212      	sxth	r2, r2
 801eb66:	9201      	str	r2, [sp, #4]
 801eb68:	9300      	str	r3, [sp, #0]
 801eb6a:	4633      	mov	r3, r6
 801eb6c:	4642      	mov	r2, r8
 801eb6e:	991f      	ldr	r1, [sp, #124]	@ 0x7c
 801eb70:	4648      	mov	r0, r9
 801eb72:	f001 fc81 	bl	8020478 <mat_mult_kernel_s8_s16_reordered_fpreq>
	for (i_element = 0; i_element < num_elements / 2; i_element++) {
 801eb76:	3701      	adds	r7, #1
 801eb78:	4653      	mov	r3, sl
 801eb7a:	f1ba 0f00 	cmp.w	sl, #0
 801eb7e:	db0a      	blt.n	801eb96 <convolve_1x1_s8_ch8_fpreq+0xce>
 801eb80:	ebb7 0f63 	cmp.w	r7, r3, asr #1
 801eb84:	da0a      	bge.n	801eb9c <convolve_1x1_s8_ch8_fpreq+0xd4>
		q7_t *src = &input[i_element * input_ch * 2];
 801eb86:	fb07 fc04 	mul.w	ip, r7, r4
 801eb8a:	eb0b 0c4c 	add.w	ip, fp, ip, lsl #1
		q15_t *dst = two_column_buffer;
 801eb8e:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
		int cnt = channel_div4;	//two columns
 801eb90:	f8dd e01c 	ldr.w	lr, [sp, #28]
		while (cnt > 0) {
 801eb94:	e7d9      	b.n	801eb4a <convolve_1x1_s8_ch8_fpreq+0x82>
	for (i_element = 0; i_element < num_elements / 2; i_element++) {
 801eb96:	f10a 0301 	add.w	r3, sl, #1
 801eb9a:	e7f1      	b.n	801eb80 <convolve_1x1_s8_ch8_fpreq+0xb8>
				out_activation_max, input_ch * DIM_KER_Y * DIM_KER_X, bias,
				out);
	}

	/* check if there is an odd column left-over for computation */
	if (num_elements & 0x1) {
 801eb9c:	f8dd b01c 	ldr.w	fp, [sp, #28]
 801eba0:	4633      	mov	r3, r6
 801eba2:	4642      	mov	r2, r8
 801eba4:	46a0      	mov	r8, r4
 801eba6:	f01a 0f01 	tst.w	sl, #1
 801ebaa:	d063      	beq.n	801ec74 <convolve_1x1_s8_ch8_fpreq+0x1ac>
		int32_t i_ch_out;
		const q7_t *ker_a = kernel;
		q7_t *src = &input[(num_elements - 1) * input_ch];
 801ebac:	f10a 31ff 	add.w	r1, sl, #4294967295	@ 0xffffffff
 801ebb0:	9c08      	ldr	r4, [sp, #32]
 801ebb2:	fb01 4108 	mla	r1, r1, r8, r4
		q15_t *dst = two_column_buffer;
 801ebb6:	9f1f      	ldr	r7, [sp, #124]	@ 0x7c
		q31_t in_q15x2_2;
		q31_t out_q15x2_1;
		q31_t out_q15x2_2;

		int cnt = channel_div4;	//two * numof2col columns
		while (cnt > 0) {
 801ebb8:	e010      	b.n	801ebdc <convolve_1x1_s8_ch8_fpreq+0x114>
    memcpy(&val, *in_q7, 4);
 801ebba:	f851 4b04 	ldr.w	r4, [r1], #4
  return (op1 >> op2) | (op1 << (32U - op2));
 801ebbe:	ea4f 2634 	mov.w	r6, r4, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801ebc2:	fa2f f686 	sxtb16	r6, r6
 801ebc6:	fa2f f484 	sxtb16	r4, r4
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801ebca:	fa96 f605 	sadd16	r6, r6, r5
 801ebce:	fa94 f405 	sadd16	r4, r4, r5
  memcpy (*pQ15, &val, 4);
 801ebd2:	603c      	str	r4, [r7, #0]
 801ebd4:	607e      	str	r6, [r7, #4]
 *pQ15 += 2;
 801ebd6:	3708      	adds	r7, #8
			q7_q15_offset_reordered_ele(src, dst)
			cnt--;
 801ebd8:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
		while (cnt > 0) {
 801ebdc:	f1bb 0f00 	cmp.w	fp, #0
 801ebe0:	dceb      	bgt.n	801ebba <convolve_1x1_s8_ch8_fpreq+0xf2>
		}

		for (i_ch_out = 0; i_ch_out < output_ch; i_ch_out++) {
 801ebe2:	f04f 0c00 	mov.w	ip, #0
 801ebe6:	f8cd 8024 	str.w	r8, [sp, #36]	@ 0x24
 801ebea:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801ebec:	f8dd b05c 	ldr.w	fp, [sp, #92]	@ 0x5c
 801ebf0:	f8dd e064 	ldr.w	lr, [sp, #100]	@ 0x64
 801ebf4:	f8dd a068 	ldr.w	sl, [sp, #104]	@ 0x68
 801ebf8:	e01a      	b.n	801ec30 <convolve_1x1_s8_ch8_fpreq+0x168>
				sum = __SMLAD(ker_a2, in_b2, sum);

				col_count--;
			}

			sum = (float) sum * scales[i_ch_out];
 801ebfa:	9f07      	ldr	r7, [sp, #28]
 801ebfc:	f8dd c020 	ldr.w	ip, [sp, #32]
 801ec00:	ee07 1a90 	vmov	s15, r1
 801ec04:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801ec08:	441f      	add	r7, r3
 801ec0a:	ed97 7a00 	vldr	s14, [r7]
 801ec0e:	ee67 7a87 	vmul.f32	s15, s15, s14
 801ec12:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801ec16:	ee17 1a90 	vmov	r1, s15
			sum += out_offset;
 801ec1a:	4459      	add	r1, fp
			sum = MAX(sum, out_activation_min);
 801ec1c:	4571      	cmp	r1, lr
 801ec1e:	bfb8      	it	lt
 801ec20:	4671      	movlt	r1, lr
			sum = MIN(sum, out_activation_max);
 801ec22:	4551      	cmp	r1, sl
 801ec24:	bfa8      	it	ge
 801ec26:	4651      	movge	r1, sl
			*out++ = (q7_t) sum;
 801ec28:	f800 1b01 	strb.w	r1, [r0], #1
		for (i_ch_out = 0; i_ch_out < output_ch; i_ch_out++) {
 801ec2c:	f10c 0c01 	add.w	ip, ip, #1
 801ec30:	4562      	cmp	r2, ip
 801ec32:	dd1f      	ble.n	801ec74 <convolve_1x1_s8_ch8_fpreq+0x1ac>
			q31_t sum = bias[i_ch_out];
 801ec34:	ea4f 078c 	mov.w	r7, ip, lsl #2
 801ec38:	f854 102c 	ldr.w	r1, [r4, ip, lsl #2]
			uint16_t col_count = (input_ch * DIM_KER_X * DIM_KER_Y) >> 2;
 801ec3c:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 801ec3e:	08ad      	lsrs	r5, r5, #2
			const q15_t *ip_as_col = runtime_buf;
 801ec40:	9e1f      	ldr	r6, [sp, #124]	@ 0x7c
 801ec42:	9707      	str	r7, [sp, #28]
 801ec44:	f8cd c020 	str.w	ip, [sp, #32]
			while (col_count) {
 801ec48:	2d00      	cmp	r5, #0
 801ec4a:	d0d6      	beq.n	801ebfa <convolve_1x1_s8_ch8_fpreq+0x132>
 801ec4c:	f859 7b04 	ldr.w	r7, [r9], #4
  return (op1 >> op2) | (op1 << (32U - op2));
 801ec50:	ea4f 2c37 	mov.w	ip, r7, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801ec54:	fa2f fc8c 	sxtb16	ip, ip
 801ec58:	fa2f f787 	sxtb16	r7, r7
    memcpy(&val, *in_q15, 4);
 801ec5c:	f8d6 8000 	ldr.w	r8, [r6]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801ec60:	fb27 1708 	smlad	r7, r7, r8, r1
 801ec64:	6871      	ldr	r1, [r6, #4]
    *in_q15 += 2;
 801ec66:	3608      	adds	r6, #8
 801ec68:	fb2c 7c01 	smlad	ip, ip, r1, r7
				sum = __SMLAD(ker_a2, in_b2, sum);
 801ec6c:	4661      	mov	r1, ip
				col_count--;
 801ec6e:	3d01      	subs	r5, #1
 801ec70:	b2ad      	uxth	r5, r5
 801ec72:	e7e9      	b.n	801ec48 <convolve_1x1_s8_ch8_fpreq+0x180>
		}
	}

	/* Return to application */
	return STATE_SUCCESS;
}
 801ec74:	2000      	movs	r0, #0
 801ec76:	b00b      	add	sp, #44	@ 0x2c
 801ec78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ec7c <convolve_1x1_s8_fpreq>:
		const uint16_t input_x, const uint16_t input_y, const uint16_t input_ch,
		const q7_t *kernel, const int32_t *bias, const float *scales,
		const int32_t out_offset, const int32_t input_offset,
		const int32_t out_activation_min, const int32_t out_activation_max,
		q7_t *output, const uint16_t output_x, const uint16_t output_y,
		const uint16_t output_ch, q15_t *runtime_buf) {
 801ec7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ec80:	b08b      	sub	sp, #44	@ 0x2c
 801ec82:	4680      	mov	r8, r0
 801ec84:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 801ec88:	f8dd e054 	ldr.w	lr, [sp, #84]	@ 0x54
 801ec8c:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 801ec8e:	f8bd 2078 	ldrh.w	r2, [sp, #120]	@ 0x78
	if (input_ch % 4 != 0 || input_ch % 2 != 0) {
 801ec92:	f013 0f03 	tst.w	r3, #3
 801ec96:	f040 80c7 	bne.w	801ee28 <convolve_1x1_s8_fpreq+0x1ac>
 801ec9a:	461f      	mov	r7, r3
	(void) input_y;

	/* Partial(two columns) im2col buffer */
	q15_t *two_column_buffer = runtime_buf;
	q7_t *out = output;
	const int32_t num_elements = output_x * output_y;
 801ec9c:	f8bd b070 	ldrh.w	fp, [sp, #112]	@ 0x70
 801eca0:	f8bd 3074 	ldrh.w	r3, [sp, #116]	@ 0x74
 801eca4:	fb03 fb0b 	mul.w	fp, r3, fp
	const int channel_div4 = (input_ch >> 2);
 801eca8:	08bb      	lsrs	r3, r7, #2

	const int16_t inoff16 = input_offset;
 801ecaa:	f9bd 5060 	ldrsh.w	r5, [sp, #96]	@ 0x60
	q31_t offset_q15x2 = __PKHBT(inoff16, inoff16, 16);
 801ecae:	eac5 4505 	pkhbt	r5, r5, r5, lsl #16

	for (i_element = 0; i_element < num_elements / 2; i_element++) {
 801ecb2:	2600      	movs	r6, #0
 801ecb4:	9307      	str	r3, [sp, #28]
 801ecb6:	4674      	mov	r4, lr
 801ecb8:	4691      	mov	r9, r2
 801ecba:	e036      	b.n	801ed2a <convolve_1x1_s8_fpreq+0xae>
    memcpy(&val, *in_q7, 4);
 801ecbc:	f8dc 3000 	ldr.w	r3, [ip]
  return (op1 >> op2) | (op1 << (32U - op2));
 801ecc0:	ea4f 2133 	mov.w	r1, r3, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801ecc4:	fa2f f181 	sxtb16	r1, r1
 801ecc8:	fa2f f383 	sxtb16	r3, r3
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801eccc:	fa91 f105 	sadd16	r1, r1, r5
 801ecd0:	fa93 f305 	sadd16	r3, r3, r5
  memcpy (*pQ15, &val, 4);
 801ecd4:	6013      	str	r3, [r2, #0]
 801ecd6:	6051      	str	r1, [r2, #4]
 801ecd8:	f8dc 3004 	ldr.w	r3, [ip, #4]
    *in_q7 += 4;
 801ecdc:	f10c 0c08 	add.w	ip, ip, #8
  return (op1 >> op2) | (op1 << (32U - op2));
 801ece0:	ea4f 2133 	mov.w	r1, r3, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801ece4:	fa2f f181 	sxtb16	r1, r1
 801ece8:	fa2f f383 	sxtb16	r3, r3
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801ecec:	fa91 f105 	sadd16	r1, r1, r5
 801ecf0:	fa93 f305 	sadd16	r3, r3, r5
 801ecf4:	6093      	str	r3, [r2, #8]
 801ecf6:	60d1      	str	r1, [r2, #12]
 *pQ15 += 2;
 801ecf8:	3210      	adds	r2, #16

		int cnt = channel_div4;	//two columns
		while (cnt > 0) {
			q7_q15_offset_reordered_ele(src, dst)
			q7_q15_offset_reordered_ele(src, dst)
			cnt--;
 801ecfa:	f10e 3eff 	add.w	lr, lr, #4294967295	@ 0xffffffff
		while (cnt > 0) {
 801ecfe:	f1be 0f00 	cmp.w	lr, #0
 801ed02:	dcdb      	bgt.n	801ecbc <convolve_1x1_s8_fpreq+0x40>
		}

		out = mat_mult_kernel_s8_s16_reordered_fpreq(kernel, two_column_buffer,
				output_ch, scales, (q7_t) out_offset, out_activation_min,
 801ed04:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801ed06:	b25b      	sxtb	r3, r3
		out = mat_mult_kernel_s8_s16_reordered_fpreq(kernel, two_column_buffer,
 801ed08:	9005      	str	r0, [sp, #20]
 801ed0a:	9404      	str	r4, [sp, #16]
 801ed0c:	9703      	str	r7, [sp, #12]
 801ed0e:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801ed10:	b212      	sxth	r2, r2
 801ed12:	9202      	str	r2, [sp, #8]
 801ed14:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801ed16:	b212      	sxth	r2, r2
 801ed18:	9201      	str	r2, [sp, #4]
 801ed1a:	9300      	str	r3, [sp, #0]
 801ed1c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801ed1e:	464a      	mov	r2, r9
 801ed20:	991f      	ldr	r1, [sp, #124]	@ 0x7c
 801ed22:	4650      	mov	r0, sl
 801ed24:	f001 fba8 	bl	8020478 <mat_mult_kernel_s8_s16_reordered_fpreq>
	for (i_element = 0; i_element < num_elements / 2; i_element++) {
 801ed28:	3601      	adds	r6, #1
 801ed2a:	465b      	mov	r3, fp
 801ed2c:	f1bb 0f00 	cmp.w	fp, #0
 801ed30:	db0a      	blt.n	801ed48 <convolve_1x1_s8_fpreq+0xcc>
 801ed32:	ebb6 0f63 	cmp.w	r6, r3, asr #1
 801ed36:	da0a      	bge.n	801ed4e <convolve_1x1_s8_fpreq+0xd2>
		q7_t *src = &input[i_element * input_ch * 2];
 801ed38:	fb06 fc07 	mul.w	ip, r6, r7
 801ed3c:	eb08 0c4c 	add.w	ip, r8, ip, lsl #1
		q15_t *dst = two_column_buffer;
 801ed40:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
		int cnt = channel_div4;	//two columns
 801ed42:	f8dd e01c 	ldr.w	lr, [sp, #28]
		while (cnt > 0) {
 801ed46:	e7da      	b.n	801ecfe <convolve_1x1_s8_fpreq+0x82>
	for (i_element = 0; i_element < num_elements / 2; i_element++) {
 801ed48:	f10b 0301 	add.w	r3, fp, #1
 801ed4c:	e7f1      	b.n	801ed32 <convolve_1x1_s8_fpreq+0xb6>
				out_activation_max, input_ch * DIM_KER_Y * DIM_KER_X, bias,
				out);
	}

	/* check if there is an odd column left-over for computation */
	if (num_elements & 0x1) {
 801ed4e:	9b07      	ldr	r3, [sp, #28]
 801ed50:	46a6      	mov	lr, r4
 801ed52:	464a      	mov	r2, r9
 801ed54:	f01b 0f01 	tst.w	fp, #1
 801ed58:	d06a      	beq.n	801ee30 <convolve_1x1_s8_fpreq+0x1b4>
		int32_t i_ch_out;
		const q7_t *ker_a = kernel;
		q7_t *src = &input[(num_elements - 1) * input_ch];
 801ed5a:	f10b 31ff 	add.w	r1, fp, #4294967295	@ 0xffffffff
 801ed5e:	fb01 8107 	mla	r1, r1, r7, r8
		q15_t *dst = two_column_buffer;
 801ed62:	f8dd c07c 	ldr.w	ip, [sp, #124]	@ 0x7c
		q31_t in_q15x2_2;
		q31_t out_q15x2_1;
		q31_t out_q15x2_2;

		int cnt = channel_div4;	//two * numof2col columns
		while (cnt > 0) {
 801ed66:	e012      	b.n	801ed8e <convolve_1x1_s8_fpreq+0x112>
    memcpy(&val, *in_q7, 4);
 801ed68:	f851 4b04 	ldr.w	r4, [r1], #4
  return (op1 >> op2) | (op1 << (32U - op2));
 801ed6c:	ea4f 2634 	mov.w	r6, r4, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801ed70:	fa2f f686 	sxtb16	r6, r6
 801ed74:	fa2f f484 	sxtb16	r4, r4
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801ed78:	fa96 f605 	sadd16	r6, r6, r5
 801ed7c:	fa94 f405 	sadd16	r4, r4, r5
  memcpy (*pQ15, &val, 4);
 801ed80:	f8cc 4000 	str.w	r4, [ip]
 801ed84:	f8cc 6004 	str.w	r6, [ip, #4]
 *pQ15 += 2;
 801ed88:	f10c 0c08 	add.w	ip, ip, #8
			q7_q15_offset_reordered_ele(src, dst)
			cnt--;
 801ed8c:	3b01      	subs	r3, #1
		while (cnt > 0) {
 801ed8e:	2b00      	cmp	r3, #0
 801ed90:	dcea      	bgt.n	801ed68 <convolve_1x1_s8_fpreq+0xec>
		}

		for (i_ch_out = 0; i_ch_out < output_ch; i_ch_out++) {
 801ed92:	f04f 0c00 	mov.w	ip, #0
 801ed96:	9709      	str	r7, [sp, #36]	@ 0x24
 801ed98:	f8dd b05c 	ldr.w	fp, [sp, #92]	@ 0x5c
 801ed9c:	f8dd 8064 	ldr.w	r8, [sp, #100]	@ 0x64
 801eda0:	f8dd 9068 	ldr.w	r9, [sp, #104]	@ 0x68
 801eda4:	4601      	mov	r1, r0
 801eda6:	9816      	ldr	r0, [sp, #88]	@ 0x58
 801eda8:	e01a      	b.n	801ede0 <convolve_1x1_s8_fpreq+0x164>
				sum = __SMLAD(ker_a2, in_b2, sum);

				col_count--;
			}

			sum = (q31_t) ((float) sum * scales[i_ch_out]);
 801edaa:	9e07      	ldr	r6, [sp, #28]
 801edac:	f8dd c020 	ldr.w	ip, [sp, #32]
 801edb0:	ee07 3a90 	vmov	s15, r3
 801edb4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801edb8:	4406      	add	r6, r0
 801edba:	ed96 7a00 	vldr	s14, [r6]
 801edbe:	ee67 7a87 	vmul.f32	s15, s15, s14
 801edc2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801edc6:	ee17 3a90 	vmov	r3, s15
			sum += out_offset;
 801edca:	445b      	add	r3, fp
			sum = MAX(sum, out_activation_min);
 801edcc:	4543      	cmp	r3, r8
 801edce:	bfb8      	it	lt
 801edd0:	4643      	movlt	r3, r8
			sum = MIN(sum, out_activation_max);
 801edd2:	454b      	cmp	r3, r9
 801edd4:	bfa8      	it	ge
 801edd6:	464b      	movge	r3, r9
			*out++ = (q7_t) sum;
 801edd8:	f801 3b01 	strb.w	r3, [r1], #1
		for (i_ch_out = 0; i_ch_out < output_ch; i_ch_out++) {
 801eddc:	f10c 0c01 	add.w	ip, ip, #1
 801ede0:	4562      	cmp	r2, ip
 801ede2:	dd1f      	ble.n	801ee24 <convolve_1x1_s8_fpreq+0x1a8>
			q31_t sum = bias[i_ch_out];
 801ede4:	ea4f 068c 	mov.w	r6, ip, lsl #2
 801ede8:	f85e 302c 	ldr.w	r3, [lr, ip, lsl #2]
			uint16_t col_count = (input_ch * DIM_KER_X * DIM_KER_Y) >> 2;
 801edec:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801edee:	08a4      	lsrs	r4, r4, #2
			const q15_t *ip_as_col = runtime_buf;
 801edf0:	9d1f      	ldr	r5, [sp, #124]	@ 0x7c
 801edf2:	9607      	str	r6, [sp, #28]
 801edf4:	f8cd c020 	str.w	ip, [sp, #32]
			while (col_count) {
 801edf8:	2c00      	cmp	r4, #0
 801edfa:	d0d6      	beq.n	801edaa <convolve_1x1_s8_fpreq+0x12e>
 801edfc:	f85a 6b04 	ldr.w	r6, [sl], #4
  return (op1 >> op2) | (op1 << (32U - op2));
 801ee00:	ea4f 2736 	mov.w	r7, r6, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801ee04:	fa2f f787 	sxtb16	r7, r7
 801ee08:	fa2f f686 	sxtb16	r6, r6
    memcpy(&val, *in_q15, 4);
 801ee0c:	f8d5 c000 	ldr.w	ip, [r5]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801ee10:	fb26 360c 	smlad	r6, r6, ip, r3
 801ee14:	686b      	ldr	r3, [r5, #4]
    *in_q15 += 2;
 801ee16:	3508      	adds	r5, #8
 801ee18:	fb27 6703 	smlad	r7, r7, r3, r6
				sum = __SMLAD(ker_a2, in_b2, sum);
 801ee1c:	463b      	mov	r3, r7
				col_count--;
 801ee1e:	3c01      	subs	r4, #1
 801ee20:	b2a4      	uxth	r4, r4
 801ee22:	e7e9      	b.n	801edf8 <convolve_1x1_s8_fpreq+0x17c>
		}
	}

	/* Return to application */
	return STATE_SUCCESS;
 801ee24:	2000      	movs	r0, #0
 801ee26:	e000      	b.n	801ee2a <convolve_1x1_s8_fpreq+0x1ae>
		return PARAM_NO_SUPPORT;
 801ee28:	2001      	movs	r0, #1
}
 801ee2a:	b00b      	add	sp, #44	@ 0x2c
 801ee2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return STATE_SUCCESS;
 801ee30:	2000      	movs	r0, #0
 801ee32:	e7fa      	b.n	801ee2a <convolve_1x1_s8_fpreq+0x1ae>

0801ee34 <convolve_1x1_s8_fpreq_bitmask>:
		const uint16_t input_x, const uint16_t input_y, const uint16_t input_ch,
		const q7_t *kernel, const int32_t *bias, const float *scales,
		const int32_t out_offset, const int32_t input_offset,
		const int32_t out_activation_min, const int32_t out_activation_max,
		q7_t *output, q7_t *mask, const uint16_t output_x, const uint16_t output_y,
		const uint16_t output_ch, q15_t *runtime_buf) {
 801ee34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ee38:	b08d      	sub	sp, #52	@ 0x34
 801ee3a:	f8dd a058 	ldr.w	sl, [sp, #88]	@ 0x58
 801ee3e:	9d1e      	ldr	r5, [sp, #120]	@ 0x78
 801ee40:	f8bd 8084 	ldrh.w	r8, [sp, #132]	@ 0x84
	if (input_ch % 4 != 0 || input_ch % 2 != 0) {
 801ee44:	f013 0f03 	tst.w	r3, #3
 801ee48:	f040 80ed 	bne.w	801f026 <convolve_1x1_s8_fpreq_bitmask+0x1f2>
 801ee4c:	4681      	mov	r9, r0
 801ee4e:	461f      	mov	r7, r3
		return PARAM_NO_SUPPORT;
	}
	if (output_ch % 8 != 0 && input_x > 1)
 801ee50:	f018 0f07 	tst.w	r8, #7
 801ee54:	d002      	beq.n	801ee5c <convolve_1x1_s8_fpreq_bitmask+0x28>
 801ee56:	2901      	cmp	r1, #1
 801ee58:	f200 80e9 	bhi.w	801f02e <convolve_1x1_s8_fpreq_bitmask+0x1fa>
	(void) input_y;

	/* Partial(two columns) im2col buffer */
	q15_t *two_column_buffer = runtime_buf;
	q7_t *out = output;
	const int32_t num_elements = output_x * output_y;
 801ee5c:	f8bd b07c 	ldrh.w	fp, [sp, #124]	@ 0x7c
 801ee60:	f8bd 3080 	ldrh.w	r3, [sp, #128]	@ 0x80
 801ee64:	fb03 fb0b 	mul.w	fp, r3, fp
	const int channel_div4 = (input_ch >> 2);
 801ee68:	08bb      	lsrs	r3, r7, #2

	const int16_t inoff16 = input_offset;
 801ee6a:	f9bd 4068 	ldrsh.w	r4, [sp, #104]	@ 0x68
	q31_t offset_q15x2 = __PKHBT(inoff16, inoff16, 16);
 801ee6e:	eac4 4404 	pkhbt	r4, r4, r4, lsl #16

	for (i_element = 0; i_element < num_elements / 2; i_element++) {
 801ee72:	2600      	movs	r6, #0
 801ee74:	9309      	str	r3, [sp, #36]	@ 0x24
 801ee76:	981d      	ldr	r0, [sp, #116]	@ 0x74
 801ee78:	e038      	b.n	801eeec <convolve_1x1_s8_fpreq_bitmask+0xb8>
    memcpy(&val, *in_q7, 4);
 801ee7a:	f8dc 3000 	ldr.w	r3, [ip]
  return (op1 >> op2) | (op1 << (32U - op2));
 801ee7e:	ea4f 2133 	mov.w	r1, r3, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801ee82:	fa2f f181 	sxtb16	r1, r1
 801ee86:	fa2f f383 	sxtb16	r3, r3
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801ee8a:	fa91 f104 	sadd16	r1, r1, r4
 801ee8e:	fa93 f304 	sadd16	r3, r3, r4
  memcpy (*pQ15, &val, 4);
 801ee92:	6013      	str	r3, [r2, #0]
 801ee94:	6051      	str	r1, [r2, #4]
 801ee96:	f8dc 3004 	ldr.w	r3, [ip, #4]
    *in_q7 += 4;
 801ee9a:	f10c 0c08 	add.w	ip, ip, #8
  return (op1 >> op2) | (op1 << (32U - op2));
 801ee9e:	ea4f 2133 	mov.w	r1, r3, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801eea2:	fa2f f181 	sxtb16	r1, r1
 801eea6:	fa2f f383 	sxtb16	r3, r3
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801eeaa:	fa91 f104 	sadd16	r1, r1, r4
 801eeae:	fa93 f304 	sadd16	r3, r3, r4
 801eeb2:	6093      	str	r3, [r2, #8]
 801eeb4:	60d1      	str	r1, [r2, #12]
 *pQ15 += 2;
 801eeb6:	3210      	adds	r2, #16

		int cnt = channel_div4;	//two columns
		while (cnt > 0) {
			q7_q15_offset_reordered_ele(src, dst)
			q7_q15_offset_reordered_ele(src, dst)
			cnt--;
 801eeb8:	f10e 3eff 	add.w	lr, lr, #4294967295	@ 0xffffffff
		while (cnt > 0) {
 801eebc:	f1be 0f00 	cmp.w	lr, #0
 801eec0:	dcdb      	bgt.n	801ee7a <convolve_1x1_s8_fpreq_bitmask+0x46>
		}

		out = mat_mult_kernel_s8_s16_reordered_fpreq_bitmask(kernel, two_column_buffer,
				output_ch, scales, (q7_t) out_offset, out_activation_min,
 801eec2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801eec4:	b25b      	sxtb	r3, r3
		out = mat_mult_kernel_s8_s16_reordered_fpreq_bitmask(kernel, two_column_buffer,
 801eec6:	9506      	str	r5, [sp, #24]
 801eec8:	9005      	str	r0, [sp, #20]
 801eeca:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 801eecc:	9204      	str	r2, [sp, #16]
 801eece:	9703      	str	r7, [sp, #12]
 801eed0:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 801eed2:	9202      	str	r2, [sp, #8]
 801eed4:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801eed6:	9201      	str	r2, [sp, #4]
 801eed8:	9300      	str	r3, [sp, #0]
 801eeda:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801eedc:	4642      	mov	r2, r8
 801eede:	9922      	ldr	r1, [sp, #136]	@ 0x88
 801eee0:	4650      	mov	r0, sl
 801eee2:	f001 fbfc 	bl	80206de <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask>
				out_activation_max, input_ch * DIM_KER_Y * DIM_KER_X, bias,
				out, mask);
		mask += output_ch / 4;
 801eee6:	eb05 0598 	add.w	r5, r5, r8, lsr #2
	for (i_element = 0; i_element < num_elements / 2; i_element++) {
 801eeea:	3601      	adds	r6, #1
 801eeec:	465b      	mov	r3, fp
 801eeee:	f1bb 0f00 	cmp.w	fp, #0
 801eef2:	db0a      	blt.n	801ef0a <convolve_1x1_s8_fpreq_bitmask+0xd6>
 801eef4:	ebb6 0f63 	cmp.w	r6, r3, asr #1
 801eef8:	da0a      	bge.n	801ef10 <convolve_1x1_s8_fpreq_bitmask+0xdc>
		q7_t *src = &input[i_element * input_ch * 2];
 801eefa:	fb06 fc07 	mul.w	ip, r6, r7
 801eefe:	eb09 0c4c 	add.w	ip, r9, ip, lsl #1
		q15_t *dst = two_column_buffer;
 801ef02:	9a22      	ldr	r2, [sp, #136]	@ 0x88
		int cnt = channel_div4;	//two columns
 801ef04:	f8dd e024 	ldr.w	lr, [sp, #36]	@ 0x24
		while (cnt > 0) {
 801ef08:	e7d8      	b.n	801eebc <convolve_1x1_s8_fpreq_bitmask+0x88>
	for (i_element = 0; i_element < num_elements / 2; i_element++) {
 801ef0a:	f10b 0301 	add.w	r3, fp, #1
 801ef0e:	e7f1      	b.n	801eef4 <convolve_1x1_s8_fpreq_bitmask+0xc0>
	}

	/* check if there is an odd column left-over for computation */
	if (num_elements & 0x1) {
 801ef10:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ef12:	901d      	str	r0, [sp, #116]	@ 0x74
 801ef14:	f01b 0f01 	tst.w	fp, #1
 801ef18:	f000 808b 	beq.w	801f032 <convolve_1x1_s8_fpreq_bitmask+0x1fe>
		int32_t i_ch_out;
		const q7_t *ker_a = kernel;
		q7_t *src = &input[(num_elements - 1) * input_ch];
 801ef1c:	f10b 32ff 	add.w	r2, fp, #4294967295	@ 0xffffffff
 801ef20:	fb02 9207 	mla	r2, r2, r7, r9
		q15_t *dst = two_column_buffer;
 801ef24:	9e22      	ldr	r6, [sp, #136]	@ 0x88
		q31_t in_q15x2_2;
		q31_t out_q15x2_1;
		q31_t out_q15x2_2;

		int cnt = channel_div4;	//two * numof2col columns
		while (cnt > 0) {
 801ef26:	2b00      	cmp	r3, #0
 801ef28:	dd10      	ble.n	801ef4c <convolve_1x1_s8_fpreq_bitmask+0x118>
    memcpy(&val, *in_q7, 4);
 801ef2a:	f852 1b04 	ldr.w	r1, [r2], #4
  return (op1 >> op2) | (op1 << (32U - op2));
 801ef2e:	ea4f 2031 	mov.w	r0, r1, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801ef32:	fa2f f080 	sxtb16	r0, r0
 801ef36:	fa2f f181 	sxtb16	r1, r1
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801ef3a:	fa90 f004 	sadd16	r0, r0, r4
 801ef3e:	fa91 f104 	sadd16	r1, r1, r4
  memcpy (*pQ15, &val, 4);
 801ef42:	6031      	str	r1, [r6, #0]
 801ef44:	6070      	str	r0, [r6, #4]
 *pQ15 += 2;
 801ef46:	3608      	adds	r6, #8
			q7_q15_offset_reordered_ele(src, dst)
			cnt--;
 801ef48:	3b01      	subs	r3, #1
 801ef4a:	e7ec      	b.n	801ef26 <convolve_1x1_s8_fpreq_bitmask+0xf2>
		}

		int bit_starting_idx = 0;
 801ef4c:	f04f 0c00 	mov.w	ip, #0
		for (i_ch_out = 0; i_ch_out < output_ch; i_ch_out++) {
 801ef50:	4666      	mov	r6, ip
 801ef52:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801ef54:	9919      	ldr	r1, [sp, #100]	@ 0x64
 801ef56:	f8dd b06c 	ldr.w	fp, [sp, #108]	@ 0x6c
 801ef5a:	f8dd 9070 	ldr.w	r9, [sp, #112]	@ 0x70
 801ef5e:	e02d      	b.n	801efbc <convolve_1x1_s8_fpreq_bitmask+0x188>
				sum = __SMLAD(ker_a2, in_b2, sum);

				col_count--;
			}

			sum = (q31_t) ((float) sum * scales[i_ch_out]);
 801ef60:	f8dd e024 	ldr.w	lr, [sp, #36]	@ 0x24
 801ef64:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 801ef66:	f8dd c02c 	ldr.w	ip, [sp, #44]	@ 0x2c
 801ef6a:	ee07 3a90 	vmov	s15, r3
 801ef6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801ef72:	4496      	add	lr, r2
 801ef74:	ed9e 7a00 	vldr	s14, [lr]
 801ef78:	ee67 7a87 	vmul.f32	s15, s15, s14
 801ef7c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801ef80:	ee17 3a90 	vmov	r3, s15
			sum += out_offset;
 801ef84:	440b      	add	r3, r1
			q7_t mask_value = 1;
			if (sum < out_activation_min){
 801ef86:	455b      	cmp	r3, fp
 801ef88:	db3c      	blt.n	801f004 <convolve_1x1_s8_fpreq_bitmask+0x1d0>
			q7_t mask_value = 1;
 801ef8a:	2001      	movs	r0, #1
				sum = out_activation_min;
				mask_value = 0;
			}
			if (sum > out_activation_max){
 801ef8c:	454b      	cmp	r3, r9
 801ef8e:	dd01      	ble.n	801ef94 <convolve_1x1_s8_fpreq_bitmask+0x160>
				sum = out_activation_max;
 801ef90:	464b      	mov	r3, r9
				mask_value = 0;
 801ef92:	2000      	movs	r0, #0
			}
			*out++ = (q7_t) sum;
 801ef94:	9c1d      	ldr	r4, [sp, #116]	@ 0x74
 801ef96:	f804 3b01 	strb.w	r3, [r4], #1
			if (mask_value == 1)
 801ef9a:	bbb0      	cbnz	r0, 801f00a <convolve_1x1_s8_fpreq_bitmask+0x1d6>
				BIT_SET(*mask, bit_starting_idx);
			else
				BIT_CLEAR(*mask, bit_starting_idx);
 801ef9c:	f995 0000 	ldrsb.w	r0, [r5]
 801efa0:	2301      	movs	r3, #1
 801efa2:	fa03 f30c 	lsl.w	r3, r3, ip
 801efa6:	43db      	mvns	r3, r3
 801efa8:	b2db      	uxtb	r3, r3
 801efaa:	4018      	ands	r0, r3
 801efac:	7028      	strb	r0, [r5, #0]

			bit_starting_idx += 1;
 801efae:	f10c 0c01 	add.w	ip, ip, #1
			if(bit_starting_idx == 8){
 801efb2:	f1bc 0f08 	cmp.w	ip, #8
 801efb6:	d030      	beq.n	801f01a <convolve_1x1_s8_fpreq_bitmask+0x1e6>
		for (i_ch_out = 0; i_ch_out < output_ch; i_ch_out++) {
 801efb8:	3601      	adds	r6, #1
			*out++ = (q7_t) sum;
 801efba:	941d      	str	r4, [sp, #116]	@ 0x74
		for (i_ch_out = 0; i_ch_out < output_ch; i_ch_out++) {
 801efbc:	45b0      	cmp	r8, r6
 801efbe:	dd30      	ble.n	801f022 <convolve_1x1_s8_fpreq_bitmask+0x1ee>
			q31_t sum = bias[i_ch_out];
 801efc0:	ea4f 0e86 	mov.w	lr, r6, lsl #2
 801efc4:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801efc6:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
			uint16_t col_count = (input_ch * DIM_KER_X * DIM_KER_Y) >> 2;
 801efca:	08b8      	lsrs	r0, r7, #2
			const q15_t *ip_as_col = runtime_buf;
 801efcc:	9c22      	ldr	r4, [sp, #136]	@ 0x88
 801efce:	f8cd e024 	str.w	lr, [sp, #36]	@ 0x24
 801efd2:	960a      	str	r6, [sp, #40]	@ 0x28
 801efd4:	f8cd c02c 	str.w	ip, [sp, #44]	@ 0x2c
			while (col_count) {
 801efd8:	2800      	cmp	r0, #0
 801efda:	d0c1      	beq.n	801ef60 <convolve_1x1_s8_fpreq_bitmask+0x12c>
 801efdc:	f85a 6b04 	ldr.w	r6, [sl], #4
  return (op1 >> op2) | (op1 << (32U - op2));
 801efe0:	ea4f 2c36 	mov.w	ip, r6, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801efe4:	fa2f fc8c 	sxtb16	ip, ip
 801efe8:	fa2f f686 	sxtb16	r6, r6
    memcpy(&val, *in_q15, 4);
 801efec:	f8d4 e000 	ldr.w	lr, [r4]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801eff0:	fb26 360e 	smlad	r6, r6, lr, r3
 801eff4:	6863      	ldr	r3, [r4, #4]
    *in_q15 += 2;
 801eff6:	3408      	adds	r4, #8
 801eff8:	fb2c 6c03 	smlad	ip, ip, r3, r6
				sum = __SMLAD(ker_a2, in_b2, sum);
 801effc:	4663      	mov	r3, ip
				col_count--;
 801effe:	3801      	subs	r0, #1
 801f000:	b280      	uxth	r0, r0
 801f002:	e7e9      	b.n	801efd8 <convolve_1x1_s8_fpreq_bitmask+0x1a4>
				sum = out_activation_min;
 801f004:	465b      	mov	r3, fp
				mask_value = 0;
 801f006:	2000      	movs	r0, #0
 801f008:	e7c0      	b.n	801ef8c <convolve_1x1_s8_fpreq_bitmask+0x158>
				BIT_SET(*mask, bit_starting_idx);
 801f00a:	f995 3000 	ldrsb.w	r3, [r5]
 801f00e:	2001      	movs	r0, #1
 801f010:	fa00 f00c 	lsl.w	r0, r0, ip
 801f014:	4303      	orrs	r3, r0
 801f016:	702b      	strb	r3, [r5, #0]
 801f018:	e7c9      	b.n	801efae <convolve_1x1_s8_fpreq_bitmask+0x17a>
				bit_starting_idx = 0;
				mask++;
 801f01a:	3501      	adds	r5, #1
				bit_starting_idx = 0;
 801f01c:	f04f 0c00 	mov.w	ip, #0
 801f020:	e7ca      	b.n	801efb8 <convolve_1x1_s8_fpreq_bitmask+0x184>
			}
		}
	}

	/* Return to application */
	return STATE_SUCCESS;
 801f022:	2000      	movs	r0, #0
 801f024:	e000      	b.n	801f028 <convolve_1x1_s8_fpreq_bitmask+0x1f4>
		return PARAM_NO_SUPPORT;
 801f026:	2001      	movs	r0, #1
}
 801f028:	b00d      	add	sp, #52	@ 0x34
 801f02a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return PARAM_NO_SUPPORT;
 801f02e:	2001      	movs	r0, #1
 801f030:	e7fa      	b.n	801f028 <convolve_1x1_s8_fpreq_bitmask+0x1f4>
	return STATE_SUCCESS;
 801f032:	2000      	movs	r0, #0
 801f034:	e7f8      	b.n	801f028 <convolve_1x1_s8_fpreq_bitmask+0x1f4>

0801f036 <convolve_1x1_s8_fpreq_bitmask_partialCH>:
		const uint16_t input_x, const uint16_t input_y, const uint16_t input_ch,
		const q7_t *kernel_sram, const q7_t *kernel_flash, const uint16_t first_k_channel, const int32_t *bias, const float *scales,
		const int32_t out_offset, const int32_t input_offset,
		const int32_t out_activation_min, const int32_t out_activation_max,
		q7_t *output, q7_t *mask, const uint16_t output_x, const uint16_t output_y,
		const uint16_t output_ch, q15_t *runtime_buf) {
 801f036:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f03a:	b08f      	sub	sp, #60	@ 0x3c
 801f03c:	900b      	str	r0, [sp, #44]	@ 0x2c
 801f03e:	f8dd a064 	ldr.w	sl, [sp, #100]	@ 0x64
 801f042:	f8bd 8068 	ldrh.w	r8, [sp, #104]	@ 0x68
 801f046:	9d22      	ldr	r5, [sp, #136]	@ 0x88
 801f048:	f8bd 2094 	ldrh.w	r2, [sp, #148]	@ 0x94
 801f04c:	920d      	str	r2, [sp, #52]	@ 0x34
	if (input_ch % 4 != 0 || input_ch % 2 != 0) {
 801f04e:	f013 0f03 	tst.w	r3, #3
 801f052:	f040 81f3 	bne.w	801f43c <convolve_1x1_s8_fpreq_bitmask_partialCH+0x406>
 801f056:	461f      	mov	r7, r3
	(void) input_y;

	/* Partial(two columns) im2col buffer */
	q15_t *two_column_buffer = runtime_buf;
	q7_t *out = output;
	const int32_t num_elements = output_x * output_y;
 801f058:	f8bd b08c 	ldrh.w	fp, [sp, #140]	@ 0x8c
 801f05c:	f8bd 3090 	ldrh.w	r3, [sp, #144]	@ 0x90
 801f060:	fb03 fb0b 	mul.w	fp, r3, fp
	const int channel_div4 = (input_ch >> 2);
 801f064:	ea4f 0e97 	mov.w	lr, r7, lsr #2

	const int16_t inoff16 = input_offset;
 801f068:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801f06a:	b21c      	sxth	r4, r3
	q31_t offset_q15x2 = __PKHBT(inoff16, inoff16, 16);
 801f06c:	eac4 4404 	pkhbt	r4, r4, r4, lsl #16

	for (i_element = 0; i_element < num_elements / 2; i_element++) {
 801f070:	2600      	movs	r6, #0
 801f072:	f8cd e030 	str.w	lr, [sp, #48]	@ 0x30
 801f076:	9821      	ldr	r0, [sp, #132]	@ 0x84
 801f078:	4691      	mov	r9, r2
 801f07a:	e03b      	b.n	801f0f4 <convolve_1x1_s8_fpreq_bitmask_partialCH+0xbe>
    memcpy(&val, *in_q7, 4);
 801f07c:	681a      	ldr	r2, [r3, #0]
  return (op1 >> op2) | (op1 << (32U - op2));
 801f07e:	ea4f 2c32 	mov.w	ip, r2, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801f082:	fa2f fc8c 	sxtb16	ip, ip
 801f086:	fa2f f282 	sxtb16	r2, r2
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801f08a:	fa9c fc04 	sadd16	ip, ip, r4
 801f08e:	fa92 f204 	sadd16	r2, r2, r4
  memcpy (*pQ15, &val, 4);
 801f092:	600a      	str	r2, [r1, #0]
 801f094:	f8c1 c004 	str.w	ip, [r1, #4]
 801f098:	685a      	ldr	r2, [r3, #4]
    *in_q7 += 4;
 801f09a:	3308      	adds	r3, #8
  return (op1 >> op2) | (op1 << (32U - op2));
 801f09c:	ea4f 2c32 	mov.w	ip, r2, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801f0a0:	fa2f fc8c 	sxtb16	ip, ip
 801f0a4:	fa2f f282 	sxtb16	r2, r2
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801f0a8:	fa9c fc04 	sadd16	ip, ip, r4
 801f0ac:	fa92 f204 	sadd16	r2, r2, r4
 801f0b0:	608a      	str	r2, [r1, #8]
 801f0b2:	f8c1 c00c 	str.w	ip, [r1, #12]
 *pQ15 += 2;
 801f0b6:	3110      	adds	r1, #16
		if (first_k_channel % 4 == 0){
			int cnt = channel_div4;	//two columns
			while (cnt > 0) {
				q7_q15_offset_reordered_ele(src, dst)
				q7_q15_offset_reordered_ele(src, dst)
				cnt--;
 801f0b8:	f10e 3eff 	add.w	lr, lr, #4294967295	@ 0xffffffff
			while (cnt > 0) {
 801f0bc:	f1be 0f00 	cmp.w	lr, #0
 801f0c0:	dcdc      	bgt.n	801f07c <convolve_1x1_s8_fpreq_bitmask_partialCH+0x46>
			}
			out = mat_mult_kernel_s8_s16_reordered_fpreq_bitmask_partialCH(kernel_sram, kernel_flash, first_k_channel,
					two_column_buffer, output_ch, scales, (q7_t) out_offset, out_activation_min,
 801f0c2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801f0c4:	b25b      	sxtb	r3, r3
			out = mat_mult_kernel_s8_s16_reordered_fpreq_bitmask_partialCH(kernel_sram, kernel_flash, first_k_channel,
 801f0c6:	9508      	str	r5, [sp, #32]
 801f0c8:	9007      	str	r0, [sp, #28]
 801f0ca:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801f0cc:	9206      	str	r2, [sp, #24]
 801f0ce:	9705      	str	r7, [sp, #20]
 801f0d0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801f0d2:	9204      	str	r2, [sp, #16]
 801f0d4:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 801f0d6:	9203      	str	r2, [sp, #12]
 801f0d8:	9302      	str	r3, [sp, #8]
 801f0da:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801f0dc:	9301      	str	r3, [sp, #4]
 801f0de:	f8cd 9000 	str.w	r9, [sp]
 801f0e2:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801f0e4:	4642      	mov	r2, r8
 801f0e6:	4651      	mov	r1, sl
 801f0e8:	9818      	ldr	r0, [sp, #96]	@ 0x60
 801f0ea:	f001 fc3d 	bl	8020968 <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask_partialCH>
			out = mat_mult_kernel_s8_s16_reordered_fpreq_bitmask_partialCH_Multiple2(kernel_sram, kernel_flash, first_k_channel,
					two_column_buffer, output_ch, scales, (q7_t) out_offset, out_activation_min,
					out_activation_max, input_ch * DIM_KER_Y * DIM_KER_X, bias,
					out, mask);
		}
		mask += output_ch / 4;
 801f0ee:	eb05 0599 	add.w	r5, r5, r9, lsr #2
	for (i_element = 0; i_element < num_elements / 2; i_element++) {
 801f0f2:	3601      	adds	r6, #1
 801f0f4:	465b      	mov	r3, fp
 801f0f6:	f1bb 0f00 	cmp.w	fp, #0
 801f0fa:	db61      	blt.n	801f1c0 <convolve_1x1_s8_fpreq_bitmask_partialCH+0x18a>
 801f0fc:	ebb6 0f63 	cmp.w	r6, r3, asr #1
 801f100:	da61      	bge.n	801f1c6 <convolve_1x1_s8_fpreq_bitmask_partialCH+0x190>
		q7_t *src = &input[i_element * input_ch * 2];
 801f102:	fb06 f307 	mul.w	r3, r6, r7
 801f106:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801f108:	eb02 0343 	add.w	r3, r2, r3, lsl #1
		if (first_k_channel % 4 == 0){
 801f10c:	f018 0f03 	tst.w	r8, #3
 801f110:	d003      	beq.n	801f11a <convolve_1x1_s8_fpreq_bitmask_partialCH+0xe4>
		q15_t *dst = two_column_buffer;
 801f112:	9a26      	ldr	r2, [sp, #152]	@ 0x98
			int cnt = channel_div4;	//two columns
 801f114:	f8dd c030 	ldr.w	ip, [sp, #48]	@ 0x30
 801f118:	e038      	b.n	801f18c <convolve_1x1_s8_fpreq_bitmask_partialCH+0x156>
		q15_t *dst = two_column_buffer;
 801f11a:	9926      	ldr	r1, [sp, #152]	@ 0x98
			int cnt = channel_div4;	//two columns
 801f11c:	f8dd e030 	ldr.w	lr, [sp, #48]	@ 0x30
 801f120:	e7cc      	b.n	801f0bc <convolve_1x1_s8_fpreq_bitmask_partialCH+0x86>
				dst[0] = src[0] + input_offset;
 801f122:	f993 e000 	ldrsb.w	lr, [r3]
 801f126:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801f128:	b289      	uxth	r1, r1
 801f12a:	fa11 fe8e 	uxtah	lr, r1, lr
 801f12e:	f8a2 e000 	strh.w	lr, [r2]
				dst[1] = src[1] + input_offset;
 801f132:	f993 e001 	ldrsb.w	lr, [r3, #1]
 801f136:	fa11 fe8e 	uxtah	lr, r1, lr
 801f13a:	f8a2 e002 	strh.w	lr, [r2, #2]
				dst[2] = src[2] + input_offset;
 801f13e:	f993 e002 	ldrsb.w	lr, [r3, #2]
 801f142:	fa11 fe8e 	uxtah	lr, r1, lr
 801f146:	f8a2 e004 	strh.w	lr, [r2, #4]
				dst[3] = src[3] + input_offset;
 801f14a:	f993 e003 	ldrsb.w	lr, [r3, #3]
 801f14e:	fa11 fe8e 	uxtah	lr, r1, lr
 801f152:	f8a2 e006 	strh.w	lr, [r2, #6]
				dst[4] = src[4] + input_offset;
 801f156:	f993 e004 	ldrsb.w	lr, [r3, #4]
 801f15a:	fa11 fe8e 	uxtah	lr, r1, lr
 801f15e:	f8a2 e008 	strh.w	lr, [r2, #8]
				dst[5] = src[5] + input_offset;
 801f162:	f993 e005 	ldrsb.w	lr, [r3, #5]
 801f166:	fa11 fe8e 	uxtah	lr, r1, lr
 801f16a:	f8a2 e00a 	strh.w	lr, [r2, #10]
				dst[6] = src[6] + input_offset;
 801f16e:	f993 e006 	ldrsb.w	lr, [r3, #6]
 801f172:	fa11 fe8e 	uxtah	lr, r1, lr
 801f176:	f8a2 e00c 	strh.w	lr, [r2, #12]
				dst[7] = src[7] + input_offset;
 801f17a:	f993 e007 	ldrsb.w	lr, [r3, #7]
 801f17e:	fa11 f18e 	uxtah	r1, r1, lr
 801f182:	81d1      	strh	r1, [r2, #14]
				src += 8;
 801f184:	3308      	adds	r3, #8
				dst += 8;
 801f186:	3210      	adds	r2, #16
				cnt--;
 801f188:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
			while (cnt > 0) {
 801f18c:	f1bc 0f00 	cmp.w	ip, #0
 801f190:	dcc7      	bgt.n	801f122 <convolve_1x1_s8_fpreq_bitmask_partialCH+0xec>
					two_column_buffer, output_ch, scales, (q7_t) out_offset, out_activation_min,
 801f192:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801f194:	b25b      	sxtb	r3, r3
			out = mat_mult_kernel_s8_s16_reordered_fpreq_bitmask_partialCH_Multiple2(kernel_sram, kernel_flash, first_k_channel,
 801f196:	9508      	str	r5, [sp, #32]
 801f198:	9007      	str	r0, [sp, #28]
 801f19a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801f19c:	9206      	str	r2, [sp, #24]
 801f19e:	9705      	str	r7, [sp, #20]
 801f1a0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801f1a2:	9204      	str	r2, [sp, #16]
 801f1a4:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 801f1a6:	9203      	str	r2, [sp, #12]
 801f1a8:	9302      	str	r3, [sp, #8]
 801f1aa:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801f1ac:	9301      	str	r3, [sp, #4]
 801f1ae:	f8cd 9000 	str.w	r9, [sp]
 801f1b2:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801f1b4:	4642      	mov	r2, r8
 801f1b6:	4651      	mov	r1, sl
 801f1b8:	9818      	ldr	r0, [sp, #96]	@ 0x60
 801f1ba:	f001 fd6a 	bl	8020c92 <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask_partialCH_Multiple2>
 801f1be:	e796      	b.n	801f0ee <convolve_1x1_s8_fpreq_bitmask_partialCH+0xb8>
	for (i_element = 0; i_element < num_elements / 2; i_element++) {
 801f1c0:	f10b 0301 	add.w	r3, fp, #1
 801f1c4:	e79a      	b.n	801f0fc <convolve_1x1_s8_fpreq_bitmask_partialCH+0xc6>
	}

	/* check if there is an odd column left-over for computation */
	if (num_elements & 0x1) {
 801f1c6:	f8dd e030 	ldr.w	lr, [sp, #48]	@ 0x30
 801f1ca:	f8dd 9060 	ldr.w	r9, [sp, #96]	@ 0x60
 801f1ce:	9021      	str	r0, [sp, #132]	@ 0x84
 801f1d0:	f01b 0f01 	tst.w	fp, #1
 801f1d4:	f000 8136 	beq.w	801f444 <convolve_1x1_s8_fpreq_bitmask_partialCH+0x40e>
		int32_t i_ch_out;
		const q7_t *ker_sram = kernel_sram;
		const q7_t *ker_flash = kernel_flash;
		q7_t *src = &input[(num_elements - 1) * input_ch];
 801f1d8:	f10b 33ff 	add.w	r3, fp, #4294967295	@ 0xffffffff
 801f1dc:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801f1de:	fb03 2307 	mla	r3, r3, r7, r2
		q31_t out_q15x2_1;
		q31_t out_q15x2_2;


		const uint16_t num_col_sram = first_k_channel;
		const uint16_t num_col_flash = input_ch - first_k_channel;
 801f1e2:	eba7 0708 	sub.w	r7, r7, r8
 801f1e6:	fa1f fb87 	uxth.w	fp, r7

		int bit_starting_idx = 0;
		if (first_k_channel %4 == 0){
 801f1ea:	f018 0f03 	tst.w	r8, #3
 801f1ee:	d01c      	beq.n	801f22a <convolve_1x1_s8_fpreq_bitmask_partialCH+0x1f4>
		q15_t *dst = two_column_buffer;
 801f1f0:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 801f1f2:	e0ab      	b.n	801f34c <convolve_1x1_s8_fpreq_bitmask_partialCH+0x316>
    memcpy(&val, *in_q7, 4);
 801f1f4:	f853 2b04 	ldr.w	r2, [r3], #4
  return (op1 >> op2) | (op1 << (32U - op2));
 801f1f8:	ea4f 2132 	mov.w	r1, r2, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801f1fc:	fa2f f181 	sxtb16	r1, r1
 801f200:	fa2f f282 	sxtb16	r2, r2
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801f204:	fa91 f104 	sadd16	r1, r1, r4
 801f208:	fa92 f204 	sadd16	r2, r2, r4
  memcpy (*pQ15, &val, 4);
 801f20c:	6002      	str	r2, [r0, #0]
 801f20e:	6041      	str	r1, [r0, #4]
 *pQ15 += 2;
 801f210:	3008      	adds	r0, #8
			int cnt = channel_div4;	//two * numof2col columns
			while (cnt > 0) {
				q7_q15_offset_reordered_ele(src, dst)
				cnt--;
 801f212:	f10e 3eff 	add.w	lr, lr, #4294967295	@ 0xffffffff
			while (cnt > 0) {
 801f216:	f1be 0f00 	cmp.w	lr, #0
 801f21a:	dceb      	bgt.n	801f1f4 <convolve_1x1_s8_fpreq_bitmask_partialCH+0x1be>
		int bit_starting_idx = 0;
 801f21c:	2600      	movs	r6, #0
			}
			for (i_ch_out = 0; i_ch_out < output_ch; i_ch_out++) {
 801f21e:	4634      	mov	r4, r6
 801f220:	991f      	ldr	r1, [sp, #124]	@ 0x7c
 801f222:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801f224:	f8dd e034 	ldr.w	lr, [sp, #52]	@ 0x34
 801f228:	e044      	b.n	801f2b4 <convolve_1x1_s8_fpreq_bitmask_partialCH+0x27e>
		q15_t *dst = two_column_buffer;
 801f22a:	9826      	ldr	r0, [sp, #152]	@ 0x98
 801f22c:	e7f3      	b.n	801f216 <convolve_1x1_s8_fpreq_bitmask_partialCH+0x1e0>
					sum = __SMLAD(ker_a2, in_b2, sum);

					col_count--;
				}

				col_count = num_col_flash / 4;
 801f22e:	ea4f 0c9b 	mov.w	ip, fp, lsr #2
				//Flash
				while (col_count) {
 801f232:	4667      	mov	r7, ip
 801f234:	b19f      	cbz	r7, 801f25e <convolve_1x1_s8_fpreq_bitmask_partialCH+0x228>
 801f236:	f85a 4b04 	ldr.w	r4, [sl], #4
  return (op1 >> op2) | (op1 << (32U - op2));
 801f23a:	ea4f 2634 	mov.w	r6, r4, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801f23e:	fa2f f686 	sxtb16	r6, r6
 801f242:	fa2f f484 	sxtb16	r4, r4
    memcpy(&val, *in_q15, 4);
 801f246:	f8d0 c000 	ldr.w	ip, [r0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801f24a:	fb24 340c 	smlad	r4, r4, ip, r3
 801f24e:	6843      	ldr	r3, [r0, #4]
    *in_q15 += 2;
 801f250:	3008      	adds	r0, #8
 801f252:	fb26 4603 	smlad	r6, r6, r3, r4
					ker_flash = read_and_pad_reordered(ker_flash, &ker_a1, &ker_a2);

					in_b1 = arm_nn_read_q15x2_ia(&ip_as_col);
					sum = __SMLAD(ker_a1, in_b1, sum);
					in_b2 = arm_nn_read_q15x2_ia(&ip_as_col);
					sum = __SMLAD(ker_a2, in_b2, sum);
 801f256:	4633      	mov	r3, r6

					col_count--;
 801f258:	3f01      	subs	r7, #1
 801f25a:	b2bf      	uxth	r7, r7
 801f25c:	e7ea      	b.n	801f234 <convolve_1x1_s8_fpreq_bitmask_partialCH+0x1fe>
				}

				sum = (q31_t) ((float) sum * scales[i_ch_out]);
 801f25e:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801f260:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801f262:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
 801f264:	ee07 3a90 	vmov	s15, r3
 801f268:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801f26c:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801f26e:	441f      	add	r7, r3
 801f270:	ed97 7a00 	vldr	s14, [r7]
 801f274:	ee67 7a87 	vmul.f32	s15, s15, s14
 801f278:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801f27c:	ee17 3a90 	vmov	r3, s15
				sum += out_offset;
 801f280:	981d      	ldr	r0, [sp, #116]	@ 0x74
 801f282:	4403      	add	r3, r0
				q7_t mask_value = 1;
				if (sum < out_activation_min){
 801f284:	4299      	cmp	r1, r3
 801f286:	dc38      	bgt.n	801f2fa <convolve_1x1_s8_fpreq_bitmask_partialCH+0x2c4>
				q7_t mask_value = 1;
 801f288:	2701      	movs	r7, #1
					sum = out_activation_min;
					mask_value = 0;
				}
				if (sum > out_activation_max){
 801f28a:	4293      	cmp	r3, r2
 801f28c:	dd01      	ble.n	801f292 <convolve_1x1_s8_fpreq_bitmask_partialCH+0x25c>
					sum = out_activation_max;
 801f28e:	4613      	mov	r3, r2
					mask_value = 0;
 801f290:	2700      	movs	r7, #0
				}
				*out++ = (q7_t) sum;
 801f292:	9821      	ldr	r0, [sp, #132]	@ 0x84
 801f294:	f800 3b01 	strb.w	r3, [r0], #1
				if (mask_value == 1)
 801f298:	bb97      	cbnz	r7, 801f300 <convolve_1x1_s8_fpreq_bitmask_partialCH+0x2ca>
					BIT_SET(*mask, bit_starting_idx);
				else
					BIT_CLEAR(*mask, bit_starting_idx);
 801f29a:	f995 7000 	ldrsb.w	r7, [r5]
 801f29e:	2301      	movs	r3, #1
 801f2a0:	40b3      	lsls	r3, r6
 801f2a2:	43db      	mvns	r3, r3
 801f2a4:	b2db      	uxtb	r3, r3
 801f2a6:	401f      	ands	r7, r3
 801f2a8:	702f      	strb	r7, [r5, #0]

				bit_starting_idx += 1;
 801f2aa:	3601      	adds	r6, #1
				if(bit_starting_idx == 8){
 801f2ac:	2e08      	cmp	r6, #8
 801f2ae:	d02e      	beq.n	801f30e <convolve_1x1_s8_fpreq_bitmask_partialCH+0x2d8>
			for (i_ch_out = 0; i_ch_out < output_ch; i_ch_out++) {
 801f2b0:	3401      	adds	r4, #1
				*out++ = (q7_t) sum;
 801f2b2:	9021      	str	r0, [sp, #132]	@ 0x84
			for (i_ch_out = 0; i_ch_out < output_ch; i_ch_out++) {
 801f2b4:	45a6      	cmp	lr, r4
 801f2b6:	dd2d      	ble.n	801f314 <convolve_1x1_s8_fpreq_bitmask_partialCH+0x2de>
				q31_t sum = bias[i_ch_out];
 801f2b8:	00a7      	lsls	r7, r4, #2
 801f2ba:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801f2bc:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
				uint16_t col_count = num_col_sram / 4;
 801f2c0:	ea4f 0c98 	mov.w	ip, r8, lsr #2
				const q15_t *ip_as_col = runtime_buf;
 801f2c4:	9826      	ldr	r0, [sp, #152]	@ 0x98
 801f2c6:	970b      	str	r7, [sp, #44]	@ 0x2c
 801f2c8:	940c      	str	r4, [sp, #48]	@ 0x30
 801f2ca:	960d      	str	r6, [sp, #52]	@ 0x34
 801f2cc:	4667      	mov	r7, ip
				while (col_count) {
 801f2ce:	2f00      	cmp	r7, #0
 801f2d0:	d0ad      	beq.n	801f22e <convolve_1x1_s8_fpreq_bitmask_partialCH+0x1f8>
    memcpy(&val, *in_q7, 4);
 801f2d2:	f859 4b04 	ldr.w	r4, [r9], #4
  return (op1 >> op2) | (op1 << (32U - op2));
 801f2d6:	ea4f 2634 	mov.w	r6, r4, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801f2da:	fa2f f686 	sxtb16	r6, r6
 801f2de:	fa2f f484 	sxtb16	r4, r4
    memcpy(&val, *in_q15, 4);
 801f2e2:	f8d0 c000 	ldr.w	ip, [r0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801f2e6:	fb24 340c 	smlad	r4, r4, ip, r3
 801f2ea:	6843      	ldr	r3, [r0, #4]
    *in_q15 += 2;
 801f2ec:	3008      	adds	r0, #8
 801f2ee:	fb26 4603 	smlad	r6, r6, r3, r4
					sum = __SMLAD(ker_a2, in_b2, sum);
 801f2f2:	4633      	mov	r3, r6
					col_count--;
 801f2f4:	3f01      	subs	r7, #1
 801f2f6:	b2bf      	uxth	r7, r7
 801f2f8:	e7e9      	b.n	801f2ce <convolve_1x1_s8_fpreq_bitmask_partialCH+0x298>
					sum = out_activation_min;
 801f2fa:	460b      	mov	r3, r1
					mask_value = 0;
 801f2fc:	2700      	movs	r7, #0
 801f2fe:	e7c4      	b.n	801f28a <convolve_1x1_s8_fpreq_bitmask_partialCH+0x254>
					BIT_SET(*mask, bit_starting_idx);
 801f300:	f995 3000 	ldrsb.w	r3, [r5]
 801f304:	2701      	movs	r7, #1
 801f306:	40b7      	lsls	r7, r6
 801f308:	433b      	orrs	r3, r7
 801f30a:	702b      	strb	r3, [r5, #0]
 801f30c:	e7cd      	b.n	801f2aa <convolve_1x1_s8_fpreq_bitmask_partialCH+0x274>
					bit_starting_idx = 0;
					mask++;
 801f30e:	3501      	adds	r5, #1
					bit_starting_idx = 0;
 801f310:	2600      	movs	r6, #0
 801f312:	e7cd      	b.n	801f2b0 <convolve_1x1_s8_fpreq_bitmask_partialCH+0x27a>
			}
		}
	}

	/* Return to application */
	return STATE_SUCCESS;
 801f314:	2000      	movs	r0, #0
 801f316:	e092      	b.n	801f43e <convolve_1x1_s8_fpreq_bitmask_partialCH+0x408>
				dst[0] = src[0] + input_offset;
 801f318:	f993 0000 	ldrsb.w	r0, [r3]
 801f31c:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801f31e:	b289      	uxth	r1, r1
 801f320:	fa11 f080 	uxtah	r0, r1, r0
 801f324:	8010      	strh	r0, [r2, #0]
				dst[1] = src[1] + input_offset;
 801f326:	f993 0001 	ldrsb.w	r0, [r3, #1]
 801f32a:	fa11 f080 	uxtah	r0, r1, r0
 801f32e:	8050      	strh	r0, [r2, #2]
				dst[2] = src[2] + input_offset;
 801f330:	f993 0002 	ldrsb.w	r0, [r3, #2]
 801f334:	fa11 f080 	uxtah	r0, r1, r0
 801f338:	8090      	strh	r0, [r2, #4]
				dst[3] = src[3] + input_offset;
 801f33a:	f993 0003 	ldrsb.w	r0, [r3, #3]
 801f33e:	fa11 f180 	uxtah	r1, r1, r0
 801f342:	80d1      	strh	r1, [r2, #6]
				src += 4;
 801f344:	3304      	adds	r3, #4
				dst += 4;
 801f346:	3208      	adds	r2, #8
				cnt--;
 801f348:	f10e 3eff 	add.w	lr, lr, #4294967295	@ 0xffffffff
			while (cnt > 0) {
 801f34c:	f1be 0f00 	cmp.w	lr, #0
 801f350:	dce2      	bgt.n	801f318 <convolve_1x1_s8_fpreq_bitmask_partialCH+0x2e2>
		int bit_starting_idx = 0;
 801f352:	2400      	movs	r4, #0
			for (i_ch_out = 0; i_ch_out < output_ch; i_ch_out++) {
 801f354:	4620      	mov	r0, r4
 801f356:	f8dd e07c 	ldr.w	lr, [sp, #124]	@ 0x7c
 801f35a:	f8dd c080 	ldr.w	ip, [sp, #128]	@ 0x80
 801f35e:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 801f360:	e03e      	b.n	801f3e0 <convolve_1x1_s8_fpreq_bitmask_partialCH+0x3aa>
				col_count = num_col_flash / 2;
 801f362:	ea4f 025b 	mov.w	r2, fp, lsr #1
				while (col_count) {
 801f366:	b18a      	cbz	r2, 801f38c <convolve_1x1_s8_fpreq_bitmask_partialCH+0x356>
					sum += ip_as_col[0] * ker_flash[0];
 801f368:	f9b1 0000 	ldrsh.w	r0, [r1]
 801f36c:	f99a 6000 	ldrsb.w	r6, [sl]
 801f370:	fb06 3300 	mla	r3, r6, r0, r3
					sum += ip_as_col[1] * ker_flash[1];
 801f374:	f9b1 0002 	ldrsh.w	r0, [r1, #2]
 801f378:	f99a 6001 	ldrsb.w	r6, [sl, #1]
 801f37c:	fb06 3300 	mla	r3, r6, r0, r3
					ip_as_col += 2;
 801f380:	3104      	adds	r1, #4
					ker_flash += 2;
 801f382:	f10a 0a02 	add.w	sl, sl, #2
					col_count--;
 801f386:	3a01      	subs	r2, #1
 801f388:	b292      	uxth	r2, r2
 801f38a:	e7ec      	b.n	801f366 <convolve_1x1_s8_fpreq_bitmask_partialCH+0x330>
				sum = (q31_t) ((float) sum * scales[i_ch_out]);
 801f38c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801f38e:	980c      	ldr	r0, [sp, #48]	@ 0x30
 801f390:	ee07 3a90 	vmov	s15, r3
 801f394:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801f398:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801f39a:	441e      	add	r6, r3
 801f39c:	ed96 7a00 	vldr	s14, [r6]
 801f3a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 801f3a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801f3a8:	ee17 3a90 	vmov	r3, s15
				sum += out_offset;
 801f3ac:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 801f3ae:	4413      	add	r3, r2
				if (sum < out_activation_min){
 801f3b0:	4573      	cmp	r3, lr
 801f3b2:	db34      	blt.n	801f41e <convolve_1x1_s8_fpreq_bitmask_partialCH+0x3e8>
				q7_t mask_value = 1;
 801f3b4:	2101      	movs	r1, #1
				if (sum > out_activation_max){
 801f3b6:	4563      	cmp	r3, ip
 801f3b8:	dd01      	ble.n	801f3be <convolve_1x1_s8_fpreq_bitmask_partialCH+0x388>
					sum = out_activation_max;
 801f3ba:	4663      	mov	r3, ip
					mask_value = 0;
 801f3bc:	2100      	movs	r1, #0
				*out++ = (q7_t) sum;
 801f3be:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801f3c0:	f802 3b01 	strb.w	r3, [r2], #1
				if (mask_value == 1)
 801f3c4:	bb71      	cbnz	r1, 801f424 <convolve_1x1_s8_fpreq_bitmask_partialCH+0x3ee>
					BIT_CLEAR(*mask, bit_starting_idx);
 801f3c6:	f995 1000 	ldrsb.w	r1, [r5]
 801f3ca:	2301      	movs	r3, #1
 801f3cc:	40a3      	lsls	r3, r4
 801f3ce:	43db      	mvns	r3, r3
 801f3d0:	b2db      	uxtb	r3, r3
 801f3d2:	4019      	ands	r1, r3
 801f3d4:	7029      	strb	r1, [r5, #0]
				bit_starting_idx += 1;
 801f3d6:	3401      	adds	r4, #1
				if(bit_starting_idx == 8){
 801f3d8:	2c08      	cmp	r4, #8
 801f3da:	d02a      	beq.n	801f432 <convolve_1x1_s8_fpreq_bitmask_partialCH+0x3fc>
			for (i_ch_out = 0; i_ch_out < output_ch; i_ch_out++) {
 801f3dc:	3001      	adds	r0, #1
				*out++ = (q7_t) sum;
 801f3de:	9221      	str	r2, [sp, #132]	@ 0x84
			for (i_ch_out = 0; i_ch_out < output_ch; i_ch_out++) {
 801f3e0:	4287      	cmp	r7, r0
 801f3e2:	dd29      	ble.n	801f438 <convolve_1x1_s8_fpreq_bitmask_partialCH+0x402>
				q31_t sum = bias[i_ch_out];
 801f3e4:	0086      	lsls	r6, r0, #2
 801f3e6:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801f3e8:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
				uint16_t col_count = num_col_sram / 2;
 801f3ec:	ea4f 0258 	mov.w	r2, r8, lsr #1
				const q15_t *ip_as_col = runtime_buf;
 801f3f0:	9926      	ldr	r1, [sp, #152]	@ 0x98
 801f3f2:	960b      	str	r6, [sp, #44]	@ 0x2c
 801f3f4:	900c      	str	r0, [sp, #48]	@ 0x30
				while (col_count) {
 801f3f6:	2a00      	cmp	r2, #0
 801f3f8:	d0b3      	beq.n	801f362 <convolve_1x1_s8_fpreq_bitmask_partialCH+0x32c>
					sum += ip_as_col[0] * ker_sram[0];
 801f3fa:	f9b1 0000 	ldrsh.w	r0, [r1]
 801f3fe:	f999 6000 	ldrsb.w	r6, [r9]
 801f402:	fb06 3300 	mla	r3, r6, r0, r3
					sum += ip_as_col[1] * ker_sram[1];
 801f406:	f9b1 0002 	ldrsh.w	r0, [r1, #2]
 801f40a:	f999 6001 	ldrsb.w	r6, [r9, #1]
 801f40e:	fb06 3300 	mla	r3, r6, r0, r3
					ip_as_col += 2;
 801f412:	3104      	adds	r1, #4
					ker_sram += 2;
 801f414:	f109 0902 	add.w	r9, r9, #2
					col_count--;
 801f418:	3a01      	subs	r2, #1
 801f41a:	b292      	uxth	r2, r2
 801f41c:	e7eb      	b.n	801f3f6 <convolve_1x1_s8_fpreq_bitmask_partialCH+0x3c0>
					sum = out_activation_min;
 801f41e:	4673      	mov	r3, lr
					mask_value = 0;
 801f420:	2100      	movs	r1, #0
 801f422:	e7c8      	b.n	801f3b6 <convolve_1x1_s8_fpreq_bitmask_partialCH+0x380>
					BIT_SET(*mask, bit_starting_idx);
 801f424:	f995 3000 	ldrsb.w	r3, [r5]
 801f428:	2101      	movs	r1, #1
 801f42a:	40a1      	lsls	r1, r4
 801f42c:	430b      	orrs	r3, r1
 801f42e:	702b      	strb	r3, [r5, #0]
 801f430:	e7d1      	b.n	801f3d6 <convolve_1x1_s8_fpreq_bitmask_partialCH+0x3a0>
					mask++;
 801f432:	3501      	adds	r5, #1
					bit_starting_idx = 0;
 801f434:	2400      	movs	r4, #0
 801f436:	e7d1      	b.n	801f3dc <convolve_1x1_s8_fpreq_bitmask_partialCH+0x3a6>
	return STATE_SUCCESS;
 801f438:	2000      	movs	r0, #0
 801f43a:	e000      	b.n	801f43e <convolve_1x1_s8_fpreq_bitmask_partialCH+0x408>
		return PARAM_NO_SUPPORT;
 801f43c:	2001      	movs	r0, #1
}
 801f43e:	b00f      	add	sp, #60	@ 0x3c
 801f440:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return STATE_SUCCESS;
 801f444:	2000      	movs	r0, #0
 801f446:	e7fa      	b.n	801f43e <convolve_1x1_s8_fpreq_bitmask_partialCH+0x408>

0801f448 <convolve_s8_kernel3_inputch3_stride2_pad1_fpreq>:
		const float *scales, const int32_t output_offset,
		const int32_t input_offset, const int32_t output_activation_min,
		const int32_t output_activation_max, q7_t *output,
		const uint16_t output_x, const uint16_t output_y,
		const uint16_t output_ch, q15_t *runtime_buf, q15_t *kbuf,
		q7_t pad_value) {
 801f448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f44c:	b08f      	sub	sp, #60	@ 0x3c
 801f44e:	4681      	mov	r9, r0
 801f450:	4688      	mov	r8, r1
 801f452:	930a      	str	r3, [sp, #40]	@ 0x28
 801f454:	f8bd 3080 	ldrh.w	r3, [sp, #128]	@ 0x80
 801f458:	9309      	str	r3, [sp, #36]	@ 0x24
 801f45a:	f8bd a084 	ldrh.w	sl, [sp, #132]	@ 0x84
 801f45e:	f8bd 3088 	ldrh.w	r3, [sp, #136]	@ 0x88
 801f462:	930c      	str	r3, [sp, #48]	@ 0x30
	/* Generate two columns from the input tensor a GEMM computation */
	q15_t *two_column_buf = runtime_buf;
	q7_t *out = output;

	q15_t pad16 = pad_value;
	const int16_t inoff16 = input_offset;
 801f464:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 801f466:	b214      	sxth	r4, r2
	q15_t pad_out = pad16 + inoff16;
 801f468:	b296      	uxth	r6, r2
 801f46a:	f99d 7094 	ldrsb.w	r7, [sp, #148]	@ 0x94
 801f46e:	4437      	add	r7, r6
 801f470:	b23f      	sxth	r7, r7
	q31_t pad_out_q15x2 = __PKHBT(pad_out, pad_out, 16);
 801f472:	eac7 4207 	pkhbt	r2, r7, r7, lsl #16
 801f476:	920b      	str	r2, [sp, #44]	@ 0x2c
	q31_t offset_q15x2 = __PKHBT(inoff16, inoff16, 16);
 801f478:	eac4 4404 	pkhbt	r4, r4, r4, lsl #16

	const q7_t *ip_a0 = kernel;
 801f47c:	9a18      	ldr	r2, [sp, #96]	@ 0x60

	for (int i = 0; i < output_ch; i += 2) {
 801f47e:	2500      	movs	r5, #0
 801f480:	9608      	str	r6, [sp, #32]
 801f482:	46a3      	mov	fp, r4
 801f484:	469e      	mov	lr, r3
 801f486:	f8dd c090 	ldr.w	ip, [sp, #144]	@ 0x90
 801f48a:	e0b2      	b.n	801f5f2 <convolve_s8_kernel3_inputch3_stride2_pad1_fpreq+0x1aa>
		q15_t *dst1 = &kbuf[i * 27]; //each q31_t store 2 elements
 801f48c:	2036      	movs	r0, #54	@ 0x36
 801f48e:	fb05 f000 	mul.w	r0, r5, r0
 801f492:	eb0c 0300 	add.w	r3, ip, r0
    memcpy(&val, *in_q7, 4);
 801f496:	6811      	ldr	r1, [r2, #0]
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
 801f498:	fa2f f691 	sxtb16	r6, r1, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801f49c:	fa2f f181 	sxtb16	r1, r1
    q31_t inA = arm_nn_read_q7x4_ia(&source);
    q31_t inAbuf1 = __SXTB16_RORn((uint32_t)inA, 8);
    q31_t inAbuf2 = __SXTB16(inA);

#ifndef ARM_MATH_BIG_ENDIAN
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
 801f4a0:	eac6 4421 	pkhtb	r4, r6, r1, asr #16
 801f4a4:	605c      	str	r4, [r3, #4]
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
 801f4a6:	eac1 4106 	pkhbt	r1, r1, r6, lsl #16
 801f4aa:	f84c 1000 	str.w	r1, [ip, r0]
    memcpy(&val, *in_q7, 4);
 801f4ae:	f8d2 101b 	ldr.w	r1, [r2, #27]
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
 801f4b2:	fa2f f091 	sxtb16	r0, r1, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801f4b6:	fa2f f181 	sxtb16	r1, r1
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
 801f4ba:	eac0 4421 	pkhtb	r4, r0, r1, asr #16
 801f4be:	f8c3 403a 	str.w	r4, [r3, #58]	@ 0x3a
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
 801f4c2:	eac1 4100 	pkhbt	r1, r1, r0, lsl #16
 801f4c6:	f8c3 1036 	str.w	r1, [r3, #54]	@ 0x36
    memcpy(&val, *in_q7, 4);
 801f4ca:	6851      	ldr	r1, [r2, #4]
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
 801f4cc:	fa2f f091 	sxtb16	r0, r1, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801f4d0:	fa2f f181 	sxtb16	r1, r1
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
 801f4d4:	eac0 4421 	pkhtb	r4, r0, r1, asr #16
 801f4d8:	60dc      	str	r4, [r3, #12]
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
 801f4da:	eac1 4100 	pkhbt	r1, r1, r0, lsl #16
 801f4de:	6099      	str	r1, [r3, #8]
    memcpy(&val, *in_q7, 4);
 801f4e0:	f8d2 101f 	ldr.w	r1, [r2, #31]
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
 801f4e4:	fa2f f091 	sxtb16	r0, r1, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801f4e8:	fa2f f181 	sxtb16	r1, r1
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
 801f4ec:	eac0 4421 	pkhtb	r4, r0, r1, asr #16
 801f4f0:	f8c3 4042 	str.w	r4, [r3, #66]	@ 0x42
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
 801f4f4:	eac1 4100 	pkhbt	r1, r1, r0, lsl #16
 801f4f8:	f8c3 103e 	str.w	r1, [r3, #62]	@ 0x3e
    memcpy(&val, *in_q7, 4);
 801f4fc:	6891      	ldr	r1, [r2, #8]
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
 801f4fe:	fa2f f091 	sxtb16	r0, r1, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801f502:	fa2f f181 	sxtb16	r1, r1
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
 801f506:	eac0 4421 	pkhtb	r4, r0, r1, asr #16
 801f50a:	615c      	str	r4, [r3, #20]
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
 801f50c:	eac1 4100 	pkhbt	r1, r1, r0, lsl #16
 801f510:	6119      	str	r1, [r3, #16]
    memcpy(&val, *in_q7, 4);
 801f512:	f8d2 1023 	ldr.w	r1, [r2, #35]	@ 0x23
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
 801f516:	fa2f f091 	sxtb16	r0, r1, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801f51a:	fa2f f181 	sxtb16	r1, r1
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
 801f51e:	eac0 4421 	pkhtb	r4, r0, r1, asr #16
 801f522:	f8c3 404a 	str.w	r4, [r3, #74]	@ 0x4a
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
 801f526:	eac1 4100 	pkhbt	r1, r1, r0, lsl #16
 801f52a:	f8c3 1046 	str.w	r1, [r3, #70]	@ 0x46
    memcpy(&val, *in_q7, 4);
 801f52e:	68d1      	ldr	r1, [r2, #12]
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
 801f530:	fa2f f091 	sxtb16	r0, r1, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801f534:	fa2f f181 	sxtb16	r1, r1
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
 801f538:	eac0 4421 	pkhtb	r4, r0, r1, asr #16
 801f53c:	61dc      	str	r4, [r3, #28]
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
 801f53e:	eac1 4100 	pkhbt	r1, r1, r0, lsl #16
 801f542:	6199      	str	r1, [r3, #24]
    memcpy(&val, *in_q7, 4);
 801f544:	f8d2 1027 	ldr.w	r1, [r2, #39]	@ 0x27
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
 801f548:	fa2f f091 	sxtb16	r0, r1, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801f54c:	fa2f f181 	sxtb16	r1, r1
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
 801f550:	eac0 4421 	pkhtb	r4, r0, r1, asr #16
 801f554:	f8c3 4052 	str.w	r4, [r3, #82]	@ 0x52
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
 801f558:	eac1 4100 	pkhbt	r1, r1, r0, lsl #16
 801f55c:	f8c3 104e 	str.w	r1, [r3, #78]	@ 0x4e
    memcpy(&val, *in_q7, 4);
 801f560:	6911      	ldr	r1, [r2, #16]
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
 801f562:	fa2f f091 	sxtb16	r0, r1, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801f566:	fa2f f181 	sxtb16	r1, r1
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
 801f56a:	eac0 4421 	pkhtb	r4, r0, r1, asr #16
 801f56e:	625c      	str	r4, [r3, #36]	@ 0x24
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
 801f570:	eac1 4100 	pkhbt	r1, r1, r0, lsl #16
 801f574:	6219      	str	r1, [r3, #32]
    memcpy(&val, *in_q7, 4);
 801f576:	f8d2 102b 	ldr.w	r1, [r2, #43]	@ 0x2b
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
 801f57a:	fa2f f091 	sxtb16	r0, r1, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801f57e:	fa2f f181 	sxtb16	r1, r1
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
 801f582:	eac0 4421 	pkhtb	r4, r0, r1, asr #16
 801f586:	f8c3 405a 	str.w	r4, [r3, #90]	@ 0x5a
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
 801f58a:	eac1 4100 	pkhbt	r1, r1, r0, lsl #16
 801f58e:	f8c3 1056 	str.w	r1, [r3, #86]	@ 0x56
    memcpy(&val, *in_q7, 4);
 801f592:	6951      	ldr	r1, [r2, #20]
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
 801f594:	fa2f f091 	sxtb16	r0, r1, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801f598:	fa2f f181 	sxtb16	r1, r1
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
 801f59c:	eac0 4421 	pkhtb	r4, r0, r1, asr #16
 801f5a0:	62dc      	str	r4, [r3, #44]	@ 0x2c
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
 801f5a2:	eac1 4100 	pkhbt	r1, r1, r0, lsl #16
 801f5a6:	6299      	str	r1, [r3, #40]	@ 0x28
    memcpy(&val, *in_q7, 4);
 801f5a8:	f8d2 102f 	ldr.w	r1, [r2, #47]	@ 0x2f
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
 801f5ac:	fa2f f091 	sxtb16	r0, r1, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801f5b0:	fa2f f181 	sxtb16	r1, r1
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
 801f5b4:	eac0 4421 	pkhtb	r4, r0, r1, asr #16
 801f5b8:	f8c3 4062 	str.w	r4, [r3, #98]	@ 0x62
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
 801f5bc:	eac1 4100 	pkhbt	r1, r1, r0, lsl #16
 801f5c0:	f8c3 105e 	str.w	r1, [r3, #94]	@ 0x5e
		dst1_31 += 2;
		dst2_31 += 2;
		//25, 26, 27
		dst1 = dst1_31;
		dst2 = dst2_31;
		dst1[0] = *ip_a0++;
 801f5c4:	f992 1018 	ldrsb.w	r1, [r2, #24]
 801f5c8:	8619      	strh	r1, [r3, #48]	@ 0x30
		dst1[1] = *ip_a0++;
 801f5ca:	f992 1019 	ldrsb.w	r1, [r2, #25]
 801f5ce:	8659      	strh	r1, [r3, #50]	@ 0x32
		dst1[2] = *ip_a0++;
 801f5d0:	f992 101a 	ldrsb.w	r1, [r2, #26]
 801f5d4:	8699      	strh	r1, [r3, #52]	@ 0x34
		dst2[0] = *ip_a1++;
 801f5d6:	f992 1033 	ldrsb.w	r1, [r2, #51]	@ 0x33
 801f5da:	f8a3 1066 	strh.w	r1, [r3, #102]	@ 0x66
		dst2[1] = *ip_a1++;
 801f5de:	f992 1034 	ldrsb.w	r1, [r2, #52]	@ 0x34
 801f5e2:	f8a3 1068 	strh.w	r1, [r3, #104]	@ 0x68
		dst2[2] = *ip_a1++;
 801f5e6:	f992 1035 	ldrsb.w	r1, [r2, #53]	@ 0x35
 801f5ea:	f8a3 106a 	strh.w	r1, [r3, #106]	@ 0x6a

		/* skip row */
		ip_a0 += 27;
 801f5ee:	3236      	adds	r2, #54	@ 0x36
	for (int i = 0; i < output_ch; i += 2) {
 801f5f0:	3502      	adds	r5, #2
 801f5f2:	45ae      	cmp	lr, r5
 801f5f4:	f73f af4a 	bgt.w	801f48c <convolve_s8_kernel3_inputch3_stride2_pad1_fpreq+0x44>
	q15_t *two_column_buf = runtime_buf;
 801f5f8:	9e08      	ldr	r6, [sp, #32]
 801f5fa:	465c      	mov	r4, fp
 801f5fc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
	}

	for (i_out_y = 0; i_out_y < output_y; i_out_y++) {
 801f5fe:	2200      	movs	r2, #0
 801f600:	9208      	str	r2, [sp, #32]
 801f602:	f8cd a034 	str.w	sl, [sp, #52]	@ 0x34
 801f606:	e1e0      	b.n	801f9ca <convolve_s8_kernel3_inputch3_stride2_pad1_fpreq+0x582>
					q7_q15_offset_ele(src3, dst3)
					q7_q15_offset_ele(src3, dst3)
					*dst3++ = *src3++ + input_offset;
				} else {						//first element is pad
												//3x3 = 9 elements
					src = input + (base_idx_y * input_x) * input_ch;
 801f608:	fb08 f000 	mul.w	r0, r8, r0
 801f60c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801f60e:	fb00 f202 	mul.w	r2, r0, r2
 801f612:	eb09 0002 	add.w	r0, r9, r2
					src2 = src + input_row_offset;
 801f616:	eb00 0e01 	add.w	lr, r0, r1
					src3 = src2 + input_row_offset;
 801f61a:	eb00 0b41 	add.w	fp, r0, r1, lsl #1

					//pad the first one: 1x3 = 3
					*dst++ = pad_out;
 801f61e:	801f      	strh	r7, [r3, #0]
					*dst++ = pad_out;
 801f620:	805f      	strh	r7, [r3, #2]
					*dst++ = pad_out;
 801f622:	809f      	strh	r7, [r3, #4]
					*dst2++ = pad_out;
 801f624:	825f      	strh	r7, [r3, #18]
					*dst2++ = pad_out;
 801f626:	829f      	strh	r7, [r3, #20]
					*dst2++ = pad_out;
 801f628:	82df      	strh	r7, [r3, #22]
					*dst3++ = pad_out;
 801f62a:	849f      	strh	r7, [r3, #36]	@ 0x24
					*dst3++ = pad_out;
 801f62c:	84df      	strh	r7, [r3, #38]	@ 0x26
					*dst3++ = pad_out;
 801f62e:	851f      	strh	r7, [r3, #40]	@ 0x28
    memcpy(&val, *in_q7, 4);
 801f630:	f859 2002 	ldr.w	r2, [r9, r2]
  return (op1 >> op2) | (op1 << (32U - op2));
 801f634:	ea4f 2c32 	mov.w	ip, r2, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801f638:	fa2f fc8c 	sxtb16	ip, ip
 801f63c:	fa2f f282 	sxtb16	r2, r2
					//load 6 elements
					//4 * 1 = 6
					q7_q15_offset_ele(src, dst)
 801f640:	eacc 4a22 	pkhtb	sl, ip, r2, asr #16
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801f644:	fa9a fa04 	sadd16	sl, sl, r4
 801f648:	eac2 420c 	pkhbt	r2, r2, ip, lsl #16
 801f64c:	fa92 f204 	sadd16	r2, r2, r4
  memcpy (*pQ15, &val, 4);
 801f650:	f8c3 2006 	str.w	r2, [r3, #6]
 801f654:	f8c3 a00a 	str.w	sl, [r3, #10]
					*dst++ = *src++ + input_offset;
 801f658:	f990 2004 	ldrsb.w	r2, [r0, #4]
 801f65c:	fa16 f282 	uxtah	r2, r6, r2
 801f660:	81da      	strh	r2, [r3, #14]
					*dst++ = *src++ + input_offset;
 801f662:	f990 2005 	ldrsb.w	r2, [r0, #5]
 801f666:	fa16 f282 	uxtah	r2, r6, r2
 801f66a:	821a      	strh	r2, [r3, #16]
 801f66c:	5842      	ldr	r2, [r0, r1]
  return (op1 >> op2) | (op1 << (32U - op2));
 801f66e:	ea4f 2032 	mov.w	r0, r2, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801f672:	fa2f f080 	sxtb16	r0, r0
 801f676:	fa2f f282 	sxtb16	r2, r2
					//
					q7_q15_offset_ele(src2, dst2)
 801f67a:	eac0 4c22 	pkhtb	ip, r0, r2, asr #16
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801f67e:	fa9c fc04 	sadd16	ip, ip, r4
 801f682:	eac2 4200 	pkhbt	r2, r2, r0, lsl #16
 801f686:	fa92 f204 	sadd16	r2, r2, r4
 801f68a:	619a      	str	r2, [r3, #24]
 801f68c:	f8c3 c01c 	str.w	ip, [r3, #28]
					*dst2++ = *src2++ + input_offset;
 801f690:	f99e 2004 	ldrsb.w	r2, [lr, #4]
 801f694:	fa16 f282 	uxtah	r2, r6, r2
 801f698:	841a      	strh	r2, [r3, #32]
					*dst2++ = *src2++ + input_offset;
 801f69a:	f99e 2005 	ldrsb.w	r2, [lr, #5]
 801f69e:	fa16 f282 	uxtah	r2, r6, r2
 801f6a2:	845a      	strh	r2, [r3, #34]	@ 0x22
 801f6a4:	f85e 2001 	ldr.w	r2, [lr, r1]
  return (op1 >> op2) | (op1 << (32U - op2));
 801f6a8:	ea4f 2032 	mov.w	r0, r2, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801f6ac:	fa2f f080 	sxtb16	r0, r0
 801f6b0:	fa2f f282 	sxtb16	r2, r2
					//
					q7_q15_offset_ele(src3, dst3)
 801f6b4:	eac0 4122 	pkhtb	r1, r0, r2, asr #16
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801f6b8:	fa91 f104 	sadd16	r1, r1, r4
 801f6bc:	eac2 4200 	pkhbt	r2, r2, r0, lsl #16
 801f6c0:	fa92 f204 	sadd16	r2, r2, r4
 801f6c4:	f8c3 202a 	str.w	r2, [r3, #42]	@ 0x2a
 801f6c8:	f8c3 102e 	str.w	r1, [r3, #46]	@ 0x2e
					*dst3++ = *src3++ + input_offset;
 801f6cc:	f99b 2004 	ldrsb.w	r2, [fp, #4]
 801f6d0:	fa16 f282 	uxtah	r2, r6, r2
 801f6d4:	865a      	strh	r2, [r3, #50]	@ 0x32
					*dst3++ = *src3++ + input_offset;
 801f6d6:	f99b 2005 	ldrsb.w	r2, [fp, #5]
 801f6da:	fa16 f282 	uxtah	r2, r6, r2
 801f6de:	869a      	strh	r2, [r3, #52]	@ 0x34
					*dst3++ = *src3++ + input_offset;
					*dst3++ = *src3++ + input_offset;
				}
			}

			two_column_buf += 27;
 801f6e0:	3336      	adds	r3, #54	@ 0x36
			/* Computation is filed for every 2 columns */
			if (two_column_buf == runtime_buf + 2 * 27) {
 801f6e2:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801f6e4:	326c      	adds	r2, #108	@ 0x6c
 801f6e6:	429a      	cmp	r2, r3
 801f6e8:	f000 8152 	beq.w	801f990 <convolve_s8_kernel3_inputch3_stride2_pad1_fpreq+0x548>
		for (i_out_x = 0; i_out_x < output_x; i_out_x++) {
 801f6ec:	3501      	adds	r5, #1
 801f6ee:	b22d      	sxth	r5, r5
 801f6f0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801f6f2:	4295      	cmp	r5, r2
 801f6f4:	f280 8165 	bge.w	801f9c2 <convolve_s8_kernel3_inputch3_stride2_pad1_fpreq+0x57a>
			const int16_t base_idx_y = (i_out_y * 2) - 1;
 801f6f8:	9a08      	ldr	r2, [sp, #32]
 801f6fa:	0050      	lsls	r0, r2, #1
 801f6fc:	b280      	uxth	r0, r0
 801f6fe:	3801      	subs	r0, #1
 801f700:	b200      	sxth	r0, r0
			const int16_t base_idx_x = (i_out_x * 2) - 1;
 801f702:	b2ad      	uxth	r5, r5
 801f704:	006a      	lsls	r2, r5, #1
 801f706:	b292      	uxth	r2, r2
 801f708:	3a01      	subs	r2, #1
 801f70a:	b212      	sxth	r2, r2
			int input_row_offset = 3 * input_x;
 801f70c:	eb08 0148 	add.w	r1, r8, r8, lsl #1
			if (base_idx_y != -1) {
 801f710:	f1b0 3fff 	cmp.w	r0, #4294967295	@ 0xffffffff
 801f714:	f000 808f 	beq.w	801f836 <convolve_s8_kernel3_inputch3_stride2_pad1_fpreq+0x3ee>
				if (base_idx_x != -1) { //load all for now and unroll all
 801f718:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 801f71c:	f43f af74 	beq.w	801f608 <convolve_s8_kernel3_inputch3_stride2_pad1_fpreq+0x1c0>
							+ (base_idx_y * input_x + base_idx_x) * input_ch;
 801f720:	fb08 2200 	mla	r2, r8, r0, r2
 801f724:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801f726:	fb00 f202 	mul.w	r2, r0, r2
 801f72a:	eb09 0002 	add.w	r0, r9, r2
					src2 = src + input_row_offset;
 801f72e:	eb00 0e01 	add.w	lr, r0, r1
					src3 = src2 + input_row_offset;
 801f732:	eb00 0a41 	add.w	sl, r0, r1, lsl #1
 801f736:	f859 2002 	ldr.w	r2, [r9, r2]
  return (op1 >> op2) | (op1 << (32U - op2));
 801f73a:	ea4f 2c32 	mov.w	ip, r2, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801f73e:	fa2f fc8c 	sxtb16	ip, ip
 801f742:	fa2f f282 	sxtb16	r2, r2
					q7_q15_offset_ele(src, dst)
 801f746:	eacc 4b22 	pkhtb	fp, ip, r2, asr #16
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801f74a:	fa9b fb04 	sadd16	fp, fp, r4
 801f74e:	eac2 420c 	pkhbt	r2, r2, ip, lsl #16
 801f752:	fa92 f204 	sadd16	r2, r2, r4
 801f756:	601a      	str	r2, [r3, #0]
 801f758:	f8c3 b004 	str.w	fp, [r3, #4]
 801f75c:	6842      	ldr	r2, [r0, #4]
  return (op1 >> op2) | (op1 << (32U - op2));
 801f75e:	ea4f 2c32 	mov.w	ip, r2, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801f762:	fa2f fc8c 	sxtb16	ip, ip
 801f766:	fa2f f282 	sxtb16	r2, r2
					q7_q15_offset_ele(src, dst)
 801f76a:	eacc 4b22 	pkhtb	fp, ip, r2, asr #16
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801f76e:	fa9b fb04 	sadd16	fp, fp, r4
 801f772:	eac2 420c 	pkhbt	r2, r2, ip, lsl #16
 801f776:	fa92 f204 	sadd16	r2, r2, r4
 801f77a:	609a      	str	r2, [r3, #8]
 801f77c:	f8c3 b00c 	str.w	fp, [r3, #12]
					*dst++ = *src++ + input_offset;
 801f780:	f990 2008 	ldrsb.w	r2, [r0, #8]
 801f784:	fa16 f282 	uxtah	r2, r6, r2
 801f788:	821a      	strh	r2, [r3, #16]
 801f78a:	5842      	ldr	r2, [r0, r1]
  return (op1 >> op2) | (op1 << (32U - op2));
 801f78c:	ea4f 2032 	mov.w	r0, r2, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801f790:	fa2f f080 	sxtb16	r0, r0
 801f794:	fa2f f282 	sxtb16	r2, r2
					q7_q15_offset_ele(src2, dst2)
 801f798:	eac0 4c22 	pkhtb	ip, r0, r2, asr #16
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801f79c:	fa9c fc04 	sadd16	ip, ip, r4
 801f7a0:	eac2 4200 	pkhbt	r2, r2, r0, lsl #16
 801f7a4:	fa92 f204 	sadd16	r2, r2, r4
 801f7a8:	f8c3 2012 	str.w	r2, [r3, #18]
 801f7ac:	f8c3 c016 	str.w	ip, [r3, #22]
 801f7b0:	f8de 2004 	ldr.w	r2, [lr, #4]
  return (op1 >> op2) | (op1 << (32U - op2));
 801f7b4:	ea4f 2032 	mov.w	r0, r2, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801f7b8:	fa2f f080 	sxtb16	r0, r0
 801f7bc:	fa2f f282 	sxtb16	r2, r2
					q7_q15_offset_ele(src2, dst2)
 801f7c0:	eac0 4c22 	pkhtb	ip, r0, r2, asr #16
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801f7c4:	fa9c fc04 	sadd16	ip, ip, r4
 801f7c8:	eac2 4200 	pkhbt	r2, r2, r0, lsl #16
 801f7cc:	fa92 f204 	sadd16	r2, r2, r4
 801f7d0:	f8c3 201a 	str.w	r2, [r3, #26]
 801f7d4:	f8c3 c01e 	str.w	ip, [r3, #30]
					*dst2++ = *src2++ + input_offset;
 801f7d8:	f99e 2008 	ldrsb.w	r2, [lr, #8]
 801f7dc:	fa16 f282 	uxtah	r2, r6, r2
 801f7e0:	845a      	strh	r2, [r3, #34]	@ 0x22
 801f7e2:	f85e 2001 	ldr.w	r2, [lr, r1]
  return (op1 >> op2) | (op1 << (32U - op2));
 801f7e6:	ea4f 2032 	mov.w	r0, r2, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801f7ea:	fa2f f080 	sxtb16	r0, r0
 801f7ee:	fa2f f282 	sxtb16	r2, r2
					q7_q15_offset_ele(src3, dst3)
 801f7f2:	eac0 4122 	pkhtb	r1, r0, r2, asr #16
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801f7f6:	fa91 f104 	sadd16	r1, r1, r4
 801f7fa:	eac2 4200 	pkhbt	r2, r2, r0, lsl #16
 801f7fe:	fa92 f204 	sadd16	r2, r2, r4
 801f802:	625a      	str	r2, [r3, #36]	@ 0x24
 801f804:	6299      	str	r1, [r3, #40]	@ 0x28
 801f806:	f8da 2004 	ldr.w	r2, [sl, #4]
  return (op1 >> op2) | (op1 << (32U - op2));
 801f80a:	ea4f 2032 	mov.w	r0, r2, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801f80e:	fa2f f080 	sxtb16	r0, r0
 801f812:	fa2f f282 	sxtb16	r2, r2
					q7_q15_offset_ele(src3, dst3)
 801f816:	eac0 4122 	pkhtb	r1, r0, r2, asr #16
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801f81a:	fa91 f104 	sadd16	r1, r1, r4
 801f81e:	eac2 4200 	pkhbt	r2, r2, r0, lsl #16
 801f822:	fa92 f204 	sadd16	r2, r2, r4
 801f826:	62da      	str	r2, [r3, #44]	@ 0x2c
 801f828:	6319      	str	r1, [r3, #48]	@ 0x30
					*dst3++ = *src3++ + input_offset;
 801f82a:	f99a 2008 	ldrsb.w	r2, [sl, #8]
 801f82e:	fa16 f282 	uxtah	r2, r6, r2
 801f832:	869a      	strh	r2, [r3, #52]	@ 0x34
 801f834:	e754      	b.n	801f6e0 <convolve_s8_kernel3_inputch3_stride2_pad1_fpreq+0x298>
				*dst++ = pad_out;
 801f836:	801f      	strh	r7, [r3, #0]
				*dst_31++ = pad_out_q15x2;
 801f838:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 801f83a:	f8c3 0002 	str.w	r0, [r3, #2]
				*dst_31++ = pad_out_q15x2;
 801f83e:	f8c3 0006 	str.w	r0, [r3, #6]
				*dst_31++ = pad_out_q15x2;
 801f842:	f8c3 000a 	str.w	r0, [r3, #10]
				*dst_31++ = pad_out_q15x2;
 801f846:	f8c3 000e 	str.w	r0, [r3, #14]
				if (base_idx_x != -1) {	//load all for now and unroll all
 801f84a:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 801f84e:	d05b      	beq.n	801f908 <convolve_s8_kernel3_inputch3_stride2_pad1_fpreq+0x4c0>
					src2 = input + (base_idx_x) * input_ch;
 801f850:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801f852:	fb00 f202 	mul.w	r2, r0, r2
 801f856:	eb09 0002 	add.w	r0, r9, r2
					src3 = src2 + input_row_offset;
 801f85a:	eb00 0e01 	add.w	lr, r0, r1
 801f85e:	f859 2002 	ldr.w	r2, [r9, r2]
  return (op1 >> op2) | (op1 << (32U - op2));
 801f862:	ea4f 2c32 	mov.w	ip, r2, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801f866:	fa2f fc8c 	sxtb16	ip, ip
 801f86a:	fa2f f282 	sxtb16	r2, r2
					q7_q15_offset_ele(src2, dst2)
 801f86e:	eacc 4a22 	pkhtb	sl, ip, r2, asr #16
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801f872:	fa9a fa04 	sadd16	sl, sl, r4
 801f876:	eac2 420c 	pkhbt	r2, r2, ip, lsl #16
 801f87a:	fa92 f204 	sadd16	r2, r2, r4
 801f87e:	f8c3 2012 	str.w	r2, [r3, #18]
 801f882:	f8c3 a016 	str.w	sl, [r3, #22]
 801f886:	6842      	ldr	r2, [r0, #4]
  return (op1 >> op2) | (op1 << (32U - op2));
 801f888:	ea4f 2c32 	mov.w	ip, r2, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801f88c:	fa2f fc8c 	sxtb16	ip, ip
 801f890:	fa2f f282 	sxtb16	r2, r2
					q7_q15_offset_ele(src2, dst2)
 801f894:	eacc 4a22 	pkhtb	sl, ip, r2, asr #16
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801f898:	fa9a fa04 	sadd16	sl, sl, r4
 801f89c:	eac2 420c 	pkhbt	r2, r2, ip, lsl #16
 801f8a0:	fa92 f204 	sadd16	r2, r2, r4
 801f8a4:	f8c3 201a 	str.w	r2, [r3, #26]
 801f8a8:	f8c3 a01e 	str.w	sl, [r3, #30]
					*dst2++ = *src2++ + input_offset;
 801f8ac:	f990 2008 	ldrsb.w	r2, [r0, #8]
 801f8b0:	fa16 f282 	uxtah	r2, r6, r2
 801f8b4:	845a      	strh	r2, [r3, #34]	@ 0x22
 801f8b6:	5842      	ldr	r2, [r0, r1]
  return (op1 >> op2) | (op1 << (32U - op2));
 801f8b8:	ea4f 2032 	mov.w	r0, r2, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801f8bc:	fa2f f080 	sxtb16	r0, r0
 801f8c0:	fa2f f282 	sxtb16	r2, r2
					q7_q15_offset_ele(src3, dst3)
 801f8c4:	eac0 4122 	pkhtb	r1, r0, r2, asr #16
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801f8c8:	fa91 f104 	sadd16	r1, r1, r4
 801f8cc:	eac2 4200 	pkhbt	r2, r2, r0, lsl #16
 801f8d0:	fa92 f204 	sadd16	r2, r2, r4
 801f8d4:	625a      	str	r2, [r3, #36]	@ 0x24
 801f8d6:	6299      	str	r1, [r3, #40]	@ 0x28
 801f8d8:	f8de 2004 	ldr.w	r2, [lr, #4]
  return (op1 >> op2) | (op1 << (32U - op2));
 801f8dc:	ea4f 2032 	mov.w	r0, r2, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801f8e0:	fa2f f080 	sxtb16	r0, r0
 801f8e4:	fa2f f282 	sxtb16	r2, r2
					q7_q15_offset_ele(src3, dst3)
 801f8e8:	eac0 4122 	pkhtb	r1, r0, r2, asr #16
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801f8ec:	fa91 f104 	sadd16	r1, r1, r4
 801f8f0:	eac2 4200 	pkhbt	r2, r2, r0, lsl #16
 801f8f4:	fa92 f204 	sadd16	r2, r2, r4
 801f8f8:	62da      	str	r2, [r3, #44]	@ 0x2c
 801f8fa:	6319      	str	r1, [r3, #48]	@ 0x30
					*dst3++ = *src3++ + input_offset;
 801f8fc:	f99e 2008 	ldrsb.w	r2, [lr, #8]
 801f900:	fa16 f282 	uxtah	r2, r6, r2
 801f904:	869a      	strh	r2, [r3, #52]	@ 0x34
 801f906:	e6eb      	b.n	801f6e0 <convolve_s8_kernel3_inputch3_stride2_pad1_fpreq+0x298>
					src3 = src2 + input_row_offset;
 801f908:	eb09 0001 	add.w	r0, r9, r1
					*dst2++ = pad_out;
 801f90c:	825f      	strh	r7, [r3, #18]
					*dst2++ = pad_out;
 801f90e:	829f      	strh	r7, [r3, #20]
					*dst2++ = pad_out;
 801f910:	82df      	strh	r7, [r3, #22]
					*dst3++ = pad_out;
 801f912:	849f      	strh	r7, [r3, #36]	@ 0x24
					*dst3++ = pad_out;
 801f914:	84df      	strh	r7, [r3, #38]	@ 0x26
					*dst3++ = pad_out;
 801f916:	851f      	strh	r7, [r3, #40]	@ 0x28
 801f918:	f8d9 2000 	ldr.w	r2, [r9]
  return (op1 >> op2) | (op1 << (32U - op2));
 801f91c:	ea4f 2e32 	mov.w	lr, r2, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801f920:	fa2f fe8e 	sxtb16	lr, lr
 801f924:	fa2f f282 	sxtb16	r2, r2
					q7_q15_offset_ele(src2, dst2)
 801f928:	eace 4c22 	pkhtb	ip, lr, r2, asr #16
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801f92c:	fa9c fc04 	sadd16	ip, ip, r4
 801f930:	eac2 420e 	pkhbt	r2, r2, lr, lsl #16
 801f934:	fa92 f204 	sadd16	r2, r2, r4
 801f938:	619a      	str	r2, [r3, #24]
 801f93a:	f8c3 c01c 	str.w	ip, [r3, #28]
					*dst2++ = *src2++ + input_offset;
 801f93e:	f999 2004 	ldrsb.w	r2, [r9, #4]
 801f942:	fa16 f282 	uxtah	r2, r6, r2
 801f946:	841a      	strh	r2, [r3, #32]
					*dst2++ = *src2++ + input_offset;
 801f948:	f999 2005 	ldrsb.w	r2, [r9, #5]
 801f94c:	fa16 f282 	uxtah	r2, r6, r2
 801f950:	845a      	strh	r2, [r3, #34]	@ 0x22
 801f952:	f859 2001 	ldr.w	r2, [r9, r1]
  return (op1 >> op2) | (op1 << (32U - op2));
 801f956:	ea4f 2c32 	mov.w	ip, r2, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801f95a:	fa2f fc8c 	sxtb16	ip, ip
 801f95e:	fa2f f282 	sxtb16	r2, r2
					q7_q15_offset_ele(src3, dst3)
 801f962:	eacc 4122 	pkhtb	r1, ip, r2, asr #16
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801f966:	fa91 f104 	sadd16	r1, r1, r4
 801f96a:	eac2 420c 	pkhbt	r2, r2, ip, lsl #16
 801f96e:	fa92 f204 	sadd16	r2, r2, r4
 801f972:	f8c3 202a 	str.w	r2, [r3, #42]	@ 0x2a
 801f976:	f8c3 102e 	str.w	r1, [r3, #46]	@ 0x2e
					*dst3++ = *src3++ + input_offset;
 801f97a:	f990 2004 	ldrsb.w	r2, [r0, #4]
 801f97e:	fa16 f282 	uxtah	r2, r6, r2
 801f982:	865a      	strh	r2, [r3, #50]	@ 0x32
					*dst3++ = *src3++ + input_offset;
 801f984:	f990 2005 	ldrsb.w	r2, [r0, #5]
 801f988:	fa16 f282 	uxtah	r2, r6, r2
 801f98c:	869a      	strh	r2, [r3, #52]	@ 0x34
 801f98e:	e6a7      	b.n	801f6e0 <convolve_s8_kernel3_inputch3_stride2_pad1_fpreq+0x298>

				out = mat_mult_kernel3_input3_s8_s16_fpreq(kernel, runtime_buf,
 801f990:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801f992:	9306      	str	r3, [sp, #24]
 801f994:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801f996:	9305      	str	r3, [sp, #20]
 801f998:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801f99a:	9304      	str	r3, [sp, #16]
 801f99c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801f99e:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 801f9a2:	9303      	str	r3, [sp, #12]
 801f9a4:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801f9a6:	9302      	str	r3, [sp, #8]
 801f9a8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801f9aa:	9301      	str	r3, [sp, #4]
 801f9ac:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801f9ae:	9300      	str	r3, [sp, #0]
 801f9b0:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 801f9b2:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801f9b4:	9923      	ldr	r1, [sp, #140]	@ 0x8c
 801f9b6:	9818      	ldr	r0, [sp, #96]	@ 0x60
 801f9b8:	f001 faf9 	bl	8020fae <mat_mult_kernel3_input3_s8_s16_fpreq>
 801f9bc:	901f      	str	r0, [sp, #124]	@ 0x7c
						output_ch, scales, output_offset, output_activation_min,
						output_activation_max, input_ch * kernel_y * kernel_x,
						bias, out, kbuf);

				/* counter reset */
				two_column_buf = runtime_buf;
 801f9be:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801f9c0:	e694      	b.n	801f6ec <convolve_s8_kernel3_inputch3_stride2_pad1_fpreq+0x2a4>
	for (i_out_y = 0; i_out_y < output_y; i_out_y++) {
 801f9c2:	9a08      	ldr	r2, [sp, #32]
 801f9c4:	3201      	adds	r2, #1
 801f9c6:	b212      	sxth	r2, r2
 801f9c8:	9208      	str	r2, [sp, #32]
 801f9ca:	9a08      	ldr	r2, [sp, #32]
 801f9cc:	990d      	ldr	r1, [sp, #52]	@ 0x34
 801f9ce:	428a      	cmp	r2, r1
 801f9d0:	da01      	bge.n	801f9d6 <convolve_s8_kernel3_inputch3_stride2_pad1_fpreq+0x58e>
		for (i_out_x = 0; i_out_x < output_x; i_out_x++) {
 801f9d2:	2500      	movs	r5, #0
 801f9d4:	e68c      	b.n	801f6f0 <convolve_s8_kernel3_inputch3_stride2_pad1_fpreq+0x2a8>
			}
		}
	}

	/* left-over because odd number of output pixels */
	if (two_column_buf != runtime_buf) {
 801f9d6:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801f9d8:	4293      	cmp	r3, r2
 801f9da:	d059      	beq.n	801fa90 <convolve_s8_kernel3_inputch3_stride2_pad1_fpreq+0x648>
		const q7_t *ker_a = kernel;
		int i;

		for (i = 0; i < output_ch; i++) {
 801f9dc:	2500      	movs	r5, #0
 801f9de:	f8dd c028 	ldr.w	ip, [sp, #40]	@ 0x28
 801f9e2:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 801f9e4:	9819      	ldr	r0, [sp, #100]	@ 0x64
 801f9e6:	f8dd b068 	ldr.w	fp, [sp, #104]	@ 0x68
 801f9ea:	f8dd 806c 	ldr.w	r8, [sp, #108]	@ 0x6c
 801f9ee:	f8dd 9074 	ldr.w	r9, [sp, #116]	@ 0x74
 801f9f2:	f8dd a078 	ldr.w	sl, [sp, #120]	@ 0x78
 801f9f6:	f8dd e030 	ldr.w	lr, [sp, #48]	@ 0x30
 801f9fa:	e026      	b.n	801fa4a <convolve_s8_kernel3_inputch3_stride2_pad1_fpreq+0x602>
				sum = __SMLAD(ker_a2, ip_b2, sum);

				col_count--;
			}
			/* Handle left over mac */
			col_count = input_ch * kernel_y * kernel_x & 0x3;
 801f9fc:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 801f9fe:	f00c 0203 	and.w	r2, ip, #3
			while (col_count) {
 801fa02:	b142      	cbz	r2, 801fa16 <convolve_s8_kernel3_inputch3_stride2_pad1_fpreq+0x5ce>
				q7_t ker_a1 = *ker_a++;
 801fa04:	f914 6b01 	ldrsb.w	r6, [r4], #1
				q15_t ip_b1 = *ip_as_col++;
 801fa08:	f933 7b02 	ldrsh.w	r7, [r3], #2
				sum += ker_a1 * ip_b1;
 801fa0c:	fb07 1106 	mla	r1, r7, r6, r1
				col_count--;
 801fa10:	3a01      	subs	r2, #1
 801fa12:	b292      	uxth	r2, r2
 801fa14:	e7f5      	b.n	801fa02 <convolve_s8_kernel3_inputch3_stride2_pad1_fpreq+0x5ba>
			}

			sum = (float) sum * scales[i];
 801fa16:	9f08      	ldr	r7, [sp, #32]
 801fa18:	ee07 1a90 	vmov	s15, r1
 801fa1c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801fa20:	445f      	add	r7, fp
 801fa22:	ed97 7a00 	vldr	s14, [r7]
 801fa26:	ee67 7a87 	vmul.f32	s15, s15, s14
 801fa2a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801fa2e:	ee17 3a90 	vmov	r3, s15
			sum += output_offset;
 801fa32:	4443      	add	r3, r8
			sum = MAX(sum, output_activation_min);
 801fa34:	454b      	cmp	r3, r9
 801fa36:	bfb8      	it	lt
 801fa38:	464b      	movlt	r3, r9
			sum = MIN(sum, output_activation_max);
 801fa3a:	4553      	cmp	r3, sl
 801fa3c:	bfa8      	it	ge
 801fa3e:	4653      	movge	r3, sl
			*out++ = (q7_t) sum;
 801fa40:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 801fa42:	f802 3b01 	strb.w	r3, [r2], #1
		for (i = 0; i < output_ch; i++) {
 801fa46:	3501      	adds	r5, #1
			*out++ = (q7_t) sum;
 801fa48:	921f      	str	r2, [sp, #124]	@ 0x7c
		for (i = 0; i < output_ch; i++) {
 801fa4a:	45ae      	cmp	lr, r5
 801fa4c:	dd20      	ble.n	801fa90 <convolve_s8_kernel3_inputch3_stride2_pad1_fpreq+0x648>
			q31_t sum = bias[i];
 801fa4e:	00af      	lsls	r7, r5, #2
 801fa50:	f850 1025 	ldr.w	r1, [r0, r5, lsl #2]
			uint16_t col_count = (input_ch * kernel_y * kernel_x) >> 2;
 801fa54:	eb0c 06cc 	add.w	r6, ip, ip, lsl #3
 801fa58:	f3c6 068f 	ubfx	r6, r6, #2, #16
			const q15_t *ip_as_col = runtime_buf;
 801fa5c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801fa5e:	9708      	str	r7, [sp, #32]
 801fa60:	9509      	str	r5, [sp, #36]	@ 0x24
			while (col_count) {
 801fa62:	2e00      	cmp	r6, #0
 801fa64:	d0ca      	beq.n	801f9fc <convolve_s8_kernel3_inputch3_stride2_pad1_fpreq+0x5b4>
 801fa66:	f854 2b04 	ldr.w	r2, [r4], #4
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
 801fa6a:	fa2f f792 	sxtb16	r7, r2, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801fa6e:	fa2f f282 	sxtb16	r2, r2
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
 801fa72:	eac7 4522 	pkhtb	r5, r7, r2, asr #16
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
 801fa76:	eac2 4207 	pkhbt	r2, r2, r7, lsl #16
    memcpy(&val, *in_q15, 4);
 801fa7a:	681f      	ldr	r7, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801fa7c:	fb22 1207 	smlad	r2, r2, r7, r1
 801fa80:	6859      	ldr	r1, [r3, #4]
    *in_q15 += 2;
 801fa82:	3308      	adds	r3, #8
 801fa84:	fb25 2501 	smlad	r5, r5, r1, r2
				sum = __SMLAD(ker_a2, ip_b2, sum);
 801fa88:	4629      	mov	r1, r5
				col_count--;
 801fa8a:	3e01      	subs	r6, #1
 801fa8c:	b2b6      	uxth	r6, r6
 801fa8e:	e7e8      	b.n	801fa62 <convolve_s8_kernel3_inputch3_stride2_pad1_fpreq+0x61a>
		}
	}

	/* Return to application */
	return STATE_SUCCESS;
}
 801fa90:	2000      	movs	r0, #0
 801fa92:	b00f      	add	sp, #60	@ 0x3c
 801fa94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801fa98 <mat_mult_kernel_s8_s16_reordered_ch48_fpreq>:

q7_t* mat_mult_kernel_s8_s16_reordered_ch48_fpreq(const q7_t *input_a,
		const q15_t *input_b, const uint16_t output_ch, const float *scales,
		const int32_t out_offset, const int16_t activation_min,
		const int16_t activation_max, const uint16_t num_col_a,
		const int32_t *const output_bias, q7_t *out_0) {
 801fa98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fa9c:	b089      	sub	sp, #36	@ 0x24
 801fa9e:	9301      	str	r3, [sp, #4]
 801faa0:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	@ 0x4c
 801faa4:	9305      	str	r3, [sp, #20]
 801faa6:	f9bd 3050 	ldrsh.w	r3, [sp, #80]	@ 0x50
 801faaa:	9306      	str	r3, [sp, #24]
 801faac:	f8bd 3054 	ldrh.w	r3, [sp, #84]	@ 0x54
 801fab0:	9303      	str	r3, [sp, #12]
	/* set up the second output pointers */
	q7_t *out_1 = out_0 + output_ch;
 801fab2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801fab4:	4413      	add	r3, r2
 801fab6:	9304      	str	r3, [sp, #16]
	const int32_t *bias = output_bias;

	uint16_t row_count = output_ch / 2;
 801fab8:	0853      	lsrs	r3, r2, #1
 801faba:	9302      	str	r3, [sp, #8]
	const q7_t *ip_a0 = input_a;
	/* this loop over rows in A */
	while (row_count) {
 801fabc:	9207      	str	r2, [sp, #28]
 801fabe:	e239      	b.n	801ff34 <mat_mult_kernel_s8_s16_reordered_ch48_fpreq+0x49c>
		/* setup pointers for B */
		const q15_t *ip_b0 = input_b;
		const q15_t *ip_b1 = ip_b0 + num_col_a;
 801fac0:	9b03      	ldr	r3, [sp, #12]
 801fac2:	eb01 0443 	add.w	r4, r1, r3, lsl #1

		/* align the second pointer for A */
		const q7_t *ip_a1 = ip_a0 + num_col_a;
 801fac6:	18c5      	adds	r5, r0, r3
		const float scale_0 = scales[0];
 801fac8:	9a01      	ldr	r2, [sp, #4]
 801faca:	ed92 5a00 	vldr	s10, [r2]
		const float scale_1 = scales[1];
 801face:	edd2 5a01 	vldr	s11, [r2, #4]

		/* Init accumulator with bias for channel N and N + 1 */
		q31_t ch_0_out_0 = *bias;
 801fad2:	9e16      	ldr	r6, [sp, #88]	@ 0x58
 801fad4:	f8d6 a000 	ldr.w	sl, [r6]
		q31_t ch_0_out_1 = *bias++;
		q31_t ch_1_out_0 = *bias;
 801fad8:	f8d6 9004 	ldr.w	r9, [r6, #4]
		q31_t ch_1_out_1 = *bias++;
 801fadc:	3608      	adds	r6, #8
 801fade:	9616      	str	r6, [sp, #88]	@ 0x58
    memcpy(&val, *in_q15, 4);
 801fae0:	f8d1 e000 	ldr.w	lr, [r1]
 801fae4:	461e      	mov	r6, r3
 801fae6:	f851 8013 	ldr.w	r8, [r1, r3, lsl #1]
    memcpy(&val, *in_q7, 4);
 801faea:	6802      	ldr	r2, [r0, #0]
  return (op1 >> op2) | (op1 << (32U - op2));
 801faec:	ea4f 2c32 	mov.w	ip, r2, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801faf0:	fa2f fc8c 	sxtb16	ip, ip
 801faf4:	fa2f f282 	sxtb16	r2, r2
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801faf8:	fb22 a30e 	smlad	r3, r2, lr, sl
 801fafc:	5986      	ldr	r6, [r0, r6]
  return (op1 >> op2) | (op1 << (32U - op2));
 801fafe:	ea4f 2736 	mov.w	r7, r6, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801fb02:	fa2f f787 	sxtb16	r7, r7
 801fb06:	fa2f f686 	sxtb16	r6, r6
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801fb0a:	fb22 a208 	smlad	r2, r2, r8, sl
 801fb0e:	fb26 9e0e 	smlad	lr, r6, lr, r9
    memcpy(&val, *in_q15, 4);
 801fb12:	f8d1 a004 	ldr.w	sl, [r1, #4]
 801fb16:	fb26 9608 	smlad	r6, r6, r8, r9
 801fb1a:	f8d4 8004 	ldr.w	r8, [r4, #4]
 801fb1e:	fb2c 330a 	smlad	r3, ip, sl, r3
 801fb22:	fb2c 2c08 	smlad	ip, ip, r8, r2
 801fb26:	fb27 ea0a 	smlad	sl, r7, sl, lr
 801fb2a:	f8d1 b008 	ldr.w	fp, [r1, #8]
 801fb2e:	fb27 6708 	smlad	r7, r7, r8, r6
 801fb32:	f8d4 8008 	ldr.w	r8, [r4, #8]
    memcpy(&val, *in_q7, 4);
 801fb36:	6846      	ldr	r6, [r0, #4]
  return (op1 >> op2) | (op1 << (32U - op2));
 801fb38:	ea4f 2936 	mov.w	r9, r6, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801fb3c:	fa2f f989 	sxtb16	r9, r9
 801fb40:	fa2f f686 	sxtb16	r6, r6
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801fb44:	fb26 330b 	smlad	r3, r6, fp, r3
 801fb48:	686a      	ldr	r2, [r5, #4]
  return (op1 >> op2) | (op1 << (32U - op2));
 801fb4a:	ea4f 2e32 	mov.w	lr, r2, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801fb4e:	fa2f fe8e 	sxtb16	lr, lr
 801fb52:	fa2f f282 	sxtb16	r2, r2
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801fb56:	fb26 c608 	smlad	r6, r6, r8, ip
 801fb5a:	fb22 ac0b 	smlad	ip, r2, fp, sl
    memcpy(&val, *in_q15, 4);
 801fb5e:	f8d1 a00c 	ldr.w	sl, [r1, #12]
 801fb62:	fb22 7208 	smlad	r2, r2, r8, r7
 801fb66:	68e7      	ldr	r7, [r4, #12]
 801fb68:	fb29 330a 	smlad	r3, r9, sl, r3
 801fb6c:	fb29 6907 	smlad	r9, r9, r7, r6
 801fb70:	fb2e ca0a 	smlad	sl, lr, sl, ip
 801fb74:	f8d1 8010 	ldr.w	r8, [r1, #16]
 801fb78:	fb2e 2e07 	smlad	lr, lr, r7, r2
 801fb7c:	f8d4 b010 	ldr.w	fp, [r4, #16]
    memcpy(&val, *in_q7, 4);
 801fb80:	6886      	ldr	r6, [r0, #8]
  return (op1 >> op2) | (op1 << (32U - op2));
 801fb82:	ea4f 2c36 	mov.w	ip, r6, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801fb86:	fa2f fc8c 	sxtb16	ip, ip
 801fb8a:	fa2f f686 	sxtb16	r6, r6
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801fb8e:	fb26 3308 	smlad	r3, r6, r8, r3
 801fb92:	68aa      	ldr	r2, [r5, #8]
  return (op1 >> op2) | (op1 << (32U - op2));
 801fb94:	ea4f 2732 	mov.w	r7, r2, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801fb98:	fa2f f787 	sxtb16	r7, r7
 801fb9c:	fa2f f282 	sxtb16	r2, r2
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801fba0:	fb26 960b 	smlad	r6, r6, fp, r9
 801fba4:	fb22 a808 	smlad	r8, r2, r8, sl
    memcpy(&val, *in_q15, 4);
 801fba8:	f8d1 a014 	ldr.w	sl, [r1, #20]
 801fbac:	fb22 e20b 	smlad	r2, r2, fp, lr
 801fbb0:	f8d4 e014 	ldr.w	lr, [r4, #20]
 801fbb4:	fb2c 330a 	smlad	r3, ip, sl, r3
 801fbb8:	fb2c 6c0e 	smlad	ip, ip, lr, r6
 801fbbc:	fb27 8a0a 	smlad	sl, r7, sl, r8
 801fbc0:	f8d1 8018 	ldr.w	r8, [r1, #24]
 801fbc4:	fb27 270e 	smlad	r7, r7, lr, r2
 801fbc8:	f8d4 b018 	ldr.w	fp, [r4, #24]
    memcpy(&val, *in_q7, 4);
 801fbcc:	68c6      	ldr	r6, [r0, #12]
  return (op1 >> op2) | (op1 << (32U - op2));
 801fbce:	ea4f 2936 	mov.w	r9, r6, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801fbd2:	fa2f f989 	sxtb16	r9, r9
 801fbd6:	fa2f f686 	sxtb16	r6, r6
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801fbda:	fb26 3208 	smlad	r2, r6, r8, r3
 801fbde:	68eb      	ldr	r3, [r5, #12]
  return (op1 >> op2) | (op1 << (32U - op2));
 801fbe0:	ea4f 2e33 	mov.w	lr, r3, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801fbe4:	fa2f fe8e 	sxtb16	lr, lr
 801fbe8:	fa2f f383 	sxtb16	r3, r3
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801fbec:	fb26 c60b 	smlad	r6, r6, fp, ip
 801fbf0:	fb23 a808 	smlad	r8, r3, r8, sl
    memcpy(&val, *in_q15, 4);
 801fbf4:	f8d1 c01c 	ldr.w	ip, [r1, #28]
 801fbf8:	fb23 730b 	smlad	r3, r3, fp, r7
 801fbfc:	69e7      	ldr	r7, [r4, #28]
 801fbfe:	fb29 220c 	smlad	r2, r9, ip, r2
 801fc02:	fb29 6607 	smlad	r6, r9, r7, r6
 801fc06:	fb2e 8c0c 	smlad	ip, lr, ip, r8
 801fc0a:	f8d1 8020 	ldr.w	r8, [r1, #32]
 801fc0e:	fb2e 3a07 	smlad	sl, lr, r7, r3
 801fc12:	f8d4 9020 	ldr.w	r9, [r4, #32]
    memcpy(&val, *in_q7, 4);
 801fc16:	6903      	ldr	r3, [r0, #16]
  return (op1 >> op2) | (op1 << (32U - op2));
 801fc18:	ea4f 2e33 	mov.w	lr, r3, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801fc1c:	fa2f fe8e 	sxtb16	lr, lr
 801fc20:	fa2f f383 	sxtb16	r3, r3
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801fc24:	fb23 2208 	smlad	r2, r3, r8, r2
 801fc28:	f8d5 b010 	ldr.w	fp, [r5, #16]
  return (op1 >> op2) | (op1 << (32U - op2));
 801fc2c:	ea4f 273b 	mov.w	r7, fp, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801fc30:	fa2f f787 	sxtb16	r7, r7
 801fc34:	fa2f fb8b 	sxtb16	fp, fp
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801fc38:	fb23 6309 	smlad	r3, r3, r9, r6
 801fc3c:	fb2b c808 	smlad	r8, fp, r8, ip
    memcpy(&val, *in_q15, 4);
 801fc40:	6a4e      	ldr	r6, [r1, #36]	@ 0x24
 801fc42:	fb2b ab09 	smlad	fp, fp, r9, sl
 801fc46:	f8d4 c024 	ldr.w	ip, [r4, #36]	@ 0x24
 801fc4a:	fb2e 2206 	smlad	r2, lr, r6, r2
 801fc4e:	fb2e 3e0c 	smlad	lr, lr, ip, r3
 801fc52:	fb27 8906 	smlad	r9, r7, r6, r8
 801fc56:	f8d1 8028 	ldr.w	r8, [r1, #40]	@ 0x28
 801fc5a:	fb27 bc0c 	smlad	ip, r7, ip, fp
 801fc5e:	f8d4 a028 	ldr.w	sl, [r4, #40]	@ 0x28
    memcpy(&val, *in_q7, 4);
 801fc62:	6943      	ldr	r3, [r0, #20]
  return (op1 >> op2) | (op1 << (32U - op2));
 801fc64:	ea4f 2733 	mov.w	r7, r3, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801fc68:	fa2f f787 	sxtb16	r7, r7
 801fc6c:	fa2f f383 	sxtb16	r3, r3
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801fc70:	fb23 2208 	smlad	r2, r3, r8, r2
 801fc74:	f8d5 b014 	ldr.w	fp, [r5, #20]
  return (op1 >> op2) | (op1 << (32U - op2));
 801fc78:	ea4f 263b 	mov.w	r6, fp, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801fc7c:	fa2f f686 	sxtb16	r6, r6
 801fc80:	fa2f fb8b 	sxtb16	fp, fp
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801fc84:	fb23 e30a 	smlad	r3, r3, sl, lr
 801fc88:	fb2b 9808 	smlad	r8, fp, r8, r9
    memcpy(&val, *in_q15, 4);
 801fc8c:	f8d1 e02c 	ldr.w	lr, [r1, #44]	@ 0x2c
 801fc90:	fb2b cb0a 	smlad	fp, fp, sl, ip
 801fc94:	f8d4 c02c 	ldr.w	ip, [r4, #44]	@ 0x2c
 801fc98:	fb27 220e 	smlad	r2, r7, lr, r2
 801fc9c:	fb27 370c 	smlad	r7, r7, ip, r3
 801fca0:	fb26 8e0e 	smlad	lr, r6, lr, r8
 801fca4:	f8d1 8030 	ldr.w	r8, [r1, #48]	@ 0x30
 801fca8:	fb26 bc0c 	smlad	ip, r6, ip, fp
 801fcac:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
    memcpy(&val, *in_q7, 4);
 801fcb0:	6983      	ldr	r3, [r0, #24]
  return (op1 >> op2) | (op1 << (32U - op2));
 801fcb2:	ea4f 2933 	mov.w	r9, r3, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801fcb6:	fa2f f989 	sxtb16	r9, r9
 801fcba:	fa2f f383 	sxtb16	r3, r3
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801fcbe:	fb23 2208 	smlad	r2, r3, r8, r2
 801fcc2:	f8d5 b018 	ldr.w	fp, [r5, #24]
  return (op1 >> op2) | (op1 << (32U - op2));
 801fcc6:	ea4f 263b 	mov.w	r6, fp, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801fcca:	fa2f f686 	sxtb16	r6, r6
 801fcce:	fa2f fb8b 	sxtb16	fp, fp
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801fcd2:	fb23 730a 	smlad	r3, r3, sl, r7
 801fcd6:	fb2b e808 	smlad	r8, fp, r8, lr
    memcpy(&val, *in_q15, 4);
 801fcda:	6b4f      	ldr	r7, [r1, #52]	@ 0x34
 801fcdc:	fb2b cb0a 	smlad	fp, fp, sl, ip
 801fce0:	f8d4 c034 	ldr.w	ip, [r4, #52]	@ 0x34
 801fce4:	fb29 2207 	smlad	r2, r9, r7, r2
 801fce8:	fb29 3e0c 	smlad	lr, r9, ip, r3
 801fcec:	fb26 8707 	smlad	r7, r6, r7, r8
 801fcf0:	f8d1 8038 	ldr.w	r8, [r1, #56]	@ 0x38
 801fcf4:	fb26 bc0c 	smlad	ip, r6, ip, fp
 801fcf8:	f8d4 a038 	ldr.w	sl, [r4, #56]	@ 0x38
    memcpy(&val, *in_q7, 4);
 801fcfc:	69c3      	ldr	r3, [r0, #28]
  return (op1 >> op2) | (op1 << (32U - op2));
 801fcfe:	ea4f 2933 	mov.w	r9, r3, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801fd02:	fa2f f989 	sxtb16	r9, r9
 801fd06:	fa2f f383 	sxtb16	r3, r3
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801fd0a:	fb23 2208 	smlad	r2, r3, r8, r2
 801fd0e:	f8d5 b01c 	ldr.w	fp, [r5, #28]
  return (op1 >> op2) | (op1 << (32U - op2));
 801fd12:	ea4f 263b 	mov.w	r6, fp, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801fd16:	fa2f f686 	sxtb16	r6, r6
 801fd1a:	fa2f fb8b 	sxtb16	fp, fp
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801fd1e:	fb23 e30a 	smlad	r3, r3, sl, lr
 801fd22:	fb2b 7808 	smlad	r8, fp, r8, r7
    memcpy(&val, *in_q15, 4);
 801fd26:	6bcf      	ldr	r7, [r1, #60]	@ 0x3c
 801fd28:	fb2b cb0a 	smlad	fp, fp, sl, ip
 801fd2c:	f8d4 c03c 	ldr.w	ip, [r4, #60]	@ 0x3c
 801fd30:	fb29 2207 	smlad	r2, r9, r7, r2
 801fd34:	fb29 3e0c 	smlad	lr, r9, ip, r3
 801fd38:	fb26 8707 	smlad	r7, r6, r7, r8
 801fd3c:	f8d1 8040 	ldr.w	r8, [r1, #64]	@ 0x40
 801fd40:	fb26 bc0c 	smlad	ip, r6, ip, fp
 801fd44:	f8d4 a040 	ldr.w	sl, [r4, #64]	@ 0x40
    memcpy(&val, *in_q7, 4);
 801fd48:	6a03      	ldr	r3, [r0, #32]
  return (op1 >> op2) | (op1 << (32U - op2));
 801fd4a:	ea4f 2933 	mov.w	r9, r3, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801fd4e:	fa2f f989 	sxtb16	r9, r9
 801fd52:	fa2f f383 	sxtb16	r3, r3
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801fd56:	fb23 2208 	smlad	r2, r3, r8, r2
 801fd5a:	f8d5 b020 	ldr.w	fp, [r5, #32]
  return (op1 >> op2) | (op1 << (32U - op2));
 801fd5e:	ea4f 263b 	mov.w	r6, fp, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801fd62:	fa2f f686 	sxtb16	r6, r6
 801fd66:	fa2f fb8b 	sxtb16	fp, fp
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801fd6a:	fb23 e30a 	smlad	r3, r3, sl, lr
 801fd6e:	fb2b 7808 	smlad	r8, fp, r8, r7
    memcpy(&val, *in_q15, 4);
 801fd72:	6c4f      	ldr	r7, [r1, #68]	@ 0x44
 801fd74:	fb2b cb0a 	smlad	fp, fp, sl, ip
 801fd78:	f8d4 c044 	ldr.w	ip, [r4, #68]	@ 0x44
 801fd7c:	fb29 2207 	smlad	r2, r9, r7, r2
 801fd80:	fb29 3e0c 	smlad	lr, r9, ip, r3
 801fd84:	fb26 8707 	smlad	r7, r6, r7, r8
 801fd88:	f8d1 8048 	ldr.w	r8, [r1, #72]	@ 0x48
 801fd8c:	fb26 bc0c 	smlad	ip, r6, ip, fp
 801fd90:	f8d4 a048 	ldr.w	sl, [r4, #72]	@ 0x48
    memcpy(&val, *in_q7, 4);
 801fd94:	6a43      	ldr	r3, [r0, #36]	@ 0x24
  return (op1 >> op2) | (op1 << (32U - op2));
 801fd96:	ea4f 2933 	mov.w	r9, r3, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801fd9a:	fa2f f989 	sxtb16	r9, r9
 801fd9e:	fa2f f383 	sxtb16	r3, r3
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801fda2:	fb23 2208 	smlad	r2, r3, r8, r2
 801fda6:	f8d5 b024 	ldr.w	fp, [r5, #36]	@ 0x24
  return (op1 >> op2) | (op1 << (32U - op2));
 801fdaa:	ea4f 263b 	mov.w	r6, fp, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801fdae:	fa2f f686 	sxtb16	r6, r6
 801fdb2:	fa2f fb8b 	sxtb16	fp, fp
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801fdb6:	fb23 e30a 	smlad	r3, r3, sl, lr
 801fdba:	fb2b 7808 	smlad	r8, fp, r8, r7
    memcpy(&val, *in_q15, 4);
 801fdbe:	6ccf      	ldr	r7, [r1, #76]	@ 0x4c
 801fdc0:	fb2b cb0a 	smlad	fp, fp, sl, ip
 801fdc4:	f8d4 c04c 	ldr.w	ip, [r4, #76]	@ 0x4c
 801fdc8:	fb29 2207 	smlad	r2, r9, r7, r2
 801fdcc:	fb29 3e0c 	smlad	lr, r9, ip, r3
 801fdd0:	fb26 8707 	smlad	r7, r6, r7, r8
 801fdd4:	f8d1 8050 	ldr.w	r8, [r1, #80]	@ 0x50
 801fdd8:	fb26 bc0c 	smlad	ip, r6, ip, fp
 801fddc:	f8d4 a050 	ldr.w	sl, [r4, #80]	@ 0x50
    memcpy(&val, *in_q7, 4);
 801fde0:	6a83      	ldr	r3, [r0, #40]	@ 0x28
  return (op1 >> op2) | (op1 << (32U - op2));
 801fde2:	ea4f 2933 	mov.w	r9, r3, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801fde6:	fa2f f989 	sxtb16	r9, r9
 801fdea:	fa2f f383 	sxtb16	r3, r3
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801fdee:	fb23 2208 	smlad	r2, r3, r8, r2
 801fdf2:	6aae      	ldr	r6, [r5, #40]	@ 0x28
  return (op1 >> op2) | (op1 << (32U - op2));
 801fdf4:	ea4f 2b36 	mov.w	fp, r6, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801fdf8:	fa2f fb8b 	sxtb16	fp, fp
 801fdfc:	fa2f f686 	sxtb16	r6, r6
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801fe00:	fb23 e30a 	smlad	r3, r3, sl, lr
 801fe04:	fb26 7808 	smlad	r8, r6, r8, r7
    memcpy(&val, *in_q15, 4);
 801fe08:	f8d1 e054 	ldr.w	lr, [r1, #84]	@ 0x54
 801fe0c:	fb26 c60a 	smlad	r6, r6, sl, ip
 801fe10:	f8d4 c054 	ldr.w	ip, [r4, #84]	@ 0x54
 801fe14:	fb29 220e 	smlad	r2, r9, lr, r2
 801fe18:	fb29 330c 	smlad	r3, r9, ip, r3
 801fe1c:	fb2b 8e0e 	smlad	lr, fp, lr, r8
 801fe20:	f8d1 8058 	ldr.w	r8, [r1, #88]	@ 0x58
 801fe24:	fb2b 6c0c 	smlad	ip, fp, ip, r6
 801fe28:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
    memcpy(&val, *in_q7, 4);
 801fe2c:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
  return (op1 >> op2) | (op1 << (32U - op2));
 801fe2e:	ea4f 2637 	mov.w	r6, r7, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801fe32:	fa2f f686 	sxtb16	r6, r6
 801fe36:	fa2f f787 	sxtb16	r7, r7
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801fe3a:	fb27 2208 	smlad	r2, r7, r8, r2
 801fe3e:	6aed      	ldr	r5, [r5, #44]	@ 0x2c
  return (op1 >> op2) | (op1 << (32U - op2));
 801fe40:	ea4f 2a35 	mov.w	sl, r5, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801fe44:	fa2f fa8a 	sxtb16	sl, sl
 801fe48:	fa2f f585 	sxtb16	r5, r5
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801fe4c:	fb27 3709 	smlad	r7, r7, r9, r3
 801fe50:	fb25 e808 	smlad	r8, r5, r8, lr
    memcpy(&val, *in_q15, 4);
 801fe54:	6dcb      	ldr	r3, [r1, #92]	@ 0x5c
 801fe56:	fb25 c509 	smlad	r5, r5, r9, ip
 801fe5a:	6de4      	ldr	r4, [r4, #92]	@ 0x5c
 801fe5c:	fb26 2203 	smlad	r2, r6, r3, r2
 801fe60:	fb26 7704 	smlad	r7, r6, r4, r7
 801fe64:	ee06 7a90 	vmov	s13, r7
 801fe68:	fb2a 8703 	smlad	r7, sl, r3, r8
 801fe6c:	ee07 7a10 	vmov	s14, r7
 801fe70:	fb2a 5404 	smlad	r4, sl, r4, r5
 801fe74:	ee07 4a90 	vmov	s15, r4
		ch_0_out_0 = __SMLAD(a02, b0, ch_0_out_0);
		ch_0_out_1 = __SMLAD(a02, b1, ch_0_out_1);
		ch_1_out_0 = __SMLAD(a12, b0, ch_1_out_0);
		ch_1_out_1 = __SMLAD(a12, b1, ch_1_out_1);

		ch_0_out_0 = (q31_t) ((float) ch_0_out_0 * scale_0);
 801fe78:	ee06 2a10 	vmov	s12, r2
 801fe7c:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 801fe80:	ee26 6a05 	vmul.f32	s12, s12, s10
 801fe84:	eebd 6ac6 	vcvt.s32.f32	s12, s12
 801fe88:	ee16 4a10 	vmov	r4, s12
		ch_0_out_0 += out_offset;
 801fe8c:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 801fe8e:	443c      	add	r4, r7
		ch_0_out_0 = MAX(ch_0_out_0, activation_min);
 801fe90:	9f05      	ldr	r7, [sp, #20]
 801fe92:	42bc      	cmp	r4, r7
 801fe94:	bfb8      	it	lt
 801fe96:	463c      	movlt	r4, r7
		ch_0_out_0 = MIN(ch_0_out_0, activation_max);
 801fe98:	9e06      	ldr	r6, [sp, #24]
 801fe9a:	42b4      	cmp	r4, r6
 801fe9c:	bfa8      	it	ge
 801fe9e:	4634      	movge	r4, r6
		*out_0++ = (q7_t) ch_0_out_0;
 801fea0:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 801fea2:	f802 4b02 	strb.w	r4, [r2], #2

		ch_0_out_1 = (q31_t) ((float) ch_0_out_1 * scale_0);
 801fea6:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801feaa:	ee66 6a85 	vmul.f32	s13, s13, s10
 801feae:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 801feb2:	ee16 5a90 	vmov	r5, s13
		ch_0_out_1 += out_offset;
 801feb6:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801feb8:	4425      	add	r5, r4
		ch_0_out_1 = MAX(ch_0_out_1, activation_min);
 801feba:	42bd      	cmp	r5, r7
 801febc:	bfb8      	it	lt
 801febe:	463d      	movlt	r5, r7
		ch_0_out_1 = MIN(ch_0_out_1, activation_max);
 801fec0:	42b5      	cmp	r5, r6
 801fec2:	bfa8      	it	ge
 801fec4:	4635      	movge	r5, r6
		*out_1++ = (q7_t) ch_0_out_1;
 801fec6:	f8dd c010 	ldr.w	ip, [sp, #16]
 801feca:	4664      	mov	r4, ip
 801fecc:	f804 5b02 	strb.w	r5, [r4], #2

		ch_1_out_0 = (q31_t) ((float) ch_1_out_0 * scale_1);
 801fed0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801fed4:	ee27 7a25 	vmul.f32	s14, s14, s11
 801fed8:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 801fedc:	ee17 3a10 	vmov	r3, s14
		ch_1_out_0 += out_offset;
 801fee0:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 801fee2:	442b      	add	r3, r5
		ch_1_out_0 = MAX(ch_1_out_0, activation_min);
 801fee4:	42bb      	cmp	r3, r7
 801fee6:	bfb8      	it	lt
 801fee8:	463b      	movlt	r3, r7
		ch_1_out_0 = MIN(ch_1_out_0, activation_max);
 801feea:	4635      	mov	r5, r6
 801feec:	42b3      	cmp	r3, r6
 801feee:	bfa8      	it	ge
 801fef0:	4633      	movge	r3, r6
		*out_0++ = (q7_t) ch_1_out_0;
 801fef2:	9e17      	ldr	r6, [sp, #92]	@ 0x5c
 801fef4:	7073      	strb	r3, [r6, #1]

		ch_1_out_1 = (q31_t) ((float) ch_1_out_1 * scale_1);
 801fef6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801fefa:	ee67 7aa5 	vmul.f32	s15, s15, s11
 801fefe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801ff02:	ee17 3a90 	vmov	r3, s15
		ch_1_out_1 += out_offset;
 801ff06:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 801ff08:	4433      	add	r3, r6
		ch_1_out_1 = MAX(ch_1_out_1, activation_min);
 801ff0a:	42bb      	cmp	r3, r7
 801ff0c:	bfb8      	it	lt
 801ff0e:	463b      	movlt	r3, r7
		ch_1_out_1 = MIN(ch_1_out_1, activation_max);
 801ff10:	42ab      	cmp	r3, r5
 801ff12:	bfa8      	it	ge
 801ff14:	462b      	movge	r3, r5
		*out_1++ = (q7_t) ch_1_out_1;
 801ff16:	f88c 3001 	strb.w	r3, [ip, #1]
		scales += 2;
 801ff1a:	9d01      	ldr	r5, [sp, #4]
 801ff1c:	3508      	adds	r5, #8
 801ff1e:	9501      	str	r5, [sp, #4]

		/* skip row */
		ip_a0 += num_col_a;
 801ff20:	9e03      	ldr	r6, [sp, #12]
 801ff22:	f106 0330 	add.w	r3, r6, #48	@ 0x30
 801ff26:	4418      	add	r0, r3
		row_count--;
 801ff28:	9b02      	ldr	r3, [sp, #8]
 801ff2a:	3b01      	subs	r3, #1
 801ff2c:	b29b      	uxth	r3, r3
 801ff2e:	9302      	str	r3, [sp, #8]
		*out_1++ = (q7_t) ch_1_out_1;
 801ff30:	9404      	str	r4, [sp, #16]
		*out_0++ = (q7_t) ch_1_out_0;
 801ff32:	9217      	str	r2, [sp, #92]	@ 0x5c
	while (row_count) {
 801ff34:	9b02      	ldr	r3, [sp, #8]
 801ff36:	2b00      	cmp	r3, #0
 801ff38:	f47f adc2 	bne.w	801fac0 <mat_mult_kernel_s8_s16_reordered_ch48_fpreq+0x28>

	out_0 += output_ch;

	/* return the new output pointer with offset */
	return out_0;
}
 801ff3c:	9c07      	ldr	r4, [sp, #28]
 801ff3e:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801ff40:	1918      	adds	r0, r3, r4
 801ff42:	b009      	add	sp, #36	@ 0x24
 801ff44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ff48 <mat_mult_kernel_s8_s16_reordered_ch16_fpreq>:

q7_t* mat_mult_kernel_s8_s16_reordered_ch16_fpreq(const q7_t *input_a,
		const q15_t *input_b, const uint16_t output_ch, const float *scales,
		const int32_t out_offset, const int16_t activation_min,
		const int16_t activation_max, const uint16_t num_col_a,
		const int32_t *const output_bias, q7_t *out_0) {
 801ff48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ff4c:	b089      	sub	sp, #36	@ 0x24
 801ff4e:	9301      	str	r3, [sp, #4]
 801ff50:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	@ 0x4c
 801ff54:	9305      	str	r3, [sp, #20]
 801ff56:	f9bd 3050 	ldrsh.w	r3, [sp, #80]	@ 0x50
 801ff5a:	9306      	str	r3, [sp, #24]
 801ff5c:	f8bd 3054 	ldrh.w	r3, [sp, #84]	@ 0x54
 801ff60:	9303      	str	r3, [sp, #12]
	/* set up the second output pointers */
	q7_t *out_1 = out_0 + output_ch;
 801ff62:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801ff64:	4413      	add	r3, r2
 801ff66:	9304      	str	r3, [sp, #16]
	const int32_t *bias = output_bias;

	uint16_t row_count = output_ch / 2;
 801ff68:	0853      	lsrs	r3, r2, #1
 801ff6a:	9302      	str	r3, [sp, #8]
	const q7_t *ip_a0 = input_a;
	/* this loop over rows in A */
	while (row_count) {
 801ff6c:	9207      	str	r2, [sp, #28]
 801ff6e:	e108      	b.n	8020182 <mat_mult_kernel_s8_s16_reordered_ch16_fpreq+0x23a>
		/* setup pointers for B */
		const q15_t *ip_b0 = input_b;
		const q15_t *ip_b1 = ip_b0 + num_col_a;
 801ff70:	9b03      	ldr	r3, [sp, #12]
 801ff72:	eb01 0243 	add.w	r2, r1, r3, lsl #1

		/* align the second pointer for A */
		const q7_t *ip_a1 = ip_a0 + num_col_a;
 801ff76:	eb00 0a03 	add.w	sl, r0, r3
		const float scale_0 = scales[0];
 801ff7a:	9c01      	ldr	r4, [sp, #4]
 801ff7c:	ed94 5a00 	vldr	s10, [r4]
		const float scale_1 = scales[1];
 801ff80:	edd4 5a01 	vldr	s11, [r4, #4]

		/* Init accumulator with bias for channel N and N + 1 */
		q31_t ch_0_out_0 = *bias;
 801ff84:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 801ff86:	f8d5 9000 	ldr.w	r9, [r5]
		q31_t ch_0_out_1 = *bias++;
		q31_t ch_1_out_0 = *bias;
 801ff8a:	f8d5 8004 	ldr.w	r8, [r5, #4]
		q31_t ch_1_out_1 = *bias++;
 801ff8e:	3508      	adds	r5, #8
 801ff90:	9516      	str	r5, [sp, #88]	@ 0x58
 801ff92:	680e      	ldr	r6, [r1, #0]
 801ff94:	461d      	mov	r5, r3
 801ff96:	f851 7013 	ldr.w	r7, [r1, r3, lsl #1]
    memcpy(&val, *in_q7, 4);
 801ff9a:	6804      	ldr	r4, [r0, #0]
  return (op1 >> op2) | (op1 << (32U - op2));
 801ff9c:	ea4f 2e34 	mov.w	lr, r4, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801ffa0:	fa2f fe8e 	sxtb16	lr, lr
 801ffa4:	fa2f f484 	sxtb16	r4, r4
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801ffa8:	fb24 9306 	smlad	r3, r4, r6, r9
 801ffac:	5945      	ldr	r5, [r0, r5]
  return (op1 >> op2) | (op1 << (32U - op2));
 801ffae:	ea4f 2c35 	mov.w	ip, r5, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801ffb2:	fa2f fc8c 	sxtb16	ip, ip
 801ffb6:	fa2f f585 	sxtb16	r5, r5
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801ffba:	fb24 9407 	smlad	r4, r4, r7, r9
 801ffbe:	fb25 8606 	smlad	r6, r5, r6, r8
    memcpy(&val, *in_q15, 4);
 801ffc2:	f8d1 9004 	ldr.w	r9, [r1, #4]
 801ffc6:	fb25 8507 	smlad	r5, r5, r7, r8
 801ffca:	6857      	ldr	r7, [r2, #4]
 801ffcc:	fb2e 3309 	smlad	r3, lr, r9, r3
 801ffd0:	fb2e 4e07 	smlad	lr, lr, r7, r4
 801ffd4:	fb2c 6909 	smlad	r9, ip, r9, r6
 801ffd8:	f8d1 b008 	ldr.w	fp, [r1, #8]
 801ffdc:	fb2c 5c07 	smlad	ip, ip, r7, r5
 801ffe0:	f8d2 8008 	ldr.w	r8, [r2, #8]
    memcpy(&val, *in_q7, 4);
 801ffe4:	6845      	ldr	r5, [r0, #4]
  return (op1 >> op2) | (op1 << (32U - op2));
 801ffe6:	ea4f 2735 	mov.w	r7, r5, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801ffea:	fa2f f787 	sxtb16	r7, r7
 801ffee:	fa2f f585 	sxtb16	r5, r5
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801fff2:	fb25 330b 	smlad	r3, r5, fp, r3
 801fff6:	f8da 4004 	ldr.w	r4, [sl, #4]
  return (op1 >> op2) | (op1 << (32U - op2));
 801fffa:	ea4f 2634 	mov.w	r6, r4, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801fffe:	fa2f f686 	sxtb16	r6, r6
 8020002:	fa2f f484 	sxtb16	r4, r4
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8020006:	fb25 e508 	smlad	r5, r5, r8, lr
 802000a:	fb24 9e0b 	smlad	lr, r4, fp, r9
    memcpy(&val, *in_q15, 4);
 802000e:	f8d1 900c 	ldr.w	r9, [r1, #12]
 8020012:	fb24 c408 	smlad	r4, r4, r8, ip
 8020016:	f8d2 c00c 	ldr.w	ip, [r2, #12]
 802001a:	fb27 3309 	smlad	r3, r7, r9, r3
 802001e:	fb27 570c 	smlad	r7, r7, ip, r5
 8020022:	fb26 e909 	smlad	r9, r6, r9, lr
 8020026:	f8d1 e010 	ldr.w	lr, [r1, #16]
 802002a:	fb26 460c 	smlad	r6, r6, ip, r4
 802002e:	f8d2 b010 	ldr.w	fp, [r2, #16]
    memcpy(&val, *in_q7, 4);
 8020032:	6884      	ldr	r4, [r0, #8]
  return (op1 >> op2) | (op1 << (32U - op2));
 8020034:	ea4f 2834 	mov.w	r8, r4, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8020038:	fa2f f888 	sxtb16	r8, r8
 802003c:	fa2f f484 	sxtb16	r4, r4
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8020040:	fb24 330e 	smlad	r3, r4, lr, r3
 8020044:	f8da 5008 	ldr.w	r5, [sl, #8]
  return (op1 >> op2) | (op1 << (32U - op2));
 8020048:	ea4f 2c35 	mov.w	ip, r5, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 802004c:	fa2f fc8c 	sxtb16	ip, ip
 8020050:	fa2f f585 	sxtb16	r5, r5
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8020054:	fb24 740b 	smlad	r4, r4, fp, r7
 8020058:	fb25 9e0e 	smlad	lr, r5, lr, r9
    memcpy(&val, *in_q15, 4);
 802005c:	f8d1 9014 	ldr.w	r9, [r1, #20]
 8020060:	fb25 650b 	smlad	r5, r5, fp, r6
 8020064:	6956      	ldr	r6, [r2, #20]
 8020066:	fb28 3309 	smlad	r3, r8, r9, r3
 802006a:	fb28 4406 	smlad	r4, r8, r6, r4
 802006e:	fb2c e909 	smlad	r9, ip, r9, lr
 8020072:	f8d1 e018 	ldr.w	lr, [r1, #24]
 8020076:	fb2c 5806 	smlad	r8, ip, r6, r5
 802007a:	f8d2 c018 	ldr.w	ip, [r2, #24]
    memcpy(&val, *in_q7, 4);
 802007e:	68c7      	ldr	r7, [r0, #12]
  return (op1 >> op2) | (op1 << (32U - op2));
 8020080:	ea4f 2537 	mov.w	r5, r7, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8020084:	fa2f f585 	sxtb16	r5, r5
 8020088:	fa2f f787 	sxtb16	r7, r7
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 802008c:	fb27 330e 	smlad	r3, r7, lr, r3
 8020090:	f8da 600c 	ldr.w	r6, [sl, #12]
  return (op1 >> op2) | (op1 << (32U - op2));
 8020094:	ea4f 2a36 	mov.w	sl, r6, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8020098:	fa2f fa8a 	sxtb16	sl, sl
 802009c:	fa2f f686 	sxtb16	r6, r6
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80200a0:	fb27 470c 	smlad	r7, r7, ip, r4
 80200a4:	fb26 9e0e 	smlad	lr, r6, lr, r9
    memcpy(&val, *in_q15, 4);
 80200a8:	69cc      	ldr	r4, [r1, #28]
 80200aa:	fb26 860c 	smlad	r6, r6, ip, r8
 80200ae:	69d2      	ldr	r2, [r2, #28]
 80200b0:	fb25 3304 	smlad	r3, r5, r4, r3
 80200b4:	fb25 7702 	smlad	r7, r5, r2, r7
 80200b8:	ee06 7a90 	vmov	s13, r7
 80200bc:	fb2a e704 	smlad	r7, sl, r4, lr
 80200c0:	ee07 7a10 	vmov	s14, r7
 80200c4:	fb2a 6202 	smlad	r2, sl, r2, r6
 80200c8:	ee07 2a90 	vmov	s15, r2
		ch_0_out_0 = __SMLAD(a02, b0, ch_0_out_0);
		ch_0_out_1 = __SMLAD(a02, b1, ch_0_out_1);
		ch_1_out_0 = __SMLAD(a12, b0, ch_1_out_0);
		ch_1_out_1 = __SMLAD(a12, b1, ch_1_out_1);

		ch_0_out_0 = (q31_t) ((float) ch_0_out_0 * scale_0);
 80200cc:	ee06 3a10 	vmov	s12, r3
 80200d0:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 80200d4:	ee26 6a05 	vmul.f32	s12, s12, s10
 80200d8:	eebd 6ac6 	vcvt.s32.f32	s12, s12
 80200dc:	ee16 3a10 	vmov	r3, s12
		ch_0_out_0 += out_offset;
 80200e0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80200e2:	4413      	add	r3, r2
		ch_0_out_0 = MAX(ch_0_out_0, activation_min);
 80200e4:	9c05      	ldr	r4, [sp, #20]
 80200e6:	42a3      	cmp	r3, r4
 80200e8:	bfb8      	it	lt
 80200ea:	4623      	movlt	r3, r4
		ch_0_out_0 = MIN(ch_0_out_0, activation_max);
 80200ec:	9e06      	ldr	r6, [sp, #24]
 80200ee:	42b3      	cmp	r3, r6
 80200f0:	bfa8      	it	ge
 80200f2:	4633      	movge	r3, r6
		*out_0++ = (q7_t) ch_0_out_0;
 80200f4:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80200f6:	f802 3b02 	strb.w	r3, [r2], #2

		ch_0_out_1 = (q31_t) ((float) ch_0_out_1 * scale_0);
 80200fa:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80200fe:	ee66 6a85 	vmul.f32	s13, s13, s10
 8020102:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 8020106:	ee16 3a90 	vmov	r3, s13
		ch_0_out_1 += out_offset;
 802010a:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 802010c:	443b      	add	r3, r7
		ch_0_out_1 = MAX(ch_0_out_1, activation_min);
 802010e:	42a3      	cmp	r3, r4
 8020110:	bfb8      	it	lt
 8020112:	4623      	movlt	r3, r4
		ch_0_out_1 = MIN(ch_0_out_1, activation_max);
 8020114:	42b3      	cmp	r3, r6
 8020116:	bfa8      	it	ge
 8020118:	4633      	movge	r3, r6
		*out_1++ = (q7_t) ch_0_out_1;
 802011a:	f8dd c010 	ldr.w	ip, [sp, #16]
 802011e:	4665      	mov	r5, ip
 8020120:	f805 3b02 	strb.w	r3, [r5], #2

		ch_1_out_0 = (q31_t) ((float) ch_1_out_0 * scale_1);
 8020124:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8020128:	ee27 7a25 	vmul.f32	s14, s14, s11
 802012c:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8020130:	ee17 3a10 	vmov	r3, s14
		ch_1_out_0 += out_offset;
 8020134:	443b      	add	r3, r7
		ch_1_out_0 = MAX(ch_1_out_0, activation_min);
 8020136:	42a3      	cmp	r3, r4
 8020138:	bfb8      	it	lt
 802013a:	4623      	movlt	r3, r4
		ch_1_out_0 = MIN(ch_1_out_0, activation_max);
 802013c:	42b3      	cmp	r3, r6
 802013e:	bfa8      	it	ge
 8020140:	4633      	movge	r3, r6
		*out_0++ = (q7_t) ch_1_out_0;
 8020142:	9f17      	ldr	r7, [sp, #92]	@ 0x5c
 8020144:	707b      	strb	r3, [r7, #1]

		ch_1_out_1 = (q31_t) ((float) ch_1_out_1 * scale_1);
 8020146:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802014a:	ee67 7aa5 	vmul.f32	s15, s15, s11
 802014e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8020152:	ee17 3a90 	vmov	r3, s15
		ch_1_out_1 += out_offset;
 8020156:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 8020158:	443b      	add	r3, r7
		ch_1_out_1 = MAX(ch_1_out_1, activation_min);
 802015a:	42a3      	cmp	r3, r4
 802015c:	bfb8      	it	lt
 802015e:	4623      	movlt	r3, r4
		ch_1_out_1 = MIN(ch_1_out_1, activation_max);
 8020160:	42b3      	cmp	r3, r6
 8020162:	bfa8      	it	ge
 8020164:	4633      	movge	r3, r6
		*out_1++ = (q7_t) ch_1_out_1;
 8020166:	f88c 3001 	strb.w	r3, [ip, #1]
		scales += 2;
 802016a:	9c01      	ldr	r4, [sp, #4]
 802016c:	3408      	adds	r4, #8
 802016e:	9401      	str	r4, [sp, #4]

		/* skip row */
		ip_a0 += num_col_a;
 8020170:	9b03      	ldr	r3, [sp, #12]
 8020172:	3310      	adds	r3, #16
 8020174:	4418      	add	r0, r3
		row_count--;
 8020176:	9b02      	ldr	r3, [sp, #8]
 8020178:	3b01      	subs	r3, #1
 802017a:	b29b      	uxth	r3, r3
 802017c:	9302      	str	r3, [sp, #8]
		*out_1++ = (q7_t) ch_1_out_1;
 802017e:	9504      	str	r5, [sp, #16]
		*out_0++ = (q7_t) ch_1_out_0;
 8020180:	9217      	str	r2, [sp, #92]	@ 0x5c
	while (row_count) {
 8020182:	9b02      	ldr	r3, [sp, #8]
 8020184:	2b00      	cmp	r3, #0
 8020186:	f47f aef3 	bne.w	801ff70 <mat_mult_kernel_s8_s16_reordered_ch16_fpreq+0x28>

	out_0 += output_ch;

	/* return the new output pointer with offset */
	return out_0;
}
 802018a:	9e07      	ldr	r6, [sp, #28]
 802018c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 802018e:	1998      	adds	r0, r3, r6
 8020190:	b009      	add	sp, #36	@ 0x24
 8020192:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08020196 <mat_mult_kernel_s8_s16_reordered_ch24_fpreq>:

q7_t* mat_mult_kernel_s8_s16_reordered_ch24_fpreq(const q7_t *input_a,
		const q15_t *input_b, const uint16_t output_ch, const float *scales,
		const int32_t out_offset, const int16_t activation_min,
		const int16_t activation_max, const uint16_t num_col_a,
		const int32_t *const output_bias, q7_t *out_0) {
 8020196:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802019a:	b089      	sub	sp, #36	@ 0x24
 802019c:	9301      	str	r3, [sp, #4]
 802019e:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	@ 0x4c
 80201a2:	9305      	str	r3, [sp, #20]
 80201a4:	f9bd 3050 	ldrsh.w	r3, [sp, #80]	@ 0x50
 80201a8:	9306      	str	r3, [sp, #24]
 80201aa:	f8bd 3054 	ldrh.w	r3, [sp, #84]	@ 0x54
 80201ae:	9303      	str	r3, [sp, #12]
	/* set up the second output pointers */
	q7_t *out_1 = out_0 + output_ch;
 80201b0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80201b2:	4413      	add	r3, r2
 80201b4:	9304      	str	r3, [sp, #16]
	const int32_t *bias = output_bias;

	uint16_t row_count = output_ch / 2;
 80201b6:	0853      	lsrs	r3, r2, #1
 80201b8:	9302      	str	r3, [sp, #8]
	const q7_t *ip_a0 = input_a;
	/* this loop over rows in A */
	while (row_count) {
 80201ba:	9207      	str	r2, [sp, #28]
 80201bc:	e152      	b.n	8020464 <mat_mult_kernel_s8_s16_reordered_ch24_fpreq+0x2ce>
		/* setup pointers for B */
		const q15_t *ip_b0 = input_b;
		const q15_t *ip_b1 = ip_b0 + num_col_a;
 80201be:	9b03      	ldr	r3, [sp, #12]
 80201c0:	eb01 0443 	add.w	r4, r1, r3, lsl #1

		/* align the second pointer for A */
		const q7_t *ip_a1 = ip_a0 + num_col_a;
 80201c4:	18c7      	adds	r7, r0, r3
		const float scale_0 = scales[0];
 80201c6:	9a01      	ldr	r2, [sp, #4]
 80201c8:	ed92 5a00 	vldr	s10, [r2]
		const float scale_1 = scales[1];
 80201cc:	edd2 5a01 	vldr	s11, [r2, #4]

		/* Init accumulator with bias for channel N and N + 1 */
		q31_t ch_0_out_0 = *bias;
 80201d0:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 80201d2:	f8d5 a000 	ldr.w	sl, [r5]
		q31_t ch_0_out_1 = *bias++;
		q31_t ch_1_out_0 = *bias;
 80201d6:	f8d5 9004 	ldr.w	r9, [r5, #4]
		q31_t ch_1_out_1 = *bias++;
 80201da:	3508      	adds	r5, #8
 80201dc:	9516      	str	r5, [sp, #88]	@ 0x58
 80201de:	f8d1 e000 	ldr.w	lr, [r1]
 80201e2:	461d      	mov	r5, r3
 80201e4:	f851 8013 	ldr.w	r8, [r1, r3, lsl #1]
    memcpy(&val, *in_q7, 4);
 80201e8:	6802      	ldr	r2, [r0, #0]
  return (op1 >> op2) | (op1 << (32U - op2));
 80201ea:	ea4f 2c32 	mov.w	ip, r2, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80201ee:	fa2f fc8c 	sxtb16	ip, ip
 80201f2:	fa2f f282 	sxtb16	r2, r2
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80201f6:	fb22 a30e 	smlad	r3, r2, lr, sl
 80201fa:	5945      	ldr	r5, [r0, r5]
  return (op1 >> op2) | (op1 << (32U - op2));
 80201fc:	ea4f 2635 	mov.w	r6, r5, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8020200:	fa2f f686 	sxtb16	r6, r6
 8020204:	fa2f f585 	sxtb16	r5, r5
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8020208:	fb22 a208 	smlad	r2, r2, r8, sl
 802020c:	fb25 9e0e 	smlad	lr, r5, lr, r9
    memcpy(&val, *in_q15, 4);
 8020210:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8020214:	fb25 9508 	smlad	r5, r5, r8, r9
 8020218:	f8d4 8004 	ldr.w	r8, [r4, #4]
 802021c:	fb2c 330a 	smlad	r3, ip, sl, r3
 8020220:	fb2c 2c08 	smlad	ip, ip, r8, r2
 8020224:	fb26 ea0a 	smlad	sl, r6, sl, lr
 8020228:	f8d1 b008 	ldr.w	fp, [r1, #8]
 802022c:	fb26 5608 	smlad	r6, r6, r8, r5
 8020230:	f8d4 8008 	ldr.w	r8, [r4, #8]
    memcpy(&val, *in_q7, 4);
 8020234:	6845      	ldr	r5, [r0, #4]
  return (op1 >> op2) | (op1 << (32U - op2));
 8020236:	ea4f 2935 	mov.w	r9, r5, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 802023a:	fa2f f989 	sxtb16	r9, r9
 802023e:	fa2f f585 	sxtb16	r5, r5
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8020242:	fb25 330b 	smlad	r3, r5, fp, r3
 8020246:	687a      	ldr	r2, [r7, #4]
  return (op1 >> op2) | (op1 << (32U - op2));
 8020248:	ea4f 2e32 	mov.w	lr, r2, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 802024c:	fa2f fe8e 	sxtb16	lr, lr
 8020250:	fa2f f282 	sxtb16	r2, r2
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8020254:	fb25 c508 	smlad	r5, r5, r8, ip
 8020258:	fb22 ac0b 	smlad	ip, r2, fp, sl
    memcpy(&val, *in_q15, 4);
 802025c:	f8d1 b00c 	ldr.w	fp, [r1, #12]
 8020260:	fb22 6208 	smlad	r2, r2, r8, r6
 8020264:	68e6      	ldr	r6, [r4, #12]
 8020266:	fb29 330b 	smlad	r3, r9, fp, r3
 802026a:	fb29 5906 	smlad	r9, r9, r6, r5
 802026e:	fb2e cb0b 	smlad	fp, lr, fp, ip
 8020272:	f8d1 8010 	ldr.w	r8, [r1, #16]
 8020276:	fb2e 2e06 	smlad	lr, lr, r6, r2
 802027a:	f8d4 a010 	ldr.w	sl, [r4, #16]
    memcpy(&val, *in_q7, 4);
 802027e:	f8d0 c008 	ldr.w	ip, [r0, #8]
  return (op1 >> op2) | (op1 << (32U - op2));
 8020282:	ea4f 263c 	mov.w	r6, ip, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8020286:	fa2f f686 	sxtb16	r6, r6
 802028a:	fa2f fc8c 	sxtb16	ip, ip
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 802028e:	fb2c 3308 	smlad	r3, ip, r8, r3
 8020292:	68ba      	ldr	r2, [r7, #8]
  return (op1 >> op2) | (op1 << (32U - op2));
 8020294:	ea4f 2532 	mov.w	r5, r2, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8020298:	fa2f f585 	sxtb16	r5, r5
 802029c:	fa2f f282 	sxtb16	r2, r2
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80202a0:	fb2c 9c0a 	smlad	ip, ip, sl, r9
 80202a4:	fb22 b808 	smlad	r8, r2, r8, fp
    memcpy(&val, *in_q15, 4);
 80202a8:	f8d1 9014 	ldr.w	r9, [r1, #20]
 80202ac:	fb22 e20a 	smlad	r2, r2, sl, lr
 80202b0:	f8d4 a014 	ldr.w	sl, [r4, #20]
 80202b4:	fb26 3309 	smlad	r3, r6, r9, r3
 80202b8:	fb26 c60a 	smlad	r6, r6, sl, ip
 80202bc:	fb25 8909 	smlad	r9, r5, r9, r8
 80202c0:	f8d1 e018 	ldr.w	lr, [r1, #24]
 80202c4:	fb25 250a 	smlad	r5, r5, sl, r2
 80202c8:	f8d4 a018 	ldr.w	sl, [r4, #24]
    memcpy(&val, *in_q7, 4);
 80202cc:	68c2      	ldr	r2, [r0, #12]
  return (op1 >> op2) | (op1 << (32U - op2));
 80202ce:	ea4f 2832 	mov.w	r8, r2, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80202d2:	fa2f f888 	sxtb16	r8, r8
 80202d6:	fa2f f282 	sxtb16	r2, r2
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80202da:	fb22 330e 	smlad	r3, r2, lr, r3
 80202de:	f8d7 b00c 	ldr.w	fp, [r7, #12]
  return (op1 >> op2) | (op1 << (32U - op2));
 80202e2:	ea4f 2c3b 	mov.w	ip, fp, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80202e6:	fa2f fc8c 	sxtb16	ip, ip
 80202ea:	fa2f fb8b 	sxtb16	fp, fp
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80202ee:	fb22 620a 	smlad	r2, r2, sl, r6
 80202f2:	fb2b 9e0e 	smlad	lr, fp, lr, r9
    memcpy(&val, *in_q15, 4);
 80202f6:	69ce      	ldr	r6, [r1, #28]
 80202f8:	fb2b 5b0a 	smlad	fp, fp, sl, r5
 80202fc:	69e5      	ldr	r5, [r4, #28]
 80202fe:	fb28 3306 	smlad	r3, r8, r6, r3
 8020302:	fb28 2805 	smlad	r8, r8, r5, r2
 8020306:	fb2c e606 	smlad	r6, ip, r6, lr
 802030a:	f8d1 e020 	ldr.w	lr, [r1, #32]
 802030e:	fb2c ba05 	smlad	sl, ip, r5, fp
 8020312:	f8d4 9020 	ldr.w	r9, [r4, #32]
    memcpy(&val, *in_q7, 4);
 8020316:	6902      	ldr	r2, [r0, #16]
  return (op1 >> op2) | (op1 << (32U - op2));
 8020318:	ea4f 2c32 	mov.w	ip, r2, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 802031c:	fa2f fc8c 	sxtb16	ip, ip
 8020320:	fa2f f282 	sxtb16	r2, r2
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8020324:	fb22 330e 	smlad	r3, r2, lr, r3
 8020328:	693d      	ldr	r5, [r7, #16]
  return (op1 >> op2) | (op1 << (32U - op2));
 802032a:	ea4f 2b35 	mov.w	fp, r5, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 802032e:	fa2f fb8b 	sxtb16	fp, fp
 8020332:	fa2f f585 	sxtb16	r5, r5
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8020336:	fb22 8209 	smlad	r2, r2, r9, r8
 802033a:	fb25 6e0e 	smlad	lr, r5, lr, r6
    memcpy(&val, *in_q15, 4);
 802033e:	6a4e      	ldr	r6, [r1, #36]	@ 0x24
 8020340:	fb25 a509 	smlad	r5, r5, r9, sl
 8020344:	f8d4 8024 	ldr.w	r8, [r4, #36]	@ 0x24
 8020348:	fb2c 3306 	smlad	r3, ip, r6, r3
 802034c:	fb2c 2208 	smlad	r2, ip, r8, r2
 8020350:	fb2b e906 	smlad	r9, fp, r6, lr
 8020354:	f8d1 e028 	ldr.w	lr, [r1, #40]	@ 0x28
 8020358:	fb2b 5808 	smlad	r8, fp, r8, r5
 802035c:	f8d4 a028 	ldr.w	sl, [r4, #40]	@ 0x28
    memcpy(&val, *in_q7, 4);
 8020360:	f8d0 c014 	ldr.w	ip, [r0, #20]
  return (op1 >> op2) | (op1 << (32U - op2));
 8020364:	ea4f 253c 	mov.w	r5, ip, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8020368:	fa2f f585 	sxtb16	r5, r5
 802036c:	fa2f fc8c 	sxtb16	ip, ip
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8020370:	fb2c 330e 	smlad	r3, ip, lr, r3
 8020374:	697e      	ldr	r6, [r7, #20]
  return (op1 >> op2) | (op1 << (32U - op2));
 8020376:	ea4f 2736 	mov.w	r7, r6, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 802037a:	fa2f f787 	sxtb16	r7, r7
 802037e:	fa2f f686 	sxtb16	r6, r6
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8020382:	fb2c 2c0a 	smlad	ip, ip, sl, r2
 8020386:	fb26 9e0e 	smlad	lr, r6, lr, r9
    memcpy(&val, *in_q15, 4);
 802038a:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 802038c:	fb26 860a 	smlad	r6, r6, sl, r8
 8020390:	6ae4      	ldr	r4, [r4, #44]	@ 0x2c
 8020392:	fb25 3302 	smlad	r3, r5, r2, r3
 8020396:	fb25 cc04 	smlad	ip, r5, r4, ip
 802039a:	ee06 ca90 	vmov	s13, ip
 802039e:	fb27 ec02 	smlad	ip, r7, r2, lr
 80203a2:	ee07 ca10 	vmov	s14, ip
 80203a6:	fb27 6404 	smlad	r4, r7, r4, r6
 80203aa:	ee07 4a90 	vmov	s15, r4
		ch_0_out_1 = __SMLAD(a02, b1, ch_0_out_1);
		ch_1_out_0 = __SMLAD(a12, b0, ch_1_out_0);
		b0 = arm_nn_read_q15x2_ia(&ip_b0);
		ch_1_out_1 = __SMLAD(a12, b1, ch_1_out_1);

		ch_0_out_0 = (q31_t) ((float) ch_0_out_0 * scale_0);
 80203ae:	ee06 3a10 	vmov	s12, r3
 80203b2:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 80203b6:	ee26 6a05 	vmul.f32	s12, s12, s10
 80203ba:	eebd 6ac6 	vcvt.s32.f32	s12, s12
 80203be:	ee16 3a10 	vmov	r3, s12
		ch_0_out_0 += out_offset;
 80203c2:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 80203c4:	4423      	add	r3, r4
		ch_0_out_0 = MAX(ch_0_out_0, activation_min);
 80203c6:	9a05      	ldr	r2, [sp, #20]
 80203c8:	4293      	cmp	r3, r2
 80203ca:	bfb8      	it	lt
 80203cc:	4613      	movlt	r3, r2
		ch_0_out_0 = MIN(ch_0_out_0, activation_max);
 80203ce:	9e06      	ldr	r6, [sp, #24]
 80203d0:	42b3      	cmp	r3, r6
 80203d2:	bfa8      	it	ge
 80203d4:	4633      	movge	r3, r6
		*out_0++ = (q7_t) ch_0_out_0;
 80203d6:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 80203d8:	f804 3b02 	strb.w	r3, [r4], #2

		ch_0_out_1 = (q31_t) ((float) ch_0_out_1 * scale_0);
 80203dc:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80203e0:	ee66 6a85 	vmul.f32	s13, s13, s10
 80203e4:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 80203e8:	ee16 3a90 	vmov	r3, s13
		ch_0_out_1 += out_offset;
 80203ec:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 80203ee:	443b      	add	r3, r7
		ch_0_out_1 = MAX(ch_0_out_1, activation_min);
 80203f0:	4293      	cmp	r3, r2
 80203f2:	bfb8      	it	lt
 80203f4:	4613      	movlt	r3, r2
		ch_0_out_1 = MIN(ch_0_out_1, activation_max);
 80203f6:	42b3      	cmp	r3, r6
 80203f8:	bfa8      	it	ge
 80203fa:	4633      	movge	r3, r6
		*out_1++ = (q7_t) ch_0_out_1;
 80203fc:	f8dd c010 	ldr.w	ip, [sp, #16]
 8020400:	4665      	mov	r5, ip
 8020402:	f805 3b02 	strb.w	r3, [r5], #2

		ch_1_out_0 = (q31_t) ((float) ch_1_out_0 * scale_1);
 8020406:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 802040a:	ee27 7a25 	vmul.f32	s14, s14, s11
 802040e:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8020412:	ee17 3a10 	vmov	r3, s14
		ch_1_out_0 += out_offset;
 8020416:	443b      	add	r3, r7
		ch_1_out_0 = MAX(ch_1_out_0, activation_min);
 8020418:	4293      	cmp	r3, r2
 802041a:	bfb8      	it	lt
 802041c:	4613      	movlt	r3, r2
		ch_1_out_0 = MIN(ch_1_out_0, activation_max);
 802041e:	42b3      	cmp	r3, r6
 8020420:	bfa8      	it	ge
 8020422:	4633      	movge	r3, r6
		*out_0++ = (q7_t) ch_1_out_0;
 8020424:	9f17      	ldr	r7, [sp, #92]	@ 0x5c
 8020426:	707b      	strb	r3, [r7, #1]

		ch_1_out_1 = (q31_t) ((float) ch_1_out_1 * scale_1);
 8020428:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802042c:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8020430:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8020434:	ee17 3a90 	vmov	r3, s15
		ch_1_out_1 += out_offset;
 8020438:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 802043a:	443b      	add	r3, r7
		ch_1_out_1 = MAX(ch_1_out_1, activation_min);
 802043c:	4293      	cmp	r3, r2
 802043e:	bfb8      	it	lt
 8020440:	4613      	movlt	r3, r2
		ch_1_out_1 = MIN(ch_1_out_1, activation_max);
 8020442:	42b3      	cmp	r3, r6
 8020444:	bfa8      	it	ge
 8020446:	4633      	movge	r3, r6
		*out_1++ = (q7_t) ch_1_out_1;
 8020448:	f88c 3001 	strb.w	r3, [ip, #1]
		scales += 2;
 802044c:	9a01      	ldr	r2, [sp, #4]
 802044e:	3208      	adds	r2, #8
 8020450:	9201      	str	r2, [sp, #4]

		/* skip row */
		ip_a0 += num_col_a;
 8020452:	9b03      	ldr	r3, [sp, #12]
 8020454:	3318      	adds	r3, #24
 8020456:	4418      	add	r0, r3
		row_count--;
 8020458:	9b02      	ldr	r3, [sp, #8]
 802045a:	3b01      	subs	r3, #1
 802045c:	b29b      	uxth	r3, r3
 802045e:	9302      	str	r3, [sp, #8]
		*out_1++ = (q7_t) ch_1_out_1;
 8020460:	9504      	str	r5, [sp, #16]
		*out_0++ = (q7_t) ch_1_out_0;
 8020462:	9417      	str	r4, [sp, #92]	@ 0x5c
	while (row_count) {
 8020464:	9b02      	ldr	r3, [sp, #8]
 8020466:	2b00      	cmp	r3, #0
 8020468:	f47f aea9 	bne.w	80201be <mat_mult_kernel_s8_s16_reordered_ch24_fpreq+0x28>

	out_0 += output_ch;

	/* return the new output pointer with offset */
	return out_0;
}
 802046c:	9d07      	ldr	r5, [sp, #28]
 802046e:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8020470:	1958      	adds	r0, r3, r5
 8020472:	b009      	add	sp, #36	@ 0x24
 8020474:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08020478 <mat_mult_kernel_s8_s16_reordered_fpreq>:

q7_t* mat_mult_kernel_s8_s16_reordered_fpreq(const q7_t *input_a,
		const q15_t *input_b, const uint16_t output_ch, const float *scales,
		const int32_t out_offset, const int16_t activation_min,
		const int16_t activation_max, const uint16_t num_col_a,
		const int32_t *const output_bias, q7_t *out_0) {
 8020478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802047c:	b08b      	sub	sp, #44	@ 0x2c
 802047e:	4683      	mov	fp, r0
 8020480:	9108      	str	r1, [sp, #32]
 8020482:	4616      	mov	r6, r2
 8020484:	469c      	mov	ip, r3
 8020486:	9f14      	ldr	r7, [sp, #80]	@ 0x50
 8020488:	f9bd 3054 	ldrsh.w	r3, [sp, #84]	@ 0x54
 802048c:	f9bd a058 	ldrsh.w	sl, [sp, #88]	@ 0x58
 8020490:	f8bd 005c 	ldrh.w	r0, [sp, #92]	@ 0x5c
 8020494:	f8dd 9060 	ldr.w	r9, [sp, #96]	@ 0x60
	/* set up the second output pointers */
	q7_t *out_1 = out_0 + output_ch;
 8020498:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 802049a:	4432      	add	r2, r6
 802049c:	9203      	str	r2, [sp, #12]
	const int32_t *bias = output_bias;

	uint16_t row_count = output_ch / 2;
 802049e:	0872      	lsrs	r2, r6, #1
 80204a0:	9202      	str	r2, [sp, #8]
	const q7_t *ip_a0 = input_a;
	/* this loop over rows in A */
	while (row_count) {
 80204a2:	9609      	str	r6, [sp, #36]	@ 0x24
 80204a4:	4664      	mov	r4, ip
 80204a6:	46bc      	mov	ip, r7
 80204a8:	4651      	mov	r1, sl
 80204aa:	4602      	mov	r2, r0
 80204ac:	e093      	b.n	80205d6 <mat_mult_kernel_s8_s16_reordered_fpreq+0x15e>
 80204ae:	f8de 7000 	ldr.w	r7, [lr]
 80204b2:	f8d8 c000 	ldr.w	ip, [r8]
    memcpy(&val, *in_q7, 4);
 80204b6:	f85b 9b04 	ldr.w	r9, [fp], #4
  return (op1 >> op2) | (op1 << (32U - op2));
 80204ba:	ea4f 2439 	mov.w	r4, r9, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80204be:	fa2f f484 	sxtb16	r4, r4
 80204c2:	fa2f f989 	sxtb16	r9, r9
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80204c6:	fb29 5507 	smlad	r5, r9, r7, r5
 80204ca:	f85a 3b04 	ldr.w	r3, [sl], #4
  return (op1 >> op2) | (op1 << (32U - op2));
 80204ce:	ea4f 2133 	mov.w	r1, r3, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80204d2:	fa2f f181 	sxtb16	r1, r1
 80204d6:	fa2f f383 	sxtb16	r3, r3
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80204da:	fb29 090c 	smlad	r9, r9, ip, r0
 80204de:	fb23 2707 	smlad	r7, r3, r7, r2
    memcpy(&val, *in_q15, 4);
 80204e2:	f8de 2004 	ldr.w	r2, [lr, #4]
    *in_q15 += 2;
 80204e6:	f10e 0e08 	add.w	lr, lr, #8
 80204ea:	9801      	ldr	r0, [sp, #4]
 80204ec:	fb23 030c 	smlad	r3, r3, ip, r0
    memcpy(&val, *in_q15, 4);
 80204f0:	f8d8 c004 	ldr.w	ip, [r8, #4]
    *in_q15 += 2;
 80204f4:	f108 0808 	add.w	r8, r8, #8
 80204f8:	fb24 5502 	smlad	r5, r4, r2, r5
 80204fc:	fb24 940c 	smlad	r4, r4, ip, r9
			ch_1_out_1 = __SMLAD(a11, b1, ch_1_out_1);

			b1 = arm_nn_read_q15x2_ia(&ip_b1);

			ch_0_out_0 = __SMLAD(a02, b0, ch_0_out_0);
			ch_0_out_1 = __SMLAD(a02, b1, ch_0_out_1);
 8020500:	4620      	mov	r0, r4
 8020502:	fb21 7202 	smlad	r2, r1, r2, r7
 8020506:	fb21 310c 	smlad	r1, r1, ip, r3
			ch_1_out_0 = __SMLAD(a12, b0, ch_1_out_0);
			ch_1_out_1 = __SMLAD(a12, b1, ch_1_out_1);
 802050a:	9101      	str	r1, [sp, #4]

			col_count--;
 802050c:	3e01      	subs	r6, #1
 802050e:	b2b6      	uxth	r6, r6
		while (col_count) {
 8020510:	2e00      	cmp	r6, #0
 8020512:	d1cc      	bne.n	80204ae <mat_mult_kernel_s8_s16_reordered_fpreq+0x36>
		} /* while over col_count */

		ch_0_out_0 = (q31_t) ((float) ch_0_out_0 * scale_0);
 8020514:	4617      	mov	r7, r2
 8020516:	9c04      	ldr	r4, [sp, #16]
 8020518:	f8dd c050 	ldr.w	ip, [sp, #80]	@ 0x50
 802051c:	9b05      	ldr	r3, [sp, #20]
 802051e:	9906      	ldr	r1, [sp, #24]
 8020520:	9a07      	ldr	r2, [sp, #28]
 8020522:	f8dd 9060 	ldr.w	r9, [sp, #96]	@ 0x60
 8020526:	ee07 5a90 	vmov	s15, r5
 802052a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802052e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8020532:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8020536:	ee17 6a90 	vmov	r6, s15
		ch_0_out_0 += out_offset;
 802053a:	4466      	add	r6, ip
		ch_0_out_0 = MAX(ch_0_out_0, activation_min);
 802053c:	429e      	cmp	r6, r3
 802053e:	bfb8      	it	lt
 8020540:	461e      	movlt	r6, r3
		ch_0_out_0 = MIN(ch_0_out_0, activation_max);
 8020542:	428e      	cmp	r6, r1
 8020544:	bfa8      	it	ge
 8020546:	460e      	movge	r6, r1
		*out_0++ = (q7_t) ch_0_out_0;
 8020548:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 802054a:	f805 6b02 	strb.w	r6, [r5], #2

		ch_0_out_1 = (q31_t) ((float) ch_0_out_1 * scale_0);
 802054e:	ee07 0a90 	vmov	s15, r0
 8020552:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8020556:	ee67 7aa6 	vmul.f32	s15, s15, s13
 802055a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 802055e:	ee17 0a90 	vmov	r0, s15
		ch_0_out_1 += out_offset;
 8020562:	4460      	add	r0, ip
		ch_0_out_1 = MAX(ch_0_out_1, activation_min);
 8020564:	4298      	cmp	r0, r3
 8020566:	bfb8      	it	lt
 8020568:	4618      	movlt	r0, r3
		ch_0_out_1 = MIN(ch_0_out_1, activation_max);
 802056a:	4288      	cmp	r0, r1
 802056c:	bfa8      	it	ge
 802056e:	4608      	movge	r0, r1
		*out_1++ = (q7_t) ch_0_out_1;
 8020570:	f8dd e00c 	ldr.w	lr, [sp, #12]
 8020574:	4676      	mov	r6, lr
 8020576:	f806 0b02 	strb.w	r0, [r6], #2

		ch_1_out_0 = (q31_t) ((float) ch_1_out_0 * scale_1);
 802057a:	ee07 7a90 	vmov	s15, r7
 802057e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8020582:	ee67 7a87 	vmul.f32	s15, s15, s14
 8020586:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 802058a:	ee17 0a90 	vmov	r0, s15
		ch_1_out_0 += out_offset;
 802058e:	4460      	add	r0, ip
		ch_1_out_0 = MAX(ch_1_out_0, activation_min);
 8020590:	4298      	cmp	r0, r3
 8020592:	bfb8      	it	lt
 8020594:	4618      	movlt	r0, r3
		ch_1_out_0 = MIN(ch_1_out_0, activation_max);
 8020596:	4288      	cmp	r0, r1
 8020598:	bfa8      	it	ge
 802059a:	4608      	movge	r0, r1
		*out_0++ = (q7_t) ch_1_out_0;
 802059c:	9f19      	ldr	r7, [sp, #100]	@ 0x64
 802059e:	7078      	strb	r0, [r7, #1]

		ch_1_out_1 = (q31_t) ((float) ch_1_out_1 * scale_1);
 80205a0:	eddd 7a01 	vldr	s15, [sp, #4]
 80205a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80205a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80205ac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80205b0:	ee17 0a90 	vmov	r0, s15
		ch_1_out_1 += out_offset;
 80205b4:	4460      	add	r0, ip
		ch_1_out_1 = MAX(ch_1_out_1, activation_min);
 80205b6:	4298      	cmp	r0, r3
 80205b8:	bfb8      	it	lt
 80205ba:	4618      	movlt	r0, r3
		ch_1_out_1 = MIN(ch_1_out_1, activation_max);
 80205bc:	4288      	cmp	r0, r1
 80205be:	bfa8      	it	ge
 80205c0:	4608      	movge	r0, r1
		*out_1++ = (q7_t) ch_1_out_1;
 80205c2:	f88e 0001 	strb.w	r0, [lr, #1]
		scales += 2;
 80205c6:	3408      	adds	r4, #8

		/* skip row */
		ip_a0 += num_col_a;
 80205c8:	4493      	add	fp, r2
		row_count--;
 80205ca:	9802      	ldr	r0, [sp, #8]
 80205cc:	3801      	subs	r0, #1
 80205ce:	b280      	uxth	r0, r0
 80205d0:	9002      	str	r0, [sp, #8]
		*out_1++ = (q7_t) ch_1_out_1;
 80205d2:	9603      	str	r6, [sp, #12]
		*out_0++ = (q7_t) ch_1_out_0;
 80205d4:	9519      	str	r5, [sp, #100]	@ 0x64
	while (row_count) {
 80205d6:	9802      	ldr	r0, [sp, #8]
 80205d8:	b1e0      	cbz	r0, 8020614 <mat_mult_kernel_s8_s16_reordered_fpreq+0x19c>
		const q15_t *ip_b1 = ip_b0 + num_col_a;
 80205da:	9808      	ldr	r0, [sp, #32]
 80205dc:	eb00 0842 	add.w	r8, r0, r2, lsl #1
		const q7_t *ip_a1 = ip_a0 + num_col_a;
 80205e0:	eb0b 0a02 	add.w	sl, fp, r2
		const float scale_0 = scales[0];
 80205e4:	edd4 6a00 	vldr	s13, [r4]
		const float scale_1 = scales[1];
 80205e8:	ed94 7a01 	vldr	s14, [r4, #4]
		q31_t ch_0_out_0 = *bias;
 80205ec:	f8d9 5000 	ldr.w	r5, [r9]
		q31_t ch_1_out_0 = *bias;
 80205f0:	f8d9 7004 	ldr.w	r7, [r9, #4]
		q31_t ch_1_out_1 = *bias++;
 80205f4:	f109 0908 	add.w	r9, r9, #8
		uint16_t col_count = num_col_a / 4;
 80205f8:	0896      	lsrs	r6, r2, #2
		const q15_t *ip_b0 = input_b;
 80205fa:	4686      	mov	lr, r0
		q31_t ch_1_out_1 = *bias++;
 80205fc:	9701      	str	r7, [sp, #4]
		q31_t ch_0_out_1 = *bias++;
 80205fe:	4628      	mov	r0, r5
 8020600:	9404      	str	r4, [sp, #16]
 8020602:	f8cd c050 	str.w	ip, [sp, #80]	@ 0x50
 8020606:	9305      	str	r3, [sp, #20]
 8020608:	9106      	str	r1, [sp, #24]
 802060a:	9207      	str	r2, [sp, #28]
 802060c:	463a      	mov	r2, r7
 802060e:	f8cd 9060 	str.w	r9, [sp, #96]	@ 0x60
		while (col_count) {
 8020612:	e77d      	b.n	8020510 <mat_mult_kernel_s8_s16_reordered_fpreq+0x98>
	}

	if (output_ch & 1) {
 8020614:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 8020616:	4667      	mov	r7, ip
 8020618:	46a4      	mov	ip, r4
 802061a:	468a      	mov	sl, r1
 802061c:	4610      	mov	r0, r2
 802061e:	f016 0f01 	tst.w	r6, #1
 8020622:	d057      	beq.n	80206d4 <mat_mult_kernel_s8_s16_reordered_fpreq+0x25c>
		/* setup pointers for B */
		const q15_t *ip_b0 = input_b;
		const q15_t *ip_b1 = ip_b0 + num_col_a;
 8020624:	9a08      	ldr	r2, [sp, #32]
 8020626:	eb02 0540 	add.w	r5, r2, r0, lsl #1

		/* Init accumulator with bias for channel N + 1 */
		q31_t ch_0_out_0 = *bias;
 802062a:	f8d9 4000 	ldr.w	r4, [r9]
		q31_t ch_0_out_1 = ch_0_out_0;

		int32_t col_count = num_col_a / 4;
 802062e:	ea4f 0e90 	mov.w	lr, r0, lsr #2
		q31_t ch_0_out_1 = ch_0_out_0;
 8020632:	4620      	mov	r0, r4
 8020634:	9601      	str	r6, [sp, #4]
 8020636:	4616      	mov	r6, r2
 8020638:	4699      	mov	r9, r3
 802063a:	4673      	mov	r3, lr
		while (col_count) {
 802063c:	e019      	b.n	8020672 <mat_mult_kernel_s8_s16_reordered_fpreq+0x1fa>
    memcpy(&val, *in_q15, 4);
 802063e:	f8d6 8000 	ldr.w	r8, [r6]
 8020642:	f8d5 e000 	ldr.w	lr, [r5]
    memcpy(&val, *in_q7, 4);
 8020646:	f85b 2b04 	ldr.w	r2, [fp], #4
  return (op1 >> op2) | (op1 << (32U - op2));
 802064a:	ea4f 2132 	mov.w	r1, r2, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 802064e:	fa2f f181 	sxtb16	r1, r1
 8020652:	fa2f f282 	sxtb16	r2, r2
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8020656:	fb22 4808 	smlad	r8, r2, r8, r4
 802065a:	fb22 020e 	smlad	r2, r2, lr, r0
    memcpy(&val, *in_q15, 4);
 802065e:	6874      	ldr	r4, [r6, #4]
    *in_q15 += 2;
 8020660:	3608      	adds	r6, #8
    memcpy(&val, *in_q15, 4);
 8020662:	6868      	ldr	r0, [r5, #4]
    *in_q15 += 2;
 8020664:	3508      	adds	r5, #8
 8020666:	fb21 8404 	smlad	r4, r1, r4, r8
 802066a:	fb21 2100 	smlad	r1, r1, r0, r2

			b0 = arm_nn_read_q15x2_ia(&ip_b0);
			b1 = arm_nn_read_q15x2_ia(&ip_b1);

			ch_0_out_0 = __SMLAD(a02, b0, ch_0_out_0);
			ch_0_out_1 = __SMLAD(a02, b1, ch_0_out_1);
 802066e:	4608      	mov	r0, r1

			col_count--;
 8020670:	3b01      	subs	r3, #1
		while (col_count) {
 8020672:	2b00      	cmp	r3, #0
 8020674:	d1e3      	bne.n	802063e <mat_mult_kernel_s8_s16_reordered_fpreq+0x1c6>
		} /* while over col_count */

		ch_0_out_0 = (q31_t) ((float) ch_0_out_0 * *scales);
 8020676:	9e01      	ldr	r6, [sp, #4]
 8020678:	464b      	mov	r3, r9
 802067a:	ee07 4a90 	vmov	s15, r4
 802067e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8020682:	ed9c 7a00 	vldr	s14, [ip]
 8020686:	ee67 7a87 	vmul.f32	s15, s15, s14
 802068a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 802068e:	ee17 2a90 	vmov	r2, s15
		ch_0_out_0 += out_offset;
 8020692:	443a      	add	r2, r7
		ch_0_out_0 = MAX(ch_0_out_0, activation_min);
 8020694:	454a      	cmp	r2, r9
 8020696:	bfb8      	it	lt
 8020698:	464a      	movlt	r2, r9
		ch_0_out_0 = MIN(ch_0_out_0, activation_max);
 802069a:	4552      	cmp	r2, sl
 802069c:	bfa8      	it	ge
 802069e:	4652      	movge	r2, sl
		*out_0++ = (q7_t) ch_0_out_0;
 80206a0:	9919      	ldr	r1, [sp, #100]	@ 0x64
 80206a2:	f801 2b01 	strb.w	r2, [r1], #1

		ch_0_out_1 = (q31_t) ((float) ch_0_out_1 * *scales);
 80206a6:	ee07 0a90 	vmov	s15, r0
 80206aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80206ae:	ed9c 7a00 	vldr	s14, [ip]
 80206b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80206b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
		ch_0_out_1 += out_offset;
 80206ba:	ee17 2a90 	vmov	r2, s15
 80206be:	4417      	add	r7, r2
		ch_0_out_1 = MAX(ch_0_out_1, activation_min);
 80206c0:	45b9      	cmp	r9, r7
 80206c2:	bfb8      	it	lt
 80206c4:	463b      	movlt	r3, r7
		ch_0_out_1 = MIN(ch_0_out_1, activation_max);
 80206c6:	459a      	cmp	sl, r3
 80206c8:	bfa8      	it	ge
 80206ca:	469a      	movge	sl, r3
		*out_1++ = (q7_t) ch_0_out_1;
 80206cc:	9b03      	ldr	r3, [sp, #12]
 80206ce:	f883 a000 	strb.w	sl, [r3]
		*out_0++ = (q7_t) ch_0_out_0;
 80206d2:	9119      	str	r1, [sp, #100]	@ 0x64

	out_0 += output_ch;

	/* return the new output pointer with offset */
	return out_0;
}
 80206d4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80206d6:	1998      	adds	r0, r3, r6
 80206d8:	b00b      	add	sp, #44	@ 0x2c
 80206da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080206de <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask>:

q7_t* mat_mult_kernel_s8_s16_reordered_fpreq_bitmask(const q7_t *input_a,
		const q15_t *input_b, const uint16_t output_ch, const float *scales,
		const int32_t out_offset, const int16_t activation_min,
		const int16_t activation_max, const uint16_t num_col_a,
		const int32_t *const output_bias, q7_t *out_0, q7_t *mask) {
 80206de:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80206e2:	b08d      	sub	sp, #52	@ 0x34
 80206e4:	4607      	mov	r7, r0
 80206e6:	9105      	str	r1, [sp, #20]
 80206e8:	4611      	mov	r1, r2
 80206ea:	9304      	str	r3, [sp, #16]
 80206ec:	f9bd a05c 	ldrsh.w	sl, [sp, #92]	@ 0x5c
 80206f0:	f9bd c060 	ldrsh.w	ip, [sp, #96]	@ 0x60
 80206f4:	f8bd 3064 	ldrh.w	r3, [sp, #100]	@ 0x64
 80206f8:	9306      	str	r3, [sp, #24]
 80206fa:	f8dd b06c 	ldr.w	fp, [sp, #108]	@ 0x6c
 80206fe:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
	/* set up the second output pointers */
	q7_t *out_1 = out_0 + output_ch;
 8020700:	445a      	add	r2, fp
 8020702:	9203      	str	r2, [sp, #12]
	q7_t *mask1 = mask + output_ch / 8;
 8020704:	eb03 09d1 	add.w	r9, r3, r1, lsr #3
	const int32_t *bias = output_bias;

	uint16_t row_count = output_ch / 2;
 8020708:	084a      	lsrs	r2, r1, #1
 802070a:	9202      	str	r2, [sp, #8]
	const q7_t *ip_a0 = input_a;
	int bit_starting_idx = 0;
 802070c:	2000      	movs	r0, #0
 802070e:	4602      	mov	r2, r0
 8020710:	910b      	str	r1, [sp, #44]	@ 0x2c
 8020712:	46d0      	mov	r8, sl
 8020714:	4665      	mov	r5, ip
 8020716:	46da      	mov	sl, fp
 8020718:	46bb      	mov	fp, r7
 802071a:	4619      	mov	r1, r3
 802071c:	464b      	mov	r3, r9
	/* this loop over rows in A */
	while (row_count) {
 802071e:	e0eb      	b.n	80208f8 <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask+0x21a>
    memcpy(&val, *in_q15, 4);
 8020720:	f8dc 5000 	ldr.w	r5, [ip]
 8020724:	f8de 8000 	ldr.w	r8, [lr]
    memcpy(&val, *in_q7, 4);
 8020728:	f85b 9b04 	ldr.w	r9, [fp], #4
  return (op1 >> op2) | (op1 << (32U - op2));
 802072c:	ea4f 2039 	mov.w	r0, r9, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8020730:	fa2f f080 	sxtb16	r0, r0
 8020734:	fa2f f989 	sxtb16	r9, r9
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8020738:	fb29 6605 	smlad	r6, r9, r5, r6
 802073c:	f85a 3b04 	ldr.w	r3, [sl], #4
  return (op1 >> op2) | (op1 << (32U - op2));
 8020740:	ea4f 2133 	mov.w	r1, r3, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8020744:	fa2f f181 	sxtb16	r1, r1
 8020748:	fa2f f383 	sxtb16	r3, r3
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 802074c:	fb29 4908 	smlad	r9, r9, r8, r4
 8020750:	fb23 2505 	smlad	r5, r3, r5, r2
    memcpy(&val, *in_q15, 4);
 8020754:	f8dc 2004 	ldr.w	r2, [ip, #4]
    *in_q15 += 2;
 8020758:	f10c 0c08 	add.w	ip, ip, #8
 802075c:	9c01      	ldr	r4, [sp, #4]
 802075e:	fb23 4308 	smlad	r3, r3, r8, r4
    memcpy(&val, *in_q15, 4);
 8020762:	f8de 8004 	ldr.w	r8, [lr, #4]
    *in_q15 += 2;
 8020766:	f10e 0e08 	add.w	lr, lr, #8
 802076a:	fb20 6602 	smlad	r6, r0, r2, r6
 802076e:	fb20 9008 	smlad	r0, r0, r8, r9
			ch_1_out_1 = __SMLAD(a11, b1, ch_1_out_1);

			b1 = arm_nn_read_q15x2_ia(&ip_b1);

			ch_0_out_0 = __SMLAD(a02, b0, ch_0_out_0);
			ch_0_out_1 = __SMLAD(a02, b1, ch_0_out_1);
 8020772:	4604      	mov	r4, r0
 8020774:	fb21 5202 	smlad	r2, r1, r2, r5
 8020778:	fb21 3108 	smlad	r1, r1, r8, r3
			ch_1_out_0 = __SMLAD(a12, b0, ch_1_out_0);
			ch_1_out_1 = __SMLAD(a12, b1, ch_1_out_1);
 802077c:	9101      	str	r1, [sp, #4]

			col_count--;
 802077e:	3f01      	subs	r7, #1
 8020780:	b2bf      	uxth	r7, r7
		while (col_count) {
 8020782:	2f00      	cmp	r7, #0
 8020784:	d1cc      	bne.n	8020720 <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask+0x42>
		} /* while over col_count */

		ch_0_out_0 = (q31_t) ((float) ch_0_out_0 * scale_0);
 8020786:	9b07      	ldr	r3, [sp, #28]
 8020788:	4610      	mov	r0, r2
 802078a:	9a08      	ldr	r2, [sp, #32]
 802078c:	f8dd 8024 	ldr.w	r8, [sp, #36]	@ 0x24
 8020790:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8020792:	f8dd a06c 	ldr.w	sl, [sp, #108]	@ 0x6c
 8020796:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8020798:	ee07 6a90 	vmov	s15, r6
 802079c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80207a0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80207a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80207a8:	ee17 6a90 	vmov	r6, s15
		ch_0_out_0 += out_offset;
 80207ac:	9f16      	ldr	r7, [sp, #88]	@ 0x58
 80207ae:	443e      	add	r6, r7
		q7_t mask_value = 1;
		if (ch_0_out_0 < activation_min){
 80207b0:	46c6      	mov	lr, r8
 80207b2:	45b0      	cmp	r8, r6
 80207b4:	dc0e      	bgt.n	80207d4 <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask+0xf6>
		q7_t mask_value = 1;
 80207b6:	2701      	movs	r7, #1
			ch_0_out_0 = activation_min;
			mask_value = 0;
		}
		if (ch_0_out_0 > activation_max){
 80207b8:	46a9      	mov	r9, r5
 80207ba:	42b5      	cmp	r5, r6
 80207bc:	db0d      	blt.n	80207da <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask+0xfc>
			ch_0_out_0 = activation_max;
			mask_value = 0;
		}
		if (mask_value == 1)
 80207be:	b16f      	cbz	r7, 80207dc <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask+0xfe>
			BIT_SET(*mask, bit_starting_idx);
 80207c0:	f991 7000 	ldrsb.w	r7, [r1]
 80207c4:	f04f 0c01 	mov.w	ip, #1
 80207c8:	fa0c fc02 	lsl.w	ip, ip, r2
 80207cc:	ea47 070c 	orr.w	r7, r7, ip
 80207d0:	700f      	strb	r7, [r1, #0]
 80207d2:	e00d      	b.n	80207f0 <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask+0x112>
			ch_0_out_0 = activation_min;
 80207d4:	4646      	mov	r6, r8
			mask_value = 0;
 80207d6:	2700      	movs	r7, #0
 80207d8:	e7ee      	b.n	80207b8 <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask+0xda>
			ch_0_out_0 = activation_max;
 80207da:	462e      	mov	r6, r5
		else
			BIT_CLEAR(*mask, bit_starting_idx);
 80207dc:	f991 c000 	ldrsb.w	ip, [r1]
 80207e0:	2701      	movs	r7, #1
 80207e2:	4097      	lsls	r7, r2
 80207e4:	43ff      	mvns	r7, r7
 80207e6:	b2ff      	uxtb	r7, r7
 80207e8:	ea0c 0c07 	and.w	ip, ip, r7
 80207ec:	f881 c000 	strb.w	ip, [r1]
		*out_0++ = (q7_t) ch_0_out_0;
 80207f0:	f88a 6000 	strb.w	r6, [sl]


		ch_0_out_1 = (q31_t) ((float) ch_0_out_1 * scale_0);
 80207f4:	ee07 4a90 	vmov	s15, r4
 80207f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80207fc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8020800:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8020804:	ee17 4a90 	vmov	r4, s15
		ch_0_out_1 += out_offset;
 8020808:	9e16      	ldr	r6, [sp, #88]	@ 0x58
 802080a:	4434      	add	r4, r6
		mask_value = 1;
		if (ch_0_out_1 < activation_min){
 802080c:	45a0      	cmp	r8, r4
 802080e:	dc0a      	bgt.n	8020826 <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask+0x148>
		mask_value = 1;
 8020810:	2601      	movs	r6, #1
			ch_0_out_1 = activation_min;
			mask_value = 0;
		}
		if (ch_0_out_1 > activation_max){
 8020812:	42a5      	cmp	r5, r4
 8020814:	db0a      	blt.n	802082c <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask+0x14e>
			ch_0_out_1 = activation_max;
			mask_value = 0;
		}
		if (mask_value == 1)
 8020816:	b156      	cbz	r6, 802082e <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask+0x150>
			BIT_SET(*mask1, bit_starting_idx);
 8020818:	f993 6000 	ldrsb.w	r6, [r3]
 802081c:	2701      	movs	r7, #1
 802081e:	4097      	lsls	r7, r2
 8020820:	433e      	orrs	r6, r7
 8020822:	701e      	strb	r6, [r3, #0]
 8020824:	e00b      	b.n	802083e <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask+0x160>
			ch_0_out_1 = activation_min;
 8020826:	4644      	mov	r4, r8
			mask_value = 0;
 8020828:	2600      	movs	r6, #0
 802082a:	e7f2      	b.n	8020812 <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask+0x134>
			ch_0_out_1 = activation_max;
 802082c:	462c      	mov	r4, r5
		else
			BIT_CLEAR(*mask1, bit_starting_idx);
 802082e:	f993 7000 	ldrsb.w	r7, [r3]
 8020832:	2601      	movs	r6, #1
 8020834:	4096      	lsls	r6, r2
 8020836:	43f6      	mvns	r6, r6
 8020838:	b2f6      	uxtb	r6, r6
 802083a:	4037      	ands	r7, r6
 802083c:	701f      	strb	r7, [r3, #0]
		*out_1++ = (q7_t) ch_0_out_1;
 802083e:	9e03      	ldr	r6, [sp, #12]
 8020840:	7034      	strb	r4, [r6, #0]

		ch_1_out_0 = (q31_t) ((float) ch_1_out_0 * scale_1);
 8020842:	ee07 0a90 	vmov	s15, r0
 8020846:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802084a:	ee67 7a87 	vmul.f32	s15, s15, s14
 802084e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8020852:	ee17 0a90 	vmov	r0, s15
		ch_1_out_0 += out_offset;
 8020856:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 8020858:	4420      	add	r0, r4
		mask_value = 1;
		if (ch_1_out_0 < activation_min){
 802085a:	4580      	cmp	r8, r0
 802085c:	dc0b      	bgt.n	8020876 <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask+0x198>
		mask_value = 1;
 802085e:	2401      	movs	r4, #1
			ch_1_out_0 = activation_min;
			mask_value = 0;
		}
		if (ch_1_out_0 > activation_max){
 8020860:	4285      	cmp	r5, r0
 8020862:	db0b      	blt.n	802087c <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask+0x19e>
			ch_1_out_0 = activation_max;
			mask_value = 0;
		}
		if (mask_value == 1)
 8020864:	b15c      	cbz	r4, 802087e <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask+0x1a0>
			BIT_SET(*mask, bit_starting_idx+1);
 8020866:	f991 4000 	ldrsb.w	r4, [r1]
 802086a:	1c57      	adds	r7, r2, #1
 802086c:	2601      	movs	r6, #1
 802086e:	40be      	lsls	r6, r7
 8020870:	4334      	orrs	r4, r6
 8020872:	700c      	strb	r4, [r1, #0]
 8020874:	e00c      	b.n	8020890 <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask+0x1b2>
			ch_1_out_0 = activation_min;
 8020876:	4640      	mov	r0, r8
			mask_value = 0;
 8020878:	2400      	movs	r4, #0
 802087a:	e7f1      	b.n	8020860 <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask+0x182>
			ch_1_out_0 = activation_max;
 802087c:	4628      	mov	r0, r5
		else
			BIT_CLEAR(*mask, bit_starting_idx+1);
 802087e:	f991 6000 	ldrsb.w	r6, [r1]
 8020882:	1c57      	adds	r7, r2, #1
 8020884:	2401      	movs	r4, #1
 8020886:	40bc      	lsls	r4, r7
 8020888:	43e4      	mvns	r4, r4
 802088a:	b2e4      	uxtb	r4, r4
 802088c:	4026      	ands	r6, r4
 802088e:	700e      	strb	r6, [r1, #0]
		*out_0++ = (q7_t) ch_1_out_0;
 8020890:	f10a 0402 	add.w	r4, sl, #2
 8020894:	f88a 0001 	strb.w	r0, [sl, #1]

		ch_1_out_1 = (q31_t) ((float) ch_1_out_1 * scale_1);
 8020898:	eddd 7a01 	vldr	s15, [sp, #4]
 802089c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80208a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80208a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80208a8:	ee17 0a90 	vmov	r0, s15
		ch_1_out_1 += out_offset;
 80208ac:	9e16      	ldr	r6, [sp, #88]	@ 0x58
 80208ae:	4430      	add	r0, r6
		mask_value = 1;
		if (ch_1_out_1 < activation_min){
 80208b0:	4580      	cmp	r8, r0
 80208b2:	dc44      	bgt.n	802093e <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask+0x260>
		ch_1_out_1 += out_offset;
 80208b4:	4686      	mov	lr, r0
		mask_value = 1;
 80208b6:	2001      	movs	r0, #1
			ch_1_out_1 = activation_min;
			mask_value = 0;
		}
		if (ch_1_out_1 > activation_max){
 80208b8:	4575      	cmp	r5, lr
 80208ba:	db02      	blt.n	80208c2 <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask+0x1e4>
			ch_1_out_1 = activation_max;
			mask_value = 0;
		}
		if (mask_value == 1)
 80208bc:	2800      	cmp	r0, #0
 80208be:	d140      	bne.n	8020942 <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask+0x264>
 80208c0:	46f1      	mov	r9, lr
			BIT_SET(*mask1, bit_starting_idx+1);
		else
			BIT_CLEAR(*mask1, bit_starting_idx+1);
 80208c2:	f993 6000 	ldrsb.w	r6, [r3]
 80208c6:	1c57      	adds	r7, r2, #1
 80208c8:	2001      	movs	r0, #1
 80208ca:	40b8      	lsls	r0, r7
 80208cc:	43c0      	mvns	r0, r0
 80208ce:	b2c0      	uxtb	r0, r0
 80208d0:	4006      	ands	r6, r0
 80208d2:	701e      	strb	r6, [r3, #0]
		*out_1++ = (q7_t) ch_1_out_1;
 80208d4:	9e03      	ldr	r6, [sp, #12]
 80208d6:	1cb0      	adds	r0, r6, #2
 80208d8:	f886 9001 	strb.w	r9, [r6, #1]
		scales += 2;
 80208dc:	9e04      	ldr	r6, [sp, #16]
 80208de:	3608      	adds	r6, #8
 80208e0:	9604      	str	r6, [sp, #16]

		bit_starting_idx += 2;
 80208e2:	3202      	adds	r2, #2
		if(bit_starting_idx == 8){
 80208e4:	2a08      	cmp	r2, #8
 80208e6:	d035      	beq.n	8020954 <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask+0x276>
			mask++;
			mask1++;
		}

		/* skip row */
		ip_a0 += num_col_a;
 80208e8:	9e06      	ldr	r6, [sp, #24]
 80208ea:	44b3      	add	fp, r6
		row_count--;
 80208ec:	9e02      	ldr	r6, [sp, #8]
 80208ee:	3e01      	subs	r6, #1
 80208f0:	b2b6      	uxth	r6, r6
 80208f2:	9602      	str	r6, [sp, #8]
		*out_1++ = (q7_t) ch_1_out_1;
 80208f4:	9003      	str	r0, [sp, #12]
		*out_0++ = (q7_t) ch_1_out_0;
 80208f6:	46a2      	mov	sl, r4
	while (row_count) {
 80208f8:	9802      	ldr	r0, [sp, #8]
 80208fa:	b378      	cbz	r0, 802095c <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask+0x27e>
		const q15_t *ip_b1 = ip_b0 + num_col_a;
 80208fc:	9805      	ldr	r0, [sp, #20]
 80208fe:	9c06      	ldr	r4, [sp, #24]
 8020900:	eb00 0e44 	add.w	lr, r0, r4, lsl #1
		const q7_t *ip_a1 = ip_a0 + num_col_a;
 8020904:	eb0b 0904 	add.w	r9, fp, r4
		const float scale_0 = scales[0];
 8020908:	9e04      	ldr	r6, [sp, #16]
 802090a:	edd6 6a00 	vldr	s13, [r6]
		const float scale_1 = scales[1];
 802090e:	ed96 7a01 	vldr	s14, [r6, #4]
		q31_t ch_0_out_0 = *bias;
 8020912:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 8020914:	6836      	ldr	r6, [r6, #0]
		q31_t ch_1_out_0 = *bias;
 8020916:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8020918:	6878      	ldr	r0, [r7, #4]
		q31_t ch_1_out_1 = *bias++;
 802091a:	3708      	adds	r7, #8
 802091c:	971a      	str	r7, [sp, #104]	@ 0x68
		uint16_t col_count = num_col_a / 4;
 802091e:	08a7      	lsrs	r7, r4, #2
		const q15_t *ip_b0 = input_b;
 8020920:	f8dd c014 	ldr.w	ip, [sp, #20]
		q31_t ch_1_out_1 = *bias++;
 8020924:	9001      	str	r0, [sp, #4]
		q31_t ch_0_out_1 = *bias++;
 8020926:	4634      	mov	r4, r6
 8020928:	9307      	str	r3, [sp, #28]
 802092a:	9208      	str	r2, [sp, #32]
 802092c:	4602      	mov	r2, r0
 802092e:	f8cd 8024 	str.w	r8, [sp, #36]	@ 0x24
 8020932:	950a      	str	r5, [sp, #40]	@ 0x28
 8020934:	f8cd a06c 	str.w	sl, [sp, #108]	@ 0x6c
 8020938:	46ca      	mov	sl, r9
 802093a:	911c      	str	r1, [sp, #112]	@ 0x70
		while (col_count) {
 802093c:	e721      	b.n	8020782 <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask+0xa4>
			mask_value = 0;
 802093e:	2000      	movs	r0, #0
 8020940:	e7ba      	b.n	80208b8 <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask+0x1da>
			BIT_SET(*mask1, bit_starting_idx+1);
 8020942:	f993 0000 	ldrsb.w	r0, [r3]
 8020946:	1c57      	adds	r7, r2, #1
 8020948:	2601      	movs	r6, #1
 802094a:	40be      	lsls	r6, r7
 802094c:	4330      	orrs	r0, r6
 802094e:	7018      	strb	r0, [r3, #0]
 8020950:	46f1      	mov	r9, lr
 8020952:	e7bf      	b.n	80208d4 <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask+0x1f6>
			mask++;
 8020954:	3101      	adds	r1, #1
			mask1++;
 8020956:	3301      	adds	r3, #1
			bit_starting_idx = 0;
 8020958:	2200      	movs	r2, #0
 802095a:	e7c5      	b.n	80208e8 <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask+0x20a>

	out_0 += output_ch;

	/* return the new output pointer with offset */
	return out_0;
}
 802095c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 802095e:	eb0a 0001 	add.w	r0, sl, r1
 8020962:	b00d      	add	sp, #52	@ 0x34
 8020964:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08020968 <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask_partialCH>:
q7_t* mat_mult_kernel_s8_s16_reordered_fpreq_bitmask_partialCH(const q7_t *kernel_sram,
		const q7_t *kernel_flash, const uint16_t first_k_channel,
		const q15_t *input_b, const uint16_t output_ch, const float *scales,
		const int32_t out_offset, const int16_t activation_min,
		const int16_t activation_max, const uint16_t num_col_a,
		const int32_t *const output_bias, q7_t *out_0, q7_t *mask) {
 8020968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802096c:	b091      	sub	sp, #68	@ 0x44
 802096e:	9003      	str	r0, [sp, #12]
 8020970:	4608      	mov	r0, r1
 8020972:	9207      	str	r2, [sp, #28]
 8020974:	930d      	str	r3, [sp, #52]	@ 0x34
 8020976:	f8bd 1068 	ldrh.w	r1, [sp, #104]	@ 0x68
 802097a:	f9bd 9074 	ldrsh.w	r9, [sp, #116]	@ 0x74
 802097e:	f9bd 3078 	ldrsh.w	r3, [sp, #120]	@ 0x78
 8020982:	9302      	str	r3, [sp, #8]
 8020984:	f8bd 307c 	ldrh.w	r3, [sp, #124]	@ 0x7c
 8020988:	930e      	str	r3, [sp, #56]	@ 0x38
 802098a:	f8dd a084 	ldr.w	sl, [sp, #132]	@ 0x84
 802098e:	9e22      	ldr	r6, [sp, #136]	@ 0x88
	/* set up the second output pointers */
	q7_t *out_1 = out_0 + output_ch;
 8020990:	eb0a 0401 	add.w	r4, sl, r1
 8020994:	9405      	str	r4, [sp, #20]
	q7_t *mask1 = mask + output_ch / 8;
 8020996:	eb06 05d1 	add.w	r5, r6, r1, lsr #3
	const int32_t *bias = output_bias;

	uint16_t row_count = output_ch / 2;
 802099a:	084c      	lsrs	r4, r1, #1
 802099c:	9404      	str	r4, [sp, #16]
	const q7_t *ip_a0_sram = kernel_sram;
	const uint16_t num_col_sram = first_k_channel;
	const q7_t *ip_a0_flash = kernel_flash;
	const uint16_t num_col_flash = num_col_a - first_k_channel;
 802099e:	1a9b      	subs	r3, r3, r2
 80209a0:	b29b      	uxth	r3, r3
 80209a2:	9306      	str	r3, [sp, #24]
	int bit_starting_idx = 0;
 80209a4:	2200      	movs	r2, #0
 80209a6:	46ae      	mov	lr, r5
 80209a8:	4683      	mov	fp, r0
 80209aa:	910f      	str	r1, [sp, #60]	@ 0x3c
 80209ac:	46c8      	mov	r8, r9
 80209ae:	4635      	mov	r5, r6
	/* this loop over rows in A */
	while (row_count) {
 80209b0:	e12d      	b.n	8020c0e <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask_partialCH+0x2a6>
    memcpy(&val, *in_q15, 4);
 80209b2:	f8d4 e000 	ldr.w	lr, [r4]
 80209b6:	f8d0 8000 	ldr.w	r8, [r0]
    memcpy(&val, *in_q7, 4);
 80209ba:	f85b 9b04 	ldr.w	r9, [fp], #4
  return (op1 >> op2) | (op1 << (32U - op2));
 80209be:	ea4f 2c39 	mov.w	ip, r9, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80209c2:	fa2f fc8c 	sxtb16	ip, ip
 80209c6:	fa2f f989 	sxtb16	r9, r9
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80209ca:	fb29 110e 	smlad	r1, r9, lr, r1
 80209ce:	f85a 2b04 	ldr.w	r2, [sl], #4
  return (op1 >> op2) | (op1 << (32U - op2));
 80209d2:	ea4f 2632 	mov.w	r6, r2, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80209d6:	fa2f f686 	sxtb16	r6, r6
 80209da:	fa2f f282 	sxtb16	r2, r2
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80209de:	fb29 3908 	smlad	r9, r9, r8, r3
 80209e2:	fb22 5e0e 	smlad	lr, r2, lr, r5
    memcpy(&val, *in_q15, 4);
 80209e6:	6865      	ldr	r5, [r4, #4]
    *in_q15 += 2;
 80209e8:	3408      	adds	r4, #8
 80209ea:	9b01      	ldr	r3, [sp, #4]
 80209ec:	fb22 3208 	smlad	r2, r2, r8, r3
    memcpy(&val, *in_q15, 4);
 80209f0:	f8d0 8004 	ldr.w	r8, [r0, #4]
    *in_q15 += 2;
 80209f4:	3008      	adds	r0, #8
 80209f6:	fb2c 1105 	smlad	r1, ip, r5, r1
 80209fa:	fb2c 9c08 	smlad	ip, ip, r8, r9
			ch_1_out_1 = __SMLAD(a11, b1, ch_1_out_1);

			b1 = arm_nn_read_q15x2_ia(&ip_b1);

			ch_0_out_0 = __SMLAD(a02, b0, ch_0_out_0);
			ch_0_out_1 = __SMLAD(a02, b1, ch_0_out_1);
 80209fe:	4663      	mov	r3, ip
 8020a00:	fb26 e505 	smlad	r5, r6, r5, lr
 8020a04:	fb26 2608 	smlad	r6, r6, r8, r2
			ch_1_out_0 = __SMLAD(a12, b0, ch_1_out_0);
			ch_1_out_1 = __SMLAD(a12, b1, ch_1_out_1);
 8020a08:	9601      	str	r6, [sp, #4]

			col_count--;
 8020a0a:	3f01      	subs	r7, #1
 8020a0c:	b2bf      	uxth	r7, r7
		while (col_count) {
 8020a0e:	2f00      	cmp	r7, #0
 8020a10:	d1cf      	bne.n	80209b2 <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask_partialCH+0x4a>
		} /* while over col_count */

		// kernels in Flash
		col_count = num_col_flash / 4;
 8020a12:	f8cd b00c 	str.w	fp, [sp, #12]
 8020a16:	f8dd b02c 	ldr.w	fp, [sp, #44]	@ 0x2c
 8020a1a:	f8dd 8030 	ldr.w	r8, [sp, #48]	@ 0x30
 8020a1e:	9f06      	ldr	r7, [sp, #24]
 8020a20:	ea4f 0c97 	mov.w	ip, r7, lsr #2
		/* accumulate over the vector */
		while (col_count) {
 8020a24:	f8dd a020 	ldr.w	sl, [sp, #32]
 8020a28:	4686      	mov	lr, r0
 8020a2a:	4660      	mov	r0, ip
 8020a2c:	f8cd 8020 	str.w	r8, [sp, #32]
 8020a30:	e02e      	b.n	8020a90 <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask_partialCH+0x128>
    memcpy(&val, *in_q15, 4);
 8020a32:	f8d4 c000 	ldr.w	ip, [r4]
 8020a36:	f8de 8000 	ldr.w	r8, [lr]
    memcpy(&val, *in_q7, 4);
 8020a3a:	f85b 9b04 	ldr.w	r9, [fp], #4
  return (op1 >> op2) | (op1 << (32U - op2));
 8020a3e:	ea4f 2739 	mov.w	r7, r9, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8020a42:	fa2f f787 	sxtb16	r7, r7
 8020a46:	fa2f f989 	sxtb16	r9, r9
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8020a4a:	fb29 110c 	smlad	r1, r9, ip, r1
 8020a4e:	f85a 2b04 	ldr.w	r2, [sl], #4
  return (op1 >> op2) | (op1 << (32U - op2));
 8020a52:	ea4f 2632 	mov.w	r6, r2, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8020a56:	fa2f f686 	sxtb16	r6, r6
 8020a5a:	fa2f f282 	sxtb16	r2, r2
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8020a5e:	fb29 3908 	smlad	r9, r9, r8, r3
 8020a62:	fb22 5c0c 	smlad	ip, r2, ip, r5
    memcpy(&val, *in_q15, 4);
 8020a66:	6865      	ldr	r5, [r4, #4]
    *in_q15 += 2;
 8020a68:	3408      	adds	r4, #8
 8020a6a:	9b01      	ldr	r3, [sp, #4]
 8020a6c:	fb22 3208 	smlad	r2, r2, r8, r3
    memcpy(&val, *in_q15, 4);
 8020a70:	f8de 8004 	ldr.w	r8, [lr, #4]
    *in_q15 += 2;
 8020a74:	f10e 0e08 	add.w	lr, lr, #8
 8020a78:	fb27 1105 	smlad	r1, r7, r5, r1
 8020a7c:	fb27 9708 	smlad	r7, r7, r8, r9
			ch_1_out_1 = __SMLAD(a11, b1, ch_1_out_1);

			b1 = arm_nn_read_q15x2_ia(&ip_b1);

			ch_0_out_0 = __SMLAD(a02, b0, ch_0_out_0);
			ch_0_out_1 = __SMLAD(a02, b1, ch_0_out_1);
 8020a80:	463b      	mov	r3, r7
 8020a82:	fb26 c505 	smlad	r5, r6, r5, ip
 8020a86:	fb26 2608 	smlad	r6, r6, r8, r2
			ch_1_out_0 = __SMLAD(a12, b0, ch_1_out_0);
			ch_1_out_1 = __SMLAD(a12, b1, ch_1_out_1);
 8020a8a:	9601      	str	r6, [sp, #4]

			col_count--;
 8020a8c:	3801      	subs	r0, #1
 8020a8e:	b280      	uxth	r0, r0
		while (col_count) {
 8020a90:	2800      	cmp	r0, #0
 8020a92:	d1ce      	bne.n	8020a32 <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask_partialCH+0xca>
		} /* while over col_count */

		ch_0_out_0 = (q31_t) ((float) ch_0_out_0 * scale_0);
 8020a94:	f8dd e024 	ldr.w	lr, [sp, #36]	@ 0x24
 8020a98:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8020a9a:	462e      	mov	r6, r5
 8020a9c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8020aa0:	9d22      	ldr	r5, [sp, #136]	@ 0x88
 8020aa2:	ee07 1a90 	vmov	s15, r1
 8020aa6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8020aaa:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8020aae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8020ab2:	ee17 1a90 	vmov	r1, s15
		ch_0_out_0 += out_offset;
 8020ab6:	981c      	ldr	r0, [sp, #112]	@ 0x70
 8020ab8:	4401      	add	r1, r0
		q7_t mask_value = 1;
		if (ch_0_out_0 < activation_min){
 8020aba:	4647      	mov	r7, r8
 8020abc:	4588      	cmp	r8, r1
 8020abe:	dc0c      	bgt.n	8020ada <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask_partialCH+0x172>
		q7_t mask_value = 1;
 8020ac0:	2001      	movs	r0, #1
			ch_0_out_0 = activation_min;
			mask_value = 0;
		}
		if (ch_0_out_0 > activation_max){
 8020ac2:	9c02      	ldr	r4, [sp, #8]
 8020ac4:	46a4      	mov	ip, r4
 8020ac6:	428c      	cmp	r4, r1
 8020ac8:	db0a      	blt.n	8020ae0 <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask_partialCH+0x178>
			ch_0_out_0 = activation_max;
			mask_value = 0;
		}
		if (mask_value == 1)
 8020aca:	b150      	cbz	r0, 8020ae2 <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask_partialCH+0x17a>
			BIT_SET(*mask, bit_starting_idx);
 8020acc:	f995 0000 	ldrsb.w	r0, [r5]
 8020ad0:	2401      	movs	r4, #1
 8020ad2:	4094      	lsls	r4, r2
 8020ad4:	4320      	orrs	r0, r4
 8020ad6:	7028      	strb	r0, [r5, #0]
 8020ad8:	e00b      	b.n	8020af2 <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask_partialCH+0x18a>
			ch_0_out_0 = activation_min;
 8020ada:	4641      	mov	r1, r8
			mask_value = 0;
 8020adc:	2000      	movs	r0, #0
 8020ade:	e7f0      	b.n	8020ac2 <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask_partialCH+0x15a>
			ch_0_out_0 = activation_max;
 8020ae0:	9902      	ldr	r1, [sp, #8]
		else
			BIT_CLEAR(*mask, bit_starting_idx);
 8020ae2:	f995 4000 	ldrsb.w	r4, [r5]
 8020ae6:	2001      	movs	r0, #1
 8020ae8:	4090      	lsls	r0, r2
 8020aea:	43c0      	mvns	r0, r0
 8020aec:	b2c0      	uxtb	r0, r0
 8020aee:	4004      	ands	r4, r0
 8020af0:	702c      	strb	r4, [r5, #0]
		*out_0++ = (q7_t) ch_0_out_0;
 8020af2:	9821      	ldr	r0, [sp, #132]	@ 0x84
 8020af4:	7001      	strb	r1, [r0, #0]


		ch_0_out_1 = (q31_t) ((float) ch_0_out_1 * scale_0);
 8020af6:	ee07 3a90 	vmov	s15, r3
 8020afa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8020afe:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8020b02:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8020b06:	ee17 3a90 	vmov	r3, s15
		ch_0_out_1 += out_offset;
 8020b0a:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8020b0c:	440b      	add	r3, r1
		mask_value = 1;
		if (ch_0_out_1 < activation_min){
 8020b0e:	4598      	cmp	r8, r3
 8020b10:	dc0c      	bgt.n	8020b2c <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask_partialCH+0x1c4>
		mask_value = 1;
 8020b12:	2101      	movs	r1, #1
			ch_0_out_1 = activation_min;
			mask_value = 0;
		}
		if (ch_0_out_1 > activation_max){
 8020b14:	9802      	ldr	r0, [sp, #8]
 8020b16:	4298      	cmp	r0, r3
 8020b18:	db0b      	blt.n	8020b32 <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask_partialCH+0x1ca>
			ch_0_out_1 = activation_max;
			mask_value = 0;
		}
		if (mask_value == 1)
 8020b1a:	b159      	cbz	r1, 8020b34 <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask_partialCH+0x1cc>
			BIT_SET(*mask1, bit_starting_idx);
 8020b1c:	f99e 1000 	ldrsb.w	r1, [lr]
 8020b20:	2001      	movs	r0, #1
 8020b22:	4090      	lsls	r0, r2
 8020b24:	4301      	orrs	r1, r0
 8020b26:	f88e 1000 	strb.w	r1, [lr]
 8020b2a:	e00c      	b.n	8020b46 <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask_partialCH+0x1de>
			ch_0_out_1 = activation_min;
 8020b2c:	4643      	mov	r3, r8
			mask_value = 0;
 8020b2e:	2100      	movs	r1, #0
 8020b30:	e7f0      	b.n	8020b14 <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask_partialCH+0x1ac>
			ch_0_out_1 = activation_max;
 8020b32:	9b02      	ldr	r3, [sp, #8]
		else
			BIT_CLEAR(*mask1, bit_starting_idx);
 8020b34:	f99e 0000 	ldrsb.w	r0, [lr]
 8020b38:	2101      	movs	r1, #1
 8020b3a:	4091      	lsls	r1, r2
 8020b3c:	43c9      	mvns	r1, r1
 8020b3e:	b2c9      	uxtb	r1, r1
 8020b40:	4008      	ands	r0, r1
 8020b42:	f88e 0000 	strb.w	r0, [lr]
		*out_1++ = (q7_t) ch_0_out_1;
 8020b46:	9905      	ldr	r1, [sp, #20]
 8020b48:	700b      	strb	r3, [r1, #0]


		ch_1_out_0 = (q31_t) ((float) ch_1_out_0 * scale_1);
 8020b4a:	ee07 6a90 	vmov	s15, r6
 8020b4e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8020b52:	ee67 7a87 	vmul.f32	s15, s15, s14
 8020b56:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8020b5a:	ee17 3a90 	vmov	r3, s15
		ch_1_out_0 += out_offset;
 8020b5e:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8020b60:	440b      	add	r3, r1
		mask_value = 1;
		if (ch_1_out_0 < activation_min){
 8020b62:	4598      	cmp	r8, r3
 8020b64:	dc0c      	bgt.n	8020b80 <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask_partialCH+0x218>
		mask_value = 1;
 8020b66:	2101      	movs	r1, #1
			ch_1_out_0 = activation_min;
			mask_value = 0;
		}
		if (ch_1_out_0 > activation_max){
 8020b68:	9802      	ldr	r0, [sp, #8]
 8020b6a:	4298      	cmp	r0, r3
 8020b6c:	db0b      	blt.n	8020b86 <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask_partialCH+0x21e>
			ch_1_out_0 = activation_max;
			mask_value = 0;
		}
		if (mask_value == 1)
 8020b6e:	b159      	cbz	r1, 8020b88 <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask_partialCH+0x220>
			BIT_SET(*mask, bit_starting_idx+1);
 8020b70:	f995 1000 	ldrsb.w	r1, [r5]
 8020b74:	1c54      	adds	r4, r2, #1
 8020b76:	2001      	movs	r0, #1
 8020b78:	40a0      	lsls	r0, r4
 8020b7a:	4301      	orrs	r1, r0
 8020b7c:	7029      	strb	r1, [r5, #0]
 8020b7e:	e00c      	b.n	8020b9a <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask_partialCH+0x232>
			ch_1_out_0 = activation_min;
 8020b80:	4643      	mov	r3, r8
			mask_value = 0;
 8020b82:	2100      	movs	r1, #0
 8020b84:	e7f0      	b.n	8020b68 <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask_partialCH+0x200>
			ch_1_out_0 = activation_max;
 8020b86:	9b02      	ldr	r3, [sp, #8]
		else
			BIT_CLEAR(*mask, bit_starting_idx+1);
 8020b88:	f995 0000 	ldrsb.w	r0, [r5]
 8020b8c:	1c54      	adds	r4, r2, #1
 8020b8e:	2101      	movs	r1, #1
 8020b90:	40a1      	lsls	r1, r4
 8020b92:	43c9      	mvns	r1, r1
 8020b94:	b2c9      	uxtb	r1, r1
 8020b96:	4008      	ands	r0, r1
 8020b98:	7028      	strb	r0, [r5, #0]
		*out_0++ = (q7_t) ch_1_out_0;
 8020b9a:	9921      	ldr	r1, [sp, #132]	@ 0x84
 8020b9c:	3102      	adds	r1, #2
 8020b9e:	9821      	ldr	r0, [sp, #132]	@ 0x84
 8020ba0:	7043      	strb	r3, [r0, #1]

		ch_1_out_1 = (q31_t) ((float) ch_1_out_1 * scale_1);
 8020ba2:	eddd 7a01 	vldr	s15, [sp, #4]
 8020ba6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8020baa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8020bae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8020bb2:	ee17 3a90 	vmov	r3, s15
		ch_1_out_1 += out_offset;
 8020bb6:	981c      	ldr	r0, [sp, #112]	@ 0x70
 8020bb8:	4403      	add	r3, r0
		mask_value = 1;
		if (ch_1_out_1 < activation_min){
 8020bba:	4598      	cmp	r8, r3
 8020bbc:	dc50      	bgt.n	8020c60 <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask_partialCH+0x2f8>
		ch_1_out_1 += out_offset;
 8020bbe:	461f      	mov	r7, r3
		mask_value = 1;
 8020bc0:	2301      	movs	r3, #1
			ch_1_out_1 = activation_min;
			mask_value = 0;
		}
		if (ch_1_out_1 > activation_max){
 8020bc2:	9802      	ldr	r0, [sp, #8]
 8020bc4:	42b8      	cmp	r0, r7
 8020bc6:	db02      	blt.n	8020bce <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask_partialCH+0x266>
			ch_1_out_1 = activation_max;
			mask_value = 0;
		}
		if (mask_value == 1)
 8020bc8:	2b00      	cmp	r3, #0
 8020bca:	d14b      	bne.n	8020c64 <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask_partialCH+0x2fc>
 8020bcc:	46bc      	mov	ip, r7
			BIT_SET(*mask1, bit_starting_idx+1);
		else
			BIT_CLEAR(*mask1, bit_starting_idx+1);
 8020bce:	f99e 0000 	ldrsb.w	r0, [lr]
 8020bd2:	1c54      	adds	r4, r2, #1
 8020bd4:	2301      	movs	r3, #1
 8020bd6:	40a3      	lsls	r3, r4
 8020bd8:	43db      	mvns	r3, r3
 8020bda:	b2db      	uxtb	r3, r3
 8020bdc:	4018      	ands	r0, r3
 8020bde:	f88e 0000 	strb.w	r0, [lr]
		*out_1++ = (q7_t) ch_1_out_1;
 8020be2:	9805      	ldr	r0, [sp, #20]
 8020be4:	1c83      	adds	r3, r0, #2
 8020be6:	f880 c001 	strb.w	ip, [r0, #1]
		scales += 2;
 8020bea:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 8020bec:	3008      	adds	r0, #8
 8020bee:	901b      	str	r0, [sp, #108]	@ 0x6c

		bit_starting_idx += 2;
 8020bf0:	3202      	adds	r2, #2
		if(bit_starting_idx == 8){
 8020bf2:	2a08      	cmp	r2, #8
 8020bf4:	d040      	beq.n	8020c78 <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask_partialCH+0x310>
			mask++;
			mask1++;
		}

		/* skip row */
		ip_a0_sram += num_col_sram;
 8020bf6:	9803      	ldr	r0, [sp, #12]
 8020bf8:	9c07      	ldr	r4, [sp, #28]
 8020bfa:	4420      	add	r0, r4
 8020bfc:	9003      	str	r0, [sp, #12]
		ip_a0_flash += num_col_flash;
 8020bfe:	9806      	ldr	r0, [sp, #24]
 8020c00:	4483      	add	fp, r0
		row_count--;
 8020c02:	9804      	ldr	r0, [sp, #16]
 8020c04:	3801      	subs	r0, #1
 8020c06:	b280      	uxth	r0, r0
 8020c08:	9004      	str	r0, [sp, #16]
		*out_1++ = (q7_t) ch_1_out_1;
 8020c0a:	9305      	str	r3, [sp, #20]
		*out_0++ = (q7_t) ch_1_out_0;
 8020c0c:	9121      	str	r1, [sp, #132]	@ 0x84
	while (row_count) {
 8020c0e:	9b04      	ldr	r3, [sp, #16]
 8020c10:	2b00      	cmp	r3, #0
 8020c12:	d036      	beq.n	8020c82 <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask_partialCH+0x31a>
		const q15_t *ip_b1 = ip_b0 + num_col_a;
 8020c14:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8020c16:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8020c18:	eb04 0043 	add.w	r0, r4, r3, lsl #1
		const q7_t *ip_a1_sram = ip_a0_sram + num_col_sram;
 8020c1c:	9b03      	ldr	r3, [sp, #12]
 8020c1e:	9f07      	ldr	r7, [sp, #28]
 8020c20:	eb03 0a07 	add.w	sl, r3, r7
		const q7_t *ip_a1_flash = ip_a0_flash + num_col_flash;
 8020c24:	9906      	ldr	r1, [sp, #24]
 8020c26:	4459      	add	r1, fp
 8020c28:	9108      	str	r1, [sp, #32]
		const float scale_0 = scales[0];
 8020c2a:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 8020c2c:	edd1 6a00 	vldr	s13, [r1]
		const float scale_1 = scales[1];
 8020c30:	ed91 7a01 	vldr	s14, [r1, #4]
		q31_t ch_0_out_0 = *bias;
 8020c34:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8020c36:	6809      	ldr	r1, [r1, #0]
		q31_t ch_1_out_0 = *bias;
 8020c38:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8020c3a:	6876      	ldr	r6, [r6, #4]
		q31_t ch_1_out_1 = *bias++;
 8020c3c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8020c3e:	3308      	adds	r3, #8
 8020c40:	9320      	str	r3, [sp, #128]	@ 0x80
		uint16_t col_count = num_col_sram / 4;
 8020c42:	08bf      	lsrs	r7, r7, #2
		q31_t ch_1_out_1 = *bias++;
 8020c44:	9601      	str	r6, [sp, #4]
		q31_t ch_0_out_1 = *bias++;
 8020c46:	460b      	mov	r3, r1
 8020c48:	f8cd e024 	str.w	lr, [sp, #36]	@ 0x24
 8020c4c:	920a      	str	r2, [sp, #40]	@ 0x28
 8020c4e:	f8cd b02c 	str.w	fp, [sp, #44]	@ 0x2c
 8020c52:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8020c56:	f8cd 8030 	str.w	r8, [sp, #48]	@ 0x30
 8020c5a:	9522      	str	r5, [sp, #136]	@ 0x88
 8020c5c:	4635      	mov	r5, r6
		while (col_count) {
 8020c5e:	e6d6      	b.n	8020a0e <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask_partialCH+0xa6>
			mask_value = 0;
 8020c60:	2300      	movs	r3, #0
 8020c62:	e7ae      	b.n	8020bc2 <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask_partialCH+0x25a>
			BIT_SET(*mask1, bit_starting_idx+1);
 8020c64:	f99e 3000 	ldrsb.w	r3, [lr]
 8020c68:	1c54      	adds	r4, r2, #1
 8020c6a:	2001      	movs	r0, #1
 8020c6c:	40a0      	lsls	r0, r4
 8020c6e:	4303      	orrs	r3, r0
 8020c70:	f88e 3000 	strb.w	r3, [lr]
 8020c74:	46bc      	mov	ip, r7
 8020c76:	e7b4      	b.n	8020be2 <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask_partialCH+0x27a>
			mask++;
 8020c78:	3501      	adds	r5, #1
			mask1++;
 8020c7a:	f10e 0e01 	add.w	lr, lr, #1
			bit_starting_idx = 0;
 8020c7e:	2200      	movs	r2, #0
 8020c80:	e7b9      	b.n	8020bf6 <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask_partialCH+0x28e>

	out_0 += output_ch;

	/* return the new output pointer with offset */
	return out_0;
}
 8020c82:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8020c84:	f8dd a084 	ldr.w	sl, [sp, #132]	@ 0x84
 8020c88:	eb0a 0001 	add.w	r0, sl, r1
 8020c8c:	b011      	add	sp, #68	@ 0x44
 8020c8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08020c92 <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask_partialCH_Multiple2>:
q7_t* mat_mult_kernel_s8_s16_reordered_fpreq_bitmask_partialCH_Multiple2(const q7_t *kernel_sram,
		const q7_t *kernel_flash, const uint16_t first_k_channel,
		const q15_t *input_b, const uint16_t output_ch, const float *scales,
		const int32_t out_offset, const int16_t activation_min,
		const int16_t activation_max, const uint16_t num_col_a,
		const int32_t *const output_bias, q7_t *out_0, q7_t *mask) {
 8020c92:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020c96:	b08f      	sub	sp, #60	@ 0x3c
 8020c98:	9001      	str	r0, [sp, #4]
 8020c9a:	468b      	mov	fp, r1
 8020c9c:	9206      	str	r2, [sp, #24]
 8020c9e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8020ca0:	f8bd 0060 	ldrh.w	r0, [sp, #96]	@ 0x60
 8020ca4:	f9bd c06c 	ldrsh.w	ip, [sp, #108]	@ 0x6c
 8020ca8:	f9bd 3070 	ldrsh.w	r3, [sp, #112]	@ 0x70
 8020cac:	9300      	str	r3, [sp, #0]
 8020cae:	f8bd 3074 	ldrh.w	r3, [sp, #116]	@ 0x74
 8020cb2:	930c      	str	r3, [sp, #48]	@ 0x30
 8020cb4:	f8dd a080 	ldr.w	sl, [sp, #128]	@ 0x80
	/* set up the second output pointers */
	q7_t *out_1 = out_0 + output_ch;
 8020cb8:	991f      	ldr	r1, [sp, #124]	@ 0x7c
 8020cba:	4401      	add	r1, r0
 8020cbc:	9103      	str	r1, [sp, #12]
	q7_t *mask1 = mask + output_ch / 8;
 8020cbe:	eb0a 01d0 	add.w	r1, sl, r0, lsr #3
 8020cc2:	9105      	str	r1, [sp, #20]
	const int32_t *bias = output_bias;

	uint16_t row_count = output_ch / 2;
 8020cc4:	0841      	lsrs	r1, r0, #1
 8020cc6:	9102      	str	r1, [sp, #8]
	const q7_t *ip_a0_sram = kernel_sram;
	const uint16_t num_col_sram = first_k_channel;
	const q7_t *ip_a0_flash = kernel_flash;
	const uint16_t num_col_flash = num_col_a - first_k_channel;
 8020cc8:	1a9b      	subs	r3, r3, r2
 8020cca:	b29b      	uxth	r3, r3
 8020ccc:	9304      	str	r3, [sp, #16]
	int bit_starting_idx = 0;
 8020cce:	f04f 0900 	mov.w	r9, #0
 8020cd2:	900d      	str	r0, [sp, #52]	@ 0x34
 8020cd4:	4660      	mov	r0, ip
	/* this loop over rows in A */
	while (row_count) {
 8020cd6:	e126      	b.n	8020f26 <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask_partialCH_Multiple2+0x294>

		// kernels in SRAM
		uint16_t col_count = num_col_sram / 2;
		/* accumulate over the vector */
		while (col_count) {
			ch_0_out_0 += ip_a0_sram[0] * ip_b0[0];
 8020cd8:	f99e 9000 	ldrsb.w	r9, [lr]
 8020cdc:	f9b6 c000 	ldrsh.w	ip, [r6]
 8020ce0:	fb0c 5509 	mla	r5, ip, r9, r5
			ch_0_out_0 += ip_a0_sram[1] * ip_b0[1];
 8020ce4:	f99e a001 	ldrsb.w	sl, [lr, #1]
 8020ce8:	f9b6 b002 	ldrsh.w	fp, [r6, #2]
 8020cec:	fb0b 550a 	mla	r5, fp, sl, r5
			ch_0_out_1 += ip_a0_sram[0] * ip_b1[0];
 8020cf0:	f9b7 0000 	ldrsh.w	r0, [r7]
 8020cf4:	fb00 4409 	mla	r4, r0, r9, r4
			ch_0_out_1 += ip_a0_sram[1] * ip_b1[1];
 8020cf8:	f9b7 9002 	ldrsh.w	r9, [r7, #2]
 8020cfc:	fb09 440a 	mla	r4, r9, sl, r4

			ch_1_out_0 += ip_a1_sram[0] * ip_b0[0];
 8020d00:	f998 a000 	ldrsb.w	sl, [r8]
 8020d04:	fb0a 330c 	mla	r3, sl, ip, r3
			ch_1_out_0 += ip_a1_sram[1] * ip_b0[1];
 8020d08:	f998 c001 	ldrsb.w	ip, [r8, #1]
 8020d0c:	fb0c 330b 	mla	r3, ip, fp, r3
			ch_1_out_1 += ip_a1_sram[0] * ip_b1[0];
 8020d10:	fb0a 2000 	mla	r0, sl, r0, r2
			ch_1_out_1 += ip_a1_sram[1] * ip_b1[1];
 8020d14:	fb0c 0209 	mla	r2, ip, r9, r0

			ip_a0_sram += 2;
 8020d18:	f10e 0e02 	add.w	lr, lr, #2
			ip_a1_sram += 2;
 8020d1c:	f108 0802 	add.w	r8, r8, #2
			ip_b0 += 2;
 8020d20:	3604      	adds	r6, #4
			ip_b1 += 2;
 8020d22:	3704      	adds	r7, #4

			col_count--;
 8020d24:	3901      	subs	r1, #1
 8020d26:	b289      	uxth	r1, r1
		while (col_count) {
 8020d28:	2900      	cmp	r1, #0
 8020d2a:	d1d5      	bne.n	8020cd8 <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask_partialCH_Multiple2+0x46>
		} /* while over col_count */

		// kernels in Flash
		col_count = num_col_flash / 2;
 8020d2c:	f8cd e004 	str.w	lr, [sp, #4]
 8020d30:	f8dd e020 	ldr.w	lr, [sp, #32]
 8020d34:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 8020d38:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8020d3a:	9904      	ldr	r1, [sp, #16]
 8020d3c:	0849      	lsrs	r1, r1, #1
		/* accumulate over the vector */
		while (col_count) {
 8020d3e:	9008      	str	r0, [sp, #32]
 8020d40:	e027      	b.n	8020d92 <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask_partialCH_Multiple2+0x100>
			ch_0_out_0 += ip_a0_flash[0] * ip_b0[0];
 8020d42:	f99b 8000 	ldrsb.w	r8, [fp]
 8020d46:	f9b6 c000 	ldrsh.w	ip, [r6]
 8020d4a:	fb0c 5508 	mla	r5, ip, r8, r5
			ch_0_out_0 += ip_a0_flash[1] * ip_b0[1];
 8020d4e:	f99b 9001 	ldrsb.w	r9, [fp, #1]
 8020d52:	f9b6 a002 	ldrsh.w	sl, [r6, #2]
 8020d56:	fb0a 5509 	mla	r5, sl, r9, r5
			ch_0_out_1 += ip_a0_flash[0] * ip_b1[0];
 8020d5a:	f9b7 0000 	ldrsh.w	r0, [r7]
 8020d5e:	fb00 4408 	mla	r4, r0, r8, r4
			ch_0_out_1 += ip_a0_flash[1] * ip_b1[1];
 8020d62:	f9b7 8002 	ldrsh.w	r8, [r7, #2]
 8020d66:	fb08 4409 	mla	r4, r8, r9, r4

			ch_1_out_0 += ip_a1_flash[0] * ip_b0[0];
 8020d6a:	f99e 9000 	ldrsb.w	r9, [lr]
 8020d6e:	fb09 330c 	mla	r3, r9, ip, r3
			ch_1_out_0 += ip_a1_flash[1] * ip_b0[1];
 8020d72:	f99e c001 	ldrsb.w	ip, [lr, #1]
 8020d76:	fb0c 330a 	mla	r3, ip, sl, r3
			ch_1_out_1 += ip_a1_flash[0] * ip_b1[0];
 8020d7a:	fb09 2000 	mla	r0, r9, r0, r2
			ch_1_out_1 += ip_a1_flash[1] * ip_b1[1];
 8020d7e:	fb0c 0208 	mla	r2, ip, r8, r0

			ip_a0_flash += 2;
 8020d82:	f10b 0b02 	add.w	fp, fp, #2
			ip_a1_flash += 2;
 8020d86:	f10e 0e02 	add.w	lr, lr, #2
			ip_b0 += 2;
 8020d8a:	3604      	adds	r6, #4
			ip_b1 += 2;
 8020d8c:	3704      	adds	r7, #4

			col_count--;
 8020d8e:	3901      	subs	r1, #1
 8020d90:	b289      	uxth	r1, r1
		while (col_count) {
 8020d92:	2900      	cmp	r1, #0
 8020d94:	d1d5      	bne.n	8020d42 <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask_partialCH_Multiple2+0xb0>
		} /* while over col_count */


		ch_0_out_0 = (q31_t) ((float) ch_0_out_0 * scale_0);
 8020d96:	f8dd 901c 	ldr.w	r9, [sp, #28]
 8020d9a:	9808      	ldr	r0, [sp, #32]
 8020d9c:	f8dd a080 	ldr.w	sl, [sp, #128]	@ 0x80
 8020da0:	ee07 5a90 	vmov	s15, r5
 8020da4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8020da8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8020dac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8020db0:	ee17 1a90 	vmov	r1, s15
		ch_0_out_0 += out_offset;
 8020db4:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 8020db6:	4429      	add	r1, r5
		q7_t mask_value = 1;
		if (ch_0_out_0 < activation_min){
 8020db8:	4607      	mov	r7, r0
 8020dba:	4288      	cmp	r0, r1
 8020dbc:	dc0e      	bgt.n	8020ddc <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask_partialCH_Multiple2+0x14a>
		q7_t mask_value = 1;
 8020dbe:	2501      	movs	r5, #1
			ch_0_out_0 = activation_min;
			mask_value = 0;
		}
		if (ch_0_out_0 > activation_max){
 8020dc0:	9e00      	ldr	r6, [sp, #0]
 8020dc2:	46b4      	mov	ip, r6
 8020dc4:	428e      	cmp	r6, r1
 8020dc6:	db0c      	blt.n	8020de2 <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask_partialCH_Multiple2+0x150>
			ch_0_out_0 = activation_max;
			mask_value = 0;
		}
		if (mask_value == 1)
 8020dc8:	b165      	cbz	r5, 8020de4 <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask_partialCH_Multiple2+0x152>
			BIT_SET(*mask, bit_starting_idx);
 8020dca:	f99a 5000 	ldrsb.w	r5, [sl]
 8020dce:	2601      	movs	r6, #1
 8020dd0:	fa06 f609 	lsl.w	r6, r6, r9
 8020dd4:	4335      	orrs	r5, r6
 8020dd6:	f88a 5000 	strb.w	r5, [sl]
 8020dda:	e00d      	b.n	8020df8 <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask_partialCH_Multiple2+0x166>
			ch_0_out_0 = activation_min;
 8020ddc:	4601      	mov	r1, r0
			mask_value = 0;
 8020dde:	2500      	movs	r5, #0
 8020de0:	e7ee      	b.n	8020dc0 <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask_partialCH_Multiple2+0x12e>
			ch_0_out_0 = activation_max;
 8020de2:	9900      	ldr	r1, [sp, #0]
		else
			BIT_CLEAR(*mask, bit_starting_idx);
 8020de4:	f99a 6000 	ldrsb.w	r6, [sl]
 8020de8:	2501      	movs	r5, #1
 8020dea:	fa05 f509 	lsl.w	r5, r5, r9
 8020dee:	43ed      	mvns	r5, r5
 8020df0:	b2ed      	uxtb	r5, r5
 8020df2:	402e      	ands	r6, r5
 8020df4:	f88a 6000 	strb.w	r6, [sl]
		*out_0++ = (q7_t) ch_0_out_0;
 8020df8:	9d1f      	ldr	r5, [sp, #124]	@ 0x7c
 8020dfa:	7029      	strb	r1, [r5, #0]



		ch_0_out_1 = (q31_t) ((float) ch_0_out_1 * scale_0);
 8020dfc:	ee07 4a90 	vmov	s15, r4
 8020e00:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8020e04:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8020e08:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8020e0c:	ee17 1a90 	vmov	r1, s15
		ch_0_out_1 += out_offset;
 8020e10:	9c1a      	ldr	r4, [sp, #104]	@ 0x68
 8020e12:	4421      	add	r1, r4
		mask_value = 1;
		if (ch_0_out_1 < activation_min){
 8020e14:	4288      	cmp	r0, r1
 8020e16:	dc0d      	bgt.n	8020e34 <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask_partialCH_Multiple2+0x1a2>
		mask_value = 1;
 8020e18:	2401      	movs	r4, #1
			ch_0_out_1 = activation_min;
			mask_value = 0;
		}
		if (ch_0_out_1 > activation_max){
 8020e1a:	9d00      	ldr	r5, [sp, #0]
 8020e1c:	428d      	cmp	r5, r1
 8020e1e:	db0c      	blt.n	8020e3a <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask_partialCH_Multiple2+0x1a8>
			ch_0_out_1 = activation_max;
			mask_value = 0;
		}
		if (mask_value == 1)
 8020e20:	b164      	cbz	r4, 8020e3c <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask_partialCH_Multiple2+0x1aa>
			BIT_SET(*mask1, bit_starting_idx);
 8020e22:	9e05      	ldr	r6, [sp, #20]
 8020e24:	f996 4000 	ldrsb.w	r4, [r6]
 8020e28:	2501      	movs	r5, #1
 8020e2a:	fa05 f509 	lsl.w	r5, r5, r9
 8020e2e:	432c      	orrs	r4, r5
 8020e30:	7034      	strb	r4, [r6, #0]
 8020e32:	e00d      	b.n	8020e50 <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask_partialCH_Multiple2+0x1be>
			ch_0_out_1 = activation_min;
 8020e34:	4601      	mov	r1, r0
			mask_value = 0;
 8020e36:	2400      	movs	r4, #0
 8020e38:	e7ef      	b.n	8020e1a <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask_partialCH_Multiple2+0x188>
			ch_0_out_1 = activation_max;
 8020e3a:	9900      	ldr	r1, [sp, #0]
		else
			BIT_CLEAR(*mask1, bit_starting_idx);
 8020e3c:	9e05      	ldr	r6, [sp, #20]
 8020e3e:	f996 5000 	ldrsb.w	r5, [r6]
 8020e42:	2401      	movs	r4, #1
 8020e44:	fa04 f409 	lsl.w	r4, r4, r9
 8020e48:	43e4      	mvns	r4, r4
 8020e4a:	b2e4      	uxtb	r4, r4
 8020e4c:	4025      	ands	r5, r4
 8020e4e:	7035      	strb	r5, [r6, #0]
		*out_1++ = (q7_t) ch_0_out_1;
 8020e50:	9c03      	ldr	r4, [sp, #12]
 8020e52:	7021      	strb	r1, [r4, #0]

		ch_1_out_0 = (q31_t) ((float) ch_1_out_0 * scale_1);
 8020e54:	ee07 3a90 	vmov	s15, r3
 8020e58:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8020e5c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8020e60:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8020e64:	ee17 3a90 	vmov	r3, s15
		ch_1_out_0 += out_offset;
 8020e68:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8020e6a:	440b      	add	r3, r1
		mask_value = 1;
		if (ch_1_out_0 < activation_min){
 8020e6c:	4298      	cmp	r0, r3
 8020e6e:	dc0e      	bgt.n	8020e8e <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask_partialCH_Multiple2+0x1fc>
		mask_value = 1;
 8020e70:	2101      	movs	r1, #1
			ch_1_out_0 = activation_min;
			mask_value = 0;
		}
		if (ch_1_out_0 > activation_max){
 8020e72:	9c00      	ldr	r4, [sp, #0]
 8020e74:	429c      	cmp	r4, r3
 8020e76:	db0d      	blt.n	8020e94 <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask_partialCH_Multiple2+0x202>
			ch_1_out_0 = activation_max;
			mask_value = 0;
		}
		if (mask_value == 1)
 8020e78:	b169      	cbz	r1, 8020e96 <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask_partialCH_Multiple2+0x204>
			BIT_SET(*mask, bit_starting_idx+1);
 8020e7a:	f99a 1000 	ldrsb.w	r1, [sl]
 8020e7e:	f109 0501 	add.w	r5, r9, #1
 8020e82:	2401      	movs	r4, #1
 8020e84:	40ac      	lsls	r4, r5
 8020e86:	4321      	orrs	r1, r4
 8020e88:	f88a 1000 	strb.w	r1, [sl]
 8020e8c:	e00e      	b.n	8020eac <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask_partialCH_Multiple2+0x21a>
			ch_1_out_0 = activation_min;
 8020e8e:	4603      	mov	r3, r0
			mask_value = 0;
 8020e90:	2100      	movs	r1, #0
 8020e92:	e7ee      	b.n	8020e72 <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask_partialCH_Multiple2+0x1e0>
			ch_1_out_0 = activation_max;
 8020e94:	9b00      	ldr	r3, [sp, #0]
		else
			BIT_CLEAR(*mask, bit_starting_idx+1);
 8020e96:	f99a 4000 	ldrsb.w	r4, [sl]
 8020e9a:	f109 0501 	add.w	r5, r9, #1
 8020e9e:	2101      	movs	r1, #1
 8020ea0:	40a9      	lsls	r1, r5
 8020ea2:	43c9      	mvns	r1, r1
 8020ea4:	b2c9      	uxtb	r1, r1
 8020ea6:	400c      	ands	r4, r1
 8020ea8:	f88a 4000 	strb.w	r4, [sl]
		*out_0++ = (q7_t) ch_1_out_0;
 8020eac:	991f      	ldr	r1, [sp, #124]	@ 0x7c
 8020eae:	3102      	adds	r1, #2
 8020eb0:	9c1f      	ldr	r4, [sp, #124]	@ 0x7c
 8020eb2:	7063      	strb	r3, [r4, #1]

		ch_1_out_1 = (q31_t) ((float) ch_1_out_1 * scale_1);
 8020eb4:	ee07 2a90 	vmov	s15, r2
 8020eb8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8020ebc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8020ec0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8020ec4:	ee17 3a90 	vmov	r3, s15
		ch_1_out_1 += out_offset;
 8020ec8:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8020eca:	4413      	add	r3, r2
		mask_value = 1;
		if (ch_1_out_1 < activation_min){
 8020ecc:	4298      	cmp	r0, r3
 8020ece:	dc53      	bgt.n	8020f78 <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask_partialCH_Multiple2+0x2e6>
		ch_1_out_1 += out_offset;
 8020ed0:	461f      	mov	r7, r3
		mask_value = 1;
 8020ed2:	2301      	movs	r3, #1
			ch_1_out_1 = activation_min;
			mask_value = 0;
		}
		if (ch_1_out_1 > activation_max){
 8020ed4:	9a00      	ldr	r2, [sp, #0]
 8020ed6:	42ba      	cmp	r2, r7
 8020ed8:	db02      	blt.n	8020ee0 <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask_partialCH_Multiple2+0x24e>
			ch_1_out_1 = activation_max;
			mask_value = 0;
		}
		if (mask_value == 1)
 8020eda:	2b00      	cmp	r3, #0
 8020edc:	d14e      	bne.n	8020f7c <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask_partialCH_Multiple2+0x2ea>
 8020ede:	46bc      	mov	ip, r7
			BIT_SET(*mask1, bit_starting_idx+1);
		else
			BIT_CLEAR(*mask1, bit_starting_idx+1);
 8020ee0:	9d05      	ldr	r5, [sp, #20]
 8020ee2:	f995 2000 	ldrsb.w	r2, [r5]
 8020ee6:	f109 0401 	add.w	r4, r9, #1
 8020eea:	2301      	movs	r3, #1
 8020eec:	40a3      	lsls	r3, r4
 8020eee:	43db      	mvns	r3, r3
 8020ef0:	b2db      	uxtb	r3, r3
 8020ef2:	401a      	ands	r2, r3
 8020ef4:	702a      	strb	r2, [r5, #0]
		*out_1++ = (q7_t) ch_1_out_1;
 8020ef6:	9a03      	ldr	r2, [sp, #12]
 8020ef8:	1c93      	adds	r3, r2, #2
 8020efa:	f882 c001 	strb.w	ip, [r2, #1]
		scales += 2;
 8020efe:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8020f00:	3208      	adds	r2, #8
 8020f02:	9219      	str	r2, [sp, #100]	@ 0x64

		bit_starting_idx += 2;
 8020f04:	f109 0902 	add.w	r9, r9, #2
		if(bit_starting_idx == 8){
 8020f08:	f1b9 0f08 	cmp.w	r9, #8
 8020f0c:	d041      	beq.n	8020f92 <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask_partialCH_Multiple2+0x300>
			mask++;
			mask1++;
		}

		/* skip row */
		ip_a0_sram += num_col_sram;
 8020f0e:	9a01      	ldr	r2, [sp, #4]
 8020f10:	9c06      	ldr	r4, [sp, #24]
 8020f12:	4422      	add	r2, r4
 8020f14:	9201      	str	r2, [sp, #4]
		ip_a0_flash += num_col_flash;
 8020f16:	9a04      	ldr	r2, [sp, #16]
 8020f18:	4493      	add	fp, r2
		row_count--;
 8020f1a:	9a02      	ldr	r2, [sp, #8]
 8020f1c:	3a01      	subs	r2, #1
 8020f1e:	b292      	uxth	r2, r2
 8020f20:	9202      	str	r2, [sp, #8]
		*out_1++ = (q7_t) ch_1_out_1;
 8020f22:	9303      	str	r3, [sp, #12]
		*out_0++ = (q7_t) ch_1_out_0;
 8020f24:	911f      	str	r1, [sp, #124]	@ 0x7c
	while (row_count) {
 8020f26:	9b02      	ldr	r3, [sp, #8]
 8020f28:	2b00      	cmp	r3, #0
 8020f2a:	d03a      	beq.n	8020fa2 <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask_partialCH_Multiple2+0x310>
		const q15_t *ip_b1 = ip_b0 + num_col_a;
 8020f2c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8020f2e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8020f30:	eb06 0743 	add.w	r7, r6, r3, lsl #1
		const q7_t *ip_a1_sram = ip_a0_sram + num_col_sram;
 8020f34:	9b01      	ldr	r3, [sp, #4]
 8020f36:	9a06      	ldr	r2, [sp, #24]
 8020f38:	eb03 0802 	add.w	r8, r3, r2
		const q7_t *ip_a1_flash = ip_a0_flash + num_col_flash;
 8020f3c:	9904      	ldr	r1, [sp, #16]
 8020f3e:	eb0b 0e01 	add.w	lr, fp, r1
		const float scale_0 = scales[0];
 8020f42:	9919      	ldr	r1, [sp, #100]	@ 0x64
 8020f44:	edd1 6a00 	vldr	s13, [r1]
		const float scale_1 = scales[1];
 8020f48:	ed91 7a01 	vldr	s14, [r1, #4]
		q31_t ch_0_out_0 = *bias;
 8020f4c:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8020f4e:	680d      	ldr	r5, [r1, #0]
		q31_t ch_1_out_0 = *bias;
 8020f50:	684b      	ldr	r3, [r1, #4]
		q31_t ch_1_out_1 = *bias++;
 8020f52:	3108      	adds	r1, #8
 8020f54:	911e      	str	r1, [sp, #120]	@ 0x78
		uint16_t col_count = num_col_sram / 2;
 8020f56:	ea4f 0c52 	mov.w	ip, r2, lsr #1
		q31_t ch_1_out_1 = *bias++;
 8020f5a:	461a      	mov	r2, r3
		q31_t ch_0_out_1 = *bias++;
 8020f5c:	462c      	mov	r4, r5
 8020f5e:	f8cd 901c 	str.w	r9, [sp, #28]
 8020f62:	f8cd e020 	str.w	lr, [sp, #32]
 8020f66:	4661      	mov	r1, ip
 8020f68:	f8dd e004 	ldr.w	lr, [sp, #4]
 8020f6c:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8020f70:	900a      	str	r0, [sp, #40]	@ 0x28
 8020f72:	f8cd a080 	str.w	sl, [sp, #128]	@ 0x80
		while (col_count) {
 8020f76:	e6d7      	b.n	8020d28 <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask_partialCH_Multiple2+0x96>
			mask_value = 0;
 8020f78:	2300      	movs	r3, #0
 8020f7a:	e7ab      	b.n	8020ed4 <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask_partialCH_Multiple2+0x242>
			BIT_SET(*mask1, bit_starting_idx+1);
 8020f7c:	9d05      	ldr	r5, [sp, #20]
 8020f7e:	f995 3000 	ldrsb.w	r3, [r5]
 8020f82:	f109 0401 	add.w	r4, r9, #1
 8020f86:	2201      	movs	r2, #1
 8020f88:	40a2      	lsls	r2, r4
 8020f8a:	4313      	orrs	r3, r2
 8020f8c:	702b      	strb	r3, [r5, #0]
 8020f8e:	46bc      	mov	ip, r7
 8020f90:	e7b1      	b.n	8020ef6 <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask_partialCH_Multiple2+0x264>
			mask++;
 8020f92:	f10a 0a01 	add.w	sl, sl, #1
			mask1++;
 8020f96:	9a05      	ldr	r2, [sp, #20]
 8020f98:	3201      	adds	r2, #1
 8020f9a:	9205      	str	r2, [sp, #20]
			bit_starting_idx = 0;
 8020f9c:	f04f 0900 	mov.w	r9, #0
 8020fa0:	e7b5      	b.n	8020f0e <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask_partialCH_Multiple2+0x27c>

	out_0 += output_ch;

	/* return the new output pointer with offset */
	return out_0;
}
 8020fa2:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8020fa4:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8020fa6:	4418      	add	r0, r3
 8020fa8:	b00f      	add	sp, #60	@ 0x3c
 8020faa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08020fae <mat_mult_kernel3_input3_s8_s16_fpreq>:

q7_t* mat_mult_kernel3_input3_s8_s16_fpreq(const q7_t *input_a,
		const q15_t *input_b, const uint16_t output_ch, const float *scales,
		const int32_t out_offset, const int16_t activation_min,
		const int16_t activation_max, const uint16_t num_col_a,
		const int32_t *const output_bias, q7_t *out_0, q15_t *kbuf) {
 8020fae:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020fb2:	b087      	sub	sp, #28
 8020fb4:	4614      	mov	r4, r2
 8020fb6:	f8dd a040 	ldr.w	sl, [sp, #64]	@ 0x40
 8020fba:	f9bd 9044 	ldrsh.w	r9, [sp, #68]	@ 0x44
 8020fbe:	f9bd 8048 	ldrsh.w	r8, [sp, #72]	@ 0x48
 8020fc2:	f8bd 204c 	ldrh.w	r2, [sp, #76]	@ 0x4c
 8020fc6:	9204      	str	r2, [sp, #16]
 8020fc8:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8020fca:	9816      	ldr	r0, [sp, #88]	@ 0x58
	/* set up the second output pointers */
	q7_t *out_1 = out_0 + output_ch;
 8020fcc:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 8020fce:	4425      	add	r5, r4
 8020fd0:	9503      	str	r5, [sp, #12]
	const int32_t *bias = output_bias;

	uint16_t row_count = output_ch / 2;
 8020fd2:	0865      	lsrs	r5, r4, #1
 8020fd4:	9502      	str	r5, [sp, #8]
	const q15_t *ksrc = &kbuf[0];
	/* this loop over rows in A */
	while (row_count) {
 8020fd6:	9405      	str	r4, [sp, #20]
 8020fd8:	9301      	str	r3, [sp, #4]
 8020fda:	e135      	b.n	8021248 <mat_mult_kernel3_input3_s8_s16_fpreq+0x29a>
		/* setup pointers for B */
		const q15_t *ip_b0 = input_b;
		const q15_t *ip_b1 = ip_b0 + num_col_a;
 8020fdc:	9d04      	ldr	r5, [sp, #16]
 8020fde:	eb01 0445 	add.w	r4, r1, r5, lsl #1
		const q31_t *ip31_b0 = ip_b0;
		const q31_t *ip31_b1 = ip_b1;
		const float scale_0 = scales[0];
 8020fe2:	9b01      	ldr	r3, [sp, #4]
 8020fe4:	edd3 6a00 	vldr	s13, [r3]
		const float scale_1 = scales[1];
 8020fe8:	ed93 7a01 	vldr	s14, [r3, #4]
		const q15_t *ksrc2 = ksrc + 27;
		q31_t *ksrc_31 = ksrc;
		q31_t *ksrc2_31 = ksrc2;

		/* Init accumulator with bias for channel N and N + 1 */
		q31_t ch_0_out_0 = *bias;
 8020fec:	6816      	ldr	r6, [r2, #0]
		q31_t ch_0_out_1 = *bias++;
		q31_t ch_1_out_0 = *bias;
 8020fee:	f8d2 c004 	ldr.w	ip, [r2, #4]
		q31_t ch_1_out_1 = *bias++;
 8020ff2:	3208      	adds	r2, #8
    memcpy(&val, *in_q15, 4);
 8020ff4:	f8d1 e000 	ldr.w	lr, [r1]
 8020ff8:	f851 5015 	ldr.w	r5, [r1, r5, lsl #1]
		//------------------4
		q31_t a01, a02, a11, a12;
		q31_t b0 = arm_nn_read_q15x2_ia(&ip_b0);
		q31_t b1 = arm_nn_read_q15x2_ia(&ip_b1);

		ch_0_out_0 = __SMLAD(ksrc_31[0], b0, ch_0_out_0);
 8020ffc:	6807      	ldr	r7, [r0, #0]
 8020ffe:	fb27 630e 	smlad	r3, r7, lr, r6
 8021002:	fb27 6705 	smlad	r7, r7, r5, r6
		ch_0_out_1 = __SMLAD(ksrc_31[0], b1, ch_0_out_1);
		ch_1_out_0 = __SMLAD(ksrc2_31[0], b0, ch_1_out_0);
 8021006:	f8d0 6036 	ldr.w	r6, [r0, #54]	@ 0x36
 802100a:	fb26 ce0e 	smlad	lr, r6, lr, ip
 802100e:	fb26 c605 	smlad	r6, r6, r5, ip
 8021012:	f8d1 c004 	ldr.w	ip, [r1, #4]
 8021016:	f8d4 b004 	ldr.w	fp, [r4, #4]
		ch_1_out_1 = __SMLAD(ksrc2_31[0], b1, ch_1_out_1);

		b0 = arm_nn_read_q15x2_ia(&ip_b0);
		b1 = arm_nn_read_q15x2_ia(&ip_b1);

		ch_0_out_0 = __SMLAD(ksrc_31[1], b0, ch_0_out_0);
 802101a:	6845      	ldr	r5, [r0, #4]
 802101c:	fb25 330c 	smlad	r3, r5, ip, r3
 8021020:	fb25 750b 	smlad	r5, r5, fp, r7
		ch_0_out_1 = __SMLAD(ksrc_31[1], b1, ch_0_out_1);
		ch_1_out_0 = __SMLAD(ksrc2_31[1], b0, ch_1_out_0);
 8021024:	f8d0 703a 	ldr.w	r7, [r0, #58]	@ 0x3a
 8021028:	fb27 ec0c 	smlad	ip, r7, ip, lr
 802102c:	fb27 670b 	smlad	r7, r7, fp, r6
 8021030:	f8d1 e008 	ldr.w	lr, [r1, #8]
 8021034:	f8d4 b008 	ldr.w	fp, [r4, #8]

		//------------------8
		b0 = arm_nn_read_q15x2_ia(&ip_b0);
		b1 = arm_nn_read_q15x2_ia(&ip_b1);

		ch_0_out_0 = __SMLAD(ksrc_31[2], b0, ch_0_out_0);
 8021038:	6886      	ldr	r6, [r0, #8]
 802103a:	fb26 330e 	smlad	r3, r6, lr, r3
 802103e:	fb26 560b 	smlad	r6, r6, fp, r5
		ch_0_out_1 = __SMLAD(ksrc_31[2], b1, ch_0_out_1);
		ch_1_out_0 = __SMLAD(ksrc2_31[2], b0, ch_1_out_0);
 8021042:	f8d0 503e 	ldr.w	r5, [r0, #62]	@ 0x3e
 8021046:	fb25 ce0e 	smlad	lr, r5, lr, ip
 802104a:	fb25 750b 	smlad	r5, r5, fp, r7
 802104e:	68cf      	ldr	r7, [r1, #12]
 8021050:	f8d4 b00c 	ldr.w	fp, [r4, #12]
		ch_1_out_1 = __SMLAD(ksrc2_31[2], b1, ch_1_out_1);

		b0 = arm_nn_read_q15x2_ia(&ip_b0);
		b1 = arm_nn_read_q15x2_ia(&ip_b1);

		ch_0_out_0 = __SMLAD(ksrc_31[3], b0, ch_0_out_0);
 8021054:	f8d0 c00c 	ldr.w	ip, [r0, #12]
 8021058:	fb2c 3307 	smlad	r3, ip, r7, r3
 802105c:	fb2c 6c0b 	smlad	ip, ip, fp, r6
		ch_0_out_1 = __SMLAD(ksrc_31[3], b1, ch_0_out_1);
		ch_1_out_0 = __SMLAD(ksrc2_31[3], b0, ch_1_out_0);
 8021060:	f8d0 6042 	ldr.w	r6, [r0, #66]	@ 0x42
 8021064:	fb26 e707 	smlad	r7, r6, r7, lr
 8021068:	fb26 560b 	smlad	r6, r6, fp, r5
 802106c:	f8d1 e010 	ldr.w	lr, [r1, #16]
 8021070:	f8d4 b010 	ldr.w	fp, [r4, #16]

		//------------------12
		b0 = arm_nn_read_q15x2_ia(&ip_b0);
		b1 = arm_nn_read_q15x2_ia(&ip_b1);

		ch_0_out_0 = __SMLAD(ksrc_31[4], b0, ch_0_out_0);
 8021074:	6905      	ldr	r5, [r0, #16]
 8021076:	fb25 330e 	smlad	r3, r5, lr, r3
 802107a:	fb25 c50b 	smlad	r5, r5, fp, ip
		ch_0_out_1 = __SMLAD(ksrc_31[4], b1, ch_0_out_1);
		ch_1_out_0 = __SMLAD(ksrc2_31[4], b0, ch_1_out_0);
 802107e:	f8d0 c046 	ldr.w	ip, [r0, #70]	@ 0x46
 8021082:	fb2c 7e0e 	smlad	lr, ip, lr, r7
 8021086:	fb2c 6c0b 	smlad	ip, ip, fp, r6
 802108a:	694e      	ldr	r6, [r1, #20]
 802108c:	f8d4 b014 	ldr.w	fp, [r4, #20]
		ch_1_out_1 = __SMLAD(ksrc2_31[4], b1, ch_1_out_1);

		b0 = arm_nn_read_q15x2_ia(&ip_b0);
		b1 = arm_nn_read_q15x2_ia(&ip_b1);

		ch_0_out_0 = __SMLAD(ksrc_31[5], b0, ch_0_out_0);
 8021090:	6947      	ldr	r7, [r0, #20]
 8021092:	fb27 3306 	smlad	r3, r7, r6, r3
 8021096:	fb27 570b 	smlad	r7, r7, fp, r5
		ch_0_out_1 = __SMLAD(ksrc_31[5], b1, ch_0_out_1);
		ch_1_out_0 = __SMLAD(ksrc2_31[5], b0, ch_1_out_0);
 802109a:	f8d0 504a 	ldr.w	r5, [r0, #74]	@ 0x4a
 802109e:	fb25 e606 	smlad	r6, r5, r6, lr
 80210a2:	fb25 c50b 	smlad	r5, r5, fp, ip
 80210a6:	f8d1 c018 	ldr.w	ip, [r1, #24]
 80210aa:	f8d4 b018 	ldr.w	fp, [r4, #24]
		ch_1_out_1 = __SMLAD(ksrc2_31[5], b1, ch_1_out_1);

		//------------------16
		b0 = arm_nn_read_q15x2_ia(&ip_b0);
		b1 = arm_nn_read_q15x2_ia(&ip_b1);
		ch_0_out_0 = __SMLAD(ksrc_31[6], b0, ch_0_out_0);
 80210ae:	f8d0 e018 	ldr.w	lr, [r0, #24]
 80210b2:	fb2e 330c 	smlad	r3, lr, ip, r3
 80210b6:	fb2e 7e0b 	smlad	lr, lr, fp, r7
		ch_0_out_1 = __SMLAD(ksrc_31[6], b1, ch_0_out_1);
		ch_1_out_0 = __SMLAD(ksrc2_31[6], b0, ch_1_out_0);
 80210ba:	f8d0 704e 	ldr.w	r7, [r0, #78]	@ 0x4e
 80210be:	fb27 6c0c 	smlad	ip, r7, ip, r6
 80210c2:	fb27 570b 	smlad	r7, r7, fp, r5
 80210c6:	69cd      	ldr	r5, [r1, #28]
 80210c8:	f8d4 b01c 	ldr.w	fp, [r4, #28]
		ch_1_out_1 = __SMLAD(ksrc2_31[6], b1, ch_1_out_1);

		b0 = arm_nn_read_q15x2_ia(&ip_b0);
		b1 = arm_nn_read_q15x2_ia(&ip_b1);

		ch_0_out_0 = __SMLAD(ksrc_31[7], b0, ch_0_out_0);
 80210cc:	69c6      	ldr	r6, [r0, #28]
 80210ce:	fb26 3305 	smlad	r3, r6, r5, r3
 80210d2:	fb26 e60b 	smlad	r6, r6, fp, lr
		ch_0_out_1 = __SMLAD(ksrc_31[7], b1, ch_0_out_1);
		ch_1_out_0 = __SMLAD(ksrc2_31[7], b0, ch_1_out_0);
 80210d6:	f8d0 e052 	ldr.w	lr, [r0, #82]	@ 0x52
 80210da:	fb2e c505 	smlad	r5, lr, r5, ip
 80210de:	fb2e 7e0b 	smlad	lr, lr, fp, r7
 80210e2:	6a0f      	ldr	r7, [r1, #32]
 80210e4:	f8d4 b020 	ldr.w	fp, [r4, #32]
		ch_1_out_1 = __SMLAD(ksrc2_31[7], b1, ch_1_out_1);

		//------------------20
		b0 = arm_nn_read_q15x2_ia(&ip_b0);
		b1 = arm_nn_read_q15x2_ia(&ip_b1);
		ch_0_out_0 = __SMLAD(ksrc_31[8], b0, ch_0_out_0);
 80210e8:	f8d0 c020 	ldr.w	ip, [r0, #32]
 80210ec:	fb2c 3307 	smlad	r3, ip, r7, r3
 80210f0:	fb2c 6c0b 	smlad	ip, ip, fp, r6
		ch_0_out_1 = __SMLAD(ksrc_31[8], b1, ch_0_out_1);
		ch_1_out_0 = __SMLAD(ksrc2_31[8], b0, ch_1_out_0);
 80210f4:	f8d0 6056 	ldr.w	r6, [r0, #86]	@ 0x56
 80210f8:	fb26 5707 	smlad	r7, r6, r7, r5
 80210fc:	fb26 eb0b 	smlad	fp, r6, fp, lr
 8021100:	6a4d      	ldr	r5, [r1, #36]	@ 0x24
 8021102:	f8d4 e024 	ldr.w	lr, [r4, #36]	@ 0x24
		ch_1_out_1 = __SMLAD(ksrc2_31[8], b1, ch_1_out_1);

		b0 = arm_nn_read_q15x2_ia(&ip_b0);
		b1 = arm_nn_read_q15x2_ia(&ip_b1);

		ch_0_out_0 = __SMLAD(ksrc_31[9], b0, ch_0_out_0);
 8021106:	6a46      	ldr	r6, [r0, #36]	@ 0x24
 8021108:	fb26 3305 	smlad	r3, r6, r5, r3
 802110c:	fb26 c60e 	smlad	r6, r6, lr, ip
		ch_0_out_1 = __SMLAD(ksrc_31[9], b1, ch_0_out_1);
		ch_1_out_0 = __SMLAD(ksrc2_31[9], b0, ch_1_out_0);
 8021110:	f8d0 c05a 	ldr.w	ip, [r0, #90]	@ 0x5a
 8021114:	fb2c 7505 	smlad	r5, ip, r5, r7
 8021118:	fb2c bc0e 	smlad	ip, ip, lr, fp
 802111c:	6a8f      	ldr	r7, [r1, #40]	@ 0x28
 802111e:	f8d4 b028 	ldr.w	fp, [r4, #40]	@ 0x28
		ch_1_out_1 = __SMLAD(ksrc2_31[9], b1, ch_1_out_1);

		//------------------24
		b0 = arm_nn_read_q15x2_ia(&ip_b0);
		b1 = arm_nn_read_q15x2_ia(&ip_b1);
		ch_0_out_0 = __SMLAD(ksrc_31[10], b0, ch_0_out_0);
 8021122:	f8d0 e028 	ldr.w	lr, [r0, #40]	@ 0x28
 8021126:	fb2e 3307 	smlad	r3, lr, r7, r3
 802112a:	fb2e 6e0b 	smlad	lr, lr, fp, r6
		ch_0_out_1 = __SMLAD(ksrc_31[10], b1, ch_0_out_1);
		ch_1_out_0 = __SMLAD(ksrc2_31[10], b0, ch_1_out_0);
 802112e:	f8d0 605e 	ldr.w	r6, [r0, #94]	@ 0x5e
 8021132:	fb26 5707 	smlad	r7, r6, r7, r5
 8021136:	fb26 cb0b 	smlad	fp, r6, fp, ip
 802113a:	6acd      	ldr	r5, [r1, #44]	@ 0x2c
 802113c:	f8d4 c02c 	ldr.w	ip, [r4, #44]	@ 0x2c
		ch_1_out_1 = __SMLAD(ksrc2_31[10], b1, ch_1_out_1);

		b0 = arm_nn_read_q15x2_ia(&ip_b0);
		b1 = arm_nn_read_q15x2_ia(&ip_b1);

		ch_0_out_0 = __SMLAD(ksrc_31[11], b0, ch_0_out_0);
 8021140:	6ac6      	ldr	r6, [r0, #44]	@ 0x2c
 8021142:	fb26 3305 	smlad	r3, r6, r5, r3
 8021146:	fb26 e60c 	smlad	r6, r6, ip, lr
		ch_0_out_1 = __SMLAD(ksrc_31[11], b1, ch_0_out_1);
		ch_1_out_0 = __SMLAD(ksrc2_31[11], b0, ch_1_out_0);
 802114a:	f8d0 e062 	ldr.w	lr, [r0, #98]	@ 0x62
 802114e:	fb2e 7505 	smlad	r5, lr, r5, r7
 8021152:	fb2e be0c 	smlad	lr, lr, ip, fp
 8021156:	6b0f      	ldr	r7, [r1, #48]	@ 0x30
 8021158:	f8d4 b030 	ldr.w	fp, [r4, #48]	@ 0x30
		ch_1_out_1 = __SMLAD(ksrc2_31[11], b1, ch_1_out_1);

		//------------------25,26,27
		b0 = arm_nn_read_q15x2_ia(&ip_b0);
		b1 = arm_nn_read_q15x2_ia(&ip_b1);
		ch_0_out_0 = __SMLAD(ksrc_31[12], b0, ch_0_out_0);
 802115c:	f8d0 c030 	ldr.w	ip, [r0, #48]	@ 0x30
 8021160:	fb2c 3307 	smlad	r3, ip, r7, r3
 8021164:	fb2c 6c0b 	smlad	ip, ip, fp, r6
		ch_0_out_1 = __SMLAD(ksrc_31[12], b1, ch_0_out_1);
		ch_1_out_0 = __SMLAD(ksrc2_31[12], b0, ch_1_out_0);
 8021168:	f8d0 6066 	ldr.w	r6, [r0, #102]	@ 0x66
 802116c:	fb26 5707 	smlad	r7, r6, r7, r5
 8021170:	fb26 e60b 	smlad	r6, r6, fp, lr
		ch_1_out_1 = __SMLAD(ksrc2_31[12], b1, ch_1_out_1);
		q15_t _b0 = *ip_b0++;
 8021174:	f9b1 5034 	ldrsh.w	r5, [r1, #52]	@ 0x34
		q15_t _b1 = *ip_b1++;
 8021178:	f9b4 4034 	ldrsh.w	r4, [r4, #52]	@ 0x34

		ch_0_out_0 += ksrc[26] * _b0;
 802117c:	f9b0 e034 	ldrsh.w	lr, [r0, #52]	@ 0x34
 8021180:	fb05 330e 	mla	r3, r5, lr, r3
		ch_0_out_1 += ksrc[26] * _b1;
 8021184:	fb04 cc0e 	mla	ip, r4, lr, ip
		ch_1_out_0 += ksrc2[26] * _b0;
 8021188:	f9b0 e06a 	ldrsh.w	lr, [r0, #106]	@ 0x6a
 802118c:	fb0e 7705 	mla	r7, lr, r5, r7
		ch_1_out_1 += ksrc2[26] * _b1;
 8021190:	fb0e 6604 	mla	r6, lr, r4, r6

		ch_0_out_0 = (q31_t) ((float) ch_0_out_0 * scale_0);
 8021194:	ee07 3a90 	vmov	s15, r3
 8021198:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802119c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80211a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80211a4:	ee17 3a90 	vmov	r3, s15
		ch_0_out_0 += out_offset;
 80211a8:	4453      	add	r3, sl
		ch_0_out_0 = MAX(ch_0_out_0, activation_min);
 80211aa:	454b      	cmp	r3, r9
 80211ac:	bfb8      	it	lt
 80211ae:	464b      	movlt	r3, r9
		ch_0_out_0 = MIN(ch_0_out_0, activation_max);
 80211b0:	4543      	cmp	r3, r8
 80211b2:	bfa8      	it	ge
 80211b4:	4643      	movge	r3, r8
		*out_0++ = (q7_t) ch_0_out_0;
 80211b6:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 80211b8:	f804 3b02 	strb.w	r3, [r4], #2

		ch_0_out_1 = (q31_t) ((float) ch_0_out_1 * scale_0);
 80211bc:	ee07 ca90 	vmov	s15, ip
 80211c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80211c4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80211c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80211cc:	ee17 3a90 	vmov	r3, s15
		ch_0_out_1 += out_offset;
 80211d0:	4453      	add	r3, sl
		ch_0_out_1 = MAX(ch_0_out_1, activation_min);
 80211d2:	454b      	cmp	r3, r9
 80211d4:	bfb8      	it	lt
 80211d6:	464b      	movlt	r3, r9
		ch_0_out_1 = MIN(ch_0_out_1, activation_max);
 80211d8:	4543      	cmp	r3, r8
 80211da:	bfa8      	it	ge
 80211dc:	4643      	movge	r3, r8
		*out_1++ = (q7_t) ch_0_out_1;
 80211de:	f8dd c00c 	ldr.w	ip, [sp, #12]
 80211e2:	4665      	mov	r5, ip
 80211e4:	f805 3b02 	strb.w	r3, [r5], #2

		ch_1_out_0 = (q31_t) ((float) ch_1_out_0 * scale_1);
 80211e8:	ee07 7a90 	vmov	s15, r7
 80211ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80211f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80211f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80211f8:	ee17 3a90 	vmov	r3, s15
		ch_1_out_0 += out_offset;
 80211fc:	4453      	add	r3, sl
		ch_1_out_0 = MAX(ch_1_out_0, activation_min);
 80211fe:	454b      	cmp	r3, r9
 8021200:	bfb8      	it	lt
 8021202:	464b      	movlt	r3, r9
		ch_1_out_0 = MIN(ch_1_out_0, activation_max);
 8021204:	4543      	cmp	r3, r8
 8021206:	bfa8      	it	ge
 8021208:	4643      	movge	r3, r8
		*out_0++ = (q7_t) ch_1_out_0;
 802120a:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 802120c:	707b      	strb	r3, [r7, #1]

		ch_1_out_1 = (q31_t) ((float) ch_1_out_1 * scale_1);
 802120e:	ee07 6a90 	vmov	s15, r6
 8021212:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8021216:	ee67 7a87 	vmul.f32	s15, s15, s14
 802121a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 802121e:	ee17 3a90 	vmov	r3, s15
		ch_1_out_1 += out_offset;
 8021222:	4453      	add	r3, sl
		ch_1_out_1 = MAX(ch_1_out_1, activation_min);
 8021224:	454b      	cmp	r3, r9
 8021226:	bfb8      	it	lt
 8021228:	464b      	movlt	r3, r9
		ch_1_out_1 = MIN(ch_1_out_1, activation_max);
 802122a:	4543      	cmp	r3, r8
 802122c:	bfa8      	it	ge
 802122e:	4643      	movge	r3, r8
		*out_1++ = (q7_t) ch_1_out_1;
 8021230:	f88c 3001 	strb.w	r3, [ip, #1]
		scales += 2;
 8021234:	9b01      	ldr	r3, [sp, #4]
 8021236:	3308      	adds	r3, #8
 8021238:	9301      	str	r3, [sp, #4]

		/* skip row */
		ksrc += 54;
 802123a:	306c      	adds	r0, #108	@ 0x6c
		row_count--;
 802123c:	9b02      	ldr	r3, [sp, #8]
 802123e:	3b01      	subs	r3, #1
 8021240:	b29b      	uxth	r3, r3
 8021242:	9302      	str	r3, [sp, #8]
		*out_1++ = (q7_t) ch_1_out_1;
 8021244:	9503      	str	r5, [sp, #12]
		*out_0++ = (q7_t) ch_1_out_0;
 8021246:	9415      	str	r4, [sp, #84]	@ 0x54
	while (row_count) {
 8021248:	9b02      	ldr	r3, [sp, #8]
 802124a:	2b00      	cmp	r3, #0
 802124c:	f47f aec6 	bne.w	8020fdc <mat_mult_kernel3_input3_s8_s16_fpreq+0x2e>

	out_0 += output_ch;

	/* return the new output pointer with offset */
	return out_0;
}
 8021250:	9c05      	ldr	r4, [sp, #20]
 8021252:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8021254:	1918      	adds	r0, r3, r4
 8021256:	b007      	add	sp, #28
 8021258:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802125c <avg_pooling>:

tinyengine_status avg_pooling(const q7_t* input, const uint16_t input_h, const uint16_t input_w,
		const uint16_t input_c,	const uint16_t sample_h, const uint16_t sample_w,
		const uint16_t output_h, const uint16_t output_w, const int32_t out_activation_min,
        const int32_t out_activation_max, q7_t* output)
{
 802125c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021260:	b085      	sub	sp, #20
 8021262:	4606      	mov	r6, r0
 8021264:	4617      	mov	r7, r2
 8021266:	461d      	mov	r5, r3
 8021268:	f8bd 9038 	ldrh.w	r9, [sp, #56]	@ 0x38
 802126c:	f8bd 003c 	ldrh.w	r0, [sp, #60]	@ 0x3c
 8021270:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 8021274:	f8bd c044 	ldrh.w	ip, [sp, #68]	@ 0x44
	int h, w, c;
	int sh, sw;
	const int divider_half = ((sample_h * sample_w) / 2);
 8021278:	fb00 f309 	mul.w	r3, r0, r9
 802127c:	4619      	mov	r1, r3
 802127e:	2b00      	cmp	r3, #0
 8021280:	db05      	blt.n	802128e <avg_pooling+0x32>
 8021282:	ea4f 0b61 	mov.w	fp, r1, asr #1
	for(c = 0; c < input_c; c++){
 8021286:	2400      	movs	r4, #0
 8021288:	469e      	mov	lr, r3
 802128a:	465b      	mov	r3, fp
 802128c:	e043      	b.n	8021316 <avg_pooling+0xba>
	const int divider_half = ((sample_h * sample_w) / 2);
 802128e:	1c59      	adds	r1, r3, #1
 8021290:	e7f7      	b.n	8021282 <avg_pooling+0x26>
				int avg = 0;

				for(sh = 0; sh < sample_h; sh++){
					int height = sh + h * sample_h;
					for(sw = 0; sw < sample_w; sw++){
						int width = sw + w * sample_w;
 8021292:	fb08 2300 	mla	r3, r8, r0, r2
						avg += input[(width + height * input_w) * input_c + c];
 8021296:	fb0e 3307 	mla	r3, lr, r7, r3
 802129a:	fb05 4303 	mla	r3, r5, r3, r4
 802129e:	56f3      	ldrsb	r3, [r6, r3]
 80212a0:	4419      	add	r1, r3
					for(sw = 0; sw < sample_w; sw++){
 80212a2:	3201      	adds	r2, #1
 80212a4:	4290      	cmp	r0, r2
 80212a6:	dcf4      	bgt.n	8021292 <avg_pooling+0x36>
				for(sh = 0; sh < sample_h; sh++){
 80212a8:	f10a 0a01 	add.w	sl, sl, #1
 80212ac:	45d1      	cmp	r9, sl
 80212ae:	dd03      	ble.n	80212b8 <avg_pooling+0x5c>
					int height = sh + h * sample_h;
 80212b0:	fb0b ae09 	mla	lr, fp, r9, sl
					for(sw = 0; sw < sample_w; sw++){
 80212b4:	2200      	movs	r2, #0
 80212b6:	e7f5      	b.n	80212a4 <avg_pooling+0x48>
					}
				}

				// for rounded div
				if (avg > 0)
 80212b8:	2900      	cmp	r1, #0
 80212ba:	dd19      	ble.n	80212f0 <avg_pooling+0x94>
					avg += divider_half;
 80212bc:	9b02      	ldr	r3, [sp, #8]
 80212be:	18ca      	adds	r2, r1, r3
				else
					avg -= divider_half;

				int out = avg / (sample_h * sample_w);
 80212c0:	9b01      	ldr	r3, [sp, #4]
 80212c2:	fb92 f2f3 	sdiv	r2, r2, r3
				out = TN_MAX(out, out_activation_min);
 80212c6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80212c8:	429a      	cmp	r2, r3
 80212ca:	bfb8      	it	lt
 80212cc:	461a      	movlt	r2, r3
				out = TN_MIN(out, out_activation_max);
 80212ce:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80212d0:	429a      	cmp	r2, r3
 80212d2:	bfa8      	it	ge
 80212d4:	461a      	movge	r2, r3
				output[(w + h * output_w) * input_c + c] = out;
 80212d6:	fb0b 810c 	mla	r1, fp, ip, r8
 80212da:	fb05 4101 	mla	r1, r5, r1, r4
 80212de:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80212e0:	545a      	strb	r2, [r3, r1]
			for(w = 0; w < output_w; w++){
 80212e2:	f108 0801 	add.w	r8, r8, #1
 80212e6:	45c4      	cmp	ip, r8
 80212e8:	dd05      	ble.n	80212f6 <avg_pooling+0x9a>
				int avg = 0;
 80212ea:	2100      	movs	r1, #0
				for(sh = 0; sh < sample_h; sh++){
 80212ec:	468a      	mov	sl, r1
 80212ee:	e7dd      	b.n	80212ac <avg_pooling+0x50>
					avg -= divider_half;
 80212f0:	9b02      	ldr	r3, [sp, #8]
 80212f2:	1aca      	subs	r2, r1, r3
 80212f4:	e7e4      	b.n	80212c0 <avg_pooling+0x64>
		for(h = 0; h < output_h; h++){
 80212f6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80212fa:	9b02      	ldr	r3, [sp, #8]
 80212fc:	9a03      	ldr	r2, [sp, #12]
 80212fe:	f10b 0b01 	add.w	fp, fp, #1
 8021302:	455a      	cmp	r2, fp
 8021304:	dd06      	ble.n	8021314 <avg_pooling+0xb8>
			for(w = 0; w < output_w; w++){
 8021306:	f04f 0800 	mov.w	r8, #0
 802130a:	f8cd e004 	str.w	lr, [sp, #4]
 802130e:	9302      	str	r3, [sp, #8]
 8021310:	9203      	str	r2, [sp, #12]
 8021312:	e7e8      	b.n	80212e6 <avg_pooling+0x8a>
	for(c = 0; c < input_c; c++){
 8021314:	3401      	adds	r4, #1
 8021316:	42a5      	cmp	r5, r4
 8021318:	dd02      	ble.n	8021320 <avg_pooling+0xc4>
		for(h = 0; h < output_h; h++){
 802131a:	f04f 0b00 	mov.w	fp, #0
 802131e:	e7f0      	b.n	8021302 <avg_pooling+0xa6>
			}
		}
	}
}
 8021320:	b005      	add	sp, #20
 8021322:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08021326 <ITM_SendChar>:
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8021326:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 802132a:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 802132e:	f013 0f01 	tst.w	r3, #1
 8021332:	d011      	beq.n	8021358 <ITM_SendChar+0x32>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8021334:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8021338:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 802133c:	f013 0f01 	tst.w	r3, #1
 8021340:	d101      	bne.n	8021346 <ITM_SendChar+0x20>
 8021342:	4770      	bx	lr
  {
    while (ITM->PORT[0U].u32 == 0UL)
    {
      __NOP();
 8021344:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8021346:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 802134a:	681b      	ldr	r3, [r3, #0]
 802134c:	2b00      	cmp	r3, #0
 802134e:	d0f9      	beq.n	8021344 <ITM_SendChar+0x1e>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8021350:	b2c3      	uxtb	r3, r0
 8021352:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 8021356:	7013      	strb	r3, [r2, #0]
  }
  return (ch);
}
 8021358:	4770      	bx	lr

0802135a <__io_putchar>:
  
#include "stm32746g_discovery.h"

volatile int32_t ITM_RxBuffer;

int __io_putchar(int ch) { return ITM_SendChar(ch); }
 802135a:	b508      	push	{r3, lr}
 802135c:	f7ff ffe3 	bl	8021326 <ITM_SendChar>
 8021360:	bd08      	pop	{r3, pc}
	...

08021364 <__io_getchar>:
 */
__STATIC_INLINE int32_t ITM_ReceiveChar (void)
{
  int32_t ch = -1;                           /* no character available */

  if (ITM_RxBuffer != ITM_RXBUFFER_EMPTY)
 8021364:	4b06      	ldr	r3, [pc, #24]	@ (8021380 <__io_getchar+0x1c>)
 8021366:	681a      	ldr	r2, [r3, #0]
 8021368:	4b06      	ldr	r3, [pc, #24]	@ (8021384 <__io_getchar+0x20>)
 802136a:	429a      	cmp	r2, r3
 802136c:	d004      	beq.n	8021378 <__io_getchar+0x14>
  {
    ch = ITM_RxBuffer;
 802136e:	4b04      	ldr	r3, [pc, #16]	@ (8021380 <__io_getchar+0x1c>)
 8021370:	6818      	ldr	r0, [r3, #0]
    ITM_RxBuffer = ITM_RXBUFFER_EMPTY;       /* ready for next character */
 8021372:	4a04      	ldr	r2, [pc, #16]	@ (8021384 <__io_getchar+0x20>)
 8021374:	601a      	str	r2, [r3, #0]
 8021376:	4770      	bx	lr
  int32_t ch = -1;                           /* no character available */
 8021378:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff

int __io_getchar(void) { return ITM_ReceiveChar(); }
 802137c:	4770      	bx	lr
 802137e:	bf00      	nop
 8021380:	2003ccb8 	.word	0x2003ccb8
 8021384:	5aa55aa5 	.word	0x5aa55aa5

08021388 <_write>:

extern int errno;
extern int __io_putchar(int ch) __attribute__((weak));
extern int __io_getchar(void) __attribute__((weak));

int _write(int fd, const void *buffer, unsigned int count) {
 8021388:	b570      	push	{r4, r5, r6, lr}
 802138a:	460e      	mov	r6, r1
 802138c:	4615      	mov	r5, r2
  unsigned int i;

  for (i = 0; i < count; i++) {
 802138e:	2400      	movs	r4, #0
 8021390:	e003      	b.n	802139a <_write+0x12>
    __io_putchar(((char *)buffer)[i]);
 8021392:	5d30      	ldrb	r0, [r6, r4]
 8021394:	f7ff ffe1 	bl	802135a <__io_putchar>
  for (i = 0; i < count; i++) {
 8021398:	3401      	adds	r4, #1
 802139a:	42ac      	cmp	r4, r5
 802139c:	d3f9      	bcc.n	8021392 <_write+0xa>
  }

  return count;
}
 802139e:	4628      	mov	r0, r5
 80213a0:	bd70      	pop	{r4, r5, r6, pc}

080213a2 <_read>:

int _read(int fd, void *buffer, unsigned int count) {
 80213a2:	b570      	push	{r4, r5, r6, lr}
 80213a4:	460e      	mov	r6, r1
 80213a6:	4615      	mov	r5, r2
  unsigned int i;

  for (i = 0; i < count; i++) {
 80213a8:	2400      	movs	r4, #0
 80213aa:	e003      	b.n	80213b4 <_read+0x12>
    ((char *)buffer)[i] = __io_getchar();
 80213ac:	f7ff ffda 	bl	8021364 <__io_getchar>
 80213b0:	5530      	strb	r0, [r6, r4]
  for (i = 0; i < count; i++) {
 80213b2:	3401      	adds	r4, #1
 80213b4:	42ac      	cmp	r4, r5
 80213b6:	d3f9      	bcc.n	80213ac <_read+0xa>
  }

  return count;
}
 80213b8:	4628      	mov	r0, r5
 80213ba:	bd70      	pop	{r4, r5, r6, pc}

080213bc <_close>:

int _close(int fd) { return -1; }
 80213bc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80213c0:	4770      	bx	lr

080213c2 <_fstat>:

int _fstat(int fd, void *buffer) { return -1; }
 80213c2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80213c6:	4770      	bx	lr

080213c8 <_isatty>:

int _isatty(int fd) { return -1; }
 80213c8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80213cc:	4770      	bx	lr

080213ce <_lseek>:

long _lseek(int fd, long offset, int origin) { return -1; }
 80213ce:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80213d2:	4770      	bx	lr

080213d4 <_exit>:

void _exit(int status) {}
 80213d4:	4770      	bx	lr
	...

080213d8 <_ZdaPv>:
 80213d8:	f000 b802 	b.w	80213e0 <_ZdlPv>

080213dc <_Znaj>:
 80213dc:	f000 b802 	b.w	80213e4 <_Znwj>

080213e0 <_ZdlPv>:
 80213e0:	f001 bcc6 	b.w	8022d70 <free>

080213e4 <_Znwj>:
 80213e4:	2801      	cmp	r0, #1
 80213e6:	bf38      	it	cc
 80213e8:	2001      	movcc	r0, #1
 80213ea:	b510      	push	{r4, lr}
 80213ec:	4604      	mov	r4, r0
 80213ee:	4620      	mov	r0, r4
 80213f0:	f001 fcb6 	bl	8022d60 <malloc>
 80213f4:	b100      	cbz	r0, 80213f8 <_Znwj+0x14>
 80213f6:	bd10      	pop	{r4, pc}
 80213f8:	f000 f9ae 	bl	8021758 <_ZSt15get_new_handlerv>
 80213fc:	b108      	cbz	r0, 8021402 <_Znwj+0x1e>
 80213fe:	4780      	blx	r0
 8021400:	e7f5      	b.n	80213ee <_Znwj+0xa>
 8021402:	2004      	movs	r0, #4
 8021404:	f000 f896 	bl	8021534 <__cxa_allocate_exception>
 8021408:	4b02      	ldr	r3, [pc, #8]	@ (8021414 <_Znwj+0x30>)
 802140a:	4a03      	ldr	r2, [pc, #12]	@ (8021418 <_Znwj+0x34>)
 802140c:	4903      	ldr	r1, [pc, #12]	@ (802141c <_Znwj+0x38>)
 802140e:	6003      	str	r3, [r0, #0]
 8021410:	f000 f950 	bl	80216b4 <__cxa_throw>
 8021414:	080aee80 	.word	0x080aee80
 8021418:	08021429 	.word	0x08021429
 802141c:	080aee6c 	.word	0x080aee6c

08021420 <_ZNKSt9bad_alloc4whatEv>:
 8021420:	4800      	ldr	r0, [pc, #0]	@ (8021424 <_ZNKSt9bad_alloc4whatEv+0x4>)
 8021422:	4770      	bx	lr
 8021424:	080aee4c 	.word	0x080aee4c

08021428 <_ZNSt9bad_allocD1Ev>:
 8021428:	b510      	push	{r4, lr}
 802142a:	4b03      	ldr	r3, [pc, #12]	@ (8021438 <_ZNSt9bad_allocD1Ev+0x10>)
 802142c:	6003      	str	r3, [r0, #0]
 802142e:	4604      	mov	r4, r0
 8021430:	f000 f8bc 	bl	80215ac <_ZNSt9exceptionD1Ev>
 8021434:	4620      	mov	r0, r4
 8021436:	bd10      	pop	{r4, pc}
 8021438:	080aee80 	.word	0x080aee80

0802143c <_ZNSt9bad_allocD0Ev>:
 802143c:	b510      	push	{r4, lr}
 802143e:	4b05      	ldr	r3, [pc, #20]	@ (8021454 <_ZNSt9bad_allocD0Ev+0x18>)
 8021440:	6003      	str	r3, [r0, #0]
 8021442:	4604      	mov	r4, r0
 8021444:	f000 f8b2 	bl	80215ac <_ZNSt9exceptionD1Ev>
 8021448:	4620      	mov	r0, r4
 802144a:	2104      	movs	r1, #4
 802144c:	f000 f804 	bl	8021458 <_ZdlPvj>
 8021450:	4620      	mov	r0, r4
 8021452:	bd10      	pop	{r4, pc}
 8021454:	080aee80 	.word	0x080aee80

08021458 <_ZdlPvj>:
 8021458:	f7ff bfc2 	b.w	80213e0 <_ZdlPv>

0802145c <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0>:
 802145c:	491e      	ldr	r1, [pc, #120]	@ (80214d8 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x7c>)
 802145e:	684b      	ldr	r3, [r1, #4]
 8021460:	b530      	push	{r4, r5, lr}
 8021462:	f850 5c08 	ldr.w	r5, [r0, #-8]
 8021466:	f1a0 0408 	sub.w	r4, r0, #8
 802146a:	b32b      	cbz	r3, 80214b8 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x5c>
 802146c:	eb04 0e05 	add.w	lr, r4, r5
 8021470:	4573      	cmp	r3, lr
 8021472:	d821      	bhi.n	80214b8 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x5c>
 8021474:	685a      	ldr	r2, [r3, #4]
 8021476:	d026      	beq.n	80214c6 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x6a>
 8021478:	f101 0c04 	add.w	ip, r1, #4
 802147c:	b932      	cbnz	r2, 802148c <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x30>
 802147e:	e00e      	b.n	802149e <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x42>
 8021480:	6851      	ldr	r1, [r2, #4]
 8021482:	f103 0c04 	add.w	ip, r3, #4
 8021486:	4613      	mov	r3, r2
 8021488:	b139      	cbz	r1, 802149a <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x3e>
 802148a:	460a      	mov	r2, r1
 802148c:	4596      	cmp	lr, r2
 802148e:	d3f7      	bcc.n	8021480 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x24>
 8021490:	bf02      	ittt	eq
 8021492:	e9de 2100 	ldrdeq	r2, r1, [lr]
 8021496:	6059      	streq	r1, [r3, #4]
 8021498:	18ad      	addeq	r5, r5, r2
 802149a:	f8dc 3000 	ldr.w	r3, [ip]
 802149e:	681a      	ldr	r2, [r3, #0]
 80214a0:	1899      	adds	r1, r3, r2
 80214a2:	428c      	cmp	r4, r1
 80214a4:	d00c      	beq.n	80214c0 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x64>
 80214a6:	685b      	ldr	r3, [r3, #4]
 80214a8:	f840 3c04 	str.w	r3, [r0, #-4]
 80214ac:	f8dc 3000 	ldr.w	r3, [ip]
 80214b0:	f840 5c08 	str.w	r5, [r0, #-8]
 80214b4:	605c      	str	r4, [r3, #4]
 80214b6:	bd30      	pop	{r4, r5, pc}
 80214b8:	f840 3c04 	str.w	r3, [r0, #-4]
 80214bc:	604c      	str	r4, [r1, #4]
 80214be:	bd30      	pop	{r4, r5, pc}
 80214c0:	442a      	add	r2, r5
 80214c2:	601a      	str	r2, [r3, #0]
 80214c4:	bd30      	pop	{r4, r5, pc}
 80214c6:	681b      	ldr	r3, [r3, #0]
 80214c8:	f840 2c04 	str.w	r2, [r0, #-4]
 80214cc:	442b      	add	r3, r5
 80214ce:	f840 3c08 	str.w	r3, [r0, #-8]
 80214d2:	604c      	str	r4, [r1, #4]
 80214d4:	bd30      	pop	{r4, r5, pc}
 80214d6:	bf00      	nop
 80214d8:	2003ccbc 	.word	0x2003ccbc

080214dc <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0>:
 80214dc:	4914      	ldr	r1, [pc, #80]	@ (8021530 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0+0x54>)
 80214de:	f100 0308 	add.w	r3, r0, #8
 80214e2:	6848      	ldr	r0, [r1, #4]
 80214e4:	2b08      	cmp	r3, #8
 80214e6:	bf38      	it	cc
 80214e8:	2308      	movcc	r3, #8
 80214ea:	b1f8      	cbz	r0, 802152c <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0+0x50>
 80214ec:	3307      	adds	r3, #7
 80214ee:	f023 0307 	bic.w	r3, r3, #7
 80214f2:	3104      	adds	r1, #4
 80214f4:	e002      	b.n	80214fc <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0+0x20>
 80214f6:	1d01      	adds	r1, r0, #4
 80214f8:	6840      	ldr	r0, [r0, #4]
 80214fa:	b180      	cbz	r0, 802151e <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0+0x42>
 80214fc:	6802      	ldr	r2, [r0, #0]
 80214fe:	4293      	cmp	r3, r2
 8021500:	d8f9      	bhi.n	80214f6 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0+0x1a>
 8021502:	b430      	push	{r4, r5}
 8021504:	1ad4      	subs	r4, r2, r3
 8021506:	2c07      	cmp	r4, #7
 8021508:	6845      	ldr	r5, [r0, #4]
 802150a:	d909      	bls.n	8021520 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0+0x44>
 802150c:	18c2      	adds	r2, r0, r3
 802150e:	6055      	str	r5, [r2, #4]
 8021510:	50c4      	str	r4, [r0, r3]
 8021512:	6808      	ldr	r0, [r1, #0]
 8021514:	bc30      	pop	{r4, r5}
 8021516:	6003      	str	r3, [r0, #0]
 8021518:	3008      	adds	r0, #8
 802151a:	600a      	str	r2, [r1, #0]
 802151c:	4770      	bx	lr
 802151e:	4770      	bx	lr
 8021520:	6002      	str	r2, [r0, #0]
 8021522:	462a      	mov	r2, r5
 8021524:	3008      	adds	r0, #8
 8021526:	bc30      	pop	{r4, r5}
 8021528:	600a      	str	r2, [r1, #0]
 802152a:	4770      	bx	lr
 802152c:	4770      	bx	lr
 802152e:	bf00      	nop
 8021530:	2003ccbc 	.word	0x2003ccbc

08021534 <__cxa_allocate_exception>:
 8021534:	b510      	push	{r4, lr}
 8021536:	f100 0480 	add.w	r4, r0, #128	@ 0x80
 802153a:	4620      	mov	r0, r4
 802153c:	f001 fc10 	bl	8022d60 <malloc>
 8021540:	4603      	mov	r3, r0
 8021542:	b130      	cbz	r0, 8021552 <__cxa_allocate_exception+0x1e>
 8021544:	2280      	movs	r2, #128	@ 0x80
 8021546:	2100      	movs	r1, #0
 8021548:	4618      	mov	r0, r3
 802154a:	f002 fbb7 	bl	8023cbc <memset>
 802154e:	3080      	adds	r0, #128	@ 0x80
 8021550:	bd10      	pop	{r4, pc}
 8021552:	4620      	mov	r0, r4
 8021554:	f7ff ffc2 	bl	80214dc <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0>
 8021558:	4603      	mov	r3, r0
 802155a:	2800      	cmp	r0, #0
 802155c:	d1f2      	bne.n	8021544 <__cxa_allocate_exception+0x10>
 802155e:	f000 f83d 	bl	80215dc <_ZSt9terminatev>
 8021562:	bf00      	nop

08021564 <__cxa_free_exception>:
 8021564:	4a06      	ldr	r2, [pc, #24]	@ (8021580 <__cxa_free_exception+0x1c>)
 8021566:	6893      	ldr	r3, [r2, #8]
 8021568:	3880      	subs	r0, #128	@ 0x80
 802156a:	4298      	cmp	r0, r3
 802156c:	d905      	bls.n	802157a <__cxa_free_exception+0x16>
 802156e:	68d2      	ldr	r2, [r2, #12]
 8021570:	4413      	add	r3, r2
 8021572:	4298      	cmp	r0, r3
 8021574:	d201      	bcs.n	802157a <__cxa_free_exception+0x16>
 8021576:	f7ff bf71 	b.w	802145c <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0>
 802157a:	f001 bbf9 	b.w	8022d70 <free>
 802157e:	bf00      	nop
 8021580:	2003ccbc 	.word	0x2003ccbc

08021584 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv>:
 8021584:	b538      	push	{r3, r4, r5, lr}
 8021586:	4c08      	ldr	r4, [pc, #32]	@ (80215a8 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x24>)
 8021588:	f44f 651e 	mov.w	r5, #2528	@ 0x9e0
 802158c:	4628      	mov	r0, r5
 802158e:	60e5      	str	r5, [r4, #12]
 8021590:	f001 fbe6 	bl	8022d60 <malloc>
 8021594:	60a0      	str	r0, [r4, #8]
 8021596:	b120      	cbz	r0, 80215a2 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x1e>
 8021598:	2300      	movs	r3, #0
 802159a:	e9c0 5300 	strd	r5, r3, [r0]
 802159e:	6060      	str	r0, [r4, #4]
 80215a0:	bd38      	pop	{r3, r4, r5, pc}
 80215a2:	60e0      	str	r0, [r4, #12]
 80215a4:	e7fb      	b.n	802159e <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x1a>
 80215a6:	bf00      	nop
 80215a8:	2003ccbc 	.word	0x2003ccbc

080215ac <_ZNSt9exceptionD1Ev>:
 80215ac:	4770      	bx	lr
 80215ae:	bf00      	nop

080215b0 <_ZNSt13bad_exceptionD1Ev>:
 80215b0:	4770      	bx	lr
 80215b2:	bf00      	nop

080215b4 <_ZGTtNKSt13bad_exception4whatEv>:
 80215b4:	4800      	ldr	r0, [pc, #0]	@ (80215b8 <_ZGTtNKSt13bad_exception4whatEv+0x4>)
 80215b6:	4770      	bx	lr
 80215b8:	080aee8c 	.word	0x080aee8c

080215bc <_ZNSt13bad_exceptionD0Ev>:
 80215bc:	b510      	push	{r4, lr}
 80215be:	2104      	movs	r1, #4
 80215c0:	4604      	mov	r4, r0
 80215c2:	f7ff ff49 	bl	8021458 <_ZdlPvj>
 80215c6:	4620      	mov	r0, r4
 80215c8:	bd10      	pop	{r4, pc}
 80215ca:	bf00      	nop

080215cc <_ZN10__cxxabiv111__terminateEPFvvE>:
 80215cc:	b508      	push	{r3, lr}
 80215ce:	4780      	blx	r0
 80215d0:	f001 fbbe 	bl	8022d50 <abort>
 80215d4:	f000 fb38 	bl	8021c48 <__cxa_begin_catch>
 80215d8:	f001 fbba 	bl	8022d50 <abort>

080215dc <_ZSt9terminatev>:
 80215dc:	b508      	push	{r3, lr}
 80215de:	4b03      	ldr	r3, [pc, #12]	@ (80215ec <_ZSt9terminatev+0x10>)
 80215e0:	6818      	ldr	r0, [r3, #0]
 80215e2:	f3bf 8f5b 	dmb	ish
 80215e6:	f7ff fff1 	bl	80215cc <_ZN10__cxxabiv111__terminateEPFvvE>
 80215ea:	bf00      	nop
 80215ec:	2000842c 	.word	0x2000842c

080215f0 <_ZN10__cxxabiv112__unexpectedEPFvvE>:
 80215f0:	b508      	push	{r3, lr}
 80215f2:	4780      	blx	r0
 80215f4:	f7ff fff2 	bl	80215dc <_ZSt9terminatev>

080215f8 <_ZSt10unexpectedv>:
 80215f8:	b508      	push	{r3, lr}
 80215fa:	4b03      	ldr	r3, [pc, #12]	@ (8021608 <_ZSt10unexpectedv+0x10>)
 80215fc:	6818      	ldr	r0, [r3, #0]
 80215fe:	f3bf 8f5b 	dmb	ish
 8021602:	f7ff fff5 	bl	80215f0 <_ZN10__cxxabiv112__unexpectedEPFvvE>
 8021606:	bf00      	nop
 8021608:	20008428 	.word	0x20008428

0802160c <_ZSt13get_terminatev>:
 802160c:	4b02      	ldr	r3, [pc, #8]	@ (8021618 <_ZSt13get_terminatev+0xc>)
 802160e:	6818      	ldr	r0, [r3, #0]
 8021610:	f3bf 8f5b 	dmb	ish
 8021614:	4770      	bx	lr
 8021616:	bf00      	nop
 8021618:	2000842c 	.word	0x2000842c

0802161c <_ZSt14get_unexpectedv>:
 802161c:	4b02      	ldr	r3, [pc, #8]	@ (8021628 <_ZSt14get_unexpectedv+0xc>)
 802161e:	6818      	ldr	r0, [r3, #0]
 8021620:	f3bf 8f5b 	dmb	ish
 8021624:	4770      	bx	lr
 8021626:	bf00      	nop
 8021628:	20008428 	.word	0x20008428

0802162c <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block>:
 802162c:	2801      	cmp	r0, #1
 802162e:	b510      	push	{r4, lr}
 8021630:	d81a      	bhi.n	8021668 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x3c>
 8021632:	f3bf 8f5b 	dmb	ish
 8021636:	f1a1 0328 	sub.w	r3, r1, #40	@ 0x28
 802163a:	e853 2f00 	ldrex	r2, [r3]
 802163e:	3a01      	subs	r2, #1
 8021640:	e843 2000 	strex	r0, r2, [r3]
 8021644:	2800      	cmp	r0, #0
 8021646:	d1f8      	bne.n	802163a <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0xe>
 8021648:	f3bf 8f5b 	dmb	ish
 802164c:	b95a      	cbnz	r2, 8021666 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x3a>
 802164e:	f851 3c1c 	ldr.w	r3, [r1, #-28]
 8021652:	f101 0458 	add.w	r4, r1, #88	@ 0x58
 8021656:	b10b      	cbz	r3, 802165c <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x30>
 8021658:	4620      	mov	r0, r4
 802165a:	4798      	blx	r3
 802165c:	4620      	mov	r0, r4
 802165e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021662:	f7ff bf7f 	b.w	8021564 <__cxa_free_exception>
 8021666:	bd10      	pop	{r4, pc}
 8021668:	f851 0c14 	ldr.w	r0, [r1, #-20]
 802166c:	f7ff ffae 	bl	80215cc <_ZN10__cxxabiv111__terminateEPFvvE>

08021670 <__cxa_init_primary_exception>:
 8021670:	2300      	movs	r3, #0
 8021672:	b510      	push	{r4, lr}
 8021674:	e940 121e 	strd	r1, r2, [r0, #-120]	@ 0x78
 8021678:	f840 3c80 	str.w	r3, [r0, #-128]
 802167c:	4604      	mov	r4, r0
 802167e:	f7ff ffcd 	bl	802161c <_ZSt14get_unexpectedv>
 8021682:	f844 0c70 	str.w	r0, [r4, #-112]
 8021686:	f7ff ffc1 	bl	802160c <_ZSt13get_terminatev>
 802168a:	4907      	ldr	r1, [pc, #28]	@ (80216a8 <__cxa_init_primary_exception+0x38>)
 802168c:	4a07      	ldr	r2, [pc, #28]	@ (80216ac <__cxa_init_primary_exception+0x3c>)
 802168e:	4b08      	ldr	r3, [pc, #32]	@ (80216b0 <__cxa_init_primary_exception+0x40>)
 8021690:	f844 1c58 	str.w	r1, [r4, #-88]
 8021694:	f844 2c54 	str.w	r2, [r4, #-84]
 8021698:	f844 0c6c 	str.w	r0, [r4, #-108]
 802169c:	f844 3c50 	str.w	r3, [r4, #-80]
 80216a0:	f1a4 0080 	sub.w	r0, r4, #128	@ 0x80
 80216a4:	bd10      	pop	{r4, pc}
 80216a6:	bf00      	nop
 80216a8:	43554e47 	.word	0x43554e47
 80216ac:	002b2b43 	.word	0x002b2b43
 80216b0:	0802162d 	.word	0x0802162d

080216b4 <__cxa_throw>:
 80216b4:	b570      	push	{r4, r5, r6, lr}
 80216b6:	4604      	mov	r4, r0
 80216b8:	460d      	mov	r5, r1
 80216ba:	4616      	mov	r6, r2
 80216bc:	f000 fb4e 	bl	8021d5c <__cxa_get_globals>
 80216c0:	6843      	ldr	r3, [r0, #4]
 80216c2:	3301      	adds	r3, #1
 80216c4:	4632      	mov	r2, r6
 80216c6:	4629      	mov	r1, r5
 80216c8:	6043      	str	r3, [r0, #4]
 80216ca:	4620      	mov	r0, r4
 80216cc:	f7ff ffd0 	bl	8021670 <__cxa_init_primary_exception>
 80216d0:	4604      	mov	r4, r0
 80216d2:	2301      	movs	r3, #1
 80216d4:	f844 3b28 	str.w	r3, [r4], #40
 80216d8:	4620      	mov	r0, r4
 80216da:	f7e6 f9b9 	bl	8007a50 <_Unwind_RaiseException>
 80216de:	4620      	mov	r0, r4
 80216e0:	f000 fab2 	bl	8021c48 <__cxa_begin_catch>
 80216e4:	f7ff ff7a 	bl	80215dc <_ZSt9terminatev>

080216e8 <__cxa_rethrow>:
 80216e8:	b510      	push	{r4, lr}
 80216ea:	f000 fb37 	bl	8021d5c <__cxa_get_globals>
 80216ee:	e9d0 4200 	ldrd	r4, r2, [r0]
 80216f2:	3201      	adds	r2, #1
 80216f4:	6042      	str	r2, [r0, #4]
 80216f6:	b164      	cbz	r4, 8021712 <__cxa_rethrow+0x2a>
 80216f8:	f894 2020 	ldrb.w	r2, [r4, #32]
 80216fc:	2a47      	cmp	r2, #71	@ 0x47
 80216fe:	d00a      	beq.n	8021716 <__cxa_rethrow+0x2e>
 8021700:	2200      	movs	r2, #0
 8021702:	6002      	str	r2, [r0, #0]
 8021704:	3420      	adds	r4, #32
 8021706:	4620      	mov	r0, r4
 8021708:	f7e6 f9c6 	bl	8007a98 <_Unwind_Resume_or_Rethrow>
 802170c:	4620      	mov	r0, r4
 802170e:	f000 fa9b 	bl	8021c48 <__cxa_begin_catch>
 8021712:	f7ff ff63 	bl	80215dc <_ZSt9terminatev>
 8021716:	f894 2021 	ldrb.w	r2, [r4, #33]	@ 0x21
 802171a:	2a4e      	cmp	r2, #78	@ 0x4e
 802171c:	d1f0      	bne.n	8021700 <__cxa_rethrow+0x18>
 802171e:	f894 2022 	ldrb.w	r2, [r4, #34]	@ 0x22
 8021722:	2a55      	cmp	r2, #85	@ 0x55
 8021724:	d1ec      	bne.n	8021700 <__cxa_rethrow+0x18>
 8021726:	f894 2023 	ldrb.w	r2, [r4, #35]	@ 0x23
 802172a:	2a43      	cmp	r2, #67	@ 0x43
 802172c:	d1e8      	bne.n	8021700 <__cxa_rethrow+0x18>
 802172e:	f894 2024 	ldrb.w	r2, [r4, #36]	@ 0x24
 8021732:	2a43      	cmp	r2, #67	@ 0x43
 8021734:	d1e4      	bne.n	8021700 <__cxa_rethrow+0x18>
 8021736:	f894 2025 	ldrb.w	r2, [r4, #37]	@ 0x25
 802173a:	2a2b      	cmp	r2, #43	@ 0x2b
 802173c:	d1e0      	bne.n	8021700 <__cxa_rethrow+0x18>
 802173e:	f894 2026 	ldrb.w	r2, [r4, #38]	@ 0x26
 8021742:	2a2b      	cmp	r2, #43	@ 0x2b
 8021744:	d1dc      	bne.n	8021700 <__cxa_rethrow+0x18>
 8021746:	f894 2027 	ldrb.w	r2, [r4, #39]	@ 0x27
 802174a:	2a01      	cmp	r2, #1
 802174c:	d8d8      	bhi.n	8021700 <__cxa_rethrow+0x18>
 802174e:	6962      	ldr	r2, [r4, #20]
 8021750:	4252      	negs	r2, r2
 8021752:	6162      	str	r2, [r4, #20]
 8021754:	e7d6      	b.n	8021704 <__cxa_rethrow+0x1c>
 8021756:	bf00      	nop

08021758 <_ZSt15get_new_handlerv>:
 8021758:	4b02      	ldr	r3, [pc, #8]	@ (8021764 <_ZSt15get_new_handlerv+0xc>)
 802175a:	6818      	ldr	r0, [r3, #0]
 802175c:	f3bf 8f5b 	dmb	ish
 8021760:	4770      	bx	lr
 8021762:	bf00      	nop
 8021764:	2003cccc 	.word	0x2003cccc

08021768 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 8021768:	b510      	push	{r4, lr}
 802176a:	4b03      	ldr	r3, [pc, #12]	@ (8021778 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
 802176c:	6003      	str	r3, [r0, #0]
 802176e:	4604      	mov	r4, r0
 8021770:	f000 f948 	bl	8021a04 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 8021774:	4620      	mov	r0, r4
 8021776:	bd10      	pop	{r4, pc}
 8021778:	080aef7c 	.word	0x080aef7c

0802177c <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 802177c:	b510      	push	{r4, lr}
 802177e:	4b05      	ldr	r3, [pc, #20]	@ (8021794 <_ZN10__cxxabiv120__si_class_type_infoD0Ev+0x18>)
 8021780:	6003      	str	r3, [r0, #0]
 8021782:	4604      	mov	r4, r0
 8021784:	f000 f93e 	bl	8021a04 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 8021788:	4620      	mov	r0, r4
 802178a:	210c      	movs	r1, #12
 802178c:	f7ff fe64 	bl	8021458 <_ZdlPvj>
 8021790:	4620      	mov	r0, r4
 8021792:	bd10      	pop	{r4, pc}
 8021794:	080aef7c 	.word	0x080aef7c

08021798 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 8021798:	b570      	push	{r4, r5, r6, lr}
 802179a:	b082      	sub	sp, #8
 802179c:	4604      	mov	r4, r0
 802179e:	9e06      	ldr	r6, [sp, #24]
 80217a0:	4296      	cmp	r6, r2
 80217a2:	460d      	mov	r5, r1
 80217a4:	d009      	beq.n	80217ba <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x22>
 80217a6:	68a0      	ldr	r0, [r4, #8]
 80217a8:	6804      	ldr	r4, [r0, #0]
 80217aa:	9606      	str	r6, [sp, #24]
 80217ac:	6a24      	ldr	r4, [r4, #32]
 80217ae:	4629      	mov	r1, r5
 80217b0:	46a4      	mov	ip, r4
 80217b2:	b002      	add	sp, #8
 80217b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80217b8:	4760      	bx	ip
 80217ba:	4619      	mov	r1, r3
 80217bc:	9201      	str	r2, [sp, #4]
 80217be:	9300      	str	r3, [sp, #0]
 80217c0:	f000 f864 	bl	802188c <_ZNKSt9type_info7__equalERKS_>
 80217c4:	e9dd 3200 	ldrd	r3, r2, [sp]
 80217c8:	2800      	cmp	r0, #0
 80217ca:	d0ec      	beq.n	80217a6 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
 80217cc:	2006      	movs	r0, #6
 80217ce:	b002      	add	sp, #8
 80217d0:	bd70      	pop	{r4, r5, r6, pc}
 80217d2:	bf00      	nop

080217d4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 80217d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80217d8:	460d      	mov	r5, r1
 80217da:	b081      	sub	sp, #4
 80217dc:	4619      	mov	r1, r3
 80217de:	e9dd 8b0a 	ldrd	r8, fp, [sp, #40]	@ 0x28
 80217e2:	e9dd a90c 	ldrd	sl, r9, [sp, #48]	@ 0x30
 80217e6:	461c      	mov	r4, r3
 80217e8:	4607      	mov	r7, r0
 80217ea:	4616      	mov	r6, r2
 80217ec:	f000 f84e 	bl	802188c <_ZNKSt9type_info7__equalERKS_>
 80217f0:	b980      	cbnz	r0, 8021814 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x40>
 80217f2:	45d0      	cmp	r8, sl
 80217f4:	d027      	beq.n	8021846 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x72>
 80217f6:	68b8      	ldr	r0, [r7, #8]
 80217f8:	4623      	mov	r3, r4
 80217fa:	6804      	ldr	r4, [r0, #0]
 80217fc:	e9cd a90c 	strd	sl, r9, [sp, #48]	@ 0x30
 8021800:	e9cd 8b0a 	strd	r8, fp, [sp, #40]	@ 0x28
 8021804:	69e4      	ldr	r4, [r4, #28]
 8021806:	4632      	mov	r2, r6
 8021808:	4629      	mov	r1, r5
 802180a:	46a4      	mov	ip, r4
 802180c:	b001      	add	sp, #4
 802180e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021812:	4760      	bx	ip
 8021814:	2d00      	cmp	r5, #0
 8021816:	f8c9 8000 	str.w	r8, [r9]
 802181a:	f889 6004 	strb.w	r6, [r9, #4]
 802181e:	db0c      	blt.n	802183a <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x66>
 8021820:	44a8      	add	r8, r5
 8021822:	45c2      	cmp	sl, r8
 8021824:	bf14      	ite	ne
 8021826:	f04f 0801 	movne.w	r8, #1
 802182a:	f04f 0806 	moveq.w	r8, #6
 802182e:	f889 8006 	strb.w	r8, [r9, #6]
 8021832:	2000      	movs	r0, #0
 8021834:	b001      	add	sp, #4
 8021836:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802183a:	3502      	adds	r5, #2
 802183c:	d1f9      	bne.n	8021832 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x5e>
 802183e:	2301      	movs	r3, #1
 8021840:	f889 3006 	strb.w	r3, [r9, #6]
 8021844:	e7f5      	b.n	8021832 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x5e>
 8021846:	4659      	mov	r1, fp
 8021848:	4638      	mov	r0, r7
 802184a:	f000 f81f 	bl	802188c <_ZNKSt9type_info7__equalERKS_>
 802184e:	2800      	cmp	r0, #0
 8021850:	d0d1      	beq.n	80217f6 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x22>
 8021852:	f889 6005 	strb.w	r6, [r9, #5]
 8021856:	e7ec      	b.n	8021832 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x5e>

08021858 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 8021858:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802185c:	4606      	mov	r6, r0
 802185e:	460f      	mov	r7, r1
 8021860:	4614      	mov	r4, r2
 8021862:	461d      	mov	r5, r3
 8021864:	f000 f908 	bl	8021a78 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 8021868:	b948      	cbnz	r0, 802187e <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
 802186a:	68b0      	ldr	r0, [r6, #8]
 802186c:	6801      	ldr	r1, [r0, #0]
 802186e:	4622      	mov	r2, r4
 8021870:	698c      	ldr	r4, [r1, #24]
 8021872:	462b      	mov	r3, r5
 8021874:	4639      	mov	r1, r7
 8021876:	46a4      	mov	ip, r4
 8021878:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802187c:	4760      	bx	ip
 802187e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021882:	bf00      	nop

08021884 <_ZNSt9type_infoD1Ev>:
 8021884:	4770      	bx	lr
 8021886:	bf00      	nop

08021888 <_ZNKSt9type_info14__is_pointer_pEv>:
 8021888:	2000      	movs	r0, #0
 802188a:	4770      	bx	lr

0802188c <_ZNKSt9type_info7__equalERKS_>:
 802188c:	4281      	cmp	r1, r0
 802188e:	d011      	beq.n	80218b4 <_ZNKSt9type_info7__equalERKS_+0x28>
 8021890:	b508      	push	{r3, lr}
 8021892:	6840      	ldr	r0, [r0, #4]
 8021894:	7803      	ldrb	r3, [r0, #0]
 8021896:	2b2a      	cmp	r3, #42	@ 0x2a
 8021898:	d00a      	beq.n	80218b0 <_ZNKSt9type_info7__equalERKS_+0x24>
 802189a:	6849      	ldr	r1, [r1, #4]
 802189c:	780b      	ldrb	r3, [r1, #0]
 802189e:	2b2a      	cmp	r3, #42	@ 0x2a
 80218a0:	bf08      	it	eq
 80218a2:	3101      	addeq	r1, #1
 80218a4:	f7e4 fc9c 	bl	80061e0 <strcmp>
 80218a8:	fab0 f080 	clz	r0, r0
 80218ac:	0940      	lsrs	r0, r0, #5
 80218ae:	bd08      	pop	{r3, pc}
 80218b0:	2000      	movs	r0, #0
 80218b2:	bd08      	pop	{r3, pc}
 80218b4:	2001      	movs	r0, #1
 80218b6:	4770      	bx	lr

080218b8 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv>:
 80218b8:	b570      	push	{r4, r5, r6, lr}
 80218ba:	4b3b      	ldr	r3, [pc, #236]	@ (80219a8 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xf0>)
 80218bc:	781a      	ldrb	r2, [r3, #0]
 80218be:	b082      	sub	sp, #8
 80218c0:	2a00      	cmp	r2, #0
 80218c2:	d141      	bne.n	8021948 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x90>
 80218c4:	2401      	movs	r4, #1
 80218c6:	701c      	strb	r4, [r3, #0]
 80218c8:	f000 fd46 	bl	8022358 <__cxa_current_exception_type>
 80218cc:	2800      	cmp	r0, #0
 80218ce:	d031      	beq.n	8021934 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x7c>
 80218d0:	6844      	ldr	r4, [r0, #4]
 80218d2:	4d36      	ldr	r5, [pc, #216]	@ (80219ac <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xf4>)
 80218d4:	7823      	ldrb	r3, [r4, #0]
 80218d6:	2b2a      	cmp	r3, #42	@ 0x2a
 80218d8:	bf08      	it	eq
 80218da:	3401      	addeq	r4, #1
 80218dc:	2200      	movs	r2, #0
 80218de:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80218e2:	4611      	mov	r1, r2
 80218e4:	ab01      	add	r3, sp, #4
 80218e6:	9001      	str	r0, [sp, #4]
 80218e8:	4620      	mov	r0, r4
 80218ea:	f7e4 fc09 	bl	8006100 <__cxa_demangle>
 80218ee:	682b      	ldr	r3, [r5, #0]
 80218f0:	2230      	movs	r2, #48	@ 0x30
 80218f2:	68db      	ldr	r3, [r3, #12]
 80218f4:	4606      	mov	r6, r0
 80218f6:	2101      	movs	r1, #1
 80218f8:	482d      	ldr	r0, [pc, #180]	@ (80219b0 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xf8>)
 80218fa:	f002 f951 	bl	8023ba0 <fwrite>
 80218fe:	9b01      	ldr	r3, [sp, #4]
 8021900:	b193      	cbz	r3, 8021928 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x70>
 8021902:	682b      	ldr	r3, [r5, #0]
 8021904:	4620      	mov	r0, r4
 8021906:	68d9      	ldr	r1, [r3, #12]
 8021908:	f001 ff8e 	bl	8023828 <fputs>
 802190c:	682b      	ldr	r3, [r5, #0]
 802190e:	4829      	ldr	r0, [pc, #164]	@ (80219b4 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xfc>)
 8021910:	68db      	ldr	r3, [r3, #12]
 8021912:	2202      	movs	r2, #2
 8021914:	2101      	movs	r1, #1
 8021916:	f002 f943 	bl	8023ba0 <fwrite>
 802191a:	9b01      	ldr	r3, [sp, #4]
 802191c:	b913      	cbnz	r3, 8021924 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x6c>
 802191e:	4630      	mov	r0, r6
 8021920:	f001 fa26 	bl	8022d70 <free>
 8021924:	f7ff fee0 	bl	80216e8 <__cxa_rethrow>
 8021928:	682b      	ldr	r3, [r5, #0]
 802192a:	4630      	mov	r0, r6
 802192c:	68d9      	ldr	r1, [r3, #12]
 802192e:	f001 ff7b 	bl	8023828 <fputs>
 8021932:	e7eb      	b.n	802190c <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x54>
 8021934:	4b1d      	ldr	r3, [pc, #116]	@ (80219ac <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xf4>)
 8021936:	4820      	ldr	r0, [pc, #128]	@ (80219b8 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x100>)
 8021938:	681b      	ldr	r3, [r3, #0]
 802193a:	222d      	movs	r2, #45	@ 0x2d
 802193c:	68db      	ldr	r3, [r3, #12]
 802193e:	4621      	mov	r1, r4
 8021940:	f002 f92e 	bl	8023ba0 <fwrite>
 8021944:	f001 fa04 	bl	8022d50 <abort>
 8021948:	4b18      	ldr	r3, [pc, #96]	@ (80219ac <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xf4>)
 802194a:	481c      	ldr	r0, [pc, #112]	@ (80219bc <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x104>)
 802194c:	681b      	ldr	r3, [r3, #0]
 802194e:	221d      	movs	r2, #29
 8021950:	68db      	ldr	r3, [r3, #12]
 8021952:	2101      	movs	r1, #1
 8021954:	f002 f924 	bl	8023ba0 <fwrite>
 8021958:	f001 f9fa 	bl	8022d50 <abort>
 802195c:	2901      	cmp	r1, #1
 802195e:	460c      	mov	r4, r1
 8021960:	d119      	bne.n	8021996 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xde>
 8021962:	f000 f971 	bl	8021c48 <__cxa_begin_catch>
 8021966:	6803      	ldr	r3, [r0, #0]
 8021968:	689b      	ldr	r3, [r3, #8]
 802196a:	4798      	blx	r3
 802196c:	682b      	ldr	r3, [r5, #0]
 802196e:	4621      	mov	r1, r4
 8021970:	68db      	ldr	r3, [r3, #12]
 8021972:	4604      	mov	r4, r0
 8021974:	220b      	movs	r2, #11
 8021976:	4812      	ldr	r0, [pc, #72]	@ (80219c0 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x108>)
 8021978:	f002 f912 	bl	8023ba0 <fwrite>
 802197c:	682b      	ldr	r3, [r5, #0]
 802197e:	4620      	mov	r0, r4
 8021980:	68d9      	ldr	r1, [r3, #12]
 8021982:	f001 ff51 	bl	8023828 <fputs>
 8021986:	682b      	ldr	r3, [r5, #0]
 8021988:	200a      	movs	r0, #10
 802198a:	68d9      	ldr	r1, [r3, #12]
 802198c:	f001 ff0a 	bl	80237a4 <fputc>
 8021990:	f000 f998 	bl	8021cc4 <__cxa_end_catch>
 8021994:	e7d6      	b.n	8021944 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x8c>
 8021996:	f000 f957 	bl	8021c48 <__cxa_begin_catch>
 802199a:	f000 f993 	bl	8021cc4 <__cxa_end_catch>
 802199e:	e7d1      	b.n	8021944 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x8c>
 80219a0:	f000 f990 	bl	8021cc4 <__cxa_end_catch>
 80219a4:	f000 f88c 	bl	8021ac0 <__cxa_end_cleanup>
 80219a8:	2003ccd0 	.word	0x2003ccd0
 80219ac:	2000884c 	.word	0x2000884c
 80219b0:	080aefd8 	.word	0x080aefd8
 80219b4:	080af00c 	.word	0x080af00c
 80219b8:	080af010 	.word	0x080af010
 80219bc:	080aefb8 	.word	0x080aefb8
 80219c0:	080af040 	.word	0x080af040

080219c4 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 80219c4:	b570      	push	{r4, r5, r6, lr}
 80219c6:	6803      	ldr	r3, [r0, #0]
 80219c8:	b084      	sub	sp, #16
 80219ca:	2400      	movs	r4, #0
 80219cc:	699e      	ldr	r6, [r3, #24]
 80219ce:	9403      	str	r4, [sp, #12]
 80219d0:	2310      	movs	r3, #16
 80219d2:	4615      	mov	r5, r2
 80219d4:	9302      	str	r3, [sp, #8]
 80219d6:	e9cd 4400 	strd	r4, r4, [sp]
 80219da:	466b      	mov	r3, sp
 80219dc:	6812      	ldr	r2, [r2, #0]
 80219de:	47b0      	blx	r6
 80219e0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80219e4:	f003 0306 	and.w	r3, r3, #6
 80219e8:	2b06      	cmp	r3, #6
 80219ea:	bf03      	ittte	eq
 80219ec:	9b00      	ldreq	r3, [sp, #0]
 80219ee:	602b      	streq	r3, [r5, #0]
 80219f0:	2001      	moveq	r0, #1
 80219f2:	4620      	movne	r0, r4
 80219f4:	b004      	add	sp, #16
 80219f6:	bd70      	pop	{r4, r5, r6, pc}

080219f8 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 80219f8:	9800      	ldr	r0, [sp, #0]
 80219fa:	4290      	cmp	r0, r2
 80219fc:	bf0c      	ite	eq
 80219fe:	2006      	moveq	r0, #6
 8021a00:	2001      	movne	r0, #1
 8021a02:	4770      	bx	lr

08021a04 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 8021a04:	b510      	push	{r4, lr}
 8021a06:	4b03      	ldr	r3, [pc, #12]	@ (8021a14 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
 8021a08:	6003      	str	r3, [r0, #0]
 8021a0a:	4604      	mov	r4, r0
 8021a0c:	f7ff ff3a 	bl	8021884 <_ZNSt9type_infoD1Ev>
 8021a10:	4620      	mov	r0, r4
 8021a12:	bd10      	pop	{r4, pc}
 8021a14:	080af084 	.word	0x080af084

08021a18 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 8021a18:	b510      	push	{r4, lr}
 8021a1a:	4b05      	ldr	r3, [pc, #20]	@ (8021a30 <_ZN10__cxxabiv117__class_type_infoD0Ev+0x18>)
 8021a1c:	6003      	str	r3, [r0, #0]
 8021a1e:	4604      	mov	r4, r0
 8021a20:	f7ff ff30 	bl	8021884 <_ZNSt9type_infoD1Ev>
 8021a24:	4620      	mov	r0, r4
 8021a26:	2108      	movs	r1, #8
 8021a28:	f7ff fd16 	bl	8021458 <_ZdlPvj>
 8021a2c:	4620      	mov	r0, r4
 8021a2e:	bd10      	pop	{r4, pc}
 8021a30:	080af084 	.word	0x080af084

08021a34 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 8021a34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021a38:	9f06      	ldr	r7, [sp, #24]
 8021a3a:	9908      	ldr	r1, [sp, #32]
 8021a3c:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 8021a3e:	428f      	cmp	r7, r1
 8021a40:	4604      	mov	r4, r0
 8021a42:	4690      	mov	r8, r2
 8021a44:	461d      	mov	r5, r3
 8021a46:	d00c      	beq.n	8021a62 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x2e>
 8021a48:	4629      	mov	r1, r5
 8021a4a:	4620      	mov	r0, r4
 8021a4c:	f7ff ff1e 	bl	802188c <_ZNKSt9type_info7__equalERKS_>
 8021a50:	b120      	cbz	r0, 8021a5c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x28>
 8021a52:	2301      	movs	r3, #1
 8021a54:	6037      	str	r7, [r6, #0]
 8021a56:	f886 8004 	strb.w	r8, [r6, #4]
 8021a5a:	71b3      	strb	r3, [r6, #6]
 8021a5c:	2000      	movs	r0, #0
 8021a5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021a62:	9907      	ldr	r1, [sp, #28]
 8021a64:	f7ff ff12 	bl	802188c <_ZNKSt9type_info7__equalERKS_>
 8021a68:	2800      	cmp	r0, #0
 8021a6a:	d0ed      	beq.n	8021a48 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x14>
 8021a6c:	f886 8005 	strb.w	r8, [r6, #5]
 8021a70:	2000      	movs	r0, #0
 8021a72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021a76:	bf00      	nop

08021a78 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 8021a78:	b538      	push	{r3, r4, r5, lr}
 8021a7a:	4615      	mov	r5, r2
 8021a7c:	461c      	mov	r4, r3
 8021a7e:	f7ff ff05 	bl	802188c <_ZNKSt9type_info7__equalERKS_>
 8021a82:	b900      	cbnz	r0, 8021a86 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0xe>
 8021a84:	bd38      	pop	{r3, r4, r5, pc}
 8021a86:	2208      	movs	r2, #8
 8021a88:	2306      	movs	r3, #6
 8021a8a:	6025      	str	r5, [r4, #0]
 8021a8c:	60e2      	str	r2, [r4, #12]
 8021a8e:	7123      	strb	r3, [r4, #4]
 8021a90:	bd38      	pop	{r3, r4, r5, pc}
 8021a92:	bf00      	nop

08021a94 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 8021a94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021a98:	4606      	mov	r6, r0
 8021a9a:	4617      	mov	r7, r2
 8021a9c:	461d      	mov	r5, r3
 8021a9e:	460c      	mov	r4, r1
 8021aa0:	f7ff fef4 	bl	802188c <_ZNKSt9type_info7__equalERKS_>
 8021aa4:	b948      	cbnz	r0, 8021aba <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 8021aa6:	2d03      	cmp	r5, #3
 8021aa8:	d807      	bhi.n	8021aba <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 8021aaa:	6823      	ldr	r3, [r4, #0]
 8021aac:	463a      	mov	r2, r7
 8021aae:	4631      	mov	r1, r6
 8021ab0:	4620      	mov	r0, r4
 8021ab2:	695b      	ldr	r3, [r3, #20]
 8021ab4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8021ab8:	4718      	bx	r3
 8021aba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021abe:	bf00      	nop

08021ac0 <__cxa_end_cleanup>:
 8021ac0:	b41e      	push	{r1, r2, r3, r4}
 8021ac2:	f000 f889 	bl	8021bd8 <__gnu_end_cleanup>
 8021ac6:	bc1e      	pop	{r1, r2, r3, r4}
 8021ac8:	f7e5 ffd4 	bl	8007a74 <_Unwind_Resume>

08021acc <__cxa_type_match>:
 8021acc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021ace:	7802      	ldrb	r2, [r0, #0]
 8021ad0:	2a47      	cmp	r2, #71	@ 0x47
 8021ad2:	b083      	sub	sp, #12
 8021ad4:	460c      	mov	r4, r1
 8021ad6:	461d      	mov	r5, r3
 8021ad8:	d019      	beq.n	8021b0e <__cxa_type_match+0x42>
 8021ada:	4e24      	ldr	r6, [pc, #144]	@ (8021b6c <__cxa_type_match+0xa0>)
 8021adc:	2000      	movs	r0, #0
 8021ade:	6833      	ldr	r3, [r6, #0]
 8021ae0:	9001      	str	r0, [sp, #4]
 8021ae2:	689b      	ldr	r3, [r3, #8]
 8021ae4:	4630      	mov	r0, r6
 8021ae6:	4798      	blx	r3
 8021ae8:	b178      	cbz	r0, 8021b0a <__cxa_type_match+0x3e>
 8021aea:	9b01      	ldr	r3, [sp, #4]
 8021aec:	681b      	ldr	r3, [r3, #0]
 8021aee:	9301      	str	r3, [sp, #4]
 8021af0:	2702      	movs	r7, #2
 8021af2:	6823      	ldr	r3, [r4, #0]
 8021af4:	4631      	mov	r1, r6
 8021af6:	4620      	mov	r0, r4
 8021af8:	691e      	ldr	r6, [r3, #16]
 8021afa:	aa01      	add	r2, sp, #4
 8021afc:	2301      	movs	r3, #1
 8021afe:	47b0      	blx	r6
 8021b00:	bb20      	cbnz	r0, 8021b4c <__cxa_type_match+0x80>
 8021b02:	4607      	mov	r7, r0
 8021b04:	4638      	mov	r0, r7
 8021b06:	b003      	add	sp, #12
 8021b08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021b0a:	2701      	movs	r7, #1
 8021b0c:	e7f1      	b.n	8021af2 <__cxa_type_match+0x26>
 8021b0e:	7843      	ldrb	r3, [r0, #1]
 8021b10:	2b4e      	cmp	r3, #78	@ 0x4e
 8021b12:	d1e2      	bne.n	8021ada <__cxa_type_match+0xe>
 8021b14:	7883      	ldrb	r3, [r0, #2]
 8021b16:	2b55      	cmp	r3, #85	@ 0x55
 8021b18:	d1df      	bne.n	8021ada <__cxa_type_match+0xe>
 8021b1a:	78c3      	ldrb	r3, [r0, #3]
 8021b1c:	2b43      	cmp	r3, #67	@ 0x43
 8021b1e:	d1dc      	bne.n	8021ada <__cxa_type_match+0xe>
 8021b20:	7903      	ldrb	r3, [r0, #4]
 8021b22:	2b46      	cmp	r3, #70	@ 0x46
 8021b24:	d017      	beq.n	8021b56 <__cxa_type_match+0x8a>
 8021b26:	2b43      	cmp	r3, #67	@ 0x43
 8021b28:	d1d7      	bne.n	8021ada <__cxa_type_match+0xe>
 8021b2a:	7943      	ldrb	r3, [r0, #5]
 8021b2c:	2b2b      	cmp	r3, #43	@ 0x2b
 8021b2e:	d1d4      	bne.n	8021ada <__cxa_type_match+0xe>
 8021b30:	7983      	ldrb	r3, [r0, #6]
 8021b32:	2b2b      	cmp	r3, #43	@ 0x2b
 8021b34:	d1d1      	bne.n	8021ada <__cxa_type_match+0xe>
 8021b36:	79c3      	ldrb	r3, [r0, #7]
 8021b38:	2b01      	cmp	r3, #1
 8021b3a:	d8ce      	bhi.n	8021ada <__cxa_type_match+0xe>
 8021b3c:	f850 6c20 	ldr.w	r6, [r0, #-32]
 8021b40:	bf12      	itee	ne
 8021b42:	3058      	addne	r0, #88	@ 0x58
 8021b44:	4630      	moveq	r0, r6
 8021b46:	f856 6c78 	ldreq.w	r6, [r6, #-120]
 8021b4a:	e7c8      	b.n	8021ade <__cxa_type_match+0x12>
 8021b4c:	9b01      	ldr	r3, [sp, #4]
 8021b4e:	602b      	str	r3, [r5, #0]
 8021b50:	4638      	mov	r0, r7
 8021b52:	b003      	add	sp, #12
 8021b54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021b56:	7943      	ldrb	r3, [r0, #5]
 8021b58:	2b4f      	cmp	r3, #79	@ 0x4f
 8021b5a:	d1be      	bne.n	8021ada <__cxa_type_match+0xe>
 8021b5c:	7983      	ldrb	r3, [r0, #6]
 8021b5e:	2b52      	cmp	r3, #82	@ 0x52
 8021b60:	d1bb      	bne.n	8021ada <__cxa_type_match+0xe>
 8021b62:	79c0      	ldrb	r0, [r0, #7]
 8021b64:	2800      	cmp	r0, #0
 8021b66:	d1b8      	bne.n	8021ada <__cxa_type_match+0xe>
 8021b68:	4e01      	ldr	r6, [pc, #4]	@ (8021b70 <__cxa_type_match+0xa4>)
 8021b6a:	e7b8      	b.n	8021ade <__cxa_type_match+0x12>
 8021b6c:	080aef24 	.word	0x080aef24
 8021b70:	080aeef8 	.word	0x080aeef8

08021b74 <__cxa_begin_cleanup>:
 8021b74:	b510      	push	{r4, lr}
 8021b76:	4604      	mov	r4, r0
 8021b78:	f000 f8f0 	bl	8021d5c <__cxa_get_globals>
 8021b7c:	4622      	mov	r2, r4
 8021b7e:	f812 3920 	ldrb.w	r3, [r2], #-32
 8021b82:	2b47      	cmp	r3, #71	@ 0x47
 8021b84:	d004      	beq.n	8021b90 <__cxa_begin_cleanup+0x1c>
 8021b86:	6883      	ldr	r3, [r0, #8]
 8021b88:	bb23      	cbnz	r3, 8021bd4 <__cxa_begin_cleanup+0x60>
 8021b8a:	6082      	str	r2, [r0, #8]
 8021b8c:	2001      	movs	r0, #1
 8021b8e:	bd10      	pop	{r4, pc}
 8021b90:	7863      	ldrb	r3, [r4, #1]
 8021b92:	2b4e      	cmp	r3, #78	@ 0x4e
 8021b94:	d1f7      	bne.n	8021b86 <__cxa_begin_cleanup+0x12>
 8021b96:	78a3      	ldrb	r3, [r4, #2]
 8021b98:	2b55      	cmp	r3, #85	@ 0x55
 8021b9a:	d1f4      	bne.n	8021b86 <__cxa_begin_cleanup+0x12>
 8021b9c:	78e3      	ldrb	r3, [r4, #3]
 8021b9e:	2b43      	cmp	r3, #67	@ 0x43
 8021ba0:	d1f1      	bne.n	8021b86 <__cxa_begin_cleanup+0x12>
 8021ba2:	7923      	ldrb	r3, [r4, #4]
 8021ba4:	2b43      	cmp	r3, #67	@ 0x43
 8021ba6:	d1ee      	bne.n	8021b86 <__cxa_begin_cleanup+0x12>
 8021ba8:	7963      	ldrb	r3, [r4, #5]
 8021baa:	2b2b      	cmp	r3, #43	@ 0x2b
 8021bac:	d1eb      	bne.n	8021b86 <__cxa_begin_cleanup+0x12>
 8021bae:	79a3      	ldrb	r3, [r4, #6]
 8021bb0:	2b2b      	cmp	r3, #43	@ 0x2b
 8021bb2:	d1e8      	bne.n	8021b86 <__cxa_begin_cleanup+0x12>
 8021bb4:	79e3      	ldrb	r3, [r4, #7]
 8021bb6:	2b01      	cmp	r3, #1
 8021bb8:	d8e5      	bhi.n	8021b86 <__cxa_begin_cleanup+0x12>
 8021bba:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8021bbe:	3301      	adds	r3, #1
 8021bc0:	2b01      	cmp	r3, #1
 8021bc2:	f844 3c04 	str.w	r3, [r4, #-4]
 8021bc6:	d1e1      	bne.n	8021b8c <__cxa_begin_cleanup+0x18>
 8021bc8:	6883      	ldr	r3, [r0, #8]
 8021bca:	f844 3c08 	str.w	r3, [r4, #-8]
 8021bce:	6082      	str	r2, [r0, #8]
 8021bd0:	2001      	movs	r0, #1
 8021bd2:	bd10      	pop	{r4, pc}
 8021bd4:	f7ff fd02 	bl	80215dc <_ZSt9terminatev>

08021bd8 <__gnu_end_cleanup>:
 8021bd8:	b508      	push	{r3, lr}
 8021bda:	f000 f8bf 	bl	8021d5c <__cxa_get_globals>
 8021bde:	6883      	ldr	r3, [r0, #8]
 8021be0:	b383      	cbz	r3, 8021c44 <__gnu_end_cleanup+0x6c>
 8021be2:	f893 2020 	ldrb.w	r2, [r3, #32]
 8021be6:	2a47      	cmp	r2, #71	@ 0x47
 8021be8:	d004      	beq.n	8021bf4 <__gnu_end_cleanup+0x1c>
 8021bea:	2200      	movs	r2, #0
 8021bec:	6082      	str	r2, [r0, #8]
 8021bee:	f103 0020 	add.w	r0, r3, #32
 8021bf2:	bd08      	pop	{r3, pc}
 8021bf4:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
 8021bf8:	2a4e      	cmp	r2, #78	@ 0x4e
 8021bfa:	d1f6      	bne.n	8021bea <__gnu_end_cleanup+0x12>
 8021bfc:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 8021c00:	2a55      	cmp	r2, #85	@ 0x55
 8021c02:	d1f2      	bne.n	8021bea <__gnu_end_cleanup+0x12>
 8021c04:	f893 2023 	ldrb.w	r2, [r3, #35]	@ 0x23
 8021c08:	2a43      	cmp	r2, #67	@ 0x43
 8021c0a:	d1ee      	bne.n	8021bea <__gnu_end_cleanup+0x12>
 8021c0c:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 8021c10:	2a43      	cmp	r2, #67	@ 0x43
 8021c12:	d1ea      	bne.n	8021bea <__gnu_end_cleanup+0x12>
 8021c14:	f893 2025 	ldrb.w	r2, [r3, #37]	@ 0x25
 8021c18:	2a2b      	cmp	r2, #43	@ 0x2b
 8021c1a:	d1e6      	bne.n	8021bea <__gnu_end_cleanup+0x12>
 8021c1c:	f893 2026 	ldrb.w	r2, [r3, #38]	@ 0x26
 8021c20:	2a2b      	cmp	r2, #43	@ 0x2b
 8021c22:	d1e2      	bne.n	8021bea <__gnu_end_cleanup+0x12>
 8021c24:	f893 2027 	ldrb.w	r2, [r3, #39]	@ 0x27
 8021c28:	2a01      	cmp	r2, #1
 8021c2a:	d8de      	bhi.n	8021bea <__gnu_end_cleanup+0x12>
 8021c2c:	69da      	ldr	r2, [r3, #28]
 8021c2e:	3a01      	subs	r2, #1
 8021c30:	61da      	str	r2, [r3, #28]
 8021c32:	2a00      	cmp	r2, #0
 8021c34:	d1db      	bne.n	8021bee <__gnu_end_cleanup+0x16>
 8021c36:	6999      	ldr	r1, [r3, #24]
 8021c38:	6081      	str	r1, [r0, #8]
 8021c3a:	2200      	movs	r2, #0
 8021c3c:	619a      	str	r2, [r3, #24]
 8021c3e:	f103 0020 	add.w	r0, r3, #32
 8021c42:	bd08      	pop	{r3, pc}
 8021c44:	f7ff fcca 	bl	80215dc <_ZSt9terminatev>

08021c48 <__cxa_begin_catch>:
 8021c48:	b538      	push	{r3, r4, r5, lr}
 8021c4a:	4604      	mov	r4, r0
 8021c4c:	f000 f886 	bl	8021d5c <__cxa_get_globals>
 8021c50:	4622      	mov	r2, r4
 8021c52:	6805      	ldr	r5, [r0, #0]
 8021c54:	f812 3920 	ldrb.w	r3, [r2], #-32
 8021c58:	2b47      	cmp	r3, #71	@ 0x47
 8021c5a:	d003      	beq.n	8021c64 <__cxa_begin_catch+0x1c>
 8021c5c:	bb85      	cbnz	r5, 8021cc0 <__cxa_begin_catch+0x78>
 8021c5e:	6002      	str	r2, [r0, #0]
 8021c60:	4628      	mov	r0, r5
 8021c62:	bd38      	pop	{r3, r4, r5, pc}
 8021c64:	7863      	ldrb	r3, [r4, #1]
 8021c66:	2b4e      	cmp	r3, #78	@ 0x4e
 8021c68:	d1f8      	bne.n	8021c5c <__cxa_begin_catch+0x14>
 8021c6a:	78a3      	ldrb	r3, [r4, #2]
 8021c6c:	2b55      	cmp	r3, #85	@ 0x55
 8021c6e:	d1f5      	bne.n	8021c5c <__cxa_begin_catch+0x14>
 8021c70:	78e3      	ldrb	r3, [r4, #3]
 8021c72:	2b43      	cmp	r3, #67	@ 0x43
 8021c74:	d1f2      	bne.n	8021c5c <__cxa_begin_catch+0x14>
 8021c76:	7923      	ldrb	r3, [r4, #4]
 8021c78:	2b43      	cmp	r3, #67	@ 0x43
 8021c7a:	d1ef      	bne.n	8021c5c <__cxa_begin_catch+0x14>
 8021c7c:	7963      	ldrb	r3, [r4, #5]
 8021c7e:	2b2b      	cmp	r3, #43	@ 0x2b
 8021c80:	d1ec      	bne.n	8021c5c <__cxa_begin_catch+0x14>
 8021c82:	79a3      	ldrb	r3, [r4, #6]
 8021c84:	2b2b      	cmp	r3, #43	@ 0x2b
 8021c86:	d1e9      	bne.n	8021c5c <__cxa_begin_catch+0x14>
 8021c88:	79e3      	ldrb	r3, [r4, #7]
 8021c8a:	2b01      	cmp	r3, #1
 8021c8c:	d8e6      	bhi.n	8021c5c <__cxa_begin_catch+0x14>
 8021c8e:	f854 3c0c 	ldr.w	r3, [r4, #-12]
 8021c92:	2b00      	cmp	r3, #0
 8021c94:	db11      	blt.n	8021cba <__cxa_begin_catch+0x72>
 8021c96:	3301      	adds	r3, #1
 8021c98:	f844 3c0c 	str.w	r3, [r4, #-12]
 8021c9c:	6843      	ldr	r3, [r0, #4]
 8021c9e:	3b01      	subs	r3, #1
 8021ca0:	6043      	str	r3, [r0, #4]
 8021ca2:	4295      	cmp	r5, r2
 8021ca4:	bf18      	it	ne
 8021ca6:	f844 5c10 	strne.w	r5, [r4, #-16]
 8021caa:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8021cac:	bf18      	it	ne
 8021cae:	6002      	strne	r2, [r0, #0]
 8021cb0:	4620      	mov	r0, r4
 8021cb2:	f7e5 fb17 	bl	80072e4 <_Unwind_Complete>
 8021cb6:	4628      	mov	r0, r5
 8021cb8:	bd38      	pop	{r3, r4, r5, pc}
 8021cba:	f1c3 0301 	rsb	r3, r3, #1
 8021cbe:	e7eb      	b.n	8021c98 <__cxa_begin_catch+0x50>
 8021cc0:	f7ff fc8c 	bl	80215dc <_ZSt9terminatev>

08021cc4 <__cxa_end_catch>:
 8021cc4:	b508      	push	{r3, lr}
 8021cc6:	f000 f845 	bl	8021d54 <__cxa_get_globals_fast>
 8021cca:	6803      	ldr	r3, [r0, #0]
 8021ccc:	b37b      	cbz	r3, 8021d2e <__cxa_end_catch+0x6a>
 8021cce:	f893 2020 	ldrb.w	r2, [r3, #32]
 8021cd2:	2a47      	cmp	r2, #71	@ 0x47
 8021cd4:	d007      	beq.n	8021ce6 <__cxa_end_catch+0x22>
 8021cd6:	2200      	movs	r2, #0
 8021cd8:	6002      	str	r2, [r0, #0]
 8021cda:	f103 0020 	add.w	r0, r3, #32
 8021cde:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8021ce2:	f7e5 bb01 	b.w	80072e8 <_Unwind_DeleteException>
 8021ce6:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
 8021cea:	2a4e      	cmp	r2, #78	@ 0x4e
 8021cec:	d1f3      	bne.n	8021cd6 <__cxa_end_catch+0x12>
 8021cee:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 8021cf2:	2a55      	cmp	r2, #85	@ 0x55
 8021cf4:	d1ef      	bne.n	8021cd6 <__cxa_end_catch+0x12>
 8021cf6:	f893 2023 	ldrb.w	r2, [r3, #35]	@ 0x23
 8021cfa:	2a43      	cmp	r2, #67	@ 0x43
 8021cfc:	d1eb      	bne.n	8021cd6 <__cxa_end_catch+0x12>
 8021cfe:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 8021d02:	2a43      	cmp	r2, #67	@ 0x43
 8021d04:	d1e7      	bne.n	8021cd6 <__cxa_end_catch+0x12>
 8021d06:	f893 2025 	ldrb.w	r2, [r3, #37]	@ 0x25
 8021d0a:	2a2b      	cmp	r2, #43	@ 0x2b
 8021d0c:	d1e3      	bne.n	8021cd6 <__cxa_end_catch+0x12>
 8021d0e:	f893 2026 	ldrb.w	r2, [r3, #38]	@ 0x26
 8021d12:	2a2b      	cmp	r2, #43	@ 0x2b
 8021d14:	d1df      	bne.n	8021cd6 <__cxa_end_catch+0x12>
 8021d16:	f893 2027 	ldrb.w	r2, [r3, #39]	@ 0x27
 8021d1a:	2a01      	cmp	r2, #1
 8021d1c:	d8db      	bhi.n	8021cd6 <__cxa_end_catch+0x12>
 8021d1e:	695a      	ldr	r2, [r3, #20]
 8021d20:	2a00      	cmp	r2, #0
 8021d22:	db05      	blt.n	8021d30 <__cxa_end_catch+0x6c>
 8021d24:	3a01      	subs	r2, #1
 8021d26:	d008      	beq.n	8021d3a <__cxa_end_catch+0x76>
 8021d28:	1c51      	adds	r1, r2, #1
 8021d2a:	d00e      	beq.n	8021d4a <__cxa_end_catch+0x86>
 8021d2c:	615a      	str	r2, [r3, #20]
 8021d2e:	bd08      	pop	{r3, pc}
 8021d30:	3201      	adds	r2, #1
 8021d32:	d1fb      	bne.n	8021d2c <__cxa_end_catch+0x68>
 8021d34:	6919      	ldr	r1, [r3, #16]
 8021d36:	6001      	str	r1, [r0, #0]
 8021d38:	e7f8      	b.n	8021d2c <__cxa_end_catch+0x68>
 8021d3a:	691a      	ldr	r2, [r3, #16]
 8021d3c:	6002      	str	r2, [r0, #0]
 8021d3e:	f103 0020 	add.w	r0, r3, #32
 8021d42:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8021d46:	f7e5 bacf 	b.w	80072e8 <_Unwind_DeleteException>
 8021d4a:	f7ff fc47 	bl	80215dc <_ZSt9terminatev>
 8021d4e:	bf00      	nop

08021d50 <_ZN12_GLOBAL__N_113constant_initD1Ev>:
 8021d50:	4770      	bx	lr
 8021d52:	bf00      	nop

08021d54 <__cxa_get_globals_fast>:
 8021d54:	4800      	ldr	r0, [pc, #0]	@ (8021d58 <__cxa_get_globals_fast+0x4>)
 8021d56:	4770      	bx	lr
 8021d58:	2003ccd4 	.word	0x2003ccd4

08021d5c <__cxa_get_globals>:
 8021d5c:	4800      	ldr	r0, [pc, #0]	@ (8021d60 <__cxa_get_globals+0x4>)
 8021d5e:	4770      	bx	lr
 8021d60:	2003ccd4 	.word	0x2003ccd4

08021d64 <_GLOBAL__sub_I___cxa_get_globals_fast>:
 8021d64:	4a02      	ldr	r2, [pc, #8]	@ (8021d70 <_GLOBAL__sub_I___cxa_get_globals_fast+0xc>)
 8021d66:	4903      	ldr	r1, [pc, #12]	@ (8021d74 <_GLOBAL__sub_I___cxa_get_globals_fast+0x10>)
 8021d68:	4803      	ldr	r0, [pc, #12]	@ (8021d78 <_GLOBAL__sub_I___cxa_get_globals_fast+0x14>)
 8021d6a:	f000 bb03 	b.w	8022374 <__aeabi_atexit>
 8021d6e:	bf00      	nop
 8021d70:	20000000 	.word	0x20000000
 8021d74:	08021d51 	.word	0x08021d51
 8021d78:	2003ccd4 	.word	0x2003ccd4

08021d7c <_ZL28read_encoded_value_with_basehjPKhPj>:
 8021d7c:	2850      	cmp	r0, #80	@ 0x50
 8021d7e:	b570      	push	{r4, r5, r6, lr}
 8021d80:	d01d      	beq.n	8021dbe <_ZL28read_encoded_value_with_basehjPKhPj+0x42>
 8021d82:	4684      	mov	ip, r0
 8021d84:	f000 000f 	and.w	r0, r0, #15
 8021d88:	280c      	cmp	r0, #12
 8021d8a:	d855      	bhi.n	8021e38 <_ZL28read_encoded_value_with_basehjPKhPj+0xbc>
 8021d8c:	e8df f000 	tbb	[pc, r0]
 8021d90:	07264407 	.word	0x07264407
 8021d94:	5454541e 	.word	0x5454541e
 8021d98:	07222a54 	.word	0x07222a54
 8021d9c:	1e          	.byte	0x1e
 8021d9d:	00          	.byte	0x00
 8021d9e:	4610      	mov	r0, r2
 8021da0:	f850 6b04 	ldr.w	r6, [r0], #4
 8021da4:	b14e      	cbz	r6, 8021dba <_ZL28read_encoded_value_with_basehjPKhPj+0x3e>
 8021da6:	f00c 0470 	and.w	r4, ip, #112	@ 0x70
 8021daa:	2c10      	cmp	r4, #16
 8021dac:	bf08      	it	eq
 8021dae:	4611      	moveq	r1, r2
 8021db0:	440e      	add	r6, r1
 8021db2:	f01c 0f80 	tst.w	ip, #128	@ 0x80
 8021db6:	bf18      	it	ne
 8021db8:	6836      	ldrne	r6, [r6, #0]
 8021dba:	601e      	str	r6, [r3, #0]
 8021dbc:	bd70      	pop	{r4, r5, r6, pc}
 8021dbe:	1cd0      	adds	r0, r2, #3
 8021dc0:	f020 0003 	bic.w	r0, r0, #3
 8021dc4:	f850 6b04 	ldr.w	r6, [r0], #4
 8021dc8:	601e      	str	r6, [r3, #0]
 8021dca:	bd70      	pop	{r4, r5, r6, pc}
 8021dcc:	4610      	mov	r0, r2
 8021dce:	f850 6b08 	ldr.w	r6, [r0], #8
 8021dd2:	e7e7      	b.n	8021da4 <_ZL28read_encoded_value_with_basehjPKhPj+0x28>
 8021dd4:	4610      	mov	r0, r2
 8021dd6:	f930 6b02 	ldrsh.w	r6, [r0], #2
 8021dda:	e7e3      	b.n	8021da4 <_ZL28read_encoded_value_with_basehjPKhPj+0x28>
 8021ddc:	4610      	mov	r0, r2
 8021dde:	f830 6b02 	ldrh.w	r6, [r0], #2
 8021de2:	e7df      	b.n	8021da4 <_ZL28read_encoded_value_with_basehjPKhPj+0x28>
 8021de4:	2600      	movs	r6, #0
 8021de6:	4610      	mov	r0, r2
 8021de8:	4634      	mov	r4, r6
 8021dea:	f810 5b01 	ldrb.w	r5, [r0], #1
 8021dee:	f005 0e7f 	and.w	lr, r5, #127	@ 0x7f
 8021df2:	fa0e fe04 	lsl.w	lr, lr, r4
 8021df6:	f015 0f80 	tst.w	r5, #128	@ 0x80
 8021dfa:	ea46 060e 	orr.w	r6, r6, lr
 8021dfe:	f104 0407 	add.w	r4, r4, #7
 8021e02:	d1f2      	bne.n	8021dea <_ZL28read_encoded_value_with_basehjPKhPj+0x6e>
 8021e04:	2c1f      	cmp	r4, #31
 8021e06:	d8cd      	bhi.n	8021da4 <_ZL28read_encoded_value_with_basehjPKhPj+0x28>
 8021e08:	066d      	lsls	r5, r5, #25
 8021e0a:	d5cb      	bpl.n	8021da4 <_ZL28read_encoded_value_with_basehjPKhPj+0x28>
 8021e0c:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8021e10:	fa05 f404 	lsl.w	r4, r5, r4
 8021e14:	4326      	orrs	r6, r4
 8021e16:	e7c6      	b.n	8021da6 <_ZL28read_encoded_value_with_basehjPKhPj+0x2a>
 8021e18:	2600      	movs	r6, #0
 8021e1a:	4610      	mov	r0, r2
 8021e1c:	4634      	mov	r4, r6
 8021e1e:	f810 5b01 	ldrb.w	r5, [r0], #1
 8021e22:	f005 0e7f 	and.w	lr, r5, #127	@ 0x7f
 8021e26:	fa0e fe04 	lsl.w	lr, lr, r4
 8021e2a:	062d      	lsls	r5, r5, #24
 8021e2c:	ea46 060e 	orr.w	r6, r6, lr
 8021e30:	f104 0407 	add.w	r4, r4, #7
 8021e34:	d4f3      	bmi.n	8021e1e <_ZL28read_encoded_value_with_basehjPKhPj+0xa2>
 8021e36:	e7b5      	b.n	8021da4 <_ZL28read_encoded_value_with_basehjPKhPj+0x28>
 8021e38:	f000 ff8a 	bl	8022d50 <abort>

08021e3c <_ZL21base_of_encoded_valuehP15_Unwind_Context>:
 8021e3c:	28ff      	cmp	r0, #255	@ 0xff
 8021e3e:	b508      	push	{r3, lr}
 8021e40:	4603      	mov	r3, r0
 8021e42:	d012      	beq.n	8021e6a <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x2e>
 8021e44:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8021e48:	2b30      	cmp	r3, #48	@ 0x30
 8021e4a:	4608      	mov	r0, r1
 8021e4c:	d013      	beq.n	8021e76 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x3a>
 8021e4e:	d805      	bhi.n	8021e5c <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x20>
 8021e50:	2b20      	cmp	r3, #32
 8021e52:	d109      	bne.n	8021e68 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x2c>
 8021e54:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8021e58:	f005 be15 	b.w	8027a86 <_Unwind_GetTextRelBase>
 8021e5c:	2b40      	cmp	r3, #64	@ 0x40
 8021e5e:	d106      	bne.n	8021e6e <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x32>
 8021e60:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8021e64:	f7e5 bffa 	b.w	8007e5c <_Unwind_GetRegionStart>
 8021e68:	d803      	bhi.n	8021e72 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x36>
 8021e6a:	2000      	movs	r0, #0
 8021e6c:	bd08      	pop	{r3, pc}
 8021e6e:	2b50      	cmp	r3, #80	@ 0x50
 8021e70:	d0fb      	beq.n	8021e6a <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x2e>
 8021e72:	f000 ff6d 	bl	8022d50 <abort>
 8021e76:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8021e7a:	f005 be01 	b.w	8027a80 <_Unwind_GetDataRelBase>
 8021e7e:	bf00      	nop

08021e80 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>:
 8021e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021e82:	460c      	mov	r4, r1
 8021e84:	4615      	mov	r5, r2
 8021e86:	4606      	mov	r6, r0
 8021e88:	b108      	cbz	r0, 8021e8e <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0xe>
 8021e8a:	f7e5 ffe7 	bl	8007e5c <_Unwind_GetRegionStart>
 8021e8e:	6028      	str	r0, [r5, #0]
 8021e90:	f814 7b01 	ldrb.w	r7, [r4], #1
 8021e94:	2fff      	cmp	r7, #255	@ 0xff
 8021e96:	d128      	bne.n	8021eea <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x6a>
 8021e98:	6068      	str	r0, [r5, #4]
 8021e9a:	4620      	mov	r0, r4
 8021e9c:	f810 3b01 	ldrb.w	r3, [r0], #1
 8021ea0:	2bff      	cmp	r3, #255	@ 0xff
 8021ea2:	d032      	beq.n	8021f0a <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x8a>
 8021ea4:	2310      	movs	r3, #16
 8021ea6:	2400      	movs	r4, #0
 8021ea8:	752b      	strb	r3, [r5, #20]
 8021eaa:	4622      	mov	r2, r4
 8021eac:	f810 1b01 	ldrb.w	r1, [r0], #1
 8021eb0:	f001 037f 	and.w	r3, r1, #127	@ 0x7f
 8021eb4:	4093      	lsls	r3, r2
 8021eb6:	0609      	lsls	r1, r1, #24
 8021eb8:	ea44 0403 	orr.w	r4, r4, r3
 8021ebc:	f102 0207 	add.w	r2, r2, #7
 8021ec0:	d4f4      	bmi.n	8021eac <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x2c>
 8021ec2:	4404      	add	r4, r0
 8021ec4:	60ec      	str	r4, [r5, #12]
 8021ec6:	f810 3b01 	ldrb.w	r3, [r0], #1
 8021eca:	756b      	strb	r3, [r5, #21]
 8021ecc:	2400      	movs	r4, #0
 8021ece:	4622      	mov	r2, r4
 8021ed0:	f810 1b01 	ldrb.w	r1, [r0], #1
 8021ed4:	f001 037f 	and.w	r3, r1, #127	@ 0x7f
 8021ed8:	4093      	lsls	r3, r2
 8021eda:	431c      	orrs	r4, r3
 8021edc:	060b      	lsls	r3, r1, #24
 8021ede:	f102 0207 	add.w	r2, r2, #7
 8021ee2:	d4f5      	bmi.n	8021ed0 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x50>
 8021ee4:	4404      	add	r4, r0
 8021ee6:	612c      	str	r4, [r5, #16]
 8021ee8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8021eea:	4631      	mov	r1, r6
 8021eec:	4638      	mov	r0, r7
 8021eee:	f7ff ffa5 	bl	8021e3c <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 8021ef2:	4622      	mov	r2, r4
 8021ef4:	4601      	mov	r1, r0
 8021ef6:	1d2b      	adds	r3, r5, #4
 8021ef8:	4638      	mov	r0, r7
 8021efa:	f7ff ff3f 	bl	8021d7c <_ZL28read_encoded_value_with_basehjPKhPj>
 8021efe:	4604      	mov	r4, r0
 8021f00:	4620      	mov	r0, r4
 8021f02:	f810 3b01 	ldrb.w	r3, [r0], #1
 8021f06:	2bff      	cmp	r3, #255	@ 0xff
 8021f08:	d1cc      	bne.n	8021ea4 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x24>
 8021f0a:	752b      	strb	r3, [r5, #20]
 8021f0c:	2400      	movs	r4, #0
 8021f0e:	e7d9      	b.n	8021ec4 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x44>

08021f10 <__gxx_personality_v0>:
 8021f10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021f14:	f000 0403 	and.w	r4, r0, #3
 8021f18:	b095      	sub	sp, #84	@ 0x54
 8021f1a:	2300      	movs	r3, #0
 8021f1c:	2c01      	cmp	r4, #1
 8021f1e:	930a      	str	r3, [sp, #40]	@ 0x28
 8021f20:	460f      	mov	r7, r1
 8021f22:	4616      	mov	r6, r2
 8021f24:	d013      	beq.n	8021f4e <__gxx_personality_v0+0x3e>
 8021f26:	2c02      	cmp	r4, #2
 8021f28:	d108      	bne.n	8021f3c <__gxx_personality_v0+0x2c>
 8021f2a:	4631      	mov	r1, r6
 8021f2c:	4638      	mov	r0, r7
 8021f2e:	f7e5 ff7f 	bl	8007e30 <__gnu_unwind_frame>
 8021f32:	b940      	cbnz	r0, 8021f46 <__gxx_personality_v0+0x36>
 8021f34:	2008      	movs	r0, #8
 8021f36:	b015      	add	sp, #84	@ 0x54
 8021f38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021f3c:	2c00      	cmp	r4, #0
 8021f3e:	f000 8093 	beq.w	8022068 <__gxx_personality_v0+0x158>
 8021f42:	f000 ff05 	bl	8022d50 <abort>
 8021f46:	2009      	movs	r0, #9
 8021f48:	b015      	add	sp, #84	@ 0x54
 8021f4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021f4e:	f010 0408 	ands.w	r4, r0, #8
 8021f52:	f000 809a 	beq.w	802208a <__gxx_personality_v0+0x17a>
 8021f56:	aa0e      	add	r2, sp, #56	@ 0x38
 8021f58:	9202      	str	r2, [sp, #8]
 8021f5a:	9200      	str	r2, [sp, #0]
 8021f5c:	f044 0202 	orr.w	r2, r4, #2
 8021f60:	9203      	str	r2, [sp, #12]
 8021f62:	910e      	str	r1, [sp, #56]	@ 0x38
 8021f64:	220c      	movs	r2, #12
 8021f66:	4619      	mov	r1, r3
 8021f68:	4630      	mov	r0, r6
 8021f6a:	f7e5 f9e9 	bl	8007340 <_Unwind_VRS_Set>
 8021f6e:	4630      	mov	r0, r6
 8021f70:	f7e5 ff7a 	bl	8007e68 <_Unwind_GetLanguageSpecificData>
 8021f74:	9004      	str	r0, [sp, #16]
 8021f76:	2800      	cmp	r0, #0
 8021f78:	d0d7      	beq.n	8021f2a <__gxx_personality_v0+0x1a>
 8021f7a:	9a02      	ldr	r2, [sp, #8]
 8021f7c:	9904      	ldr	r1, [sp, #16]
 8021f7e:	4630      	mov	r0, r6
 8021f80:	f7ff ff7e 	bl	8021e80 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 8021f84:	f89d 304c 	ldrb.w	r3, [sp, #76]	@ 0x4c
 8021f88:	9306      	str	r3, [sp, #24]
 8021f8a:	4681      	mov	r9, r0
 8021f8c:	4631      	mov	r1, r6
 8021f8e:	4618      	mov	r0, r3
 8021f90:	f7ff ff54 	bl	8021e3c <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 8021f94:	f10d 0834 	add.w	r8, sp, #52	@ 0x34
 8021f98:	2300      	movs	r3, #0
 8021f9a:	9005      	str	r0, [sp, #20]
 8021f9c:	9010      	str	r0, [sp, #64]	@ 0x40
 8021f9e:	4619      	mov	r1, r3
 8021fa0:	f8cd 8000 	str.w	r8, [sp]
 8021fa4:	220f      	movs	r2, #15
 8021fa6:	4630      	mov	r0, r6
 8021fa8:	f7e5 f9a4 	bl	80072f4 <_Unwind_VRS_Get>
 8021fac:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8021fae:	f8dd b048 	ldr.w	fp, [sp, #72]	@ 0x48
 8021fb2:	f023 0301 	bic.w	r3, r3, #1
 8021fb6:	45d9      	cmp	r9, fp
 8021fb8:	f103 35ff 	add.w	r5, r3, #4294967295	@ 0xffffffff
 8021fbc:	d233      	bcs.n	8022026 <__gxx_personality_v0+0x116>
 8021fbe:	f89d a04d 	ldrb.w	sl, [sp, #77]	@ 0x4d
 8021fc2:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8021fc4:	2100      	movs	r1, #0
 8021fc6:	4650      	mov	r0, sl
 8021fc8:	f7ff ff38 	bl	8021e3c <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 8021fcc:	464a      	mov	r2, r9
 8021fce:	4601      	mov	r1, r0
 8021fd0:	ab0b      	add	r3, sp, #44	@ 0x2c
 8021fd2:	4650      	mov	r0, sl
 8021fd4:	f7ff fed2 	bl	8021d7c <_ZL28read_encoded_value_with_basehjPKhPj>
 8021fd8:	2100      	movs	r1, #0
 8021fda:	4681      	mov	r9, r0
 8021fdc:	4650      	mov	r0, sl
 8021fde:	f7ff ff2d 	bl	8021e3c <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 8021fe2:	464a      	mov	r2, r9
 8021fe4:	4601      	mov	r1, r0
 8021fe6:	ab0c      	add	r3, sp, #48	@ 0x30
 8021fe8:	4650      	mov	r0, sl
 8021fea:	f7ff fec7 	bl	8021d7c <_ZL28read_encoded_value_with_basehjPKhPj>
 8021fee:	2100      	movs	r1, #0
 8021ff0:	4681      	mov	r9, r0
 8021ff2:	4650      	mov	r0, sl
 8021ff4:	f7ff ff22 	bl	8021e3c <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 8021ff8:	464a      	mov	r2, r9
 8021ffa:	4601      	mov	r1, r0
 8021ffc:	4643      	mov	r3, r8
 8021ffe:	4650      	mov	r0, sl
 8022000:	f7ff febc 	bl	8021d7c <_ZL28read_encoded_value_with_basehjPKhPj>
 8022004:	4681      	mov	r9, r0
 8022006:	2000      	movs	r0, #0
 8022008:	4602      	mov	r2, r0
 802200a:	f819 1b01 	ldrb.w	r1, [r9], #1
 802200e:	f001 037f 	and.w	r3, r1, #127	@ 0x7f
 8022012:	4093      	lsls	r3, r2
 8022014:	4318      	orrs	r0, r3
 8022016:	060b      	lsls	r3, r1, #24
 8022018:	f102 0207 	add.w	r2, r2, #7
 802201c:	d4f5      	bmi.n	802200a <__gxx_personality_v0+0xfa>
 802201e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8022020:	4423      	add	r3, r4
 8022022:	42ab      	cmp	r3, r5
 8022024:	d919      	bls.n	802205a <__gxx_personality_v0+0x14a>
 8022026:	f04f 0a00 	mov.w	sl, #0
 802202a:	46d1      	mov	r9, sl
 802202c:	2301      	movs	r3, #1
 802202e:	9a03      	ldr	r2, [sp, #12]
 8022030:	07d1      	lsls	r1, r2, #31
 8022032:	f140 8081 	bpl.w	8022138 <__gxx_personality_v0+0x228>
 8022036:	2300      	movs	r3, #0
 8022038:	4619      	mov	r1, r3
 802203a:	f8cd 8000 	str.w	r8, [sp]
 802203e:	4630      	mov	r0, r6
 8022040:	220d      	movs	r2, #13
 8022042:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8022044:	f7e5 f956 	bl	80072f4 <_Unwind_VRS_Get>
 8022048:	9b04      	ldr	r3, [sp, #16]
 802204a:	e9c7 390b 	strd	r3, r9, [r7, #44]	@ 0x2c
 802204e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8022050:	623b      	str	r3, [r7, #32]
 8022052:	e9c7 4a09 	strd	r4, sl, [r7, #36]	@ 0x24
 8022056:	2006      	movs	r0, #6
 8022058:	e76d      	b.n	8021f36 <__gxx_personality_v0+0x26>
 802205a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 802205c:	4413      	add	r3, r2
 802205e:	42ab      	cmp	r3, r5
 8022060:	d874      	bhi.n	802214c <__gxx_personality_v0+0x23c>
 8022062:	45cb      	cmp	fp, r9
 8022064:	d8ae      	bhi.n	8021fc4 <__gxx_personality_v0+0xb4>
 8022066:	e7de      	b.n	8022026 <__gxx_personality_v0+0x116>
 8022068:	0702      	lsls	r2, r0, #28
 802206a:	f53f af5e 	bmi.w	8021f2a <__gxx_personality_v0+0x1a>
 802206e:	2301      	movs	r3, #1
 8022070:	9303      	str	r3, [sp, #12]
 8022072:	ab0e      	add	r3, sp, #56	@ 0x38
 8022074:	9302      	str	r3, [sp, #8]
 8022076:	9a02      	ldr	r2, [sp, #8]
 8022078:	9200      	str	r2, [sp, #0]
 802207a:	2300      	movs	r3, #0
 802207c:	220c      	movs	r2, #12
 802207e:	4619      	mov	r1, r3
 8022080:	4630      	mov	r0, r6
 8022082:	970e      	str	r7, [sp, #56]	@ 0x38
 8022084:	f7e5 f95c 	bl	8007340 <_Unwind_VRS_Set>
 8022088:	e771      	b.n	8021f6e <__gxx_personality_v0+0x5e>
 802208a:	ab0e      	add	r3, sp, #56	@ 0x38
 802208c:	9300      	str	r3, [sp, #0]
 802208e:	6a0d      	ldr	r5, [r1, #32]
 8022090:	9302      	str	r3, [sp, #8]
 8022092:	220d      	movs	r2, #13
 8022094:	4623      	mov	r3, r4
 8022096:	4621      	mov	r1, r4
 8022098:	4630      	mov	r0, r6
 802209a:	f7e5 f92b 	bl	80072f4 <_Unwind_VRS_Get>
 802209e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80220a0:	429d      	cmp	r5, r3
 80220a2:	d002      	beq.n	80220aa <__gxx_personality_v0+0x19a>
 80220a4:	2302      	movs	r3, #2
 80220a6:	9303      	str	r3, [sp, #12]
 80220a8:	e7e5      	b.n	8022076 <__gxx_personality_v0+0x166>
 80220aa:	9b02      	ldr	r3, [sp, #8]
 80220ac:	9300      	str	r3, [sp, #0]
 80220ae:	4621      	mov	r1, r4
 80220b0:	4623      	mov	r3, r4
 80220b2:	220c      	movs	r2, #12
 80220b4:	4630      	mov	r0, r6
 80220b6:	970e      	str	r7, [sp, #56]	@ 0x38
 80220b8:	f7e5 f942 	bl	8007340 <_Unwind_VRS_Set>
 80220bc:	f8d7 9030 	ldr.w	r9, [r7, #48]	@ 0x30
 80220c0:	e9d7 430a 	ldrd	r4, r3, [r7, #40]	@ 0x28
 80220c4:	f1b9 0f00 	cmp.w	r9, #0
 80220c8:	d03d      	beq.n	8022146 <__gxx_personality_v0+0x236>
 80220ca:	9304      	str	r3, [sp, #16]
 80220cc:	46a2      	mov	sl, r4
 80220ce:	f10d 0834 	add.w	r8, sp, #52	@ 0x34
 80220d2:	f1ba 0f00 	cmp.w	sl, #0
 80220d6:	f2c0 8103 	blt.w	80222e0 <__gxx_personality_v0+0x3d0>
 80220da:	2503      	movs	r5, #3
 80220dc:	2300      	movs	r3, #0
 80220de:	461a      	mov	r2, r3
 80220e0:	4619      	mov	r1, r3
 80220e2:	f8cd 8000 	str.w	r8, [sp]
 80220e6:	4630      	mov	r0, r6
 80220e8:	970d      	str	r7, [sp, #52]	@ 0x34
 80220ea:	f7e5 f929 	bl	8007340 <_Unwind_VRS_Set>
 80220ee:	2300      	movs	r3, #0
 80220f0:	4619      	mov	r1, r3
 80220f2:	2201      	movs	r2, #1
 80220f4:	f8cd 8000 	str.w	r8, [sp]
 80220f8:	4630      	mov	r0, r6
 80220fa:	940d      	str	r4, [sp, #52]	@ 0x34
 80220fc:	f7e5 f920 	bl	8007340 <_Unwind_VRS_Set>
 8022100:	2300      	movs	r3, #0
 8022102:	4619      	mov	r1, r3
 8022104:	220f      	movs	r2, #15
 8022106:	f8cd 8000 	str.w	r8, [sp]
 802210a:	4630      	mov	r0, r6
 802210c:	f7e5 f8f2 	bl	80072f4 <_Unwind_VRS_Get>
 8022110:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8022112:	f8cd 8000 	str.w	r8, [sp]
 8022116:	f002 0201 	and.w	r2, r2, #1
 802211a:	2300      	movs	r3, #0
 802211c:	ea42 0209 	orr.w	r2, r2, r9
 8022120:	920d      	str	r2, [sp, #52]	@ 0x34
 8022122:	4630      	mov	r0, r6
 8022124:	220f      	movs	r2, #15
 8022126:	4619      	mov	r1, r3
 8022128:	f7e5 f90a 	bl	8007340 <_Unwind_VRS_Set>
 802212c:	2d02      	cmp	r5, #2
 802212e:	d062      	beq.n	80221f6 <__gxx_personality_v0+0x2e6>
 8022130:	2007      	movs	r0, #7
 8022132:	b015      	add	sp, #84	@ 0x54
 8022134:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022138:	9a03      	ldr	r2, [sp, #12]
 802213a:	0712      	lsls	r2, r2, #28
 802213c:	d45f      	bmi.n	80221fe <__gxx_personality_v0+0x2ee>
 802213e:	2b01      	cmp	r3, #1
 8022140:	bf18      	it	ne
 8022142:	4654      	movne	r4, sl
 8022144:	d1c5      	bne.n	80220d2 <__gxx_personality_v0+0x1c2>
 8022146:	4638      	mov	r0, r7
 8022148:	f000 f938 	bl	80223bc <__cxa_call_terminate>
 802214c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802214e:	2b00      	cmp	r3, #0
 8022150:	f43f aeeb 	beq.w	8021f2a <__gxx_personality_v0+0x1a>
 8022154:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8022156:	eb03 0902 	add.w	r9, r3, r2
 802215a:	2800      	cmp	r0, #0
 802215c:	f000 80e3 	beq.w	8022326 <__gxx_personality_v0+0x416>
 8022160:	3801      	subs	r0, #1
 8022162:	eb0b 0400 	add.w	r4, fp, r0
 8022166:	f1b9 0f00 	cmp.w	r9, #0
 802216a:	f43f aede 	beq.w	8021f2a <__gxx_personality_v0+0x1a>
 802216e:	9b03      	ldr	r3, [sp, #12]
 8022170:	f013 0308 	ands.w	r3, r3, #8
 8022174:	9308      	str	r3, [sp, #32]
 8022176:	f000 80db 	beq.w	8022330 <__gxx_personality_v0+0x420>
 802217a:	4b75      	ldr	r3, [pc, #468]	@ (8022350 <__gxx_personality_v0+0x440>)
 802217c:	603b      	str	r3, [r7, #0]
 802217e:	4b75      	ldr	r3, [pc, #468]	@ (8022354 <__gxx_personality_v0+0x444>)
 8022180:	607b      	str	r3, [r7, #4]
 8022182:	f8dd b018 	ldr.w	fp, [sp, #24]
 8022186:	9607      	str	r6, [sp, #28]
 8022188:	2300      	movs	r3, #0
 802218a:	f00b 0207 	and.w	r2, fp, #7
 802218e:	f8cd 9018 	str.w	r9, [sp, #24]
 8022192:	9209      	str	r2, [sp, #36]	@ 0x24
 8022194:	4699      	mov	r9, r3
 8022196:	2100      	movs	r1, #0
 8022198:	460a      	mov	r2, r1
 802219a:	f814 0b01 	ldrb.w	r0, [r4], #1
 802219e:	f000 037f 	and.w	r3, r0, #127	@ 0x7f
 80221a2:	4093      	lsls	r3, r2
 80221a4:	0605      	lsls	r5, r0, #24
 80221a6:	ea41 0103 	orr.w	r1, r1, r3
 80221aa:	f102 0207 	add.w	r2, r2, #7
 80221ae:	d4f4      	bmi.n	802219a <__gxx_personality_v0+0x28a>
 80221b0:	2a1f      	cmp	r2, #31
 80221b2:	d805      	bhi.n	80221c0 <__gxx_personality_v0+0x2b0>
 80221b4:	0640      	lsls	r0, r0, #25
 80221b6:	d503      	bpl.n	80221c0 <__gxx_personality_v0+0x2b0>
 80221b8:	2301      	movs	r3, #1
 80221ba:	4093      	lsls	r3, r2
 80221bc:	425b      	negs	r3, r3
 80221be:	4319      	orrs	r1, r3
 80221c0:	2500      	movs	r5, #0
 80221c2:	468a      	mov	sl, r1
 80221c4:	4626      	mov	r6, r4
 80221c6:	462a      	mov	r2, r5
 80221c8:	f816 0b01 	ldrb.w	r0, [r6], #1
 80221cc:	f000 037f 	and.w	r3, r0, #127	@ 0x7f
 80221d0:	4093      	lsls	r3, r2
 80221d2:	431d      	orrs	r5, r3
 80221d4:	0603      	lsls	r3, r0, #24
 80221d6:	f102 0207 	add.w	r2, r2, #7
 80221da:	d4f5      	bmi.n	80221c8 <__gxx_personality_v0+0x2b8>
 80221dc:	2a1f      	cmp	r2, #31
 80221de:	d818      	bhi.n	8022212 <__gxx_personality_v0+0x302>
 80221e0:	0646      	lsls	r6, r0, #25
 80221e2:	d516      	bpl.n	8022212 <__gxx_personality_v0+0x302>
 80221e4:	2301      	movs	r3, #1
 80221e6:	4093      	lsls	r3, r2
 80221e8:	425b      	negs	r3, r3
 80221ea:	431d      	orrs	r5, r3
 80221ec:	bb19      	cbnz	r1, 8022236 <__gxx_personality_v0+0x326>
 80221ee:	f04f 0901 	mov.w	r9, #1
 80221f2:	442c      	add	r4, r5
 80221f4:	e7cf      	b.n	8022196 <__gxx_personality_v0+0x286>
 80221f6:	4638      	mov	r0, r7
 80221f8:	f7ff fcbc 	bl	8021b74 <__cxa_begin_cleanup>
 80221fc:	e798      	b.n	8022130 <__gxx_personality_v0+0x220>
 80221fe:	2b01      	cmp	r3, #1
 8022200:	f000 80a3 	beq.w	802234a <__gxx_personality_v0+0x43a>
 8022204:	f1ba 0f00 	cmp.w	sl, #0
 8022208:	f2c0 809b 	blt.w	8022342 <__gxx_personality_v0+0x432>
 802220c:	4654      	mov	r4, sl
 802220e:	2503      	movs	r5, #3
 8022210:	e764      	b.n	80220dc <__gxx_personality_v0+0x1cc>
 8022212:	b981      	cbnz	r1, 8022236 <__gxx_personality_v0+0x326>
 8022214:	f04f 0901 	mov.w	r9, #1
 8022218:	2d00      	cmp	r5, #0
 802221a:	d1ea      	bne.n	80221f2 <__gxx_personality_v0+0x2e2>
 802221c:	464b      	mov	r3, r9
 802221e:	e9dd 9606 	ldrd	r9, r6, [sp, #24]
 8022222:	2b00      	cmp	r3, #0
 8022224:	f43f ae81 	beq.w	8021f2a <__gxx_personality_v0+0x1a>
 8022228:	9b03      	ldr	r3, [sp, #12]
 802222a:	07d8      	lsls	r0, r3, #31
 802222c:	f53f ae7d 	bmi.w	8021f2a <__gxx_personality_v0+0x1a>
 8022230:	2400      	movs	r4, #0
 8022232:	2502      	movs	r5, #2
 8022234:	e752      	b.n	80220dc <__gxx_personality_v0+0x1cc>
 8022236:	2900      	cmp	r1, #0
 8022238:	dc21      	bgt.n	802227e <__gxx_personality_v0+0x36e>
 802223a:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 802223e:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8022240:	1a5b      	subs	r3, r3, r1
 8022242:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 8022246:	eb06 0683 	add.w	r6, r6, r3, lsl #2
 802224a:	b10f      	cbz	r7, 8022250 <__gxx_personality_v0+0x340>
 802224c:	9b08      	ldr	r3, [sp, #32]
 802224e:	b12b      	cbz	r3, 802225c <__gxx_personality_v0+0x34c>
 8022250:	2900      	cmp	r1, #0
 8022252:	d1e1      	bne.n	8022218 <__gxx_personality_v0+0x308>
 8022254:	e9dd 9606 	ldrd	r9, r6, [sp, #24]
 8022258:	2303      	movs	r3, #3
 802225a:	e6e8      	b.n	802202e <__gxx_personality_v0+0x11e>
 802225c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802225e:	930d      	str	r3, [sp, #52]	@ 0x34
 8022260:	b921      	cbnz	r1, 802226c <__gxx_personality_v0+0x35c>
 8022262:	e7f7      	b.n	8022254 <__gxx_personality_v0+0x344>
 8022264:	f856 1f04 	ldr.w	r1, [r6, #4]!
 8022268:	2900      	cmp	r1, #0
 802226a:	d0f3      	beq.n	8022254 <__gxx_personality_v0+0x344>
 802226c:	4431      	add	r1, r6
 802226e:	4643      	mov	r3, r8
 8022270:	2200      	movs	r2, #0
 8022272:	4638      	mov	r0, r7
 8022274:	f7ff fc2a 	bl	8021acc <__cxa_type_match>
 8022278:	2800      	cmp	r0, #0
 802227a:	d0f3      	beq.n	8022264 <__gxx_personality_v0+0x354>
 802227c:	e7cc      	b.n	8022218 <__gxx_personality_v0+0x308>
 802227e:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 8022282:	d04e      	beq.n	8022322 <__gxx_personality_v0+0x412>
 8022284:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8022286:	2a04      	cmp	r2, #4
 8022288:	f63f ae5b 	bhi.w	8021f42 <__gxx_personality_v0+0x32>
 802228c:	a301      	add	r3, pc, #4	@ (adr r3, 8022294 <__gxx_personality_v0+0x384>)
 802228e:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 8022292:	bf00      	nop
 8022294:	080222a9 	.word	0x080222a9
 8022298:	08021f43 	.word	0x08021f43
 802229c:	080222db 	.word	0x080222db
 80222a0:	080222a9 	.word	0x080222a9
 80222a4:	080222d5 	.word	0x080222d5
 80222a8:	008b      	lsls	r3, r1, #2
 80222aa:	425b      	negs	r3, r3
 80222ac:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80222ae:	9905      	ldr	r1, [sp, #20]
 80222b0:	441a      	add	r2, r3
 80222b2:	4658      	mov	r0, fp
 80222b4:	4643      	mov	r3, r8
 80222b6:	f7ff fd61 	bl	8021d7c <_ZL28read_encoded_value_with_basehjPKhPj>
 80222ba:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80222bc:	2900      	cmp	r1, #0
 80222be:	d0c9      	beq.n	8022254 <__gxx_personality_v0+0x344>
 80222c0:	2f00      	cmp	r7, #0
 80222c2:	d0a9      	beq.n	8022218 <__gxx_personality_v0+0x308>
 80222c4:	ab0a      	add	r3, sp, #40	@ 0x28
 80222c6:	2200      	movs	r2, #0
 80222c8:	4638      	mov	r0, r7
 80222ca:	f7ff fbff 	bl	8021acc <__cxa_type_match>
 80222ce:	2800      	cmp	r0, #0
 80222d0:	d0a2      	beq.n	8022218 <__gxx_personality_v0+0x308>
 80222d2:	e7bf      	b.n	8022254 <__gxx_personality_v0+0x344>
 80222d4:	00cb      	lsls	r3, r1, #3
 80222d6:	425b      	negs	r3, r3
 80222d8:	e7e8      	b.n	80222ac <__gxx_personality_v0+0x39c>
 80222da:	004b      	lsls	r3, r1, #1
 80222dc:	425b      	negs	r3, r3
 80222de:	e7e5      	b.n	80222ac <__gxx_personality_v0+0x39c>
 80222e0:	9a02      	ldr	r2, [sp, #8]
 80222e2:	9904      	ldr	r1, [sp, #16]
 80222e4:	4630      	mov	r0, r6
 80222e6:	f7ff fdcb 	bl	8021e80 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 80222ea:	f89d 004c 	ldrb.w	r0, [sp, #76]	@ 0x4c
 80222ee:	4631      	mov	r1, r6
 80222f0:	f7ff fda4 	bl	8021e3c <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 80222f4:	f06f 4240 	mvn.w	r2, #3221225472	@ 0xc0000000
 80222f8:	1b12      	subs	r2, r2, r4
 80222fa:	4605      	mov	r5, r0
 80222fc:	9811      	ldr	r0, [sp, #68]	@ 0x44
 80222fe:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
 8022302:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8022306:	b133      	cbz	r3, 8022316 <__gxx_personality_v0+0x406>
 8022308:	4602      	mov	r2, r0
 802230a:	2300      	movs	r3, #0
 802230c:	f852 1f04 	ldr.w	r1, [r2, #4]!
 8022310:	3301      	adds	r3, #1
 8022312:	2900      	cmp	r1, #0
 8022314:	d1fa      	bne.n	802230c <__gxx_personality_v0+0x3fc>
 8022316:	e9c7 350a 	strd	r3, r5, [r7, #40]	@ 0x28
 802231a:	2304      	movs	r3, #4
 802231c:	6378      	str	r0, [r7, #52]	@ 0x34
 802231e:	633b      	str	r3, [r7, #48]	@ 0x30
 8022320:	e6db      	b.n	80220da <__gxx_personality_v0+0x1ca>
 8022322:	2300      	movs	r3, #0
 8022324:	e7c2      	b.n	80222ac <__gxx_personality_v0+0x39c>
 8022326:	f1b9 0f00 	cmp.w	r9, #0
 802232a:	f47f af7d 	bne.w	8022228 <__gxx_personality_v0+0x318>
 802232e:	e5fc      	b.n	8021f2a <__gxx_personality_v0+0x1a>
 8022330:	79fb      	ldrb	r3, [r7, #7]
 8022332:	2b01      	cmp	r3, #1
 8022334:	bf0c      	ite	eq
 8022336:	f857 3c20 	ldreq.w	r3, [r7, #-32]
 802233a:	f107 0358 	addne.w	r3, r7, #88	@ 0x58
 802233e:	930a      	str	r3, [sp, #40]	@ 0x28
 8022340:	e71f      	b.n	8022182 <__gxx_personality_v0+0x272>
 8022342:	f7ff f959 	bl	80215f8 <_ZSt10unexpectedv>
 8022346:	f7ff fc7f 	bl	8021c48 <__cxa_begin_catch>
 802234a:	f7ff f947 	bl	80215dc <_ZSt9terminatev>
 802234e:	bf00      	nop
 8022350:	43554e47 	.word	0x43554e47
 8022354:	00524f46 	.word	0x00524f46

08022358 <__cxa_current_exception_type>:
 8022358:	b508      	push	{r3, lr}
 802235a:	f7ff fcff 	bl	8021d5c <__cxa_get_globals>
 802235e:	6800      	ldr	r0, [r0, #0]
 8022360:	b130      	cbz	r0, 8022370 <__cxa_current_exception_type+0x18>
 8022362:	f890 3027 	ldrb.w	r3, [r0, #39]	@ 0x27
 8022366:	2b01      	cmp	r3, #1
 8022368:	bf04      	itt	eq
 802236a:	6800      	ldreq	r0, [r0, #0]
 802236c:	3878      	subeq	r0, #120	@ 0x78
 802236e:	6800      	ldr	r0, [r0, #0]
 8022370:	bd08      	pop	{r3, pc}
 8022372:	bf00      	nop

08022374 <__aeabi_atexit>:
 8022374:	4603      	mov	r3, r0
 8022376:	4608      	mov	r0, r1
 8022378:	4619      	mov	r1, r3
 802237a:	f001 bceb 	b.w	8023d54 <__cxa_atexit>
 802237e:	bf00      	nop

08022380 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 8022380:	7803      	ldrb	r3, [r0, #0]
 8022382:	2b47      	cmp	r3, #71	@ 0x47
 8022384:	d001      	beq.n	802238a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0xa>
 8022386:	2000      	movs	r0, #0
 8022388:	4770      	bx	lr
 802238a:	7843      	ldrb	r3, [r0, #1]
 802238c:	2b4e      	cmp	r3, #78	@ 0x4e
 802238e:	d1fa      	bne.n	8022386 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
 8022390:	7883      	ldrb	r3, [r0, #2]
 8022392:	2b55      	cmp	r3, #85	@ 0x55
 8022394:	d1f7      	bne.n	8022386 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
 8022396:	78c3      	ldrb	r3, [r0, #3]
 8022398:	2b43      	cmp	r3, #67	@ 0x43
 802239a:	d1f4      	bne.n	8022386 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
 802239c:	7903      	ldrb	r3, [r0, #4]
 802239e:	2b43      	cmp	r3, #67	@ 0x43
 80223a0:	d1f1      	bne.n	8022386 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
 80223a2:	7943      	ldrb	r3, [r0, #5]
 80223a4:	2b2b      	cmp	r3, #43	@ 0x2b
 80223a6:	d1ee      	bne.n	8022386 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
 80223a8:	7983      	ldrb	r3, [r0, #6]
 80223aa:	2b2b      	cmp	r3, #43	@ 0x2b
 80223ac:	d1eb      	bne.n	8022386 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
 80223ae:	79c0      	ldrb	r0, [r0, #7]
 80223b0:	2801      	cmp	r0, #1
 80223b2:	bf8c      	ite	hi
 80223b4:	2000      	movhi	r0, #0
 80223b6:	2001      	movls	r0, #1
 80223b8:	4770      	bx	lr
 80223ba:	bf00      	nop

080223bc <__cxa_call_terminate>:
 80223bc:	b510      	push	{r4, lr}
 80223be:	b130      	cbz	r0, 80223ce <__cxa_call_terminate+0x12>
 80223c0:	4604      	mov	r4, r0
 80223c2:	f7ff fc41 	bl	8021c48 <__cxa_begin_catch>
 80223c6:	4620      	mov	r0, r4
 80223c8:	f7ff ffda 	bl	8022380 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 80223cc:	b908      	cbnz	r0, 80223d2 <__cxa_call_terminate+0x16>
 80223ce:	f7ff f905 	bl	80215dc <_ZSt9terminatev>
 80223d2:	f854 0c14 	ldr.w	r0, [r4, #-20]
 80223d6:	f7ff f8f9 	bl	80215cc <_ZN10__cxxabiv111__terminateEPFvvE>
 80223da:	bf00      	nop

080223dc <__cxa_call_unexpected>:
 80223dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80223e0:	b083      	sub	sp, #12
 80223e2:	4602      	mov	r2, r0
 80223e4:	f7ff ffcc 	bl	8022380 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 80223e8:	b138      	cbz	r0, 80223fa <__cxa_call_unexpected+0x1e>
 80223ea:	e952 8406 	ldrd	r8, r4, [r2, #-24]
 80223ee:	e9d2 750c 	ldrd	r7, r5, [r2, #48]	@ 0x30
 80223f2:	f8d2 a028 	ldr.w	sl, [r2, #40]	@ 0x28
 80223f6:	2600      	movs	r6, #0
 80223f8:	e005      	b.n	8022406 <__cxa_call_unexpected+0x2a>
 80223fa:	4604      	mov	r4, r0
 80223fc:	4680      	mov	r8, r0
 80223fe:	2601      	movs	r6, #1
 8022400:	4605      	mov	r5, r0
 8022402:	4607      	mov	r7, r0
 8022404:	4682      	mov	sl, r0
 8022406:	4610      	mov	r0, r2
 8022408:	f7ff fc1e 	bl	8021c48 <__cxa_begin_catch>
 802240c:	b10e      	cbz	r6, 8022412 <__cxa_call_unexpected+0x36>
 802240e:	f7ff f8f3 	bl	80215f8 <_ZSt10unexpectedv>
 8022412:	4640      	mov	r0, r8
 8022414:	f7ff f8ec 	bl	80215f0 <_ZN10__cxxabiv112__unexpectedEPFvvE>
 8022418:	f7ff fc16 	bl	8021c48 <__cxa_begin_catch>
 802241c:	b10e      	cbz	r6, 8022422 <__cxa_call_unexpected+0x46>
 802241e:	f7ff f8dd 	bl	80215dc <_ZSt9terminatev>
 8022422:	f7ff fc97 	bl	8021d54 <__cxa_get_globals_fast>
 8022426:	6803      	ldr	r3, [r0, #0]
 8022428:	f893 2027 	ldrb.w	r2, [r3, #39]	@ 0x27
 802242c:	2a01      	cmp	r2, #1
 802242e:	bf0c      	ite	eq
 8022430:	681a      	ldreq	r2, [r3, #0]
 8022432:	f103 0278 	addne.w	r2, r3, #120	@ 0x78
 8022436:	9200      	str	r2, [sp, #0]
 8022438:	f027 0803 	bic.w	r8, r7, #3
 802243c:	f103 0b20 	add.w	fp, r3, #32
 8022440:	f04f 0900 	mov.w	r9, #0
 8022444:	45ca      	cmp	sl, r9
 8022446:	dd1a      	ble.n	802247e <__cxa_call_unexpected+0xa2>
 8022448:	682f      	ldr	r7, [r5, #0]
 802244a:	b107      	cbz	r7, 802244e <__cxa_call_unexpected+0x72>
 802244c:	442f      	add	r7, r5
 802244e:	466b      	mov	r3, sp
 8022450:	2200      	movs	r2, #0
 8022452:	4639      	mov	r1, r7
 8022454:	4658      	mov	r0, fp
 8022456:	f7ff fb39 	bl	8021acc <__cxa_type_match>
 802245a:	b108      	cbz	r0, 8022460 <__cxa_call_unexpected+0x84>
 802245c:	f7ff f944 	bl	80216e8 <__cxa_rethrow>
 8022460:	683b      	ldr	r3, [r7, #0]
 8022462:	9001      	str	r0, [sp, #4]
 8022464:	490f      	ldr	r1, [pc, #60]	@ (80224a4 <__cxa_call_unexpected+0xc8>)
 8022466:	4638      	mov	r0, r7
 8022468:	aa01      	add	r2, sp, #4
 802246a:	691f      	ldr	r7, [r3, #16]
 802246c:	2301      	movs	r3, #1
 802246e:	47b8      	blx	r7
 8022470:	2800      	cmp	r0, #0
 8022472:	bf18      	it	ne
 8022474:	4606      	movne	r6, r0
 8022476:	f109 0901 	add.w	r9, r9, #1
 802247a:	4445      	add	r5, r8
 802247c:	e7e2      	b.n	8022444 <__cxa_call_unexpected+0x68>
 802247e:	b146      	cbz	r6, 8022492 <__cxa_call_unexpected+0xb6>
 8022480:	2004      	movs	r0, #4
 8022482:	f7ff f857 	bl	8021534 <__cxa_allocate_exception>
 8022486:	4b08      	ldr	r3, [pc, #32]	@ (80224a8 <__cxa_call_unexpected+0xcc>)
 8022488:	4a08      	ldr	r2, [pc, #32]	@ (80224ac <__cxa_call_unexpected+0xd0>)
 802248a:	4906      	ldr	r1, [pc, #24]	@ (80224a4 <__cxa_call_unexpected+0xc8>)
 802248c:	6003      	str	r3, [r0, #0]
 802248e:	f7ff f911 	bl	80216b4 <__cxa_throw>
 8022492:	4620      	mov	r0, r4
 8022494:	f7ff f89a 	bl	80215cc <_ZN10__cxxabiv111__terminateEPFvvE>
 8022498:	f7ff fc14 	bl	8021cc4 <__cxa_end_catch>
 802249c:	f7ff fc12 	bl	8021cc4 <__cxa_end_catch>
 80224a0:	f7ff fb0e 	bl	8021ac0 <__cxa_end_cleanup>
 80224a4:	080aeecc 	.word	0x080aeecc
 80224a8:	080aef34 	.word	0x080aef34
 80224ac:	080215b1 	.word	0x080215b1

080224b0 <exp>:
 80224b0:	b538      	push	{r3, r4, r5, lr}
 80224b2:	ed2d 8b02 	vpush	{d8}
 80224b6:	ec55 4b10 	vmov	r4, r5, d0
 80224ba:	f000 f88d 	bl	80225d8 <__ieee754_exp>
 80224be:	eeb0 8a40 	vmov.f32	s16, s0
 80224c2:	eef0 8a60 	vmov.f32	s17, s1
 80224c6:	ec45 4b10 	vmov	d0, r4, r5
 80224ca:	f000 f877 	bl	80225bc <finite>
 80224ce:	b168      	cbz	r0, 80224ec <exp+0x3c>
 80224d0:	a317      	add	r3, pc, #92	@ (adr r3, 8022530 <exp+0x80>)
 80224d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80224d6:	4620      	mov	r0, r4
 80224d8:	4629      	mov	r1, r5
 80224da:	f7e4 fb35 	bl	8006b48 <__aeabi_dcmpgt>
 80224de:	b160      	cbz	r0, 80224fa <exp+0x4a>
 80224e0:	f001 fc62 	bl	8023da8 <__errno>
 80224e4:	ed9f 8b0e 	vldr	d8, [pc, #56]	@ 8022520 <exp+0x70>
 80224e8:	2322      	movs	r3, #34	@ 0x22
 80224ea:	6003      	str	r3, [r0, #0]
 80224ec:	eeb0 0a48 	vmov.f32	s0, s16
 80224f0:	eef0 0a68 	vmov.f32	s1, s17
 80224f4:	ecbd 8b02 	vpop	{d8}
 80224f8:	bd38      	pop	{r3, r4, r5, pc}
 80224fa:	a30f      	add	r3, pc, #60	@ (adr r3, 8022538 <exp+0x88>)
 80224fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022500:	4620      	mov	r0, r4
 8022502:	4629      	mov	r1, r5
 8022504:	f7e4 fb02 	bl	8006b0c <__aeabi_dcmplt>
 8022508:	2800      	cmp	r0, #0
 802250a:	d0ef      	beq.n	80224ec <exp+0x3c>
 802250c:	f001 fc4c 	bl	8023da8 <__errno>
 8022510:	2322      	movs	r3, #34	@ 0x22
 8022512:	ed9f 8b05 	vldr	d8, [pc, #20]	@ 8022528 <exp+0x78>
 8022516:	6003      	str	r3, [r0, #0]
 8022518:	e7e8      	b.n	80224ec <exp+0x3c>
 802251a:	bf00      	nop
 802251c:	f3af 8000 	nop.w
 8022520:	00000000 	.word	0x00000000
 8022524:	7ff00000 	.word	0x7ff00000
	...
 8022530:	fefa39ef 	.word	0xfefa39ef
 8022534:	40862e42 	.word	0x40862e42
 8022538:	d52d3051 	.word	0xd52d3051
 802253c:	c0874910 	.word	0xc0874910

08022540 <log>:
 8022540:	b538      	push	{r3, r4, r5, lr}
 8022542:	ed2d 8b02 	vpush	{d8}
 8022546:	ec55 4b10 	vmov	r4, r5, d0
 802254a:	f000 fa0d 	bl	8022968 <__ieee754_log>
 802254e:	4622      	mov	r2, r4
 8022550:	462b      	mov	r3, r5
 8022552:	4620      	mov	r0, r4
 8022554:	4629      	mov	r1, r5
 8022556:	eeb0 8a40 	vmov.f32	s16, s0
 802255a:	eef0 8a60 	vmov.f32	s17, s1
 802255e:	f7e4 fafd 	bl	8006b5c <__aeabi_dcmpun>
 8022562:	b998      	cbnz	r0, 802258c <log+0x4c>
 8022564:	2200      	movs	r2, #0
 8022566:	2300      	movs	r3, #0
 8022568:	4620      	mov	r0, r4
 802256a:	4629      	mov	r1, r5
 802256c:	f7e4 faec 	bl	8006b48 <__aeabi_dcmpgt>
 8022570:	b960      	cbnz	r0, 802258c <log+0x4c>
 8022572:	2200      	movs	r2, #0
 8022574:	2300      	movs	r3, #0
 8022576:	4620      	mov	r0, r4
 8022578:	4629      	mov	r1, r5
 802257a:	f7e4 fabd 	bl	8006af8 <__aeabi_dcmpeq>
 802257e:	b160      	cbz	r0, 802259a <log+0x5a>
 8022580:	f001 fc12 	bl	8023da8 <__errno>
 8022584:	ed9f 8b0a 	vldr	d8, [pc, #40]	@ 80225b0 <log+0x70>
 8022588:	2322      	movs	r3, #34	@ 0x22
 802258a:	6003      	str	r3, [r0, #0]
 802258c:	eeb0 0a48 	vmov.f32	s0, s16
 8022590:	eef0 0a68 	vmov.f32	s1, s17
 8022594:	ecbd 8b02 	vpop	{d8}
 8022598:	bd38      	pop	{r3, r4, r5, pc}
 802259a:	f001 fc05 	bl	8023da8 <__errno>
 802259e:	ecbd 8b02 	vpop	{d8}
 80225a2:	2321      	movs	r3, #33	@ 0x21
 80225a4:	6003      	str	r3, [r0, #0]
 80225a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80225aa:	4803      	ldr	r0, [pc, #12]	@ (80225b8 <log+0x78>)
 80225ac:	f000 b9d4 	b.w	8022958 <nan>
 80225b0:	00000000 	.word	0x00000000
 80225b4:	fff00000 	.word	0xfff00000
 80225b8:	080afcf6 	.word	0x080afcf6

080225bc <finite>:
 80225bc:	b082      	sub	sp, #8
 80225be:	ed8d 0b00 	vstr	d0, [sp]
 80225c2:	9801      	ldr	r0, [sp, #4]
 80225c4:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 80225c8:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 80225cc:	0fc0      	lsrs	r0, r0, #31
 80225ce:	b002      	add	sp, #8
 80225d0:	4770      	bx	lr
 80225d2:	0000      	movs	r0, r0
 80225d4:	0000      	movs	r0, r0
	...

080225d8 <__ieee754_exp>:
 80225d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80225dc:	ec55 4b10 	vmov	r4, r5, d0
 80225e0:	49b1      	ldr	r1, [pc, #708]	@ (80228a8 <__ieee754_exp+0x2d0>)
 80225e2:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 80225e6:	428a      	cmp	r2, r1
 80225e8:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 80225ec:	d936      	bls.n	802265c <__ieee754_exp+0x84>
 80225ee:	49af      	ldr	r1, [pc, #700]	@ (80228ac <__ieee754_exp+0x2d4>)
 80225f0:	428a      	cmp	r2, r1
 80225f2:	d914      	bls.n	802261e <__ieee754_exp+0x46>
 80225f4:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80225f8:	4323      	orrs	r3, r4
 80225fa:	4622      	mov	r2, r4
 80225fc:	d007      	beq.n	802260e <__ieee754_exp+0x36>
 80225fe:	462b      	mov	r3, r5
 8022600:	4620      	mov	r0, r4
 8022602:	4629      	mov	r1, r5
 8022604:	f7e3 fe5a 	bl	80062bc <__adddf3>
 8022608:	4604      	mov	r4, r0
 802260a:	460d      	mov	r5, r1
 802260c:	e002      	b.n	8022614 <__ieee754_exp+0x3c>
 802260e:	2e00      	cmp	r6, #0
 8022610:	f040 8118 	bne.w	8022844 <__ieee754_exp+0x26c>
 8022614:	ec45 4b10 	vmov	d0, r4, r5
 8022618:	b004      	add	sp, #16
 802261a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802261e:	a38c      	add	r3, pc, #560	@ (adr r3, 8022850 <__ieee754_exp+0x278>)
 8022620:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022624:	4620      	mov	r0, r4
 8022626:	4629      	mov	r1, r5
 8022628:	f7e4 fa8e 	bl	8006b48 <__aeabi_dcmpgt>
 802262c:	4607      	mov	r7, r0
 802262e:	b128      	cbz	r0, 802263c <__ieee754_exp+0x64>
 8022630:	2000      	movs	r0, #0
 8022632:	b004      	add	sp, #16
 8022634:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8022638:	f000 bb82 	b.w	8022d40 <__math_oflow>
 802263c:	a386      	add	r3, pc, #536	@ (adr r3, 8022858 <__ieee754_exp+0x280>)
 802263e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022642:	4620      	mov	r0, r4
 8022644:	4629      	mov	r1, r5
 8022646:	f7e4 fa61 	bl	8006b0c <__aeabi_dcmplt>
 802264a:	2800      	cmp	r0, #0
 802264c:	f000 8087 	beq.w	802275e <__ieee754_exp+0x186>
 8022650:	4638      	mov	r0, r7
 8022652:	b004      	add	sp, #16
 8022654:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8022658:	f000 bb6a 	b.w	8022d30 <__math_uflow>
 802265c:	4b94      	ldr	r3, [pc, #592]	@ (80228b0 <__ieee754_exp+0x2d8>)
 802265e:	429a      	cmp	r2, r3
 8022660:	f240 80a9 	bls.w	80227b6 <__ieee754_exp+0x1de>
 8022664:	4b93      	ldr	r3, [pc, #588]	@ (80228b4 <__ieee754_exp+0x2dc>)
 8022666:	429a      	cmp	r2, r3
 8022668:	d879      	bhi.n	802275e <__ieee754_exp+0x186>
 802266a:	4b93      	ldr	r3, [pc, #588]	@ (80228b8 <__ieee754_exp+0x2e0>)
 802266c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8022670:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022674:	4620      	mov	r0, r4
 8022676:	4629      	mov	r1, r5
 8022678:	f7e3 fe1e 	bl	80062b8 <__aeabi_dsub>
 802267c:	4b8f      	ldr	r3, [pc, #572]	@ (80228bc <__ieee754_exp+0x2e4>)
 802267e:	00f7      	lsls	r7, r6, #3
 8022680:	443b      	add	r3, r7
 8022682:	ed93 7b00 	vldr	d7, [r3]
 8022686:	ed8d 7b00 	vstr	d7, [sp]
 802268a:	f1c6 0a01 	rsb	sl, r6, #1
 802268e:	4680      	mov	r8, r0
 8022690:	4689      	mov	r9, r1
 8022692:	ebaa 0a06 	sub.w	sl, sl, r6
 8022696:	e9dd 2300 	ldrd	r2, r3, [sp]
 802269a:	4640      	mov	r0, r8
 802269c:	4649      	mov	r1, r9
 802269e:	f7e3 fe0b 	bl	80062b8 <__aeabi_dsub>
 80226a2:	4604      	mov	r4, r0
 80226a4:	460d      	mov	r5, r1
 80226a6:	4622      	mov	r2, r4
 80226a8:	462b      	mov	r3, r5
 80226aa:	4620      	mov	r0, r4
 80226ac:	4629      	mov	r1, r5
 80226ae:	f7e3 ffbb 	bl	8006628 <__aeabi_dmul>
 80226b2:	a36b      	add	r3, pc, #428	@ (adr r3, 8022860 <__ieee754_exp+0x288>)
 80226b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80226b8:	4606      	mov	r6, r0
 80226ba:	460f      	mov	r7, r1
 80226bc:	f7e3 ffb4 	bl	8006628 <__aeabi_dmul>
 80226c0:	a369      	add	r3, pc, #420	@ (adr r3, 8022868 <__ieee754_exp+0x290>)
 80226c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80226c6:	f7e3 fdf7 	bl	80062b8 <__aeabi_dsub>
 80226ca:	4632      	mov	r2, r6
 80226cc:	463b      	mov	r3, r7
 80226ce:	f7e3 ffab 	bl	8006628 <__aeabi_dmul>
 80226d2:	a367      	add	r3, pc, #412	@ (adr r3, 8022870 <__ieee754_exp+0x298>)
 80226d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80226d8:	f7e3 fdf0 	bl	80062bc <__adddf3>
 80226dc:	4632      	mov	r2, r6
 80226de:	463b      	mov	r3, r7
 80226e0:	f7e3 ffa2 	bl	8006628 <__aeabi_dmul>
 80226e4:	a364      	add	r3, pc, #400	@ (adr r3, 8022878 <__ieee754_exp+0x2a0>)
 80226e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80226ea:	f7e3 fde5 	bl	80062b8 <__aeabi_dsub>
 80226ee:	4632      	mov	r2, r6
 80226f0:	463b      	mov	r3, r7
 80226f2:	f7e3 ff99 	bl	8006628 <__aeabi_dmul>
 80226f6:	a362      	add	r3, pc, #392	@ (adr r3, 8022880 <__ieee754_exp+0x2a8>)
 80226f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80226fc:	f7e3 fdde 	bl	80062bc <__adddf3>
 8022700:	4632      	mov	r2, r6
 8022702:	463b      	mov	r3, r7
 8022704:	f7e3 ff90 	bl	8006628 <__aeabi_dmul>
 8022708:	4602      	mov	r2, r0
 802270a:	460b      	mov	r3, r1
 802270c:	4620      	mov	r0, r4
 802270e:	4629      	mov	r1, r5
 8022710:	f7e3 fdd2 	bl	80062b8 <__aeabi_dsub>
 8022714:	4602      	mov	r2, r0
 8022716:	460b      	mov	r3, r1
 8022718:	4606      	mov	r6, r0
 802271a:	460f      	mov	r7, r1
 802271c:	4620      	mov	r0, r4
 802271e:	4629      	mov	r1, r5
 8022720:	f7e3 ff82 	bl	8006628 <__aeabi_dmul>
 8022724:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8022728:	f1ba 0f00 	cmp.w	sl, #0
 802272c:	d15c      	bne.n	80227e8 <__ieee754_exp+0x210>
 802272e:	2200      	movs	r2, #0
 8022730:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8022734:	4630      	mov	r0, r6
 8022736:	4639      	mov	r1, r7
 8022738:	f7e3 fdbe 	bl	80062b8 <__aeabi_dsub>
 802273c:	4602      	mov	r2, r0
 802273e:	460b      	mov	r3, r1
 8022740:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8022744:	f7e4 f89a 	bl	800687c <__aeabi_ddiv>
 8022748:	4622      	mov	r2, r4
 802274a:	462b      	mov	r3, r5
 802274c:	f7e3 fdb4 	bl	80062b8 <__aeabi_dsub>
 8022750:	4602      	mov	r2, r0
 8022752:	460b      	mov	r3, r1
 8022754:	2000      	movs	r0, #0
 8022756:	495a      	ldr	r1, [pc, #360]	@ (80228c0 <__ieee754_exp+0x2e8>)
 8022758:	f7e3 fdae 	bl	80062b8 <__aeabi_dsub>
 802275c:	e754      	b.n	8022608 <__ieee754_exp+0x30>
 802275e:	4b59      	ldr	r3, [pc, #356]	@ (80228c4 <__ieee754_exp+0x2ec>)
 8022760:	4620      	mov	r0, r4
 8022762:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8022766:	4629      	mov	r1, r5
 8022768:	a347      	add	r3, pc, #284	@ (adr r3, 8022888 <__ieee754_exp+0x2b0>)
 802276a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802276e:	f7e3 ff5b 	bl	8006628 <__aeabi_dmul>
 8022772:	e9d6 2300 	ldrd	r2, r3, [r6]
 8022776:	f7e3 fda1 	bl	80062bc <__adddf3>
 802277a:	f7e4 fa05 	bl	8006b88 <__aeabi_d2iz>
 802277e:	4682      	mov	sl, r0
 8022780:	f7e3 fee8 	bl	8006554 <__aeabi_i2d>
 8022784:	a342      	add	r3, pc, #264	@ (adr r3, 8022890 <__ieee754_exp+0x2b8>)
 8022786:	e9d3 2300 	ldrd	r2, r3, [r3]
 802278a:	4606      	mov	r6, r0
 802278c:	460f      	mov	r7, r1
 802278e:	f7e3 ff4b 	bl	8006628 <__aeabi_dmul>
 8022792:	4602      	mov	r2, r0
 8022794:	460b      	mov	r3, r1
 8022796:	4620      	mov	r0, r4
 8022798:	4629      	mov	r1, r5
 802279a:	f7e3 fd8d 	bl	80062b8 <__aeabi_dsub>
 802279e:	a33e      	add	r3, pc, #248	@ (adr r3, 8022898 <__ieee754_exp+0x2c0>)
 80227a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80227a4:	4680      	mov	r8, r0
 80227a6:	4689      	mov	r9, r1
 80227a8:	4630      	mov	r0, r6
 80227aa:	4639      	mov	r1, r7
 80227ac:	f7e3 ff3c 	bl	8006628 <__aeabi_dmul>
 80227b0:	e9cd 0100 	strd	r0, r1, [sp]
 80227b4:	e76f      	b.n	8022696 <__ieee754_exp+0xbe>
 80227b6:	4b44      	ldr	r3, [pc, #272]	@ (80228c8 <__ieee754_exp+0x2f0>)
 80227b8:	429a      	cmp	r2, r3
 80227ba:	d810      	bhi.n	80227de <__ieee754_exp+0x206>
 80227bc:	a338      	add	r3, pc, #224	@ (adr r3, 80228a0 <__ieee754_exp+0x2c8>)
 80227be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80227c2:	4620      	mov	r0, r4
 80227c4:	4629      	mov	r1, r5
 80227c6:	f7e3 fd79 	bl	80062bc <__adddf3>
 80227ca:	4b3d      	ldr	r3, [pc, #244]	@ (80228c0 <__ieee754_exp+0x2e8>)
 80227cc:	2200      	movs	r2, #0
 80227ce:	f7e4 f9bb 	bl	8006b48 <__aeabi_dcmpgt>
 80227d2:	b138      	cbz	r0, 80227e4 <__ieee754_exp+0x20c>
 80227d4:	4b3a      	ldr	r3, [pc, #232]	@ (80228c0 <__ieee754_exp+0x2e8>)
 80227d6:	2200      	movs	r2, #0
 80227d8:	4620      	mov	r0, r4
 80227da:	4629      	mov	r1, r5
 80227dc:	e712      	b.n	8022604 <__ieee754_exp+0x2c>
 80227de:	f04f 0a00 	mov.w	sl, #0
 80227e2:	e760      	b.n	80226a6 <__ieee754_exp+0xce>
 80227e4:	4682      	mov	sl, r0
 80227e6:	e75e      	b.n	80226a6 <__ieee754_exp+0xce>
 80227e8:	4632      	mov	r2, r6
 80227ea:	463b      	mov	r3, r7
 80227ec:	2000      	movs	r0, #0
 80227ee:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80227f2:	f7e3 fd61 	bl	80062b8 <__aeabi_dsub>
 80227f6:	4602      	mov	r2, r0
 80227f8:	460b      	mov	r3, r1
 80227fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80227fe:	f7e4 f83d 	bl	800687c <__aeabi_ddiv>
 8022802:	4602      	mov	r2, r0
 8022804:	460b      	mov	r3, r1
 8022806:	e9dd 0100 	ldrd	r0, r1, [sp]
 802280a:	f7e3 fd55 	bl	80062b8 <__aeabi_dsub>
 802280e:	4642      	mov	r2, r8
 8022810:	464b      	mov	r3, r9
 8022812:	f7e3 fd51 	bl	80062b8 <__aeabi_dsub>
 8022816:	4602      	mov	r2, r0
 8022818:	460b      	mov	r3, r1
 802281a:	2000      	movs	r0, #0
 802281c:	4928      	ldr	r1, [pc, #160]	@ (80228c0 <__ieee754_exp+0x2e8>)
 802281e:	f7e3 fd4b 	bl	80062b8 <__aeabi_dsub>
 8022822:	f46f 727f 	mvn.w	r2, #1020	@ 0x3fc
 8022826:	4592      	cmp	sl, r2
 8022828:	db02      	blt.n	8022830 <__ieee754_exp+0x258>
 802282a:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 802282e:	e6eb      	b.n	8022608 <__ieee754_exp+0x30>
 8022830:	f50a 7a7a 	add.w	sl, sl, #1000	@ 0x3e8
 8022834:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8022838:	2200      	movs	r2, #0
 802283a:	f04f 73b8 	mov.w	r3, #24117248	@ 0x1700000
 802283e:	f7e3 fef3 	bl	8006628 <__aeabi_dmul>
 8022842:	e6e1      	b.n	8022608 <__ieee754_exp+0x30>
 8022844:	2400      	movs	r4, #0
 8022846:	2500      	movs	r5, #0
 8022848:	e6e4      	b.n	8022614 <__ieee754_exp+0x3c>
 802284a:	bf00      	nop
 802284c:	f3af 8000 	nop.w
 8022850:	fefa39ef 	.word	0xfefa39ef
 8022854:	40862e42 	.word	0x40862e42
 8022858:	d52d3051 	.word	0xd52d3051
 802285c:	c0874910 	.word	0xc0874910
 8022860:	72bea4d0 	.word	0x72bea4d0
 8022864:	3e663769 	.word	0x3e663769
 8022868:	c5d26bf1 	.word	0xc5d26bf1
 802286c:	3ebbbd41 	.word	0x3ebbbd41
 8022870:	af25de2c 	.word	0xaf25de2c
 8022874:	3f11566a 	.word	0x3f11566a
 8022878:	16bebd93 	.word	0x16bebd93
 802287c:	3f66c16c 	.word	0x3f66c16c
 8022880:	5555553e 	.word	0x5555553e
 8022884:	3fc55555 	.word	0x3fc55555
 8022888:	652b82fe 	.word	0x652b82fe
 802288c:	3ff71547 	.word	0x3ff71547
 8022890:	fee00000 	.word	0xfee00000
 8022894:	3fe62e42 	.word	0x3fe62e42
 8022898:	35793c76 	.word	0x35793c76
 802289c:	3dea39ef 	.word	0x3dea39ef
 80228a0:	8800759c 	.word	0x8800759c
 80228a4:	7e37e43c 	.word	0x7e37e43c
 80228a8:	40862e41 	.word	0x40862e41
 80228ac:	7fefffff 	.word	0x7fefffff
 80228b0:	3fd62e42 	.word	0x3fd62e42
 80228b4:	3ff0a2b1 	.word	0x3ff0a2b1
 80228b8:	080af970 	.word	0x080af970
 80228bc:	080af960 	.word	0x080af960
 80228c0:	3ff00000 	.word	0x3ff00000
 80228c4:	080af980 	.word	0x080af980
 80228c8:	3defffff 	.word	0x3defffff

080228cc <round>:
 80228cc:	ec51 0b10 	vmov	r0, r1, d0
 80228d0:	b570      	push	{r4, r5, r6, lr}
 80228d2:	f3c1 540a 	ubfx	r4, r1, #20, #11
 80228d6:	f2a4 32ff 	subw	r2, r4, #1023	@ 0x3ff
 80228da:	2a13      	cmp	r2, #19
 80228dc:	460b      	mov	r3, r1
 80228de:	4605      	mov	r5, r0
 80228e0:	dc1b      	bgt.n	802291a <round+0x4e>
 80228e2:	2a00      	cmp	r2, #0
 80228e4:	da0b      	bge.n	80228fe <round+0x32>
 80228e6:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 80228ea:	3201      	adds	r2, #1
 80228ec:	bf04      	itt	eq
 80228ee:	f043 537f 	orreq.w	r3, r3, #1069547520	@ 0x3fc00000
 80228f2:	f443 1340 	orreq.w	r3, r3, #3145728	@ 0x300000
 80228f6:	2200      	movs	r2, #0
 80228f8:	4619      	mov	r1, r3
 80228fa:	4610      	mov	r0, r2
 80228fc:	e015      	b.n	802292a <round+0x5e>
 80228fe:	4c15      	ldr	r4, [pc, #84]	@ (8022954 <round+0x88>)
 8022900:	4114      	asrs	r4, r2
 8022902:	ea04 0601 	and.w	r6, r4, r1
 8022906:	4306      	orrs	r6, r0
 8022908:	d00f      	beq.n	802292a <round+0x5e>
 802290a:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 802290e:	fa41 f202 	asr.w	r2, r1, r2
 8022912:	4413      	add	r3, r2
 8022914:	ea23 0304 	bic.w	r3, r3, r4
 8022918:	e7ed      	b.n	80228f6 <round+0x2a>
 802291a:	2a33      	cmp	r2, #51	@ 0x33
 802291c:	dd08      	ble.n	8022930 <round+0x64>
 802291e:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8022922:	d102      	bne.n	802292a <round+0x5e>
 8022924:	4602      	mov	r2, r0
 8022926:	f7e3 fcc9 	bl	80062bc <__adddf3>
 802292a:	ec41 0b10 	vmov	d0, r0, r1
 802292e:	bd70      	pop	{r4, r5, r6, pc}
 8022930:	f2a4 4613 	subw	r6, r4, #1043	@ 0x413
 8022934:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8022938:	40f4      	lsrs	r4, r6
 802293a:	4204      	tst	r4, r0
 802293c:	d0f5      	beq.n	802292a <round+0x5e>
 802293e:	f1c2 0133 	rsb	r1, r2, #51	@ 0x33
 8022942:	2201      	movs	r2, #1
 8022944:	408a      	lsls	r2, r1
 8022946:	1952      	adds	r2, r2, r5
 8022948:	bf28      	it	cs
 802294a:	3301      	addcs	r3, #1
 802294c:	ea22 0204 	bic.w	r2, r2, r4
 8022950:	e7d2      	b.n	80228f8 <round+0x2c>
 8022952:	bf00      	nop
 8022954:	000fffff 	.word	0x000fffff

08022958 <nan>:
 8022958:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8022960 <nan+0x8>
 802295c:	4770      	bx	lr
 802295e:	bf00      	nop
 8022960:	00000000 	.word	0x00000000
 8022964:	7ff80000 	.word	0x7ff80000

08022968 <__ieee754_log>:
 8022968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802296c:	ec51 0b10 	vmov	r0, r1, d0
 8022970:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8022974:	b087      	sub	sp, #28
 8022976:	460d      	mov	r5, r1
 8022978:	da26      	bge.n	80229c8 <__ieee754_log+0x60>
 802297a:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 802297e:	4303      	orrs	r3, r0
 8022980:	4602      	mov	r2, r0
 8022982:	d10a      	bne.n	802299a <__ieee754_log+0x32>
 8022984:	49ce      	ldr	r1, [pc, #824]	@ (8022cc0 <__ieee754_log+0x358>)
 8022986:	2200      	movs	r2, #0
 8022988:	2300      	movs	r3, #0
 802298a:	2000      	movs	r0, #0
 802298c:	f7e3 ff76 	bl	800687c <__aeabi_ddiv>
 8022990:	ec41 0b10 	vmov	d0, r0, r1
 8022994:	b007      	add	sp, #28
 8022996:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802299a:	2900      	cmp	r1, #0
 802299c:	da05      	bge.n	80229aa <__ieee754_log+0x42>
 802299e:	460b      	mov	r3, r1
 80229a0:	f7e3 fc8a 	bl	80062b8 <__aeabi_dsub>
 80229a4:	2200      	movs	r2, #0
 80229a6:	2300      	movs	r3, #0
 80229a8:	e7f0      	b.n	802298c <__ieee754_log+0x24>
 80229aa:	4bc6      	ldr	r3, [pc, #792]	@ (8022cc4 <__ieee754_log+0x35c>)
 80229ac:	2200      	movs	r2, #0
 80229ae:	f7e3 fe3b 	bl	8006628 <__aeabi_dmul>
 80229b2:	f06f 0335 	mvn.w	r3, #53	@ 0x35
 80229b6:	460d      	mov	r5, r1
 80229b8:	4ac3      	ldr	r2, [pc, #780]	@ (8022cc8 <__ieee754_log+0x360>)
 80229ba:	4295      	cmp	r5, r2
 80229bc:	dd06      	ble.n	80229cc <__ieee754_log+0x64>
 80229be:	4602      	mov	r2, r0
 80229c0:	460b      	mov	r3, r1
 80229c2:	f7e3 fc7b 	bl	80062bc <__adddf3>
 80229c6:	e7e3      	b.n	8022990 <__ieee754_log+0x28>
 80229c8:	2300      	movs	r3, #0
 80229ca:	e7f5      	b.n	80229b8 <__ieee754_log+0x50>
 80229cc:	152c      	asrs	r4, r5, #20
 80229ce:	f2a4 34ff 	subw	r4, r4, #1023	@ 0x3ff
 80229d2:	f3c5 0513 	ubfx	r5, r5, #0, #20
 80229d6:	441c      	add	r4, r3
 80229d8:	f505 2315 	add.w	r3, r5, #610304	@ 0x95000
 80229dc:	f603 7364 	addw	r3, r3, #3940	@ 0xf64
 80229e0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80229e4:	f083 527f 	eor.w	r2, r3, #1069547520	@ 0x3fc00000
 80229e8:	f482 1240 	eor.w	r2, r2, #3145728	@ 0x300000
 80229ec:	ea42 0105 	orr.w	r1, r2, r5
 80229f0:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 80229f4:	2200      	movs	r2, #0
 80229f6:	4bb5      	ldr	r3, [pc, #724]	@ (8022ccc <__ieee754_log+0x364>)
 80229f8:	f7e3 fc5e 	bl	80062b8 <__aeabi_dsub>
 80229fc:	1cab      	adds	r3, r5, #2
 80229fe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8022a02:	2b02      	cmp	r3, #2
 8022a04:	4682      	mov	sl, r0
 8022a06:	468b      	mov	fp, r1
 8022a08:	f04f 0200 	mov.w	r2, #0
 8022a0c:	dc53      	bgt.n	8022ab6 <__ieee754_log+0x14e>
 8022a0e:	2300      	movs	r3, #0
 8022a10:	f7e4 f872 	bl	8006af8 <__aeabi_dcmpeq>
 8022a14:	b1d0      	cbz	r0, 8022a4c <__ieee754_log+0xe4>
 8022a16:	2c00      	cmp	r4, #0
 8022a18:	f000 8120 	beq.w	8022c5c <__ieee754_log+0x2f4>
 8022a1c:	4620      	mov	r0, r4
 8022a1e:	f7e3 fd99 	bl	8006554 <__aeabi_i2d>
 8022a22:	a391      	add	r3, pc, #580	@ (adr r3, 8022c68 <__ieee754_log+0x300>)
 8022a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022a28:	4606      	mov	r6, r0
 8022a2a:	460f      	mov	r7, r1
 8022a2c:	f7e3 fdfc 	bl	8006628 <__aeabi_dmul>
 8022a30:	a38f      	add	r3, pc, #572	@ (adr r3, 8022c70 <__ieee754_log+0x308>)
 8022a32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022a36:	4604      	mov	r4, r0
 8022a38:	460d      	mov	r5, r1
 8022a3a:	4630      	mov	r0, r6
 8022a3c:	4639      	mov	r1, r7
 8022a3e:	f7e3 fdf3 	bl	8006628 <__aeabi_dmul>
 8022a42:	4602      	mov	r2, r0
 8022a44:	460b      	mov	r3, r1
 8022a46:	4620      	mov	r0, r4
 8022a48:	4629      	mov	r1, r5
 8022a4a:	e7ba      	b.n	80229c2 <__ieee754_log+0x5a>
 8022a4c:	a38a      	add	r3, pc, #552	@ (adr r3, 8022c78 <__ieee754_log+0x310>)
 8022a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022a52:	4650      	mov	r0, sl
 8022a54:	4659      	mov	r1, fp
 8022a56:	f7e3 fde7 	bl	8006628 <__aeabi_dmul>
 8022a5a:	4602      	mov	r2, r0
 8022a5c:	460b      	mov	r3, r1
 8022a5e:	2000      	movs	r0, #0
 8022a60:	499b      	ldr	r1, [pc, #620]	@ (8022cd0 <__ieee754_log+0x368>)
 8022a62:	f7e3 fc29 	bl	80062b8 <__aeabi_dsub>
 8022a66:	4652      	mov	r2, sl
 8022a68:	4606      	mov	r6, r0
 8022a6a:	460f      	mov	r7, r1
 8022a6c:	465b      	mov	r3, fp
 8022a6e:	4650      	mov	r0, sl
 8022a70:	4659      	mov	r1, fp
 8022a72:	f7e3 fdd9 	bl	8006628 <__aeabi_dmul>
 8022a76:	4602      	mov	r2, r0
 8022a78:	460b      	mov	r3, r1
 8022a7a:	4630      	mov	r0, r6
 8022a7c:	4639      	mov	r1, r7
 8022a7e:	f7e3 fdd3 	bl	8006628 <__aeabi_dmul>
 8022a82:	4606      	mov	r6, r0
 8022a84:	460f      	mov	r7, r1
 8022a86:	b914      	cbnz	r4, 8022a8e <__ieee754_log+0x126>
 8022a88:	4632      	mov	r2, r6
 8022a8a:	463b      	mov	r3, r7
 8022a8c:	e0a0      	b.n	8022bd0 <__ieee754_log+0x268>
 8022a8e:	4620      	mov	r0, r4
 8022a90:	f7e3 fd60 	bl	8006554 <__aeabi_i2d>
 8022a94:	a374      	add	r3, pc, #464	@ (adr r3, 8022c68 <__ieee754_log+0x300>)
 8022a96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022a9a:	4680      	mov	r8, r0
 8022a9c:	4689      	mov	r9, r1
 8022a9e:	f7e3 fdc3 	bl	8006628 <__aeabi_dmul>
 8022aa2:	a373      	add	r3, pc, #460	@ (adr r3, 8022c70 <__ieee754_log+0x308>)
 8022aa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022aa8:	4604      	mov	r4, r0
 8022aaa:	460d      	mov	r5, r1
 8022aac:	4640      	mov	r0, r8
 8022aae:	4649      	mov	r1, r9
 8022ab0:	f7e3 fdba 	bl	8006628 <__aeabi_dmul>
 8022ab4:	e0a5      	b.n	8022c02 <__ieee754_log+0x29a>
 8022ab6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8022aba:	f7e3 fbff 	bl	80062bc <__adddf3>
 8022abe:	4602      	mov	r2, r0
 8022ac0:	460b      	mov	r3, r1
 8022ac2:	4650      	mov	r0, sl
 8022ac4:	4659      	mov	r1, fp
 8022ac6:	f7e3 fed9 	bl	800687c <__aeabi_ddiv>
 8022aca:	e9cd 0100 	strd	r0, r1, [sp]
 8022ace:	4620      	mov	r0, r4
 8022ad0:	f7e3 fd40 	bl	8006554 <__aeabi_i2d>
 8022ad4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8022ad8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8022adc:	4610      	mov	r0, r2
 8022ade:	4619      	mov	r1, r3
 8022ae0:	f7e3 fda2 	bl	8006628 <__aeabi_dmul>
 8022ae4:	4602      	mov	r2, r0
 8022ae6:	460b      	mov	r3, r1
 8022ae8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8022aec:	f7e3 fd9c 	bl	8006628 <__aeabi_dmul>
 8022af0:	a363      	add	r3, pc, #396	@ (adr r3, 8022c80 <__ieee754_log+0x318>)
 8022af2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022af6:	4680      	mov	r8, r0
 8022af8:	4689      	mov	r9, r1
 8022afa:	f7e3 fd95 	bl	8006628 <__aeabi_dmul>
 8022afe:	a362      	add	r3, pc, #392	@ (adr r3, 8022c88 <__ieee754_log+0x320>)
 8022b00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022b04:	f7e3 fbda 	bl	80062bc <__adddf3>
 8022b08:	4642      	mov	r2, r8
 8022b0a:	464b      	mov	r3, r9
 8022b0c:	f7e3 fd8c 	bl	8006628 <__aeabi_dmul>
 8022b10:	a35f      	add	r3, pc, #380	@ (adr r3, 8022c90 <__ieee754_log+0x328>)
 8022b12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022b16:	f7e3 fbd1 	bl	80062bc <__adddf3>
 8022b1a:	4642      	mov	r2, r8
 8022b1c:	464b      	mov	r3, r9
 8022b1e:	f7e3 fd83 	bl	8006628 <__aeabi_dmul>
 8022b22:	a35d      	add	r3, pc, #372	@ (adr r3, 8022c98 <__ieee754_log+0x330>)
 8022b24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022b28:	f7e3 fbc8 	bl	80062bc <__adddf3>
 8022b2c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8022b30:	f7e3 fd7a 	bl	8006628 <__aeabi_dmul>
 8022b34:	a35a      	add	r3, pc, #360	@ (adr r3, 8022ca0 <__ieee754_log+0x338>)
 8022b36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022b3a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8022b3e:	4640      	mov	r0, r8
 8022b40:	4649      	mov	r1, r9
 8022b42:	f7e3 fd71 	bl	8006628 <__aeabi_dmul>
 8022b46:	a358      	add	r3, pc, #352	@ (adr r3, 8022ca8 <__ieee754_log+0x340>)
 8022b48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022b4c:	f7e3 fbb6 	bl	80062bc <__adddf3>
 8022b50:	4642      	mov	r2, r8
 8022b52:	464b      	mov	r3, r9
 8022b54:	f7e3 fd68 	bl	8006628 <__aeabi_dmul>
 8022b58:	a355      	add	r3, pc, #340	@ (adr r3, 8022cb0 <__ieee754_log+0x348>)
 8022b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022b5e:	f7e3 fbad 	bl	80062bc <__adddf3>
 8022b62:	4642      	mov	r2, r8
 8022b64:	464b      	mov	r3, r9
 8022b66:	f7e3 fd5f 	bl	8006628 <__aeabi_dmul>
 8022b6a:	f5a5 26c2 	sub.w	r6, r5, #397312	@ 0x61000
 8022b6e:	4602      	mov	r2, r0
 8022b70:	460b      	mov	r3, r1
 8022b72:	f5c5 25d7 	rsb	r5, r5, #440320	@ 0x6b800
 8022b76:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8022b7a:	f7e3 fb9f 	bl	80062bc <__adddf3>
 8022b7e:	f2a6 467a 	subw	r6, r6, #1146	@ 0x47a
 8022b82:	3551      	adds	r5, #81	@ 0x51
 8022b84:	4335      	orrs	r5, r6
 8022b86:	2d00      	cmp	r5, #0
 8022b88:	4680      	mov	r8, r0
 8022b8a:	4689      	mov	r9, r1
 8022b8c:	dd48      	ble.n	8022c20 <__ieee754_log+0x2b8>
 8022b8e:	4b50      	ldr	r3, [pc, #320]	@ (8022cd0 <__ieee754_log+0x368>)
 8022b90:	2200      	movs	r2, #0
 8022b92:	4650      	mov	r0, sl
 8022b94:	4659      	mov	r1, fp
 8022b96:	f7e3 fd47 	bl	8006628 <__aeabi_dmul>
 8022b9a:	4652      	mov	r2, sl
 8022b9c:	465b      	mov	r3, fp
 8022b9e:	f7e3 fd43 	bl	8006628 <__aeabi_dmul>
 8022ba2:	4602      	mov	r2, r0
 8022ba4:	460b      	mov	r3, r1
 8022ba6:	4606      	mov	r6, r0
 8022ba8:	460f      	mov	r7, r1
 8022baa:	4640      	mov	r0, r8
 8022bac:	4649      	mov	r1, r9
 8022bae:	f7e3 fb85 	bl	80062bc <__adddf3>
 8022bb2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8022bb6:	f7e3 fd37 	bl	8006628 <__aeabi_dmul>
 8022bba:	4680      	mov	r8, r0
 8022bbc:	4689      	mov	r9, r1
 8022bbe:	b964      	cbnz	r4, 8022bda <__ieee754_log+0x272>
 8022bc0:	4602      	mov	r2, r0
 8022bc2:	460b      	mov	r3, r1
 8022bc4:	4630      	mov	r0, r6
 8022bc6:	4639      	mov	r1, r7
 8022bc8:	f7e3 fb76 	bl	80062b8 <__aeabi_dsub>
 8022bcc:	4602      	mov	r2, r0
 8022bce:	460b      	mov	r3, r1
 8022bd0:	4650      	mov	r0, sl
 8022bd2:	4659      	mov	r1, fp
 8022bd4:	f7e3 fb70 	bl	80062b8 <__aeabi_dsub>
 8022bd8:	e6da      	b.n	8022990 <__ieee754_log+0x28>
 8022bda:	a323      	add	r3, pc, #140	@ (adr r3, 8022c68 <__ieee754_log+0x300>)
 8022bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022be0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8022be4:	f7e3 fd20 	bl	8006628 <__aeabi_dmul>
 8022be8:	a321      	add	r3, pc, #132	@ (adr r3, 8022c70 <__ieee754_log+0x308>)
 8022bea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022bee:	4604      	mov	r4, r0
 8022bf0:	460d      	mov	r5, r1
 8022bf2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8022bf6:	f7e3 fd17 	bl	8006628 <__aeabi_dmul>
 8022bfa:	4642      	mov	r2, r8
 8022bfc:	464b      	mov	r3, r9
 8022bfe:	f7e3 fb5d 	bl	80062bc <__adddf3>
 8022c02:	4602      	mov	r2, r0
 8022c04:	460b      	mov	r3, r1
 8022c06:	4630      	mov	r0, r6
 8022c08:	4639      	mov	r1, r7
 8022c0a:	f7e3 fb55 	bl	80062b8 <__aeabi_dsub>
 8022c0e:	4652      	mov	r2, sl
 8022c10:	465b      	mov	r3, fp
 8022c12:	f7e3 fb51 	bl	80062b8 <__aeabi_dsub>
 8022c16:	4602      	mov	r2, r0
 8022c18:	460b      	mov	r3, r1
 8022c1a:	4620      	mov	r0, r4
 8022c1c:	4629      	mov	r1, r5
 8022c1e:	e7d9      	b.n	8022bd4 <__ieee754_log+0x26c>
 8022c20:	4602      	mov	r2, r0
 8022c22:	460b      	mov	r3, r1
 8022c24:	4650      	mov	r0, sl
 8022c26:	4659      	mov	r1, fp
 8022c28:	f7e3 fb46 	bl	80062b8 <__aeabi_dsub>
 8022c2c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8022c30:	f7e3 fcfa 	bl	8006628 <__aeabi_dmul>
 8022c34:	4606      	mov	r6, r0
 8022c36:	460f      	mov	r7, r1
 8022c38:	2c00      	cmp	r4, #0
 8022c3a:	f43f af25 	beq.w	8022a88 <__ieee754_log+0x120>
 8022c3e:	a30a      	add	r3, pc, #40	@ (adr r3, 8022c68 <__ieee754_log+0x300>)
 8022c40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022c44:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8022c48:	f7e3 fcee 	bl	8006628 <__aeabi_dmul>
 8022c4c:	a308      	add	r3, pc, #32	@ (adr r3, 8022c70 <__ieee754_log+0x308>)
 8022c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022c52:	4604      	mov	r4, r0
 8022c54:	460d      	mov	r5, r1
 8022c56:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8022c5a:	e729      	b.n	8022ab0 <__ieee754_log+0x148>
 8022c5c:	ed9f 0b16 	vldr	d0, [pc, #88]	@ 8022cb8 <__ieee754_log+0x350>
 8022c60:	e698      	b.n	8022994 <__ieee754_log+0x2c>
 8022c62:	bf00      	nop
 8022c64:	f3af 8000 	nop.w
 8022c68:	fee00000 	.word	0xfee00000
 8022c6c:	3fe62e42 	.word	0x3fe62e42
 8022c70:	35793c76 	.word	0x35793c76
 8022c74:	3dea39ef 	.word	0x3dea39ef
 8022c78:	55555555 	.word	0x55555555
 8022c7c:	3fd55555 	.word	0x3fd55555
 8022c80:	df3e5244 	.word	0xdf3e5244
 8022c84:	3fc2f112 	.word	0x3fc2f112
 8022c88:	96cb03de 	.word	0x96cb03de
 8022c8c:	3fc74664 	.word	0x3fc74664
 8022c90:	94229359 	.word	0x94229359
 8022c94:	3fd24924 	.word	0x3fd24924
 8022c98:	55555593 	.word	0x55555593
 8022c9c:	3fe55555 	.word	0x3fe55555
 8022ca0:	d078c69f 	.word	0xd078c69f
 8022ca4:	3fc39a09 	.word	0x3fc39a09
 8022ca8:	1d8e78af 	.word	0x1d8e78af
 8022cac:	3fcc71c5 	.word	0x3fcc71c5
 8022cb0:	9997fa04 	.word	0x9997fa04
 8022cb4:	3fd99999 	.word	0x3fd99999
	...
 8022cc0:	c3500000 	.word	0xc3500000
 8022cc4:	43500000 	.word	0x43500000
 8022cc8:	7fefffff 	.word	0x7fefffff
 8022ccc:	3ff00000 	.word	0x3ff00000
 8022cd0:	3fe00000 	.word	0x3fe00000

08022cd4 <with_errno>:
 8022cd4:	b510      	push	{r4, lr}
 8022cd6:	ed2d 8b02 	vpush	{d8}
 8022cda:	eeb0 8a40 	vmov.f32	s16, s0
 8022cde:	eef0 8a60 	vmov.f32	s17, s1
 8022ce2:	4604      	mov	r4, r0
 8022ce4:	f001 f860 	bl	8023da8 <__errno>
 8022ce8:	eeb0 0a48 	vmov.f32	s0, s16
 8022cec:	eef0 0a68 	vmov.f32	s1, s17
 8022cf0:	ecbd 8b02 	vpop	{d8}
 8022cf4:	6004      	str	r4, [r0, #0]
 8022cf6:	bd10      	pop	{r4, pc}

08022cf8 <xflow>:
 8022cf8:	4603      	mov	r3, r0
 8022cfa:	b507      	push	{r0, r1, r2, lr}
 8022cfc:	ec51 0b10 	vmov	r0, r1, d0
 8022d00:	b183      	cbz	r3, 8022d24 <xflow+0x2c>
 8022d02:	4602      	mov	r2, r0
 8022d04:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8022d08:	e9cd 2300 	strd	r2, r3, [sp]
 8022d0c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8022d10:	f7e3 fc8a 	bl	8006628 <__aeabi_dmul>
 8022d14:	ec41 0b10 	vmov	d0, r0, r1
 8022d18:	2022      	movs	r0, #34	@ 0x22
 8022d1a:	b003      	add	sp, #12
 8022d1c:	f85d eb04 	ldr.w	lr, [sp], #4
 8022d20:	f7ff bfd8 	b.w	8022cd4 <with_errno>
 8022d24:	4602      	mov	r2, r0
 8022d26:	460b      	mov	r3, r1
 8022d28:	e7ee      	b.n	8022d08 <xflow+0x10>
 8022d2a:	0000      	movs	r0, r0
 8022d2c:	0000      	movs	r0, r0
	...

08022d30 <__math_uflow>:
 8022d30:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8022d38 <__math_uflow+0x8>
 8022d34:	f7ff bfe0 	b.w	8022cf8 <xflow>
 8022d38:	00000000 	.word	0x00000000
 8022d3c:	10000000 	.word	0x10000000

08022d40 <__math_oflow>:
 8022d40:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8022d48 <__math_oflow+0x8>
 8022d44:	f7ff bfd8 	b.w	8022cf8 <xflow>
 8022d48:	00000000 	.word	0x00000000
 8022d4c:	70000000 	.word	0x70000000

08022d50 <abort>:
 8022d50:	b508      	push	{r3, lr}
 8022d52:	2006      	movs	r0, #6
 8022d54:	f000 fff6 	bl	8023d44 <raise>
 8022d58:	2001      	movs	r0, #1
 8022d5a:	f7fe fb3b 	bl	80213d4 <_exit>
	...

08022d60 <malloc>:
 8022d60:	4b02      	ldr	r3, [pc, #8]	@ (8022d6c <malloc+0xc>)
 8022d62:	4601      	mov	r1, r0
 8022d64:	6818      	ldr	r0, [r3, #0]
 8022d66:	f000 b80b 	b.w	8022d80 <_malloc_r>
 8022d6a:	bf00      	nop
 8022d6c:	2000884c 	.word	0x2000884c

08022d70 <free>:
 8022d70:	4b02      	ldr	r3, [pc, #8]	@ (8022d7c <free+0xc>)
 8022d72:	4601      	mov	r1, r0
 8022d74:	6818      	ldr	r0, [r3, #0]
 8022d76:	f001 b905 	b.w	8023f84 <_free_r>
 8022d7a:	bf00      	nop
 8022d7c:	2000884c 	.word	0x2000884c

08022d80 <_malloc_r>:
 8022d80:	f101 030b 	add.w	r3, r1, #11
 8022d84:	2b16      	cmp	r3, #22
 8022d86:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022d8a:	4605      	mov	r5, r0
 8022d8c:	d906      	bls.n	8022d9c <_malloc_r+0x1c>
 8022d8e:	f033 0707 	bics.w	r7, r3, #7
 8022d92:	d504      	bpl.n	8022d9e <_malloc_r+0x1e>
 8022d94:	230c      	movs	r3, #12
 8022d96:	602b      	str	r3, [r5, #0]
 8022d98:	2400      	movs	r4, #0
 8022d9a:	e1a3      	b.n	80230e4 <_malloc_r+0x364>
 8022d9c:	2710      	movs	r7, #16
 8022d9e:	42b9      	cmp	r1, r7
 8022da0:	d8f8      	bhi.n	8022d94 <_malloc_r+0x14>
 8022da2:	4628      	mov	r0, r5
 8022da4:	f000 fa26 	bl	80231f4 <__malloc_lock>
 8022da8:	f5b7 7ffc 	cmp.w	r7, #504	@ 0x1f8
 8022dac:	4eaf      	ldr	r6, [pc, #700]	@ (802306c <_malloc_r+0x2ec>)
 8022dae:	d237      	bcs.n	8022e20 <_malloc_r+0xa0>
 8022db0:	f107 0208 	add.w	r2, r7, #8
 8022db4:	4432      	add	r2, r6
 8022db6:	f1a2 0108 	sub.w	r1, r2, #8
 8022dba:	6854      	ldr	r4, [r2, #4]
 8022dbc:	428c      	cmp	r4, r1
 8022dbe:	ea4f 03d7 	mov.w	r3, r7, lsr #3
 8022dc2:	d102      	bne.n	8022dca <_malloc_r+0x4a>
 8022dc4:	68d4      	ldr	r4, [r2, #12]
 8022dc6:	42a2      	cmp	r2, r4
 8022dc8:	d010      	beq.n	8022dec <_malloc_r+0x6c>
 8022dca:	6863      	ldr	r3, [r4, #4]
 8022dcc:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 8022dd0:	f023 0303 	bic.w	r3, r3, #3
 8022dd4:	60ca      	str	r2, [r1, #12]
 8022dd6:	4423      	add	r3, r4
 8022dd8:	6091      	str	r1, [r2, #8]
 8022dda:	685a      	ldr	r2, [r3, #4]
 8022ddc:	f042 0201 	orr.w	r2, r2, #1
 8022de0:	605a      	str	r2, [r3, #4]
 8022de2:	4628      	mov	r0, r5
 8022de4:	f000 fa0c 	bl	8023200 <__malloc_unlock>
 8022de8:	3408      	adds	r4, #8
 8022dea:	e17b      	b.n	80230e4 <_malloc_r+0x364>
 8022dec:	3302      	adds	r3, #2
 8022dee:	6934      	ldr	r4, [r6, #16]
 8022df0:	499f      	ldr	r1, [pc, #636]	@ (8023070 <_malloc_r+0x2f0>)
 8022df2:	428c      	cmp	r4, r1
 8022df4:	d077      	beq.n	8022ee6 <_malloc_r+0x166>
 8022df6:	6862      	ldr	r2, [r4, #4]
 8022df8:	f022 0c03 	bic.w	ip, r2, #3
 8022dfc:	ebac 0007 	sub.w	r0, ip, r7
 8022e00:	280f      	cmp	r0, #15
 8022e02:	dd48      	ble.n	8022e96 <_malloc_r+0x116>
 8022e04:	19e2      	adds	r2, r4, r7
 8022e06:	f040 0301 	orr.w	r3, r0, #1
 8022e0a:	f047 0701 	orr.w	r7, r7, #1
 8022e0e:	6067      	str	r7, [r4, #4]
 8022e10:	e9c6 2204 	strd	r2, r2, [r6, #16]
 8022e14:	e9c2 1102 	strd	r1, r1, [r2, #8]
 8022e18:	6053      	str	r3, [r2, #4]
 8022e1a:	f844 000c 	str.w	r0, [r4, ip]
 8022e1e:	e7e0      	b.n	8022de2 <_malloc_r+0x62>
 8022e20:	0a7b      	lsrs	r3, r7, #9
 8022e22:	d02a      	beq.n	8022e7a <_malloc_r+0xfa>
 8022e24:	2b04      	cmp	r3, #4
 8022e26:	d812      	bhi.n	8022e4e <_malloc_r+0xce>
 8022e28:	09bb      	lsrs	r3, r7, #6
 8022e2a:	3338      	adds	r3, #56	@ 0x38
 8022e2c:	1c5a      	adds	r2, r3, #1
 8022e2e:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
 8022e32:	f1a2 0c08 	sub.w	ip, r2, #8
 8022e36:	6854      	ldr	r4, [r2, #4]
 8022e38:	4564      	cmp	r4, ip
 8022e3a:	d006      	beq.n	8022e4a <_malloc_r+0xca>
 8022e3c:	6862      	ldr	r2, [r4, #4]
 8022e3e:	f022 0203 	bic.w	r2, r2, #3
 8022e42:	1bd0      	subs	r0, r2, r7
 8022e44:	280f      	cmp	r0, #15
 8022e46:	dd1c      	ble.n	8022e82 <_malloc_r+0x102>
 8022e48:	3b01      	subs	r3, #1
 8022e4a:	3301      	adds	r3, #1
 8022e4c:	e7cf      	b.n	8022dee <_malloc_r+0x6e>
 8022e4e:	2b14      	cmp	r3, #20
 8022e50:	d801      	bhi.n	8022e56 <_malloc_r+0xd6>
 8022e52:	335b      	adds	r3, #91	@ 0x5b
 8022e54:	e7ea      	b.n	8022e2c <_malloc_r+0xac>
 8022e56:	2b54      	cmp	r3, #84	@ 0x54
 8022e58:	d802      	bhi.n	8022e60 <_malloc_r+0xe0>
 8022e5a:	0b3b      	lsrs	r3, r7, #12
 8022e5c:	336e      	adds	r3, #110	@ 0x6e
 8022e5e:	e7e5      	b.n	8022e2c <_malloc_r+0xac>
 8022e60:	f5b3 7faa 	cmp.w	r3, #340	@ 0x154
 8022e64:	d802      	bhi.n	8022e6c <_malloc_r+0xec>
 8022e66:	0bfb      	lsrs	r3, r7, #15
 8022e68:	3377      	adds	r3, #119	@ 0x77
 8022e6a:	e7df      	b.n	8022e2c <_malloc_r+0xac>
 8022e6c:	f240 5254 	movw	r2, #1364	@ 0x554
 8022e70:	4293      	cmp	r3, r2
 8022e72:	d804      	bhi.n	8022e7e <_malloc_r+0xfe>
 8022e74:	0cbb      	lsrs	r3, r7, #18
 8022e76:	337c      	adds	r3, #124	@ 0x7c
 8022e78:	e7d8      	b.n	8022e2c <_malloc_r+0xac>
 8022e7a:	233f      	movs	r3, #63	@ 0x3f
 8022e7c:	e7d6      	b.n	8022e2c <_malloc_r+0xac>
 8022e7e:	237e      	movs	r3, #126	@ 0x7e
 8022e80:	e7d4      	b.n	8022e2c <_malloc_r+0xac>
 8022e82:	2800      	cmp	r0, #0
 8022e84:	68e1      	ldr	r1, [r4, #12]
 8022e86:	db04      	blt.n	8022e92 <_malloc_r+0x112>
 8022e88:	68a3      	ldr	r3, [r4, #8]
 8022e8a:	60d9      	str	r1, [r3, #12]
 8022e8c:	608b      	str	r3, [r1, #8]
 8022e8e:	18a3      	adds	r3, r4, r2
 8022e90:	e7a3      	b.n	8022dda <_malloc_r+0x5a>
 8022e92:	460c      	mov	r4, r1
 8022e94:	e7d0      	b.n	8022e38 <_malloc_r+0xb8>
 8022e96:	2800      	cmp	r0, #0
 8022e98:	e9c6 1104 	strd	r1, r1, [r6, #16]
 8022e9c:	db07      	blt.n	8022eae <_malloc_r+0x12e>
 8022e9e:	44a4      	add	ip, r4
 8022ea0:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8022ea4:	f043 0301 	orr.w	r3, r3, #1
 8022ea8:	f8cc 3004 	str.w	r3, [ip, #4]
 8022eac:	e799      	b.n	8022de2 <_malloc_r+0x62>
 8022eae:	f5bc 7f00 	cmp.w	ip, #512	@ 0x200
 8022eb2:	6870      	ldr	r0, [r6, #4]
 8022eb4:	f080 8095 	bcs.w	8022fe2 <_malloc_r+0x262>
 8022eb8:	ea4f 02dc 	mov.w	r2, ip, lsr #3
 8022ebc:	ea4f 1e5c 	mov.w	lr, ip, lsr #5
 8022ec0:	f04f 0c01 	mov.w	ip, #1
 8022ec4:	3201      	adds	r2, #1
 8022ec6:	fa0c fc0e 	lsl.w	ip, ip, lr
 8022eca:	ea4c 0000 	orr.w	r0, ip, r0
 8022ece:	6070      	str	r0, [r6, #4]
 8022ed0:	f856 c032 	ldr.w	ip, [r6, r2, lsl #3]
 8022ed4:	eb06 00c2 	add.w	r0, r6, r2, lsl #3
 8022ed8:	3808      	subs	r0, #8
 8022eda:	e9c4 c002 	strd	ip, r0, [r4, #8]
 8022ede:	f846 4032 	str.w	r4, [r6, r2, lsl #3]
 8022ee2:	f8cc 400c 	str.w	r4, [ip, #12]
 8022ee6:	1098      	asrs	r0, r3, #2
 8022ee8:	2201      	movs	r2, #1
 8022eea:	4082      	lsls	r2, r0
 8022eec:	6870      	ldr	r0, [r6, #4]
 8022eee:	4290      	cmp	r0, r2
 8022ef0:	d326      	bcc.n	8022f40 <_malloc_r+0x1c0>
 8022ef2:	4210      	tst	r0, r2
 8022ef4:	d106      	bne.n	8022f04 <_malloc_r+0x184>
 8022ef6:	f023 0303 	bic.w	r3, r3, #3
 8022efa:	0052      	lsls	r2, r2, #1
 8022efc:	4210      	tst	r0, r2
 8022efe:	f103 0304 	add.w	r3, r3, #4
 8022f02:	d0fa      	beq.n	8022efa <_malloc_r+0x17a>
 8022f04:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
 8022f08:	46c1      	mov	r9, r8
 8022f0a:	469e      	mov	lr, r3
 8022f0c:	f8d9 400c 	ldr.w	r4, [r9, #12]
 8022f10:	454c      	cmp	r4, r9
 8022f12:	f040 80b9 	bne.w	8023088 <_malloc_r+0x308>
 8022f16:	f10e 0e01 	add.w	lr, lr, #1
 8022f1a:	f01e 0f03 	tst.w	lr, #3
 8022f1e:	f109 0908 	add.w	r9, r9, #8
 8022f22:	d1f3      	bne.n	8022f0c <_malloc_r+0x18c>
 8022f24:	0798      	lsls	r0, r3, #30
 8022f26:	f040 80e3 	bne.w	80230f0 <_malloc_r+0x370>
 8022f2a:	6873      	ldr	r3, [r6, #4]
 8022f2c:	ea23 0302 	bic.w	r3, r3, r2
 8022f30:	6073      	str	r3, [r6, #4]
 8022f32:	6870      	ldr	r0, [r6, #4]
 8022f34:	0052      	lsls	r2, r2, #1
 8022f36:	4290      	cmp	r0, r2
 8022f38:	d302      	bcc.n	8022f40 <_malloc_r+0x1c0>
 8022f3a:	2a00      	cmp	r2, #0
 8022f3c:	f040 80e5 	bne.w	802310a <_malloc_r+0x38a>
 8022f40:	f8d6 a008 	ldr.w	sl, [r6, #8]
 8022f44:	f8da 3004 	ldr.w	r3, [sl, #4]
 8022f48:	f023 0903 	bic.w	r9, r3, #3
 8022f4c:	45b9      	cmp	r9, r7
 8022f4e:	d304      	bcc.n	8022f5a <_malloc_r+0x1da>
 8022f50:	eba9 0207 	sub.w	r2, r9, r7
 8022f54:	2a0f      	cmp	r2, #15
 8022f56:	f300 8141 	bgt.w	80231dc <_malloc_r+0x45c>
 8022f5a:	4b46      	ldr	r3, [pc, #280]	@ (8023074 <_malloc_r+0x2f4>)
 8022f5c:	6819      	ldr	r1, [r3, #0]
 8022f5e:	3110      	adds	r1, #16
 8022f60:	4439      	add	r1, r7
 8022f62:	2008      	movs	r0, #8
 8022f64:	9101      	str	r1, [sp, #4]
 8022f66:	f000 ff25 	bl	8023db4 <sysconf>
 8022f6a:	4a43      	ldr	r2, [pc, #268]	@ (8023078 <_malloc_r+0x2f8>)
 8022f6c:	9901      	ldr	r1, [sp, #4]
 8022f6e:	6813      	ldr	r3, [r2, #0]
 8022f70:	3301      	adds	r3, #1
 8022f72:	bf1f      	itttt	ne
 8022f74:	f101 31ff 	addne.w	r1, r1, #4294967295	@ 0xffffffff
 8022f78:	1809      	addne	r1, r1, r0
 8022f7a:	4243      	negne	r3, r0
 8022f7c:	4019      	andne	r1, r3
 8022f7e:	4680      	mov	r8, r0
 8022f80:	4628      	mov	r0, r5
 8022f82:	9101      	str	r1, [sp, #4]
 8022f84:	f000 ff00 	bl	8023d88 <_sbrk_r>
 8022f88:	1c42      	adds	r2, r0, #1
 8022f8a:	eb0a 0b09 	add.w	fp, sl, r9
 8022f8e:	4604      	mov	r4, r0
 8022f90:	f000 80f7 	beq.w	8023182 <_malloc_r+0x402>
 8022f94:	4583      	cmp	fp, r0
 8022f96:	9901      	ldr	r1, [sp, #4]
 8022f98:	4a37      	ldr	r2, [pc, #220]	@ (8023078 <_malloc_r+0x2f8>)
 8022f9a:	d902      	bls.n	8022fa2 <_malloc_r+0x222>
 8022f9c:	45b2      	cmp	sl, r6
 8022f9e:	f040 80f0 	bne.w	8023182 <_malloc_r+0x402>
 8022fa2:	4b36      	ldr	r3, [pc, #216]	@ (802307c <_malloc_r+0x2fc>)
 8022fa4:	6818      	ldr	r0, [r3, #0]
 8022fa6:	45a3      	cmp	fp, r4
 8022fa8:	eb00 0e01 	add.w	lr, r0, r1
 8022fac:	f8c3 e000 	str.w	lr, [r3]
 8022fb0:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8022fb4:	f040 80ab 	bne.w	802310e <_malloc_r+0x38e>
 8022fb8:	ea1b 0f0c 	tst.w	fp, ip
 8022fbc:	f040 80a7 	bne.w	802310e <_malloc_r+0x38e>
 8022fc0:	68b2      	ldr	r2, [r6, #8]
 8022fc2:	4449      	add	r1, r9
 8022fc4:	f041 0101 	orr.w	r1, r1, #1
 8022fc8:	6051      	str	r1, [r2, #4]
 8022fca:	4a2d      	ldr	r2, [pc, #180]	@ (8023080 <_malloc_r+0x300>)
 8022fcc:	681b      	ldr	r3, [r3, #0]
 8022fce:	6811      	ldr	r1, [r2, #0]
 8022fd0:	428b      	cmp	r3, r1
 8022fd2:	bf88      	it	hi
 8022fd4:	6013      	strhi	r3, [r2, #0]
 8022fd6:	4a2b      	ldr	r2, [pc, #172]	@ (8023084 <_malloc_r+0x304>)
 8022fd8:	6811      	ldr	r1, [r2, #0]
 8022fda:	428b      	cmp	r3, r1
 8022fdc:	bf88      	it	hi
 8022fde:	6013      	strhi	r3, [r2, #0]
 8022fe0:	e0cf      	b.n	8023182 <_malloc_r+0x402>
 8022fe2:	f5bc 6f20 	cmp.w	ip, #2560	@ 0xa00
 8022fe6:	ea4f 225c 	mov.w	r2, ip, lsr #9
 8022fea:	d218      	bcs.n	802301e <_malloc_r+0x29e>
 8022fec:	ea4f 129c 	mov.w	r2, ip, lsr #6
 8022ff0:	3238      	adds	r2, #56	@ 0x38
 8022ff2:	f102 0e01 	add.w	lr, r2, #1
 8022ff6:	eb06 08c2 	add.w	r8, r6, r2, lsl #3
 8022ffa:	f856 e03e 	ldr.w	lr, [r6, lr, lsl #3]
 8022ffe:	45f0      	cmp	r8, lr
 8023000:	d12b      	bne.n	802305a <_malloc_r+0x2da>
 8023002:	1092      	asrs	r2, r2, #2
 8023004:	f04f 0c01 	mov.w	ip, #1
 8023008:	fa0c f202 	lsl.w	r2, ip, r2
 802300c:	4302      	orrs	r2, r0
 802300e:	6072      	str	r2, [r6, #4]
 8023010:	e9c4 e802 	strd	lr, r8, [r4, #8]
 8023014:	f8c8 4008 	str.w	r4, [r8, #8]
 8023018:	f8ce 400c 	str.w	r4, [lr, #12]
 802301c:	e763      	b.n	8022ee6 <_malloc_r+0x166>
 802301e:	2a14      	cmp	r2, #20
 8023020:	d801      	bhi.n	8023026 <_malloc_r+0x2a6>
 8023022:	325b      	adds	r2, #91	@ 0x5b
 8023024:	e7e5      	b.n	8022ff2 <_malloc_r+0x272>
 8023026:	2a54      	cmp	r2, #84	@ 0x54
 8023028:	d803      	bhi.n	8023032 <_malloc_r+0x2b2>
 802302a:	ea4f 321c 	mov.w	r2, ip, lsr #12
 802302e:	326e      	adds	r2, #110	@ 0x6e
 8023030:	e7df      	b.n	8022ff2 <_malloc_r+0x272>
 8023032:	f5b2 7faa 	cmp.w	r2, #340	@ 0x154
 8023036:	d803      	bhi.n	8023040 <_malloc_r+0x2c0>
 8023038:	ea4f 32dc 	mov.w	r2, ip, lsr #15
 802303c:	3277      	adds	r2, #119	@ 0x77
 802303e:	e7d8      	b.n	8022ff2 <_malloc_r+0x272>
 8023040:	f240 5e54 	movw	lr, #1364	@ 0x554
 8023044:	4572      	cmp	r2, lr
 8023046:	bf9a      	itte	ls
 8023048:	ea4f 429c 	movls.w	r2, ip, lsr #18
 802304c:	327c      	addls	r2, #124	@ 0x7c
 802304e:	227e      	movhi	r2, #126	@ 0x7e
 8023050:	e7cf      	b.n	8022ff2 <_malloc_r+0x272>
 8023052:	f8de e008 	ldr.w	lr, [lr, #8]
 8023056:	45f0      	cmp	r8, lr
 8023058:	d005      	beq.n	8023066 <_malloc_r+0x2e6>
 802305a:	f8de 2004 	ldr.w	r2, [lr, #4]
 802305e:	f022 0203 	bic.w	r2, r2, #3
 8023062:	4562      	cmp	r2, ip
 8023064:	d8f5      	bhi.n	8023052 <_malloc_r+0x2d2>
 8023066:	f8de 800c 	ldr.w	r8, [lr, #12]
 802306a:	e7d1      	b.n	8023010 <_malloc_r+0x290>
 802306c:	20008438 	.word	0x20008438
 8023070:	20008440 	.word	0x20008440
 8023074:	2003cd10 	.word	0x2003cd10
 8023078:	20008430 	.word	0x20008430
 802307c:	2003cce0 	.word	0x2003cce0
 8023080:	2003cd0c 	.word	0x2003cd0c
 8023084:	2003cd08 	.word	0x2003cd08
 8023088:	6860      	ldr	r0, [r4, #4]
 802308a:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 802308e:	f020 0003 	bic.w	r0, r0, #3
 8023092:	eba0 0a07 	sub.w	sl, r0, r7
 8023096:	f1ba 0f0f 	cmp.w	sl, #15
 802309a:	dd12      	ble.n	80230c2 <_malloc_r+0x342>
 802309c:	68a3      	ldr	r3, [r4, #8]
 802309e:	19e2      	adds	r2, r4, r7
 80230a0:	f047 0701 	orr.w	r7, r7, #1
 80230a4:	6067      	str	r7, [r4, #4]
 80230a6:	f8c3 c00c 	str.w	ip, [r3, #12]
 80230aa:	f8cc 3008 	str.w	r3, [ip, #8]
 80230ae:	f04a 0301 	orr.w	r3, sl, #1
 80230b2:	e9c6 2204 	strd	r2, r2, [r6, #16]
 80230b6:	e9c2 1102 	strd	r1, r1, [r2, #8]
 80230ba:	6053      	str	r3, [r2, #4]
 80230bc:	f844 a000 	str.w	sl, [r4, r0]
 80230c0:	e68f      	b.n	8022de2 <_malloc_r+0x62>
 80230c2:	f1ba 0f00 	cmp.w	sl, #0
 80230c6:	db11      	blt.n	80230ec <_malloc_r+0x36c>
 80230c8:	4420      	add	r0, r4
 80230ca:	6843      	ldr	r3, [r0, #4]
 80230cc:	f043 0301 	orr.w	r3, r3, #1
 80230d0:	6043      	str	r3, [r0, #4]
 80230d2:	f854 3f08 	ldr.w	r3, [r4, #8]!
 80230d6:	4628      	mov	r0, r5
 80230d8:	f8c3 c00c 	str.w	ip, [r3, #12]
 80230dc:	f8cc 3008 	str.w	r3, [ip, #8]
 80230e0:	f000 f88e 	bl	8023200 <__malloc_unlock>
 80230e4:	4620      	mov	r0, r4
 80230e6:	b003      	add	sp, #12
 80230e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80230ec:	4664      	mov	r4, ip
 80230ee:	e70f      	b.n	8022f10 <_malloc_r+0x190>
 80230f0:	f858 0908 	ldr.w	r0, [r8], #-8
 80230f4:	4540      	cmp	r0, r8
 80230f6:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 80230fa:	f43f af13 	beq.w	8022f24 <_malloc_r+0x1a4>
 80230fe:	e718      	b.n	8022f32 <_malloc_r+0x1b2>
 8023100:	3304      	adds	r3, #4
 8023102:	0052      	lsls	r2, r2, #1
 8023104:	4210      	tst	r0, r2
 8023106:	d0fb      	beq.n	8023100 <_malloc_r+0x380>
 8023108:	e6fc      	b.n	8022f04 <_malloc_r+0x184>
 802310a:	4673      	mov	r3, lr
 802310c:	e7fa      	b.n	8023104 <_malloc_r+0x384>
 802310e:	6810      	ldr	r0, [r2, #0]
 8023110:	3001      	adds	r0, #1
 8023112:	bf1b      	ittet	ne
 8023114:	eba4 0b0b 	subne.w	fp, r4, fp
 8023118:	eb0b 020e 	addne.w	r2, fp, lr
 802311c:	6014      	streq	r4, [r2, #0]
 802311e:	601a      	strne	r2, [r3, #0]
 8023120:	f014 0b07 	ands.w	fp, r4, #7
 8023124:	bf1a      	itte	ne
 8023126:	f1cb 0008 	rsbne	r0, fp, #8
 802312a:	1824      	addne	r4, r4, r0
 802312c:	4658      	moveq	r0, fp
 802312e:	1862      	adds	r2, r4, r1
 8023130:	ea02 010c 	and.w	r1, r2, ip
 8023134:	4480      	add	r8, r0
 8023136:	eba8 0801 	sub.w	r8, r8, r1
 802313a:	ea08 080c 	and.w	r8, r8, ip
 802313e:	4641      	mov	r1, r8
 8023140:	4628      	mov	r0, r5
 8023142:	9201      	str	r2, [sp, #4]
 8023144:	f000 fe20 	bl	8023d88 <_sbrk_r>
 8023148:	1c43      	adds	r3, r0, #1
 802314a:	9a01      	ldr	r2, [sp, #4]
 802314c:	4b28      	ldr	r3, [pc, #160]	@ (80231f0 <_malloc_r+0x470>)
 802314e:	d107      	bne.n	8023160 <_malloc_r+0x3e0>
 8023150:	f1bb 0f00 	cmp.w	fp, #0
 8023154:	d023      	beq.n	802319e <_malloc_r+0x41e>
 8023156:	f1ab 0008 	sub.w	r0, fp, #8
 802315a:	4410      	add	r0, r2
 802315c:	f04f 0800 	mov.w	r8, #0
 8023160:	681a      	ldr	r2, [r3, #0]
 8023162:	60b4      	str	r4, [r6, #8]
 8023164:	1b00      	subs	r0, r0, r4
 8023166:	4440      	add	r0, r8
 8023168:	4442      	add	r2, r8
 802316a:	f040 0001 	orr.w	r0, r0, #1
 802316e:	45b2      	cmp	sl, r6
 8023170:	601a      	str	r2, [r3, #0]
 8023172:	6060      	str	r0, [r4, #4]
 8023174:	f43f af29 	beq.w	8022fca <_malloc_r+0x24a>
 8023178:	f1b9 0f0f 	cmp.w	r9, #15
 802317c:	d812      	bhi.n	80231a4 <_malloc_r+0x424>
 802317e:	2301      	movs	r3, #1
 8023180:	6063      	str	r3, [r4, #4]
 8023182:	68b3      	ldr	r3, [r6, #8]
 8023184:	685b      	ldr	r3, [r3, #4]
 8023186:	f023 0303 	bic.w	r3, r3, #3
 802318a:	42bb      	cmp	r3, r7
 802318c:	eba3 0207 	sub.w	r2, r3, r7
 8023190:	d301      	bcc.n	8023196 <_malloc_r+0x416>
 8023192:	2a0f      	cmp	r2, #15
 8023194:	dc22      	bgt.n	80231dc <_malloc_r+0x45c>
 8023196:	4628      	mov	r0, r5
 8023198:	f000 f832 	bl	8023200 <__malloc_unlock>
 802319c:	e5fc      	b.n	8022d98 <_malloc_r+0x18>
 802319e:	4610      	mov	r0, r2
 80231a0:	46d8      	mov	r8, fp
 80231a2:	e7dd      	b.n	8023160 <_malloc_r+0x3e0>
 80231a4:	f8da 2004 	ldr.w	r2, [sl, #4]
 80231a8:	f1a9 090c 	sub.w	r9, r9, #12
 80231ac:	f029 0907 	bic.w	r9, r9, #7
 80231b0:	f002 0201 	and.w	r2, r2, #1
 80231b4:	ea42 0209 	orr.w	r2, r2, r9
 80231b8:	f8ca 2004 	str.w	r2, [sl, #4]
 80231bc:	2105      	movs	r1, #5
 80231be:	eb0a 0209 	add.w	r2, sl, r9
 80231c2:	f1b9 0f0f 	cmp.w	r9, #15
 80231c6:	e9c2 1101 	strd	r1, r1, [r2, #4]
 80231ca:	f67f aefe 	bls.w	8022fca <_malloc_r+0x24a>
 80231ce:	f10a 0108 	add.w	r1, sl, #8
 80231d2:	4628      	mov	r0, r5
 80231d4:	f000 fed6 	bl	8023f84 <_free_r>
 80231d8:	4b05      	ldr	r3, [pc, #20]	@ (80231f0 <_malloc_r+0x470>)
 80231da:	e6f6      	b.n	8022fca <_malloc_r+0x24a>
 80231dc:	68b4      	ldr	r4, [r6, #8]
 80231de:	f047 0301 	orr.w	r3, r7, #1
 80231e2:	4427      	add	r7, r4
 80231e4:	f042 0201 	orr.w	r2, r2, #1
 80231e8:	6063      	str	r3, [r4, #4]
 80231ea:	60b7      	str	r7, [r6, #8]
 80231ec:	607a      	str	r2, [r7, #4]
 80231ee:	e5f8      	b.n	8022de2 <_malloc_r+0x62>
 80231f0:	2003cce0 	.word	0x2003cce0

080231f4 <__malloc_lock>:
 80231f4:	4801      	ldr	r0, [pc, #4]	@ (80231fc <__malloc_lock+0x8>)
 80231f6:	f000 be0f 	b.w	8023e18 <__retarget_lock_acquire_recursive>
 80231fa:	bf00      	nop
 80231fc:	2003ce50 	.word	0x2003ce50

08023200 <__malloc_unlock>:
 8023200:	4801      	ldr	r0, [pc, #4]	@ (8023208 <__malloc_unlock+0x8>)
 8023202:	f000 be0a 	b.w	8023e1a <__retarget_lock_release_recursive>
 8023206:	bf00      	nop
 8023208:	2003ce50 	.word	0x2003ce50

0802320c <realloc>:
 802320c:	4b02      	ldr	r3, [pc, #8]	@ (8023218 <realloc+0xc>)
 802320e:	460a      	mov	r2, r1
 8023210:	4601      	mov	r1, r0
 8023212:	6818      	ldr	r0, [r3, #0]
 8023214:	f000 b802 	b.w	802321c <_realloc_r>
 8023218:	2000884c 	.word	0x2000884c

0802321c <_realloc_r>:
 802321c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023220:	4682      	mov	sl, r0
 8023222:	4693      	mov	fp, r2
 8023224:	460c      	mov	r4, r1
 8023226:	b929      	cbnz	r1, 8023234 <_realloc_r+0x18>
 8023228:	4611      	mov	r1, r2
 802322a:	b003      	add	sp, #12
 802322c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023230:	f7ff bda6 	b.w	8022d80 <_malloc_r>
 8023234:	f7ff ffde 	bl	80231f4 <__malloc_lock>
 8023238:	f10b 080b 	add.w	r8, fp, #11
 802323c:	f854 5c04 	ldr.w	r5, [r4, #-4]
 8023240:	f1b8 0f16 	cmp.w	r8, #22
 8023244:	f1a4 0908 	sub.w	r9, r4, #8
 8023248:	f025 0603 	bic.w	r6, r5, #3
 802324c:	d908      	bls.n	8023260 <_realloc_r+0x44>
 802324e:	f038 0807 	bics.w	r8, r8, #7
 8023252:	d507      	bpl.n	8023264 <_realloc_r+0x48>
 8023254:	230c      	movs	r3, #12
 8023256:	f8ca 3000 	str.w	r3, [sl]
 802325a:	f04f 0b00 	mov.w	fp, #0
 802325e:	e032      	b.n	80232c6 <_realloc_r+0xaa>
 8023260:	f04f 0810 	mov.w	r8, #16
 8023264:	45c3      	cmp	fp, r8
 8023266:	d8f5      	bhi.n	8023254 <_realloc_r+0x38>
 8023268:	4546      	cmp	r6, r8
 802326a:	f280 8174 	bge.w	8023556 <_realloc_r+0x33a>
 802326e:	4b9e      	ldr	r3, [pc, #632]	@ (80234e8 <_realloc_r+0x2cc>)
 8023270:	f8d3 c008 	ldr.w	ip, [r3, #8]
 8023274:	eb09 0106 	add.w	r1, r9, r6
 8023278:	458c      	cmp	ip, r1
 802327a:	6848      	ldr	r0, [r1, #4]
 802327c:	d005      	beq.n	802328a <_realloc_r+0x6e>
 802327e:	f020 0201 	bic.w	r2, r0, #1
 8023282:	440a      	add	r2, r1
 8023284:	6852      	ldr	r2, [r2, #4]
 8023286:	07d7      	lsls	r7, r2, #31
 8023288:	d449      	bmi.n	802331e <_realloc_r+0x102>
 802328a:	f020 0003 	bic.w	r0, r0, #3
 802328e:	458c      	cmp	ip, r1
 8023290:	eb06 0700 	add.w	r7, r6, r0
 8023294:	d11b      	bne.n	80232ce <_realloc_r+0xb2>
 8023296:	f108 0210 	add.w	r2, r8, #16
 802329a:	42ba      	cmp	r2, r7
 802329c:	dc41      	bgt.n	8023322 <_realloc_r+0x106>
 802329e:	eb09 0208 	add.w	r2, r9, r8
 80232a2:	eba7 0708 	sub.w	r7, r7, r8
 80232a6:	f047 0701 	orr.w	r7, r7, #1
 80232aa:	609a      	str	r2, [r3, #8]
 80232ac:	6057      	str	r7, [r2, #4]
 80232ae:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80232b2:	f003 0301 	and.w	r3, r3, #1
 80232b6:	ea43 0308 	orr.w	r3, r3, r8
 80232ba:	f844 3c04 	str.w	r3, [r4, #-4]
 80232be:	4650      	mov	r0, sl
 80232c0:	f7ff ff9e 	bl	8023200 <__malloc_unlock>
 80232c4:	46a3      	mov	fp, r4
 80232c6:	4658      	mov	r0, fp
 80232c8:	b003      	add	sp, #12
 80232ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80232ce:	45b8      	cmp	r8, r7
 80232d0:	dc27      	bgt.n	8023322 <_realloc_r+0x106>
 80232d2:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 80232d6:	60d3      	str	r3, [r2, #12]
 80232d8:	609a      	str	r2, [r3, #8]
 80232da:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80232de:	eba7 0008 	sub.w	r0, r7, r8
 80232e2:	280f      	cmp	r0, #15
 80232e4:	f003 0301 	and.w	r3, r3, #1
 80232e8:	eb09 0207 	add.w	r2, r9, r7
 80232ec:	f240 8135 	bls.w	802355a <_realloc_r+0x33e>
 80232f0:	eb09 0108 	add.w	r1, r9, r8
 80232f4:	ea48 0303 	orr.w	r3, r8, r3
 80232f8:	f040 0001 	orr.w	r0, r0, #1
 80232fc:	f8c9 3004 	str.w	r3, [r9, #4]
 8023300:	6048      	str	r0, [r1, #4]
 8023302:	6853      	ldr	r3, [r2, #4]
 8023304:	f043 0301 	orr.w	r3, r3, #1
 8023308:	6053      	str	r3, [r2, #4]
 802330a:	3108      	adds	r1, #8
 802330c:	4650      	mov	r0, sl
 802330e:	f000 fe39 	bl	8023f84 <_free_r>
 8023312:	4650      	mov	r0, sl
 8023314:	f7ff ff74 	bl	8023200 <__malloc_unlock>
 8023318:	f109 0b08 	add.w	fp, r9, #8
 802331c:	e7d3      	b.n	80232c6 <_realloc_r+0xaa>
 802331e:	2000      	movs	r0, #0
 8023320:	4601      	mov	r1, r0
 8023322:	07ea      	lsls	r2, r5, #31
 8023324:	f100 80c7 	bmi.w	80234b6 <_realloc_r+0x29a>
 8023328:	f854 5c08 	ldr.w	r5, [r4, #-8]
 802332c:	eba9 0505 	sub.w	r5, r9, r5
 8023330:	686a      	ldr	r2, [r5, #4]
 8023332:	f022 0203 	bic.w	r2, r2, #3
 8023336:	4432      	add	r2, r6
 8023338:	9201      	str	r2, [sp, #4]
 802333a:	2900      	cmp	r1, #0
 802333c:	f000 8086 	beq.w	802344c <_realloc_r+0x230>
 8023340:	458c      	cmp	ip, r1
 8023342:	eb00 0702 	add.w	r7, r0, r2
 8023346:	d149      	bne.n	80233dc <_realloc_r+0x1c0>
 8023348:	f108 0210 	add.w	r2, r8, #16
 802334c:	42ba      	cmp	r2, r7
 802334e:	dc7d      	bgt.n	802344c <_realloc_r+0x230>
 8023350:	46ab      	mov	fp, r5
 8023352:	68ea      	ldr	r2, [r5, #12]
 8023354:	f85b 1f08 	ldr.w	r1, [fp, #8]!
 8023358:	60ca      	str	r2, [r1, #12]
 802335a:	6091      	str	r1, [r2, #8]
 802335c:	1f32      	subs	r2, r6, #4
 802335e:	2a24      	cmp	r2, #36	@ 0x24
 8023360:	d836      	bhi.n	80233d0 <_realloc_r+0x1b4>
 8023362:	2a13      	cmp	r2, #19
 8023364:	d932      	bls.n	80233cc <_realloc_r+0x1b0>
 8023366:	6821      	ldr	r1, [r4, #0]
 8023368:	60a9      	str	r1, [r5, #8]
 802336a:	6861      	ldr	r1, [r4, #4]
 802336c:	60e9      	str	r1, [r5, #12]
 802336e:	2a1b      	cmp	r2, #27
 8023370:	d81a      	bhi.n	80233a8 <_realloc_r+0x18c>
 8023372:	3408      	adds	r4, #8
 8023374:	f105 0210 	add.w	r2, r5, #16
 8023378:	6821      	ldr	r1, [r4, #0]
 802337a:	6011      	str	r1, [r2, #0]
 802337c:	6861      	ldr	r1, [r4, #4]
 802337e:	6051      	str	r1, [r2, #4]
 8023380:	68a1      	ldr	r1, [r4, #8]
 8023382:	6091      	str	r1, [r2, #8]
 8023384:	eb05 0208 	add.w	r2, r5, r8
 8023388:	eba7 0708 	sub.w	r7, r7, r8
 802338c:	f047 0701 	orr.w	r7, r7, #1
 8023390:	609a      	str	r2, [r3, #8]
 8023392:	6057      	str	r7, [r2, #4]
 8023394:	686b      	ldr	r3, [r5, #4]
 8023396:	f003 0301 	and.w	r3, r3, #1
 802339a:	ea43 0308 	orr.w	r3, r3, r8
 802339e:	606b      	str	r3, [r5, #4]
 80233a0:	4650      	mov	r0, sl
 80233a2:	f7ff ff2d 	bl	8023200 <__malloc_unlock>
 80233a6:	e78e      	b.n	80232c6 <_realloc_r+0xaa>
 80233a8:	68a1      	ldr	r1, [r4, #8]
 80233aa:	6129      	str	r1, [r5, #16]
 80233ac:	68e1      	ldr	r1, [r4, #12]
 80233ae:	6169      	str	r1, [r5, #20]
 80233b0:	2a24      	cmp	r2, #36	@ 0x24
 80233b2:	bf01      	itttt	eq
 80233b4:	6922      	ldreq	r2, [r4, #16]
 80233b6:	61aa      	streq	r2, [r5, #24]
 80233b8:	6961      	ldreq	r1, [r4, #20]
 80233ba:	61e9      	streq	r1, [r5, #28]
 80233bc:	bf19      	ittee	ne
 80233be:	3410      	addne	r4, #16
 80233c0:	f105 0218 	addne.w	r2, r5, #24
 80233c4:	f105 0220 	addeq.w	r2, r5, #32
 80233c8:	3418      	addeq	r4, #24
 80233ca:	e7d5      	b.n	8023378 <_realloc_r+0x15c>
 80233cc:	465a      	mov	r2, fp
 80233ce:	e7d3      	b.n	8023378 <_realloc_r+0x15c>
 80233d0:	4621      	mov	r1, r4
 80233d2:	4658      	mov	r0, fp
 80233d4:	f000 fc58 	bl	8023c88 <memmove>
 80233d8:	4b43      	ldr	r3, [pc, #268]	@ (80234e8 <_realloc_r+0x2cc>)
 80233da:	e7d3      	b.n	8023384 <_realloc_r+0x168>
 80233dc:	45b8      	cmp	r8, r7
 80233de:	dc35      	bgt.n	802344c <_realloc_r+0x230>
 80233e0:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 80233e4:	4628      	mov	r0, r5
 80233e6:	60d3      	str	r3, [r2, #12]
 80233e8:	609a      	str	r2, [r3, #8]
 80233ea:	f850 2f08 	ldr.w	r2, [r0, #8]!
 80233ee:	68eb      	ldr	r3, [r5, #12]
 80233f0:	60d3      	str	r3, [r2, #12]
 80233f2:	609a      	str	r2, [r3, #8]
 80233f4:	1f32      	subs	r2, r6, #4
 80233f6:	2a24      	cmp	r2, #36	@ 0x24
 80233f8:	d824      	bhi.n	8023444 <_realloc_r+0x228>
 80233fa:	2a13      	cmp	r2, #19
 80233fc:	d908      	bls.n	8023410 <_realloc_r+0x1f4>
 80233fe:	6823      	ldr	r3, [r4, #0]
 8023400:	60ab      	str	r3, [r5, #8]
 8023402:	6863      	ldr	r3, [r4, #4]
 8023404:	60eb      	str	r3, [r5, #12]
 8023406:	2a1b      	cmp	r2, #27
 8023408:	d80a      	bhi.n	8023420 <_realloc_r+0x204>
 802340a:	3408      	adds	r4, #8
 802340c:	f105 0010 	add.w	r0, r5, #16
 8023410:	6823      	ldr	r3, [r4, #0]
 8023412:	6003      	str	r3, [r0, #0]
 8023414:	6863      	ldr	r3, [r4, #4]
 8023416:	6043      	str	r3, [r0, #4]
 8023418:	68a3      	ldr	r3, [r4, #8]
 802341a:	6083      	str	r3, [r0, #8]
 802341c:	46a9      	mov	r9, r5
 802341e:	e75c      	b.n	80232da <_realloc_r+0xbe>
 8023420:	68a3      	ldr	r3, [r4, #8]
 8023422:	612b      	str	r3, [r5, #16]
 8023424:	68e3      	ldr	r3, [r4, #12]
 8023426:	616b      	str	r3, [r5, #20]
 8023428:	2a24      	cmp	r2, #36	@ 0x24
 802342a:	bf01      	itttt	eq
 802342c:	6923      	ldreq	r3, [r4, #16]
 802342e:	61ab      	streq	r3, [r5, #24]
 8023430:	6963      	ldreq	r3, [r4, #20]
 8023432:	61eb      	streq	r3, [r5, #28]
 8023434:	bf19      	ittee	ne
 8023436:	3410      	addne	r4, #16
 8023438:	f105 0018 	addne.w	r0, r5, #24
 802343c:	f105 0020 	addeq.w	r0, r5, #32
 8023440:	3418      	addeq	r4, #24
 8023442:	e7e5      	b.n	8023410 <_realloc_r+0x1f4>
 8023444:	4621      	mov	r1, r4
 8023446:	f000 fc1f 	bl	8023c88 <memmove>
 802344a:	e7e7      	b.n	802341c <_realloc_r+0x200>
 802344c:	9b01      	ldr	r3, [sp, #4]
 802344e:	4598      	cmp	r8, r3
 8023450:	dc31      	bgt.n	80234b6 <_realloc_r+0x29a>
 8023452:	4628      	mov	r0, r5
 8023454:	68eb      	ldr	r3, [r5, #12]
 8023456:	f850 2f08 	ldr.w	r2, [r0, #8]!
 802345a:	60d3      	str	r3, [r2, #12]
 802345c:	609a      	str	r2, [r3, #8]
 802345e:	1f32      	subs	r2, r6, #4
 8023460:	2a24      	cmp	r2, #36	@ 0x24
 8023462:	d824      	bhi.n	80234ae <_realloc_r+0x292>
 8023464:	2a13      	cmp	r2, #19
 8023466:	d908      	bls.n	802347a <_realloc_r+0x25e>
 8023468:	6823      	ldr	r3, [r4, #0]
 802346a:	60ab      	str	r3, [r5, #8]
 802346c:	6863      	ldr	r3, [r4, #4]
 802346e:	60eb      	str	r3, [r5, #12]
 8023470:	2a1b      	cmp	r2, #27
 8023472:	d80a      	bhi.n	802348a <_realloc_r+0x26e>
 8023474:	3408      	adds	r4, #8
 8023476:	f105 0010 	add.w	r0, r5, #16
 802347a:	6823      	ldr	r3, [r4, #0]
 802347c:	6003      	str	r3, [r0, #0]
 802347e:	6863      	ldr	r3, [r4, #4]
 8023480:	6043      	str	r3, [r0, #4]
 8023482:	68a3      	ldr	r3, [r4, #8]
 8023484:	6083      	str	r3, [r0, #8]
 8023486:	9f01      	ldr	r7, [sp, #4]
 8023488:	e7c8      	b.n	802341c <_realloc_r+0x200>
 802348a:	68a3      	ldr	r3, [r4, #8]
 802348c:	612b      	str	r3, [r5, #16]
 802348e:	68e3      	ldr	r3, [r4, #12]
 8023490:	616b      	str	r3, [r5, #20]
 8023492:	2a24      	cmp	r2, #36	@ 0x24
 8023494:	bf01      	itttt	eq
 8023496:	6923      	ldreq	r3, [r4, #16]
 8023498:	61ab      	streq	r3, [r5, #24]
 802349a:	6963      	ldreq	r3, [r4, #20]
 802349c:	61eb      	streq	r3, [r5, #28]
 802349e:	bf19      	ittee	ne
 80234a0:	3410      	addne	r4, #16
 80234a2:	f105 0018 	addne.w	r0, r5, #24
 80234a6:	f105 0020 	addeq.w	r0, r5, #32
 80234aa:	3418      	addeq	r4, #24
 80234ac:	e7e5      	b.n	802347a <_realloc_r+0x25e>
 80234ae:	4621      	mov	r1, r4
 80234b0:	f000 fbea 	bl	8023c88 <memmove>
 80234b4:	e7e7      	b.n	8023486 <_realloc_r+0x26a>
 80234b6:	4659      	mov	r1, fp
 80234b8:	4650      	mov	r0, sl
 80234ba:	f7ff fc61 	bl	8022d80 <_malloc_r>
 80234be:	4683      	mov	fp, r0
 80234c0:	b918      	cbnz	r0, 80234ca <_realloc_r+0x2ae>
 80234c2:	4650      	mov	r0, sl
 80234c4:	f7ff fe9c 	bl	8023200 <__malloc_unlock>
 80234c8:	e6c7      	b.n	802325a <_realloc_r+0x3e>
 80234ca:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80234ce:	f023 0301 	bic.w	r3, r3, #1
 80234d2:	444b      	add	r3, r9
 80234d4:	f1a0 0208 	sub.w	r2, r0, #8
 80234d8:	4293      	cmp	r3, r2
 80234da:	d107      	bne.n	80234ec <_realloc_r+0x2d0>
 80234dc:	f850 7c04 	ldr.w	r7, [r0, #-4]
 80234e0:	f027 0703 	bic.w	r7, r7, #3
 80234e4:	4437      	add	r7, r6
 80234e6:	e6f8      	b.n	80232da <_realloc_r+0xbe>
 80234e8:	20008438 	.word	0x20008438
 80234ec:	1f32      	subs	r2, r6, #4
 80234ee:	2a24      	cmp	r2, #36	@ 0x24
 80234f0:	d82d      	bhi.n	802354e <_realloc_r+0x332>
 80234f2:	2a13      	cmp	r2, #19
 80234f4:	d928      	bls.n	8023548 <_realloc_r+0x32c>
 80234f6:	6823      	ldr	r3, [r4, #0]
 80234f8:	6003      	str	r3, [r0, #0]
 80234fa:	6863      	ldr	r3, [r4, #4]
 80234fc:	6043      	str	r3, [r0, #4]
 80234fe:	2a1b      	cmp	r2, #27
 8023500:	d80e      	bhi.n	8023520 <_realloc_r+0x304>
 8023502:	f104 0208 	add.w	r2, r4, #8
 8023506:	f100 0308 	add.w	r3, r0, #8
 802350a:	6811      	ldr	r1, [r2, #0]
 802350c:	6019      	str	r1, [r3, #0]
 802350e:	6851      	ldr	r1, [r2, #4]
 8023510:	6059      	str	r1, [r3, #4]
 8023512:	6892      	ldr	r2, [r2, #8]
 8023514:	609a      	str	r2, [r3, #8]
 8023516:	4621      	mov	r1, r4
 8023518:	4650      	mov	r0, sl
 802351a:	f000 fd33 	bl	8023f84 <_free_r>
 802351e:	e73f      	b.n	80233a0 <_realloc_r+0x184>
 8023520:	68a3      	ldr	r3, [r4, #8]
 8023522:	6083      	str	r3, [r0, #8]
 8023524:	68e3      	ldr	r3, [r4, #12]
 8023526:	60c3      	str	r3, [r0, #12]
 8023528:	2a24      	cmp	r2, #36	@ 0x24
 802352a:	bf01      	itttt	eq
 802352c:	6923      	ldreq	r3, [r4, #16]
 802352e:	6103      	streq	r3, [r0, #16]
 8023530:	6961      	ldreq	r1, [r4, #20]
 8023532:	6141      	streq	r1, [r0, #20]
 8023534:	bf19      	ittee	ne
 8023536:	f104 0210 	addne.w	r2, r4, #16
 802353a:	f100 0310 	addne.w	r3, r0, #16
 802353e:	f104 0218 	addeq.w	r2, r4, #24
 8023542:	f100 0318 	addeq.w	r3, r0, #24
 8023546:	e7e0      	b.n	802350a <_realloc_r+0x2ee>
 8023548:	4603      	mov	r3, r0
 802354a:	4622      	mov	r2, r4
 802354c:	e7dd      	b.n	802350a <_realloc_r+0x2ee>
 802354e:	4621      	mov	r1, r4
 8023550:	f000 fb9a 	bl	8023c88 <memmove>
 8023554:	e7df      	b.n	8023516 <_realloc_r+0x2fa>
 8023556:	4637      	mov	r7, r6
 8023558:	e6bf      	b.n	80232da <_realloc_r+0xbe>
 802355a:	431f      	orrs	r7, r3
 802355c:	f8c9 7004 	str.w	r7, [r9, #4]
 8023560:	6853      	ldr	r3, [r2, #4]
 8023562:	f043 0301 	orr.w	r3, r3, #1
 8023566:	6053      	str	r3, [r2, #4]
 8023568:	e6d3      	b.n	8023312 <_realloc_r+0xf6>
 802356a:	bf00      	nop

0802356c <snprintf>:
 802356c:	b40c      	push	{r2, r3}
 802356e:	b530      	push	{r4, r5, lr}
 8023570:	4b17      	ldr	r3, [pc, #92]	@ (80235d0 <snprintf+0x64>)
 8023572:	1e0c      	subs	r4, r1, #0
 8023574:	681d      	ldr	r5, [r3, #0]
 8023576:	b09d      	sub	sp, #116	@ 0x74
 8023578:	da08      	bge.n	802358c <snprintf+0x20>
 802357a:	238b      	movs	r3, #139	@ 0x8b
 802357c:	602b      	str	r3, [r5, #0]
 802357e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8023582:	b01d      	add	sp, #116	@ 0x74
 8023584:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8023588:	b002      	add	sp, #8
 802358a:	4770      	bx	lr
 802358c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8023590:	f8ad 3014 	strh.w	r3, [sp, #20]
 8023594:	bf14      	ite	ne
 8023596:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 802359a:	4623      	moveq	r3, r4
 802359c:	9304      	str	r3, [sp, #16]
 802359e:	9307      	str	r3, [sp, #28]
 80235a0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80235a4:	9002      	str	r0, [sp, #8]
 80235a6:	9006      	str	r0, [sp, #24]
 80235a8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80235ac:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80235ae:	ab21      	add	r3, sp, #132	@ 0x84
 80235b0:	a902      	add	r1, sp, #8
 80235b2:	4628      	mov	r0, r5
 80235b4:	9301      	str	r3, [sp, #4]
 80235b6:	f000 fda7 	bl	8024108 <_svfprintf_r>
 80235ba:	1c43      	adds	r3, r0, #1
 80235bc:	bfbc      	itt	lt
 80235be:	238b      	movlt	r3, #139	@ 0x8b
 80235c0:	602b      	strlt	r3, [r5, #0]
 80235c2:	2c00      	cmp	r4, #0
 80235c4:	d0dd      	beq.n	8023582 <snprintf+0x16>
 80235c6:	9b02      	ldr	r3, [sp, #8]
 80235c8:	2200      	movs	r2, #0
 80235ca:	701a      	strb	r2, [r3, #0]
 80235cc:	e7d9      	b.n	8023582 <snprintf+0x16>
 80235ce:	bf00      	nop
 80235d0:	2000884c 	.word	0x2000884c

080235d4 <sprintf>:
 80235d4:	b40e      	push	{r1, r2, r3}
 80235d6:	b500      	push	{lr}
 80235d8:	b09c      	sub	sp, #112	@ 0x70
 80235da:	ab1d      	add	r3, sp, #116	@ 0x74
 80235dc:	9002      	str	r0, [sp, #8]
 80235de:	9006      	str	r0, [sp, #24]
 80235e0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80235e4:	4809      	ldr	r0, [pc, #36]	@ (802360c <sprintf+0x38>)
 80235e6:	9107      	str	r1, [sp, #28]
 80235e8:	9104      	str	r1, [sp, #16]
 80235ea:	4909      	ldr	r1, [pc, #36]	@ (8023610 <sprintf+0x3c>)
 80235ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80235f0:	9105      	str	r1, [sp, #20]
 80235f2:	6800      	ldr	r0, [r0, #0]
 80235f4:	9301      	str	r3, [sp, #4]
 80235f6:	a902      	add	r1, sp, #8
 80235f8:	f000 fd86 	bl	8024108 <_svfprintf_r>
 80235fc:	9b02      	ldr	r3, [sp, #8]
 80235fe:	2200      	movs	r2, #0
 8023600:	701a      	strb	r2, [r3, #0]
 8023602:	b01c      	add	sp, #112	@ 0x70
 8023604:	f85d eb04 	ldr.w	lr, [sp], #4
 8023608:	b003      	add	sp, #12
 802360a:	4770      	bx	lr
 802360c:	2000884c 	.word	0x2000884c
 8023610:	ffff0208 	.word	0xffff0208

08023614 <std>:
 8023614:	2300      	movs	r3, #0
 8023616:	b510      	push	{r4, lr}
 8023618:	4604      	mov	r4, r0
 802361a:	e9c0 3300 	strd	r3, r3, [r0]
 802361e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8023622:	6083      	str	r3, [r0, #8]
 8023624:	8181      	strh	r1, [r0, #12]
 8023626:	6643      	str	r3, [r0, #100]	@ 0x64
 8023628:	81c2      	strh	r2, [r0, #14]
 802362a:	6183      	str	r3, [r0, #24]
 802362c:	4619      	mov	r1, r3
 802362e:	2208      	movs	r2, #8
 8023630:	305c      	adds	r0, #92	@ 0x5c
 8023632:	f000 fb43 	bl	8023cbc <memset>
 8023636:	4b0d      	ldr	r3, [pc, #52]	@ (802366c <std+0x58>)
 8023638:	6223      	str	r3, [r4, #32]
 802363a:	4b0d      	ldr	r3, [pc, #52]	@ (8023670 <std+0x5c>)
 802363c:	6263      	str	r3, [r4, #36]	@ 0x24
 802363e:	4b0d      	ldr	r3, [pc, #52]	@ (8023674 <std+0x60>)
 8023640:	62a3      	str	r3, [r4, #40]	@ 0x28
 8023642:	4b0d      	ldr	r3, [pc, #52]	@ (8023678 <std+0x64>)
 8023644:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8023646:	4b0d      	ldr	r3, [pc, #52]	@ (802367c <std+0x68>)
 8023648:	61e4      	str	r4, [r4, #28]
 802364a:	429c      	cmp	r4, r3
 802364c:	d006      	beq.n	802365c <std+0x48>
 802364e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8023652:	4294      	cmp	r4, r2
 8023654:	d002      	beq.n	802365c <std+0x48>
 8023656:	33d0      	adds	r3, #208	@ 0xd0
 8023658:	429c      	cmp	r4, r3
 802365a:	d105      	bne.n	8023668 <std+0x54>
 802365c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8023660:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8023664:	f000 bbd6 	b.w	8023e14 <__retarget_lock_init_recursive>
 8023668:	bd10      	pop	{r4, pc}
 802366a:	bf00      	nop
 802366c:	080257fb 	.word	0x080257fb
 8023670:	0802581d 	.word	0x0802581d
 8023674:	08025855 	.word	0x08025855
 8023678:	08025879 	.word	0x08025879
 802367c:	2003cd14 	.word	0x2003cd14

08023680 <stdio_exit_handler>:
 8023680:	4a02      	ldr	r2, [pc, #8]	@ (802368c <stdio_exit_handler+0xc>)
 8023682:	4903      	ldr	r1, [pc, #12]	@ (8023690 <stdio_exit_handler+0x10>)
 8023684:	4803      	ldr	r0, [pc, #12]	@ (8023694 <stdio_exit_handler+0x14>)
 8023686:	f000 ba23 	b.w	8023ad0 <_fwalk_sglue>
 802368a:	bf00      	nop
 802368c:	20008840 	.word	0x20008840
 8023690:	080255f5 	.word	0x080255f5
 8023694:	20008850 	.word	0x20008850

08023698 <cleanup_stdio>:
 8023698:	6841      	ldr	r1, [r0, #4]
 802369a:	4b0c      	ldr	r3, [pc, #48]	@ (80236cc <cleanup_stdio+0x34>)
 802369c:	4299      	cmp	r1, r3
 802369e:	b510      	push	{r4, lr}
 80236a0:	4604      	mov	r4, r0
 80236a2:	d001      	beq.n	80236a8 <cleanup_stdio+0x10>
 80236a4:	f001 ffa6 	bl	80255f4 <_fclose_r>
 80236a8:	68a1      	ldr	r1, [r4, #8]
 80236aa:	4b09      	ldr	r3, [pc, #36]	@ (80236d0 <cleanup_stdio+0x38>)
 80236ac:	4299      	cmp	r1, r3
 80236ae:	d002      	beq.n	80236b6 <cleanup_stdio+0x1e>
 80236b0:	4620      	mov	r0, r4
 80236b2:	f001 ff9f 	bl	80255f4 <_fclose_r>
 80236b6:	68e1      	ldr	r1, [r4, #12]
 80236b8:	4b06      	ldr	r3, [pc, #24]	@ (80236d4 <cleanup_stdio+0x3c>)
 80236ba:	4299      	cmp	r1, r3
 80236bc:	d004      	beq.n	80236c8 <cleanup_stdio+0x30>
 80236be:	4620      	mov	r0, r4
 80236c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80236c4:	f001 bf96 	b.w	80255f4 <_fclose_r>
 80236c8:	bd10      	pop	{r4, pc}
 80236ca:	bf00      	nop
 80236cc:	2003cd14 	.word	0x2003cd14
 80236d0:	2003cd7c 	.word	0x2003cd7c
 80236d4:	2003cde4 	.word	0x2003cde4

080236d8 <global_stdio_init.part.0>:
 80236d8:	b510      	push	{r4, lr}
 80236da:	4b0b      	ldr	r3, [pc, #44]	@ (8023708 <global_stdio_init.part.0+0x30>)
 80236dc:	4c0b      	ldr	r4, [pc, #44]	@ (802370c <global_stdio_init.part.0+0x34>)
 80236de:	4a0c      	ldr	r2, [pc, #48]	@ (8023710 <global_stdio_init.part.0+0x38>)
 80236e0:	601a      	str	r2, [r3, #0]
 80236e2:	4620      	mov	r0, r4
 80236e4:	2200      	movs	r2, #0
 80236e6:	2104      	movs	r1, #4
 80236e8:	f7ff ff94 	bl	8023614 <std>
 80236ec:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80236f0:	2201      	movs	r2, #1
 80236f2:	2109      	movs	r1, #9
 80236f4:	f7ff ff8e 	bl	8023614 <std>
 80236f8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80236fc:	2202      	movs	r2, #2
 80236fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8023702:	2112      	movs	r1, #18
 8023704:	f7ff bf86 	b.w	8023614 <std>
 8023708:	2003ce4c 	.word	0x2003ce4c
 802370c:	2003cd14 	.word	0x2003cd14
 8023710:	08023681 	.word	0x08023681

08023714 <__sfp_lock_acquire>:
 8023714:	4801      	ldr	r0, [pc, #4]	@ (802371c <__sfp_lock_acquire+0x8>)
 8023716:	f000 bb7f 	b.w	8023e18 <__retarget_lock_acquire_recursive>
 802371a:	bf00      	nop
 802371c:	2003ce52 	.word	0x2003ce52

08023720 <__sfp_lock_release>:
 8023720:	4801      	ldr	r0, [pc, #4]	@ (8023728 <__sfp_lock_release+0x8>)
 8023722:	f000 bb7a 	b.w	8023e1a <__retarget_lock_release_recursive>
 8023726:	bf00      	nop
 8023728:	2003ce52 	.word	0x2003ce52

0802372c <__sinit>:
 802372c:	b510      	push	{r4, lr}
 802372e:	4604      	mov	r4, r0
 8023730:	f7ff fff0 	bl	8023714 <__sfp_lock_acquire>
 8023734:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8023736:	b11b      	cbz	r3, 8023740 <__sinit+0x14>
 8023738:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802373c:	f7ff bff0 	b.w	8023720 <__sfp_lock_release>
 8023740:	4b04      	ldr	r3, [pc, #16]	@ (8023754 <__sinit+0x28>)
 8023742:	6363      	str	r3, [r4, #52]	@ 0x34
 8023744:	4b04      	ldr	r3, [pc, #16]	@ (8023758 <__sinit+0x2c>)
 8023746:	681b      	ldr	r3, [r3, #0]
 8023748:	2b00      	cmp	r3, #0
 802374a:	d1f5      	bne.n	8023738 <__sinit+0xc>
 802374c:	f7ff ffc4 	bl	80236d8 <global_stdio_init.part.0>
 8023750:	e7f2      	b.n	8023738 <__sinit+0xc>
 8023752:	bf00      	nop
 8023754:	08023699 	.word	0x08023699
 8023758:	2003ce4c 	.word	0x2003ce4c

0802375c <_fputc_r>:
 802375c:	b570      	push	{r4, r5, r6, lr}
 802375e:	460e      	mov	r6, r1
 8023760:	4614      	mov	r4, r2
 8023762:	4605      	mov	r5, r0
 8023764:	b118      	cbz	r0, 802376e <_fputc_r+0x12>
 8023766:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8023768:	b90b      	cbnz	r3, 802376e <_fputc_r+0x12>
 802376a:	f7ff ffdf 	bl	802372c <__sinit>
 802376e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8023770:	07d8      	lsls	r0, r3, #31
 8023772:	d405      	bmi.n	8023780 <_fputc_r+0x24>
 8023774:	89a3      	ldrh	r3, [r4, #12]
 8023776:	0599      	lsls	r1, r3, #22
 8023778:	d402      	bmi.n	8023780 <_fputc_r+0x24>
 802377a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802377c:	f000 fb4c 	bl	8023e18 <__retarget_lock_acquire_recursive>
 8023780:	4622      	mov	r2, r4
 8023782:	4628      	mov	r0, r5
 8023784:	4631      	mov	r1, r6
 8023786:	f001 ff01 	bl	802558c <_putc_r>
 802378a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802378c:	07da      	lsls	r2, r3, #31
 802378e:	4605      	mov	r5, r0
 8023790:	d405      	bmi.n	802379e <_fputc_r+0x42>
 8023792:	89a3      	ldrh	r3, [r4, #12]
 8023794:	059b      	lsls	r3, r3, #22
 8023796:	d402      	bmi.n	802379e <_fputc_r+0x42>
 8023798:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802379a:	f000 fb3e 	bl	8023e1a <__retarget_lock_release_recursive>
 802379e:	4628      	mov	r0, r5
 80237a0:	bd70      	pop	{r4, r5, r6, pc}
	...

080237a4 <fputc>:
 80237a4:	4b02      	ldr	r3, [pc, #8]	@ (80237b0 <fputc+0xc>)
 80237a6:	460a      	mov	r2, r1
 80237a8:	4601      	mov	r1, r0
 80237aa:	6818      	ldr	r0, [r3, #0]
 80237ac:	f7ff bfd6 	b.w	802375c <_fputc_r>
 80237b0:	2000884c 	.word	0x2000884c

080237b4 <_fputs_r>:
 80237b4:	b530      	push	{r4, r5, lr}
 80237b6:	b087      	sub	sp, #28
 80237b8:	4605      	mov	r5, r0
 80237ba:	4608      	mov	r0, r1
 80237bc:	4614      	mov	r4, r2
 80237be:	9101      	str	r1, [sp, #4]
 80237c0:	f7e2 fd6e 	bl	80062a0 <strlen>
 80237c4:	ab01      	add	r3, sp, #4
 80237c6:	9303      	str	r3, [sp, #12]
 80237c8:	2301      	movs	r3, #1
 80237ca:	9005      	str	r0, [sp, #20]
 80237cc:	9002      	str	r0, [sp, #8]
 80237ce:	9304      	str	r3, [sp, #16]
 80237d0:	b125      	cbz	r5, 80237dc <_fputs_r+0x28>
 80237d2:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 80237d4:	b913      	cbnz	r3, 80237dc <_fputs_r+0x28>
 80237d6:	4628      	mov	r0, r5
 80237d8:	f7ff ffa8 	bl	802372c <__sinit>
 80237dc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80237de:	07db      	lsls	r3, r3, #31
 80237e0:	d405      	bmi.n	80237ee <_fputs_r+0x3a>
 80237e2:	89a3      	ldrh	r3, [r4, #12]
 80237e4:	0598      	lsls	r0, r3, #22
 80237e6:	d402      	bmi.n	80237ee <_fputs_r+0x3a>
 80237e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80237ea:	f000 fb15 	bl	8023e18 <__retarget_lock_acquire_recursive>
 80237ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80237f2:	0499      	lsls	r1, r3, #18
 80237f4:	d406      	bmi.n	8023804 <_fputs_r+0x50>
 80237f6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80237fa:	81a3      	strh	r3, [r4, #12]
 80237fc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80237fe:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8023802:	6663      	str	r3, [r4, #100]	@ 0x64
 8023804:	aa03      	add	r2, sp, #12
 8023806:	4628      	mov	r0, r5
 8023808:	4621      	mov	r1, r4
 802380a:	f000 f815 	bl	8023838 <__sfvwrite_r>
 802380e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8023810:	07da      	lsls	r2, r3, #31
 8023812:	4605      	mov	r5, r0
 8023814:	d405      	bmi.n	8023822 <_fputs_r+0x6e>
 8023816:	89a3      	ldrh	r3, [r4, #12]
 8023818:	059b      	lsls	r3, r3, #22
 802381a:	d402      	bmi.n	8023822 <_fputs_r+0x6e>
 802381c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802381e:	f000 fafc 	bl	8023e1a <__retarget_lock_release_recursive>
 8023822:	4628      	mov	r0, r5
 8023824:	b007      	add	sp, #28
 8023826:	bd30      	pop	{r4, r5, pc}

08023828 <fputs>:
 8023828:	4b02      	ldr	r3, [pc, #8]	@ (8023834 <fputs+0xc>)
 802382a:	460a      	mov	r2, r1
 802382c:	4601      	mov	r1, r0
 802382e:	6818      	ldr	r0, [r3, #0]
 8023830:	f7ff bfc0 	b.w	80237b4 <_fputs_r>
 8023834:	2000884c 	.word	0x2000884c

08023838 <__sfvwrite_r>:
 8023838:	6893      	ldr	r3, [r2, #8]
 802383a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802383e:	4606      	mov	r6, r0
 8023840:	460c      	mov	r4, r1
 8023842:	4691      	mov	r9, r2
 8023844:	b91b      	cbnz	r3, 802384e <__sfvwrite_r+0x16>
 8023846:	2000      	movs	r0, #0
 8023848:	b003      	add	sp, #12
 802384a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802384e:	898b      	ldrh	r3, [r1, #12]
 8023850:	0718      	lsls	r0, r3, #28
 8023852:	d550      	bpl.n	80238f6 <__sfvwrite_r+0xbe>
 8023854:	690b      	ldr	r3, [r1, #16]
 8023856:	2b00      	cmp	r3, #0
 8023858:	d04d      	beq.n	80238f6 <__sfvwrite_r+0xbe>
 802385a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802385e:	f8d9 8000 	ldr.w	r8, [r9]
 8023862:	f013 0702 	ands.w	r7, r3, #2
 8023866:	d16b      	bne.n	8023940 <__sfvwrite_r+0x108>
 8023868:	f013 0301 	ands.w	r3, r3, #1
 802386c:	f000 809c 	beq.w	80239a8 <__sfvwrite_r+0x170>
 8023870:	4638      	mov	r0, r7
 8023872:	46ba      	mov	sl, r7
 8023874:	46bb      	mov	fp, r7
 8023876:	f1bb 0f00 	cmp.w	fp, #0
 802387a:	f000 8103 	beq.w	8023a84 <__sfvwrite_r+0x24c>
 802387e:	b950      	cbnz	r0, 8023896 <__sfvwrite_r+0x5e>
 8023880:	465a      	mov	r2, fp
 8023882:	210a      	movs	r1, #10
 8023884:	4650      	mov	r0, sl
 8023886:	f7e2 fcbb 	bl	8006200 <memchr>
 802388a:	2800      	cmp	r0, #0
 802388c:	f000 8100 	beq.w	8023a90 <__sfvwrite_r+0x258>
 8023890:	3001      	adds	r0, #1
 8023892:	eba0 070a 	sub.w	r7, r0, sl
 8023896:	6820      	ldr	r0, [r4, #0]
 8023898:	6921      	ldr	r1, [r4, #16]
 802389a:	68a5      	ldr	r5, [r4, #8]
 802389c:	6963      	ldr	r3, [r4, #20]
 802389e:	455f      	cmp	r7, fp
 80238a0:	463a      	mov	r2, r7
 80238a2:	bf28      	it	cs
 80238a4:	465a      	movcs	r2, fp
 80238a6:	4288      	cmp	r0, r1
 80238a8:	f240 80f5 	bls.w	8023a96 <__sfvwrite_r+0x25e>
 80238ac:	441d      	add	r5, r3
 80238ae:	42aa      	cmp	r2, r5
 80238b0:	f340 80f1 	ble.w	8023a96 <__sfvwrite_r+0x25e>
 80238b4:	4651      	mov	r1, sl
 80238b6:	462a      	mov	r2, r5
 80238b8:	f000 f9e6 	bl	8023c88 <memmove>
 80238bc:	6823      	ldr	r3, [r4, #0]
 80238be:	442b      	add	r3, r5
 80238c0:	6023      	str	r3, [r4, #0]
 80238c2:	4621      	mov	r1, r4
 80238c4:	4630      	mov	r0, r6
 80238c6:	f001 ff73 	bl	80257b0 <_fflush_r>
 80238ca:	2800      	cmp	r0, #0
 80238cc:	d167      	bne.n	802399e <__sfvwrite_r+0x166>
 80238ce:	1b7f      	subs	r7, r7, r5
 80238d0:	f040 80f9 	bne.w	8023ac6 <__sfvwrite_r+0x28e>
 80238d4:	4621      	mov	r1, r4
 80238d6:	4630      	mov	r0, r6
 80238d8:	f001 ff6a 	bl	80257b0 <_fflush_r>
 80238dc:	2800      	cmp	r0, #0
 80238de:	d15e      	bne.n	802399e <__sfvwrite_r+0x166>
 80238e0:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80238e4:	1b5b      	subs	r3, r3, r5
 80238e6:	44aa      	add	sl, r5
 80238e8:	ebab 0b05 	sub.w	fp, fp, r5
 80238ec:	f8c9 3008 	str.w	r3, [r9, #8]
 80238f0:	2b00      	cmp	r3, #0
 80238f2:	d1c0      	bne.n	8023876 <__sfvwrite_r+0x3e>
 80238f4:	e7a7      	b.n	8023846 <__sfvwrite_r+0xe>
 80238f6:	4621      	mov	r1, r4
 80238f8:	4630      	mov	r0, r6
 80238fa:	f000 f95f 	bl	8023bbc <__swsetup_r>
 80238fe:	2800      	cmp	r0, #0
 8023900:	d0ab      	beq.n	802385a <__sfvwrite_r+0x22>
 8023902:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8023906:	e79f      	b.n	8023848 <__sfvwrite_r+0x10>
 8023908:	e9d8 a500 	ldrd	sl, r5, [r8]
 802390c:	f108 0808 	add.w	r8, r8, #8
 8023910:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 8023914:	69e1      	ldr	r1, [r4, #28]
 8023916:	2d00      	cmp	r5, #0
 8023918:	d0f6      	beq.n	8023908 <__sfvwrite_r+0xd0>
 802391a:	42bd      	cmp	r5, r7
 802391c:	462b      	mov	r3, r5
 802391e:	4652      	mov	r2, sl
 8023920:	bf28      	it	cs
 8023922:	463b      	movcs	r3, r7
 8023924:	4630      	mov	r0, r6
 8023926:	47d8      	blx	fp
 8023928:	2800      	cmp	r0, #0
 802392a:	dd38      	ble.n	802399e <__sfvwrite_r+0x166>
 802392c:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8023930:	1a1b      	subs	r3, r3, r0
 8023932:	4482      	add	sl, r0
 8023934:	1a2d      	subs	r5, r5, r0
 8023936:	f8c9 3008 	str.w	r3, [r9, #8]
 802393a:	2b00      	cmp	r3, #0
 802393c:	d1e8      	bne.n	8023910 <__sfvwrite_r+0xd8>
 802393e:	e782      	b.n	8023846 <__sfvwrite_r+0xe>
 8023940:	f04f 0a00 	mov.w	sl, #0
 8023944:	4f61      	ldr	r7, [pc, #388]	@ (8023acc <__sfvwrite_r+0x294>)
 8023946:	4655      	mov	r5, sl
 8023948:	e7e2      	b.n	8023910 <__sfvwrite_r+0xd8>
 802394a:	e9d8 7a00 	ldrd	r7, sl, [r8]
 802394e:	f108 0808 	add.w	r8, r8, #8
 8023952:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8023956:	6820      	ldr	r0, [r4, #0]
 8023958:	68a2      	ldr	r2, [r4, #8]
 802395a:	f1ba 0f00 	cmp.w	sl, #0
 802395e:	d0f4      	beq.n	802394a <__sfvwrite_r+0x112>
 8023960:	0599      	lsls	r1, r3, #22
 8023962:	d563      	bpl.n	8023a2c <__sfvwrite_r+0x1f4>
 8023964:	4552      	cmp	r2, sl
 8023966:	d836      	bhi.n	80239d6 <__sfvwrite_r+0x19e>
 8023968:	f413 6f90 	tst.w	r3, #1152	@ 0x480
 802396c:	d033      	beq.n	80239d6 <__sfvwrite_r+0x19e>
 802396e:	6921      	ldr	r1, [r4, #16]
 8023970:	6965      	ldr	r5, [r4, #20]
 8023972:	eba0 0b01 	sub.w	fp, r0, r1
 8023976:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802397a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 802397e:	f10b 0201 	add.w	r2, fp, #1
 8023982:	106d      	asrs	r5, r5, #1
 8023984:	4452      	add	r2, sl
 8023986:	4295      	cmp	r5, r2
 8023988:	bf38      	it	cc
 802398a:	4615      	movcc	r5, r2
 802398c:	055b      	lsls	r3, r3, #21
 802398e:	d53d      	bpl.n	8023a0c <__sfvwrite_r+0x1d4>
 8023990:	4629      	mov	r1, r5
 8023992:	4630      	mov	r0, r6
 8023994:	f7ff f9f4 	bl	8022d80 <_malloc_r>
 8023998:	b948      	cbnz	r0, 80239ae <__sfvwrite_r+0x176>
 802399a:	230c      	movs	r3, #12
 802399c:	6033      	str	r3, [r6, #0]
 802399e:	89a3      	ldrh	r3, [r4, #12]
 80239a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80239a4:	81a3      	strh	r3, [r4, #12]
 80239a6:	e7ac      	b.n	8023902 <__sfvwrite_r+0xca>
 80239a8:	461f      	mov	r7, r3
 80239aa:	469a      	mov	sl, r3
 80239ac:	e7d1      	b.n	8023952 <__sfvwrite_r+0x11a>
 80239ae:	465a      	mov	r2, fp
 80239b0:	6921      	ldr	r1, [r4, #16]
 80239b2:	9001      	str	r0, [sp, #4]
 80239b4:	f000 fa32 	bl	8023e1c <memcpy>
 80239b8:	89a2      	ldrh	r2, [r4, #12]
 80239ba:	9b01      	ldr	r3, [sp, #4]
 80239bc:	f422 6290 	bic.w	r2, r2, #1152	@ 0x480
 80239c0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80239c4:	81a2      	strh	r2, [r4, #12]
 80239c6:	6123      	str	r3, [r4, #16]
 80239c8:	6165      	str	r5, [r4, #20]
 80239ca:	445b      	add	r3, fp
 80239cc:	eba5 050b 	sub.w	r5, r5, fp
 80239d0:	6023      	str	r3, [r4, #0]
 80239d2:	4652      	mov	r2, sl
 80239d4:	60a5      	str	r5, [r4, #8]
 80239d6:	4552      	cmp	r2, sl
 80239d8:	bf28      	it	cs
 80239da:	4652      	movcs	r2, sl
 80239dc:	6820      	ldr	r0, [r4, #0]
 80239de:	9201      	str	r2, [sp, #4]
 80239e0:	4639      	mov	r1, r7
 80239e2:	f000 f951 	bl	8023c88 <memmove>
 80239e6:	68a3      	ldr	r3, [r4, #8]
 80239e8:	9a01      	ldr	r2, [sp, #4]
 80239ea:	1a9b      	subs	r3, r3, r2
 80239ec:	60a3      	str	r3, [r4, #8]
 80239ee:	6823      	ldr	r3, [r4, #0]
 80239f0:	4413      	add	r3, r2
 80239f2:	4655      	mov	r5, sl
 80239f4:	6023      	str	r3, [r4, #0]
 80239f6:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80239fa:	1b5b      	subs	r3, r3, r5
 80239fc:	442f      	add	r7, r5
 80239fe:	ebaa 0a05 	sub.w	sl, sl, r5
 8023a02:	f8c9 3008 	str.w	r3, [r9, #8]
 8023a06:	2b00      	cmp	r3, #0
 8023a08:	d1a3      	bne.n	8023952 <__sfvwrite_r+0x11a>
 8023a0a:	e71c      	b.n	8023846 <__sfvwrite_r+0xe>
 8023a0c:	462a      	mov	r2, r5
 8023a0e:	4630      	mov	r0, r6
 8023a10:	f7ff fc04 	bl	802321c <_realloc_r>
 8023a14:	4603      	mov	r3, r0
 8023a16:	2800      	cmp	r0, #0
 8023a18:	d1d5      	bne.n	80239c6 <__sfvwrite_r+0x18e>
 8023a1a:	6921      	ldr	r1, [r4, #16]
 8023a1c:	4630      	mov	r0, r6
 8023a1e:	f000 fab1 	bl	8023f84 <_free_r>
 8023a22:	89a3      	ldrh	r3, [r4, #12]
 8023a24:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8023a28:	81a3      	strh	r3, [r4, #12]
 8023a2a:	e7b6      	b.n	802399a <__sfvwrite_r+0x162>
 8023a2c:	6923      	ldr	r3, [r4, #16]
 8023a2e:	4283      	cmp	r3, r0
 8023a30:	d302      	bcc.n	8023a38 <__sfvwrite_r+0x200>
 8023a32:	6961      	ldr	r1, [r4, #20]
 8023a34:	4551      	cmp	r1, sl
 8023a36:	d915      	bls.n	8023a64 <__sfvwrite_r+0x22c>
 8023a38:	4552      	cmp	r2, sl
 8023a3a:	bf28      	it	cs
 8023a3c:	4652      	movcs	r2, sl
 8023a3e:	4639      	mov	r1, r7
 8023a40:	4615      	mov	r5, r2
 8023a42:	f000 f921 	bl	8023c88 <memmove>
 8023a46:	68a3      	ldr	r3, [r4, #8]
 8023a48:	6822      	ldr	r2, [r4, #0]
 8023a4a:	1b5b      	subs	r3, r3, r5
 8023a4c:	442a      	add	r2, r5
 8023a4e:	60a3      	str	r3, [r4, #8]
 8023a50:	6022      	str	r2, [r4, #0]
 8023a52:	2b00      	cmp	r3, #0
 8023a54:	d1cf      	bne.n	80239f6 <__sfvwrite_r+0x1be>
 8023a56:	4621      	mov	r1, r4
 8023a58:	4630      	mov	r0, r6
 8023a5a:	f001 fea9 	bl	80257b0 <_fflush_r>
 8023a5e:	2800      	cmp	r0, #0
 8023a60:	d0c9      	beq.n	80239f6 <__sfvwrite_r+0x1be>
 8023a62:	e79c      	b.n	802399e <__sfvwrite_r+0x166>
 8023a64:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8023a68:	4553      	cmp	r3, sl
 8023a6a:	bf28      	it	cs
 8023a6c:	4653      	movcs	r3, sl
 8023a6e:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8023a70:	fb93 f3f1 	sdiv	r3, r3, r1
 8023a74:	463a      	mov	r2, r7
 8023a76:	434b      	muls	r3, r1
 8023a78:	4630      	mov	r0, r6
 8023a7a:	69e1      	ldr	r1, [r4, #28]
 8023a7c:	47a8      	blx	r5
 8023a7e:	1e05      	subs	r5, r0, #0
 8023a80:	dcb9      	bgt.n	80239f6 <__sfvwrite_r+0x1be>
 8023a82:	e78c      	b.n	802399e <__sfvwrite_r+0x166>
 8023a84:	e9d8 ab00 	ldrd	sl, fp, [r8]
 8023a88:	2000      	movs	r0, #0
 8023a8a:	f108 0808 	add.w	r8, r8, #8
 8023a8e:	e6f2      	b.n	8023876 <__sfvwrite_r+0x3e>
 8023a90:	f10b 0701 	add.w	r7, fp, #1
 8023a94:	e6ff      	b.n	8023896 <__sfvwrite_r+0x5e>
 8023a96:	4293      	cmp	r3, r2
 8023a98:	dc08      	bgt.n	8023aac <__sfvwrite_r+0x274>
 8023a9a:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8023a9c:	69e1      	ldr	r1, [r4, #28]
 8023a9e:	4652      	mov	r2, sl
 8023aa0:	4630      	mov	r0, r6
 8023aa2:	47a8      	blx	r5
 8023aa4:	1e05      	subs	r5, r0, #0
 8023aa6:	f73f af12 	bgt.w	80238ce <__sfvwrite_r+0x96>
 8023aaa:	e778      	b.n	802399e <__sfvwrite_r+0x166>
 8023aac:	4651      	mov	r1, sl
 8023aae:	9201      	str	r2, [sp, #4]
 8023ab0:	f000 f8ea 	bl	8023c88 <memmove>
 8023ab4:	9a01      	ldr	r2, [sp, #4]
 8023ab6:	68a3      	ldr	r3, [r4, #8]
 8023ab8:	1a9b      	subs	r3, r3, r2
 8023aba:	60a3      	str	r3, [r4, #8]
 8023abc:	6823      	ldr	r3, [r4, #0]
 8023abe:	4413      	add	r3, r2
 8023ac0:	6023      	str	r3, [r4, #0]
 8023ac2:	4615      	mov	r5, r2
 8023ac4:	e703      	b.n	80238ce <__sfvwrite_r+0x96>
 8023ac6:	2001      	movs	r0, #1
 8023ac8:	e70a      	b.n	80238e0 <__sfvwrite_r+0xa8>
 8023aca:	bf00      	nop
 8023acc:	7ffffc00 	.word	0x7ffffc00

08023ad0 <_fwalk_sglue>:
 8023ad0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8023ad4:	4607      	mov	r7, r0
 8023ad6:	4688      	mov	r8, r1
 8023ad8:	4614      	mov	r4, r2
 8023ada:	2600      	movs	r6, #0
 8023adc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8023ae0:	f1b9 0901 	subs.w	r9, r9, #1
 8023ae4:	d505      	bpl.n	8023af2 <_fwalk_sglue+0x22>
 8023ae6:	6824      	ldr	r4, [r4, #0]
 8023ae8:	2c00      	cmp	r4, #0
 8023aea:	d1f7      	bne.n	8023adc <_fwalk_sglue+0xc>
 8023aec:	4630      	mov	r0, r6
 8023aee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8023af2:	89ab      	ldrh	r3, [r5, #12]
 8023af4:	2b01      	cmp	r3, #1
 8023af6:	d907      	bls.n	8023b08 <_fwalk_sglue+0x38>
 8023af8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8023afc:	3301      	adds	r3, #1
 8023afe:	d003      	beq.n	8023b08 <_fwalk_sglue+0x38>
 8023b00:	4629      	mov	r1, r5
 8023b02:	4638      	mov	r0, r7
 8023b04:	47c0      	blx	r8
 8023b06:	4306      	orrs	r6, r0
 8023b08:	3568      	adds	r5, #104	@ 0x68
 8023b0a:	e7e9      	b.n	8023ae0 <_fwalk_sglue+0x10>

08023b0c <_fwrite_r>:
 8023b0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8023b10:	b086      	sub	sp, #24
 8023b12:	fb02 f603 	mul.w	r6, r2, r3
 8023b16:	461d      	mov	r5, r3
 8023b18:	ab01      	add	r3, sp, #4
 8023b1a:	9303      	str	r3, [sp, #12]
 8023b1c:	2301      	movs	r3, #1
 8023b1e:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8023b20:	9101      	str	r1, [sp, #4]
 8023b22:	4690      	mov	r8, r2
 8023b24:	9602      	str	r6, [sp, #8]
 8023b26:	9605      	str	r6, [sp, #20]
 8023b28:	9304      	str	r3, [sp, #16]
 8023b2a:	4607      	mov	r7, r0
 8023b2c:	b118      	cbz	r0, 8023b36 <_fwrite_r+0x2a>
 8023b2e:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8023b30:	b90b      	cbnz	r3, 8023b36 <_fwrite_r+0x2a>
 8023b32:	f7ff fdfb 	bl	802372c <__sinit>
 8023b36:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8023b38:	07d8      	lsls	r0, r3, #31
 8023b3a:	d405      	bmi.n	8023b48 <_fwrite_r+0x3c>
 8023b3c:	89a3      	ldrh	r3, [r4, #12]
 8023b3e:	0599      	lsls	r1, r3, #22
 8023b40:	d402      	bmi.n	8023b48 <_fwrite_r+0x3c>
 8023b42:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8023b44:	f000 f968 	bl	8023e18 <__retarget_lock_acquire_recursive>
 8023b48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8023b4c:	049a      	lsls	r2, r3, #18
 8023b4e:	d406      	bmi.n	8023b5e <_fwrite_r+0x52>
 8023b50:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8023b54:	81a3      	strh	r3, [r4, #12]
 8023b56:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8023b58:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8023b5c:	6663      	str	r3, [r4, #100]	@ 0x64
 8023b5e:	aa03      	add	r2, sp, #12
 8023b60:	4621      	mov	r1, r4
 8023b62:	4638      	mov	r0, r7
 8023b64:	f7ff fe68 	bl	8023838 <__sfvwrite_r>
 8023b68:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8023b6a:	b958      	cbnz	r0, 8023b84 <_fwrite_r+0x78>
 8023b6c:	07d8      	lsls	r0, r3, #31
 8023b6e:	d405      	bmi.n	8023b7c <_fwrite_r+0x70>
 8023b70:	89a3      	ldrh	r3, [r4, #12]
 8023b72:	0599      	lsls	r1, r3, #22
 8023b74:	d402      	bmi.n	8023b7c <_fwrite_r+0x70>
 8023b76:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8023b78:	f000 f94f 	bl	8023e1a <__retarget_lock_release_recursive>
 8023b7c:	4628      	mov	r0, r5
 8023b7e:	b006      	add	sp, #24
 8023b80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8023b84:	07da      	lsls	r2, r3, #31
 8023b86:	d405      	bmi.n	8023b94 <_fwrite_r+0x88>
 8023b88:	89a3      	ldrh	r3, [r4, #12]
 8023b8a:	059b      	lsls	r3, r3, #22
 8023b8c:	d402      	bmi.n	8023b94 <_fwrite_r+0x88>
 8023b8e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8023b90:	f000 f943 	bl	8023e1a <__retarget_lock_release_recursive>
 8023b94:	9b05      	ldr	r3, [sp, #20]
 8023b96:	1af6      	subs	r6, r6, r3
 8023b98:	fbb6 f5f8 	udiv	r5, r6, r8
 8023b9c:	e7ee      	b.n	8023b7c <_fwrite_r+0x70>
	...

08023ba0 <fwrite>:
 8023ba0:	b507      	push	{r0, r1, r2, lr}
 8023ba2:	9300      	str	r3, [sp, #0]
 8023ba4:	4613      	mov	r3, r2
 8023ba6:	460a      	mov	r2, r1
 8023ba8:	4601      	mov	r1, r0
 8023baa:	4803      	ldr	r0, [pc, #12]	@ (8023bb8 <fwrite+0x18>)
 8023bac:	6800      	ldr	r0, [r0, #0]
 8023bae:	f7ff ffad 	bl	8023b0c <_fwrite_r>
 8023bb2:	b003      	add	sp, #12
 8023bb4:	f85d fb04 	ldr.w	pc, [sp], #4
 8023bb8:	2000884c 	.word	0x2000884c

08023bbc <__swsetup_r>:
 8023bbc:	b538      	push	{r3, r4, r5, lr}
 8023bbe:	4b29      	ldr	r3, [pc, #164]	@ (8023c64 <__swsetup_r+0xa8>)
 8023bc0:	4605      	mov	r5, r0
 8023bc2:	6818      	ldr	r0, [r3, #0]
 8023bc4:	460c      	mov	r4, r1
 8023bc6:	b118      	cbz	r0, 8023bd0 <__swsetup_r+0x14>
 8023bc8:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8023bca:	b90b      	cbnz	r3, 8023bd0 <__swsetup_r+0x14>
 8023bcc:	f7ff fdae 	bl	802372c <__sinit>
 8023bd0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8023bd4:	0719      	lsls	r1, r3, #28
 8023bd6:	d422      	bmi.n	8023c1e <__swsetup_r+0x62>
 8023bd8:	06da      	lsls	r2, r3, #27
 8023bda:	d407      	bmi.n	8023bec <__swsetup_r+0x30>
 8023bdc:	2209      	movs	r2, #9
 8023bde:	602a      	str	r2, [r5, #0]
 8023be0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8023be4:	81a3      	strh	r3, [r4, #12]
 8023be6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8023bea:	e033      	b.n	8023c54 <__swsetup_r+0x98>
 8023bec:	0758      	lsls	r0, r3, #29
 8023bee:	d512      	bpl.n	8023c16 <__swsetup_r+0x5a>
 8023bf0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8023bf2:	b141      	cbz	r1, 8023c06 <__swsetup_r+0x4a>
 8023bf4:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 8023bf8:	4299      	cmp	r1, r3
 8023bfa:	d002      	beq.n	8023c02 <__swsetup_r+0x46>
 8023bfc:	4628      	mov	r0, r5
 8023bfe:	f000 f9c1 	bl	8023f84 <_free_r>
 8023c02:	2300      	movs	r3, #0
 8023c04:	6323      	str	r3, [r4, #48]	@ 0x30
 8023c06:	89a3      	ldrh	r3, [r4, #12]
 8023c08:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8023c0c:	81a3      	strh	r3, [r4, #12]
 8023c0e:	2300      	movs	r3, #0
 8023c10:	6063      	str	r3, [r4, #4]
 8023c12:	6923      	ldr	r3, [r4, #16]
 8023c14:	6023      	str	r3, [r4, #0]
 8023c16:	89a3      	ldrh	r3, [r4, #12]
 8023c18:	f043 0308 	orr.w	r3, r3, #8
 8023c1c:	81a3      	strh	r3, [r4, #12]
 8023c1e:	6923      	ldr	r3, [r4, #16]
 8023c20:	b94b      	cbnz	r3, 8023c36 <__swsetup_r+0x7a>
 8023c22:	89a3      	ldrh	r3, [r4, #12]
 8023c24:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8023c28:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8023c2c:	d003      	beq.n	8023c36 <__swsetup_r+0x7a>
 8023c2e:	4621      	mov	r1, r4
 8023c30:	4628      	mov	r0, r5
 8023c32:	f001 fc6f 	bl	8025514 <__smakebuf_r>
 8023c36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8023c3a:	f013 0201 	ands.w	r2, r3, #1
 8023c3e:	d00a      	beq.n	8023c56 <__swsetup_r+0x9a>
 8023c40:	2200      	movs	r2, #0
 8023c42:	60a2      	str	r2, [r4, #8]
 8023c44:	6962      	ldr	r2, [r4, #20]
 8023c46:	4252      	negs	r2, r2
 8023c48:	61a2      	str	r2, [r4, #24]
 8023c4a:	6922      	ldr	r2, [r4, #16]
 8023c4c:	b942      	cbnz	r2, 8023c60 <__swsetup_r+0xa4>
 8023c4e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8023c52:	d1c5      	bne.n	8023be0 <__swsetup_r+0x24>
 8023c54:	bd38      	pop	{r3, r4, r5, pc}
 8023c56:	0799      	lsls	r1, r3, #30
 8023c58:	bf58      	it	pl
 8023c5a:	6962      	ldrpl	r2, [r4, #20]
 8023c5c:	60a2      	str	r2, [r4, #8]
 8023c5e:	e7f4      	b.n	8023c4a <__swsetup_r+0x8e>
 8023c60:	2000      	movs	r0, #0
 8023c62:	e7f7      	b.n	8023c54 <__swsetup_r+0x98>
 8023c64:	2000884c 	.word	0x2000884c

08023c68 <memcmp>:
 8023c68:	b510      	push	{r4, lr}
 8023c6a:	3901      	subs	r1, #1
 8023c6c:	4402      	add	r2, r0
 8023c6e:	4290      	cmp	r0, r2
 8023c70:	d101      	bne.n	8023c76 <memcmp+0xe>
 8023c72:	2000      	movs	r0, #0
 8023c74:	e005      	b.n	8023c82 <memcmp+0x1a>
 8023c76:	7803      	ldrb	r3, [r0, #0]
 8023c78:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8023c7c:	42a3      	cmp	r3, r4
 8023c7e:	d001      	beq.n	8023c84 <memcmp+0x1c>
 8023c80:	1b18      	subs	r0, r3, r4
 8023c82:	bd10      	pop	{r4, pc}
 8023c84:	3001      	adds	r0, #1
 8023c86:	e7f2      	b.n	8023c6e <memcmp+0x6>

08023c88 <memmove>:
 8023c88:	4288      	cmp	r0, r1
 8023c8a:	b510      	push	{r4, lr}
 8023c8c:	eb01 0402 	add.w	r4, r1, r2
 8023c90:	d902      	bls.n	8023c98 <memmove+0x10>
 8023c92:	4284      	cmp	r4, r0
 8023c94:	4623      	mov	r3, r4
 8023c96:	d807      	bhi.n	8023ca8 <memmove+0x20>
 8023c98:	1e43      	subs	r3, r0, #1
 8023c9a:	42a1      	cmp	r1, r4
 8023c9c:	d008      	beq.n	8023cb0 <memmove+0x28>
 8023c9e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8023ca2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8023ca6:	e7f8      	b.n	8023c9a <memmove+0x12>
 8023ca8:	4402      	add	r2, r0
 8023caa:	4601      	mov	r1, r0
 8023cac:	428a      	cmp	r2, r1
 8023cae:	d100      	bne.n	8023cb2 <memmove+0x2a>
 8023cb0:	bd10      	pop	{r4, pc}
 8023cb2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8023cb6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8023cba:	e7f7      	b.n	8023cac <memmove+0x24>

08023cbc <memset>:
 8023cbc:	4402      	add	r2, r0
 8023cbe:	4603      	mov	r3, r0
 8023cc0:	4293      	cmp	r3, r2
 8023cc2:	d100      	bne.n	8023cc6 <memset+0xa>
 8023cc4:	4770      	bx	lr
 8023cc6:	f803 1b01 	strb.w	r1, [r3], #1
 8023cca:	e7f9      	b.n	8023cc0 <memset+0x4>

08023ccc <strncmp>:
 8023ccc:	b510      	push	{r4, lr}
 8023cce:	b16a      	cbz	r2, 8023cec <strncmp+0x20>
 8023cd0:	3901      	subs	r1, #1
 8023cd2:	1884      	adds	r4, r0, r2
 8023cd4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8023cd8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8023cdc:	429a      	cmp	r2, r3
 8023cde:	d103      	bne.n	8023ce8 <strncmp+0x1c>
 8023ce0:	42a0      	cmp	r0, r4
 8023ce2:	d001      	beq.n	8023ce8 <strncmp+0x1c>
 8023ce4:	2a00      	cmp	r2, #0
 8023ce6:	d1f5      	bne.n	8023cd4 <strncmp+0x8>
 8023ce8:	1ad0      	subs	r0, r2, r3
 8023cea:	bd10      	pop	{r4, pc}
 8023cec:	4610      	mov	r0, r2
 8023cee:	e7fc      	b.n	8023cea <strncmp+0x1e>

08023cf0 <_raise_r>:
 8023cf0:	291f      	cmp	r1, #31
 8023cf2:	b538      	push	{r3, r4, r5, lr}
 8023cf4:	4605      	mov	r5, r0
 8023cf6:	460c      	mov	r4, r1
 8023cf8:	d904      	bls.n	8023d04 <_raise_r+0x14>
 8023cfa:	2316      	movs	r3, #22
 8023cfc:	6003      	str	r3, [r0, #0]
 8023cfe:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8023d02:	bd38      	pop	{r3, r4, r5, pc}
 8023d04:	f8d0 2118 	ldr.w	r2, [r0, #280]	@ 0x118
 8023d08:	b112      	cbz	r2, 8023d10 <_raise_r+0x20>
 8023d0a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8023d0e:	b94b      	cbnz	r3, 8023d24 <_raise_r+0x34>
 8023d10:	4628      	mov	r0, r5
 8023d12:	f000 f837 	bl	8023d84 <_getpid_r>
 8023d16:	4622      	mov	r2, r4
 8023d18:	4601      	mov	r1, r0
 8023d1a:	4628      	mov	r0, r5
 8023d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8023d20:	f000 b81e 	b.w	8023d60 <_kill_r>
 8023d24:	2b01      	cmp	r3, #1
 8023d26:	d00a      	beq.n	8023d3e <_raise_r+0x4e>
 8023d28:	1c59      	adds	r1, r3, #1
 8023d2a:	d103      	bne.n	8023d34 <_raise_r+0x44>
 8023d2c:	2316      	movs	r3, #22
 8023d2e:	6003      	str	r3, [r0, #0]
 8023d30:	2001      	movs	r0, #1
 8023d32:	e7e6      	b.n	8023d02 <_raise_r+0x12>
 8023d34:	2100      	movs	r1, #0
 8023d36:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8023d3a:	4620      	mov	r0, r4
 8023d3c:	4798      	blx	r3
 8023d3e:	2000      	movs	r0, #0
 8023d40:	e7df      	b.n	8023d02 <_raise_r+0x12>
	...

08023d44 <raise>:
 8023d44:	4b02      	ldr	r3, [pc, #8]	@ (8023d50 <raise+0xc>)
 8023d46:	4601      	mov	r1, r0
 8023d48:	6818      	ldr	r0, [r3, #0]
 8023d4a:	f7ff bfd1 	b.w	8023cf0 <_raise_r>
 8023d4e:	bf00      	nop
 8023d50:	2000884c 	.word	0x2000884c

08023d54 <__cxa_atexit>:
 8023d54:	4613      	mov	r3, r2
 8023d56:	460a      	mov	r2, r1
 8023d58:	4601      	mov	r1, r0
 8023d5a:	2002      	movs	r0, #2
 8023d5c:	f000 b86c 	b.w	8023e38 <__register_exitproc>

08023d60 <_kill_r>:
 8023d60:	b538      	push	{r3, r4, r5, lr}
 8023d62:	4d07      	ldr	r5, [pc, #28]	@ (8023d80 <_kill_r+0x20>)
 8023d64:	2300      	movs	r3, #0
 8023d66:	4604      	mov	r4, r0
 8023d68:	4608      	mov	r0, r1
 8023d6a:	4611      	mov	r1, r2
 8023d6c:	602b      	str	r3, [r5, #0]
 8023d6e:	f003 fe95 	bl	8027a9c <_kill>
 8023d72:	1c43      	adds	r3, r0, #1
 8023d74:	d102      	bne.n	8023d7c <_kill_r+0x1c>
 8023d76:	682b      	ldr	r3, [r5, #0]
 8023d78:	b103      	cbz	r3, 8023d7c <_kill_r+0x1c>
 8023d7a:	6023      	str	r3, [r4, #0]
 8023d7c:	bd38      	pop	{r3, r4, r5, pc}
 8023d7e:	bf00      	nop
 8023d80:	2003cfe8 	.word	0x2003cfe8

08023d84 <_getpid_r>:
 8023d84:	f003 be82 	b.w	8027a8c <_getpid>

08023d88 <_sbrk_r>:
 8023d88:	b538      	push	{r3, r4, r5, lr}
 8023d8a:	4d06      	ldr	r5, [pc, #24]	@ (8023da4 <_sbrk_r+0x1c>)
 8023d8c:	2300      	movs	r3, #0
 8023d8e:	4604      	mov	r4, r0
 8023d90:	4608      	mov	r0, r1
 8023d92:	602b      	str	r3, [r5, #0]
 8023d94:	f003 fe8a 	bl	8027aac <_sbrk>
 8023d98:	1c43      	adds	r3, r0, #1
 8023d9a:	d102      	bne.n	8023da2 <_sbrk_r+0x1a>
 8023d9c:	682b      	ldr	r3, [r5, #0]
 8023d9e:	b103      	cbz	r3, 8023da2 <_sbrk_r+0x1a>
 8023da0:	6023      	str	r3, [r4, #0]
 8023da2:	bd38      	pop	{r3, r4, r5, pc}
 8023da4:	2003cfe8 	.word	0x2003cfe8

08023da8 <__errno>:
 8023da8:	4b01      	ldr	r3, [pc, #4]	@ (8023db0 <__errno+0x8>)
 8023daa:	6818      	ldr	r0, [r3, #0]
 8023dac:	4770      	bx	lr
 8023dae:	bf00      	nop
 8023db0:	2000884c 	.word	0x2000884c

08023db4 <sysconf>:
 8023db4:	2808      	cmp	r0, #8
 8023db6:	b508      	push	{r3, lr}
 8023db8:	d006      	beq.n	8023dc8 <sysconf+0x14>
 8023dba:	f7ff fff5 	bl	8023da8 <__errno>
 8023dbe:	2316      	movs	r3, #22
 8023dc0:	6003      	str	r3, [r0, #0]
 8023dc2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8023dc6:	bd08      	pop	{r3, pc}
 8023dc8:	2080      	movs	r0, #128	@ 0x80
 8023dca:	e7fc      	b.n	8023dc6 <sysconf+0x12>

08023dcc <__libc_init_array>:
 8023dcc:	b570      	push	{r4, r5, r6, lr}
 8023dce:	4d0d      	ldr	r5, [pc, #52]	@ (8023e04 <__libc_init_array+0x38>)
 8023dd0:	4c0d      	ldr	r4, [pc, #52]	@ (8023e08 <__libc_init_array+0x3c>)
 8023dd2:	1b64      	subs	r4, r4, r5
 8023dd4:	10a4      	asrs	r4, r4, #2
 8023dd6:	2600      	movs	r6, #0
 8023dd8:	42a6      	cmp	r6, r4
 8023dda:	d109      	bne.n	8023df0 <__libc_init_array+0x24>
 8023ddc:	4d0b      	ldr	r5, [pc, #44]	@ (8023e0c <__libc_init_array+0x40>)
 8023dde:	4c0c      	ldr	r4, [pc, #48]	@ (8023e10 <__libc_init_array+0x44>)
 8023de0:	f003 fe72 	bl	8027ac8 <_init>
 8023de4:	1b64      	subs	r4, r4, r5
 8023de6:	10a4      	asrs	r4, r4, #2
 8023de8:	2600      	movs	r6, #0
 8023dea:	42a6      	cmp	r6, r4
 8023dec:	d105      	bne.n	8023dfa <__libc_init_array+0x2e>
 8023dee:	bd70      	pop	{r4, r5, r6, pc}
 8023df0:	f855 3b04 	ldr.w	r3, [r5], #4
 8023df4:	4798      	blx	r3
 8023df6:	3601      	adds	r6, #1
 8023df8:	e7ee      	b.n	8023dd8 <__libc_init_array+0xc>
 8023dfa:	f855 3b04 	ldr.w	r3, [r5], #4
 8023dfe:	4798      	blx	r3
 8023e00:	3601      	adds	r6, #1
 8023e02:	e7f2      	b.n	8023dea <__libc_init_array+0x1e>
 8023e04:	080aff8c 	.word	0x080aff8c
 8023e08:	080aff8c 	.word	0x080aff8c
 8023e0c:	080aff8c 	.word	0x080aff8c
 8023e10:	080affa0 	.word	0x080affa0

08023e14 <__retarget_lock_init_recursive>:
 8023e14:	4770      	bx	lr

08023e16 <__retarget_lock_close_recursive>:
 8023e16:	4770      	bx	lr

08023e18 <__retarget_lock_acquire_recursive>:
 8023e18:	4770      	bx	lr

08023e1a <__retarget_lock_release_recursive>:
 8023e1a:	4770      	bx	lr

08023e1c <memcpy>:
 8023e1c:	440a      	add	r2, r1
 8023e1e:	4291      	cmp	r1, r2
 8023e20:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8023e24:	d100      	bne.n	8023e28 <memcpy+0xc>
 8023e26:	4770      	bx	lr
 8023e28:	b510      	push	{r4, lr}
 8023e2a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8023e2e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8023e32:	4291      	cmp	r1, r2
 8023e34:	d1f9      	bne.n	8023e2a <memcpy+0xe>
 8023e36:	bd10      	pop	{r4, pc}

08023e38 <__register_exitproc>:
 8023e38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8023e3c:	f8df a074 	ldr.w	sl, [pc, #116]	@ 8023eb4 <__register_exitproc+0x7c>
 8023e40:	4606      	mov	r6, r0
 8023e42:	f8da 0000 	ldr.w	r0, [sl]
 8023e46:	4698      	mov	r8, r3
 8023e48:	460f      	mov	r7, r1
 8023e4a:	4691      	mov	r9, r2
 8023e4c:	f7ff ffe4 	bl	8023e18 <__retarget_lock_acquire_recursive>
 8023e50:	4b16      	ldr	r3, [pc, #88]	@ (8023eac <__register_exitproc+0x74>)
 8023e52:	681c      	ldr	r4, [r3, #0]
 8023e54:	b90c      	cbnz	r4, 8023e5a <__register_exitproc+0x22>
 8023e56:	4c16      	ldr	r4, [pc, #88]	@ (8023eb0 <__register_exitproc+0x78>)
 8023e58:	601c      	str	r4, [r3, #0]
 8023e5a:	6865      	ldr	r5, [r4, #4]
 8023e5c:	f8da 0000 	ldr.w	r0, [sl]
 8023e60:	2d1f      	cmp	r5, #31
 8023e62:	dd05      	ble.n	8023e70 <__register_exitproc+0x38>
 8023e64:	f7ff ffd9 	bl	8023e1a <__retarget_lock_release_recursive>
 8023e68:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8023e6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8023e70:	b19e      	cbz	r6, 8023e9a <__register_exitproc+0x62>
 8023e72:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 8023e76:	2201      	movs	r2, #1
 8023e78:	f8c1 9088 	str.w	r9, [r1, #136]	@ 0x88
 8023e7c:	f8d4 3188 	ldr.w	r3, [r4, #392]	@ 0x188
 8023e80:	40aa      	lsls	r2, r5
 8023e82:	4313      	orrs	r3, r2
 8023e84:	f8c4 3188 	str.w	r3, [r4, #392]	@ 0x188
 8023e88:	2e02      	cmp	r6, #2
 8023e8a:	f8c1 8108 	str.w	r8, [r1, #264]	@ 0x108
 8023e8e:	bf02      	ittt	eq
 8023e90:	f8d4 318c 	ldreq.w	r3, [r4, #396]	@ 0x18c
 8023e94:	4313      	orreq	r3, r2
 8023e96:	f8c4 318c 	streq.w	r3, [r4, #396]	@ 0x18c
 8023e9a:	1c6b      	adds	r3, r5, #1
 8023e9c:	3502      	adds	r5, #2
 8023e9e:	6063      	str	r3, [r4, #4]
 8023ea0:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 8023ea4:	f7ff ffb9 	bl	8023e1a <__retarget_lock_release_recursive>
 8023ea8:	2000      	movs	r0, #0
 8023eaa:	e7df      	b.n	8023e6c <__register_exitproc+0x34>
 8023eac:	2003cfe4 	.word	0x2003cfe4
 8023eb0:	2003ce54 	.word	0x2003ce54
 8023eb4:	20008970 	.word	0x20008970

08023eb8 <register_fini>:
 8023eb8:	4b02      	ldr	r3, [pc, #8]	@ (8023ec4 <register_fini+0xc>)
 8023eba:	b113      	cbz	r3, 8023ec2 <register_fini+0xa>
 8023ebc:	4802      	ldr	r0, [pc, #8]	@ (8023ec8 <register_fini+0x10>)
 8023ebe:	f000 b805 	b.w	8023ecc <atexit>
 8023ec2:	4770      	bx	lr
 8023ec4:	00000000 	.word	0x00000000
 8023ec8:	08025a11 	.word	0x08025a11

08023ecc <atexit>:
 8023ecc:	2300      	movs	r3, #0
 8023ece:	4601      	mov	r1, r0
 8023ed0:	461a      	mov	r2, r3
 8023ed2:	4618      	mov	r0, r3
 8023ed4:	f7ff bfb0 	b.w	8023e38 <__register_exitproc>

08023ed8 <_malloc_trim_r>:
 8023ed8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8023edc:	4606      	mov	r6, r0
 8023ede:	2008      	movs	r0, #8
 8023ee0:	4689      	mov	r9, r1
 8023ee2:	f7ff ff67 	bl	8023db4 <sysconf>
 8023ee6:	4f24      	ldr	r7, [pc, #144]	@ (8023f78 <_malloc_trim_r+0xa0>)
 8023ee8:	4680      	mov	r8, r0
 8023eea:	4630      	mov	r0, r6
 8023eec:	f7ff f982 	bl	80231f4 <__malloc_lock>
 8023ef0:	68bb      	ldr	r3, [r7, #8]
 8023ef2:	685d      	ldr	r5, [r3, #4]
 8023ef4:	f025 0503 	bic.w	r5, r5, #3
 8023ef8:	f1a5 0411 	sub.w	r4, r5, #17
 8023efc:	eba4 0409 	sub.w	r4, r4, r9
 8023f00:	4444      	add	r4, r8
 8023f02:	fbb4 f4f8 	udiv	r4, r4, r8
 8023f06:	3c01      	subs	r4, #1
 8023f08:	fb08 f404 	mul.w	r4, r8, r4
 8023f0c:	45a0      	cmp	r8, r4
 8023f0e:	dd05      	ble.n	8023f1c <_malloc_trim_r+0x44>
 8023f10:	4630      	mov	r0, r6
 8023f12:	f7ff f975 	bl	8023200 <__malloc_unlock>
 8023f16:	2000      	movs	r0, #0
 8023f18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8023f1c:	2100      	movs	r1, #0
 8023f1e:	4630      	mov	r0, r6
 8023f20:	f7ff ff32 	bl	8023d88 <_sbrk_r>
 8023f24:	68bb      	ldr	r3, [r7, #8]
 8023f26:	442b      	add	r3, r5
 8023f28:	4298      	cmp	r0, r3
 8023f2a:	d1f1      	bne.n	8023f10 <_malloc_trim_r+0x38>
 8023f2c:	4261      	negs	r1, r4
 8023f2e:	4630      	mov	r0, r6
 8023f30:	f7ff ff2a 	bl	8023d88 <_sbrk_r>
 8023f34:	3001      	adds	r0, #1
 8023f36:	d110      	bne.n	8023f5a <_malloc_trim_r+0x82>
 8023f38:	2100      	movs	r1, #0
 8023f3a:	4630      	mov	r0, r6
 8023f3c:	f7ff ff24 	bl	8023d88 <_sbrk_r>
 8023f40:	68ba      	ldr	r2, [r7, #8]
 8023f42:	1a83      	subs	r3, r0, r2
 8023f44:	2b0f      	cmp	r3, #15
 8023f46:	dde3      	ble.n	8023f10 <_malloc_trim_r+0x38>
 8023f48:	490c      	ldr	r1, [pc, #48]	@ (8023f7c <_malloc_trim_r+0xa4>)
 8023f4a:	6809      	ldr	r1, [r1, #0]
 8023f4c:	1a40      	subs	r0, r0, r1
 8023f4e:	490c      	ldr	r1, [pc, #48]	@ (8023f80 <_malloc_trim_r+0xa8>)
 8023f50:	f043 0301 	orr.w	r3, r3, #1
 8023f54:	6008      	str	r0, [r1, #0]
 8023f56:	6053      	str	r3, [r2, #4]
 8023f58:	e7da      	b.n	8023f10 <_malloc_trim_r+0x38>
 8023f5a:	68bb      	ldr	r3, [r7, #8]
 8023f5c:	4a08      	ldr	r2, [pc, #32]	@ (8023f80 <_malloc_trim_r+0xa8>)
 8023f5e:	1b2d      	subs	r5, r5, r4
 8023f60:	f045 0501 	orr.w	r5, r5, #1
 8023f64:	605d      	str	r5, [r3, #4]
 8023f66:	6813      	ldr	r3, [r2, #0]
 8023f68:	4630      	mov	r0, r6
 8023f6a:	1b1b      	subs	r3, r3, r4
 8023f6c:	6013      	str	r3, [r2, #0]
 8023f6e:	f7ff f947 	bl	8023200 <__malloc_unlock>
 8023f72:	2001      	movs	r0, #1
 8023f74:	e7d0      	b.n	8023f18 <_malloc_trim_r+0x40>
 8023f76:	bf00      	nop
 8023f78:	20008438 	.word	0x20008438
 8023f7c:	20008430 	.word	0x20008430
 8023f80:	2003cce0 	.word	0x2003cce0

08023f84 <_free_r>:
 8023f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023f86:	4604      	mov	r4, r0
 8023f88:	460f      	mov	r7, r1
 8023f8a:	2900      	cmp	r1, #0
 8023f8c:	f000 80b1 	beq.w	80240f2 <_free_r+0x16e>
 8023f90:	f7ff f930 	bl	80231f4 <__malloc_lock>
 8023f94:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8023f98:	4d56      	ldr	r5, [pc, #344]	@ (80240f4 <_free_r+0x170>)
 8023f9a:	f022 0001 	bic.w	r0, r2, #1
 8023f9e:	f1a7 0308 	sub.w	r3, r7, #8
 8023fa2:	eb03 0c00 	add.w	ip, r3, r0
 8023fa6:	68a9      	ldr	r1, [r5, #8]
 8023fa8:	f8dc 6004 	ldr.w	r6, [ip, #4]
 8023fac:	4561      	cmp	r1, ip
 8023fae:	f026 0603 	bic.w	r6, r6, #3
 8023fb2:	f002 0201 	and.w	r2, r2, #1
 8023fb6:	d11b      	bne.n	8023ff0 <_free_r+0x6c>
 8023fb8:	4406      	add	r6, r0
 8023fba:	b93a      	cbnz	r2, 8023fcc <_free_r+0x48>
 8023fbc:	f857 2c08 	ldr.w	r2, [r7, #-8]
 8023fc0:	1a9b      	subs	r3, r3, r2
 8023fc2:	4416      	add	r6, r2
 8023fc4:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 8023fc8:	60ca      	str	r2, [r1, #12]
 8023fca:	6091      	str	r1, [r2, #8]
 8023fcc:	f046 0201 	orr.w	r2, r6, #1
 8023fd0:	605a      	str	r2, [r3, #4]
 8023fd2:	60ab      	str	r3, [r5, #8]
 8023fd4:	4b48      	ldr	r3, [pc, #288]	@ (80240f8 <_free_r+0x174>)
 8023fd6:	681b      	ldr	r3, [r3, #0]
 8023fd8:	42b3      	cmp	r3, r6
 8023fda:	d804      	bhi.n	8023fe6 <_free_r+0x62>
 8023fdc:	4b47      	ldr	r3, [pc, #284]	@ (80240fc <_free_r+0x178>)
 8023fde:	4620      	mov	r0, r4
 8023fe0:	6819      	ldr	r1, [r3, #0]
 8023fe2:	f7ff ff79 	bl	8023ed8 <_malloc_trim_r>
 8023fe6:	4620      	mov	r0, r4
 8023fe8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8023fec:	f7ff b908 	b.w	8023200 <__malloc_unlock>
 8023ff0:	f8cc 6004 	str.w	r6, [ip, #4]
 8023ff4:	2a00      	cmp	r2, #0
 8023ff6:	d138      	bne.n	802406a <_free_r+0xe6>
 8023ff8:	f857 1c08 	ldr.w	r1, [r7, #-8]
 8023ffc:	1a5b      	subs	r3, r3, r1
 8023ffe:	4408      	add	r0, r1
 8024000:	6899      	ldr	r1, [r3, #8]
 8024002:	f105 0708 	add.w	r7, r5, #8
 8024006:	42b9      	cmp	r1, r7
 8024008:	d031      	beq.n	802406e <_free_r+0xea>
 802400a:	68df      	ldr	r7, [r3, #12]
 802400c:	60cf      	str	r7, [r1, #12]
 802400e:	60b9      	str	r1, [r7, #8]
 8024010:	eb0c 0106 	add.w	r1, ip, r6
 8024014:	6849      	ldr	r1, [r1, #4]
 8024016:	07c9      	lsls	r1, r1, #31
 8024018:	d40b      	bmi.n	8024032 <_free_r+0xae>
 802401a:	f8dc 1008 	ldr.w	r1, [ip, #8]
 802401e:	4430      	add	r0, r6
 8024020:	bb3a      	cbnz	r2, 8024072 <_free_r+0xee>
 8024022:	4e37      	ldr	r6, [pc, #220]	@ (8024100 <_free_r+0x17c>)
 8024024:	42b1      	cmp	r1, r6
 8024026:	d124      	bne.n	8024072 <_free_r+0xee>
 8024028:	e9c5 3304 	strd	r3, r3, [r5, #16]
 802402c:	e9c3 1102 	strd	r1, r1, [r3, #8]
 8024030:	2201      	movs	r2, #1
 8024032:	f040 0101 	orr.w	r1, r0, #1
 8024036:	6059      	str	r1, [r3, #4]
 8024038:	5018      	str	r0, [r3, r0]
 802403a:	2a00      	cmp	r2, #0
 802403c:	d1d3      	bne.n	8023fe6 <_free_r+0x62>
 802403e:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 8024042:	d21b      	bcs.n	802407c <_free_r+0xf8>
 8024044:	08c2      	lsrs	r2, r0, #3
 8024046:	2101      	movs	r1, #1
 8024048:	0940      	lsrs	r0, r0, #5
 802404a:	4081      	lsls	r1, r0
 802404c:	6868      	ldr	r0, [r5, #4]
 802404e:	3201      	adds	r2, #1
 8024050:	4301      	orrs	r1, r0
 8024052:	6069      	str	r1, [r5, #4]
 8024054:	f855 0032 	ldr.w	r0, [r5, r2, lsl #3]
 8024058:	eb05 01c2 	add.w	r1, r5, r2, lsl #3
 802405c:	3908      	subs	r1, #8
 802405e:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8024062:	f845 3032 	str.w	r3, [r5, r2, lsl #3]
 8024066:	60c3      	str	r3, [r0, #12]
 8024068:	e7bd      	b.n	8023fe6 <_free_r+0x62>
 802406a:	2200      	movs	r2, #0
 802406c:	e7d0      	b.n	8024010 <_free_r+0x8c>
 802406e:	2201      	movs	r2, #1
 8024070:	e7ce      	b.n	8024010 <_free_r+0x8c>
 8024072:	f8dc 600c 	ldr.w	r6, [ip, #12]
 8024076:	60ce      	str	r6, [r1, #12]
 8024078:	60b1      	str	r1, [r6, #8]
 802407a:	e7da      	b.n	8024032 <_free_r+0xae>
 802407c:	f5b0 6f20 	cmp.w	r0, #2560	@ 0xa00
 8024080:	ea4f 2250 	mov.w	r2, r0, lsr #9
 8024084:	d214      	bcs.n	80240b0 <_free_r+0x12c>
 8024086:	0982      	lsrs	r2, r0, #6
 8024088:	3238      	adds	r2, #56	@ 0x38
 802408a:	1c51      	adds	r1, r2, #1
 802408c:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 8024090:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 8024094:	428e      	cmp	r6, r1
 8024096:	d125      	bne.n	80240e4 <_free_r+0x160>
 8024098:	2001      	movs	r0, #1
 802409a:	1092      	asrs	r2, r2, #2
 802409c:	fa00 f202 	lsl.w	r2, r0, r2
 80240a0:	6868      	ldr	r0, [r5, #4]
 80240a2:	4302      	orrs	r2, r0
 80240a4:	606a      	str	r2, [r5, #4]
 80240a6:	e9c3 1602 	strd	r1, r6, [r3, #8]
 80240aa:	60b3      	str	r3, [r6, #8]
 80240ac:	60cb      	str	r3, [r1, #12]
 80240ae:	e79a      	b.n	8023fe6 <_free_r+0x62>
 80240b0:	2a14      	cmp	r2, #20
 80240b2:	d801      	bhi.n	80240b8 <_free_r+0x134>
 80240b4:	325b      	adds	r2, #91	@ 0x5b
 80240b6:	e7e8      	b.n	802408a <_free_r+0x106>
 80240b8:	2a54      	cmp	r2, #84	@ 0x54
 80240ba:	d802      	bhi.n	80240c2 <_free_r+0x13e>
 80240bc:	0b02      	lsrs	r2, r0, #12
 80240be:	326e      	adds	r2, #110	@ 0x6e
 80240c0:	e7e3      	b.n	802408a <_free_r+0x106>
 80240c2:	f5b2 7faa 	cmp.w	r2, #340	@ 0x154
 80240c6:	d802      	bhi.n	80240ce <_free_r+0x14a>
 80240c8:	0bc2      	lsrs	r2, r0, #15
 80240ca:	3277      	adds	r2, #119	@ 0x77
 80240cc:	e7dd      	b.n	802408a <_free_r+0x106>
 80240ce:	f240 5154 	movw	r1, #1364	@ 0x554
 80240d2:	428a      	cmp	r2, r1
 80240d4:	bf9a      	itte	ls
 80240d6:	0c82      	lsrls	r2, r0, #18
 80240d8:	327c      	addls	r2, #124	@ 0x7c
 80240da:	227e      	movhi	r2, #126	@ 0x7e
 80240dc:	e7d5      	b.n	802408a <_free_r+0x106>
 80240de:	6889      	ldr	r1, [r1, #8]
 80240e0:	428e      	cmp	r6, r1
 80240e2:	d004      	beq.n	80240ee <_free_r+0x16a>
 80240e4:	684a      	ldr	r2, [r1, #4]
 80240e6:	f022 0203 	bic.w	r2, r2, #3
 80240ea:	4282      	cmp	r2, r0
 80240ec:	d8f7      	bhi.n	80240de <_free_r+0x15a>
 80240ee:	68ce      	ldr	r6, [r1, #12]
 80240f0:	e7d9      	b.n	80240a6 <_free_r+0x122>
 80240f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80240f4:	20008438 	.word	0x20008438
 80240f8:	20008434 	.word	0x20008434
 80240fc:	2003cd10 	.word	0x2003cd10
 8024100:	20008440 	.word	0x20008440
 8024104:	00000000 	.word	0x00000000

08024108 <_svfprintf_r>:
 8024108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802410c:	b0d3      	sub	sp, #332	@ 0x14c
 802410e:	468b      	mov	fp, r1
 8024110:	4691      	mov	r9, r2
 8024112:	461e      	mov	r6, r3
 8024114:	9003      	str	r0, [sp, #12]
 8024116:	f001 fc0f 	bl	8025938 <_localeconv_r>
 802411a:	6803      	ldr	r3, [r0, #0]
 802411c:	9316      	str	r3, [sp, #88]	@ 0x58
 802411e:	4618      	mov	r0, r3
 8024120:	f7e2 f8be 	bl	80062a0 <strlen>
 8024124:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8024128:	900d      	str	r0, [sp, #52]	@ 0x34
 802412a:	061b      	lsls	r3, r3, #24
 802412c:	d515      	bpl.n	802415a <_svfprintf_r+0x52>
 802412e:	f8db 3010 	ldr.w	r3, [fp, #16]
 8024132:	b993      	cbnz	r3, 802415a <_svfprintf_r+0x52>
 8024134:	9803      	ldr	r0, [sp, #12]
 8024136:	2140      	movs	r1, #64	@ 0x40
 8024138:	f7fe fe22 	bl	8022d80 <_malloc_r>
 802413c:	f8cb 0000 	str.w	r0, [fp]
 8024140:	f8cb 0010 	str.w	r0, [fp, #16]
 8024144:	b930      	cbnz	r0, 8024154 <_svfprintf_r+0x4c>
 8024146:	9a03      	ldr	r2, [sp, #12]
 8024148:	230c      	movs	r3, #12
 802414a:	6013      	str	r3, [r2, #0]
 802414c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8024150:	930f      	str	r3, [sp, #60]	@ 0x3c
 8024152:	e1f7      	b.n	8024544 <_svfprintf_r+0x43c>
 8024154:	2340      	movs	r3, #64	@ 0x40
 8024156:	f8cb 3014 	str.w	r3, [fp, #20]
 802415a:	ed9f 7b93 	vldr	d7, [pc, #588]	@ 80243a8 <_svfprintf_r+0x2a0>
 802415e:	2300      	movs	r3, #0
 8024160:	e9cd 3327 	strd	r3, r3, [sp, #156]	@ 0x9c
 8024164:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8024168:	e9cd 3318 	strd	r3, r3, [sp, #96]	@ 0x60
 802416c:	ac29      	add	r4, sp, #164	@ 0xa4
 802416e:	9426      	str	r4, [sp, #152]	@ 0x98
 8024170:	9304      	str	r3, [sp, #16]
 8024172:	9309      	str	r3, [sp, #36]	@ 0x24
 8024174:	9312      	str	r3, [sp, #72]	@ 0x48
 8024176:	9317      	str	r3, [sp, #92]	@ 0x5c
 8024178:	930f      	str	r3, [sp, #60]	@ 0x3c
 802417a:	464b      	mov	r3, r9
 802417c:	461d      	mov	r5, r3
 802417e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8024182:	b10a      	cbz	r2, 8024188 <_svfprintf_r+0x80>
 8024184:	2a25      	cmp	r2, #37	@ 0x25
 8024186:	d1f9      	bne.n	802417c <_svfprintf_r+0x74>
 8024188:	ebb5 0709 	subs.w	r7, r5, r9
 802418c:	d00d      	beq.n	80241aa <_svfprintf_r+0xa2>
 802418e:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8024190:	443b      	add	r3, r7
 8024192:	9328      	str	r3, [sp, #160]	@ 0xa0
 8024194:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8024196:	3301      	adds	r3, #1
 8024198:	2b07      	cmp	r3, #7
 802419a:	e9c4 9700 	strd	r9, r7, [r4]
 802419e:	9327      	str	r3, [sp, #156]	@ 0x9c
 80241a0:	dc75      	bgt.n	802428e <_svfprintf_r+0x186>
 80241a2:	3408      	adds	r4, #8
 80241a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80241a6:	443b      	add	r3, r7
 80241a8:	930f      	str	r3, [sp, #60]	@ 0x3c
 80241aa:	782b      	ldrb	r3, [r5, #0]
 80241ac:	2b00      	cmp	r3, #0
 80241ae:	f001 8148 	beq.w	8025442 <_svfprintf_r+0x133a>
 80241b2:	2200      	movs	r2, #0
 80241b4:	1c6b      	adds	r3, r5, #1
 80241b6:	f88d 207b 	strb.w	r2, [sp, #123]	@ 0x7b
 80241ba:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 80241be:	920e      	str	r2, [sp, #56]	@ 0x38
 80241c0:	4615      	mov	r5, r2
 80241c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80241c6:	9206      	str	r2, [sp, #24]
 80241c8:	930c      	str	r3, [sp, #48]	@ 0x30
 80241ca:	9b06      	ldr	r3, [sp, #24]
 80241cc:	3b20      	subs	r3, #32
 80241ce:	2b5a      	cmp	r3, #90	@ 0x5a
 80241d0:	f200 85a4 	bhi.w	8024d1c <_svfprintf_r+0xc14>
 80241d4:	e8df f013 	tbh	[pc, r3, lsl #1]
 80241d8:	05a2009d 	.word	0x05a2009d
 80241dc:	00a505a2 	.word	0x00a505a2
 80241e0:	05a205a2 	.word	0x05a205a2
 80241e4:	008505a2 	.word	0x008505a2
 80241e8:	05a205a2 	.word	0x05a205a2
 80241ec:	00b200a8 	.word	0x00b200a8
 80241f0:	00af05a2 	.word	0x00af05a2
 80241f4:	05a200b4 	.word	0x05a200b4
 80241f8:	00d100ce 	.word	0x00d100ce
 80241fc:	00d100d1 	.word	0x00d100d1
 8024200:	00d100d1 	.word	0x00d100d1
 8024204:	00d100d1 	.word	0x00d100d1
 8024208:	00d100d1 	.word	0x00d100d1
 802420c:	05a205a2 	.word	0x05a205a2
 8024210:	05a205a2 	.word	0x05a205a2
 8024214:	05a205a2 	.word	0x05a205a2
 8024218:	014705a2 	.word	0x014705a2
 802421c:	010805a2 	.word	0x010805a2
 8024220:	0147011b 	.word	0x0147011b
 8024224:	01470147 	.word	0x01470147
 8024228:	05a205a2 	.word	0x05a205a2
 802422c:	05a205a2 	.word	0x05a205a2
 8024230:	05a200e2 	.word	0x05a200e2
 8024234:	049d05a2 	.word	0x049d05a2
 8024238:	05a205a2 	.word	0x05a205a2
 802423c:	04e705a2 	.word	0x04e705a2
 8024240:	050805a2 	.word	0x050805a2
 8024244:	05a205a2 	.word	0x05a205a2
 8024248:	05a2052a 	.word	0x05a2052a
 802424c:	05a205a2 	.word	0x05a205a2
 8024250:	05a205a2 	.word	0x05a205a2
 8024254:	05a205a2 	.word	0x05a205a2
 8024258:	014705a2 	.word	0x014705a2
 802425c:	010805a2 	.word	0x010805a2
 8024260:	0147011d 	.word	0x0147011d
 8024264:	01470147 	.word	0x01470147
 8024268:	011d00ee 	.word	0x011d00ee
 802426c:	05a20102 	.word	0x05a20102
 8024270:	05a200fb 	.word	0x05a200fb
 8024274:	049f047e 	.word	0x049f047e
 8024278:	010204d6 	.word	0x010204d6
 802427c:	04e705a2 	.word	0x04e705a2
 8024280:	050a009b 	.word	0x050a009b
 8024284:	05a205a2 	.word	0x05a205a2
 8024288:	05a20065 	.word	0x05a20065
 802428c:	009b      	.short	0x009b
 802428e:	9803      	ldr	r0, [sp, #12]
 8024290:	aa26      	add	r2, sp, #152	@ 0x98
 8024292:	4659      	mov	r1, fp
 8024294:	f002 fa3c 	bl	8026710 <__ssprint_r>
 8024298:	2800      	cmp	r0, #0
 802429a:	f040 814e 	bne.w	802453a <_svfprintf_r+0x432>
 802429e:	ac29      	add	r4, sp, #164	@ 0xa4
 80242a0:	e780      	b.n	80241a4 <_svfprintf_r+0x9c>
 80242a2:	4b43      	ldr	r3, [pc, #268]	@ (80243b0 <_svfprintf_r+0x2a8>)
 80242a4:	9319      	str	r3, [sp, #100]	@ 0x64
 80242a6:	f015 0320 	ands.w	r3, r5, #32
 80242aa:	f000 84c2 	beq.w	8024c32 <_svfprintf_r+0xb2a>
 80242ae:	3607      	adds	r6, #7
 80242b0:	f026 0307 	bic.w	r3, r6, #7
 80242b4:	461a      	mov	r2, r3
 80242b6:	685f      	ldr	r7, [r3, #4]
 80242b8:	f852 6b08 	ldr.w	r6, [r2], #8
 80242bc:	9207      	str	r2, [sp, #28]
 80242be:	07eb      	lsls	r3, r5, #31
 80242c0:	d50a      	bpl.n	80242d8 <_svfprintf_r+0x1d0>
 80242c2:	ea56 0307 	orrs.w	r3, r6, r7
 80242c6:	d007      	beq.n	80242d8 <_svfprintf_r+0x1d0>
 80242c8:	2330      	movs	r3, #48	@ 0x30
 80242ca:	f88d 307c 	strb.w	r3, [sp, #124]	@ 0x7c
 80242ce:	9b06      	ldr	r3, [sp, #24]
 80242d0:	f88d 307d 	strb.w	r3, [sp, #125]	@ 0x7d
 80242d4:	f045 0502 	orr.w	r5, r5, #2
 80242d8:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 80242dc:	2302      	movs	r3, #2
 80242de:	f000 bc28 	b.w	8024b32 <_svfprintf_r+0xa2a>
 80242e2:	9803      	ldr	r0, [sp, #12]
 80242e4:	f001 fb28 	bl	8025938 <_localeconv_r>
 80242e8:	6843      	ldr	r3, [r0, #4]
 80242ea:	9317      	str	r3, [sp, #92]	@ 0x5c
 80242ec:	4618      	mov	r0, r3
 80242ee:	f7e1 ffd7 	bl	80062a0 <strlen>
 80242f2:	9012      	str	r0, [sp, #72]	@ 0x48
 80242f4:	9803      	ldr	r0, [sp, #12]
 80242f6:	f001 fb1f 	bl	8025938 <_localeconv_r>
 80242fa:	6883      	ldr	r3, [r0, #8]
 80242fc:	9309      	str	r3, [sp, #36]	@ 0x24
 80242fe:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8024300:	b12b      	cbz	r3, 802430e <_svfprintf_r+0x206>
 8024302:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024304:	b11b      	cbz	r3, 802430e <_svfprintf_r+0x206>
 8024306:	781b      	ldrb	r3, [r3, #0]
 8024308:	b10b      	cbz	r3, 802430e <_svfprintf_r+0x206>
 802430a:	f445 6580 	orr.w	r5, r5, #1024	@ 0x400
 802430e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8024310:	e757      	b.n	80241c2 <_svfprintf_r+0xba>
 8024312:	f89d 307b 	ldrb.w	r3, [sp, #123]	@ 0x7b
 8024316:	2b00      	cmp	r3, #0
 8024318:	d1f9      	bne.n	802430e <_svfprintf_r+0x206>
 802431a:	2320      	movs	r3, #32
 802431c:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 8024320:	e7f5      	b.n	802430e <_svfprintf_r+0x206>
 8024322:	f045 0501 	orr.w	r5, r5, #1
 8024326:	e7f2      	b.n	802430e <_svfprintf_r+0x206>
 8024328:	f856 3b04 	ldr.w	r3, [r6], #4
 802432c:	930e      	str	r3, [sp, #56]	@ 0x38
 802432e:	2b00      	cmp	r3, #0
 8024330:	daed      	bge.n	802430e <_svfprintf_r+0x206>
 8024332:	425b      	negs	r3, r3
 8024334:	930e      	str	r3, [sp, #56]	@ 0x38
 8024336:	f045 0504 	orr.w	r5, r5, #4
 802433a:	e7e8      	b.n	802430e <_svfprintf_r+0x206>
 802433c:	232b      	movs	r3, #43	@ 0x2b
 802433e:	e7ed      	b.n	802431c <_svfprintf_r+0x214>
 8024340:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8024342:	f813 2b01 	ldrb.w	r2, [r3], #1
 8024346:	9206      	str	r2, [sp, #24]
 8024348:	2a2a      	cmp	r2, #42	@ 0x2a
 802434a:	d10f      	bne.n	802436c <_svfprintf_r+0x264>
 802434c:	f856 2b04 	ldr.w	r2, [r6], #4
 8024350:	930c      	str	r3, [sp, #48]	@ 0x30
 8024352:	ea42 78e2 	orr.w	r8, r2, r2, asr #31
 8024356:	e7da      	b.n	802430e <_svfprintf_r+0x206>
 8024358:	fb01 2808 	mla	r8, r1, r8, r2
 802435c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8024360:	9206      	str	r2, [sp, #24]
 8024362:	9a06      	ldr	r2, [sp, #24]
 8024364:	3a30      	subs	r2, #48	@ 0x30
 8024366:	2a09      	cmp	r2, #9
 8024368:	d9f6      	bls.n	8024358 <_svfprintf_r+0x250>
 802436a:	e72d      	b.n	80241c8 <_svfprintf_r+0xc0>
 802436c:	f04f 0800 	mov.w	r8, #0
 8024370:	210a      	movs	r1, #10
 8024372:	e7f6      	b.n	8024362 <_svfprintf_r+0x25a>
 8024374:	f045 0580 	orr.w	r5, r5, #128	@ 0x80
 8024378:	e7c9      	b.n	802430e <_svfprintf_r+0x206>
 802437a:	2200      	movs	r2, #0
 802437c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802437e:	920e      	str	r2, [sp, #56]	@ 0x38
 8024380:	210a      	movs	r1, #10
 8024382:	9a06      	ldr	r2, [sp, #24]
 8024384:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8024386:	3a30      	subs	r2, #48	@ 0x30
 8024388:	fb01 2200 	mla	r2, r1, r0, r2
 802438c:	920e      	str	r2, [sp, #56]	@ 0x38
 802438e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8024392:	9206      	str	r2, [sp, #24]
 8024394:	3a30      	subs	r2, #48	@ 0x30
 8024396:	2a09      	cmp	r2, #9
 8024398:	d9f3      	bls.n	8024382 <_svfprintf_r+0x27a>
 802439a:	e715      	b.n	80241c8 <_svfprintf_r+0xc0>
 802439c:	f045 0508 	orr.w	r5, r5, #8
 80243a0:	e7b5      	b.n	802430e <_svfprintf_r+0x206>
 80243a2:	bf00      	nop
 80243a4:	f3af 8000 	nop.w
	...
 80243b0:	080af9a0 	.word	0x080af9a0
 80243b4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80243b6:	781b      	ldrb	r3, [r3, #0]
 80243b8:	2b68      	cmp	r3, #104	@ 0x68
 80243ba:	bf01      	itttt	eq
 80243bc:	9b0c      	ldreq	r3, [sp, #48]	@ 0x30
 80243be:	3301      	addeq	r3, #1
 80243c0:	930c      	streq	r3, [sp, #48]	@ 0x30
 80243c2:	f445 7500 	orreq.w	r5, r5, #512	@ 0x200
 80243c6:	bf18      	it	ne
 80243c8:	f045 0540 	orrne.w	r5, r5, #64	@ 0x40
 80243cc:	e79f      	b.n	802430e <_svfprintf_r+0x206>
 80243ce:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80243d0:	781b      	ldrb	r3, [r3, #0]
 80243d2:	2b6c      	cmp	r3, #108	@ 0x6c
 80243d4:	d105      	bne.n	80243e2 <_svfprintf_r+0x2da>
 80243d6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80243d8:	3301      	adds	r3, #1
 80243da:	930c      	str	r3, [sp, #48]	@ 0x30
 80243dc:	f045 0520 	orr.w	r5, r5, #32
 80243e0:	e795      	b.n	802430e <_svfprintf_r+0x206>
 80243e2:	f045 0510 	orr.w	r5, r5, #16
 80243e6:	e792      	b.n	802430e <_svfprintf_r+0x206>
 80243e8:	4632      	mov	r2, r6
 80243ea:	f852 3b04 	ldr.w	r3, [r2], #4
 80243ee:	f88d 30e4 	strb.w	r3, [sp, #228]	@ 0xe4
 80243f2:	2300      	movs	r3, #0
 80243f4:	9207      	str	r2, [sp, #28]
 80243f6:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 80243fa:	469a      	mov	sl, r3
 80243fc:	f04f 0801 	mov.w	r8, #1
 8024400:	9310      	str	r3, [sp, #64]	@ 0x40
 8024402:	461f      	mov	r7, r3
 8024404:	9308      	str	r3, [sp, #32]
 8024406:	461e      	mov	r6, r3
 8024408:	f10d 09e4 	add.w	r9, sp, #228	@ 0xe4
 802440c:	e1d2      	b.n	80247b4 <_svfprintf_r+0x6ac>
 802440e:	f045 0510 	orr.w	r5, r5, #16
 8024412:	06af      	lsls	r7, r5, #26
 8024414:	d512      	bpl.n	802443c <_svfprintf_r+0x334>
 8024416:	3607      	adds	r6, #7
 8024418:	f026 0307 	bic.w	r3, r6, #7
 802441c:	461a      	mov	r2, r3
 802441e:	685f      	ldr	r7, [r3, #4]
 8024420:	f852 6b08 	ldr.w	r6, [r2], #8
 8024424:	9207      	str	r2, [sp, #28]
 8024426:	2f00      	cmp	r7, #0
 8024428:	da06      	bge.n	8024438 <_svfprintf_r+0x330>
 802442a:	4276      	negs	r6, r6
 802442c:	f04f 032d 	mov.w	r3, #45	@ 0x2d
 8024430:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 8024434:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 8024438:	2301      	movs	r3, #1
 802443a:	e37d      	b.n	8024b38 <_svfprintf_r+0xa30>
 802443c:	4633      	mov	r3, r6
 802443e:	06ee      	lsls	r6, r5, #27
 8024440:	f853 7b04 	ldr.w	r7, [r3], #4
 8024444:	9307      	str	r3, [sp, #28]
 8024446:	d502      	bpl.n	802444e <_svfprintf_r+0x346>
 8024448:	463e      	mov	r6, r7
 802444a:	17ff      	asrs	r7, r7, #31
 802444c:	e7eb      	b.n	8024426 <_svfprintf_r+0x31e>
 802444e:	0668      	lsls	r0, r5, #25
 8024450:	d503      	bpl.n	802445a <_svfprintf_r+0x352>
 8024452:	b23e      	sxth	r6, r7
 8024454:	f347 37c0 	sbfx	r7, r7, #15, #1
 8024458:	e7e5      	b.n	8024426 <_svfprintf_r+0x31e>
 802445a:	05a9      	lsls	r1, r5, #22
 802445c:	d5f4      	bpl.n	8024448 <_svfprintf_r+0x340>
 802445e:	b27e      	sxtb	r6, r7
 8024460:	f347 17c0 	sbfx	r7, r7, #7, #1
 8024464:	e7df      	b.n	8024426 <_svfprintf_r+0x31e>
 8024466:	3607      	adds	r6, #7
 8024468:	f026 0307 	bic.w	r3, r6, #7
 802446c:	ecb3 7b02 	vldmia	r3!, {d7}
 8024470:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8024474:	9307      	str	r3, [sp, #28]
 8024476:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8024478:	931a      	str	r3, [sp, #104]	@ 0x68
 802447a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802447c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8024480:	931b      	str	r3, [sp, #108]	@ 0x6c
 8024482:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	@ 0x68
 8024486:	4b81      	ldr	r3, [pc, #516]	@ (802468c <_svfprintf_r+0x584>)
 8024488:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 802448c:	f7e2 fb66 	bl	8006b5c <__aeabi_dcmpun>
 8024490:	bb10      	cbnz	r0, 80244d8 <_svfprintf_r+0x3d0>
 8024492:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	@ 0x68
 8024496:	4b7d      	ldr	r3, [pc, #500]	@ (802468c <_svfprintf_r+0x584>)
 8024498:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 802449c:	f7e2 fb40 	bl	8006b20 <__aeabi_dcmple>
 80244a0:	b9d0      	cbnz	r0, 80244d8 <_svfprintf_r+0x3d0>
 80244a2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80244a6:	2200      	movs	r2, #0
 80244a8:	2300      	movs	r3, #0
 80244aa:	f7e2 fb2f 	bl	8006b0c <__aeabi_dcmplt>
 80244ae:	b110      	cbz	r0, 80244b6 <_svfprintf_r+0x3ae>
 80244b0:	232d      	movs	r3, #45	@ 0x2d
 80244b2:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 80244b6:	4a76      	ldr	r2, [pc, #472]	@ (8024690 <_svfprintf_r+0x588>)
 80244b8:	4b76      	ldr	r3, [pc, #472]	@ (8024694 <_svfprintf_r+0x58c>)
 80244ba:	9906      	ldr	r1, [sp, #24]
 80244bc:	f025 0580 	bic.w	r5, r5, #128	@ 0x80
 80244c0:	2947      	cmp	r1, #71	@ 0x47
 80244c2:	bfd4      	ite	le
 80244c4:	4691      	movle	r9, r2
 80244c6:	4699      	movgt	r9, r3
 80244c8:	f04f 0a00 	mov.w	sl, #0
 80244cc:	f04f 0803 	mov.w	r8, #3
 80244d0:	f8cd a040 	str.w	sl, [sp, #64]	@ 0x40
 80244d4:	f000 bfec 	b.w	80254b0 <_svfprintf_r+0x13a8>
 80244d8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 80244dc:	4610      	mov	r0, r2
 80244de:	4619      	mov	r1, r3
 80244e0:	f7e2 fb3c 	bl	8006b5c <__aeabi_dcmpun>
 80244e4:	4682      	mov	sl, r0
 80244e6:	b140      	cbz	r0, 80244fa <_svfprintf_r+0x3f2>
 80244e8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80244ea:	4a6b      	ldr	r2, [pc, #428]	@ (8024698 <_svfprintf_r+0x590>)
 80244ec:	2b00      	cmp	r3, #0
 80244ee:	bfbc      	itt	lt
 80244f0:	232d      	movlt	r3, #45	@ 0x2d
 80244f2:	f88d 307b 	strblt.w	r3, [sp, #123]	@ 0x7b
 80244f6:	4b69      	ldr	r3, [pc, #420]	@ (802469c <_svfprintf_r+0x594>)
 80244f8:	e7df      	b.n	80244ba <_svfprintf_r+0x3b2>
 80244fa:	9b06      	ldr	r3, [sp, #24]
 80244fc:	2b61      	cmp	r3, #97	@ 0x61
 80244fe:	d025      	beq.n	802454c <_svfprintf_r+0x444>
 8024500:	2b41      	cmp	r3, #65	@ 0x41
 8024502:	d125      	bne.n	8024550 <_svfprintf_r+0x448>
 8024504:	2358      	movs	r3, #88	@ 0x58
 8024506:	2230      	movs	r2, #48	@ 0x30
 8024508:	f1b8 0f63 	cmp.w	r8, #99	@ 0x63
 802450c:	f88d 207c 	strb.w	r2, [sp, #124]	@ 0x7c
 8024510:	f88d 307d 	strb.w	r3, [sp, #125]	@ 0x7d
 8024514:	f045 0502 	orr.w	r5, r5, #2
 8024518:	f340 80a5 	ble.w	8024666 <_svfprintf_r+0x55e>
 802451c:	9803      	ldr	r0, [sp, #12]
 802451e:	f108 0101 	add.w	r1, r8, #1
 8024522:	f7fe fc2d 	bl	8022d80 <_malloc_r>
 8024526:	4681      	mov	r9, r0
 8024528:	2800      	cmp	r0, #0
 802452a:	f040 80a1 	bne.w	8024670 <_svfprintf_r+0x568>
 802452e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8024532:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8024536:	f8ab 300c 	strh.w	r3, [fp, #12]
 802453a:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 802453e:	065b      	lsls	r3, r3, #25
 8024540:	f53f ae04 	bmi.w	802414c <_svfprintf_r+0x44>
 8024544:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8024546:	b053      	add	sp, #332	@ 0x14c
 8024548:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802454c:	2378      	movs	r3, #120	@ 0x78
 802454e:	e7da      	b.n	8024506 <_svfprintf_r+0x3fe>
 8024550:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 8024554:	f000 808e 	beq.w	8024674 <_svfprintf_r+0x56c>
 8024558:	9b06      	ldr	r3, [sp, #24]
 802455a:	f023 0320 	bic.w	r3, r3, #32
 802455e:	2b47      	cmp	r3, #71	@ 0x47
 8024560:	d105      	bne.n	802456e <_svfprintf_r+0x466>
 8024562:	f1b8 0f00 	cmp.w	r8, #0
 8024566:	d102      	bne.n	802456e <_svfprintf_r+0x466>
 8024568:	46c2      	mov	sl, r8
 802456a:	f04f 0801 	mov.w	r8, #1
 802456e:	f445 7380 	orr.w	r3, r5, #256	@ 0x100
 8024572:	9311      	str	r3, [sp, #68]	@ 0x44
 8024574:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8024576:	2b00      	cmp	r3, #0
 8024578:	da7f      	bge.n	802467a <_svfprintf_r+0x572>
 802457a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802457c:	9314      	str	r3, [sp, #80]	@ 0x50
 802457e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8024580:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8024584:	9315      	str	r3, [sp, #84]	@ 0x54
 8024586:	232d      	movs	r3, #45	@ 0x2d
 8024588:	931c      	str	r3, [sp, #112]	@ 0x70
 802458a:	9b06      	ldr	r3, [sp, #24]
 802458c:	f023 0320 	bic.w	r3, r3, #32
 8024590:	2b41      	cmp	r3, #65	@ 0x41
 8024592:	9308      	str	r3, [sp, #32]
 8024594:	f040 81e6 	bne.w	8024964 <_svfprintf_r+0x85c>
 8024598:	a820      	add	r0, sp, #128	@ 0x80
 802459a:	ed9d 0b14 	vldr	d0, [sp, #80]	@ 0x50
 802459e:	f001 fa4b 	bl	8025a38 <frexp>
 80245a2:	2200      	movs	r2, #0
 80245a4:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 80245a8:	ec51 0b10 	vmov	r0, r1, d0
 80245ac:	f7e2 f83c 	bl	8006628 <__aeabi_dmul>
 80245b0:	4602      	mov	r2, r0
 80245b2:	460b      	mov	r3, r1
 80245b4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80245b8:	2200      	movs	r2, #0
 80245ba:	2300      	movs	r3, #0
 80245bc:	f7e2 fa9c 	bl	8006af8 <__aeabi_dcmpeq>
 80245c0:	b108      	cbz	r0, 80245c6 <_svfprintf_r+0x4be>
 80245c2:	2301      	movs	r3, #1
 80245c4:	9320      	str	r3, [sp, #128]	@ 0x80
 80245c6:	4a36      	ldr	r2, [pc, #216]	@ (80246a0 <_svfprintf_r+0x598>)
 80245c8:	4b36      	ldr	r3, [pc, #216]	@ (80246a4 <_svfprintf_r+0x59c>)
 80245ca:	9906      	ldr	r1, [sp, #24]
 80245cc:	2961      	cmp	r1, #97	@ 0x61
 80245ce:	bf18      	it	ne
 80245d0:	461a      	movne	r2, r3
 80245d2:	9210      	str	r2, [sp, #64]	@ 0x40
 80245d4:	f108 37ff 	add.w	r7, r8, #4294967295	@ 0xffffffff
 80245d8:	464e      	mov	r6, r9
 80245da:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80245de:	4b32      	ldr	r3, [pc, #200]	@ (80246a8 <_svfprintf_r+0x5a0>)
 80245e0:	2200      	movs	r2, #0
 80245e2:	f7e2 f821 	bl	8006628 <__aeabi_dmul>
 80245e6:	4602      	mov	r2, r0
 80245e8:	460b      	mov	r3, r1
 80245ea:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80245ee:	f7e2 facb 	bl	8006b88 <__aeabi_d2iz>
 80245f2:	9013      	str	r0, [sp, #76]	@ 0x4c
 80245f4:	f7e1 ffae 	bl	8006554 <__aeabi_i2d>
 80245f8:	4602      	mov	r2, r0
 80245fa:	460b      	mov	r3, r1
 80245fc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8024600:	f7e1 fe5a 	bl	80062b8 <__aeabi_dsub>
 8024604:	4602      	mov	r2, r0
 8024606:	460b      	mov	r3, r1
 8024608:	e9cd 2304 	strd	r2, r3, [sp, #16]
 802460c:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 802460e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8024610:	5c9b      	ldrb	r3, [r3, r2]
 8024612:	f806 3b01 	strb.w	r3, [r6], #1
 8024616:	1c7a      	adds	r2, r7, #1
 8024618:	d006      	beq.n	8024628 <_svfprintf_r+0x520>
 802461a:	1e7b      	subs	r3, r7, #1
 802461c:	931d      	str	r3, [sp, #116]	@ 0x74
 802461e:	2200      	movs	r2, #0
 8024620:	2300      	movs	r3, #0
 8024622:	f7e2 fa69 	bl	8006af8 <__aeabi_dcmpeq>
 8024626:	b370      	cbz	r0, 8024686 <_svfprintf_r+0x57e>
 8024628:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 802462c:	4b1f      	ldr	r3, [pc, #124]	@ (80246ac <_svfprintf_r+0x5a4>)
 802462e:	2200      	movs	r2, #0
 8024630:	f7e2 fa8a 	bl	8006b48 <__aeabi_dcmpgt>
 8024634:	2800      	cmp	r0, #0
 8024636:	d13b      	bne.n	80246b0 <_svfprintf_r+0x5a8>
 8024638:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 802463c:	4b1b      	ldr	r3, [pc, #108]	@ (80246ac <_svfprintf_r+0x5a4>)
 802463e:	2200      	movs	r2, #0
 8024640:	f7e2 fa5a 	bl	8006af8 <__aeabi_dcmpeq>
 8024644:	b110      	cbz	r0, 802464c <_svfprintf_r+0x544>
 8024646:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8024648:	07db      	lsls	r3, r3, #31
 802464a:	d431      	bmi.n	80246b0 <_svfprintf_r+0x5a8>
 802464c:	4633      	mov	r3, r6
 802464e:	19f1      	adds	r1, r6, r7
 8024650:	2030      	movs	r0, #48	@ 0x30
 8024652:	1aca      	subs	r2, r1, r3
 8024654:	2a00      	cmp	r2, #0
 8024656:	f280 8182 	bge.w	802495e <_svfprintf_r+0x856>
 802465a:	1c7b      	adds	r3, r7, #1
 802465c:	3701      	adds	r7, #1
 802465e:	bfb8      	it	lt
 8024660:	2300      	movlt	r3, #0
 8024662:	441e      	add	r6, r3
 8024664:	e038      	b.n	80246d8 <_svfprintf_r+0x5d0>
 8024666:	f04f 0a00 	mov.w	sl, #0
 802466a:	f10d 09e4 	add.w	r9, sp, #228	@ 0xe4
 802466e:	e77e      	b.n	802456e <_svfprintf_r+0x466>
 8024670:	4682      	mov	sl, r0
 8024672:	e77c      	b.n	802456e <_svfprintf_r+0x466>
 8024674:	f04f 0806 	mov.w	r8, #6
 8024678:	e779      	b.n	802456e <_svfprintf_r+0x466>
 802467a:	ed9d 7b0a 	vldr	d7, [sp, #40]	@ 0x28
 802467e:	2300      	movs	r3, #0
 8024680:	ed8d 7b14 	vstr	d7, [sp, #80]	@ 0x50
 8024684:	e780      	b.n	8024588 <_svfprintf_r+0x480>
 8024686:	9f1d      	ldr	r7, [sp, #116]	@ 0x74
 8024688:	e7a7      	b.n	80245da <_svfprintf_r+0x4d2>
 802468a:	bf00      	nop
 802468c:	7fefffff 	.word	0x7fefffff
 8024690:	080af990 	.word	0x080af990
 8024694:	080af994 	.word	0x080af994
 8024698:	080af998 	.word	0x080af998
 802469c:	080af99c 	.word	0x080af99c
 80246a0:	080af9a0 	.word	0x080af9a0
 80246a4:	080af9b1 	.word	0x080af9b1
 80246a8:	40300000 	.word	0x40300000
 80246ac:	3fe00000 	.word	0x3fe00000
 80246b0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80246b2:	9624      	str	r6, [sp, #144]	@ 0x90
 80246b4:	7bd9      	ldrb	r1, [r3, #15]
 80246b6:	2030      	movs	r0, #48	@ 0x30
 80246b8:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80246ba:	1e53      	subs	r3, r2, #1
 80246bc:	9324      	str	r3, [sp, #144]	@ 0x90
 80246be:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 80246c2:	428b      	cmp	r3, r1
 80246c4:	f000 8148 	beq.w	8024958 <_svfprintf_r+0x850>
 80246c8:	2b39      	cmp	r3, #57	@ 0x39
 80246ca:	bf0b      	itete	eq
 80246cc:	9b10      	ldreq	r3, [sp, #64]	@ 0x40
 80246ce:	3301      	addne	r3, #1
 80246d0:	7a9b      	ldrbeq	r3, [r3, #10]
 80246d2:	b2db      	uxtbne	r3, r3
 80246d4:	f802 3c01 	strb.w	r3, [r2, #-1]
 80246d8:	eba6 0309 	sub.w	r3, r6, r9
 80246dc:	9304      	str	r3, [sp, #16]
 80246de:	9b08      	ldr	r3, [sp, #32]
 80246e0:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 80246e2:	2b47      	cmp	r3, #71	@ 0x47
 80246e4:	f040 8187 	bne.w	80249f6 <_svfprintf_r+0x8ee>
 80246e8:	1cf1      	adds	r1, r6, #3
 80246ea:	db02      	blt.n	80246f2 <_svfprintf_r+0x5ea>
 80246ec:	4546      	cmp	r6, r8
 80246ee:	f340 81a5 	ble.w	8024a3c <_svfprintf_r+0x934>
 80246f2:	9b06      	ldr	r3, [sp, #24]
 80246f4:	3b02      	subs	r3, #2
 80246f6:	9306      	str	r3, [sp, #24]
 80246f8:	9906      	ldr	r1, [sp, #24]
 80246fa:	f89d 2018 	ldrb.w	r2, [sp, #24]
 80246fe:	f021 0120 	bic.w	r1, r1, #32
 8024702:	2941      	cmp	r1, #65	@ 0x41
 8024704:	bf08      	it	eq
 8024706:	320f      	addeq	r2, #15
 8024708:	f106 33ff 	add.w	r3, r6, #4294967295	@ 0xffffffff
 802470c:	bf06      	itte	eq
 802470e:	b2d2      	uxtbeq	r2, r2
 8024710:	2101      	moveq	r1, #1
 8024712:	2100      	movne	r1, #0
 8024714:	2b00      	cmp	r3, #0
 8024716:	9320      	str	r3, [sp, #128]	@ 0x80
 8024718:	bfb8      	it	lt
 802471a:	f1c6 0301 	rsblt	r3, r6, #1
 802471e:	f88d 2088 	strb.w	r2, [sp, #136]	@ 0x88
 8024722:	bfb4      	ite	lt
 8024724:	222d      	movlt	r2, #45	@ 0x2d
 8024726:	222b      	movge	r2, #43	@ 0x2b
 8024728:	2b09      	cmp	r3, #9
 802472a:	f88d 2089 	strb.w	r2, [sp, #137]	@ 0x89
 802472e:	f340 8178 	ble.w	8024a22 <_svfprintf_r+0x91a>
 8024732:	f10d 0097 	add.w	r0, sp, #151	@ 0x97
 8024736:	270a      	movs	r7, #10
 8024738:	4602      	mov	r2, r0
 802473a:	fbb3 f6f7 	udiv	r6, r3, r7
 802473e:	fb07 3116 	mls	r1, r7, r6, r3
 8024742:	3130      	adds	r1, #48	@ 0x30
 8024744:	f802 1c01 	strb.w	r1, [r2, #-1]
 8024748:	4619      	mov	r1, r3
 802474a:	2963      	cmp	r1, #99	@ 0x63
 802474c:	f100 30ff 	add.w	r0, r0, #4294967295	@ 0xffffffff
 8024750:	4633      	mov	r3, r6
 8024752:	dcf1      	bgt.n	8024738 <_svfprintf_r+0x630>
 8024754:	3330      	adds	r3, #48	@ 0x30
 8024756:	1e91      	subs	r1, r2, #2
 8024758:	f800 3c01 	strb.w	r3, [r0, #-1]
 802475c:	f10d 0689 	add.w	r6, sp, #137	@ 0x89
 8024760:	460b      	mov	r3, r1
 8024762:	f10d 0097 	add.w	r0, sp, #151	@ 0x97
 8024766:	4283      	cmp	r3, r0
 8024768:	f0c0 8156 	bcc.w	8024a18 <_svfprintf_r+0x910>
 802476c:	f10d 0399 	add.w	r3, sp, #153	@ 0x99
 8024770:	1a9b      	subs	r3, r3, r2
 8024772:	4281      	cmp	r1, r0
 8024774:	bf88      	it	hi
 8024776:	2300      	movhi	r3, #0
 8024778:	f10d 028a 	add.w	r2, sp, #138	@ 0x8a
 802477c:	441a      	add	r2, r3
 802477e:	ab22      	add	r3, sp, #136	@ 0x88
 8024780:	1ad3      	subs	r3, r2, r3
 8024782:	9a04      	ldr	r2, [sp, #16]
 8024784:	9318      	str	r3, [sp, #96]	@ 0x60
 8024786:	2a01      	cmp	r2, #1
 8024788:	eb03 0802 	add.w	r8, r3, r2
 802478c:	dc01      	bgt.n	8024792 <_svfprintf_r+0x68a>
 802478e:	07ea      	lsls	r2, r5, #31
 8024790:	d501      	bpl.n	8024796 <_svfprintf_r+0x68e>
 8024792:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8024794:	4498      	add	r8, r3
 8024796:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 802479a:	2700      	movs	r7, #0
 802479c:	f445 7380 	orr.w	r3, r5, #256	@ 0x100
 80247a0:	9311      	str	r3, [sp, #68]	@ 0x44
 80247a2:	9708      	str	r7, [sp, #32]
 80247a4:	463e      	mov	r6, r7
 80247a6:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 80247a8:	2b00      	cmp	r3, #0
 80247aa:	f040 818f 	bne.w	8024acc <_svfprintf_r+0x9c4>
 80247ae:	2300      	movs	r3, #0
 80247b0:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 80247b2:	9310      	str	r3, [sp, #64]	@ 0x40
 80247b4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80247b6:	4543      	cmp	r3, r8
 80247b8:	bfb8      	it	lt
 80247ba:	4643      	movlt	r3, r8
 80247bc:	9311      	str	r3, [sp, #68]	@ 0x44
 80247be:	f89d 307b 	ldrb.w	r3, [sp, #123]	@ 0x7b
 80247c2:	b113      	cbz	r3, 80247ca <_svfprintf_r+0x6c2>
 80247c4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80247c6:	3301      	adds	r3, #1
 80247c8:	9311      	str	r3, [sp, #68]	@ 0x44
 80247ca:	f015 0302 	ands.w	r3, r5, #2
 80247ce:	931c      	str	r3, [sp, #112]	@ 0x70
 80247d0:	bf1e      	ittt	ne
 80247d2:	9b11      	ldrne	r3, [sp, #68]	@ 0x44
 80247d4:	3302      	addne	r3, #2
 80247d6:	9311      	strne	r3, [sp, #68]	@ 0x44
 80247d8:	f015 0384 	ands.w	r3, r5, #132	@ 0x84
 80247dc:	931d      	str	r3, [sp, #116]	@ 0x74
 80247de:	d122      	bne.n	8024826 <_svfprintf_r+0x71e>
 80247e0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80247e2:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80247e4:	1a9b      	subs	r3, r3, r2
 80247e6:	2b00      	cmp	r3, #0
 80247e8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80247ea:	dd1c      	ble.n	8024826 <_svfprintf_r+0x71e>
 80247ec:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 80247ee:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 80247f2:	2810      	cmp	r0, #16
 80247f4:	489e      	ldr	r0, [pc, #632]	@ (8024a70 <_svfprintf_r+0x968>)
 80247f6:	6020      	str	r0, [r4, #0]
 80247f8:	f102 0201 	add.w	r2, r2, #1
 80247fc:	f104 0108 	add.w	r1, r4, #8
 8024800:	f300 8298 	bgt.w	8024d34 <_svfprintf_r+0xc2c>
 8024804:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8024806:	6060      	str	r0, [r4, #4]
 8024808:	4403      	add	r3, r0
 802480a:	2a07      	cmp	r2, #7
 802480c:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8024810:	f340 82a5 	ble.w	8024d5e <_svfprintf_r+0xc56>
 8024814:	9803      	ldr	r0, [sp, #12]
 8024816:	aa26      	add	r2, sp, #152	@ 0x98
 8024818:	4659      	mov	r1, fp
 802481a:	f001 ff79 	bl	8026710 <__ssprint_r>
 802481e:	2800      	cmp	r0, #0
 8024820:	f040 85ed 	bne.w	80253fe <_svfprintf_r+0x12f6>
 8024824:	ac29      	add	r4, sp, #164	@ 0xa4
 8024826:	f89d 207b 	ldrb.w	r2, [sp, #123]	@ 0x7b
 802482a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802482c:	b16a      	cbz	r2, 802484a <_svfprintf_r+0x742>
 802482e:	f10d 027b 	add.w	r2, sp, #123	@ 0x7b
 8024832:	6022      	str	r2, [r4, #0]
 8024834:	2201      	movs	r2, #1
 8024836:	4413      	add	r3, r2
 8024838:	9328      	str	r3, [sp, #160]	@ 0xa0
 802483a:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802483c:	6062      	str	r2, [r4, #4]
 802483e:	4413      	add	r3, r2
 8024840:	2b07      	cmp	r3, #7
 8024842:	9327      	str	r3, [sp, #156]	@ 0x9c
 8024844:	f300 828d 	bgt.w	8024d62 <_svfprintf_r+0xc5a>
 8024848:	3408      	adds	r4, #8
 802484a:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 802484c:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802484e:	b162      	cbz	r2, 802486a <_svfprintf_r+0x762>
 8024850:	aa1f      	add	r2, sp, #124	@ 0x7c
 8024852:	6022      	str	r2, [r4, #0]
 8024854:	2202      	movs	r2, #2
 8024856:	4413      	add	r3, r2
 8024858:	9328      	str	r3, [sp, #160]	@ 0xa0
 802485a:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802485c:	6062      	str	r2, [r4, #4]
 802485e:	3301      	adds	r3, #1
 8024860:	2b07      	cmp	r3, #7
 8024862:	9327      	str	r3, [sp, #156]	@ 0x9c
 8024864:	f300 8287 	bgt.w	8024d76 <_svfprintf_r+0xc6e>
 8024868:	3408      	adds	r4, #8
 802486a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 802486c:	2b80      	cmp	r3, #128	@ 0x80
 802486e:	d122      	bne.n	80248b6 <_svfprintf_r+0x7ae>
 8024870:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8024872:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8024874:	1a9b      	subs	r3, r3, r2
 8024876:	2b00      	cmp	r3, #0
 8024878:	9313      	str	r3, [sp, #76]	@ 0x4c
 802487a:	dd1c      	ble.n	80248b6 <_svfprintf_r+0x7ae>
 802487c:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 802487e:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 8024882:	2810      	cmp	r0, #16
 8024884:	487b      	ldr	r0, [pc, #492]	@ (8024a74 <_svfprintf_r+0x96c>)
 8024886:	6020      	str	r0, [r4, #0]
 8024888:	f102 0201 	add.w	r2, r2, #1
 802488c:	f104 0108 	add.w	r1, r4, #8
 8024890:	f300 827b 	bgt.w	8024d8a <_svfprintf_r+0xc82>
 8024894:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8024896:	6060      	str	r0, [r4, #4]
 8024898:	4403      	add	r3, r0
 802489a:	2a07      	cmp	r2, #7
 802489c:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 80248a0:	f340 8288 	ble.w	8024db4 <_svfprintf_r+0xcac>
 80248a4:	9803      	ldr	r0, [sp, #12]
 80248a6:	aa26      	add	r2, sp, #152	@ 0x98
 80248a8:	4659      	mov	r1, fp
 80248aa:	f001 ff31 	bl	8026710 <__ssprint_r>
 80248ae:	2800      	cmp	r0, #0
 80248b0:	f040 85a5 	bne.w	80253fe <_svfprintf_r+0x12f6>
 80248b4:	ac29      	add	r4, sp, #164	@ 0xa4
 80248b6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80248b8:	eba3 0308 	sub.w	r3, r3, r8
 80248bc:	2b00      	cmp	r3, #0
 80248be:	9310      	str	r3, [sp, #64]	@ 0x40
 80248c0:	dd1c      	ble.n	80248fc <_svfprintf_r+0x7f4>
 80248c2:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80248c4:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 80248c8:	2810      	cmp	r0, #16
 80248ca:	486a      	ldr	r0, [pc, #424]	@ (8024a74 <_svfprintf_r+0x96c>)
 80248cc:	6020      	str	r0, [r4, #0]
 80248ce:	f102 0201 	add.w	r2, r2, #1
 80248d2:	f104 0108 	add.w	r1, r4, #8
 80248d6:	f300 826f 	bgt.w	8024db8 <_svfprintf_r+0xcb0>
 80248da:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80248dc:	6060      	str	r0, [r4, #4]
 80248de:	4403      	add	r3, r0
 80248e0:	2a07      	cmp	r2, #7
 80248e2:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 80248e6:	f340 827c 	ble.w	8024de2 <_svfprintf_r+0xcda>
 80248ea:	9803      	ldr	r0, [sp, #12]
 80248ec:	aa26      	add	r2, sp, #152	@ 0x98
 80248ee:	4659      	mov	r1, fp
 80248f0:	f001 ff0e 	bl	8026710 <__ssprint_r>
 80248f4:	2800      	cmp	r0, #0
 80248f6:	f040 8582 	bne.w	80253fe <_svfprintf_r+0x12f6>
 80248fa:	ac29      	add	r4, sp, #164	@ 0xa4
 80248fc:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80248fe:	9310      	str	r3, [sp, #64]	@ 0x40
 8024900:	05ea      	lsls	r2, r5, #23
 8024902:	f100 8275 	bmi.w	8024df0 <_svfprintf_r+0xce8>
 8024906:	4443      	add	r3, r8
 8024908:	9328      	str	r3, [sp, #160]	@ 0xa0
 802490a:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802490c:	3301      	adds	r3, #1
 802490e:	2b07      	cmp	r3, #7
 8024910:	e9c4 9800 	strd	r9, r8, [r4]
 8024914:	9327      	str	r3, [sp, #156]	@ 0x9c
 8024916:	f300 82b1 	bgt.w	8024e7c <_svfprintf_r+0xd74>
 802491a:	3408      	adds	r4, #8
 802491c:	076a      	lsls	r2, r5, #29
 802491e:	f100 8550 	bmi.w	80253c2 <_svfprintf_r+0x12ba>
 8024922:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8024926:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8024928:	428a      	cmp	r2, r1
 802492a:	bfac      	ite	ge
 802492c:	189b      	addge	r3, r3, r2
 802492e:	185b      	addlt	r3, r3, r1
 8024930:	930f      	str	r3, [sp, #60]	@ 0x3c
 8024932:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8024934:	b13b      	cbz	r3, 8024946 <_svfprintf_r+0x83e>
 8024936:	9803      	ldr	r0, [sp, #12]
 8024938:	aa26      	add	r2, sp, #152	@ 0x98
 802493a:	4659      	mov	r1, fp
 802493c:	f001 fee8 	bl	8026710 <__ssprint_r>
 8024940:	2800      	cmp	r0, #0
 8024942:	f040 855c 	bne.w	80253fe <_svfprintf_r+0x12f6>
 8024946:	2300      	movs	r3, #0
 8024948:	9327      	str	r3, [sp, #156]	@ 0x9c
 802494a:	f1ba 0f00 	cmp.w	sl, #0
 802494e:	f040 8572 	bne.w	8025436 <_svfprintf_r+0x132e>
 8024952:	9e07      	ldr	r6, [sp, #28]
 8024954:	ac29      	add	r4, sp, #164	@ 0xa4
 8024956:	e0c6      	b.n	8024ae6 <_svfprintf_r+0x9de>
 8024958:	f802 0c01 	strb.w	r0, [r2, #-1]
 802495c:	e6ac      	b.n	80246b8 <_svfprintf_r+0x5b0>
 802495e:	f803 0b01 	strb.w	r0, [r3], #1
 8024962:	e676      	b.n	8024652 <_svfprintf_r+0x54a>
 8024964:	9b08      	ldr	r3, [sp, #32]
 8024966:	2b46      	cmp	r3, #70	@ 0x46
 8024968:	d005      	beq.n	8024976 <_svfprintf_r+0x86e>
 802496a:	2b45      	cmp	r3, #69	@ 0x45
 802496c:	d11a      	bne.n	80249a4 <_svfprintf_r+0x89c>
 802496e:	f108 0601 	add.w	r6, r8, #1
 8024972:	2102      	movs	r1, #2
 8024974:	e001      	b.n	802497a <_svfprintf_r+0x872>
 8024976:	4646      	mov	r6, r8
 8024978:	2103      	movs	r1, #3
 802497a:	ab24      	add	r3, sp, #144	@ 0x90
 802497c:	9301      	str	r3, [sp, #4]
 802497e:	ab21      	add	r3, sp, #132	@ 0x84
 8024980:	9300      	str	r3, [sp, #0]
 8024982:	ed9d 0b14 	vldr	d0, [sp, #80]	@ 0x50
 8024986:	ab20      	add	r3, sp, #128	@ 0x80
 8024988:	9803      	ldr	r0, [sp, #12]
 802498a:	4632      	mov	r2, r6
 802498c:	f001 f914 	bl	8025bb8 <_dtoa_r>
 8024990:	9b08      	ldr	r3, [sp, #32]
 8024992:	2b47      	cmp	r3, #71	@ 0x47
 8024994:	4681      	mov	r9, r0
 8024996:	d119      	bne.n	80249cc <_svfprintf_r+0x8c4>
 8024998:	07e8      	lsls	r0, r5, #31
 802499a:	d405      	bmi.n	80249a8 <_svfprintf_r+0x8a0>
 802499c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802499e:	eba3 0309 	sub.w	r3, r3, r9
 80249a2:	e69b      	b.n	80246dc <_svfprintf_r+0x5d4>
 80249a4:	4646      	mov	r6, r8
 80249a6:	e7e4      	b.n	8024972 <_svfprintf_r+0x86a>
 80249a8:	eb09 0706 	add.w	r7, r9, r6
 80249ac:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	@ 0x50
 80249b0:	2200      	movs	r2, #0
 80249b2:	2300      	movs	r3, #0
 80249b4:	f7e2 f8a0 	bl	8006af8 <__aeabi_dcmpeq>
 80249b8:	b100      	cbz	r0, 80249bc <_svfprintf_r+0x8b4>
 80249ba:	9724      	str	r7, [sp, #144]	@ 0x90
 80249bc:	2230      	movs	r2, #48	@ 0x30
 80249be:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80249c0:	429f      	cmp	r7, r3
 80249c2:	d9eb      	bls.n	802499c <_svfprintf_r+0x894>
 80249c4:	1c59      	adds	r1, r3, #1
 80249c6:	9124      	str	r1, [sp, #144]	@ 0x90
 80249c8:	701a      	strb	r2, [r3, #0]
 80249ca:	e7f8      	b.n	80249be <_svfprintf_r+0x8b6>
 80249cc:	9b08      	ldr	r3, [sp, #32]
 80249ce:	2b46      	cmp	r3, #70	@ 0x46
 80249d0:	eb00 0706 	add.w	r7, r0, r6
 80249d4:	d1ea      	bne.n	80249ac <_svfprintf_r+0x8a4>
 80249d6:	7803      	ldrb	r3, [r0, #0]
 80249d8:	2b30      	cmp	r3, #48	@ 0x30
 80249da:	d109      	bne.n	80249f0 <_svfprintf_r+0x8e8>
 80249dc:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	@ 0x50
 80249e0:	2200      	movs	r2, #0
 80249e2:	2300      	movs	r3, #0
 80249e4:	f7e2 f888 	bl	8006af8 <__aeabi_dcmpeq>
 80249e8:	b910      	cbnz	r0, 80249f0 <_svfprintf_r+0x8e8>
 80249ea:	f1c6 0601 	rsb	r6, r6, #1
 80249ee:	9620      	str	r6, [sp, #128]	@ 0x80
 80249f0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80249f2:	441f      	add	r7, r3
 80249f4:	e7da      	b.n	80249ac <_svfprintf_r+0x8a4>
 80249f6:	9b08      	ldr	r3, [sp, #32]
 80249f8:	2b46      	cmp	r3, #70	@ 0x46
 80249fa:	f47f ae7d 	bne.w	80246f8 <_svfprintf_r+0x5f0>
 80249fe:	f005 0301 	and.w	r3, r5, #1
 8024a02:	2e00      	cmp	r6, #0
 8024a04:	ea43 0308 	orr.w	r3, r3, r8
 8024a08:	dd25      	ble.n	8024a56 <_svfprintf_r+0x94e>
 8024a0a:	b37b      	cbz	r3, 8024a6c <_svfprintf_r+0x964>
 8024a0c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8024a0e:	18f3      	adds	r3, r6, r3
 8024a10:	4498      	add	r8, r3
 8024a12:	2366      	movs	r3, #102	@ 0x66
 8024a14:	9306      	str	r3, [sp, #24]
 8024a16:	e033      	b.n	8024a80 <_svfprintf_r+0x978>
 8024a18:	f813 7b01 	ldrb.w	r7, [r3], #1
 8024a1c:	f806 7f01 	strb.w	r7, [r6, #1]!
 8024a20:	e6a1      	b.n	8024766 <_svfprintf_r+0x65e>
 8024a22:	b941      	cbnz	r1, 8024a36 <_svfprintf_r+0x92e>
 8024a24:	2230      	movs	r2, #48	@ 0x30
 8024a26:	f88d 208a 	strb.w	r2, [sp, #138]	@ 0x8a
 8024a2a:	f10d 028b 	add.w	r2, sp, #139	@ 0x8b
 8024a2e:	3330      	adds	r3, #48	@ 0x30
 8024a30:	f802 3b01 	strb.w	r3, [r2], #1
 8024a34:	e6a3      	b.n	802477e <_svfprintf_r+0x676>
 8024a36:	f10d 028a 	add.w	r2, sp, #138	@ 0x8a
 8024a3a:	e7f8      	b.n	8024a2e <_svfprintf_r+0x926>
 8024a3c:	9b04      	ldr	r3, [sp, #16]
 8024a3e:	429e      	cmp	r6, r3
 8024a40:	da0d      	bge.n	8024a5e <_svfprintf_r+0x956>
 8024a42:	9b04      	ldr	r3, [sp, #16]
 8024a44:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8024a46:	2e00      	cmp	r6, #0
 8024a48:	eb03 0802 	add.w	r8, r3, r2
 8024a4c:	dc0c      	bgt.n	8024a68 <_svfprintf_r+0x960>
 8024a4e:	f1c6 0301 	rsb	r3, r6, #1
 8024a52:	4498      	add	r8, r3
 8024a54:	e008      	b.n	8024a68 <_svfprintf_r+0x960>
 8024a56:	b17b      	cbz	r3, 8024a78 <_svfprintf_r+0x970>
 8024a58:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8024a5a:	3301      	adds	r3, #1
 8024a5c:	e7d8      	b.n	8024a10 <_svfprintf_r+0x908>
 8024a5e:	07eb      	lsls	r3, r5, #31
 8024a60:	d521      	bpl.n	8024aa6 <_svfprintf_r+0x99e>
 8024a62:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8024a64:	eb06 0803 	add.w	r8, r6, r3
 8024a68:	2367      	movs	r3, #103	@ 0x67
 8024a6a:	e7d3      	b.n	8024a14 <_svfprintf_r+0x90c>
 8024a6c:	46b0      	mov	r8, r6
 8024a6e:	e7d0      	b.n	8024a12 <_svfprintf_r+0x90a>
 8024a70:	080af9d4 	.word	0x080af9d4
 8024a74:	080af9c4 	.word	0x080af9c4
 8024a78:	2366      	movs	r3, #102	@ 0x66
 8024a7a:	9306      	str	r3, [sp, #24]
 8024a7c:	f04f 0801 	mov.w	r8, #1
 8024a80:	f415 6380 	ands.w	r3, r5, #1024	@ 0x400
 8024a84:	9308      	str	r3, [sp, #32]
 8024a86:	d01f      	beq.n	8024ac8 <_svfprintf_r+0x9c0>
 8024a88:	2700      	movs	r7, #0
 8024a8a:	2e00      	cmp	r6, #0
 8024a8c:	9708      	str	r7, [sp, #32]
 8024a8e:	f77f ae8a 	ble.w	80247a6 <_svfprintf_r+0x69e>
 8024a92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024a94:	781b      	ldrb	r3, [r3, #0]
 8024a96:	2bff      	cmp	r3, #255	@ 0xff
 8024a98:	d107      	bne.n	8024aaa <_svfprintf_r+0x9a2>
 8024a9a:	9b08      	ldr	r3, [sp, #32]
 8024a9c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8024a9e:	443b      	add	r3, r7
 8024aa0:	fb02 8803 	mla	r8, r2, r3, r8
 8024aa4:	e67f      	b.n	80247a6 <_svfprintf_r+0x69e>
 8024aa6:	46b0      	mov	r8, r6
 8024aa8:	e7de      	b.n	8024a68 <_svfprintf_r+0x960>
 8024aaa:	42b3      	cmp	r3, r6
 8024aac:	daf5      	bge.n	8024a9a <_svfprintf_r+0x992>
 8024aae:	1af6      	subs	r6, r6, r3
 8024ab0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024ab2:	785b      	ldrb	r3, [r3, #1]
 8024ab4:	b133      	cbz	r3, 8024ac4 <_svfprintf_r+0x9bc>
 8024ab6:	9b08      	ldr	r3, [sp, #32]
 8024ab8:	3301      	adds	r3, #1
 8024aba:	9308      	str	r3, [sp, #32]
 8024abc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024abe:	3301      	adds	r3, #1
 8024ac0:	9309      	str	r3, [sp, #36]	@ 0x24
 8024ac2:	e7e6      	b.n	8024a92 <_svfprintf_r+0x98a>
 8024ac4:	3701      	adds	r7, #1
 8024ac6:	e7e4      	b.n	8024a92 <_svfprintf_r+0x98a>
 8024ac8:	9f08      	ldr	r7, [sp, #32]
 8024aca:	e66c      	b.n	80247a6 <_svfprintf_r+0x69e>
 8024acc:	232d      	movs	r3, #45	@ 0x2d
 8024ace:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 8024ad2:	e66c      	b.n	80247ae <_svfprintf_r+0x6a6>
 8024ad4:	06af      	lsls	r7, r5, #26
 8024ad6:	d50a      	bpl.n	8024aee <_svfprintf_r+0x9e6>
 8024ad8:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8024ada:	6833      	ldr	r3, [r6, #0]
 8024adc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8024ade:	17d2      	asrs	r2, r2, #31
 8024ae0:	e9c3 1200 	strd	r1, r2, [r3]
 8024ae4:	3604      	adds	r6, #4
 8024ae6:	f8dd 9030 	ldr.w	r9, [sp, #48]	@ 0x30
 8024aea:	f7ff bb46 	b.w	802417a <_svfprintf_r+0x72>
 8024aee:	06e8      	lsls	r0, r5, #27
 8024af0:	d503      	bpl.n	8024afa <_svfprintf_r+0x9f2>
 8024af2:	6833      	ldr	r3, [r6, #0]
 8024af4:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8024af6:	601a      	str	r2, [r3, #0]
 8024af8:	e7f4      	b.n	8024ae4 <_svfprintf_r+0x9dc>
 8024afa:	0669      	lsls	r1, r5, #25
 8024afc:	d503      	bpl.n	8024b06 <_svfprintf_r+0x9fe>
 8024afe:	6833      	ldr	r3, [r6, #0]
 8024b00:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8024b02:	801a      	strh	r2, [r3, #0]
 8024b04:	e7ee      	b.n	8024ae4 <_svfprintf_r+0x9dc>
 8024b06:	05aa      	lsls	r2, r5, #22
 8024b08:	d5f3      	bpl.n	8024af2 <_svfprintf_r+0x9ea>
 8024b0a:	6833      	ldr	r3, [r6, #0]
 8024b0c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8024b0e:	701a      	strb	r2, [r3, #0]
 8024b10:	e7e8      	b.n	8024ae4 <_svfprintf_r+0x9dc>
 8024b12:	f045 0510 	orr.w	r5, r5, #16
 8024b16:	f015 0320 	ands.w	r3, r5, #32
 8024b1a:	d020      	beq.n	8024b5e <_svfprintf_r+0xa56>
 8024b1c:	3607      	adds	r6, #7
 8024b1e:	f026 0307 	bic.w	r3, r6, #7
 8024b22:	461a      	mov	r2, r3
 8024b24:	685f      	ldr	r7, [r3, #4]
 8024b26:	f852 6b08 	ldr.w	r6, [r2], #8
 8024b2a:	9207      	str	r2, [sp, #28]
 8024b2c:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 8024b30:	2300      	movs	r3, #0
 8024b32:	2200      	movs	r2, #0
 8024b34:	f88d 207b 	strb.w	r2, [sp, #123]	@ 0x7b
 8024b38:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 8024b3c:	f000 848c 	beq.w	8025458 <_svfprintf_r+0x1350>
 8024b40:	f025 0280 	bic.w	r2, r5, #128	@ 0x80
 8024b44:	9208      	str	r2, [sp, #32]
 8024b46:	ea56 0207 	orrs.w	r2, r6, r7
 8024b4a:	f040 848a 	bne.w	8025462 <_svfprintf_r+0x135a>
 8024b4e:	f1b8 0f00 	cmp.w	r8, #0
 8024b52:	f000 80db 	beq.w	8024d0c <_svfprintf_r+0xc04>
 8024b56:	2b01      	cmp	r3, #1
 8024b58:	f040 8486 	bne.w	8025468 <_svfprintf_r+0x1360>
 8024b5c:	e083      	b.n	8024c66 <_svfprintf_r+0xb5e>
 8024b5e:	4632      	mov	r2, r6
 8024b60:	f015 0710 	ands.w	r7, r5, #16
 8024b64:	f852 6b04 	ldr.w	r6, [r2], #4
 8024b68:	9207      	str	r2, [sp, #28]
 8024b6a:	d001      	beq.n	8024b70 <_svfprintf_r+0xa68>
 8024b6c:	461f      	mov	r7, r3
 8024b6e:	e7dd      	b.n	8024b2c <_svfprintf_r+0xa24>
 8024b70:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 8024b74:	d001      	beq.n	8024b7a <_svfprintf_r+0xa72>
 8024b76:	b2b6      	uxth	r6, r6
 8024b78:	e7d8      	b.n	8024b2c <_svfprintf_r+0xa24>
 8024b7a:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 8024b7e:	d0d5      	beq.n	8024b2c <_svfprintf_r+0xa24>
 8024b80:	b2f6      	uxtb	r6, r6
 8024b82:	e7f3      	b.n	8024b6c <_svfprintf_r+0xa64>
 8024b84:	4633      	mov	r3, r6
 8024b86:	2278      	movs	r2, #120	@ 0x78
 8024b88:	f853 6b04 	ldr.w	r6, [r3], #4
 8024b8c:	9307      	str	r3, [sp, #28]
 8024b8e:	f647 0330 	movw	r3, #30768	@ 0x7830
 8024b92:	f8ad 307c 	strh.w	r3, [sp, #124]	@ 0x7c
 8024b96:	4b94      	ldr	r3, [pc, #592]	@ (8024de8 <_svfprintf_r+0xce0>)
 8024b98:	9319      	str	r3, [sp, #100]	@ 0x64
 8024b9a:	2700      	movs	r7, #0
 8024b9c:	f045 0502 	orr.w	r5, r5, #2
 8024ba0:	2302      	movs	r3, #2
 8024ba2:	9206      	str	r2, [sp, #24]
 8024ba4:	e7c5      	b.n	8024b32 <_svfprintf_r+0xa2a>
 8024ba6:	4633      	mov	r3, r6
 8024ba8:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 8024bac:	f853 9b04 	ldr.w	r9, [r3], #4
 8024bb0:	9307      	str	r3, [sp, #28]
 8024bb2:	f04f 0600 	mov.w	r6, #0
 8024bb6:	f88d 607b 	strb.w	r6, [sp, #123]	@ 0x7b
 8024bba:	d00f      	beq.n	8024bdc <_svfprintf_r+0xad4>
 8024bbc:	4642      	mov	r2, r8
 8024bbe:	4631      	mov	r1, r6
 8024bc0:	4648      	mov	r0, r9
 8024bc2:	f7e1 fb1d 	bl	8006200 <memchr>
 8024bc6:	4682      	mov	sl, r0
 8024bc8:	2800      	cmp	r0, #0
 8024bca:	f43f ac81 	beq.w	80244d0 <_svfprintf_r+0x3c8>
 8024bce:	eba0 0809 	sub.w	r8, r0, r9
 8024bd2:	46b2      	mov	sl, r6
 8024bd4:	9610      	str	r6, [sp, #64]	@ 0x40
 8024bd6:	4637      	mov	r7, r6
 8024bd8:	9608      	str	r6, [sp, #32]
 8024bda:	e5eb      	b.n	80247b4 <_svfprintf_r+0x6ac>
 8024bdc:	4648      	mov	r0, r9
 8024bde:	f7e1 fb5f 	bl	80062a0 <strlen>
 8024be2:	46b2      	mov	sl, r6
 8024be4:	4680      	mov	r8, r0
 8024be6:	e473      	b.n	80244d0 <_svfprintf_r+0x3c8>
 8024be8:	f045 0510 	orr.w	r5, r5, #16
 8024bec:	f015 0320 	ands.w	r3, r5, #32
 8024bf0:	d009      	beq.n	8024c06 <_svfprintf_r+0xafe>
 8024bf2:	3607      	adds	r6, #7
 8024bf4:	f026 0307 	bic.w	r3, r6, #7
 8024bf8:	461a      	mov	r2, r3
 8024bfa:	685f      	ldr	r7, [r3, #4]
 8024bfc:	f852 6b08 	ldr.w	r6, [r2], #8
 8024c00:	9207      	str	r2, [sp, #28]
 8024c02:	2301      	movs	r3, #1
 8024c04:	e795      	b.n	8024b32 <_svfprintf_r+0xa2a>
 8024c06:	4632      	mov	r2, r6
 8024c08:	f015 0710 	ands.w	r7, r5, #16
 8024c0c:	f852 6b04 	ldr.w	r6, [r2], #4
 8024c10:	9207      	str	r2, [sp, #28]
 8024c12:	d001      	beq.n	8024c18 <_svfprintf_r+0xb10>
 8024c14:	461f      	mov	r7, r3
 8024c16:	e7f4      	b.n	8024c02 <_svfprintf_r+0xafa>
 8024c18:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 8024c1c:	d001      	beq.n	8024c22 <_svfprintf_r+0xb1a>
 8024c1e:	b2b6      	uxth	r6, r6
 8024c20:	e7ef      	b.n	8024c02 <_svfprintf_r+0xafa>
 8024c22:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 8024c26:	d0ec      	beq.n	8024c02 <_svfprintf_r+0xafa>
 8024c28:	b2f6      	uxtb	r6, r6
 8024c2a:	e7f3      	b.n	8024c14 <_svfprintf_r+0xb0c>
 8024c2c:	4b6f      	ldr	r3, [pc, #444]	@ (8024dec <_svfprintf_r+0xce4>)
 8024c2e:	f7ff bb39 	b.w	80242a4 <_svfprintf_r+0x19c>
 8024c32:	4632      	mov	r2, r6
 8024c34:	f015 0710 	ands.w	r7, r5, #16
 8024c38:	f852 6b04 	ldr.w	r6, [r2], #4
 8024c3c:	9207      	str	r2, [sp, #28]
 8024c3e:	d002      	beq.n	8024c46 <_svfprintf_r+0xb3e>
 8024c40:	461f      	mov	r7, r3
 8024c42:	f7ff bb3c 	b.w	80242be <_svfprintf_r+0x1b6>
 8024c46:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 8024c4a:	d002      	beq.n	8024c52 <_svfprintf_r+0xb4a>
 8024c4c:	b2b6      	uxth	r6, r6
 8024c4e:	f7ff bb36 	b.w	80242be <_svfprintf_r+0x1b6>
 8024c52:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 8024c56:	f43f ab32 	beq.w	80242be <_svfprintf_r+0x1b6>
 8024c5a:	b2f6      	uxtb	r6, r6
 8024c5c:	e7f0      	b.n	8024c40 <_svfprintf_r+0xb38>
 8024c5e:	2e0a      	cmp	r6, #10
 8024c60:	f177 0300 	sbcs.w	r3, r7, #0
 8024c64:	d207      	bcs.n	8024c76 <_svfprintf_r+0xb6e>
 8024c66:	3630      	adds	r6, #48	@ 0x30
 8024c68:	b2f6      	uxtb	r6, r6
 8024c6a:	f88d 6147 	strb.w	r6, [sp, #327]	@ 0x147
 8024c6e:	f20d 1947 	addw	r9, sp, #327	@ 0x147
 8024c72:	f000 bc15 	b.w	80254a0 <_svfprintf_r+0x1398>
 8024c76:	2300      	movs	r3, #0
 8024c78:	9304      	str	r3, [sp, #16]
 8024c7a:	9b08      	ldr	r3, [sp, #32]
 8024c7c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8024c80:	ad52      	add	r5, sp, #328	@ 0x148
 8024c82:	9310      	str	r3, [sp, #64]	@ 0x40
 8024c84:	220a      	movs	r2, #10
 8024c86:	2300      	movs	r3, #0
 8024c88:	4630      	mov	r0, r6
 8024c8a:	4639      	mov	r1, r7
 8024c8c:	f7e1 fff4 	bl	8006c78 <__aeabi_uldivmod>
 8024c90:	9b04      	ldr	r3, [sp, #16]
 8024c92:	9011      	str	r0, [sp, #68]	@ 0x44
 8024c94:	3301      	adds	r3, #1
 8024c96:	9304      	str	r3, [sp, #16]
 8024c98:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8024c9a:	3230      	adds	r2, #48	@ 0x30
 8024c9c:	468a      	mov	sl, r1
 8024c9e:	f105 39ff 	add.w	r9, r5, #4294967295	@ 0xffffffff
 8024ca2:	f805 2c01 	strb.w	r2, [r5, #-1]
 8024ca6:	b1d3      	cbz	r3, 8024cde <_svfprintf_r+0xbd6>
 8024ca8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024caa:	9a04      	ldr	r2, [sp, #16]
 8024cac:	781b      	ldrb	r3, [r3, #0]
 8024cae:	429a      	cmp	r2, r3
 8024cb0:	d115      	bne.n	8024cde <_svfprintf_r+0xbd6>
 8024cb2:	2aff      	cmp	r2, #255	@ 0xff
 8024cb4:	d013      	beq.n	8024cde <_svfprintf_r+0xbd6>
 8024cb6:	2e0a      	cmp	r6, #10
 8024cb8:	f177 0300 	sbcs.w	r3, r7, #0
 8024cbc:	d30f      	bcc.n	8024cde <_svfprintf_r+0xbd6>
 8024cbe:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8024cc0:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8024cc2:	eba9 0903 	sub.w	r9, r9, r3
 8024cc6:	461a      	mov	r2, r3
 8024cc8:	4648      	mov	r0, r9
 8024cca:	f000 fe22 	bl	8025912 <strncpy>
 8024cce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024cd0:	785b      	ldrb	r3, [r3, #1]
 8024cd2:	b11b      	cbz	r3, 8024cdc <_svfprintf_r+0xbd4>
 8024cd4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024cd6:	3301      	adds	r3, #1
 8024cd8:	9309      	str	r3, [sp, #36]	@ 0x24
 8024cda:	2300      	movs	r3, #0
 8024cdc:	9304      	str	r3, [sp, #16]
 8024cde:	2e0a      	cmp	r6, #10
 8024ce0:	f177 0700 	sbcs.w	r7, r7, #0
 8024ce4:	f0c0 83dc 	bcc.w	80254a0 <_svfprintf_r+0x1398>
 8024ce8:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8024cea:	4657      	mov	r7, sl
 8024cec:	464d      	mov	r5, r9
 8024cee:	e7c9      	b.n	8024c84 <_svfprintf_r+0xb7c>
 8024cf0:	f006 030f 	and.w	r3, r6, #15
 8024cf4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8024cf6:	0936      	lsrs	r6, r6, #4
 8024cf8:	5cd3      	ldrb	r3, [r2, r3]
 8024cfa:	f809 3d01 	strb.w	r3, [r9, #-1]!
 8024cfe:	ea46 7607 	orr.w	r6, r6, r7, lsl #28
 8024d02:	093f      	lsrs	r7, r7, #4
 8024d04:	ea56 0307 	orrs.w	r3, r6, r7
 8024d08:	d1f2      	bne.n	8024cf0 <_svfprintf_r+0xbe8>
 8024d0a:	e3c9      	b.n	80254a0 <_svfprintf_r+0x1398>
 8024d0c:	b91b      	cbnz	r3, 8024d16 <_svfprintf_r+0xc0e>
 8024d0e:	07e9      	lsls	r1, r5, #31
 8024d10:	d501      	bpl.n	8024d16 <_svfprintf_r+0xc0e>
 8024d12:	2630      	movs	r6, #48	@ 0x30
 8024d14:	e7a9      	b.n	8024c6a <_svfprintf_r+0xb62>
 8024d16:	f50d 79a4 	add.w	r9, sp, #328	@ 0x148
 8024d1a:	e3c1      	b.n	80254a0 <_svfprintf_r+0x1398>
 8024d1c:	9b06      	ldr	r3, [sp, #24]
 8024d1e:	2b00      	cmp	r3, #0
 8024d20:	f000 838f 	beq.w	8025442 <_svfprintf_r+0x133a>
 8024d24:	f88d 30e4 	strb.w	r3, [sp, #228]	@ 0xe4
 8024d28:	2300      	movs	r3, #0
 8024d2a:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 8024d2e:	9607      	str	r6, [sp, #28]
 8024d30:	f7ff bb63 	b.w	80243fa <_svfprintf_r+0x2f2>
 8024d34:	2010      	movs	r0, #16
 8024d36:	4403      	add	r3, r0
 8024d38:	2a07      	cmp	r2, #7
 8024d3a:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8024d3e:	6060      	str	r0, [r4, #4]
 8024d40:	dd08      	ble.n	8024d54 <_svfprintf_r+0xc4c>
 8024d42:	9803      	ldr	r0, [sp, #12]
 8024d44:	aa26      	add	r2, sp, #152	@ 0x98
 8024d46:	4659      	mov	r1, fp
 8024d48:	f001 fce2 	bl	8026710 <__ssprint_r>
 8024d4c:	2800      	cmp	r0, #0
 8024d4e:	f040 8356 	bne.w	80253fe <_svfprintf_r+0x12f6>
 8024d52:	a929      	add	r1, sp, #164	@ 0xa4
 8024d54:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8024d56:	3b10      	subs	r3, #16
 8024d58:	9313      	str	r3, [sp, #76]	@ 0x4c
 8024d5a:	460c      	mov	r4, r1
 8024d5c:	e546      	b.n	80247ec <_svfprintf_r+0x6e4>
 8024d5e:	460c      	mov	r4, r1
 8024d60:	e561      	b.n	8024826 <_svfprintf_r+0x71e>
 8024d62:	9803      	ldr	r0, [sp, #12]
 8024d64:	aa26      	add	r2, sp, #152	@ 0x98
 8024d66:	4659      	mov	r1, fp
 8024d68:	f001 fcd2 	bl	8026710 <__ssprint_r>
 8024d6c:	2800      	cmp	r0, #0
 8024d6e:	f040 8346 	bne.w	80253fe <_svfprintf_r+0x12f6>
 8024d72:	ac29      	add	r4, sp, #164	@ 0xa4
 8024d74:	e569      	b.n	802484a <_svfprintf_r+0x742>
 8024d76:	9803      	ldr	r0, [sp, #12]
 8024d78:	aa26      	add	r2, sp, #152	@ 0x98
 8024d7a:	4659      	mov	r1, fp
 8024d7c:	f001 fcc8 	bl	8026710 <__ssprint_r>
 8024d80:	2800      	cmp	r0, #0
 8024d82:	f040 833c 	bne.w	80253fe <_svfprintf_r+0x12f6>
 8024d86:	ac29      	add	r4, sp, #164	@ 0xa4
 8024d88:	e56f      	b.n	802486a <_svfprintf_r+0x762>
 8024d8a:	2010      	movs	r0, #16
 8024d8c:	4403      	add	r3, r0
 8024d8e:	2a07      	cmp	r2, #7
 8024d90:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8024d94:	6060      	str	r0, [r4, #4]
 8024d96:	dd08      	ble.n	8024daa <_svfprintf_r+0xca2>
 8024d98:	9803      	ldr	r0, [sp, #12]
 8024d9a:	aa26      	add	r2, sp, #152	@ 0x98
 8024d9c:	4659      	mov	r1, fp
 8024d9e:	f001 fcb7 	bl	8026710 <__ssprint_r>
 8024da2:	2800      	cmp	r0, #0
 8024da4:	f040 832b 	bne.w	80253fe <_svfprintf_r+0x12f6>
 8024da8:	a929      	add	r1, sp, #164	@ 0xa4
 8024daa:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8024dac:	3b10      	subs	r3, #16
 8024dae:	9313      	str	r3, [sp, #76]	@ 0x4c
 8024db0:	460c      	mov	r4, r1
 8024db2:	e563      	b.n	802487c <_svfprintf_r+0x774>
 8024db4:	460c      	mov	r4, r1
 8024db6:	e57e      	b.n	80248b6 <_svfprintf_r+0x7ae>
 8024db8:	2010      	movs	r0, #16
 8024dba:	4403      	add	r3, r0
 8024dbc:	2a07      	cmp	r2, #7
 8024dbe:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8024dc2:	6060      	str	r0, [r4, #4]
 8024dc4:	dd08      	ble.n	8024dd8 <_svfprintf_r+0xcd0>
 8024dc6:	9803      	ldr	r0, [sp, #12]
 8024dc8:	aa26      	add	r2, sp, #152	@ 0x98
 8024dca:	4659      	mov	r1, fp
 8024dcc:	f001 fca0 	bl	8026710 <__ssprint_r>
 8024dd0:	2800      	cmp	r0, #0
 8024dd2:	f040 8314 	bne.w	80253fe <_svfprintf_r+0x12f6>
 8024dd6:	a929      	add	r1, sp, #164	@ 0xa4
 8024dd8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8024dda:	3b10      	subs	r3, #16
 8024ddc:	9310      	str	r3, [sp, #64]	@ 0x40
 8024dde:	460c      	mov	r4, r1
 8024de0:	e56f      	b.n	80248c2 <_svfprintf_r+0x7ba>
 8024de2:	460c      	mov	r4, r1
 8024de4:	e58a      	b.n	80248fc <_svfprintf_r+0x7f4>
 8024de6:	bf00      	nop
 8024de8:	080af9a0 	.word	0x080af9a0
 8024dec:	080af9b1 	.word	0x080af9b1
 8024df0:	9b06      	ldr	r3, [sp, #24]
 8024df2:	2b65      	cmp	r3, #101	@ 0x65
 8024df4:	f340 8246 	ble.w	8025284 <_svfprintf_r+0x117c>
 8024df8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8024dfc:	2200      	movs	r2, #0
 8024dfe:	2300      	movs	r3, #0
 8024e00:	f7e1 fe7a 	bl	8006af8 <__aeabi_dcmpeq>
 8024e04:	2800      	cmp	r0, #0
 8024e06:	d06a      	beq.n	8024ede <_svfprintf_r+0xdd6>
 8024e08:	4b73      	ldr	r3, [pc, #460]	@ (8024fd8 <_svfprintf_r+0xed0>)
 8024e0a:	6023      	str	r3, [r4, #0]
 8024e0c:	2301      	movs	r3, #1
 8024e0e:	6063      	str	r3, [r4, #4]
 8024e10:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8024e12:	3301      	adds	r3, #1
 8024e14:	9328      	str	r3, [sp, #160]	@ 0xa0
 8024e16:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8024e18:	3301      	adds	r3, #1
 8024e1a:	2b07      	cmp	r3, #7
 8024e1c:	9327      	str	r3, [sp, #156]	@ 0x9c
 8024e1e:	dc37      	bgt.n	8024e90 <_svfprintf_r+0xd88>
 8024e20:	3408      	adds	r4, #8
 8024e22:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8024e24:	9a04      	ldr	r2, [sp, #16]
 8024e26:	4293      	cmp	r3, r2
 8024e28:	db02      	blt.n	8024e30 <_svfprintf_r+0xd28>
 8024e2a:	07ef      	lsls	r7, r5, #31
 8024e2c:	f57f ad76 	bpl.w	802491c <_svfprintf_r+0x814>
 8024e30:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8024e32:	6023      	str	r3, [r4, #0]
 8024e34:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8024e36:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8024e38:	6063      	str	r3, [r4, #4]
 8024e3a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8024e3c:	4413      	add	r3, r2
 8024e3e:	9328      	str	r3, [sp, #160]	@ 0xa0
 8024e40:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8024e42:	3301      	adds	r3, #1
 8024e44:	2b07      	cmp	r3, #7
 8024e46:	9327      	str	r3, [sp, #156]	@ 0x9c
 8024e48:	dc2c      	bgt.n	8024ea4 <_svfprintf_r+0xd9c>
 8024e4a:	3408      	adds	r4, #8
 8024e4c:	9b04      	ldr	r3, [sp, #16]
 8024e4e:	1e5e      	subs	r6, r3, #1
 8024e50:	2e00      	cmp	r6, #0
 8024e52:	f77f ad63 	ble.w	802491c <_svfprintf_r+0x814>
 8024e56:	4f61      	ldr	r7, [pc, #388]	@ (8024fdc <_svfprintf_r+0xed4>)
 8024e58:	f04f 0810 	mov.w	r8, #16
 8024e5c:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 8024e60:	2e10      	cmp	r6, #16
 8024e62:	f103 0301 	add.w	r3, r3, #1
 8024e66:	f104 0108 	add.w	r1, r4, #8
 8024e6a:	6027      	str	r7, [r4, #0]
 8024e6c:	dc24      	bgt.n	8024eb8 <_svfprintf_r+0xdb0>
 8024e6e:	6066      	str	r6, [r4, #4]
 8024e70:	2b07      	cmp	r3, #7
 8024e72:	4416      	add	r6, r2
 8024e74:	e9cd 3627 	strd	r3, r6, [sp, #156]	@ 0x9c
 8024e78:	f340 82a0 	ble.w	80253bc <_svfprintf_r+0x12b4>
 8024e7c:	9803      	ldr	r0, [sp, #12]
 8024e7e:	aa26      	add	r2, sp, #152	@ 0x98
 8024e80:	4659      	mov	r1, fp
 8024e82:	f001 fc45 	bl	8026710 <__ssprint_r>
 8024e86:	2800      	cmp	r0, #0
 8024e88:	f040 82b9 	bne.w	80253fe <_svfprintf_r+0x12f6>
 8024e8c:	ac29      	add	r4, sp, #164	@ 0xa4
 8024e8e:	e545      	b.n	802491c <_svfprintf_r+0x814>
 8024e90:	9803      	ldr	r0, [sp, #12]
 8024e92:	aa26      	add	r2, sp, #152	@ 0x98
 8024e94:	4659      	mov	r1, fp
 8024e96:	f001 fc3b 	bl	8026710 <__ssprint_r>
 8024e9a:	2800      	cmp	r0, #0
 8024e9c:	f040 82af 	bne.w	80253fe <_svfprintf_r+0x12f6>
 8024ea0:	ac29      	add	r4, sp, #164	@ 0xa4
 8024ea2:	e7be      	b.n	8024e22 <_svfprintf_r+0xd1a>
 8024ea4:	9803      	ldr	r0, [sp, #12]
 8024ea6:	aa26      	add	r2, sp, #152	@ 0x98
 8024ea8:	4659      	mov	r1, fp
 8024eaa:	f001 fc31 	bl	8026710 <__ssprint_r>
 8024eae:	2800      	cmp	r0, #0
 8024eb0:	f040 82a5 	bne.w	80253fe <_svfprintf_r+0x12f6>
 8024eb4:	ac29      	add	r4, sp, #164	@ 0xa4
 8024eb6:	e7c9      	b.n	8024e4c <_svfprintf_r+0xd44>
 8024eb8:	3210      	adds	r2, #16
 8024eba:	2b07      	cmp	r3, #7
 8024ebc:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 8024ec0:	f8c4 8004 	str.w	r8, [r4, #4]
 8024ec4:	dd08      	ble.n	8024ed8 <_svfprintf_r+0xdd0>
 8024ec6:	9803      	ldr	r0, [sp, #12]
 8024ec8:	aa26      	add	r2, sp, #152	@ 0x98
 8024eca:	4659      	mov	r1, fp
 8024ecc:	f001 fc20 	bl	8026710 <__ssprint_r>
 8024ed0:	2800      	cmp	r0, #0
 8024ed2:	f040 8294 	bne.w	80253fe <_svfprintf_r+0x12f6>
 8024ed6:	a929      	add	r1, sp, #164	@ 0xa4
 8024ed8:	3e10      	subs	r6, #16
 8024eda:	460c      	mov	r4, r1
 8024edc:	e7be      	b.n	8024e5c <_svfprintf_r+0xd54>
 8024ede:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8024ee0:	2b00      	cmp	r3, #0
 8024ee2:	dc7d      	bgt.n	8024fe0 <_svfprintf_r+0xed8>
 8024ee4:	4b3c      	ldr	r3, [pc, #240]	@ (8024fd8 <_svfprintf_r+0xed0>)
 8024ee6:	6023      	str	r3, [r4, #0]
 8024ee8:	2301      	movs	r3, #1
 8024eea:	6063      	str	r3, [r4, #4]
 8024eec:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8024eee:	3301      	adds	r3, #1
 8024ef0:	9328      	str	r3, [sp, #160]	@ 0xa0
 8024ef2:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8024ef4:	3301      	adds	r3, #1
 8024ef6:	2b07      	cmp	r3, #7
 8024ef8:	9327      	str	r3, [sp, #156]	@ 0x9c
 8024efa:	dc46      	bgt.n	8024f8a <_svfprintf_r+0xe82>
 8024efc:	3408      	adds	r4, #8
 8024efe:	9904      	ldr	r1, [sp, #16]
 8024f00:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8024f02:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 8024f04:	430b      	orrs	r3, r1
 8024f06:	f005 0101 	and.w	r1, r5, #1
 8024f0a:	430b      	orrs	r3, r1
 8024f0c:	f43f ad06 	beq.w	802491c <_svfprintf_r+0x814>
 8024f10:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8024f12:	6023      	str	r3, [r4, #0]
 8024f14:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8024f16:	6063      	str	r3, [r4, #4]
 8024f18:	441a      	add	r2, r3
 8024f1a:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8024f1c:	9228      	str	r2, [sp, #160]	@ 0xa0
 8024f1e:	3301      	adds	r3, #1
 8024f20:	2b07      	cmp	r3, #7
 8024f22:	9327      	str	r3, [sp, #156]	@ 0x9c
 8024f24:	dc3b      	bgt.n	8024f9e <_svfprintf_r+0xe96>
 8024f26:	f104 0308 	add.w	r3, r4, #8
 8024f2a:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8024f2c:	2e00      	cmp	r6, #0
 8024f2e:	da1b      	bge.n	8024f68 <_svfprintf_r+0xe60>
 8024f30:	4f2a      	ldr	r7, [pc, #168]	@ (8024fdc <_svfprintf_r+0xed4>)
 8024f32:	4276      	negs	r6, r6
 8024f34:	461a      	mov	r2, r3
 8024f36:	2410      	movs	r4, #16
 8024f38:	e9dd 1027 	ldrd	r1, r0, [sp, #156]	@ 0x9c
 8024f3c:	2e10      	cmp	r6, #16
 8024f3e:	f101 0101 	add.w	r1, r1, #1
 8024f42:	f103 0308 	add.w	r3, r3, #8
 8024f46:	6017      	str	r7, [r2, #0]
 8024f48:	dc33      	bgt.n	8024fb2 <_svfprintf_r+0xeaa>
 8024f4a:	6056      	str	r6, [r2, #4]
 8024f4c:	2907      	cmp	r1, #7
 8024f4e:	4406      	add	r6, r0
 8024f50:	e9cd 1627 	strd	r1, r6, [sp, #156]	@ 0x9c
 8024f54:	dd08      	ble.n	8024f68 <_svfprintf_r+0xe60>
 8024f56:	9803      	ldr	r0, [sp, #12]
 8024f58:	aa26      	add	r2, sp, #152	@ 0x98
 8024f5a:	4659      	mov	r1, fp
 8024f5c:	f001 fbd8 	bl	8026710 <__ssprint_r>
 8024f60:	2800      	cmp	r0, #0
 8024f62:	f040 824c 	bne.w	80253fe <_svfprintf_r+0x12f6>
 8024f66:	ab29      	add	r3, sp, #164	@ 0xa4
 8024f68:	9a04      	ldr	r2, [sp, #16]
 8024f6a:	9904      	ldr	r1, [sp, #16]
 8024f6c:	605a      	str	r2, [r3, #4]
 8024f6e:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 8024f70:	f8c3 9000 	str.w	r9, [r3]
 8024f74:	440a      	add	r2, r1
 8024f76:	9228      	str	r2, [sp, #160]	@ 0xa0
 8024f78:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 8024f7a:	3201      	adds	r2, #1
 8024f7c:	2a07      	cmp	r2, #7
 8024f7e:	9227      	str	r2, [sp, #156]	@ 0x9c
 8024f80:	f73f af7c 	bgt.w	8024e7c <_svfprintf_r+0xd74>
 8024f84:	f103 0408 	add.w	r4, r3, #8
 8024f88:	e4c8      	b.n	802491c <_svfprintf_r+0x814>
 8024f8a:	9803      	ldr	r0, [sp, #12]
 8024f8c:	aa26      	add	r2, sp, #152	@ 0x98
 8024f8e:	4659      	mov	r1, fp
 8024f90:	f001 fbbe 	bl	8026710 <__ssprint_r>
 8024f94:	2800      	cmp	r0, #0
 8024f96:	f040 8232 	bne.w	80253fe <_svfprintf_r+0x12f6>
 8024f9a:	ac29      	add	r4, sp, #164	@ 0xa4
 8024f9c:	e7af      	b.n	8024efe <_svfprintf_r+0xdf6>
 8024f9e:	9803      	ldr	r0, [sp, #12]
 8024fa0:	aa26      	add	r2, sp, #152	@ 0x98
 8024fa2:	4659      	mov	r1, fp
 8024fa4:	f001 fbb4 	bl	8026710 <__ssprint_r>
 8024fa8:	2800      	cmp	r0, #0
 8024faa:	f040 8228 	bne.w	80253fe <_svfprintf_r+0x12f6>
 8024fae:	ab29      	add	r3, sp, #164	@ 0xa4
 8024fb0:	e7bb      	b.n	8024f2a <_svfprintf_r+0xe22>
 8024fb2:	3010      	adds	r0, #16
 8024fb4:	2907      	cmp	r1, #7
 8024fb6:	e9cd 1027 	strd	r1, r0, [sp, #156]	@ 0x9c
 8024fba:	6054      	str	r4, [r2, #4]
 8024fbc:	dd08      	ble.n	8024fd0 <_svfprintf_r+0xec8>
 8024fbe:	9803      	ldr	r0, [sp, #12]
 8024fc0:	aa26      	add	r2, sp, #152	@ 0x98
 8024fc2:	4659      	mov	r1, fp
 8024fc4:	f001 fba4 	bl	8026710 <__ssprint_r>
 8024fc8:	2800      	cmp	r0, #0
 8024fca:	f040 8218 	bne.w	80253fe <_svfprintf_r+0x12f6>
 8024fce:	ab29      	add	r3, sp, #164	@ 0xa4
 8024fd0:	3e10      	subs	r6, #16
 8024fd2:	461a      	mov	r2, r3
 8024fd4:	e7b0      	b.n	8024f38 <_svfprintf_r+0xe30>
 8024fd6:	bf00      	nop
 8024fd8:	080af9c2 	.word	0x080af9c2
 8024fdc:	080af9c4 	.word	0x080af9c4
 8024fe0:	9b04      	ldr	r3, [sp, #16]
 8024fe2:	444b      	add	r3, r9
 8024fe4:	9306      	str	r3, [sp, #24]
 8024fe6:	9b04      	ldr	r3, [sp, #16]
 8024fe8:	42b3      	cmp	r3, r6
 8024fea:	bfa8      	it	ge
 8024fec:	4633      	movge	r3, r6
 8024fee:	2b00      	cmp	r3, #0
 8024ff0:	4698      	mov	r8, r3
 8024ff2:	dd0b      	ble.n	802500c <_svfprintf_r+0xf04>
 8024ff4:	e9c4 9300 	strd	r9, r3, [r4]
 8024ff8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8024ffa:	4443      	add	r3, r8
 8024ffc:	9328      	str	r3, [sp, #160]	@ 0xa0
 8024ffe:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8025000:	3301      	adds	r3, #1
 8025002:	2b07      	cmp	r3, #7
 8025004:	9327      	str	r3, [sp, #156]	@ 0x9c
 8025006:	f300 8089 	bgt.w	802511c <_svfprintf_r+0x1014>
 802500a:	3408      	adds	r4, #8
 802500c:	4643      	mov	r3, r8
 802500e:	2b00      	cmp	r3, #0
 8025010:	bfac      	ite	ge
 8025012:	eba6 0808 	subge.w	r8, r6, r8
 8025016:	46b0      	movlt	r8, r6
 8025018:	f1b8 0f00 	cmp.w	r8, #0
 802501c:	dd1b      	ble.n	8025056 <_svfprintf_r+0xf4e>
 802501e:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 8025022:	4897      	ldr	r0, [pc, #604]	@ (8025280 <_svfprintf_r+0x1178>)
 8025024:	6020      	str	r0, [r4, #0]
 8025026:	f1b8 0f10 	cmp.w	r8, #16
 802502a:	f102 0201 	add.w	r2, r2, #1
 802502e:	f104 0108 	add.w	r1, r4, #8
 8025032:	dc7d      	bgt.n	8025130 <_svfprintf_r+0x1028>
 8025034:	4443      	add	r3, r8
 8025036:	2a07      	cmp	r2, #7
 8025038:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 802503c:	f8c4 8004 	str.w	r8, [r4, #4]
 8025040:	f340 808a 	ble.w	8025158 <_svfprintf_r+0x1050>
 8025044:	9803      	ldr	r0, [sp, #12]
 8025046:	aa26      	add	r2, sp, #152	@ 0x98
 8025048:	4659      	mov	r1, fp
 802504a:	f001 fb61 	bl	8026710 <__ssprint_r>
 802504e:	2800      	cmp	r0, #0
 8025050:	f040 81d5 	bne.w	80253fe <_svfprintf_r+0x12f6>
 8025054:	ac29      	add	r4, sp, #164	@ 0xa4
 8025056:	eb09 0806 	add.w	r8, r9, r6
 802505a:	056e      	lsls	r6, r5, #21
 802505c:	d508      	bpl.n	8025070 <_svfprintf_r+0xf68>
 802505e:	9b08      	ldr	r3, [sp, #32]
 8025060:	2b00      	cmp	r3, #0
 8025062:	d17b      	bne.n	802515c <_svfprintf_r+0x1054>
 8025064:	2f00      	cmp	r7, #0
 8025066:	d17b      	bne.n	8025160 <_svfprintf_r+0x1058>
 8025068:	9b06      	ldr	r3, [sp, #24]
 802506a:	4598      	cmp	r8, r3
 802506c:	bf28      	it	cs
 802506e:	4698      	movcs	r8, r3
 8025070:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8025072:	9a04      	ldr	r2, [sp, #16]
 8025074:	4293      	cmp	r3, r2
 8025076:	db01      	blt.n	802507c <_svfprintf_r+0xf74>
 8025078:	07e8      	lsls	r0, r5, #31
 802507a:	d50e      	bpl.n	802509a <_svfprintf_r+0xf92>
 802507c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 802507e:	6023      	str	r3, [r4, #0]
 8025080:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8025082:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8025084:	6063      	str	r3, [r4, #4]
 8025086:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8025088:	4413      	add	r3, r2
 802508a:	9328      	str	r3, [sp, #160]	@ 0xa0
 802508c:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802508e:	3301      	adds	r3, #1
 8025090:	2b07      	cmp	r3, #7
 8025092:	9327      	str	r3, [sp, #156]	@ 0x9c
 8025094:	f300 80df 	bgt.w	8025256 <_svfprintf_r+0x114e>
 8025098:	3408      	adds	r4, #8
 802509a:	9b04      	ldr	r3, [sp, #16]
 802509c:	9f20      	ldr	r7, [sp, #128]	@ 0x80
 802509e:	1bdf      	subs	r7, r3, r7
 80250a0:	9b06      	ldr	r3, [sp, #24]
 80250a2:	eba3 0308 	sub.w	r3, r3, r8
 80250a6:	429f      	cmp	r7, r3
 80250a8:	bfa8      	it	ge
 80250aa:	461f      	movge	r7, r3
 80250ac:	2f00      	cmp	r7, #0
 80250ae:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80250b0:	dd0a      	ble.n	80250c8 <_svfprintf_r+0xfc0>
 80250b2:	443b      	add	r3, r7
 80250b4:	9328      	str	r3, [sp, #160]	@ 0xa0
 80250b6:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80250b8:	3301      	adds	r3, #1
 80250ba:	2b07      	cmp	r3, #7
 80250bc:	e9c4 8700 	strd	r8, r7, [r4]
 80250c0:	9327      	str	r3, [sp, #156]	@ 0x9c
 80250c2:	f300 80d2 	bgt.w	802526a <_svfprintf_r+0x1162>
 80250c6:	3408      	adds	r4, #8
 80250c8:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 80250ca:	9b04      	ldr	r3, [sp, #16]
 80250cc:	2f00      	cmp	r7, #0
 80250ce:	eba3 0606 	sub.w	r6, r3, r6
 80250d2:	bfa8      	it	ge
 80250d4:	1bf6      	subge	r6, r6, r7
 80250d6:	2e00      	cmp	r6, #0
 80250d8:	f77f ac20 	ble.w	802491c <_svfprintf_r+0x814>
 80250dc:	4f68      	ldr	r7, [pc, #416]	@ (8025280 <_svfprintf_r+0x1178>)
 80250de:	f04f 0810 	mov.w	r8, #16
 80250e2:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 80250e6:	2e10      	cmp	r6, #16
 80250e8:	f103 0301 	add.w	r3, r3, #1
 80250ec:	f104 0108 	add.w	r1, r4, #8
 80250f0:	6027      	str	r7, [r4, #0]
 80250f2:	f77f aebc 	ble.w	8024e6e <_svfprintf_r+0xd66>
 80250f6:	3210      	adds	r2, #16
 80250f8:	2b07      	cmp	r3, #7
 80250fa:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 80250fe:	f8c4 8004 	str.w	r8, [r4, #4]
 8025102:	dd08      	ble.n	8025116 <_svfprintf_r+0x100e>
 8025104:	9803      	ldr	r0, [sp, #12]
 8025106:	aa26      	add	r2, sp, #152	@ 0x98
 8025108:	4659      	mov	r1, fp
 802510a:	f001 fb01 	bl	8026710 <__ssprint_r>
 802510e:	2800      	cmp	r0, #0
 8025110:	f040 8175 	bne.w	80253fe <_svfprintf_r+0x12f6>
 8025114:	a929      	add	r1, sp, #164	@ 0xa4
 8025116:	3e10      	subs	r6, #16
 8025118:	460c      	mov	r4, r1
 802511a:	e7e2      	b.n	80250e2 <_svfprintf_r+0xfda>
 802511c:	9803      	ldr	r0, [sp, #12]
 802511e:	aa26      	add	r2, sp, #152	@ 0x98
 8025120:	4659      	mov	r1, fp
 8025122:	f001 faf5 	bl	8026710 <__ssprint_r>
 8025126:	2800      	cmp	r0, #0
 8025128:	f040 8169 	bne.w	80253fe <_svfprintf_r+0x12f6>
 802512c:	ac29      	add	r4, sp, #164	@ 0xa4
 802512e:	e76d      	b.n	802500c <_svfprintf_r+0xf04>
 8025130:	2010      	movs	r0, #16
 8025132:	4403      	add	r3, r0
 8025134:	2a07      	cmp	r2, #7
 8025136:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 802513a:	6060      	str	r0, [r4, #4]
 802513c:	dd08      	ble.n	8025150 <_svfprintf_r+0x1048>
 802513e:	9803      	ldr	r0, [sp, #12]
 8025140:	aa26      	add	r2, sp, #152	@ 0x98
 8025142:	4659      	mov	r1, fp
 8025144:	f001 fae4 	bl	8026710 <__ssprint_r>
 8025148:	2800      	cmp	r0, #0
 802514a:	f040 8158 	bne.w	80253fe <_svfprintf_r+0x12f6>
 802514e:	a929      	add	r1, sp, #164	@ 0xa4
 8025150:	f1a8 0810 	sub.w	r8, r8, #16
 8025154:	460c      	mov	r4, r1
 8025156:	e762      	b.n	802501e <_svfprintf_r+0xf16>
 8025158:	460c      	mov	r4, r1
 802515a:	e77c      	b.n	8025056 <_svfprintf_r+0xf4e>
 802515c:	2f00      	cmp	r7, #0
 802515e:	d04a      	beq.n	80251f6 <_svfprintf_r+0x10ee>
 8025160:	3f01      	subs	r7, #1
 8025162:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8025164:	6023      	str	r3, [r4, #0]
 8025166:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8025168:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 802516a:	6063      	str	r3, [r4, #4]
 802516c:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802516e:	4413      	add	r3, r2
 8025170:	9328      	str	r3, [sp, #160]	@ 0xa0
 8025172:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8025174:	3301      	adds	r3, #1
 8025176:	2b07      	cmp	r3, #7
 8025178:	9327      	str	r3, [sp, #156]	@ 0x9c
 802517a:	dc43      	bgt.n	8025204 <_svfprintf_r+0x10fc>
 802517c:	3408      	adds	r4, #8
 802517e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025180:	781a      	ldrb	r2, [r3, #0]
 8025182:	9b06      	ldr	r3, [sp, #24]
 8025184:	eba3 0308 	sub.w	r3, r3, r8
 8025188:	429a      	cmp	r2, r3
 802518a:	bfa8      	it	ge
 802518c:	461a      	movge	r2, r3
 802518e:	2a00      	cmp	r2, #0
 8025190:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8025192:	4691      	mov	r9, r2
 8025194:	dd09      	ble.n	80251aa <_svfprintf_r+0x10a2>
 8025196:	4413      	add	r3, r2
 8025198:	9328      	str	r3, [sp, #160]	@ 0xa0
 802519a:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802519c:	3301      	adds	r3, #1
 802519e:	2b07      	cmp	r3, #7
 80251a0:	e9c4 8200 	strd	r8, r2, [r4]
 80251a4:	9327      	str	r3, [sp, #156]	@ 0x9c
 80251a6:	dc37      	bgt.n	8025218 <_svfprintf_r+0x1110>
 80251a8:	3408      	adds	r4, #8
 80251aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80251ac:	781e      	ldrb	r6, [r3, #0]
 80251ae:	f1b9 0f00 	cmp.w	r9, #0
 80251b2:	bfa8      	it	ge
 80251b4:	eba6 0609 	subge.w	r6, r6, r9
 80251b8:	2e00      	cmp	r6, #0
 80251ba:	dd18      	ble.n	80251ee <_svfprintf_r+0x10e6>
 80251bc:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 80251c0:	482f      	ldr	r0, [pc, #188]	@ (8025280 <_svfprintf_r+0x1178>)
 80251c2:	6020      	str	r0, [r4, #0]
 80251c4:	2e10      	cmp	r6, #16
 80251c6:	f103 0301 	add.w	r3, r3, #1
 80251ca:	f104 0108 	add.w	r1, r4, #8
 80251ce:	dc2d      	bgt.n	802522c <_svfprintf_r+0x1124>
 80251d0:	6066      	str	r6, [r4, #4]
 80251d2:	2b07      	cmp	r3, #7
 80251d4:	4416      	add	r6, r2
 80251d6:	e9cd 3627 	strd	r3, r6, [sp, #156]	@ 0x9c
 80251da:	dd3a      	ble.n	8025252 <_svfprintf_r+0x114a>
 80251dc:	9803      	ldr	r0, [sp, #12]
 80251de:	aa26      	add	r2, sp, #152	@ 0x98
 80251e0:	4659      	mov	r1, fp
 80251e2:	f001 fa95 	bl	8026710 <__ssprint_r>
 80251e6:	2800      	cmp	r0, #0
 80251e8:	f040 8109 	bne.w	80253fe <_svfprintf_r+0x12f6>
 80251ec:	ac29      	add	r4, sp, #164	@ 0xa4
 80251ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80251f0:	781b      	ldrb	r3, [r3, #0]
 80251f2:	4498      	add	r8, r3
 80251f4:	e733      	b.n	802505e <_svfprintf_r+0xf56>
 80251f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80251f8:	3b01      	subs	r3, #1
 80251fa:	9309      	str	r3, [sp, #36]	@ 0x24
 80251fc:	9b08      	ldr	r3, [sp, #32]
 80251fe:	3b01      	subs	r3, #1
 8025200:	9308      	str	r3, [sp, #32]
 8025202:	e7ae      	b.n	8025162 <_svfprintf_r+0x105a>
 8025204:	9803      	ldr	r0, [sp, #12]
 8025206:	aa26      	add	r2, sp, #152	@ 0x98
 8025208:	4659      	mov	r1, fp
 802520a:	f001 fa81 	bl	8026710 <__ssprint_r>
 802520e:	2800      	cmp	r0, #0
 8025210:	f040 80f5 	bne.w	80253fe <_svfprintf_r+0x12f6>
 8025214:	ac29      	add	r4, sp, #164	@ 0xa4
 8025216:	e7b2      	b.n	802517e <_svfprintf_r+0x1076>
 8025218:	9803      	ldr	r0, [sp, #12]
 802521a:	aa26      	add	r2, sp, #152	@ 0x98
 802521c:	4659      	mov	r1, fp
 802521e:	f001 fa77 	bl	8026710 <__ssprint_r>
 8025222:	2800      	cmp	r0, #0
 8025224:	f040 80eb 	bne.w	80253fe <_svfprintf_r+0x12f6>
 8025228:	ac29      	add	r4, sp, #164	@ 0xa4
 802522a:	e7be      	b.n	80251aa <_svfprintf_r+0x10a2>
 802522c:	2010      	movs	r0, #16
 802522e:	4402      	add	r2, r0
 8025230:	2b07      	cmp	r3, #7
 8025232:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 8025236:	6060      	str	r0, [r4, #4]
 8025238:	dd08      	ble.n	802524c <_svfprintf_r+0x1144>
 802523a:	9803      	ldr	r0, [sp, #12]
 802523c:	aa26      	add	r2, sp, #152	@ 0x98
 802523e:	4659      	mov	r1, fp
 8025240:	f001 fa66 	bl	8026710 <__ssprint_r>
 8025244:	2800      	cmp	r0, #0
 8025246:	f040 80da 	bne.w	80253fe <_svfprintf_r+0x12f6>
 802524a:	a929      	add	r1, sp, #164	@ 0xa4
 802524c:	3e10      	subs	r6, #16
 802524e:	460c      	mov	r4, r1
 8025250:	e7b4      	b.n	80251bc <_svfprintf_r+0x10b4>
 8025252:	460c      	mov	r4, r1
 8025254:	e7cb      	b.n	80251ee <_svfprintf_r+0x10e6>
 8025256:	9803      	ldr	r0, [sp, #12]
 8025258:	aa26      	add	r2, sp, #152	@ 0x98
 802525a:	4659      	mov	r1, fp
 802525c:	f001 fa58 	bl	8026710 <__ssprint_r>
 8025260:	2800      	cmp	r0, #0
 8025262:	f040 80cc 	bne.w	80253fe <_svfprintf_r+0x12f6>
 8025266:	ac29      	add	r4, sp, #164	@ 0xa4
 8025268:	e717      	b.n	802509a <_svfprintf_r+0xf92>
 802526a:	9803      	ldr	r0, [sp, #12]
 802526c:	aa26      	add	r2, sp, #152	@ 0x98
 802526e:	4659      	mov	r1, fp
 8025270:	f001 fa4e 	bl	8026710 <__ssprint_r>
 8025274:	2800      	cmp	r0, #0
 8025276:	f040 80c2 	bne.w	80253fe <_svfprintf_r+0x12f6>
 802527a:	ac29      	add	r4, sp, #164	@ 0xa4
 802527c:	e724      	b.n	80250c8 <_svfprintf_r+0xfc0>
 802527e:	bf00      	nop
 8025280:	080af9c4 	.word	0x080af9c4
 8025284:	9904      	ldr	r1, [sp, #16]
 8025286:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8025288:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 802528a:	2901      	cmp	r1, #1
 802528c:	f103 0301 	add.w	r3, r3, #1
 8025290:	f102 0201 	add.w	r2, r2, #1
 8025294:	f104 0608 	add.w	r6, r4, #8
 8025298:	dc02      	bgt.n	80252a0 <_svfprintf_r+0x1198>
 802529a:	07e9      	lsls	r1, r5, #31
 802529c:	f140 8083 	bpl.w	80253a6 <_svfprintf_r+0x129e>
 80252a0:	2101      	movs	r1, #1
 80252a2:	2a07      	cmp	r2, #7
 80252a4:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 80252a8:	f8c4 9000 	str.w	r9, [r4]
 80252ac:	6061      	str	r1, [r4, #4]
 80252ae:	dd08      	ble.n	80252c2 <_svfprintf_r+0x11ba>
 80252b0:	9803      	ldr	r0, [sp, #12]
 80252b2:	aa26      	add	r2, sp, #152	@ 0x98
 80252b4:	4659      	mov	r1, fp
 80252b6:	f001 fa2b 	bl	8026710 <__ssprint_r>
 80252ba:	2800      	cmp	r0, #0
 80252bc:	f040 809f 	bne.w	80253fe <_svfprintf_r+0x12f6>
 80252c0:	ae29      	add	r6, sp, #164	@ 0xa4
 80252c2:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80252c4:	6033      	str	r3, [r6, #0]
 80252c6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80252c8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80252ca:	6073      	str	r3, [r6, #4]
 80252cc:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80252ce:	4413      	add	r3, r2
 80252d0:	9328      	str	r3, [sp, #160]	@ 0xa0
 80252d2:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80252d4:	3301      	adds	r3, #1
 80252d6:	2b07      	cmp	r3, #7
 80252d8:	9327      	str	r3, [sp, #156]	@ 0x9c
 80252da:	dc33      	bgt.n	8025344 <_svfprintf_r+0x123c>
 80252dc:	3608      	adds	r6, #8
 80252de:	9b04      	ldr	r3, [sp, #16]
 80252e0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80252e4:	1e5c      	subs	r4, r3, #1
 80252e6:	2200      	movs	r2, #0
 80252e8:	2300      	movs	r3, #0
 80252ea:	e9dd 8727 	ldrd	r8, r7, [sp, #156]	@ 0x9c
 80252ee:	f7e1 fc03 	bl	8006af8 <__aeabi_dcmpeq>
 80252f2:	2800      	cmp	r0, #0
 80252f4:	d12f      	bne.n	8025356 <_svfprintf_r+0x124e>
 80252f6:	f109 0201 	add.w	r2, r9, #1
 80252fa:	e9c6 2400 	strd	r2, r4, [r6]
 80252fe:	9a04      	ldr	r2, [sp, #16]
 8025300:	f108 0301 	add.w	r3, r8, #1
 8025304:	3f01      	subs	r7, #1
 8025306:	4417      	add	r7, r2
 8025308:	2b07      	cmp	r3, #7
 802530a:	e9cd 3727 	strd	r3, r7, [sp, #156]	@ 0x9c
 802530e:	dd53      	ble.n	80253b8 <_svfprintf_r+0x12b0>
 8025310:	9803      	ldr	r0, [sp, #12]
 8025312:	aa26      	add	r2, sp, #152	@ 0x98
 8025314:	4659      	mov	r1, fp
 8025316:	f001 f9fb 	bl	8026710 <__ssprint_r>
 802531a:	2800      	cmp	r0, #0
 802531c:	d16f      	bne.n	80253fe <_svfprintf_r+0x12f6>
 802531e:	ae29      	add	r6, sp, #164	@ 0xa4
 8025320:	ab22      	add	r3, sp, #136	@ 0x88
 8025322:	6033      	str	r3, [r6, #0]
 8025324:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8025326:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8025328:	6073      	str	r3, [r6, #4]
 802532a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802532c:	4413      	add	r3, r2
 802532e:	9328      	str	r3, [sp, #160]	@ 0xa0
 8025330:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8025332:	3301      	adds	r3, #1
 8025334:	2b07      	cmp	r3, #7
 8025336:	9327      	str	r3, [sp, #156]	@ 0x9c
 8025338:	f73f ada0 	bgt.w	8024e7c <_svfprintf_r+0xd74>
 802533c:	f106 0408 	add.w	r4, r6, #8
 8025340:	f7ff baec 	b.w	802491c <_svfprintf_r+0x814>
 8025344:	9803      	ldr	r0, [sp, #12]
 8025346:	aa26      	add	r2, sp, #152	@ 0x98
 8025348:	4659      	mov	r1, fp
 802534a:	f001 f9e1 	bl	8026710 <__ssprint_r>
 802534e:	2800      	cmp	r0, #0
 8025350:	d155      	bne.n	80253fe <_svfprintf_r+0x12f6>
 8025352:	ae29      	add	r6, sp, #164	@ 0xa4
 8025354:	e7c3      	b.n	80252de <_svfprintf_r+0x11d6>
 8025356:	9b04      	ldr	r3, [sp, #16]
 8025358:	2b01      	cmp	r3, #1
 802535a:	dde1      	ble.n	8025320 <_svfprintf_r+0x1218>
 802535c:	4f57      	ldr	r7, [pc, #348]	@ (80254bc <_svfprintf_r+0x13b4>)
 802535e:	f04f 0810 	mov.w	r8, #16
 8025362:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 8025366:	2c10      	cmp	r4, #16
 8025368:	f103 0301 	add.w	r3, r3, #1
 802536c:	f106 0108 	add.w	r1, r6, #8
 8025370:	6037      	str	r7, [r6, #0]
 8025372:	dc07      	bgt.n	8025384 <_svfprintf_r+0x127c>
 8025374:	6074      	str	r4, [r6, #4]
 8025376:	2b07      	cmp	r3, #7
 8025378:	4414      	add	r4, r2
 802537a:	e9cd 3427 	strd	r3, r4, [sp, #156]	@ 0x9c
 802537e:	dcc7      	bgt.n	8025310 <_svfprintf_r+0x1208>
 8025380:	460e      	mov	r6, r1
 8025382:	e7cd      	b.n	8025320 <_svfprintf_r+0x1218>
 8025384:	3210      	adds	r2, #16
 8025386:	2b07      	cmp	r3, #7
 8025388:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 802538c:	f8c6 8004 	str.w	r8, [r6, #4]
 8025390:	dd06      	ble.n	80253a0 <_svfprintf_r+0x1298>
 8025392:	9803      	ldr	r0, [sp, #12]
 8025394:	aa26      	add	r2, sp, #152	@ 0x98
 8025396:	4659      	mov	r1, fp
 8025398:	f001 f9ba 	bl	8026710 <__ssprint_r>
 802539c:	bb78      	cbnz	r0, 80253fe <_svfprintf_r+0x12f6>
 802539e:	a929      	add	r1, sp, #164	@ 0xa4
 80253a0:	3c10      	subs	r4, #16
 80253a2:	460e      	mov	r6, r1
 80253a4:	e7dd      	b.n	8025362 <_svfprintf_r+0x125a>
 80253a6:	2101      	movs	r1, #1
 80253a8:	2a07      	cmp	r2, #7
 80253aa:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 80253ae:	f8c4 9000 	str.w	r9, [r4]
 80253b2:	6061      	str	r1, [r4, #4]
 80253b4:	ddb4      	ble.n	8025320 <_svfprintf_r+0x1218>
 80253b6:	e7ab      	b.n	8025310 <_svfprintf_r+0x1208>
 80253b8:	3608      	adds	r6, #8
 80253ba:	e7b1      	b.n	8025320 <_svfprintf_r+0x1218>
 80253bc:	460c      	mov	r4, r1
 80253be:	f7ff baad 	b.w	802491c <_svfprintf_r+0x814>
 80253c2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80253c4:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80253c6:	1a9d      	subs	r5, r3, r2
 80253c8:	2d00      	cmp	r5, #0
 80253ca:	f77f aaaa 	ble.w	8024922 <_svfprintf_r+0x81a>
 80253ce:	4e3c      	ldr	r6, [pc, #240]	@ (80254c0 <_svfprintf_r+0x13b8>)
 80253d0:	2710      	movs	r7, #16
 80253d2:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 80253d6:	2d10      	cmp	r5, #16
 80253d8:	f103 0301 	add.w	r3, r3, #1
 80253dc:	6026      	str	r6, [r4, #0]
 80253de:	dc18      	bgt.n	8025412 <_svfprintf_r+0x130a>
 80253e0:	442a      	add	r2, r5
 80253e2:	2b07      	cmp	r3, #7
 80253e4:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 80253e8:	6065      	str	r5, [r4, #4]
 80253ea:	f77f aa9a 	ble.w	8024922 <_svfprintf_r+0x81a>
 80253ee:	9803      	ldr	r0, [sp, #12]
 80253f0:	aa26      	add	r2, sp, #152	@ 0x98
 80253f2:	4659      	mov	r1, fp
 80253f4:	f001 f98c 	bl	8026710 <__ssprint_r>
 80253f8:	2800      	cmp	r0, #0
 80253fa:	f43f aa92 	beq.w	8024922 <_svfprintf_r+0x81a>
 80253fe:	f1ba 0f00 	cmp.w	sl, #0
 8025402:	f43f a89a 	beq.w	802453a <_svfprintf_r+0x432>
 8025406:	9803      	ldr	r0, [sp, #12]
 8025408:	4651      	mov	r1, sl
 802540a:	f7fe fdbb 	bl	8023f84 <_free_r>
 802540e:	f7ff b894 	b.w	802453a <_svfprintf_r+0x432>
 8025412:	3210      	adds	r2, #16
 8025414:	2b07      	cmp	r3, #7
 8025416:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 802541a:	6067      	str	r7, [r4, #4]
 802541c:	dc02      	bgt.n	8025424 <_svfprintf_r+0x131c>
 802541e:	3408      	adds	r4, #8
 8025420:	3d10      	subs	r5, #16
 8025422:	e7d6      	b.n	80253d2 <_svfprintf_r+0x12ca>
 8025424:	9803      	ldr	r0, [sp, #12]
 8025426:	aa26      	add	r2, sp, #152	@ 0x98
 8025428:	4659      	mov	r1, fp
 802542a:	f001 f971 	bl	8026710 <__ssprint_r>
 802542e:	2800      	cmp	r0, #0
 8025430:	d1e5      	bne.n	80253fe <_svfprintf_r+0x12f6>
 8025432:	ac29      	add	r4, sp, #164	@ 0xa4
 8025434:	e7f4      	b.n	8025420 <_svfprintf_r+0x1318>
 8025436:	9803      	ldr	r0, [sp, #12]
 8025438:	4651      	mov	r1, sl
 802543a:	f7fe fda3 	bl	8023f84 <_free_r>
 802543e:	f7ff ba88 	b.w	8024952 <_svfprintf_r+0x84a>
 8025442:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8025444:	2b00      	cmp	r3, #0
 8025446:	f43f a878 	beq.w	802453a <_svfprintf_r+0x432>
 802544a:	9803      	ldr	r0, [sp, #12]
 802544c:	aa26      	add	r2, sp, #152	@ 0x98
 802544e:	4659      	mov	r1, fp
 8025450:	f001 f95e 	bl	8026710 <__ssprint_r>
 8025454:	f7ff b871 	b.w	802453a <_svfprintf_r+0x432>
 8025458:	ea56 0207 	orrs.w	r2, r6, r7
 802545c:	9508      	str	r5, [sp, #32]
 802545e:	f43f ab7a 	beq.w	8024b56 <_svfprintf_r+0xa4e>
 8025462:	2b01      	cmp	r3, #1
 8025464:	f43f abfb 	beq.w	8024c5e <_svfprintf_r+0xb56>
 8025468:	2b02      	cmp	r3, #2
 802546a:	f50d 79a4 	add.w	r9, sp, #328	@ 0x148
 802546e:	f43f ac3f 	beq.w	8024cf0 <_svfprintf_r+0xbe8>
 8025472:	f006 0307 	and.w	r3, r6, #7
 8025476:	08f6      	lsrs	r6, r6, #3
 8025478:	ea46 7647 	orr.w	r6, r6, r7, lsl #29
 802547c:	08ff      	lsrs	r7, r7, #3
 802547e:	3330      	adds	r3, #48	@ 0x30
 8025480:	ea56 0107 	orrs.w	r1, r6, r7
 8025484:	464a      	mov	r2, r9
 8025486:	f809 3d01 	strb.w	r3, [r9, #-1]!
 802548a:	d1f2      	bne.n	8025472 <_svfprintf_r+0x136a>
 802548c:	9908      	ldr	r1, [sp, #32]
 802548e:	07c8      	lsls	r0, r1, #31
 8025490:	d506      	bpl.n	80254a0 <_svfprintf_r+0x1398>
 8025492:	2b30      	cmp	r3, #48	@ 0x30
 8025494:	d004      	beq.n	80254a0 <_svfprintf_r+0x1398>
 8025496:	2330      	movs	r3, #48	@ 0x30
 8025498:	f809 3c01 	strb.w	r3, [r9, #-1]
 802549c:	f1a2 0902 	sub.w	r9, r2, #2
 80254a0:	ab52      	add	r3, sp, #328	@ 0x148
 80254a2:	9d08      	ldr	r5, [sp, #32]
 80254a4:	f8cd 8040 	str.w	r8, [sp, #64]	@ 0x40
 80254a8:	f04f 0a00 	mov.w	sl, #0
 80254ac:	eba3 0809 	sub.w	r8, r3, r9
 80254b0:	4657      	mov	r7, sl
 80254b2:	f8cd a020 	str.w	sl, [sp, #32]
 80254b6:	4656      	mov	r6, sl
 80254b8:	f7ff b97c 	b.w	80247b4 <_svfprintf_r+0x6ac>
 80254bc:	080af9c4 	.word	0x080af9c4
 80254c0:	080af9d4 	.word	0x080af9d4

080254c4 <__swhatbuf_r>:
 80254c4:	b570      	push	{r4, r5, r6, lr}
 80254c6:	460c      	mov	r4, r1
 80254c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80254cc:	2900      	cmp	r1, #0
 80254ce:	b096      	sub	sp, #88	@ 0x58
 80254d0:	4615      	mov	r5, r2
 80254d2:	461e      	mov	r6, r3
 80254d4:	da07      	bge.n	80254e6 <__swhatbuf_r+0x22>
 80254d6:	89a1      	ldrh	r1, [r4, #12]
 80254d8:	f011 0180 	ands.w	r1, r1, #128	@ 0x80
 80254dc:	d117      	bne.n	802550e <__swhatbuf_r+0x4a>
 80254de:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80254e2:	4608      	mov	r0, r1
 80254e4:	e00f      	b.n	8025506 <__swhatbuf_r+0x42>
 80254e6:	466a      	mov	r2, sp
 80254e8:	f000 fa3a 	bl	8025960 <_fstat_r>
 80254ec:	2800      	cmp	r0, #0
 80254ee:	dbf2      	blt.n	80254d6 <__swhatbuf_r+0x12>
 80254f0:	9901      	ldr	r1, [sp, #4]
 80254f2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80254f6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80254fa:	4259      	negs	r1, r3
 80254fc:	4159      	adcs	r1, r3
 80254fe:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8025502:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8025506:	6031      	str	r1, [r6, #0]
 8025508:	602b      	str	r3, [r5, #0]
 802550a:	b016      	add	sp, #88	@ 0x58
 802550c:	bd70      	pop	{r4, r5, r6, pc}
 802550e:	2100      	movs	r1, #0
 8025510:	2340      	movs	r3, #64	@ 0x40
 8025512:	e7e6      	b.n	80254e2 <__swhatbuf_r+0x1e>

08025514 <__smakebuf_r>:
 8025514:	898b      	ldrh	r3, [r1, #12]
 8025516:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8025518:	079d      	lsls	r5, r3, #30
 802551a:	4606      	mov	r6, r0
 802551c:	460c      	mov	r4, r1
 802551e:	d507      	bpl.n	8025530 <__smakebuf_r+0x1c>
 8025520:	f104 0343 	add.w	r3, r4, #67	@ 0x43
 8025524:	6023      	str	r3, [r4, #0]
 8025526:	6123      	str	r3, [r4, #16]
 8025528:	2301      	movs	r3, #1
 802552a:	6163      	str	r3, [r4, #20]
 802552c:	b003      	add	sp, #12
 802552e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8025530:	ab01      	add	r3, sp, #4
 8025532:	466a      	mov	r2, sp
 8025534:	f7ff ffc6 	bl	80254c4 <__swhatbuf_r>
 8025538:	9f00      	ldr	r7, [sp, #0]
 802553a:	4605      	mov	r5, r0
 802553c:	4639      	mov	r1, r7
 802553e:	4630      	mov	r0, r6
 8025540:	f7fd fc1e 	bl	8022d80 <_malloc_r>
 8025544:	b948      	cbnz	r0, 802555a <__smakebuf_r+0x46>
 8025546:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802554a:	059a      	lsls	r2, r3, #22
 802554c:	d4ee      	bmi.n	802552c <__smakebuf_r+0x18>
 802554e:	f023 0303 	bic.w	r3, r3, #3
 8025552:	f043 0302 	orr.w	r3, r3, #2
 8025556:	81a3      	strh	r3, [r4, #12]
 8025558:	e7e2      	b.n	8025520 <__smakebuf_r+0xc>
 802555a:	89a3      	ldrh	r3, [r4, #12]
 802555c:	6020      	str	r0, [r4, #0]
 802555e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8025562:	81a3      	strh	r3, [r4, #12]
 8025564:	9b01      	ldr	r3, [sp, #4]
 8025566:	e9c4 0704 	strd	r0, r7, [r4, #16]
 802556a:	b15b      	cbz	r3, 8025584 <__smakebuf_r+0x70>
 802556c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8025570:	4630      	mov	r0, r6
 8025572:	f000 fa07 	bl	8025984 <_isatty_r>
 8025576:	b128      	cbz	r0, 8025584 <__smakebuf_r+0x70>
 8025578:	89a3      	ldrh	r3, [r4, #12]
 802557a:	f023 0303 	bic.w	r3, r3, #3
 802557e:	f043 0301 	orr.w	r3, r3, #1
 8025582:	81a3      	strh	r3, [r4, #12]
 8025584:	89a3      	ldrh	r3, [r4, #12]
 8025586:	431d      	orrs	r5, r3
 8025588:	81a5      	strh	r5, [r4, #12]
 802558a:	e7cf      	b.n	802552c <__smakebuf_r+0x18>

0802558c <_putc_r>:
 802558c:	b570      	push	{r4, r5, r6, lr}
 802558e:	460d      	mov	r5, r1
 8025590:	4614      	mov	r4, r2
 8025592:	4606      	mov	r6, r0
 8025594:	b118      	cbz	r0, 802559e <_putc_r+0x12>
 8025596:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8025598:	b90b      	cbnz	r3, 802559e <_putc_r+0x12>
 802559a:	f7fe f8c7 	bl	802372c <__sinit>
 802559e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80255a0:	07d8      	lsls	r0, r3, #31
 80255a2:	d405      	bmi.n	80255b0 <_putc_r+0x24>
 80255a4:	89a3      	ldrh	r3, [r4, #12]
 80255a6:	0599      	lsls	r1, r3, #22
 80255a8:	d402      	bmi.n	80255b0 <_putc_r+0x24>
 80255aa:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80255ac:	f7fe fc34 	bl	8023e18 <__retarget_lock_acquire_recursive>
 80255b0:	68a3      	ldr	r3, [r4, #8]
 80255b2:	3b01      	subs	r3, #1
 80255b4:	2b00      	cmp	r3, #0
 80255b6:	60a3      	str	r3, [r4, #8]
 80255b8:	da05      	bge.n	80255c6 <_putc_r+0x3a>
 80255ba:	69a2      	ldr	r2, [r4, #24]
 80255bc:	4293      	cmp	r3, r2
 80255be:	db12      	blt.n	80255e6 <_putc_r+0x5a>
 80255c0:	b2eb      	uxtb	r3, r5
 80255c2:	2b0a      	cmp	r3, #10
 80255c4:	d00f      	beq.n	80255e6 <_putc_r+0x5a>
 80255c6:	6823      	ldr	r3, [r4, #0]
 80255c8:	1c5a      	adds	r2, r3, #1
 80255ca:	6022      	str	r2, [r4, #0]
 80255cc:	701d      	strb	r5, [r3, #0]
 80255ce:	b2ed      	uxtb	r5, r5
 80255d0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80255d2:	07da      	lsls	r2, r3, #31
 80255d4:	d405      	bmi.n	80255e2 <_putc_r+0x56>
 80255d6:	89a3      	ldrh	r3, [r4, #12]
 80255d8:	059b      	lsls	r3, r3, #22
 80255da:	d402      	bmi.n	80255e2 <_putc_r+0x56>
 80255dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80255de:	f7fe fc1c 	bl	8023e1a <__retarget_lock_release_recursive>
 80255e2:	4628      	mov	r0, r5
 80255e4:	bd70      	pop	{r4, r5, r6, pc}
 80255e6:	4629      	mov	r1, r5
 80255e8:	4622      	mov	r2, r4
 80255ea:	4630      	mov	r0, r6
 80255ec:	f000 f948 	bl	8025880 <__swbuf_r>
 80255f0:	4605      	mov	r5, r0
 80255f2:	e7ed      	b.n	80255d0 <_putc_r+0x44>

080255f4 <_fclose_r>:
 80255f4:	b570      	push	{r4, r5, r6, lr}
 80255f6:	4605      	mov	r5, r0
 80255f8:	460c      	mov	r4, r1
 80255fa:	b1b1      	cbz	r1, 802562a <_fclose_r+0x36>
 80255fc:	b118      	cbz	r0, 8025606 <_fclose_r+0x12>
 80255fe:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8025600:	b90b      	cbnz	r3, 8025606 <_fclose_r+0x12>
 8025602:	f7fe f893 	bl	802372c <__sinit>
 8025606:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8025608:	07de      	lsls	r6, r3, #31
 802560a:	d405      	bmi.n	8025618 <_fclose_r+0x24>
 802560c:	89a3      	ldrh	r3, [r4, #12]
 802560e:	0598      	lsls	r0, r3, #22
 8025610:	d402      	bmi.n	8025618 <_fclose_r+0x24>
 8025612:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8025614:	f7fe fc00 	bl	8023e18 <__retarget_lock_acquire_recursive>
 8025618:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802561c:	b943      	cbnz	r3, 8025630 <_fclose_r+0x3c>
 802561e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8025620:	07d9      	lsls	r1, r3, #31
 8025622:	d402      	bmi.n	802562a <_fclose_r+0x36>
 8025624:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8025626:	f7fe fbf8 	bl	8023e1a <__retarget_lock_release_recursive>
 802562a:	2600      	movs	r6, #0
 802562c:	4630      	mov	r0, r6
 802562e:	bd70      	pop	{r4, r5, r6, pc}
 8025630:	4621      	mov	r1, r4
 8025632:	4628      	mov	r0, r5
 8025634:	f000 f834 	bl	80256a0 <__sflush_r>
 8025638:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 802563a:	4606      	mov	r6, r0
 802563c:	b133      	cbz	r3, 802564c <_fclose_r+0x58>
 802563e:	69e1      	ldr	r1, [r4, #28]
 8025640:	4628      	mov	r0, r5
 8025642:	4798      	blx	r3
 8025644:	2800      	cmp	r0, #0
 8025646:	bfb8      	it	lt
 8025648:	f04f 36ff 	movlt.w	r6, #4294967295	@ 0xffffffff
 802564c:	89a3      	ldrh	r3, [r4, #12]
 802564e:	061a      	lsls	r2, r3, #24
 8025650:	d503      	bpl.n	802565a <_fclose_r+0x66>
 8025652:	6921      	ldr	r1, [r4, #16]
 8025654:	4628      	mov	r0, r5
 8025656:	f7fe fc95 	bl	8023f84 <_free_r>
 802565a:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 802565c:	b141      	cbz	r1, 8025670 <_fclose_r+0x7c>
 802565e:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 8025662:	4299      	cmp	r1, r3
 8025664:	d002      	beq.n	802566c <_fclose_r+0x78>
 8025666:	4628      	mov	r0, r5
 8025668:	f7fe fc8c 	bl	8023f84 <_free_r>
 802566c:	2300      	movs	r3, #0
 802566e:	6323      	str	r3, [r4, #48]	@ 0x30
 8025670:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8025672:	b121      	cbz	r1, 802567e <_fclose_r+0x8a>
 8025674:	4628      	mov	r0, r5
 8025676:	f7fe fc85 	bl	8023f84 <_free_r>
 802567a:	2300      	movs	r3, #0
 802567c:	6463      	str	r3, [r4, #68]	@ 0x44
 802567e:	f7fe f849 	bl	8023714 <__sfp_lock_acquire>
 8025682:	2300      	movs	r3, #0
 8025684:	81a3      	strh	r3, [r4, #12]
 8025686:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8025688:	07db      	lsls	r3, r3, #31
 802568a:	d402      	bmi.n	8025692 <_fclose_r+0x9e>
 802568c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802568e:	f7fe fbc4 	bl	8023e1a <__retarget_lock_release_recursive>
 8025692:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8025694:	f7fe fbbf 	bl	8023e16 <__retarget_lock_close_recursive>
 8025698:	f7fe f842 	bl	8023720 <__sfp_lock_release>
 802569c:	e7c6      	b.n	802562c <_fclose_r+0x38>
	...

080256a0 <__sflush_r>:
 80256a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80256a4:	4605      	mov	r5, r0
 80256a6:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
 80256aa:	0706      	lsls	r6, r0, #28
 80256ac:	460c      	mov	r4, r1
 80256ae:	d457      	bmi.n	8025760 <__sflush_r+0xc0>
 80256b0:	f440 6300 	orr.w	r3, r0, #2048	@ 0x800
 80256b4:	818b      	strh	r3, [r1, #12]
 80256b6:	684b      	ldr	r3, [r1, #4]
 80256b8:	2b00      	cmp	r3, #0
 80256ba:	dc02      	bgt.n	80256c2 <__sflush_r+0x22>
 80256bc:	6bcb      	ldr	r3, [r1, #60]	@ 0x3c
 80256be:	2b00      	cmp	r3, #0
 80256c0:	dd4c      	ble.n	802575c <__sflush_r+0xbc>
 80256c2:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80256c4:	2e00      	cmp	r6, #0
 80256c6:	d049      	beq.n	802575c <__sflush_r+0xbc>
 80256c8:	2300      	movs	r3, #0
 80256ca:	f410 5280 	ands.w	r2, r0, #4096	@ 0x1000
 80256ce:	682f      	ldr	r7, [r5, #0]
 80256d0:	69e1      	ldr	r1, [r4, #28]
 80256d2:	602b      	str	r3, [r5, #0]
 80256d4:	d034      	beq.n	8025740 <__sflush_r+0xa0>
 80256d6:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 80256d8:	89a3      	ldrh	r3, [r4, #12]
 80256da:	0759      	lsls	r1, r3, #29
 80256dc:	d505      	bpl.n	80256ea <__sflush_r+0x4a>
 80256de:	6863      	ldr	r3, [r4, #4]
 80256e0:	1ad2      	subs	r2, r2, r3
 80256e2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80256e4:	b10b      	cbz	r3, 80256ea <__sflush_r+0x4a>
 80256e6:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80256e8:	1ad2      	subs	r2, r2, r3
 80256ea:	2300      	movs	r3, #0
 80256ec:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80256ee:	69e1      	ldr	r1, [r4, #28]
 80256f0:	4628      	mov	r0, r5
 80256f2:	47b0      	blx	r6
 80256f4:	1c43      	adds	r3, r0, #1
 80256f6:	d106      	bne.n	8025706 <__sflush_r+0x66>
 80256f8:	682a      	ldr	r2, [r5, #0]
 80256fa:	2a1d      	cmp	r2, #29
 80256fc:	d848      	bhi.n	8025790 <__sflush_r+0xf0>
 80256fe:	4b2b      	ldr	r3, [pc, #172]	@ (80257ac <__sflush_r+0x10c>)
 8025700:	4113      	asrs	r3, r2
 8025702:	07de      	lsls	r6, r3, #31
 8025704:	d444      	bmi.n	8025790 <__sflush_r+0xf0>
 8025706:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802570a:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 802570e:	81a2      	strh	r2, [r4, #12]
 8025710:	2200      	movs	r2, #0
 8025712:	6062      	str	r2, [r4, #4]
 8025714:	04d9      	lsls	r1, r3, #19
 8025716:	6922      	ldr	r2, [r4, #16]
 8025718:	6022      	str	r2, [r4, #0]
 802571a:	d504      	bpl.n	8025726 <__sflush_r+0x86>
 802571c:	1c42      	adds	r2, r0, #1
 802571e:	d101      	bne.n	8025724 <__sflush_r+0x84>
 8025720:	682b      	ldr	r3, [r5, #0]
 8025722:	b903      	cbnz	r3, 8025726 <__sflush_r+0x86>
 8025724:	6520      	str	r0, [r4, #80]	@ 0x50
 8025726:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8025728:	602f      	str	r7, [r5, #0]
 802572a:	b1b9      	cbz	r1, 802575c <__sflush_r+0xbc>
 802572c:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 8025730:	4299      	cmp	r1, r3
 8025732:	d002      	beq.n	802573a <__sflush_r+0x9a>
 8025734:	4628      	mov	r0, r5
 8025736:	f7fe fc25 	bl	8023f84 <_free_r>
 802573a:	2300      	movs	r3, #0
 802573c:	6323      	str	r3, [r4, #48]	@ 0x30
 802573e:	e00d      	b.n	802575c <__sflush_r+0xbc>
 8025740:	2301      	movs	r3, #1
 8025742:	4628      	mov	r0, r5
 8025744:	47b0      	blx	r6
 8025746:	4602      	mov	r2, r0
 8025748:	1c50      	adds	r0, r2, #1
 802574a:	d1c5      	bne.n	80256d8 <__sflush_r+0x38>
 802574c:	682b      	ldr	r3, [r5, #0]
 802574e:	2b00      	cmp	r3, #0
 8025750:	d0c2      	beq.n	80256d8 <__sflush_r+0x38>
 8025752:	2b1d      	cmp	r3, #29
 8025754:	d001      	beq.n	802575a <__sflush_r+0xba>
 8025756:	2b16      	cmp	r3, #22
 8025758:	d11a      	bne.n	8025790 <__sflush_r+0xf0>
 802575a:	602f      	str	r7, [r5, #0]
 802575c:	2000      	movs	r0, #0
 802575e:	e01e      	b.n	802579e <__sflush_r+0xfe>
 8025760:	690f      	ldr	r7, [r1, #16]
 8025762:	2f00      	cmp	r7, #0
 8025764:	d0fa      	beq.n	802575c <__sflush_r+0xbc>
 8025766:	0783      	lsls	r3, r0, #30
 8025768:	680e      	ldr	r6, [r1, #0]
 802576a:	bf08      	it	eq
 802576c:	694b      	ldreq	r3, [r1, #20]
 802576e:	600f      	str	r7, [r1, #0]
 8025770:	bf18      	it	ne
 8025772:	2300      	movne	r3, #0
 8025774:	eba6 0807 	sub.w	r8, r6, r7
 8025778:	608b      	str	r3, [r1, #8]
 802577a:	f1b8 0f00 	cmp.w	r8, #0
 802577e:	dded      	ble.n	802575c <__sflush_r+0xbc>
 8025780:	69e1      	ldr	r1, [r4, #28]
 8025782:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 8025784:	4643      	mov	r3, r8
 8025786:	463a      	mov	r2, r7
 8025788:	4628      	mov	r0, r5
 802578a:	47b0      	blx	r6
 802578c:	2800      	cmp	r0, #0
 802578e:	dc08      	bgt.n	80257a2 <__sflush_r+0x102>
 8025790:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8025794:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8025798:	81a3      	strh	r3, [r4, #12]
 802579a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802579e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80257a2:	4407      	add	r7, r0
 80257a4:	eba8 0800 	sub.w	r8, r8, r0
 80257a8:	e7e7      	b.n	802577a <__sflush_r+0xda>
 80257aa:	bf00      	nop
 80257ac:	dfbffffe 	.word	0xdfbffffe

080257b0 <_fflush_r>:
 80257b0:	b538      	push	{r3, r4, r5, lr}
 80257b2:	460c      	mov	r4, r1
 80257b4:	4605      	mov	r5, r0
 80257b6:	b118      	cbz	r0, 80257c0 <_fflush_r+0x10>
 80257b8:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80257ba:	b90b      	cbnz	r3, 80257c0 <_fflush_r+0x10>
 80257bc:	f7fd ffb6 	bl	802372c <__sinit>
 80257c0:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
 80257c4:	b1b8      	cbz	r0, 80257f6 <_fflush_r+0x46>
 80257c6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80257c8:	07db      	lsls	r3, r3, #31
 80257ca:	d404      	bmi.n	80257d6 <_fflush_r+0x26>
 80257cc:	0581      	lsls	r1, r0, #22
 80257ce:	d402      	bmi.n	80257d6 <_fflush_r+0x26>
 80257d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80257d2:	f7fe fb21 	bl	8023e18 <__retarget_lock_acquire_recursive>
 80257d6:	4628      	mov	r0, r5
 80257d8:	4621      	mov	r1, r4
 80257da:	f7ff ff61 	bl	80256a0 <__sflush_r>
 80257de:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80257e0:	07da      	lsls	r2, r3, #31
 80257e2:	4605      	mov	r5, r0
 80257e4:	d405      	bmi.n	80257f2 <_fflush_r+0x42>
 80257e6:	89a3      	ldrh	r3, [r4, #12]
 80257e8:	059b      	lsls	r3, r3, #22
 80257ea:	d402      	bmi.n	80257f2 <_fflush_r+0x42>
 80257ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80257ee:	f7fe fb14 	bl	8023e1a <__retarget_lock_release_recursive>
 80257f2:	4628      	mov	r0, r5
 80257f4:	bd38      	pop	{r3, r4, r5, pc}
 80257f6:	4605      	mov	r5, r0
 80257f8:	e7fb      	b.n	80257f2 <_fflush_r+0x42>

080257fa <__sread>:
 80257fa:	b510      	push	{r4, lr}
 80257fc:	460c      	mov	r4, r1
 80257fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8025802:	f000 f8e1 	bl	80259c8 <_read_r>
 8025806:	2800      	cmp	r0, #0
 8025808:	bfab      	itete	ge
 802580a:	6d23      	ldrge	r3, [r4, #80]	@ 0x50
 802580c:	89a3      	ldrhlt	r3, [r4, #12]
 802580e:	181b      	addge	r3, r3, r0
 8025810:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8025814:	bfac      	ite	ge
 8025816:	6523      	strge	r3, [r4, #80]	@ 0x50
 8025818:	81a3      	strhlt	r3, [r4, #12]
 802581a:	bd10      	pop	{r4, pc}

0802581c <__swrite>:
 802581c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8025820:	461f      	mov	r7, r3
 8025822:	898b      	ldrh	r3, [r1, #12]
 8025824:	05db      	lsls	r3, r3, #23
 8025826:	4605      	mov	r5, r0
 8025828:	460c      	mov	r4, r1
 802582a:	4616      	mov	r6, r2
 802582c:	d505      	bpl.n	802583a <__swrite+0x1e>
 802582e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8025832:	2302      	movs	r3, #2
 8025834:	2200      	movs	r2, #0
 8025836:	f000 f8b5 	bl	80259a4 <_lseek_r>
 802583a:	89a3      	ldrh	r3, [r4, #12]
 802583c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8025840:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8025844:	81a3      	strh	r3, [r4, #12]
 8025846:	4632      	mov	r2, r6
 8025848:	463b      	mov	r3, r7
 802584a:	4628      	mov	r0, r5
 802584c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8025850:	f000 b8cc 	b.w	80259ec <_write_r>

08025854 <__sseek>:
 8025854:	b510      	push	{r4, lr}
 8025856:	460c      	mov	r4, r1
 8025858:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802585c:	f000 f8a2 	bl	80259a4 <_lseek_r>
 8025860:	1c43      	adds	r3, r0, #1
 8025862:	89a3      	ldrh	r3, [r4, #12]
 8025864:	bf15      	itete	ne
 8025866:	6520      	strne	r0, [r4, #80]	@ 0x50
 8025868:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 802586c:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8025870:	81a3      	strheq	r3, [r4, #12]
 8025872:	bf18      	it	ne
 8025874:	81a3      	strhne	r3, [r4, #12]
 8025876:	bd10      	pop	{r4, pc}

08025878 <__sclose>:
 8025878:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802587c:	f000 b860 	b.w	8025940 <_close_r>

08025880 <__swbuf_r>:
 8025880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025882:	460e      	mov	r6, r1
 8025884:	4614      	mov	r4, r2
 8025886:	4605      	mov	r5, r0
 8025888:	b118      	cbz	r0, 8025892 <__swbuf_r+0x12>
 802588a:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 802588c:	b90b      	cbnz	r3, 8025892 <__swbuf_r+0x12>
 802588e:	f7fd ff4d 	bl	802372c <__sinit>
 8025892:	69a3      	ldr	r3, [r4, #24]
 8025894:	60a3      	str	r3, [r4, #8]
 8025896:	89a3      	ldrh	r3, [r4, #12]
 8025898:	0719      	lsls	r1, r3, #28
 802589a:	d501      	bpl.n	80258a0 <__swbuf_r+0x20>
 802589c:	6923      	ldr	r3, [r4, #16]
 802589e:	b943      	cbnz	r3, 80258b2 <__swbuf_r+0x32>
 80258a0:	4621      	mov	r1, r4
 80258a2:	4628      	mov	r0, r5
 80258a4:	f7fe f98a 	bl	8023bbc <__swsetup_r>
 80258a8:	b118      	cbz	r0, 80258b2 <__swbuf_r+0x32>
 80258aa:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80258ae:	4638      	mov	r0, r7
 80258b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80258b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80258b6:	b2f6      	uxtb	r6, r6
 80258b8:	049a      	lsls	r2, r3, #18
 80258ba:	4637      	mov	r7, r6
 80258bc:	d406      	bmi.n	80258cc <__swbuf_r+0x4c>
 80258be:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80258c2:	81a3      	strh	r3, [r4, #12]
 80258c4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80258c6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80258ca:	6663      	str	r3, [r4, #100]	@ 0x64
 80258cc:	6823      	ldr	r3, [r4, #0]
 80258ce:	6922      	ldr	r2, [r4, #16]
 80258d0:	1a98      	subs	r0, r3, r2
 80258d2:	6963      	ldr	r3, [r4, #20]
 80258d4:	4283      	cmp	r3, r0
 80258d6:	dc05      	bgt.n	80258e4 <__swbuf_r+0x64>
 80258d8:	4621      	mov	r1, r4
 80258da:	4628      	mov	r0, r5
 80258dc:	f7ff ff68 	bl	80257b0 <_fflush_r>
 80258e0:	2800      	cmp	r0, #0
 80258e2:	d1e2      	bne.n	80258aa <__swbuf_r+0x2a>
 80258e4:	68a3      	ldr	r3, [r4, #8]
 80258e6:	3b01      	subs	r3, #1
 80258e8:	60a3      	str	r3, [r4, #8]
 80258ea:	6823      	ldr	r3, [r4, #0]
 80258ec:	1c5a      	adds	r2, r3, #1
 80258ee:	6022      	str	r2, [r4, #0]
 80258f0:	701e      	strb	r6, [r3, #0]
 80258f2:	6962      	ldr	r2, [r4, #20]
 80258f4:	1c43      	adds	r3, r0, #1
 80258f6:	429a      	cmp	r2, r3
 80258f8:	d004      	beq.n	8025904 <__swbuf_r+0x84>
 80258fa:	89a3      	ldrh	r3, [r4, #12]
 80258fc:	07db      	lsls	r3, r3, #31
 80258fe:	d5d6      	bpl.n	80258ae <__swbuf_r+0x2e>
 8025900:	2e0a      	cmp	r6, #10
 8025902:	d1d4      	bne.n	80258ae <__swbuf_r+0x2e>
 8025904:	4621      	mov	r1, r4
 8025906:	4628      	mov	r0, r5
 8025908:	f7ff ff52 	bl	80257b0 <_fflush_r>
 802590c:	2800      	cmp	r0, #0
 802590e:	d0ce      	beq.n	80258ae <__swbuf_r+0x2e>
 8025910:	e7cb      	b.n	80258aa <__swbuf_r+0x2a>

08025912 <strncpy>:
 8025912:	b510      	push	{r4, lr}
 8025914:	3901      	subs	r1, #1
 8025916:	4603      	mov	r3, r0
 8025918:	b132      	cbz	r2, 8025928 <strncpy+0x16>
 802591a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 802591e:	f803 4b01 	strb.w	r4, [r3], #1
 8025922:	3a01      	subs	r2, #1
 8025924:	2c00      	cmp	r4, #0
 8025926:	d1f7      	bne.n	8025918 <strncpy+0x6>
 8025928:	441a      	add	r2, r3
 802592a:	2100      	movs	r1, #0
 802592c:	4293      	cmp	r3, r2
 802592e:	d100      	bne.n	8025932 <strncpy+0x20>
 8025930:	bd10      	pop	{r4, pc}
 8025932:	f803 1b01 	strb.w	r1, [r3], #1
 8025936:	e7f9      	b.n	802592c <strncpy+0x1a>

08025938 <_localeconv_r>:
 8025938:	4800      	ldr	r0, [pc, #0]	@ (802593c <_localeconv_r+0x4>)
 802593a:	4770      	bx	lr
 802593c:	20008a64 	.word	0x20008a64

08025940 <_close_r>:
 8025940:	b538      	push	{r3, r4, r5, lr}
 8025942:	4d06      	ldr	r5, [pc, #24]	@ (802595c <_close_r+0x1c>)
 8025944:	2300      	movs	r3, #0
 8025946:	4604      	mov	r4, r0
 8025948:	4608      	mov	r0, r1
 802594a:	602b      	str	r3, [r5, #0]
 802594c:	f7fb fd36 	bl	80213bc <_close>
 8025950:	1c43      	adds	r3, r0, #1
 8025952:	d102      	bne.n	802595a <_close_r+0x1a>
 8025954:	682b      	ldr	r3, [r5, #0]
 8025956:	b103      	cbz	r3, 802595a <_close_r+0x1a>
 8025958:	6023      	str	r3, [r4, #0]
 802595a:	bd38      	pop	{r3, r4, r5, pc}
 802595c:	2003cfe8 	.word	0x2003cfe8

08025960 <_fstat_r>:
 8025960:	b538      	push	{r3, r4, r5, lr}
 8025962:	4d07      	ldr	r5, [pc, #28]	@ (8025980 <_fstat_r+0x20>)
 8025964:	2300      	movs	r3, #0
 8025966:	4604      	mov	r4, r0
 8025968:	4608      	mov	r0, r1
 802596a:	4611      	mov	r1, r2
 802596c:	602b      	str	r3, [r5, #0]
 802596e:	f7fb fd28 	bl	80213c2 <_fstat>
 8025972:	1c43      	adds	r3, r0, #1
 8025974:	d102      	bne.n	802597c <_fstat_r+0x1c>
 8025976:	682b      	ldr	r3, [r5, #0]
 8025978:	b103      	cbz	r3, 802597c <_fstat_r+0x1c>
 802597a:	6023      	str	r3, [r4, #0]
 802597c:	bd38      	pop	{r3, r4, r5, pc}
 802597e:	bf00      	nop
 8025980:	2003cfe8 	.word	0x2003cfe8

08025984 <_isatty_r>:
 8025984:	b538      	push	{r3, r4, r5, lr}
 8025986:	4d06      	ldr	r5, [pc, #24]	@ (80259a0 <_isatty_r+0x1c>)
 8025988:	2300      	movs	r3, #0
 802598a:	4604      	mov	r4, r0
 802598c:	4608      	mov	r0, r1
 802598e:	602b      	str	r3, [r5, #0]
 8025990:	f7fb fd1a 	bl	80213c8 <_isatty>
 8025994:	1c43      	adds	r3, r0, #1
 8025996:	d102      	bne.n	802599e <_isatty_r+0x1a>
 8025998:	682b      	ldr	r3, [r5, #0]
 802599a:	b103      	cbz	r3, 802599e <_isatty_r+0x1a>
 802599c:	6023      	str	r3, [r4, #0]
 802599e:	bd38      	pop	{r3, r4, r5, pc}
 80259a0:	2003cfe8 	.word	0x2003cfe8

080259a4 <_lseek_r>:
 80259a4:	b538      	push	{r3, r4, r5, lr}
 80259a6:	4d07      	ldr	r5, [pc, #28]	@ (80259c4 <_lseek_r+0x20>)
 80259a8:	4604      	mov	r4, r0
 80259aa:	4608      	mov	r0, r1
 80259ac:	4611      	mov	r1, r2
 80259ae:	2200      	movs	r2, #0
 80259b0:	602a      	str	r2, [r5, #0]
 80259b2:	461a      	mov	r2, r3
 80259b4:	f7fb fd0b 	bl	80213ce <_lseek>
 80259b8:	1c43      	adds	r3, r0, #1
 80259ba:	d102      	bne.n	80259c2 <_lseek_r+0x1e>
 80259bc:	682b      	ldr	r3, [r5, #0]
 80259be:	b103      	cbz	r3, 80259c2 <_lseek_r+0x1e>
 80259c0:	6023      	str	r3, [r4, #0]
 80259c2:	bd38      	pop	{r3, r4, r5, pc}
 80259c4:	2003cfe8 	.word	0x2003cfe8

080259c8 <_read_r>:
 80259c8:	b538      	push	{r3, r4, r5, lr}
 80259ca:	4d07      	ldr	r5, [pc, #28]	@ (80259e8 <_read_r+0x20>)
 80259cc:	4604      	mov	r4, r0
 80259ce:	4608      	mov	r0, r1
 80259d0:	4611      	mov	r1, r2
 80259d2:	2200      	movs	r2, #0
 80259d4:	602a      	str	r2, [r5, #0]
 80259d6:	461a      	mov	r2, r3
 80259d8:	f7fb fce3 	bl	80213a2 <_read>
 80259dc:	1c43      	adds	r3, r0, #1
 80259de:	d102      	bne.n	80259e6 <_read_r+0x1e>
 80259e0:	682b      	ldr	r3, [r5, #0]
 80259e2:	b103      	cbz	r3, 80259e6 <_read_r+0x1e>
 80259e4:	6023      	str	r3, [r4, #0]
 80259e6:	bd38      	pop	{r3, r4, r5, pc}
 80259e8:	2003cfe8 	.word	0x2003cfe8

080259ec <_write_r>:
 80259ec:	b538      	push	{r3, r4, r5, lr}
 80259ee:	4d07      	ldr	r5, [pc, #28]	@ (8025a0c <_write_r+0x20>)
 80259f0:	4604      	mov	r4, r0
 80259f2:	4608      	mov	r0, r1
 80259f4:	4611      	mov	r1, r2
 80259f6:	2200      	movs	r2, #0
 80259f8:	602a      	str	r2, [r5, #0]
 80259fa:	461a      	mov	r2, r3
 80259fc:	f7fb fcc4 	bl	8021388 <_write>
 8025a00:	1c43      	adds	r3, r0, #1
 8025a02:	d102      	bne.n	8025a0a <_write_r+0x1e>
 8025a04:	682b      	ldr	r3, [r5, #0]
 8025a06:	b103      	cbz	r3, 8025a0a <_write_r+0x1e>
 8025a08:	6023      	str	r3, [r4, #0]
 8025a0a:	bd38      	pop	{r3, r4, r5, pc}
 8025a0c:	2003cfe8 	.word	0x2003cfe8

08025a10 <__libc_fini_array>:
 8025a10:	b538      	push	{r3, r4, r5, lr}
 8025a12:	4d07      	ldr	r5, [pc, #28]	@ (8025a30 <__libc_fini_array+0x20>)
 8025a14:	4c07      	ldr	r4, [pc, #28]	@ (8025a34 <__libc_fini_array+0x24>)
 8025a16:	1b64      	subs	r4, r4, r5
 8025a18:	10a4      	asrs	r4, r4, #2
 8025a1a:	b91c      	cbnz	r4, 8025a24 <__libc_fini_array+0x14>
 8025a1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8025a20:	f002 b858 	b.w	8027ad4 <_fini>
 8025a24:	3c01      	subs	r4, #1
 8025a26:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8025a2a:	4798      	blx	r3
 8025a2c:	e7f5      	b.n	8025a1a <__libc_fini_array+0xa>
 8025a2e:	bf00      	nop
 8025a30:	080affa0 	.word	0x080affa0
 8025a34:	080affa8 	.word	0x080affa8

08025a38 <frexp>:
 8025a38:	b570      	push	{r4, r5, r6, lr}
 8025a3a:	2100      	movs	r1, #0
 8025a3c:	ec55 4b10 	vmov	r4, r5, d0
 8025a40:	6001      	str	r1, [r0, #0]
 8025a42:	4915      	ldr	r1, [pc, #84]	@ (8025a98 <frexp+0x60>)
 8025a44:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8025a48:	428a      	cmp	r2, r1
 8025a4a:	4606      	mov	r6, r0
 8025a4c:	462b      	mov	r3, r5
 8025a4e:	d820      	bhi.n	8025a92 <frexp+0x5a>
 8025a50:	4621      	mov	r1, r4
 8025a52:	4311      	orrs	r1, r2
 8025a54:	d01d      	beq.n	8025a92 <frexp+0x5a>
 8025a56:	4911      	ldr	r1, [pc, #68]	@ (8025a9c <frexp+0x64>)
 8025a58:	4029      	ands	r1, r5
 8025a5a:	b961      	cbnz	r1, 8025a76 <frexp+0x3e>
 8025a5c:	4b10      	ldr	r3, [pc, #64]	@ (8025aa0 <frexp+0x68>)
 8025a5e:	2200      	movs	r2, #0
 8025a60:	4620      	mov	r0, r4
 8025a62:	4629      	mov	r1, r5
 8025a64:	f7e0 fde0 	bl	8006628 <__aeabi_dmul>
 8025a68:	460b      	mov	r3, r1
 8025a6a:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 8025a6e:	f06f 0135 	mvn.w	r1, #53	@ 0x35
 8025a72:	4604      	mov	r4, r0
 8025a74:	6031      	str	r1, [r6, #0]
 8025a76:	6831      	ldr	r1, [r6, #0]
 8025a78:	1512      	asrs	r2, r2, #20
 8025a7a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8025a7e:	f2a2 32fe 	subw	r2, r2, #1022	@ 0x3fe
 8025a82:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8025a86:	4411      	add	r1, r2
 8025a88:	f043 557f 	orr.w	r5, r3, #1069547520	@ 0x3fc00000
 8025a8c:	6031      	str	r1, [r6, #0]
 8025a8e:	f445 1500 	orr.w	r5, r5, #2097152	@ 0x200000
 8025a92:	ec45 4b10 	vmov	d0, r4, r5
 8025a96:	bd70      	pop	{r4, r5, r6, pc}
 8025a98:	7fefffff 	.word	0x7fefffff
 8025a9c:	7ff00000 	.word	0x7ff00000
 8025aa0:	43500000 	.word	0x43500000

08025aa4 <quorem>:
 8025aa4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025aa8:	6903      	ldr	r3, [r0, #16]
 8025aaa:	690c      	ldr	r4, [r1, #16]
 8025aac:	42a3      	cmp	r3, r4
 8025aae:	4607      	mov	r7, r0
 8025ab0:	db7e      	blt.n	8025bb0 <quorem+0x10c>
 8025ab2:	3c01      	subs	r4, #1
 8025ab4:	f101 0814 	add.w	r8, r1, #20
 8025ab8:	00a3      	lsls	r3, r4, #2
 8025aba:	f100 0514 	add.w	r5, r0, #20
 8025abe:	9300      	str	r3, [sp, #0]
 8025ac0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8025ac4:	9301      	str	r3, [sp, #4]
 8025ac6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8025aca:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8025ace:	3301      	adds	r3, #1
 8025ad0:	429a      	cmp	r2, r3
 8025ad2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8025ad6:	fbb2 f6f3 	udiv	r6, r2, r3
 8025ada:	d32e      	bcc.n	8025b3a <quorem+0x96>
 8025adc:	f04f 0a00 	mov.w	sl, #0
 8025ae0:	46c4      	mov	ip, r8
 8025ae2:	46ae      	mov	lr, r5
 8025ae4:	46d3      	mov	fp, sl
 8025ae6:	f85c 3b04 	ldr.w	r3, [ip], #4
 8025aea:	b298      	uxth	r0, r3
 8025aec:	fb06 a000 	mla	r0, r6, r0, sl
 8025af0:	0c02      	lsrs	r2, r0, #16
 8025af2:	0c1b      	lsrs	r3, r3, #16
 8025af4:	fb06 2303 	mla	r3, r6, r3, r2
 8025af8:	f8de 2000 	ldr.w	r2, [lr]
 8025afc:	b280      	uxth	r0, r0
 8025afe:	b292      	uxth	r2, r2
 8025b00:	1a12      	subs	r2, r2, r0
 8025b02:	445a      	add	r2, fp
 8025b04:	f8de 0000 	ldr.w	r0, [lr]
 8025b08:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8025b0c:	b29b      	uxth	r3, r3
 8025b0e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8025b12:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8025b16:	b292      	uxth	r2, r2
 8025b18:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8025b1c:	45e1      	cmp	r9, ip
 8025b1e:	f84e 2b04 	str.w	r2, [lr], #4
 8025b22:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8025b26:	d2de      	bcs.n	8025ae6 <quorem+0x42>
 8025b28:	9b00      	ldr	r3, [sp, #0]
 8025b2a:	58eb      	ldr	r3, [r5, r3]
 8025b2c:	b92b      	cbnz	r3, 8025b3a <quorem+0x96>
 8025b2e:	9b01      	ldr	r3, [sp, #4]
 8025b30:	3b04      	subs	r3, #4
 8025b32:	429d      	cmp	r5, r3
 8025b34:	461a      	mov	r2, r3
 8025b36:	d32f      	bcc.n	8025b98 <quorem+0xf4>
 8025b38:	613c      	str	r4, [r7, #16]
 8025b3a:	4638      	mov	r0, r7
 8025b3c:	f001 f892 	bl	8026c64 <__mcmp>
 8025b40:	2800      	cmp	r0, #0
 8025b42:	db25      	blt.n	8025b90 <quorem+0xec>
 8025b44:	4629      	mov	r1, r5
 8025b46:	2000      	movs	r0, #0
 8025b48:	f858 2b04 	ldr.w	r2, [r8], #4
 8025b4c:	f8d1 c000 	ldr.w	ip, [r1]
 8025b50:	fa1f fe82 	uxth.w	lr, r2
 8025b54:	fa1f f38c 	uxth.w	r3, ip
 8025b58:	eba3 030e 	sub.w	r3, r3, lr
 8025b5c:	4403      	add	r3, r0
 8025b5e:	0c12      	lsrs	r2, r2, #16
 8025b60:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8025b64:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8025b68:	b29b      	uxth	r3, r3
 8025b6a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8025b6e:	45c1      	cmp	r9, r8
 8025b70:	f841 3b04 	str.w	r3, [r1], #4
 8025b74:	ea4f 4022 	mov.w	r0, r2, asr #16
 8025b78:	d2e6      	bcs.n	8025b48 <quorem+0xa4>
 8025b7a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8025b7e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8025b82:	b922      	cbnz	r2, 8025b8e <quorem+0xea>
 8025b84:	3b04      	subs	r3, #4
 8025b86:	429d      	cmp	r5, r3
 8025b88:	461a      	mov	r2, r3
 8025b8a:	d30b      	bcc.n	8025ba4 <quorem+0x100>
 8025b8c:	613c      	str	r4, [r7, #16]
 8025b8e:	3601      	adds	r6, #1
 8025b90:	4630      	mov	r0, r6
 8025b92:	b003      	add	sp, #12
 8025b94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025b98:	6812      	ldr	r2, [r2, #0]
 8025b9a:	3b04      	subs	r3, #4
 8025b9c:	2a00      	cmp	r2, #0
 8025b9e:	d1cb      	bne.n	8025b38 <quorem+0x94>
 8025ba0:	3c01      	subs	r4, #1
 8025ba2:	e7c6      	b.n	8025b32 <quorem+0x8e>
 8025ba4:	6812      	ldr	r2, [r2, #0]
 8025ba6:	3b04      	subs	r3, #4
 8025ba8:	2a00      	cmp	r2, #0
 8025baa:	d1ef      	bne.n	8025b8c <quorem+0xe8>
 8025bac:	3c01      	subs	r4, #1
 8025bae:	e7ea      	b.n	8025b86 <quorem+0xe2>
 8025bb0:	2000      	movs	r0, #0
 8025bb2:	e7ee      	b.n	8025b92 <quorem+0xee>
 8025bb4:	0000      	movs	r0, r0
	...

08025bb8 <_dtoa_r>:
 8025bb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025bbc:	b099      	sub	sp, #100	@ 0x64
 8025bbe:	ed8d 0b02 	vstr	d0, [sp, #8]
 8025bc2:	9109      	str	r1, [sp, #36]	@ 0x24
 8025bc4:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 8025bc6:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8025bc8:	920e      	str	r2, [sp, #56]	@ 0x38
 8025bca:	ec55 4b10 	vmov	r4, r5, d0
 8025bce:	4683      	mov	fp, r0
 8025bd0:	9313      	str	r3, [sp, #76]	@ 0x4c
 8025bd2:	b149      	cbz	r1, 8025be8 <_dtoa_r+0x30>
 8025bd4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8025bd6:	604a      	str	r2, [r1, #4]
 8025bd8:	2301      	movs	r3, #1
 8025bda:	4093      	lsls	r3, r2
 8025bdc:	608b      	str	r3, [r1, #8]
 8025bde:	f000 fe39 	bl	8026854 <_Bfree>
 8025be2:	2300      	movs	r3, #0
 8025be4:	f8cb 3038 	str.w	r3, [fp, #56]	@ 0x38
 8025be8:	1e2b      	subs	r3, r5, #0
 8025bea:	bfb9      	ittee	lt
 8025bec:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8025bf0:	9303      	strlt	r3, [sp, #12]
 8025bf2:	2300      	movge	r3, #0
 8025bf4:	6033      	strge	r3, [r6, #0]
 8025bf6:	9f03      	ldr	r7, [sp, #12]
 8025bf8:	4b97      	ldr	r3, [pc, #604]	@ (8025e58 <_dtoa_r+0x2a0>)
 8025bfa:	bfbc      	itt	lt
 8025bfc:	2201      	movlt	r2, #1
 8025bfe:	6032      	strlt	r2, [r6, #0]
 8025c00:	43bb      	bics	r3, r7
 8025c02:	d114      	bne.n	8025c2e <_dtoa_r+0x76>
 8025c04:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8025c06:	f242 730f 	movw	r3, #9999	@ 0x270f
 8025c0a:	6013      	str	r3, [r2, #0]
 8025c0c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8025c10:	4323      	orrs	r3, r4
 8025c12:	f000 854c 	beq.w	80266ae <_dtoa_r+0xaf6>
 8025c16:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8025c18:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8025e70 <_dtoa_r+0x2b8>
 8025c1c:	b11b      	cbz	r3, 8025c26 <_dtoa_r+0x6e>
 8025c1e:	f10a 0303 	add.w	r3, sl, #3
 8025c22:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8025c24:	6013      	str	r3, [r2, #0]
 8025c26:	4650      	mov	r0, sl
 8025c28:	b019      	add	sp, #100	@ 0x64
 8025c2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025c2e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8025c32:	2200      	movs	r2, #0
 8025c34:	ec51 0b17 	vmov	r0, r1, d7
 8025c38:	2300      	movs	r3, #0
 8025c3a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8025c3e:	f7e0 ff5b 	bl	8006af8 <__aeabi_dcmpeq>
 8025c42:	4680      	mov	r8, r0
 8025c44:	b150      	cbz	r0, 8025c5c <_dtoa_r+0xa4>
 8025c46:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8025c48:	2301      	movs	r3, #1
 8025c4a:	6013      	str	r3, [r2, #0]
 8025c4c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8025c4e:	b113      	cbz	r3, 8025c56 <_dtoa_r+0x9e>
 8025c50:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8025c52:	4b82      	ldr	r3, [pc, #520]	@ (8025e5c <_dtoa_r+0x2a4>)
 8025c54:	6013      	str	r3, [r2, #0]
 8025c56:	f8df a21c 	ldr.w	sl, [pc, #540]	@ 8025e74 <_dtoa_r+0x2bc>
 8025c5a:	e7e4      	b.n	8025c26 <_dtoa_r+0x6e>
 8025c5c:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8025c60:	aa16      	add	r2, sp, #88	@ 0x58
 8025c62:	a917      	add	r1, sp, #92	@ 0x5c
 8025c64:	4658      	mov	r0, fp
 8025c66:	f001 f8ad 	bl	8026dc4 <__d2b>
 8025c6a:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8025c6e:	4681      	mov	r9, r0
 8025c70:	2e00      	cmp	r6, #0
 8025c72:	d077      	beq.n	8025d64 <_dtoa_r+0x1ac>
 8025c74:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8025c76:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8025c7a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8025c7e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8025c82:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8025c86:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8025c8a:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8025c8e:	4619      	mov	r1, r3
 8025c90:	2200      	movs	r2, #0
 8025c92:	4b73      	ldr	r3, [pc, #460]	@ (8025e60 <_dtoa_r+0x2a8>)
 8025c94:	f7e0 fb10 	bl	80062b8 <__aeabi_dsub>
 8025c98:	a369      	add	r3, pc, #420	@ (adr r3, 8025e40 <_dtoa_r+0x288>)
 8025c9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025c9e:	f7e0 fcc3 	bl	8006628 <__aeabi_dmul>
 8025ca2:	a369      	add	r3, pc, #420	@ (adr r3, 8025e48 <_dtoa_r+0x290>)
 8025ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025ca8:	f7e0 fb08 	bl	80062bc <__adddf3>
 8025cac:	4604      	mov	r4, r0
 8025cae:	4630      	mov	r0, r6
 8025cb0:	460d      	mov	r5, r1
 8025cb2:	f7e0 fc4f 	bl	8006554 <__aeabi_i2d>
 8025cb6:	a366      	add	r3, pc, #408	@ (adr r3, 8025e50 <_dtoa_r+0x298>)
 8025cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025cbc:	f7e0 fcb4 	bl	8006628 <__aeabi_dmul>
 8025cc0:	4602      	mov	r2, r0
 8025cc2:	460b      	mov	r3, r1
 8025cc4:	4620      	mov	r0, r4
 8025cc6:	4629      	mov	r1, r5
 8025cc8:	f7e0 faf8 	bl	80062bc <__adddf3>
 8025ccc:	4604      	mov	r4, r0
 8025cce:	460d      	mov	r5, r1
 8025cd0:	f7e0 ff5a 	bl	8006b88 <__aeabi_d2iz>
 8025cd4:	2200      	movs	r2, #0
 8025cd6:	4607      	mov	r7, r0
 8025cd8:	2300      	movs	r3, #0
 8025cda:	4620      	mov	r0, r4
 8025cdc:	4629      	mov	r1, r5
 8025cde:	f7e0 ff15 	bl	8006b0c <__aeabi_dcmplt>
 8025ce2:	b140      	cbz	r0, 8025cf6 <_dtoa_r+0x13e>
 8025ce4:	4638      	mov	r0, r7
 8025ce6:	f7e0 fc35 	bl	8006554 <__aeabi_i2d>
 8025cea:	4622      	mov	r2, r4
 8025cec:	462b      	mov	r3, r5
 8025cee:	f7e0 ff03 	bl	8006af8 <__aeabi_dcmpeq>
 8025cf2:	b900      	cbnz	r0, 8025cf6 <_dtoa_r+0x13e>
 8025cf4:	3f01      	subs	r7, #1
 8025cf6:	2f16      	cmp	r7, #22
 8025cf8:	d851      	bhi.n	8025d9e <_dtoa_r+0x1e6>
 8025cfa:	4b5a      	ldr	r3, [pc, #360]	@ (8025e64 <_dtoa_r+0x2ac>)
 8025cfc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8025d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025d04:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8025d08:	f7e0 ff00 	bl	8006b0c <__aeabi_dcmplt>
 8025d0c:	2800      	cmp	r0, #0
 8025d0e:	d048      	beq.n	8025da2 <_dtoa_r+0x1ea>
 8025d10:	3f01      	subs	r7, #1
 8025d12:	2300      	movs	r3, #0
 8025d14:	9312      	str	r3, [sp, #72]	@ 0x48
 8025d16:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8025d18:	1b9b      	subs	r3, r3, r6
 8025d1a:	1e5a      	subs	r2, r3, #1
 8025d1c:	bf44      	itt	mi
 8025d1e:	f1c3 0801 	rsbmi	r8, r3, #1
 8025d22:	2300      	movmi	r3, #0
 8025d24:	9208      	str	r2, [sp, #32]
 8025d26:	bf54      	ite	pl
 8025d28:	f04f 0800 	movpl.w	r8, #0
 8025d2c:	9308      	strmi	r3, [sp, #32]
 8025d2e:	2f00      	cmp	r7, #0
 8025d30:	db39      	blt.n	8025da6 <_dtoa_r+0x1ee>
 8025d32:	9b08      	ldr	r3, [sp, #32]
 8025d34:	970f      	str	r7, [sp, #60]	@ 0x3c
 8025d36:	443b      	add	r3, r7
 8025d38:	9308      	str	r3, [sp, #32]
 8025d3a:	2300      	movs	r3, #0
 8025d3c:	930a      	str	r3, [sp, #40]	@ 0x28
 8025d3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025d40:	2b09      	cmp	r3, #9
 8025d42:	d865      	bhi.n	8025e10 <_dtoa_r+0x258>
 8025d44:	2b05      	cmp	r3, #5
 8025d46:	bfc4      	itt	gt
 8025d48:	3b04      	subgt	r3, #4
 8025d4a:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8025d4c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025d4e:	f1a3 0302 	sub.w	r3, r3, #2
 8025d52:	bfcc      	ite	gt
 8025d54:	2400      	movgt	r4, #0
 8025d56:	2401      	movle	r4, #1
 8025d58:	2b03      	cmp	r3, #3
 8025d5a:	d864      	bhi.n	8025e26 <_dtoa_r+0x26e>
 8025d5c:	e8df f003 	tbb	[pc, r3]
 8025d60:	5635372a 	.word	0x5635372a
 8025d64:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8025d68:	441e      	add	r6, r3
 8025d6a:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8025d6e:	2b20      	cmp	r3, #32
 8025d70:	bfc1      	itttt	gt
 8025d72:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8025d76:	409f      	lslgt	r7, r3
 8025d78:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8025d7c:	fa24 f303 	lsrgt.w	r3, r4, r3
 8025d80:	bfd6      	itet	le
 8025d82:	f1c3 0320 	rsble	r3, r3, #32
 8025d86:	ea47 0003 	orrgt.w	r0, r7, r3
 8025d8a:	fa04 f003 	lslle.w	r0, r4, r3
 8025d8e:	f7e0 fbd1 	bl	8006534 <__aeabi_ui2d>
 8025d92:	2201      	movs	r2, #1
 8025d94:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8025d98:	3e01      	subs	r6, #1
 8025d9a:	9214      	str	r2, [sp, #80]	@ 0x50
 8025d9c:	e777      	b.n	8025c8e <_dtoa_r+0xd6>
 8025d9e:	2301      	movs	r3, #1
 8025da0:	e7b8      	b.n	8025d14 <_dtoa_r+0x15c>
 8025da2:	9012      	str	r0, [sp, #72]	@ 0x48
 8025da4:	e7b7      	b.n	8025d16 <_dtoa_r+0x15e>
 8025da6:	427b      	negs	r3, r7
 8025da8:	930a      	str	r3, [sp, #40]	@ 0x28
 8025daa:	2300      	movs	r3, #0
 8025dac:	eba8 0807 	sub.w	r8, r8, r7
 8025db0:	930f      	str	r3, [sp, #60]	@ 0x3c
 8025db2:	e7c4      	b.n	8025d3e <_dtoa_r+0x186>
 8025db4:	2300      	movs	r3, #0
 8025db6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8025db8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8025dba:	2b00      	cmp	r3, #0
 8025dbc:	dc36      	bgt.n	8025e2c <_dtoa_r+0x274>
 8025dbe:	2301      	movs	r3, #1
 8025dc0:	9300      	str	r3, [sp, #0]
 8025dc2:	9307      	str	r3, [sp, #28]
 8025dc4:	461a      	mov	r2, r3
 8025dc6:	920e      	str	r2, [sp, #56]	@ 0x38
 8025dc8:	e00b      	b.n	8025de2 <_dtoa_r+0x22a>
 8025dca:	2301      	movs	r3, #1
 8025dcc:	e7f3      	b.n	8025db6 <_dtoa_r+0x1fe>
 8025dce:	2300      	movs	r3, #0
 8025dd0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8025dd2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8025dd4:	18fb      	adds	r3, r7, r3
 8025dd6:	9300      	str	r3, [sp, #0]
 8025dd8:	3301      	adds	r3, #1
 8025dda:	2b01      	cmp	r3, #1
 8025ddc:	9307      	str	r3, [sp, #28]
 8025dde:	bfb8      	it	lt
 8025de0:	2301      	movlt	r3, #1
 8025de2:	2100      	movs	r1, #0
 8025de4:	2204      	movs	r2, #4
 8025de6:	f102 0014 	add.w	r0, r2, #20
 8025dea:	4298      	cmp	r0, r3
 8025dec:	d922      	bls.n	8025e34 <_dtoa_r+0x27c>
 8025dee:	f8cb 103c 	str.w	r1, [fp, #60]	@ 0x3c
 8025df2:	4658      	mov	r0, fp
 8025df4:	f000 fd09 	bl	802680a <_Balloc>
 8025df8:	4682      	mov	sl, r0
 8025dfa:	2800      	cmp	r0, #0
 8025dfc:	d13c      	bne.n	8025e78 <_dtoa_r+0x2c0>
 8025dfe:	4b1a      	ldr	r3, [pc, #104]	@ (8025e68 <_dtoa_r+0x2b0>)
 8025e00:	4602      	mov	r2, r0
 8025e02:	f240 11af 	movw	r1, #431	@ 0x1af
 8025e06:	4819      	ldr	r0, [pc, #100]	@ (8025e6c <_dtoa_r+0x2b4>)
 8025e08:	f001 f83a 	bl	8026e80 <__assert_func>
 8025e0c:	2301      	movs	r3, #1
 8025e0e:	e7df      	b.n	8025dd0 <_dtoa_r+0x218>
 8025e10:	2401      	movs	r4, #1
 8025e12:	2300      	movs	r3, #0
 8025e14:	9309      	str	r3, [sp, #36]	@ 0x24
 8025e16:	940b      	str	r4, [sp, #44]	@ 0x2c
 8025e18:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8025e1c:	9300      	str	r3, [sp, #0]
 8025e1e:	9307      	str	r3, [sp, #28]
 8025e20:	2200      	movs	r2, #0
 8025e22:	2312      	movs	r3, #18
 8025e24:	e7cf      	b.n	8025dc6 <_dtoa_r+0x20e>
 8025e26:	2301      	movs	r3, #1
 8025e28:	930b      	str	r3, [sp, #44]	@ 0x2c
 8025e2a:	e7f5      	b.n	8025e18 <_dtoa_r+0x260>
 8025e2c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8025e2e:	9300      	str	r3, [sp, #0]
 8025e30:	9307      	str	r3, [sp, #28]
 8025e32:	e7d6      	b.n	8025de2 <_dtoa_r+0x22a>
 8025e34:	3101      	adds	r1, #1
 8025e36:	0052      	lsls	r2, r2, #1
 8025e38:	e7d5      	b.n	8025de6 <_dtoa_r+0x22e>
 8025e3a:	bf00      	nop
 8025e3c:	f3af 8000 	nop.w
 8025e40:	636f4361 	.word	0x636f4361
 8025e44:	3fd287a7 	.word	0x3fd287a7
 8025e48:	8b60c8b3 	.word	0x8b60c8b3
 8025e4c:	3fc68a28 	.word	0x3fc68a28
 8025e50:	509f79fb 	.word	0x509f79fb
 8025e54:	3fd34413 	.word	0x3fd34413
 8025e58:	7ff00000 	.word	0x7ff00000
 8025e5c:	080af9c3 	.word	0x080af9c3
 8025e60:	3ff80000 	.word	0x3ff80000
 8025e64:	080afae8 	.word	0x080afae8
 8025e68:	080af9f1 	.word	0x080af9f1
 8025e6c:	080afa02 	.word	0x080afa02
 8025e70:	080af9ed 	.word	0x080af9ed
 8025e74:	080af9c2 	.word	0x080af9c2
 8025e78:	9b07      	ldr	r3, [sp, #28]
 8025e7a:	f8cb 0038 	str.w	r0, [fp, #56]	@ 0x38
 8025e7e:	2b0e      	cmp	r3, #14
 8025e80:	f200 80a4 	bhi.w	8025fcc <_dtoa_r+0x414>
 8025e84:	2c00      	cmp	r4, #0
 8025e86:	f000 80a1 	beq.w	8025fcc <_dtoa_r+0x414>
 8025e8a:	2f00      	cmp	r7, #0
 8025e8c:	dd33      	ble.n	8025ef6 <_dtoa_r+0x33e>
 8025e8e:	4bae      	ldr	r3, [pc, #696]	@ (8026148 <_dtoa_r+0x590>)
 8025e90:	f007 020f 	and.w	r2, r7, #15
 8025e94:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8025e98:	ed93 7b00 	vldr	d7, [r3]
 8025e9c:	05f8      	lsls	r0, r7, #23
 8025e9e:	ed8d 7b04 	vstr	d7, [sp, #16]
 8025ea2:	ea4f 1427 	mov.w	r4, r7, asr #4
 8025ea6:	d516      	bpl.n	8025ed6 <_dtoa_r+0x31e>
 8025ea8:	4ba8      	ldr	r3, [pc, #672]	@ (802614c <_dtoa_r+0x594>)
 8025eaa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8025eae:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8025eb2:	f7e0 fce3 	bl	800687c <__aeabi_ddiv>
 8025eb6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8025eba:	f004 040f 	and.w	r4, r4, #15
 8025ebe:	2603      	movs	r6, #3
 8025ec0:	4da2      	ldr	r5, [pc, #648]	@ (802614c <_dtoa_r+0x594>)
 8025ec2:	b954      	cbnz	r4, 8025eda <_dtoa_r+0x322>
 8025ec4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8025ec8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8025ecc:	f7e0 fcd6 	bl	800687c <__aeabi_ddiv>
 8025ed0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8025ed4:	e028      	b.n	8025f28 <_dtoa_r+0x370>
 8025ed6:	2602      	movs	r6, #2
 8025ed8:	e7f2      	b.n	8025ec0 <_dtoa_r+0x308>
 8025eda:	07e1      	lsls	r1, r4, #31
 8025edc:	d508      	bpl.n	8025ef0 <_dtoa_r+0x338>
 8025ede:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8025ee2:	e9d5 2300 	ldrd	r2, r3, [r5]
 8025ee6:	f7e0 fb9f 	bl	8006628 <__aeabi_dmul>
 8025eea:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8025eee:	3601      	adds	r6, #1
 8025ef0:	1064      	asrs	r4, r4, #1
 8025ef2:	3508      	adds	r5, #8
 8025ef4:	e7e5      	b.n	8025ec2 <_dtoa_r+0x30a>
 8025ef6:	f000 80d2 	beq.w	802609e <_dtoa_r+0x4e6>
 8025efa:	427c      	negs	r4, r7
 8025efc:	4b92      	ldr	r3, [pc, #584]	@ (8026148 <_dtoa_r+0x590>)
 8025efe:	4d93      	ldr	r5, [pc, #588]	@ (802614c <_dtoa_r+0x594>)
 8025f00:	f004 020f 	and.w	r2, r4, #15
 8025f04:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8025f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025f0c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8025f10:	f7e0 fb8a 	bl	8006628 <__aeabi_dmul>
 8025f14:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8025f18:	1124      	asrs	r4, r4, #4
 8025f1a:	2300      	movs	r3, #0
 8025f1c:	2602      	movs	r6, #2
 8025f1e:	2c00      	cmp	r4, #0
 8025f20:	f040 80b2 	bne.w	8026088 <_dtoa_r+0x4d0>
 8025f24:	2b00      	cmp	r3, #0
 8025f26:	d1d3      	bne.n	8025ed0 <_dtoa_r+0x318>
 8025f28:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8025f2a:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8025f2e:	2b00      	cmp	r3, #0
 8025f30:	f000 80b7 	beq.w	80260a2 <_dtoa_r+0x4ea>
 8025f34:	4b86      	ldr	r3, [pc, #536]	@ (8026150 <_dtoa_r+0x598>)
 8025f36:	2200      	movs	r2, #0
 8025f38:	4620      	mov	r0, r4
 8025f3a:	4629      	mov	r1, r5
 8025f3c:	f7e0 fde6 	bl	8006b0c <__aeabi_dcmplt>
 8025f40:	2800      	cmp	r0, #0
 8025f42:	f000 80ae 	beq.w	80260a2 <_dtoa_r+0x4ea>
 8025f46:	9b07      	ldr	r3, [sp, #28]
 8025f48:	2b00      	cmp	r3, #0
 8025f4a:	f000 80aa 	beq.w	80260a2 <_dtoa_r+0x4ea>
 8025f4e:	9b00      	ldr	r3, [sp, #0]
 8025f50:	2b00      	cmp	r3, #0
 8025f52:	dd37      	ble.n	8025fc4 <_dtoa_r+0x40c>
 8025f54:	1e7b      	subs	r3, r7, #1
 8025f56:	9304      	str	r3, [sp, #16]
 8025f58:	4620      	mov	r0, r4
 8025f5a:	4b7e      	ldr	r3, [pc, #504]	@ (8026154 <_dtoa_r+0x59c>)
 8025f5c:	2200      	movs	r2, #0
 8025f5e:	4629      	mov	r1, r5
 8025f60:	f7e0 fb62 	bl	8006628 <__aeabi_dmul>
 8025f64:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8025f68:	9c00      	ldr	r4, [sp, #0]
 8025f6a:	3601      	adds	r6, #1
 8025f6c:	4630      	mov	r0, r6
 8025f6e:	f7e0 faf1 	bl	8006554 <__aeabi_i2d>
 8025f72:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8025f76:	f7e0 fb57 	bl	8006628 <__aeabi_dmul>
 8025f7a:	4b77      	ldr	r3, [pc, #476]	@ (8026158 <_dtoa_r+0x5a0>)
 8025f7c:	2200      	movs	r2, #0
 8025f7e:	f7e0 f99d 	bl	80062bc <__adddf3>
 8025f82:	4605      	mov	r5, r0
 8025f84:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8025f88:	2c00      	cmp	r4, #0
 8025f8a:	f040 808d 	bne.w	80260a8 <_dtoa_r+0x4f0>
 8025f8e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8025f92:	4b72      	ldr	r3, [pc, #456]	@ (802615c <_dtoa_r+0x5a4>)
 8025f94:	2200      	movs	r2, #0
 8025f96:	f7e0 f98f 	bl	80062b8 <__aeabi_dsub>
 8025f9a:	4602      	mov	r2, r0
 8025f9c:	460b      	mov	r3, r1
 8025f9e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8025fa2:	462a      	mov	r2, r5
 8025fa4:	4633      	mov	r3, r6
 8025fa6:	f7e0 fdcf 	bl	8006b48 <__aeabi_dcmpgt>
 8025faa:	2800      	cmp	r0, #0
 8025fac:	f040 828c 	bne.w	80264c8 <_dtoa_r+0x910>
 8025fb0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8025fb4:	462a      	mov	r2, r5
 8025fb6:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8025fba:	f7e0 fda7 	bl	8006b0c <__aeabi_dcmplt>
 8025fbe:	2800      	cmp	r0, #0
 8025fc0:	f040 8129 	bne.w	8026216 <_dtoa_r+0x65e>
 8025fc4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8025fc8:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8025fcc:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8025fce:	2b00      	cmp	r3, #0
 8025fd0:	f2c0 815b 	blt.w	802628a <_dtoa_r+0x6d2>
 8025fd4:	2f0e      	cmp	r7, #14
 8025fd6:	f300 8158 	bgt.w	802628a <_dtoa_r+0x6d2>
 8025fda:	4b5b      	ldr	r3, [pc, #364]	@ (8026148 <_dtoa_r+0x590>)
 8025fdc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8025fe0:	ed93 7b00 	vldr	d7, [r3]
 8025fe4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8025fe6:	2b00      	cmp	r3, #0
 8025fe8:	ed8d 7b00 	vstr	d7, [sp]
 8025fec:	da03      	bge.n	8025ff6 <_dtoa_r+0x43e>
 8025fee:	9b07      	ldr	r3, [sp, #28]
 8025ff0:	2b00      	cmp	r3, #0
 8025ff2:	f340 8102 	ble.w	80261fa <_dtoa_r+0x642>
 8025ff6:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8025ffa:	4656      	mov	r6, sl
 8025ffc:	e9dd 2300 	ldrd	r2, r3, [sp]
 8026000:	4620      	mov	r0, r4
 8026002:	4629      	mov	r1, r5
 8026004:	f7e0 fc3a 	bl	800687c <__aeabi_ddiv>
 8026008:	f7e0 fdbe 	bl	8006b88 <__aeabi_d2iz>
 802600c:	4680      	mov	r8, r0
 802600e:	f7e0 faa1 	bl	8006554 <__aeabi_i2d>
 8026012:	e9dd 2300 	ldrd	r2, r3, [sp]
 8026016:	f7e0 fb07 	bl	8006628 <__aeabi_dmul>
 802601a:	4602      	mov	r2, r0
 802601c:	460b      	mov	r3, r1
 802601e:	4620      	mov	r0, r4
 8026020:	4629      	mov	r1, r5
 8026022:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8026026:	f7e0 f947 	bl	80062b8 <__aeabi_dsub>
 802602a:	f806 4b01 	strb.w	r4, [r6], #1
 802602e:	9d07      	ldr	r5, [sp, #28]
 8026030:	eba6 040a 	sub.w	r4, r6, sl
 8026034:	42a5      	cmp	r5, r4
 8026036:	4602      	mov	r2, r0
 8026038:	460b      	mov	r3, r1
 802603a:	f040 8118 	bne.w	802626e <_dtoa_r+0x6b6>
 802603e:	f7e0 f93d 	bl	80062bc <__adddf3>
 8026042:	e9dd 2300 	ldrd	r2, r3, [sp]
 8026046:	4604      	mov	r4, r0
 8026048:	460d      	mov	r5, r1
 802604a:	f7e0 fd7d 	bl	8006b48 <__aeabi_dcmpgt>
 802604e:	2800      	cmp	r0, #0
 8026050:	f040 80fa 	bne.w	8026248 <_dtoa_r+0x690>
 8026054:	e9dd 2300 	ldrd	r2, r3, [sp]
 8026058:	4620      	mov	r0, r4
 802605a:	4629      	mov	r1, r5
 802605c:	f7e0 fd4c 	bl	8006af8 <__aeabi_dcmpeq>
 8026060:	b118      	cbz	r0, 802606a <_dtoa_r+0x4b2>
 8026062:	f018 0f01 	tst.w	r8, #1
 8026066:	f040 80ef 	bne.w	8026248 <_dtoa_r+0x690>
 802606a:	4649      	mov	r1, r9
 802606c:	4658      	mov	r0, fp
 802606e:	f000 fbf1 	bl	8026854 <_Bfree>
 8026072:	2300      	movs	r3, #0
 8026074:	7033      	strb	r3, [r6, #0]
 8026076:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8026078:	3701      	adds	r7, #1
 802607a:	601f      	str	r7, [r3, #0]
 802607c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 802607e:	2b00      	cmp	r3, #0
 8026080:	f43f add1 	beq.w	8025c26 <_dtoa_r+0x6e>
 8026084:	601e      	str	r6, [r3, #0]
 8026086:	e5ce      	b.n	8025c26 <_dtoa_r+0x6e>
 8026088:	07e2      	lsls	r2, r4, #31
 802608a:	d505      	bpl.n	8026098 <_dtoa_r+0x4e0>
 802608c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8026090:	f7e0 faca 	bl	8006628 <__aeabi_dmul>
 8026094:	3601      	adds	r6, #1
 8026096:	2301      	movs	r3, #1
 8026098:	1064      	asrs	r4, r4, #1
 802609a:	3508      	adds	r5, #8
 802609c:	e73f      	b.n	8025f1e <_dtoa_r+0x366>
 802609e:	2602      	movs	r6, #2
 80260a0:	e742      	b.n	8025f28 <_dtoa_r+0x370>
 80260a2:	9c07      	ldr	r4, [sp, #28]
 80260a4:	9704      	str	r7, [sp, #16]
 80260a6:	e761      	b.n	8025f6c <_dtoa_r+0x3b4>
 80260a8:	4b27      	ldr	r3, [pc, #156]	@ (8026148 <_dtoa_r+0x590>)
 80260aa:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80260ac:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80260b0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80260b4:	4454      	add	r4, sl
 80260b6:	2900      	cmp	r1, #0
 80260b8:	d054      	beq.n	8026164 <_dtoa_r+0x5ac>
 80260ba:	4929      	ldr	r1, [pc, #164]	@ (8026160 <_dtoa_r+0x5a8>)
 80260bc:	2000      	movs	r0, #0
 80260be:	f7e0 fbdd 	bl	800687c <__aeabi_ddiv>
 80260c2:	4633      	mov	r3, r6
 80260c4:	462a      	mov	r2, r5
 80260c6:	f7e0 f8f7 	bl	80062b8 <__aeabi_dsub>
 80260ca:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80260ce:	4656      	mov	r6, sl
 80260d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80260d4:	f7e0 fd58 	bl	8006b88 <__aeabi_d2iz>
 80260d8:	4605      	mov	r5, r0
 80260da:	f7e0 fa3b 	bl	8006554 <__aeabi_i2d>
 80260de:	4602      	mov	r2, r0
 80260e0:	460b      	mov	r3, r1
 80260e2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80260e6:	f7e0 f8e7 	bl	80062b8 <__aeabi_dsub>
 80260ea:	3530      	adds	r5, #48	@ 0x30
 80260ec:	4602      	mov	r2, r0
 80260ee:	460b      	mov	r3, r1
 80260f0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80260f4:	f806 5b01 	strb.w	r5, [r6], #1
 80260f8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80260fc:	f7e0 fd06 	bl	8006b0c <__aeabi_dcmplt>
 8026100:	2800      	cmp	r0, #0
 8026102:	d172      	bne.n	80261ea <_dtoa_r+0x632>
 8026104:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8026108:	4911      	ldr	r1, [pc, #68]	@ (8026150 <_dtoa_r+0x598>)
 802610a:	2000      	movs	r0, #0
 802610c:	f7e0 f8d4 	bl	80062b8 <__aeabi_dsub>
 8026110:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8026114:	f7e0 fcfa 	bl	8006b0c <__aeabi_dcmplt>
 8026118:	2800      	cmp	r0, #0
 802611a:	f040 8096 	bne.w	802624a <_dtoa_r+0x692>
 802611e:	42a6      	cmp	r6, r4
 8026120:	f43f af50 	beq.w	8025fc4 <_dtoa_r+0x40c>
 8026124:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8026128:	4b0a      	ldr	r3, [pc, #40]	@ (8026154 <_dtoa_r+0x59c>)
 802612a:	2200      	movs	r2, #0
 802612c:	f7e0 fa7c 	bl	8006628 <__aeabi_dmul>
 8026130:	4b08      	ldr	r3, [pc, #32]	@ (8026154 <_dtoa_r+0x59c>)
 8026132:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8026136:	2200      	movs	r2, #0
 8026138:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802613c:	f7e0 fa74 	bl	8006628 <__aeabi_dmul>
 8026140:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8026144:	e7c4      	b.n	80260d0 <_dtoa_r+0x518>
 8026146:	bf00      	nop
 8026148:	080afae8 	.word	0x080afae8
 802614c:	080afac0 	.word	0x080afac0
 8026150:	3ff00000 	.word	0x3ff00000
 8026154:	40240000 	.word	0x40240000
 8026158:	401c0000 	.word	0x401c0000
 802615c:	40140000 	.word	0x40140000
 8026160:	3fe00000 	.word	0x3fe00000
 8026164:	4631      	mov	r1, r6
 8026166:	4628      	mov	r0, r5
 8026168:	f7e0 fa5e 	bl	8006628 <__aeabi_dmul>
 802616c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8026170:	9415      	str	r4, [sp, #84]	@ 0x54
 8026172:	4656      	mov	r6, sl
 8026174:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8026178:	f7e0 fd06 	bl	8006b88 <__aeabi_d2iz>
 802617c:	4605      	mov	r5, r0
 802617e:	f7e0 f9e9 	bl	8006554 <__aeabi_i2d>
 8026182:	4602      	mov	r2, r0
 8026184:	460b      	mov	r3, r1
 8026186:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802618a:	f7e0 f895 	bl	80062b8 <__aeabi_dsub>
 802618e:	3530      	adds	r5, #48	@ 0x30
 8026190:	f806 5b01 	strb.w	r5, [r6], #1
 8026194:	4602      	mov	r2, r0
 8026196:	460b      	mov	r3, r1
 8026198:	42a6      	cmp	r6, r4
 802619a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 802619e:	f04f 0200 	mov.w	r2, #0
 80261a2:	d124      	bne.n	80261ee <_dtoa_r+0x636>
 80261a4:	4bac      	ldr	r3, [pc, #688]	@ (8026458 <_dtoa_r+0x8a0>)
 80261a6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80261aa:	f7e0 f887 	bl	80062bc <__adddf3>
 80261ae:	4602      	mov	r2, r0
 80261b0:	460b      	mov	r3, r1
 80261b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80261b6:	f7e0 fcc7 	bl	8006b48 <__aeabi_dcmpgt>
 80261ba:	2800      	cmp	r0, #0
 80261bc:	d145      	bne.n	802624a <_dtoa_r+0x692>
 80261be:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80261c2:	49a5      	ldr	r1, [pc, #660]	@ (8026458 <_dtoa_r+0x8a0>)
 80261c4:	2000      	movs	r0, #0
 80261c6:	f7e0 f877 	bl	80062b8 <__aeabi_dsub>
 80261ca:	4602      	mov	r2, r0
 80261cc:	460b      	mov	r3, r1
 80261ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80261d2:	f7e0 fc9b 	bl	8006b0c <__aeabi_dcmplt>
 80261d6:	2800      	cmp	r0, #0
 80261d8:	f43f aef4 	beq.w	8025fc4 <_dtoa_r+0x40c>
 80261dc:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80261de:	1e73      	subs	r3, r6, #1
 80261e0:	9315      	str	r3, [sp, #84]	@ 0x54
 80261e2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80261e6:	2b30      	cmp	r3, #48	@ 0x30
 80261e8:	d0f8      	beq.n	80261dc <_dtoa_r+0x624>
 80261ea:	9f04      	ldr	r7, [sp, #16]
 80261ec:	e73d      	b.n	802606a <_dtoa_r+0x4b2>
 80261ee:	4b9b      	ldr	r3, [pc, #620]	@ (802645c <_dtoa_r+0x8a4>)
 80261f0:	f7e0 fa1a 	bl	8006628 <__aeabi_dmul>
 80261f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80261f8:	e7bc      	b.n	8026174 <_dtoa_r+0x5bc>
 80261fa:	d10c      	bne.n	8026216 <_dtoa_r+0x65e>
 80261fc:	4b98      	ldr	r3, [pc, #608]	@ (8026460 <_dtoa_r+0x8a8>)
 80261fe:	2200      	movs	r2, #0
 8026200:	e9dd 0100 	ldrd	r0, r1, [sp]
 8026204:	f7e0 fa10 	bl	8006628 <__aeabi_dmul>
 8026208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 802620c:	f7e0 fc92 	bl	8006b34 <__aeabi_dcmpge>
 8026210:	2800      	cmp	r0, #0
 8026212:	f000 8157 	beq.w	80264c4 <_dtoa_r+0x90c>
 8026216:	2400      	movs	r4, #0
 8026218:	4625      	mov	r5, r4
 802621a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802621c:	43db      	mvns	r3, r3
 802621e:	9304      	str	r3, [sp, #16]
 8026220:	4656      	mov	r6, sl
 8026222:	2700      	movs	r7, #0
 8026224:	4621      	mov	r1, r4
 8026226:	4658      	mov	r0, fp
 8026228:	f000 fb14 	bl	8026854 <_Bfree>
 802622c:	2d00      	cmp	r5, #0
 802622e:	d0dc      	beq.n	80261ea <_dtoa_r+0x632>
 8026230:	b12f      	cbz	r7, 802623e <_dtoa_r+0x686>
 8026232:	42af      	cmp	r7, r5
 8026234:	d003      	beq.n	802623e <_dtoa_r+0x686>
 8026236:	4639      	mov	r1, r7
 8026238:	4658      	mov	r0, fp
 802623a:	f000 fb0b 	bl	8026854 <_Bfree>
 802623e:	4629      	mov	r1, r5
 8026240:	4658      	mov	r0, fp
 8026242:	f000 fb07 	bl	8026854 <_Bfree>
 8026246:	e7d0      	b.n	80261ea <_dtoa_r+0x632>
 8026248:	9704      	str	r7, [sp, #16]
 802624a:	4633      	mov	r3, r6
 802624c:	461e      	mov	r6, r3
 802624e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8026252:	2a39      	cmp	r2, #57	@ 0x39
 8026254:	d107      	bne.n	8026266 <_dtoa_r+0x6ae>
 8026256:	459a      	cmp	sl, r3
 8026258:	d1f8      	bne.n	802624c <_dtoa_r+0x694>
 802625a:	9a04      	ldr	r2, [sp, #16]
 802625c:	3201      	adds	r2, #1
 802625e:	9204      	str	r2, [sp, #16]
 8026260:	2230      	movs	r2, #48	@ 0x30
 8026262:	f88a 2000 	strb.w	r2, [sl]
 8026266:	781a      	ldrb	r2, [r3, #0]
 8026268:	3201      	adds	r2, #1
 802626a:	701a      	strb	r2, [r3, #0]
 802626c:	e7bd      	b.n	80261ea <_dtoa_r+0x632>
 802626e:	4b7b      	ldr	r3, [pc, #492]	@ (802645c <_dtoa_r+0x8a4>)
 8026270:	2200      	movs	r2, #0
 8026272:	f7e0 f9d9 	bl	8006628 <__aeabi_dmul>
 8026276:	2200      	movs	r2, #0
 8026278:	2300      	movs	r3, #0
 802627a:	4604      	mov	r4, r0
 802627c:	460d      	mov	r5, r1
 802627e:	f7e0 fc3b 	bl	8006af8 <__aeabi_dcmpeq>
 8026282:	2800      	cmp	r0, #0
 8026284:	f43f aeba 	beq.w	8025ffc <_dtoa_r+0x444>
 8026288:	e6ef      	b.n	802606a <_dtoa_r+0x4b2>
 802628a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 802628c:	2a00      	cmp	r2, #0
 802628e:	f000 80db 	beq.w	8026448 <_dtoa_r+0x890>
 8026292:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8026294:	2a01      	cmp	r2, #1
 8026296:	f300 80bf 	bgt.w	8026418 <_dtoa_r+0x860>
 802629a:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 802629c:	2a00      	cmp	r2, #0
 802629e:	f000 80b7 	beq.w	8026410 <_dtoa_r+0x858>
 80262a2:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80262a6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80262a8:	4646      	mov	r6, r8
 80262aa:	9a08      	ldr	r2, [sp, #32]
 80262ac:	2101      	movs	r1, #1
 80262ae:	441a      	add	r2, r3
 80262b0:	4658      	mov	r0, fp
 80262b2:	4498      	add	r8, r3
 80262b4:	9208      	str	r2, [sp, #32]
 80262b6:	f000 fb69 	bl	802698c <__i2b>
 80262ba:	4605      	mov	r5, r0
 80262bc:	b15e      	cbz	r6, 80262d6 <_dtoa_r+0x71e>
 80262be:	9b08      	ldr	r3, [sp, #32]
 80262c0:	2b00      	cmp	r3, #0
 80262c2:	dd08      	ble.n	80262d6 <_dtoa_r+0x71e>
 80262c4:	42b3      	cmp	r3, r6
 80262c6:	9a08      	ldr	r2, [sp, #32]
 80262c8:	bfa8      	it	ge
 80262ca:	4633      	movge	r3, r6
 80262cc:	eba8 0803 	sub.w	r8, r8, r3
 80262d0:	1af6      	subs	r6, r6, r3
 80262d2:	1ad3      	subs	r3, r2, r3
 80262d4:	9308      	str	r3, [sp, #32]
 80262d6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80262d8:	b1f3      	cbz	r3, 8026318 <_dtoa_r+0x760>
 80262da:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80262dc:	2b00      	cmp	r3, #0
 80262de:	f000 80b7 	beq.w	8026450 <_dtoa_r+0x898>
 80262e2:	b18c      	cbz	r4, 8026308 <_dtoa_r+0x750>
 80262e4:	4629      	mov	r1, r5
 80262e6:	4622      	mov	r2, r4
 80262e8:	4658      	mov	r0, fp
 80262ea:	f000 fc0f 	bl	8026b0c <__pow5mult>
 80262ee:	464a      	mov	r2, r9
 80262f0:	4601      	mov	r1, r0
 80262f2:	4605      	mov	r5, r0
 80262f4:	4658      	mov	r0, fp
 80262f6:	f000 fb5f 	bl	80269b8 <__multiply>
 80262fa:	4649      	mov	r1, r9
 80262fc:	9004      	str	r0, [sp, #16]
 80262fe:	4658      	mov	r0, fp
 8026300:	f000 faa8 	bl	8026854 <_Bfree>
 8026304:	9b04      	ldr	r3, [sp, #16]
 8026306:	4699      	mov	r9, r3
 8026308:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802630a:	1b1a      	subs	r2, r3, r4
 802630c:	d004      	beq.n	8026318 <_dtoa_r+0x760>
 802630e:	4649      	mov	r1, r9
 8026310:	4658      	mov	r0, fp
 8026312:	f000 fbfb 	bl	8026b0c <__pow5mult>
 8026316:	4681      	mov	r9, r0
 8026318:	2101      	movs	r1, #1
 802631a:	4658      	mov	r0, fp
 802631c:	f000 fb36 	bl	802698c <__i2b>
 8026320:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8026322:	4604      	mov	r4, r0
 8026324:	2b00      	cmp	r3, #0
 8026326:	f000 81cc 	beq.w	80266c2 <_dtoa_r+0xb0a>
 802632a:	461a      	mov	r2, r3
 802632c:	4601      	mov	r1, r0
 802632e:	4658      	mov	r0, fp
 8026330:	f000 fbec 	bl	8026b0c <__pow5mult>
 8026334:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8026336:	2b01      	cmp	r3, #1
 8026338:	4604      	mov	r4, r0
 802633a:	f300 8095 	bgt.w	8026468 <_dtoa_r+0x8b0>
 802633e:	9b02      	ldr	r3, [sp, #8]
 8026340:	2b00      	cmp	r3, #0
 8026342:	f040 8087 	bne.w	8026454 <_dtoa_r+0x89c>
 8026346:	9b03      	ldr	r3, [sp, #12]
 8026348:	f3c3 0313 	ubfx	r3, r3, #0, #20
 802634c:	2b00      	cmp	r3, #0
 802634e:	f040 8089 	bne.w	8026464 <_dtoa_r+0x8ac>
 8026352:	9b03      	ldr	r3, [sp, #12]
 8026354:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8026358:	0d1b      	lsrs	r3, r3, #20
 802635a:	051b      	lsls	r3, r3, #20
 802635c:	b12b      	cbz	r3, 802636a <_dtoa_r+0x7b2>
 802635e:	9b08      	ldr	r3, [sp, #32]
 8026360:	3301      	adds	r3, #1
 8026362:	9308      	str	r3, [sp, #32]
 8026364:	f108 0801 	add.w	r8, r8, #1
 8026368:	2301      	movs	r3, #1
 802636a:	930a      	str	r3, [sp, #40]	@ 0x28
 802636c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802636e:	2b00      	cmp	r3, #0
 8026370:	f000 81ad 	beq.w	80266ce <_dtoa_r+0xb16>
 8026374:	6923      	ldr	r3, [r4, #16]
 8026376:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 802637a:	6918      	ldr	r0, [r3, #16]
 802637c:	f000 faba 	bl	80268f4 <__hi0bits>
 8026380:	f1c0 0020 	rsb	r0, r0, #32
 8026384:	9b08      	ldr	r3, [sp, #32]
 8026386:	4418      	add	r0, r3
 8026388:	f010 001f 	ands.w	r0, r0, #31
 802638c:	d077      	beq.n	802647e <_dtoa_r+0x8c6>
 802638e:	f1c0 0320 	rsb	r3, r0, #32
 8026392:	2b04      	cmp	r3, #4
 8026394:	dd6b      	ble.n	802646e <_dtoa_r+0x8b6>
 8026396:	9b08      	ldr	r3, [sp, #32]
 8026398:	f1c0 001c 	rsb	r0, r0, #28
 802639c:	4403      	add	r3, r0
 802639e:	4480      	add	r8, r0
 80263a0:	4406      	add	r6, r0
 80263a2:	9308      	str	r3, [sp, #32]
 80263a4:	f1b8 0f00 	cmp.w	r8, #0
 80263a8:	dd05      	ble.n	80263b6 <_dtoa_r+0x7fe>
 80263aa:	4649      	mov	r1, r9
 80263ac:	4642      	mov	r2, r8
 80263ae:	4658      	mov	r0, fp
 80263b0:	f000 fbec 	bl	8026b8c <__lshift>
 80263b4:	4681      	mov	r9, r0
 80263b6:	9b08      	ldr	r3, [sp, #32]
 80263b8:	2b00      	cmp	r3, #0
 80263ba:	dd05      	ble.n	80263c8 <_dtoa_r+0x810>
 80263bc:	4621      	mov	r1, r4
 80263be:	461a      	mov	r2, r3
 80263c0:	4658      	mov	r0, fp
 80263c2:	f000 fbe3 	bl	8026b8c <__lshift>
 80263c6:	4604      	mov	r4, r0
 80263c8:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80263ca:	2b00      	cmp	r3, #0
 80263cc:	d059      	beq.n	8026482 <_dtoa_r+0x8ca>
 80263ce:	4621      	mov	r1, r4
 80263d0:	4648      	mov	r0, r9
 80263d2:	f000 fc47 	bl	8026c64 <__mcmp>
 80263d6:	2800      	cmp	r0, #0
 80263d8:	da53      	bge.n	8026482 <_dtoa_r+0x8ca>
 80263da:	1e7b      	subs	r3, r7, #1
 80263dc:	9304      	str	r3, [sp, #16]
 80263de:	4649      	mov	r1, r9
 80263e0:	2300      	movs	r3, #0
 80263e2:	220a      	movs	r2, #10
 80263e4:	4658      	mov	r0, fp
 80263e6:	f000 fa3f 	bl	8026868 <__multadd>
 80263ea:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80263ec:	4681      	mov	r9, r0
 80263ee:	2b00      	cmp	r3, #0
 80263f0:	f000 816f 	beq.w	80266d2 <_dtoa_r+0xb1a>
 80263f4:	2300      	movs	r3, #0
 80263f6:	4629      	mov	r1, r5
 80263f8:	220a      	movs	r2, #10
 80263fa:	4658      	mov	r0, fp
 80263fc:	f000 fa34 	bl	8026868 <__multadd>
 8026400:	9b00      	ldr	r3, [sp, #0]
 8026402:	2b00      	cmp	r3, #0
 8026404:	4605      	mov	r5, r0
 8026406:	dc67      	bgt.n	80264d8 <_dtoa_r+0x920>
 8026408:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802640a:	2b02      	cmp	r3, #2
 802640c:	dc41      	bgt.n	8026492 <_dtoa_r+0x8da>
 802640e:	e063      	b.n	80264d8 <_dtoa_r+0x920>
 8026410:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8026412:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8026416:	e746      	b.n	80262a6 <_dtoa_r+0x6ee>
 8026418:	9b07      	ldr	r3, [sp, #28]
 802641a:	1e5c      	subs	r4, r3, #1
 802641c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802641e:	42a3      	cmp	r3, r4
 8026420:	bfbf      	itttt	lt
 8026422:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8026424:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8026426:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8026428:	1ae3      	sublt	r3, r4, r3
 802642a:	bfb4      	ite	lt
 802642c:	18d2      	addlt	r2, r2, r3
 802642e:	1b1c      	subge	r4, r3, r4
 8026430:	9b07      	ldr	r3, [sp, #28]
 8026432:	bfbc      	itt	lt
 8026434:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8026436:	2400      	movlt	r4, #0
 8026438:	2b00      	cmp	r3, #0
 802643a:	bfb5      	itete	lt
 802643c:	eba8 0603 	sublt.w	r6, r8, r3
 8026440:	9b07      	ldrge	r3, [sp, #28]
 8026442:	2300      	movlt	r3, #0
 8026444:	4646      	movge	r6, r8
 8026446:	e730      	b.n	80262aa <_dtoa_r+0x6f2>
 8026448:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 802644a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 802644c:	4646      	mov	r6, r8
 802644e:	e735      	b.n	80262bc <_dtoa_r+0x704>
 8026450:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8026452:	e75c      	b.n	802630e <_dtoa_r+0x756>
 8026454:	2300      	movs	r3, #0
 8026456:	e788      	b.n	802636a <_dtoa_r+0x7b2>
 8026458:	3fe00000 	.word	0x3fe00000
 802645c:	40240000 	.word	0x40240000
 8026460:	40140000 	.word	0x40140000
 8026464:	9b02      	ldr	r3, [sp, #8]
 8026466:	e780      	b.n	802636a <_dtoa_r+0x7b2>
 8026468:	2300      	movs	r3, #0
 802646a:	930a      	str	r3, [sp, #40]	@ 0x28
 802646c:	e782      	b.n	8026374 <_dtoa_r+0x7bc>
 802646e:	d099      	beq.n	80263a4 <_dtoa_r+0x7ec>
 8026470:	9a08      	ldr	r2, [sp, #32]
 8026472:	331c      	adds	r3, #28
 8026474:	441a      	add	r2, r3
 8026476:	4498      	add	r8, r3
 8026478:	441e      	add	r6, r3
 802647a:	9208      	str	r2, [sp, #32]
 802647c:	e792      	b.n	80263a4 <_dtoa_r+0x7ec>
 802647e:	4603      	mov	r3, r0
 8026480:	e7f6      	b.n	8026470 <_dtoa_r+0x8b8>
 8026482:	9b07      	ldr	r3, [sp, #28]
 8026484:	9704      	str	r7, [sp, #16]
 8026486:	2b00      	cmp	r3, #0
 8026488:	dc20      	bgt.n	80264cc <_dtoa_r+0x914>
 802648a:	9300      	str	r3, [sp, #0]
 802648c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802648e:	2b02      	cmp	r3, #2
 8026490:	dd1e      	ble.n	80264d0 <_dtoa_r+0x918>
 8026492:	9b00      	ldr	r3, [sp, #0]
 8026494:	2b00      	cmp	r3, #0
 8026496:	f47f aec0 	bne.w	802621a <_dtoa_r+0x662>
 802649a:	4621      	mov	r1, r4
 802649c:	2205      	movs	r2, #5
 802649e:	4658      	mov	r0, fp
 80264a0:	f000 f9e2 	bl	8026868 <__multadd>
 80264a4:	4601      	mov	r1, r0
 80264a6:	4604      	mov	r4, r0
 80264a8:	4648      	mov	r0, r9
 80264aa:	f000 fbdb 	bl	8026c64 <__mcmp>
 80264ae:	2800      	cmp	r0, #0
 80264b0:	f77f aeb3 	ble.w	802621a <_dtoa_r+0x662>
 80264b4:	4656      	mov	r6, sl
 80264b6:	2331      	movs	r3, #49	@ 0x31
 80264b8:	f806 3b01 	strb.w	r3, [r6], #1
 80264bc:	9b04      	ldr	r3, [sp, #16]
 80264be:	3301      	adds	r3, #1
 80264c0:	9304      	str	r3, [sp, #16]
 80264c2:	e6ae      	b.n	8026222 <_dtoa_r+0x66a>
 80264c4:	9c07      	ldr	r4, [sp, #28]
 80264c6:	9704      	str	r7, [sp, #16]
 80264c8:	4625      	mov	r5, r4
 80264ca:	e7f3      	b.n	80264b4 <_dtoa_r+0x8fc>
 80264cc:	9b07      	ldr	r3, [sp, #28]
 80264ce:	9300      	str	r3, [sp, #0]
 80264d0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80264d2:	2b00      	cmp	r3, #0
 80264d4:	f000 8101 	beq.w	80266da <_dtoa_r+0xb22>
 80264d8:	2e00      	cmp	r6, #0
 80264da:	dd05      	ble.n	80264e8 <_dtoa_r+0x930>
 80264dc:	4629      	mov	r1, r5
 80264de:	4632      	mov	r2, r6
 80264e0:	4658      	mov	r0, fp
 80264e2:	f000 fb53 	bl	8026b8c <__lshift>
 80264e6:	4605      	mov	r5, r0
 80264e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80264ea:	2b00      	cmp	r3, #0
 80264ec:	d059      	beq.n	80265a2 <_dtoa_r+0x9ea>
 80264ee:	6869      	ldr	r1, [r5, #4]
 80264f0:	4658      	mov	r0, fp
 80264f2:	f000 f98a 	bl	802680a <_Balloc>
 80264f6:	4606      	mov	r6, r0
 80264f8:	b920      	cbnz	r0, 8026504 <_dtoa_r+0x94c>
 80264fa:	4b83      	ldr	r3, [pc, #524]	@ (8026708 <_dtoa_r+0xb50>)
 80264fc:	4602      	mov	r2, r0
 80264fe:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8026502:	e480      	b.n	8025e06 <_dtoa_r+0x24e>
 8026504:	692a      	ldr	r2, [r5, #16]
 8026506:	3202      	adds	r2, #2
 8026508:	0092      	lsls	r2, r2, #2
 802650a:	f105 010c 	add.w	r1, r5, #12
 802650e:	300c      	adds	r0, #12
 8026510:	f7fd fc84 	bl	8023e1c <memcpy>
 8026514:	2201      	movs	r2, #1
 8026516:	4631      	mov	r1, r6
 8026518:	4658      	mov	r0, fp
 802651a:	f000 fb37 	bl	8026b8c <__lshift>
 802651e:	f10a 0301 	add.w	r3, sl, #1
 8026522:	9307      	str	r3, [sp, #28]
 8026524:	9b00      	ldr	r3, [sp, #0]
 8026526:	4453      	add	r3, sl
 8026528:	930b      	str	r3, [sp, #44]	@ 0x2c
 802652a:	9b02      	ldr	r3, [sp, #8]
 802652c:	f003 0301 	and.w	r3, r3, #1
 8026530:	462f      	mov	r7, r5
 8026532:	930a      	str	r3, [sp, #40]	@ 0x28
 8026534:	4605      	mov	r5, r0
 8026536:	9b07      	ldr	r3, [sp, #28]
 8026538:	4621      	mov	r1, r4
 802653a:	3b01      	subs	r3, #1
 802653c:	4648      	mov	r0, r9
 802653e:	9300      	str	r3, [sp, #0]
 8026540:	f7ff fab0 	bl	8025aa4 <quorem>
 8026544:	4639      	mov	r1, r7
 8026546:	9002      	str	r0, [sp, #8]
 8026548:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 802654c:	4648      	mov	r0, r9
 802654e:	f000 fb89 	bl	8026c64 <__mcmp>
 8026552:	462a      	mov	r2, r5
 8026554:	9008      	str	r0, [sp, #32]
 8026556:	4621      	mov	r1, r4
 8026558:	4658      	mov	r0, fp
 802655a:	f000 fb9f 	bl	8026c9c <__mdiff>
 802655e:	68c2      	ldr	r2, [r0, #12]
 8026560:	4606      	mov	r6, r0
 8026562:	bb02      	cbnz	r2, 80265a6 <_dtoa_r+0x9ee>
 8026564:	4601      	mov	r1, r0
 8026566:	4648      	mov	r0, r9
 8026568:	f000 fb7c 	bl	8026c64 <__mcmp>
 802656c:	4602      	mov	r2, r0
 802656e:	4631      	mov	r1, r6
 8026570:	4658      	mov	r0, fp
 8026572:	920e      	str	r2, [sp, #56]	@ 0x38
 8026574:	f000 f96e 	bl	8026854 <_Bfree>
 8026578:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802657a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802657c:	9e07      	ldr	r6, [sp, #28]
 802657e:	ea43 0102 	orr.w	r1, r3, r2
 8026582:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8026584:	4319      	orrs	r1, r3
 8026586:	d110      	bne.n	80265aa <_dtoa_r+0x9f2>
 8026588:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 802658c:	d029      	beq.n	80265e2 <_dtoa_r+0xa2a>
 802658e:	9b08      	ldr	r3, [sp, #32]
 8026590:	2b00      	cmp	r3, #0
 8026592:	dd02      	ble.n	802659a <_dtoa_r+0x9e2>
 8026594:	9b02      	ldr	r3, [sp, #8]
 8026596:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 802659a:	9b00      	ldr	r3, [sp, #0]
 802659c:	f883 8000 	strb.w	r8, [r3]
 80265a0:	e640      	b.n	8026224 <_dtoa_r+0x66c>
 80265a2:	4628      	mov	r0, r5
 80265a4:	e7bb      	b.n	802651e <_dtoa_r+0x966>
 80265a6:	2201      	movs	r2, #1
 80265a8:	e7e1      	b.n	802656e <_dtoa_r+0x9b6>
 80265aa:	9b08      	ldr	r3, [sp, #32]
 80265ac:	2b00      	cmp	r3, #0
 80265ae:	db04      	blt.n	80265ba <_dtoa_r+0xa02>
 80265b0:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80265b2:	430b      	orrs	r3, r1
 80265b4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80265b6:	430b      	orrs	r3, r1
 80265b8:	d120      	bne.n	80265fc <_dtoa_r+0xa44>
 80265ba:	2a00      	cmp	r2, #0
 80265bc:	dded      	ble.n	802659a <_dtoa_r+0x9e2>
 80265be:	4649      	mov	r1, r9
 80265c0:	2201      	movs	r2, #1
 80265c2:	4658      	mov	r0, fp
 80265c4:	f000 fae2 	bl	8026b8c <__lshift>
 80265c8:	4621      	mov	r1, r4
 80265ca:	4681      	mov	r9, r0
 80265cc:	f000 fb4a 	bl	8026c64 <__mcmp>
 80265d0:	2800      	cmp	r0, #0
 80265d2:	dc03      	bgt.n	80265dc <_dtoa_r+0xa24>
 80265d4:	d1e1      	bne.n	802659a <_dtoa_r+0x9e2>
 80265d6:	f018 0f01 	tst.w	r8, #1
 80265da:	d0de      	beq.n	802659a <_dtoa_r+0x9e2>
 80265dc:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80265e0:	d1d8      	bne.n	8026594 <_dtoa_r+0x9dc>
 80265e2:	9a00      	ldr	r2, [sp, #0]
 80265e4:	2339      	movs	r3, #57	@ 0x39
 80265e6:	7013      	strb	r3, [r2, #0]
 80265e8:	4633      	mov	r3, r6
 80265ea:	461e      	mov	r6, r3
 80265ec:	3b01      	subs	r3, #1
 80265ee:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80265f2:	2a39      	cmp	r2, #57	@ 0x39
 80265f4:	d052      	beq.n	802669c <_dtoa_r+0xae4>
 80265f6:	3201      	adds	r2, #1
 80265f8:	701a      	strb	r2, [r3, #0]
 80265fa:	e613      	b.n	8026224 <_dtoa_r+0x66c>
 80265fc:	2a00      	cmp	r2, #0
 80265fe:	dd07      	ble.n	8026610 <_dtoa_r+0xa58>
 8026600:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8026604:	d0ed      	beq.n	80265e2 <_dtoa_r+0xa2a>
 8026606:	9a00      	ldr	r2, [sp, #0]
 8026608:	f108 0301 	add.w	r3, r8, #1
 802660c:	7013      	strb	r3, [r2, #0]
 802660e:	e609      	b.n	8026224 <_dtoa_r+0x66c>
 8026610:	9b07      	ldr	r3, [sp, #28]
 8026612:	9a07      	ldr	r2, [sp, #28]
 8026614:	f803 8c01 	strb.w	r8, [r3, #-1]
 8026618:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802661a:	4293      	cmp	r3, r2
 802661c:	d028      	beq.n	8026670 <_dtoa_r+0xab8>
 802661e:	4649      	mov	r1, r9
 8026620:	2300      	movs	r3, #0
 8026622:	220a      	movs	r2, #10
 8026624:	4658      	mov	r0, fp
 8026626:	f000 f91f 	bl	8026868 <__multadd>
 802662a:	42af      	cmp	r7, r5
 802662c:	4681      	mov	r9, r0
 802662e:	f04f 0300 	mov.w	r3, #0
 8026632:	f04f 020a 	mov.w	r2, #10
 8026636:	4639      	mov	r1, r7
 8026638:	4658      	mov	r0, fp
 802663a:	d107      	bne.n	802664c <_dtoa_r+0xa94>
 802663c:	f000 f914 	bl	8026868 <__multadd>
 8026640:	4607      	mov	r7, r0
 8026642:	4605      	mov	r5, r0
 8026644:	9b07      	ldr	r3, [sp, #28]
 8026646:	3301      	adds	r3, #1
 8026648:	9307      	str	r3, [sp, #28]
 802664a:	e774      	b.n	8026536 <_dtoa_r+0x97e>
 802664c:	f000 f90c 	bl	8026868 <__multadd>
 8026650:	4629      	mov	r1, r5
 8026652:	4607      	mov	r7, r0
 8026654:	2300      	movs	r3, #0
 8026656:	220a      	movs	r2, #10
 8026658:	4658      	mov	r0, fp
 802665a:	f000 f905 	bl	8026868 <__multadd>
 802665e:	4605      	mov	r5, r0
 8026660:	e7f0      	b.n	8026644 <_dtoa_r+0xa8c>
 8026662:	9b00      	ldr	r3, [sp, #0]
 8026664:	2b00      	cmp	r3, #0
 8026666:	bfcc      	ite	gt
 8026668:	461e      	movgt	r6, r3
 802666a:	2601      	movle	r6, #1
 802666c:	4456      	add	r6, sl
 802666e:	2700      	movs	r7, #0
 8026670:	4649      	mov	r1, r9
 8026672:	2201      	movs	r2, #1
 8026674:	4658      	mov	r0, fp
 8026676:	f000 fa89 	bl	8026b8c <__lshift>
 802667a:	4621      	mov	r1, r4
 802667c:	4681      	mov	r9, r0
 802667e:	f000 faf1 	bl	8026c64 <__mcmp>
 8026682:	2800      	cmp	r0, #0
 8026684:	dcb0      	bgt.n	80265e8 <_dtoa_r+0xa30>
 8026686:	d102      	bne.n	802668e <_dtoa_r+0xad6>
 8026688:	f018 0f01 	tst.w	r8, #1
 802668c:	d1ac      	bne.n	80265e8 <_dtoa_r+0xa30>
 802668e:	4633      	mov	r3, r6
 8026690:	461e      	mov	r6, r3
 8026692:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8026696:	2a30      	cmp	r2, #48	@ 0x30
 8026698:	d0fa      	beq.n	8026690 <_dtoa_r+0xad8>
 802669a:	e5c3      	b.n	8026224 <_dtoa_r+0x66c>
 802669c:	459a      	cmp	sl, r3
 802669e:	d1a4      	bne.n	80265ea <_dtoa_r+0xa32>
 80266a0:	9b04      	ldr	r3, [sp, #16]
 80266a2:	3301      	adds	r3, #1
 80266a4:	9304      	str	r3, [sp, #16]
 80266a6:	2331      	movs	r3, #49	@ 0x31
 80266a8:	f88a 3000 	strb.w	r3, [sl]
 80266ac:	e5ba      	b.n	8026224 <_dtoa_r+0x66c>
 80266ae:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80266b0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 802670c <_dtoa_r+0xb54>
 80266b4:	2b00      	cmp	r3, #0
 80266b6:	f43f aab6 	beq.w	8025c26 <_dtoa_r+0x6e>
 80266ba:	f10a 0308 	add.w	r3, sl, #8
 80266be:	f7ff bab0 	b.w	8025c22 <_dtoa_r+0x6a>
 80266c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80266c4:	2b01      	cmp	r3, #1
 80266c6:	f77f ae3a 	ble.w	802633e <_dtoa_r+0x786>
 80266ca:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80266cc:	930a      	str	r3, [sp, #40]	@ 0x28
 80266ce:	2001      	movs	r0, #1
 80266d0:	e658      	b.n	8026384 <_dtoa_r+0x7cc>
 80266d2:	9b00      	ldr	r3, [sp, #0]
 80266d4:	2b00      	cmp	r3, #0
 80266d6:	f77f aed9 	ble.w	802648c <_dtoa_r+0x8d4>
 80266da:	4656      	mov	r6, sl
 80266dc:	4621      	mov	r1, r4
 80266de:	4648      	mov	r0, r9
 80266e0:	f7ff f9e0 	bl	8025aa4 <quorem>
 80266e4:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80266e8:	f806 8b01 	strb.w	r8, [r6], #1
 80266ec:	9b00      	ldr	r3, [sp, #0]
 80266ee:	eba6 020a 	sub.w	r2, r6, sl
 80266f2:	4293      	cmp	r3, r2
 80266f4:	ddb5      	ble.n	8026662 <_dtoa_r+0xaaa>
 80266f6:	4649      	mov	r1, r9
 80266f8:	2300      	movs	r3, #0
 80266fa:	220a      	movs	r2, #10
 80266fc:	4658      	mov	r0, fp
 80266fe:	f000 f8b3 	bl	8026868 <__multadd>
 8026702:	4681      	mov	r9, r0
 8026704:	e7ea      	b.n	80266dc <_dtoa_r+0xb24>
 8026706:	bf00      	nop
 8026708:	080af9f1 	.word	0x080af9f1
 802670c:	080af9e4 	.word	0x080af9e4

08026710 <__ssprint_r>:
 8026710:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026714:	6893      	ldr	r3, [r2, #8]
 8026716:	f8d2 b000 	ldr.w	fp, [r2]
 802671a:	9001      	str	r0, [sp, #4]
 802671c:	460c      	mov	r4, r1
 802671e:	4617      	mov	r7, r2
 8026720:	2b00      	cmp	r3, #0
 8026722:	d157      	bne.n	80267d4 <__ssprint_r+0xc4>
 8026724:	2000      	movs	r0, #0
 8026726:	2300      	movs	r3, #0
 8026728:	607b      	str	r3, [r7, #4]
 802672a:	b003      	add	sp, #12
 802672c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026730:	e9db a800 	ldrd	sl, r8, [fp]
 8026734:	f10b 0b08 	add.w	fp, fp, #8
 8026738:	68a6      	ldr	r6, [r4, #8]
 802673a:	6820      	ldr	r0, [r4, #0]
 802673c:	f1b8 0f00 	cmp.w	r8, #0
 8026740:	d0f6      	beq.n	8026730 <__ssprint_r+0x20>
 8026742:	45b0      	cmp	r8, r6
 8026744:	d32e      	bcc.n	80267a4 <__ssprint_r+0x94>
 8026746:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802674a:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 802674e:	d029      	beq.n	80267a4 <__ssprint_r+0x94>
 8026750:	6921      	ldr	r1, [r4, #16]
 8026752:	6965      	ldr	r5, [r4, #20]
 8026754:	eba0 0901 	sub.w	r9, r0, r1
 8026758:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802675c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8026760:	f109 0001 	add.w	r0, r9, #1
 8026764:	106d      	asrs	r5, r5, #1
 8026766:	4440      	add	r0, r8
 8026768:	4285      	cmp	r5, r0
 802676a:	bf38      	it	cc
 802676c:	4605      	movcc	r5, r0
 802676e:	0553      	lsls	r3, r2, #21
 8026770:	d534      	bpl.n	80267dc <__ssprint_r+0xcc>
 8026772:	9801      	ldr	r0, [sp, #4]
 8026774:	4629      	mov	r1, r5
 8026776:	f7fc fb03 	bl	8022d80 <_malloc_r>
 802677a:	4606      	mov	r6, r0
 802677c:	2800      	cmp	r0, #0
 802677e:	d038      	beq.n	80267f2 <__ssprint_r+0xe2>
 8026780:	464a      	mov	r2, r9
 8026782:	6921      	ldr	r1, [r4, #16]
 8026784:	f7fd fb4a 	bl	8023e1c <memcpy>
 8026788:	89a2      	ldrh	r2, [r4, #12]
 802678a:	f422 6290 	bic.w	r2, r2, #1152	@ 0x480
 802678e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8026792:	81a2      	strh	r2, [r4, #12]
 8026794:	6126      	str	r6, [r4, #16]
 8026796:	6165      	str	r5, [r4, #20]
 8026798:	444e      	add	r6, r9
 802679a:	eba5 0509 	sub.w	r5, r5, r9
 802679e:	6026      	str	r6, [r4, #0]
 80267a0:	60a5      	str	r5, [r4, #8]
 80267a2:	4646      	mov	r6, r8
 80267a4:	4546      	cmp	r6, r8
 80267a6:	bf28      	it	cs
 80267a8:	4646      	movcs	r6, r8
 80267aa:	4632      	mov	r2, r6
 80267ac:	4651      	mov	r1, sl
 80267ae:	6820      	ldr	r0, [r4, #0]
 80267b0:	f7fd fa6a 	bl	8023c88 <memmove>
 80267b4:	68a2      	ldr	r2, [r4, #8]
 80267b6:	1b92      	subs	r2, r2, r6
 80267b8:	60a2      	str	r2, [r4, #8]
 80267ba:	6822      	ldr	r2, [r4, #0]
 80267bc:	4432      	add	r2, r6
 80267be:	6022      	str	r2, [r4, #0]
 80267c0:	68ba      	ldr	r2, [r7, #8]
 80267c2:	eba2 0308 	sub.w	r3, r2, r8
 80267c6:	44c2      	add	sl, r8
 80267c8:	60bb      	str	r3, [r7, #8]
 80267ca:	2b00      	cmp	r3, #0
 80267cc:	d0aa      	beq.n	8026724 <__ssprint_r+0x14>
 80267ce:	f04f 0800 	mov.w	r8, #0
 80267d2:	e7b1      	b.n	8026738 <__ssprint_r+0x28>
 80267d4:	f04f 0a00 	mov.w	sl, #0
 80267d8:	46d0      	mov	r8, sl
 80267da:	e7ad      	b.n	8026738 <__ssprint_r+0x28>
 80267dc:	9801      	ldr	r0, [sp, #4]
 80267de:	462a      	mov	r2, r5
 80267e0:	f7fc fd1c 	bl	802321c <_realloc_r>
 80267e4:	4606      	mov	r6, r0
 80267e6:	2800      	cmp	r0, #0
 80267e8:	d1d4      	bne.n	8026794 <__ssprint_r+0x84>
 80267ea:	6921      	ldr	r1, [r4, #16]
 80267ec:	9801      	ldr	r0, [sp, #4]
 80267ee:	f7fd fbc9 	bl	8023f84 <_free_r>
 80267f2:	9a01      	ldr	r2, [sp, #4]
 80267f4:	230c      	movs	r3, #12
 80267f6:	6013      	str	r3, [r2, #0]
 80267f8:	89a3      	ldrh	r3, [r4, #12]
 80267fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80267fe:	81a3      	strh	r3, [r4, #12]
 8026800:	2300      	movs	r3, #0
 8026802:	60bb      	str	r3, [r7, #8]
 8026804:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8026808:	e78d      	b.n	8026726 <__ssprint_r+0x16>

0802680a <_Balloc>:
 802680a:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 802680c:	b570      	push	{r4, r5, r6, lr}
 802680e:	4605      	mov	r5, r0
 8026810:	460c      	mov	r4, r1
 8026812:	b17b      	cbz	r3, 8026834 <_Balloc+0x2a>
 8026814:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 8026816:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 802681a:	b9a0      	cbnz	r0, 8026846 <_Balloc+0x3c>
 802681c:	2101      	movs	r1, #1
 802681e:	fa01 f604 	lsl.w	r6, r1, r4
 8026822:	1d72      	adds	r2, r6, #5
 8026824:	0092      	lsls	r2, r2, #2
 8026826:	4628      	mov	r0, r5
 8026828:	f000 fb48 	bl	8026ebc <_calloc_r>
 802682c:	b148      	cbz	r0, 8026842 <_Balloc+0x38>
 802682e:	e9c0 4601 	strd	r4, r6, [r0, #4]
 8026832:	e00b      	b.n	802684c <_Balloc+0x42>
 8026834:	2221      	movs	r2, #33	@ 0x21
 8026836:	2104      	movs	r1, #4
 8026838:	f000 fb40 	bl	8026ebc <_calloc_r>
 802683c:	6468      	str	r0, [r5, #68]	@ 0x44
 802683e:	2800      	cmp	r0, #0
 8026840:	d1e8      	bne.n	8026814 <_Balloc+0xa>
 8026842:	2000      	movs	r0, #0
 8026844:	bd70      	pop	{r4, r5, r6, pc}
 8026846:	6802      	ldr	r2, [r0, #0]
 8026848:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 802684c:	2300      	movs	r3, #0
 802684e:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8026852:	e7f7      	b.n	8026844 <_Balloc+0x3a>

08026854 <_Bfree>:
 8026854:	b131      	cbz	r1, 8026864 <_Bfree+0x10>
 8026856:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8026858:	684a      	ldr	r2, [r1, #4]
 802685a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 802685e:	6008      	str	r0, [r1, #0]
 8026860:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8026864:	4770      	bx	lr
	...

08026868 <__multadd>:
 8026868:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802686c:	690d      	ldr	r5, [r1, #16]
 802686e:	4607      	mov	r7, r0
 8026870:	460c      	mov	r4, r1
 8026872:	461e      	mov	r6, r3
 8026874:	f101 0c14 	add.w	ip, r1, #20
 8026878:	2000      	movs	r0, #0
 802687a:	f8dc 3000 	ldr.w	r3, [ip]
 802687e:	b299      	uxth	r1, r3
 8026880:	fb02 6101 	mla	r1, r2, r1, r6
 8026884:	0c1e      	lsrs	r6, r3, #16
 8026886:	0c0b      	lsrs	r3, r1, #16
 8026888:	fb02 3306 	mla	r3, r2, r6, r3
 802688c:	b289      	uxth	r1, r1
 802688e:	3001      	adds	r0, #1
 8026890:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8026894:	4285      	cmp	r5, r0
 8026896:	f84c 1b04 	str.w	r1, [ip], #4
 802689a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 802689e:	dcec      	bgt.n	802687a <__multadd+0x12>
 80268a0:	b30e      	cbz	r6, 80268e6 <__multadd+0x7e>
 80268a2:	68a3      	ldr	r3, [r4, #8]
 80268a4:	42ab      	cmp	r3, r5
 80268a6:	dc19      	bgt.n	80268dc <__multadd+0x74>
 80268a8:	6861      	ldr	r1, [r4, #4]
 80268aa:	4638      	mov	r0, r7
 80268ac:	3101      	adds	r1, #1
 80268ae:	f7ff ffac 	bl	802680a <_Balloc>
 80268b2:	4680      	mov	r8, r0
 80268b4:	b928      	cbnz	r0, 80268c2 <__multadd+0x5a>
 80268b6:	4602      	mov	r2, r0
 80268b8:	4b0c      	ldr	r3, [pc, #48]	@ (80268ec <__multadd+0x84>)
 80268ba:	480d      	ldr	r0, [pc, #52]	@ (80268f0 <__multadd+0x88>)
 80268bc:	21ba      	movs	r1, #186	@ 0xba
 80268be:	f000 fadf 	bl	8026e80 <__assert_func>
 80268c2:	6922      	ldr	r2, [r4, #16]
 80268c4:	3202      	adds	r2, #2
 80268c6:	f104 010c 	add.w	r1, r4, #12
 80268ca:	0092      	lsls	r2, r2, #2
 80268cc:	300c      	adds	r0, #12
 80268ce:	f7fd faa5 	bl	8023e1c <memcpy>
 80268d2:	4621      	mov	r1, r4
 80268d4:	4638      	mov	r0, r7
 80268d6:	f7ff ffbd 	bl	8026854 <_Bfree>
 80268da:	4644      	mov	r4, r8
 80268dc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80268e0:	3501      	adds	r5, #1
 80268e2:	615e      	str	r6, [r3, #20]
 80268e4:	6125      	str	r5, [r4, #16]
 80268e6:	4620      	mov	r0, r4
 80268e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80268ec:	080af9f1 	.word	0x080af9f1
 80268f0:	080afa5a 	.word	0x080afa5a

080268f4 <__hi0bits>:
 80268f4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80268f8:	4603      	mov	r3, r0
 80268fa:	bf36      	itet	cc
 80268fc:	0403      	lslcc	r3, r0, #16
 80268fe:	2000      	movcs	r0, #0
 8026900:	2010      	movcc	r0, #16
 8026902:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8026906:	bf3c      	itt	cc
 8026908:	021b      	lslcc	r3, r3, #8
 802690a:	3008      	addcc	r0, #8
 802690c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8026910:	bf3c      	itt	cc
 8026912:	011b      	lslcc	r3, r3, #4
 8026914:	3004      	addcc	r0, #4
 8026916:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 802691a:	bf3c      	itt	cc
 802691c:	009b      	lslcc	r3, r3, #2
 802691e:	3002      	addcc	r0, #2
 8026920:	2b00      	cmp	r3, #0
 8026922:	db05      	blt.n	8026930 <__hi0bits+0x3c>
 8026924:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8026928:	f100 0001 	add.w	r0, r0, #1
 802692c:	bf08      	it	eq
 802692e:	2020      	moveq	r0, #32
 8026930:	4770      	bx	lr

08026932 <__lo0bits>:
 8026932:	6803      	ldr	r3, [r0, #0]
 8026934:	4602      	mov	r2, r0
 8026936:	f013 0007 	ands.w	r0, r3, #7
 802693a:	d00b      	beq.n	8026954 <__lo0bits+0x22>
 802693c:	07d9      	lsls	r1, r3, #31
 802693e:	d421      	bmi.n	8026984 <__lo0bits+0x52>
 8026940:	0798      	lsls	r0, r3, #30
 8026942:	bf49      	itett	mi
 8026944:	085b      	lsrmi	r3, r3, #1
 8026946:	089b      	lsrpl	r3, r3, #2
 8026948:	2001      	movmi	r0, #1
 802694a:	6013      	strmi	r3, [r2, #0]
 802694c:	bf5c      	itt	pl
 802694e:	6013      	strpl	r3, [r2, #0]
 8026950:	2002      	movpl	r0, #2
 8026952:	4770      	bx	lr
 8026954:	b299      	uxth	r1, r3
 8026956:	b909      	cbnz	r1, 802695c <__lo0bits+0x2a>
 8026958:	0c1b      	lsrs	r3, r3, #16
 802695a:	2010      	movs	r0, #16
 802695c:	b2d9      	uxtb	r1, r3
 802695e:	b909      	cbnz	r1, 8026964 <__lo0bits+0x32>
 8026960:	3008      	adds	r0, #8
 8026962:	0a1b      	lsrs	r3, r3, #8
 8026964:	0719      	lsls	r1, r3, #28
 8026966:	bf04      	itt	eq
 8026968:	091b      	lsreq	r3, r3, #4
 802696a:	3004      	addeq	r0, #4
 802696c:	0799      	lsls	r1, r3, #30
 802696e:	bf04      	itt	eq
 8026970:	089b      	lsreq	r3, r3, #2
 8026972:	3002      	addeq	r0, #2
 8026974:	07d9      	lsls	r1, r3, #31
 8026976:	d403      	bmi.n	8026980 <__lo0bits+0x4e>
 8026978:	085b      	lsrs	r3, r3, #1
 802697a:	f100 0001 	add.w	r0, r0, #1
 802697e:	d003      	beq.n	8026988 <__lo0bits+0x56>
 8026980:	6013      	str	r3, [r2, #0]
 8026982:	4770      	bx	lr
 8026984:	2000      	movs	r0, #0
 8026986:	4770      	bx	lr
 8026988:	2020      	movs	r0, #32
 802698a:	4770      	bx	lr

0802698c <__i2b>:
 802698c:	b510      	push	{r4, lr}
 802698e:	460c      	mov	r4, r1
 8026990:	2101      	movs	r1, #1
 8026992:	f7ff ff3a 	bl	802680a <_Balloc>
 8026996:	4602      	mov	r2, r0
 8026998:	b928      	cbnz	r0, 80269a6 <__i2b+0x1a>
 802699a:	4b05      	ldr	r3, [pc, #20]	@ (80269b0 <__i2b+0x24>)
 802699c:	4805      	ldr	r0, [pc, #20]	@ (80269b4 <__i2b+0x28>)
 802699e:	f240 1145 	movw	r1, #325	@ 0x145
 80269a2:	f000 fa6d 	bl	8026e80 <__assert_func>
 80269a6:	2301      	movs	r3, #1
 80269a8:	6144      	str	r4, [r0, #20]
 80269aa:	6103      	str	r3, [r0, #16]
 80269ac:	bd10      	pop	{r4, pc}
 80269ae:	bf00      	nop
 80269b0:	080af9f1 	.word	0x080af9f1
 80269b4:	080afa5a 	.word	0x080afa5a

080269b8 <__multiply>:
 80269b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80269bc:	4614      	mov	r4, r2
 80269be:	690a      	ldr	r2, [r1, #16]
 80269c0:	6923      	ldr	r3, [r4, #16]
 80269c2:	429a      	cmp	r2, r3
 80269c4:	bfa8      	it	ge
 80269c6:	4623      	movge	r3, r4
 80269c8:	460f      	mov	r7, r1
 80269ca:	bfa4      	itt	ge
 80269cc:	460c      	movge	r4, r1
 80269ce:	461f      	movge	r7, r3
 80269d0:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80269d4:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80269d8:	68a3      	ldr	r3, [r4, #8]
 80269da:	6861      	ldr	r1, [r4, #4]
 80269dc:	eb0a 0609 	add.w	r6, sl, r9
 80269e0:	42b3      	cmp	r3, r6
 80269e2:	b085      	sub	sp, #20
 80269e4:	bfb8      	it	lt
 80269e6:	3101      	addlt	r1, #1
 80269e8:	f7ff ff0f 	bl	802680a <_Balloc>
 80269ec:	b930      	cbnz	r0, 80269fc <__multiply+0x44>
 80269ee:	4602      	mov	r2, r0
 80269f0:	4b44      	ldr	r3, [pc, #272]	@ (8026b04 <__multiply+0x14c>)
 80269f2:	4845      	ldr	r0, [pc, #276]	@ (8026b08 <__multiply+0x150>)
 80269f4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80269f8:	f000 fa42 	bl	8026e80 <__assert_func>
 80269fc:	f100 0514 	add.w	r5, r0, #20
 8026a00:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8026a04:	462b      	mov	r3, r5
 8026a06:	2200      	movs	r2, #0
 8026a08:	4543      	cmp	r3, r8
 8026a0a:	d321      	bcc.n	8026a50 <__multiply+0x98>
 8026a0c:	f107 0114 	add.w	r1, r7, #20
 8026a10:	f104 0214 	add.w	r2, r4, #20
 8026a14:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8026a18:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8026a1c:	9302      	str	r3, [sp, #8]
 8026a1e:	1b13      	subs	r3, r2, r4
 8026a20:	3b15      	subs	r3, #21
 8026a22:	f023 0303 	bic.w	r3, r3, #3
 8026a26:	3304      	adds	r3, #4
 8026a28:	f104 0715 	add.w	r7, r4, #21
 8026a2c:	42ba      	cmp	r2, r7
 8026a2e:	bf38      	it	cc
 8026a30:	2304      	movcc	r3, #4
 8026a32:	9301      	str	r3, [sp, #4]
 8026a34:	9b02      	ldr	r3, [sp, #8]
 8026a36:	9103      	str	r1, [sp, #12]
 8026a38:	428b      	cmp	r3, r1
 8026a3a:	d80c      	bhi.n	8026a56 <__multiply+0x9e>
 8026a3c:	2e00      	cmp	r6, #0
 8026a3e:	dd03      	ble.n	8026a48 <__multiply+0x90>
 8026a40:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8026a44:	2b00      	cmp	r3, #0
 8026a46:	d05b      	beq.n	8026b00 <__multiply+0x148>
 8026a48:	6106      	str	r6, [r0, #16]
 8026a4a:	b005      	add	sp, #20
 8026a4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026a50:	f843 2b04 	str.w	r2, [r3], #4
 8026a54:	e7d8      	b.n	8026a08 <__multiply+0x50>
 8026a56:	f8b1 a000 	ldrh.w	sl, [r1]
 8026a5a:	f1ba 0f00 	cmp.w	sl, #0
 8026a5e:	d024      	beq.n	8026aaa <__multiply+0xf2>
 8026a60:	f104 0e14 	add.w	lr, r4, #20
 8026a64:	46a9      	mov	r9, r5
 8026a66:	f04f 0c00 	mov.w	ip, #0
 8026a6a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8026a6e:	f8d9 3000 	ldr.w	r3, [r9]
 8026a72:	fa1f fb87 	uxth.w	fp, r7
 8026a76:	b29b      	uxth	r3, r3
 8026a78:	fb0a 330b 	mla	r3, sl, fp, r3
 8026a7c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8026a80:	f8d9 7000 	ldr.w	r7, [r9]
 8026a84:	4463      	add	r3, ip
 8026a86:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8026a8a:	fb0a c70b 	mla	r7, sl, fp, ip
 8026a8e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8026a92:	b29b      	uxth	r3, r3
 8026a94:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8026a98:	4572      	cmp	r2, lr
 8026a9a:	f849 3b04 	str.w	r3, [r9], #4
 8026a9e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8026aa2:	d8e2      	bhi.n	8026a6a <__multiply+0xb2>
 8026aa4:	9b01      	ldr	r3, [sp, #4]
 8026aa6:	f845 c003 	str.w	ip, [r5, r3]
 8026aaa:	9b03      	ldr	r3, [sp, #12]
 8026aac:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8026ab0:	3104      	adds	r1, #4
 8026ab2:	f1b9 0f00 	cmp.w	r9, #0
 8026ab6:	d021      	beq.n	8026afc <__multiply+0x144>
 8026ab8:	682b      	ldr	r3, [r5, #0]
 8026aba:	f104 0c14 	add.w	ip, r4, #20
 8026abe:	46ae      	mov	lr, r5
 8026ac0:	f04f 0a00 	mov.w	sl, #0
 8026ac4:	f8bc b000 	ldrh.w	fp, [ip]
 8026ac8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8026acc:	fb09 770b 	mla	r7, r9, fp, r7
 8026ad0:	4457      	add	r7, sl
 8026ad2:	b29b      	uxth	r3, r3
 8026ad4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8026ad8:	f84e 3b04 	str.w	r3, [lr], #4
 8026adc:	f85c 3b04 	ldr.w	r3, [ip], #4
 8026ae0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8026ae4:	f8be 3000 	ldrh.w	r3, [lr]
 8026ae8:	fb09 330a 	mla	r3, r9, sl, r3
 8026aec:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8026af0:	4562      	cmp	r2, ip
 8026af2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8026af6:	d8e5      	bhi.n	8026ac4 <__multiply+0x10c>
 8026af8:	9f01      	ldr	r7, [sp, #4]
 8026afa:	51eb      	str	r3, [r5, r7]
 8026afc:	3504      	adds	r5, #4
 8026afe:	e799      	b.n	8026a34 <__multiply+0x7c>
 8026b00:	3e01      	subs	r6, #1
 8026b02:	e79b      	b.n	8026a3c <__multiply+0x84>
 8026b04:	080af9f1 	.word	0x080af9f1
 8026b08:	080afa5a 	.word	0x080afa5a

08026b0c <__pow5mult>:
 8026b0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8026b10:	4615      	mov	r5, r2
 8026b12:	f012 0203 	ands.w	r2, r2, #3
 8026b16:	4607      	mov	r7, r0
 8026b18:	460e      	mov	r6, r1
 8026b1a:	d007      	beq.n	8026b2c <__pow5mult+0x20>
 8026b1c:	4c1a      	ldr	r4, [pc, #104]	@ (8026b88 <__pow5mult+0x7c>)
 8026b1e:	3a01      	subs	r2, #1
 8026b20:	2300      	movs	r3, #0
 8026b22:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8026b26:	f7ff fe9f 	bl	8026868 <__multadd>
 8026b2a:	4606      	mov	r6, r0
 8026b2c:	10ad      	asrs	r5, r5, #2
 8026b2e:	d027      	beq.n	8026b80 <__pow5mult+0x74>
 8026b30:	6c3c      	ldr	r4, [r7, #64]	@ 0x40
 8026b32:	b944      	cbnz	r4, 8026b46 <__pow5mult+0x3a>
 8026b34:	f240 2171 	movw	r1, #625	@ 0x271
 8026b38:	4638      	mov	r0, r7
 8026b3a:	f7ff ff27 	bl	802698c <__i2b>
 8026b3e:	2300      	movs	r3, #0
 8026b40:	6438      	str	r0, [r7, #64]	@ 0x40
 8026b42:	4604      	mov	r4, r0
 8026b44:	6003      	str	r3, [r0, #0]
 8026b46:	f04f 0900 	mov.w	r9, #0
 8026b4a:	07eb      	lsls	r3, r5, #31
 8026b4c:	d50a      	bpl.n	8026b64 <__pow5mult+0x58>
 8026b4e:	4631      	mov	r1, r6
 8026b50:	4622      	mov	r2, r4
 8026b52:	4638      	mov	r0, r7
 8026b54:	f7ff ff30 	bl	80269b8 <__multiply>
 8026b58:	4631      	mov	r1, r6
 8026b5a:	4680      	mov	r8, r0
 8026b5c:	4638      	mov	r0, r7
 8026b5e:	f7ff fe79 	bl	8026854 <_Bfree>
 8026b62:	4646      	mov	r6, r8
 8026b64:	106d      	asrs	r5, r5, #1
 8026b66:	d00b      	beq.n	8026b80 <__pow5mult+0x74>
 8026b68:	6820      	ldr	r0, [r4, #0]
 8026b6a:	b938      	cbnz	r0, 8026b7c <__pow5mult+0x70>
 8026b6c:	4622      	mov	r2, r4
 8026b6e:	4621      	mov	r1, r4
 8026b70:	4638      	mov	r0, r7
 8026b72:	f7ff ff21 	bl	80269b8 <__multiply>
 8026b76:	6020      	str	r0, [r4, #0]
 8026b78:	f8c0 9000 	str.w	r9, [r0]
 8026b7c:	4604      	mov	r4, r0
 8026b7e:	e7e4      	b.n	8026b4a <__pow5mult+0x3e>
 8026b80:	4630      	mov	r0, r6
 8026b82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8026b86:	bf00      	nop
 8026b88:	080afab4 	.word	0x080afab4

08026b8c <__lshift>:
 8026b8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8026b90:	460c      	mov	r4, r1
 8026b92:	6849      	ldr	r1, [r1, #4]
 8026b94:	6923      	ldr	r3, [r4, #16]
 8026b96:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8026b9a:	68a3      	ldr	r3, [r4, #8]
 8026b9c:	4607      	mov	r7, r0
 8026b9e:	4691      	mov	r9, r2
 8026ba0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8026ba4:	f108 0601 	add.w	r6, r8, #1
 8026ba8:	42b3      	cmp	r3, r6
 8026baa:	db0b      	blt.n	8026bc4 <__lshift+0x38>
 8026bac:	4638      	mov	r0, r7
 8026bae:	f7ff fe2c 	bl	802680a <_Balloc>
 8026bb2:	4605      	mov	r5, r0
 8026bb4:	b948      	cbnz	r0, 8026bca <__lshift+0x3e>
 8026bb6:	4602      	mov	r2, r0
 8026bb8:	4b28      	ldr	r3, [pc, #160]	@ (8026c5c <__lshift+0xd0>)
 8026bba:	4829      	ldr	r0, [pc, #164]	@ (8026c60 <__lshift+0xd4>)
 8026bbc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8026bc0:	f000 f95e 	bl	8026e80 <__assert_func>
 8026bc4:	3101      	adds	r1, #1
 8026bc6:	005b      	lsls	r3, r3, #1
 8026bc8:	e7ee      	b.n	8026ba8 <__lshift+0x1c>
 8026bca:	2300      	movs	r3, #0
 8026bcc:	f100 0114 	add.w	r1, r0, #20
 8026bd0:	f100 0210 	add.w	r2, r0, #16
 8026bd4:	4618      	mov	r0, r3
 8026bd6:	4553      	cmp	r3, sl
 8026bd8:	db33      	blt.n	8026c42 <__lshift+0xb6>
 8026bda:	6920      	ldr	r0, [r4, #16]
 8026bdc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8026be0:	f104 0314 	add.w	r3, r4, #20
 8026be4:	f019 091f 	ands.w	r9, r9, #31
 8026be8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8026bec:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8026bf0:	d02b      	beq.n	8026c4a <__lshift+0xbe>
 8026bf2:	f1c9 0e20 	rsb	lr, r9, #32
 8026bf6:	468a      	mov	sl, r1
 8026bf8:	2200      	movs	r2, #0
 8026bfa:	6818      	ldr	r0, [r3, #0]
 8026bfc:	fa00 f009 	lsl.w	r0, r0, r9
 8026c00:	4310      	orrs	r0, r2
 8026c02:	f84a 0b04 	str.w	r0, [sl], #4
 8026c06:	f853 2b04 	ldr.w	r2, [r3], #4
 8026c0a:	459c      	cmp	ip, r3
 8026c0c:	fa22 f20e 	lsr.w	r2, r2, lr
 8026c10:	d8f3      	bhi.n	8026bfa <__lshift+0x6e>
 8026c12:	ebac 0304 	sub.w	r3, ip, r4
 8026c16:	3b15      	subs	r3, #21
 8026c18:	f023 0303 	bic.w	r3, r3, #3
 8026c1c:	3304      	adds	r3, #4
 8026c1e:	f104 0015 	add.w	r0, r4, #21
 8026c22:	4584      	cmp	ip, r0
 8026c24:	bf38      	it	cc
 8026c26:	2304      	movcc	r3, #4
 8026c28:	50ca      	str	r2, [r1, r3]
 8026c2a:	b10a      	cbz	r2, 8026c30 <__lshift+0xa4>
 8026c2c:	f108 0602 	add.w	r6, r8, #2
 8026c30:	3e01      	subs	r6, #1
 8026c32:	4638      	mov	r0, r7
 8026c34:	612e      	str	r6, [r5, #16]
 8026c36:	4621      	mov	r1, r4
 8026c38:	f7ff fe0c 	bl	8026854 <_Bfree>
 8026c3c:	4628      	mov	r0, r5
 8026c3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8026c42:	f842 0f04 	str.w	r0, [r2, #4]!
 8026c46:	3301      	adds	r3, #1
 8026c48:	e7c5      	b.n	8026bd6 <__lshift+0x4a>
 8026c4a:	3904      	subs	r1, #4
 8026c4c:	f853 2b04 	ldr.w	r2, [r3], #4
 8026c50:	f841 2f04 	str.w	r2, [r1, #4]!
 8026c54:	459c      	cmp	ip, r3
 8026c56:	d8f9      	bhi.n	8026c4c <__lshift+0xc0>
 8026c58:	e7ea      	b.n	8026c30 <__lshift+0xa4>
 8026c5a:	bf00      	nop
 8026c5c:	080af9f1 	.word	0x080af9f1
 8026c60:	080afa5a 	.word	0x080afa5a

08026c64 <__mcmp>:
 8026c64:	690a      	ldr	r2, [r1, #16]
 8026c66:	4603      	mov	r3, r0
 8026c68:	6900      	ldr	r0, [r0, #16]
 8026c6a:	1a80      	subs	r0, r0, r2
 8026c6c:	b530      	push	{r4, r5, lr}
 8026c6e:	d10e      	bne.n	8026c8e <__mcmp+0x2a>
 8026c70:	3314      	adds	r3, #20
 8026c72:	3114      	adds	r1, #20
 8026c74:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8026c78:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8026c7c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8026c80:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8026c84:	4295      	cmp	r5, r2
 8026c86:	d003      	beq.n	8026c90 <__mcmp+0x2c>
 8026c88:	d205      	bcs.n	8026c96 <__mcmp+0x32>
 8026c8a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8026c8e:	bd30      	pop	{r4, r5, pc}
 8026c90:	42a3      	cmp	r3, r4
 8026c92:	d3f3      	bcc.n	8026c7c <__mcmp+0x18>
 8026c94:	e7fb      	b.n	8026c8e <__mcmp+0x2a>
 8026c96:	2001      	movs	r0, #1
 8026c98:	e7f9      	b.n	8026c8e <__mcmp+0x2a>
	...

08026c9c <__mdiff>:
 8026c9c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026ca0:	4689      	mov	r9, r1
 8026ca2:	4606      	mov	r6, r0
 8026ca4:	4611      	mov	r1, r2
 8026ca6:	4648      	mov	r0, r9
 8026ca8:	4614      	mov	r4, r2
 8026caa:	f7ff ffdb 	bl	8026c64 <__mcmp>
 8026cae:	1e05      	subs	r5, r0, #0
 8026cb0:	d112      	bne.n	8026cd8 <__mdiff+0x3c>
 8026cb2:	4629      	mov	r1, r5
 8026cb4:	4630      	mov	r0, r6
 8026cb6:	f7ff fda8 	bl	802680a <_Balloc>
 8026cba:	4602      	mov	r2, r0
 8026cbc:	b928      	cbnz	r0, 8026cca <__mdiff+0x2e>
 8026cbe:	4b3f      	ldr	r3, [pc, #252]	@ (8026dbc <__mdiff+0x120>)
 8026cc0:	f240 2137 	movw	r1, #567	@ 0x237
 8026cc4:	483e      	ldr	r0, [pc, #248]	@ (8026dc0 <__mdiff+0x124>)
 8026cc6:	f000 f8db 	bl	8026e80 <__assert_func>
 8026cca:	2301      	movs	r3, #1
 8026ccc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8026cd0:	4610      	mov	r0, r2
 8026cd2:	b003      	add	sp, #12
 8026cd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026cd8:	bfbc      	itt	lt
 8026cda:	464b      	movlt	r3, r9
 8026cdc:	46a1      	movlt	r9, r4
 8026cde:	4630      	mov	r0, r6
 8026ce0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8026ce4:	bfba      	itte	lt
 8026ce6:	461c      	movlt	r4, r3
 8026ce8:	2501      	movlt	r5, #1
 8026cea:	2500      	movge	r5, #0
 8026cec:	f7ff fd8d 	bl	802680a <_Balloc>
 8026cf0:	4602      	mov	r2, r0
 8026cf2:	b918      	cbnz	r0, 8026cfc <__mdiff+0x60>
 8026cf4:	4b31      	ldr	r3, [pc, #196]	@ (8026dbc <__mdiff+0x120>)
 8026cf6:	f240 2145 	movw	r1, #581	@ 0x245
 8026cfa:	e7e3      	b.n	8026cc4 <__mdiff+0x28>
 8026cfc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8026d00:	6926      	ldr	r6, [r4, #16]
 8026d02:	60c5      	str	r5, [r0, #12]
 8026d04:	f109 0310 	add.w	r3, r9, #16
 8026d08:	f109 0514 	add.w	r5, r9, #20
 8026d0c:	f104 0e14 	add.w	lr, r4, #20
 8026d10:	f100 0b14 	add.w	fp, r0, #20
 8026d14:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8026d18:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8026d1c:	9301      	str	r3, [sp, #4]
 8026d1e:	46d9      	mov	r9, fp
 8026d20:	f04f 0c00 	mov.w	ip, #0
 8026d24:	9b01      	ldr	r3, [sp, #4]
 8026d26:	f85e 0b04 	ldr.w	r0, [lr], #4
 8026d2a:	f853 af04 	ldr.w	sl, [r3, #4]!
 8026d2e:	9301      	str	r3, [sp, #4]
 8026d30:	fa1f f38a 	uxth.w	r3, sl
 8026d34:	4619      	mov	r1, r3
 8026d36:	b283      	uxth	r3, r0
 8026d38:	1acb      	subs	r3, r1, r3
 8026d3a:	0c00      	lsrs	r0, r0, #16
 8026d3c:	4463      	add	r3, ip
 8026d3e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8026d42:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8026d46:	b29b      	uxth	r3, r3
 8026d48:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8026d4c:	4576      	cmp	r6, lr
 8026d4e:	f849 3b04 	str.w	r3, [r9], #4
 8026d52:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8026d56:	d8e5      	bhi.n	8026d24 <__mdiff+0x88>
 8026d58:	1b33      	subs	r3, r6, r4
 8026d5a:	3b15      	subs	r3, #21
 8026d5c:	f023 0303 	bic.w	r3, r3, #3
 8026d60:	3415      	adds	r4, #21
 8026d62:	3304      	adds	r3, #4
 8026d64:	42a6      	cmp	r6, r4
 8026d66:	bf38      	it	cc
 8026d68:	2304      	movcc	r3, #4
 8026d6a:	441d      	add	r5, r3
 8026d6c:	445b      	add	r3, fp
 8026d6e:	461e      	mov	r6, r3
 8026d70:	462c      	mov	r4, r5
 8026d72:	4544      	cmp	r4, r8
 8026d74:	d30e      	bcc.n	8026d94 <__mdiff+0xf8>
 8026d76:	f108 0103 	add.w	r1, r8, #3
 8026d7a:	1b49      	subs	r1, r1, r5
 8026d7c:	f021 0103 	bic.w	r1, r1, #3
 8026d80:	3d03      	subs	r5, #3
 8026d82:	45a8      	cmp	r8, r5
 8026d84:	bf38      	it	cc
 8026d86:	2100      	movcc	r1, #0
 8026d88:	440b      	add	r3, r1
 8026d8a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8026d8e:	b191      	cbz	r1, 8026db6 <__mdiff+0x11a>
 8026d90:	6117      	str	r7, [r2, #16]
 8026d92:	e79d      	b.n	8026cd0 <__mdiff+0x34>
 8026d94:	f854 1b04 	ldr.w	r1, [r4], #4
 8026d98:	46e6      	mov	lr, ip
 8026d9a:	0c08      	lsrs	r0, r1, #16
 8026d9c:	fa1c fc81 	uxtah	ip, ip, r1
 8026da0:	4471      	add	r1, lr
 8026da2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8026da6:	b289      	uxth	r1, r1
 8026da8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8026dac:	f846 1b04 	str.w	r1, [r6], #4
 8026db0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8026db4:	e7dd      	b.n	8026d72 <__mdiff+0xd6>
 8026db6:	3f01      	subs	r7, #1
 8026db8:	e7e7      	b.n	8026d8a <__mdiff+0xee>
 8026dba:	bf00      	nop
 8026dbc:	080af9f1 	.word	0x080af9f1
 8026dc0:	080afa5a 	.word	0x080afa5a

08026dc4 <__d2b>:
 8026dc4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8026dc8:	460f      	mov	r7, r1
 8026dca:	2101      	movs	r1, #1
 8026dcc:	ec59 8b10 	vmov	r8, r9, d0
 8026dd0:	4616      	mov	r6, r2
 8026dd2:	f7ff fd1a 	bl	802680a <_Balloc>
 8026dd6:	4604      	mov	r4, r0
 8026dd8:	b930      	cbnz	r0, 8026de8 <__d2b+0x24>
 8026dda:	4602      	mov	r2, r0
 8026ddc:	4b23      	ldr	r3, [pc, #140]	@ (8026e6c <__d2b+0xa8>)
 8026dde:	4824      	ldr	r0, [pc, #144]	@ (8026e70 <__d2b+0xac>)
 8026de0:	f240 310f 	movw	r1, #783	@ 0x30f
 8026de4:	f000 f84c 	bl	8026e80 <__assert_func>
 8026de8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8026dec:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8026df0:	b10d      	cbz	r5, 8026df6 <__d2b+0x32>
 8026df2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8026df6:	9301      	str	r3, [sp, #4]
 8026df8:	f1b8 0300 	subs.w	r3, r8, #0
 8026dfc:	d023      	beq.n	8026e46 <__d2b+0x82>
 8026dfe:	4668      	mov	r0, sp
 8026e00:	9300      	str	r3, [sp, #0]
 8026e02:	f7ff fd96 	bl	8026932 <__lo0bits>
 8026e06:	e9dd 1200 	ldrd	r1, r2, [sp]
 8026e0a:	b1d0      	cbz	r0, 8026e42 <__d2b+0x7e>
 8026e0c:	f1c0 0320 	rsb	r3, r0, #32
 8026e10:	fa02 f303 	lsl.w	r3, r2, r3
 8026e14:	430b      	orrs	r3, r1
 8026e16:	40c2      	lsrs	r2, r0
 8026e18:	6163      	str	r3, [r4, #20]
 8026e1a:	9201      	str	r2, [sp, #4]
 8026e1c:	9b01      	ldr	r3, [sp, #4]
 8026e1e:	61a3      	str	r3, [r4, #24]
 8026e20:	2b00      	cmp	r3, #0
 8026e22:	bf0c      	ite	eq
 8026e24:	2201      	moveq	r2, #1
 8026e26:	2202      	movne	r2, #2
 8026e28:	6122      	str	r2, [r4, #16]
 8026e2a:	b1a5      	cbz	r5, 8026e56 <__d2b+0x92>
 8026e2c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8026e30:	4405      	add	r5, r0
 8026e32:	603d      	str	r5, [r7, #0]
 8026e34:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8026e38:	6030      	str	r0, [r6, #0]
 8026e3a:	4620      	mov	r0, r4
 8026e3c:	b003      	add	sp, #12
 8026e3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8026e42:	6161      	str	r1, [r4, #20]
 8026e44:	e7ea      	b.n	8026e1c <__d2b+0x58>
 8026e46:	a801      	add	r0, sp, #4
 8026e48:	f7ff fd73 	bl	8026932 <__lo0bits>
 8026e4c:	9b01      	ldr	r3, [sp, #4]
 8026e4e:	6163      	str	r3, [r4, #20]
 8026e50:	3020      	adds	r0, #32
 8026e52:	2201      	movs	r2, #1
 8026e54:	e7e8      	b.n	8026e28 <__d2b+0x64>
 8026e56:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8026e5a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8026e5e:	6038      	str	r0, [r7, #0]
 8026e60:	6918      	ldr	r0, [r3, #16]
 8026e62:	f7ff fd47 	bl	80268f4 <__hi0bits>
 8026e66:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8026e6a:	e7e5      	b.n	8026e38 <__d2b+0x74>
 8026e6c:	080af9f1 	.word	0x080af9f1
 8026e70:	080afa5a 	.word	0x080afa5a

08026e74 <__locale_mb_cur_max>:
 8026e74:	4b01      	ldr	r3, [pc, #4]	@ (8026e7c <__locale_mb_cur_max+0x8>)
 8026e76:	f893 0128 	ldrb.w	r0, [r3, #296]	@ 0x128
 8026e7a:	4770      	bx	lr
 8026e7c:	20008974 	.word	0x20008974

08026e80 <__assert_func>:
 8026e80:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8026e82:	4614      	mov	r4, r2
 8026e84:	461a      	mov	r2, r3
 8026e86:	4b09      	ldr	r3, [pc, #36]	@ (8026eac <__assert_func+0x2c>)
 8026e88:	681b      	ldr	r3, [r3, #0]
 8026e8a:	4605      	mov	r5, r0
 8026e8c:	68d8      	ldr	r0, [r3, #12]
 8026e8e:	b954      	cbnz	r4, 8026ea6 <__assert_func+0x26>
 8026e90:	4b07      	ldr	r3, [pc, #28]	@ (8026eb0 <__assert_func+0x30>)
 8026e92:	461c      	mov	r4, r3
 8026e94:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8026e98:	9100      	str	r1, [sp, #0]
 8026e9a:	462b      	mov	r3, r5
 8026e9c:	4905      	ldr	r1, [pc, #20]	@ (8026eb4 <__assert_func+0x34>)
 8026e9e:	f000 f843 	bl	8026f28 <fiprintf>
 8026ea2:	f7fb ff55 	bl	8022d50 <abort>
 8026ea6:	4b04      	ldr	r3, [pc, #16]	@ (8026eb8 <__assert_func+0x38>)
 8026ea8:	e7f4      	b.n	8026e94 <__assert_func+0x14>
 8026eaa:	bf00      	nop
 8026eac:	2000884c 	.word	0x2000884c
 8026eb0:	080afcf6 	.word	0x080afcf6
 8026eb4:	080afcc8 	.word	0x080afcc8
 8026eb8:	080afcbb 	.word	0x080afcbb

08026ebc <_calloc_r>:
 8026ebc:	b538      	push	{r3, r4, r5, lr}
 8026ebe:	fba1 1502 	umull	r1, r5, r1, r2
 8026ec2:	b935      	cbnz	r5, 8026ed2 <_calloc_r+0x16>
 8026ec4:	f7fb ff5c 	bl	8022d80 <_malloc_r>
 8026ec8:	4604      	mov	r4, r0
 8026eca:	b938      	cbnz	r0, 8026edc <_calloc_r+0x20>
 8026ecc:	2400      	movs	r4, #0
 8026ece:	4620      	mov	r0, r4
 8026ed0:	bd38      	pop	{r3, r4, r5, pc}
 8026ed2:	f7fc ff69 	bl	8023da8 <__errno>
 8026ed6:	230c      	movs	r3, #12
 8026ed8:	6003      	str	r3, [r0, #0]
 8026eda:	e7f7      	b.n	8026ecc <_calloc_r+0x10>
 8026edc:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8026ee0:	f022 0203 	bic.w	r2, r2, #3
 8026ee4:	3a04      	subs	r2, #4
 8026ee6:	2a24      	cmp	r2, #36	@ 0x24
 8026ee8:	d819      	bhi.n	8026f1e <_calloc_r+0x62>
 8026eea:	2a13      	cmp	r2, #19
 8026eec:	d915      	bls.n	8026f1a <_calloc_r+0x5e>
 8026eee:	2a1b      	cmp	r2, #27
 8026ef0:	e9c0 5500 	strd	r5, r5, [r0]
 8026ef4:	d806      	bhi.n	8026f04 <_calloc_r+0x48>
 8026ef6:	f100 0308 	add.w	r3, r0, #8
 8026efa:	2200      	movs	r2, #0
 8026efc:	e9c3 2200 	strd	r2, r2, [r3]
 8026f00:	609a      	str	r2, [r3, #8]
 8026f02:	e7e4      	b.n	8026ece <_calloc_r+0x12>
 8026f04:	2a24      	cmp	r2, #36	@ 0x24
 8026f06:	e9c0 5502 	strd	r5, r5, [r0, #8]
 8026f0a:	bf11      	iteee	ne
 8026f0c:	f100 0310 	addne.w	r3, r0, #16
 8026f10:	6105      	streq	r5, [r0, #16]
 8026f12:	f100 0318 	addeq.w	r3, r0, #24
 8026f16:	6145      	streq	r5, [r0, #20]
 8026f18:	e7ef      	b.n	8026efa <_calloc_r+0x3e>
 8026f1a:	4603      	mov	r3, r0
 8026f1c:	e7ed      	b.n	8026efa <_calloc_r+0x3e>
 8026f1e:	4629      	mov	r1, r5
 8026f20:	f7fc fecc 	bl	8023cbc <memset>
 8026f24:	e7d3      	b.n	8026ece <_calloc_r+0x12>
	...

08026f28 <fiprintf>:
 8026f28:	b40e      	push	{r1, r2, r3}
 8026f2a:	b503      	push	{r0, r1, lr}
 8026f2c:	4601      	mov	r1, r0
 8026f2e:	ab03      	add	r3, sp, #12
 8026f30:	4805      	ldr	r0, [pc, #20]	@ (8026f48 <fiprintf+0x20>)
 8026f32:	f853 2b04 	ldr.w	r2, [r3], #4
 8026f36:	6800      	ldr	r0, [r0, #0]
 8026f38:	9301      	str	r3, [sp, #4]
 8026f3a:	f000 f84b 	bl	8026fd4 <_vfiprintf_r>
 8026f3e:	b002      	add	sp, #8
 8026f40:	f85d eb04 	ldr.w	lr, [sp], #4
 8026f44:	b003      	add	sp, #12
 8026f46:	4770      	bx	lr
 8026f48:	2000884c 	.word	0x2000884c

08026f4c <__ascii_mbtowc>:
 8026f4c:	b082      	sub	sp, #8
 8026f4e:	b901      	cbnz	r1, 8026f52 <__ascii_mbtowc+0x6>
 8026f50:	a901      	add	r1, sp, #4
 8026f52:	b142      	cbz	r2, 8026f66 <__ascii_mbtowc+0x1a>
 8026f54:	b14b      	cbz	r3, 8026f6a <__ascii_mbtowc+0x1e>
 8026f56:	7813      	ldrb	r3, [r2, #0]
 8026f58:	600b      	str	r3, [r1, #0]
 8026f5a:	7812      	ldrb	r2, [r2, #0]
 8026f5c:	1e10      	subs	r0, r2, #0
 8026f5e:	bf18      	it	ne
 8026f60:	2001      	movne	r0, #1
 8026f62:	b002      	add	sp, #8
 8026f64:	4770      	bx	lr
 8026f66:	4610      	mov	r0, r2
 8026f68:	e7fb      	b.n	8026f62 <__ascii_mbtowc+0x16>
 8026f6a:	f06f 0001 	mvn.w	r0, #1
 8026f6e:	e7f8      	b.n	8026f62 <__ascii_mbtowc+0x16>

08026f70 <__sprint_r>:
 8026f70:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026f74:	6893      	ldr	r3, [r2, #8]
 8026f76:	4680      	mov	r8, r0
 8026f78:	460e      	mov	r6, r1
 8026f7a:	4614      	mov	r4, r2
 8026f7c:	b343      	cbz	r3, 8026fd0 <__sprint_r+0x60>
 8026f7e:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 8026f80:	049d      	lsls	r5, r3, #18
 8026f82:	d522      	bpl.n	8026fca <__sprint_r+0x5a>
 8026f84:	6815      	ldr	r5, [r2, #0]
 8026f86:	68a0      	ldr	r0, [r4, #8]
 8026f88:	3508      	adds	r5, #8
 8026f8a:	b928      	cbnz	r0, 8026f98 <__sprint_r+0x28>
 8026f8c:	2300      	movs	r3, #0
 8026f8e:	60a3      	str	r3, [r4, #8]
 8026f90:	2300      	movs	r3, #0
 8026f92:	6063      	str	r3, [r4, #4]
 8026f94:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026f98:	e955 b702 	ldrd	fp, r7, [r5, #-8]
 8026f9c:	f04f 0900 	mov.w	r9, #0
 8026fa0:	ea4f 0a97 	mov.w	sl, r7, lsr #2
 8026fa4:	45ca      	cmp	sl, r9
 8026fa6:	dc05      	bgt.n	8026fb4 <__sprint_r+0x44>
 8026fa8:	68a3      	ldr	r3, [r4, #8]
 8026faa:	f027 0703 	bic.w	r7, r7, #3
 8026fae:	1bdb      	subs	r3, r3, r7
 8026fb0:	60a3      	str	r3, [r4, #8]
 8026fb2:	e7e8      	b.n	8026f86 <__sprint_r+0x16>
 8026fb4:	f85b 1029 	ldr.w	r1, [fp, r9, lsl #2]
 8026fb8:	4632      	mov	r2, r6
 8026fba:	4640      	mov	r0, r8
 8026fbc:	f000 fd20 	bl	8027a00 <_fputwc_r>
 8026fc0:	1c43      	adds	r3, r0, #1
 8026fc2:	d0e3      	beq.n	8026f8c <__sprint_r+0x1c>
 8026fc4:	f109 0901 	add.w	r9, r9, #1
 8026fc8:	e7ec      	b.n	8026fa4 <__sprint_r+0x34>
 8026fca:	f7fc fc35 	bl	8023838 <__sfvwrite_r>
 8026fce:	e7dd      	b.n	8026f8c <__sprint_r+0x1c>
 8026fd0:	4618      	mov	r0, r3
 8026fd2:	e7dd      	b.n	8026f90 <__sprint_r+0x20>

08026fd4 <_vfiprintf_r>:
 8026fd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026fd8:	b0bb      	sub	sp, #236	@ 0xec
 8026fda:	460f      	mov	r7, r1
 8026fdc:	4693      	mov	fp, r2
 8026fde:	461c      	mov	r4, r3
 8026fe0:	461d      	mov	r5, r3
 8026fe2:	9000      	str	r0, [sp, #0]
 8026fe4:	b118      	cbz	r0, 8026fee <_vfiprintf_r+0x1a>
 8026fe6:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8026fe8:	b90b      	cbnz	r3, 8026fee <_vfiprintf_r+0x1a>
 8026fea:	f7fc fb9f 	bl	802372c <__sinit>
 8026fee:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8026ff0:	07db      	lsls	r3, r3, #31
 8026ff2:	d405      	bmi.n	8027000 <_vfiprintf_r+0x2c>
 8026ff4:	89bb      	ldrh	r3, [r7, #12]
 8026ff6:	059e      	lsls	r6, r3, #22
 8026ff8:	d402      	bmi.n	8027000 <_vfiprintf_r+0x2c>
 8026ffa:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8026ffc:	f7fc ff0c 	bl	8023e18 <__retarget_lock_acquire_recursive>
 8027000:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8027004:	0498      	lsls	r0, r3, #18
 8027006:	d406      	bmi.n	8027016 <_vfiprintf_r+0x42>
 8027008:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 802700c:	81bb      	strh	r3, [r7, #12]
 802700e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8027010:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8027014:	667b      	str	r3, [r7, #100]	@ 0x64
 8027016:	89bb      	ldrh	r3, [r7, #12]
 8027018:	0719      	lsls	r1, r3, #28
 802701a:	d501      	bpl.n	8027020 <_vfiprintf_r+0x4c>
 802701c:	693b      	ldr	r3, [r7, #16]
 802701e:	b9ab      	cbnz	r3, 802704c <_vfiprintf_r+0x78>
 8027020:	9800      	ldr	r0, [sp, #0]
 8027022:	4639      	mov	r1, r7
 8027024:	f7fc fdca 	bl	8023bbc <__swsetup_r>
 8027028:	b180      	cbz	r0, 802704c <_vfiprintf_r+0x78>
 802702a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 802702c:	07da      	lsls	r2, r3, #31
 802702e:	d506      	bpl.n	802703e <_vfiprintf_r+0x6a>
 8027030:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8027034:	9303      	str	r3, [sp, #12]
 8027036:	9803      	ldr	r0, [sp, #12]
 8027038:	b03b      	add	sp, #236	@ 0xec
 802703a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802703e:	89bb      	ldrh	r3, [r7, #12]
 8027040:	059b      	lsls	r3, r3, #22
 8027042:	d4f5      	bmi.n	8027030 <_vfiprintf_r+0x5c>
 8027044:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8027046:	f7fc fee8 	bl	8023e1a <__retarget_lock_release_recursive>
 802704a:	e7f1      	b.n	8027030 <_vfiprintf_r+0x5c>
 802704c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8027050:	f003 021a 	and.w	r2, r3, #26
 8027054:	2a0a      	cmp	r2, #10
 8027056:	d114      	bne.n	8027082 <_vfiprintf_r+0xae>
 8027058:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 802705c:	2a00      	cmp	r2, #0
 802705e:	db10      	blt.n	8027082 <_vfiprintf_r+0xae>
 8027060:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8027062:	07d6      	lsls	r6, r2, #31
 8027064:	d404      	bmi.n	8027070 <_vfiprintf_r+0x9c>
 8027066:	059d      	lsls	r5, r3, #22
 8027068:	d402      	bmi.n	8027070 <_vfiprintf_r+0x9c>
 802706a:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 802706c:	f7fc fed5 	bl	8023e1a <__retarget_lock_release_recursive>
 8027070:	9800      	ldr	r0, [sp, #0]
 8027072:	4623      	mov	r3, r4
 8027074:	465a      	mov	r2, fp
 8027076:	4639      	mov	r1, r7
 8027078:	b03b      	add	sp, #236	@ 0xec
 802707a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802707e:	f000 bc31 	b.w	80278e4 <__sbprintf>
 8027082:	2300      	movs	r3, #0
 8027084:	e9cd 330f 	strd	r3, r3, [sp, #60]	@ 0x3c
 8027088:	e9cd 3305 	strd	r3, r3, [sp, #20]
 802708c:	ae11      	add	r6, sp, #68	@ 0x44
 802708e:	960e      	str	r6, [sp, #56]	@ 0x38
 8027090:	9307      	str	r3, [sp, #28]
 8027092:	9309      	str	r3, [sp, #36]	@ 0x24
 8027094:	9303      	str	r3, [sp, #12]
 8027096:	465b      	mov	r3, fp
 8027098:	461c      	mov	r4, r3
 802709a:	f813 2b01 	ldrb.w	r2, [r3], #1
 802709e:	b10a      	cbz	r2, 80270a4 <_vfiprintf_r+0xd0>
 80270a0:	2a25      	cmp	r2, #37	@ 0x25
 80270a2:	d1f9      	bne.n	8027098 <_vfiprintf_r+0xc4>
 80270a4:	ebb4 080b 	subs.w	r8, r4, fp
 80270a8:	d00d      	beq.n	80270c6 <_vfiprintf_r+0xf2>
 80270aa:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80270ac:	4443      	add	r3, r8
 80270ae:	9310      	str	r3, [sp, #64]	@ 0x40
 80270b0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80270b2:	3301      	adds	r3, #1
 80270b4:	2b07      	cmp	r3, #7
 80270b6:	e9c6 b800 	strd	fp, r8, [r6]
 80270ba:	930f      	str	r3, [sp, #60]	@ 0x3c
 80270bc:	dc75      	bgt.n	80271aa <_vfiprintf_r+0x1d6>
 80270be:	3608      	adds	r6, #8
 80270c0:	9b03      	ldr	r3, [sp, #12]
 80270c2:	4443      	add	r3, r8
 80270c4:	9303      	str	r3, [sp, #12]
 80270c6:	7823      	ldrb	r3, [r4, #0]
 80270c8:	2b00      	cmp	r3, #0
 80270ca:	f000 83cd 	beq.w	8027868 <_vfiprintf_r+0x894>
 80270ce:	2300      	movs	r3, #0
 80270d0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80270d4:	e9cd 2301 	strd	r2, r3, [sp, #4]
 80270d8:	3401      	adds	r4, #1
 80270da:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 80270de:	469a      	mov	sl, r3
 80270e0:	46a3      	mov	fp, r4
 80270e2:	f81b 3b01 	ldrb.w	r3, [fp], #1
 80270e6:	f1a3 0220 	sub.w	r2, r3, #32
 80270ea:	2a5a      	cmp	r2, #90	@ 0x5a
 80270ec:	f200 8316 	bhi.w	802771c <_vfiprintf_r+0x748>
 80270f0:	e8df f012 	tbh	[pc, r2, lsl #1]
 80270f4:	0314009a 	.word	0x0314009a
 80270f8:	00a20314 	.word	0x00a20314
 80270fc:	03140314 	.word	0x03140314
 8027100:	00820314 	.word	0x00820314
 8027104:	03140314 	.word	0x03140314
 8027108:	00af00a5 	.word	0x00af00a5
 802710c:	00ac0314 	.word	0x00ac0314
 8027110:	031400b1 	.word	0x031400b1
 8027114:	00d000cd 	.word	0x00d000cd
 8027118:	00d000d0 	.word	0x00d000d0
 802711c:	00d000d0 	.word	0x00d000d0
 8027120:	00d000d0 	.word	0x00d000d0
 8027124:	00d000d0 	.word	0x00d000d0
 8027128:	03140314 	.word	0x03140314
 802712c:	03140314 	.word	0x03140314
 8027130:	03140314 	.word	0x03140314
 8027134:	03140314 	.word	0x03140314
 8027138:	00f70314 	.word	0x00f70314
 802713c:	03140104 	.word	0x03140104
 8027140:	03140314 	.word	0x03140314
 8027144:	03140314 	.word	0x03140314
 8027148:	03140314 	.word	0x03140314
 802714c:	03140314 	.word	0x03140314
 8027150:	01520314 	.word	0x01520314
 8027154:	03140314 	.word	0x03140314
 8027158:	019a0314 	.word	0x019a0314
 802715c:	027a0314 	.word	0x027a0314
 8027160:	03140314 	.word	0x03140314
 8027164:	0314029a 	.word	0x0314029a
 8027168:	03140314 	.word	0x03140314
 802716c:	03140314 	.word	0x03140314
 8027170:	03140314 	.word	0x03140314
 8027174:	03140314 	.word	0x03140314
 8027178:	00f70314 	.word	0x00f70314
 802717c:	03140106 	.word	0x03140106
 8027180:	03140314 	.word	0x03140314
 8027184:	010600e0 	.word	0x010600e0
 8027188:	031400f1 	.word	0x031400f1
 802718c:	031400eb 	.word	0x031400eb
 8027190:	01540132 	.word	0x01540132
 8027194:	00f10189 	.word	0x00f10189
 8027198:	019a0314 	.word	0x019a0314
 802719c:	027c0098 	.word	0x027c0098
 80271a0:	03140314 	.word	0x03140314
 80271a4:	03140065 	.word	0x03140065
 80271a8:	0098      	.short	0x0098
 80271aa:	9800      	ldr	r0, [sp, #0]
 80271ac:	aa0e      	add	r2, sp, #56	@ 0x38
 80271ae:	4639      	mov	r1, r7
 80271b0:	f7ff fede 	bl	8026f70 <__sprint_r>
 80271b4:	2800      	cmp	r0, #0
 80271b6:	f040 8336 	bne.w	8027826 <_vfiprintf_r+0x852>
 80271ba:	ae11      	add	r6, sp, #68	@ 0x44
 80271bc:	e780      	b.n	80270c0 <_vfiprintf_r+0xec>
 80271be:	4a99      	ldr	r2, [pc, #612]	@ (8027424 <_vfiprintf_r+0x450>)
 80271c0:	9205      	str	r2, [sp, #20]
 80271c2:	f01a 0220 	ands.w	r2, sl, #32
 80271c6:	f000 8231 	beq.w	802762c <_vfiprintf_r+0x658>
 80271ca:	3507      	adds	r5, #7
 80271cc:	f025 0507 	bic.w	r5, r5, #7
 80271d0:	46a8      	mov	r8, r5
 80271d2:	686d      	ldr	r5, [r5, #4]
 80271d4:	f858 4b08 	ldr.w	r4, [r8], #8
 80271d8:	f01a 0f01 	tst.w	sl, #1
 80271dc:	d009      	beq.n	80271f2 <_vfiprintf_r+0x21e>
 80271de:	ea54 0205 	orrs.w	r2, r4, r5
 80271e2:	bf1f      	itttt	ne
 80271e4:	2230      	movne	r2, #48	@ 0x30
 80271e6:	f88d 2034 	strbne.w	r2, [sp, #52]	@ 0x34
 80271ea:	f88d 3035 	strbne.w	r3, [sp, #53]	@ 0x35
 80271ee:	f04a 0a02 	orrne.w	sl, sl, #2
 80271f2:	f42a 6a80 	bic.w	sl, sl, #1024	@ 0x400
 80271f6:	e112      	b.n	802741e <_vfiprintf_r+0x44a>
 80271f8:	9800      	ldr	r0, [sp, #0]
 80271fa:	f7fe fb9d 	bl	8025938 <_localeconv_r>
 80271fe:	6843      	ldr	r3, [r0, #4]
 8027200:	9309      	str	r3, [sp, #36]	@ 0x24
 8027202:	4618      	mov	r0, r3
 8027204:	f7df f84c 	bl	80062a0 <strlen>
 8027208:	9007      	str	r0, [sp, #28]
 802720a:	9800      	ldr	r0, [sp, #0]
 802720c:	f7fe fb94 	bl	8025938 <_localeconv_r>
 8027210:	6883      	ldr	r3, [r0, #8]
 8027212:	9306      	str	r3, [sp, #24]
 8027214:	9b07      	ldr	r3, [sp, #28]
 8027216:	b12b      	cbz	r3, 8027224 <_vfiprintf_r+0x250>
 8027218:	9b06      	ldr	r3, [sp, #24]
 802721a:	b11b      	cbz	r3, 8027224 <_vfiprintf_r+0x250>
 802721c:	781b      	ldrb	r3, [r3, #0]
 802721e:	b10b      	cbz	r3, 8027224 <_vfiprintf_r+0x250>
 8027220:	f44a 6a80 	orr.w	sl, sl, #1024	@ 0x400
 8027224:	465c      	mov	r4, fp
 8027226:	e75b      	b.n	80270e0 <_vfiprintf_r+0x10c>
 8027228:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 802722c:	2b00      	cmp	r3, #0
 802722e:	d1f9      	bne.n	8027224 <_vfiprintf_r+0x250>
 8027230:	2320      	movs	r3, #32
 8027232:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 8027236:	e7f5      	b.n	8027224 <_vfiprintf_r+0x250>
 8027238:	f04a 0a01 	orr.w	sl, sl, #1
 802723c:	e7f2      	b.n	8027224 <_vfiprintf_r+0x250>
 802723e:	f855 3b04 	ldr.w	r3, [r5], #4
 8027242:	9302      	str	r3, [sp, #8]
 8027244:	2b00      	cmp	r3, #0
 8027246:	daed      	bge.n	8027224 <_vfiprintf_r+0x250>
 8027248:	425b      	negs	r3, r3
 802724a:	9302      	str	r3, [sp, #8]
 802724c:	f04a 0a04 	orr.w	sl, sl, #4
 8027250:	e7e8      	b.n	8027224 <_vfiprintf_r+0x250>
 8027252:	232b      	movs	r3, #43	@ 0x2b
 8027254:	e7ed      	b.n	8027232 <_vfiprintf_r+0x25e>
 8027256:	465a      	mov	r2, fp
 8027258:	f812 3b01 	ldrb.w	r3, [r2], #1
 802725c:	2b2a      	cmp	r3, #42	@ 0x2a
 802725e:	d112      	bne.n	8027286 <_vfiprintf_r+0x2b2>
 8027260:	f855 3b04 	ldr.w	r3, [r5], #4
 8027264:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8027268:	9301      	str	r3, [sp, #4]
 802726a:	4693      	mov	fp, r2
 802726c:	e7da      	b.n	8027224 <_vfiprintf_r+0x250>
 802726e:	9b01      	ldr	r3, [sp, #4]
 8027270:	fb00 1303 	mla	r3, r0, r3, r1
 8027274:	9301      	str	r3, [sp, #4]
 8027276:	f812 3b01 	ldrb.w	r3, [r2], #1
 802727a:	f1a3 0130 	sub.w	r1, r3, #48	@ 0x30
 802727e:	2909      	cmp	r1, #9
 8027280:	d9f5      	bls.n	802726e <_vfiprintf_r+0x29a>
 8027282:	4693      	mov	fp, r2
 8027284:	e72f      	b.n	80270e6 <_vfiprintf_r+0x112>
 8027286:	2100      	movs	r1, #0
 8027288:	9101      	str	r1, [sp, #4]
 802728a:	200a      	movs	r0, #10
 802728c:	e7f5      	b.n	802727a <_vfiprintf_r+0x2a6>
 802728e:	f04a 0a80 	orr.w	sl, sl, #128	@ 0x80
 8027292:	e7c7      	b.n	8027224 <_vfiprintf_r+0x250>
 8027294:	2100      	movs	r1, #0
 8027296:	465a      	mov	r2, fp
 8027298:	9102      	str	r1, [sp, #8]
 802729a:	200a      	movs	r0, #10
 802729c:	9902      	ldr	r1, [sp, #8]
 802729e:	3b30      	subs	r3, #48	@ 0x30
 80272a0:	fb00 3301 	mla	r3, r0, r1, r3
 80272a4:	9302      	str	r3, [sp, #8]
 80272a6:	f812 3b01 	ldrb.w	r3, [r2], #1
 80272aa:	f1a3 0130 	sub.w	r1, r3, #48	@ 0x30
 80272ae:	2909      	cmp	r1, #9
 80272b0:	d9f4      	bls.n	802729c <_vfiprintf_r+0x2c8>
 80272b2:	e7e6      	b.n	8027282 <_vfiprintf_r+0x2ae>
 80272b4:	f89b 3000 	ldrb.w	r3, [fp]
 80272b8:	2b68      	cmp	r3, #104	@ 0x68
 80272ba:	bf06      	itte	eq
 80272bc:	f10b 0b01 	addeq.w	fp, fp, #1
 80272c0:	f44a 7a00 	orreq.w	sl, sl, #512	@ 0x200
 80272c4:	f04a 0a40 	orrne.w	sl, sl, #64	@ 0x40
 80272c8:	e7ac      	b.n	8027224 <_vfiprintf_r+0x250>
 80272ca:	f89b 3000 	ldrb.w	r3, [fp]
 80272ce:	2b6c      	cmp	r3, #108	@ 0x6c
 80272d0:	d104      	bne.n	80272dc <_vfiprintf_r+0x308>
 80272d2:	f10b 0b01 	add.w	fp, fp, #1
 80272d6:	f04a 0a20 	orr.w	sl, sl, #32
 80272da:	e7a3      	b.n	8027224 <_vfiprintf_r+0x250>
 80272dc:	f04a 0a10 	orr.w	sl, sl, #16
 80272e0:	e7a0      	b.n	8027224 <_vfiprintf_r+0x250>
 80272e2:	46a8      	mov	r8, r5
 80272e4:	2400      	movs	r4, #0
 80272e6:	f858 3b04 	ldr.w	r3, [r8], #4
 80272ea:	f88d 3084 	strb.w	r3, [sp, #132]	@ 0x84
 80272ee:	f88d 4033 	strb.w	r4, [sp, #51]	@ 0x33
 80272f2:	2301      	movs	r3, #1
 80272f4:	9301      	str	r3, [sp, #4]
 80272f6:	f10d 0984 	add.w	r9, sp, #132	@ 0x84
 80272fa:	e0ab      	b.n	8027454 <_vfiprintf_r+0x480>
 80272fc:	f04a 0a10 	orr.w	sl, sl, #16
 8027300:	f01a 0f20 	tst.w	sl, #32
 8027304:	d011      	beq.n	802732a <_vfiprintf_r+0x356>
 8027306:	3507      	adds	r5, #7
 8027308:	f025 0507 	bic.w	r5, r5, #7
 802730c:	46a8      	mov	r8, r5
 802730e:	686d      	ldr	r5, [r5, #4]
 8027310:	f858 4b08 	ldr.w	r4, [r8], #8
 8027314:	2d00      	cmp	r5, #0
 8027316:	da06      	bge.n	8027326 <_vfiprintf_r+0x352>
 8027318:	4264      	negs	r4, r4
 802731a:	f04f 032d 	mov.w	r3, #45	@ 0x2d
 802731e:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 8027322:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 8027326:	2301      	movs	r3, #1
 8027328:	e048      	b.n	80273bc <_vfiprintf_r+0x3e8>
 802732a:	46a8      	mov	r8, r5
 802732c:	f01a 0f10 	tst.w	sl, #16
 8027330:	f858 5b04 	ldr.w	r5, [r8], #4
 8027334:	d002      	beq.n	802733c <_vfiprintf_r+0x368>
 8027336:	462c      	mov	r4, r5
 8027338:	17ed      	asrs	r5, r5, #31
 802733a:	e7eb      	b.n	8027314 <_vfiprintf_r+0x340>
 802733c:	f01a 0f40 	tst.w	sl, #64	@ 0x40
 8027340:	d003      	beq.n	802734a <_vfiprintf_r+0x376>
 8027342:	b22c      	sxth	r4, r5
 8027344:	f345 35c0 	sbfx	r5, r5, #15, #1
 8027348:	e7e4      	b.n	8027314 <_vfiprintf_r+0x340>
 802734a:	f41a 7f00 	tst.w	sl, #512	@ 0x200
 802734e:	d0f2      	beq.n	8027336 <_vfiprintf_r+0x362>
 8027350:	b26c      	sxtb	r4, r5
 8027352:	f345 15c0 	sbfx	r5, r5, #7, #1
 8027356:	e7dd      	b.n	8027314 <_vfiprintf_r+0x340>
 8027358:	f01a 0f20 	tst.w	sl, #32
 802735c:	d007      	beq.n	802736e <_vfiprintf_r+0x39a>
 802735e:	9a03      	ldr	r2, [sp, #12]
 8027360:	682b      	ldr	r3, [r5, #0]
 8027362:	9903      	ldr	r1, [sp, #12]
 8027364:	17d2      	asrs	r2, r2, #31
 8027366:	e9c3 1200 	strd	r1, r2, [r3]
 802736a:	3504      	adds	r5, #4
 802736c:	e693      	b.n	8027096 <_vfiprintf_r+0xc2>
 802736e:	f01a 0f10 	tst.w	sl, #16
 8027372:	d003      	beq.n	802737c <_vfiprintf_r+0x3a8>
 8027374:	682b      	ldr	r3, [r5, #0]
 8027376:	9a03      	ldr	r2, [sp, #12]
 8027378:	601a      	str	r2, [r3, #0]
 802737a:	e7f6      	b.n	802736a <_vfiprintf_r+0x396>
 802737c:	f01a 0f40 	tst.w	sl, #64	@ 0x40
 8027380:	d003      	beq.n	802738a <_vfiprintf_r+0x3b6>
 8027382:	682b      	ldr	r3, [r5, #0]
 8027384:	9a03      	ldr	r2, [sp, #12]
 8027386:	801a      	strh	r2, [r3, #0]
 8027388:	e7ef      	b.n	802736a <_vfiprintf_r+0x396>
 802738a:	f41a 7f00 	tst.w	sl, #512	@ 0x200
 802738e:	d0f1      	beq.n	8027374 <_vfiprintf_r+0x3a0>
 8027390:	682b      	ldr	r3, [r5, #0]
 8027392:	9a03      	ldr	r2, [sp, #12]
 8027394:	701a      	strb	r2, [r3, #0]
 8027396:	e7e8      	b.n	802736a <_vfiprintf_r+0x396>
 8027398:	f04a 0a10 	orr.w	sl, sl, #16
 802739c:	f01a 0320 	ands.w	r3, sl, #32
 80273a0:	d01f      	beq.n	80273e2 <_vfiprintf_r+0x40e>
 80273a2:	3507      	adds	r5, #7
 80273a4:	f025 0507 	bic.w	r5, r5, #7
 80273a8:	46a8      	mov	r8, r5
 80273aa:	686d      	ldr	r5, [r5, #4]
 80273ac:	f858 4b08 	ldr.w	r4, [r8], #8
 80273b0:	f42a 6a80 	bic.w	sl, sl, #1024	@ 0x400
 80273b4:	2300      	movs	r3, #0
 80273b6:	2200      	movs	r2, #0
 80273b8:	f88d 2033 	strb.w	r2, [sp, #51]	@ 0x33
 80273bc:	9a01      	ldr	r2, [sp, #4]
 80273be:	3201      	adds	r2, #1
 80273c0:	f000 825f 	beq.w	8027882 <_vfiprintf_r+0x8ae>
 80273c4:	f02a 0280 	bic.w	r2, sl, #128	@ 0x80
 80273c8:	9204      	str	r2, [sp, #16]
 80273ca:	ea54 0205 	orrs.w	r2, r4, r5
 80273ce:	f040 825e 	bne.w	802788e <_vfiprintf_r+0x8ba>
 80273d2:	9a01      	ldr	r2, [sp, #4]
 80273d4:	2a00      	cmp	r2, #0
 80273d6:	f000 8198 	beq.w	802770a <_vfiprintf_r+0x736>
 80273da:	2b01      	cmp	r3, #1
 80273dc:	f040 825a 	bne.w	8027894 <_vfiprintf_r+0x8c0>
 80273e0:	e13b      	b.n	802765a <_vfiprintf_r+0x686>
 80273e2:	46a8      	mov	r8, r5
 80273e4:	f01a 0510 	ands.w	r5, sl, #16
 80273e8:	f858 4b04 	ldr.w	r4, [r8], #4
 80273ec:	d001      	beq.n	80273f2 <_vfiprintf_r+0x41e>
 80273ee:	461d      	mov	r5, r3
 80273f0:	e7de      	b.n	80273b0 <_vfiprintf_r+0x3dc>
 80273f2:	f01a 0340 	ands.w	r3, sl, #64	@ 0x40
 80273f6:	d001      	beq.n	80273fc <_vfiprintf_r+0x428>
 80273f8:	b2a4      	uxth	r4, r4
 80273fa:	e7d9      	b.n	80273b0 <_vfiprintf_r+0x3dc>
 80273fc:	f41a 7500 	ands.w	r5, sl, #512	@ 0x200
 8027400:	d0d6      	beq.n	80273b0 <_vfiprintf_r+0x3dc>
 8027402:	b2e4      	uxtb	r4, r4
 8027404:	e7f3      	b.n	80273ee <_vfiprintf_r+0x41a>
 8027406:	46a8      	mov	r8, r5
 8027408:	f647 0330 	movw	r3, #30768	@ 0x7830
 802740c:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 8027410:	f858 4b04 	ldr.w	r4, [r8], #4
 8027414:	4b03      	ldr	r3, [pc, #12]	@ (8027424 <_vfiprintf_r+0x450>)
 8027416:	9305      	str	r3, [sp, #20]
 8027418:	2500      	movs	r5, #0
 802741a:	f04a 0a02 	orr.w	sl, sl, #2
 802741e:	2302      	movs	r3, #2
 8027420:	e7c9      	b.n	80273b6 <_vfiprintf_r+0x3e2>
 8027422:	bf00      	nop
 8027424:	080af9a0 	.word	0x080af9a0
 8027428:	9b01      	ldr	r3, [sp, #4]
 802742a:	46a8      	mov	r8, r5
 802742c:	1c5c      	adds	r4, r3, #1
 802742e:	f04f 0500 	mov.w	r5, #0
 8027432:	f858 9b04 	ldr.w	r9, [r8], #4
 8027436:	f88d 5033 	strb.w	r5, [sp, #51]	@ 0x33
 802743a:	f000 80d0 	beq.w	80275de <_vfiprintf_r+0x60a>
 802743e:	461a      	mov	r2, r3
 8027440:	4629      	mov	r1, r5
 8027442:	4648      	mov	r0, r9
 8027444:	f7de fedc 	bl	8006200 <memchr>
 8027448:	4604      	mov	r4, r0
 802744a:	b118      	cbz	r0, 8027454 <_vfiprintf_r+0x480>
 802744c:	eba0 0309 	sub.w	r3, r0, r9
 8027450:	9301      	str	r3, [sp, #4]
 8027452:	462c      	mov	r4, r5
 8027454:	9b01      	ldr	r3, [sp, #4]
 8027456:	42a3      	cmp	r3, r4
 8027458:	bfb8      	it	lt
 802745a:	4623      	movlt	r3, r4
 802745c:	9304      	str	r3, [sp, #16]
 802745e:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8027462:	b113      	cbz	r3, 802746a <_vfiprintf_r+0x496>
 8027464:	9b04      	ldr	r3, [sp, #16]
 8027466:	3301      	adds	r3, #1
 8027468:	9304      	str	r3, [sp, #16]
 802746a:	f01a 0302 	ands.w	r3, sl, #2
 802746e:	9308      	str	r3, [sp, #32]
 8027470:	bf1e      	ittt	ne
 8027472:	9b04      	ldrne	r3, [sp, #16]
 8027474:	3302      	addne	r3, #2
 8027476:	9304      	strne	r3, [sp, #16]
 8027478:	f01a 0384 	ands.w	r3, sl, #132	@ 0x84
 802747c:	930a      	str	r3, [sp, #40]	@ 0x28
 802747e:	d11f      	bne.n	80274c0 <_vfiprintf_r+0x4ec>
 8027480:	9b02      	ldr	r3, [sp, #8]
 8027482:	9a04      	ldr	r2, [sp, #16]
 8027484:	1a9d      	subs	r5, r3, r2
 8027486:	2d00      	cmp	r5, #0
 8027488:	dd1a      	ble.n	80274c0 <_vfiprintf_r+0x4ec>
 802748a:	4ba9      	ldr	r3, [pc, #676]	@ (8027730 <_vfiprintf_r+0x75c>)
 802748c:	6033      	str	r3, [r6, #0]
 802748e:	e9dd 2c0f 	ldrd	r2, ip, [sp, #60]	@ 0x3c
 8027492:	2d10      	cmp	r5, #16
 8027494:	f102 0201 	add.w	r2, r2, #1
 8027498:	f106 0008 	add.w	r0, r6, #8
 802749c:	f300 814e 	bgt.w	802773c <_vfiprintf_r+0x768>
 80274a0:	6075      	str	r5, [r6, #4]
 80274a2:	2a07      	cmp	r2, #7
 80274a4:	4465      	add	r5, ip
 80274a6:	e9cd 250f 	strd	r2, r5, [sp, #60]	@ 0x3c
 80274aa:	f340 815a 	ble.w	8027762 <_vfiprintf_r+0x78e>
 80274ae:	9800      	ldr	r0, [sp, #0]
 80274b0:	aa0e      	add	r2, sp, #56	@ 0x38
 80274b2:	4639      	mov	r1, r7
 80274b4:	f7ff fd5c 	bl	8026f70 <__sprint_r>
 80274b8:	2800      	cmp	r0, #0
 80274ba:	f040 81b4 	bne.w	8027826 <_vfiprintf_r+0x852>
 80274be:	ae11      	add	r6, sp, #68	@ 0x44
 80274c0:	f89d 1033 	ldrb.w	r1, [sp, #51]	@ 0x33
 80274c4:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 80274c8:	b161      	cbz	r1, 80274e4 <_vfiprintf_r+0x510>
 80274ca:	f10d 0133 	add.w	r1, sp, #51	@ 0x33
 80274ce:	3301      	adds	r3, #1
 80274d0:	6031      	str	r1, [r6, #0]
 80274d2:	2101      	movs	r1, #1
 80274d4:	440a      	add	r2, r1
 80274d6:	2b07      	cmp	r3, #7
 80274d8:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 80274dc:	6071      	str	r1, [r6, #4]
 80274de:	f300 8142 	bgt.w	8027766 <_vfiprintf_r+0x792>
 80274e2:	3608      	adds	r6, #8
 80274e4:	9908      	ldr	r1, [sp, #32]
 80274e6:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 80274ea:	b159      	cbz	r1, 8027504 <_vfiprintf_r+0x530>
 80274ec:	a90d      	add	r1, sp, #52	@ 0x34
 80274ee:	3301      	adds	r3, #1
 80274f0:	6031      	str	r1, [r6, #0]
 80274f2:	2102      	movs	r1, #2
 80274f4:	440a      	add	r2, r1
 80274f6:	2b07      	cmp	r3, #7
 80274f8:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 80274fc:	6071      	str	r1, [r6, #4]
 80274fe:	f300 813b 	bgt.w	8027778 <_vfiprintf_r+0x7a4>
 8027502:	3608      	adds	r6, #8
 8027504:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8027506:	2b80      	cmp	r3, #128	@ 0x80
 8027508:	d11f      	bne.n	802754a <_vfiprintf_r+0x576>
 802750a:	9b02      	ldr	r3, [sp, #8]
 802750c:	9a04      	ldr	r2, [sp, #16]
 802750e:	1a9d      	subs	r5, r3, r2
 8027510:	2d00      	cmp	r5, #0
 8027512:	dd1a      	ble.n	802754a <_vfiprintf_r+0x576>
 8027514:	4b87      	ldr	r3, [pc, #540]	@ (8027734 <_vfiprintf_r+0x760>)
 8027516:	6033      	str	r3, [r6, #0]
 8027518:	e9dd 2c0f 	ldrd	r2, ip, [sp, #60]	@ 0x3c
 802751c:	2d10      	cmp	r5, #16
 802751e:	f102 0201 	add.w	r2, r2, #1
 8027522:	f106 0008 	add.w	r0, r6, #8
 8027526:	f300 8130 	bgt.w	802778a <_vfiprintf_r+0x7b6>
 802752a:	6075      	str	r5, [r6, #4]
 802752c:	2a07      	cmp	r2, #7
 802752e:	4465      	add	r5, ip
 8027530:	e9cd 250f 	strd	r2, r5, [sp, #60]	@ 0x3c
 8027534:	f340 813c 	ble.w	80277b0 <_vfiprintf_r+0x7dc>
 8027538:	9800      	ldr	r0, [sp, #0]
 802753a:	aa0e      	add	r2, sp, #56	@ 0x38
 802753c:	4639      	mov	r1, r7
 802753e:	f7ff fd17 	bl	8026f70 <__sprint_r>
 8027542:	2800      	cmp	r0, #0
 8027544:	f040 816f 	bne.w	8027826 <_vfiprintf_r+0x852>
 8027548:	ae11      	add	r6, sp, #68	@ 0x44
 802754a:	9b01      	ldr	r3, [sp, #4]
 802754c:	1ae4      	subs	r4, r4, r3
 802754e:	2c00      	cmp	r4, #0
 8027550:	dd1a      	ble.n	8027588 <_vfiprintf_r+0x5b4>
 8027552:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 8027556:	4877      	ldr	r0, [pc, #476]	@ (8027734 <_vfiprintf_r+0x760>)
 8027558:	6030      	str	r0, [r6, #0]
 802755a:	2c10      	cmp	r4, #16
 802755c:	f103 0301 	add.w	r3, r3, #1
 8027560:	f106 0108 	add.w	r1, r6, #8
 8027564:	f300 8126 	bgt.w	80277b4 <_vfiprintf_r+0x7e0>
 8027568:	6074      	str	r4, [r6, #4]
 802756a:	2b07      	cmp	r3, #7
 802756c:	4414      	add	r4, r2
 802756e:	e9cd 340f 	strd	r3, r4, [sp, #60]	@ 0x3c
 8027572:	f340 8130 	ble.w	80277d6 <_vfiprintf_r+0x802>
 8027576:	9800      	ldr	r0, [sp, #0]
 8027578:	aa0e      	add	r2, sp, #56	@ 0x38
 802757a:	4639      	mov	r1, r7
 802757c:	f7ff fcf8 	bl	8026f70 <__sprint_r>
 8027580:	2800      	cmp	r0, #0
 8027582:	f040 8150 	bne.w	8027826 <_vfiprintf_r+0x852>
 8027586:	ae11      	add	r6, sp, #68	@ 0x44
 8027588:	9b01      	ldr	r3, [sp, #4]
 802758a:	9a01      	ldr	r2, [sp, #4]
 802758c:	6073      	str	r3, [r6, #4]
 802758e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8027590:	f8c6 9000 	str.w	r9, [r6]
 8027594:	4413      	add	r3, r2
 8027596:	9310      	str	r3, [sp, #64]	@ 0x40
 8027598:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802759a:	3301      	adds	r3, #1
 802759c:	2b07      	cmp	r3, #7
 802759e:	930f      	str	r3, [sp, #60]	@ 0x3c
 80275a0:	f300 811b 	bgt.w	80277da <_vfiprintf_r+0x806>
 80275a4:	f106 0308 	add.w	r3, r6, #8
 80275a8:	f01a 0f04 	tst.w	sl, #4
 80275ac:	f040 811d 	bne.w	80277ea <_vfiprintf_r+0x816>
 80275b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80275b4:	9904      	ldr	r1, [sp, #16]
 80275b6:	428a      	cmp	r2, r1
 80275b8:	bfac      	ite	ge
 80275ba:	189b      	addge	r3, r3, r2
 80275bc:	185b      	addlt	r3, r3, r1
 80275be:	9303      	str	r3, [sp, #12]
 80275c0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80275c2:	b13b      	cbz	r3, 80275d4 <_vfiprintf_r+0x600>
 80275c4:	9800      	ldr	r0, [sp, #0]
 80275c6:	aa0e      	add	r2, sp, #56	@ 0x38
 80275c8:	4639      	mov	r1, r7
 80275ca:	f7ff fcd1 	bl	8026f70 <__sprint_r>
 80275ce:	2800      	cmp	r0, #0
 80275d0:	f040 8129 	bne.w	8027826 <_vfiprintf_r+0x852>
 80275d4:	2300      	movs	r3, #0
 80275d6:	930f      	str	r3, [sp, #60]	@ 0x3c
 80275d8:	4645      	mov	r5, r8
 80275da:	ae11      	add	r6, sp, #68	@ 0x44
 80275dc:	e55b      	b.n	8027096 <_vfiprintf_r+0xc2>
 80275de:	4648      	mov	r0, r9
 80275e0:	f7de fe5e 	bl	80062a0 <strlen>
 80275e4:	9001      	str	r0, [sp, #4]
 80275e6:	e734      	b.n	8027452 <_vfiprintf_r+0x47e>
 80275e8:	f04a 0a10 	orr.w	sl, sl, #16
 80275ec:	f01a 0320 	ands.w	r3, sl, #32
 80275f0:	d008      	beq.n	8027604 <_vfiprintf_r+0x630>
 80275f2:	3507      	adds	r5, #7
 80275f4:	f025 0507 	bic.w	r5, r5, #7
 80275f8:	46a8      	mov	r8, r5
 80275fa:	686d      	ldr	r5, [r5, #4]
 80275fc:	f858 4b08 	ldr.w	r4, [r8], #8
 8027600:	2301      	movs	r3, #1
 8027602:	e6d8      	b.n	80273b6 <_vfiprintf_r+0x3e2>
 8027604:	46a8      	mov	r8, r5
 8027606:	f01a 0510 	ands.w	r5, sl, #16
 802760a:	f858 4b04 	ldr.w	r4, [r8], #4
 802760e:	d001      	beq.n	8027614 <_vfiprintf_r+0x640>
 8027610:	461d      	mov	r5, r3
 8027612:	e7f5      	b.n	8027600 <_vfiprintf_r+0x62c>
 8027614:	f01a 0340 	ands.w	r3, sl, #64	@ 0x40
 8027618:	d001      	beq.n	802761e <_vfiprintf_r+0x64a>
 802761a:	b2a4      	uxth	r4, r4
 802761c:	e7f0      	b.n	8027600 <_vfiprintf_r+0x62c>
 802761e:	f41a 7500 	ands.w	r5, sl, #512	@ 0x200
 8027622:	d0ed      	beq.n	8027600 <_vfiprintf_r+0x62c>
 8027624:	b2e4      	uxtb	r4, r4
 8027626:	e7f3      	b.n	8027610 <_vfiprintf_r+0x63c>
 8027628:	4a43      	ldr	r2, [pc, #268]	@ (8027738 <_vfiprintf_r+0x764>)
 802762a:	e5c9      	b.n	80271c0 <_vfiprintf_r+0x1ec>
 802762c:	46a8      	mov	r8, r5
 802762e:	f01a 0510 	ands.w	r5, sl, #16
 8027632:	f858 4b04 	ldr.w	r4, [r8], #4
 8027636:	d001      	beq.n	802763c <_vfiprintf_r+0x668>
 8027638:	4615      	mov	r5, r2
 802763a:	e5cd      	b.n	80271d8 <_vfiprintf_r+0x204>
 802763c:	f01a 0240 	ands.w	r2, sl, #64	@ 0x40
 8027640:	d001      	beq.n	8027646 <_vfiprintf_r+0x672>
 8027642:	b2a4      	uxth	r4, r4
 8027644:	e5c8      	b.n	80271d8 <_vfiprintf_r+0x204>
 8027646:	f41a 7500 	ands.w	r5, sl, #512	@ 0x200
 802764a:	f43f adc5 	beq.w	80271d8 <_vfiprintf_r+0x204>
 802764e:	b2e4      	uxtb	r4, r4
 8027650:	e7f2      	b.n	8027638 <_vfiprintf_r+0x664>
 8027652:	2c0a      	cmp	r4, #10
 8027654:	f175 0300 	sbcs.w	r3, r5, #0
 8027658:	d206      	bcs.n	8027668 <_vfiprintf_r+0x694>
 802765a:	3430      	adds	r4, #48	@ 0x30
 802765c:	b2e4      	uxtb	r4, r4
 802765e:	f88d 40e7 	strb.w	r4, [sp, #231]	@ 0xe7
 8027662:	f10d 09e7 	add.w	r9, sp, #231	@ 0xe7
 8027666:	e131      	b.n	80278cc <_vfiprintf_r+0x8f8>
 8027668:	ab3a      	add	r3, sp, #232	@ 0xe8
 802766a:	9308      	str	r3, [sp, #32]
 802766c:	9b04      	ldr	r3, [sp, #16]
 802766e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8027672:	f04f 0a00 	mov.w	sl, #0
 8027676:	930a      	str	r3, [sp, #40]	@ 0x28
 8027678:	220a      	movs	r2, #10
 802767a:	2300      	movs	r3, #0
 802767c:	4620      	mov	r0, r4
 802767e:	4629      	mov	r1, r5
 8027680:	f7df fafa 	bl	8006c78 <__aeabi_uldivmod>
 8027684:	460b      	mov	r3, r1
 8027686:	9908      	ldr	r1, [sp, #32]
 8027688:	900b      	str	r0, [sp, #44]	@ 0x2c
 802768a:	3230      	adds	r2, #48	@ 0x30
 802768c:	f801 2c01 	strb.w	r2, [r1, #-1]
 8027690:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8027692:	f101 39ff 	add.w	r9, r1, #4294967295	@ 0xffffffff
 8027696:	f10a 0a01 	add.w	sl, sl, #1
 802769a:	b1e2      	cbz	r2, 80276d6 <_vfiprintf_r+0x702>
 802769c:	9a06      	ldr	r2, [sp, #24]
 802769e:	7812      	ldrb	r2, [r2, #0]
 80276a0:	4552      	cmp	r2, sl
 80276a2:	d118      	bne.n	80276d6 <_vfiprintf_r+0x702>
 80276a4:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
 80276a8:	d015      	beq.n	80276d6 <_vfiprintf_r+0x702>
 80276aa:	2c0a      	cmp	r4, #10
 80276ac:	f175 0200 	sbcs.w	r2, r5, #0
 80276b0:	d311      	bcc.n	80276d6 <_vfiprintf_r+0x702>
 80276b2:	9308      	str	r3, [sp, #32]
 80276b4:	9b07      	ldr	r3, [sp, #28]
 80276b6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80276b8:	eba9 0903 	sub.w	r9, r9, r3
 80276bc:	461a      	mov	r2, r3
 80276be:	4648      	mov	r0, r9
 80276c0:	f7fe f927 	bl	8025912 <strncpy>
 80276c4:	9b06      	ldr	r3, [sp, #24]
 80276c6:	785a      	ldrb	r2, [r3, #1]
 80276c8:	9b08      	ldr	r3, [sp, #32]
 80276ca:	b172      	cbz	r2, 80276ea <_vfiprintf_r+0x716>
 80276cc:	9a06      	ldr	r2, [sp, #24]
 80276ce:	3201      	adds	r2, #1
 80276d0:	9206      	str	r2, [sp, #24]
 80276d2:	f04f 0a00 	mov.w	sl, #0
 80276d6:	2c0a      	cmp	r4, #10
 80276d8:	f175 0500 	sbcs.w	r5, r5, #0
 80276dc:	f0c0 80f6 	bcc.w	80278cc <_vfiprintf_r+0x8f8>
 80276e0:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80276e2:	f8cd 9020 	str.w	r9, [sp, #32]
 80276e6:	461d      	mov	r5, r3
 80276e8:	e7c6      	b.n	8027678 <_vfiprintf_r+0x6a4>
 80276ea:	4692      	mov	sl, r2
 80276ec:	e7f3      	b.n	80276d6 <_vfiprintf_r+0x702>
 80276ee:	f004 030f 	and.w	r3, r4, #15
 80276f2:	9a05      	ldr	r2, [sp, #20]
 80276f4:	0924      	lsrs	r4, r4, #4
 80276f6:	5cd3      	ldrb	r3, [r2, r3]
 80276f8:	f809 3d01 	strb.w	r3, [r9, #-1]!
 80276fc:	ea44 7405 	orr.w	r4, r4, r5, lsl #28
 8027700:	092d      	lsrs	r5, r5, #4
 8027702:	ea54 0305 	orrs.w	r3, r4, r5
 8027706:	d1f2      	bne.n	80276ee <_vfiprintf_r+0x71a>
 8027708:	e0e0      	b.n	80278cc <_vfiprintf_r+0x8f8>
 802770a:	b923      	cbnz	r3, 8027716 <_vfiprintf_r+0x742>
 802770c:	f01a 0f01 	tst.w	sl, #1
 8027710:	d001      	beq.n	8027716 <_vfiprintf_r+0x742>
 8027712:	2430      	movs	r4, #48	@ 0x30
 8027714:	e7a3      	b.n	802765e <_vfiprintf_r+0x68a>
 8027716:	f10d 09e8 	add.w	r9, sp, #232	@ 0xe8
 802771a:	e0d7      	b.n	80278cc <_vfiprintf_r+0x8f8>
 802771c:	2b00      	cmp	r3, #0
 802771e:	f000 80a3 	beq.w	8027868 <_vfiprintf_r+0x894>
 8027722:	2400      	movs	r4, #0
 8027724:	f88d 3084 	strb.w	r3, [sp, #132]	@ 0x84
 8027728:	f88d 4033 	strb.w	r4, [sp, #51]	@ 0x33
 802772c:	46a8      	mov	r8, r5
 802772e:	e5e0      	b.n	80272f2 <_vfiprintf_r+0x31e>
 8027730:	080afd07 	.word	0x080afd07
 8027734:	080afcf7 	.word	0x080afcf7
 8027738:	080af9b1 	.word	0x080af9b1
 802773c:	2110      	movs	r1, #16
 802773e:	6071      	str	r1, [r6, #4]
 8027740:	2a07      	cmp	r2, #7
 8027742:	4461      	add	r1, ip
 8027744:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 8027748:	dd08      	ble.n	802775c <_vfiprintf_r+0x788>
 802774a:	9800      	ldr	r0, [sp, #0]
 802774c:	aa0e      	add	r2, sp, #56	@ 0x38
 802774e:	4639      	mov	r1, r7
 8027750:	f7ff fc0e 	bl	8026f70 <__sprint_r>
 8027754:	2800      	cmp	r0, #0
 8027756:	d166      	bne.n	8027826 <_vfiprintf_r+0x852>
 8027758:	4b60      	ldr	r3, [pc, #384]	@ (80278dc <_vfiprintf_r+0x908>)
 802775a:	a811      	add	r0, sp, #68	@ 0x44
 802775c:	3d10      	subs	r5, #16
 802775e:	4606      	mov	r6, r0
 8027760:	e694      	b.n	802748c <_vfiprintf_r+0x4b8>
 8027762:	4606      	mov	r6, r0
 8027764:	e6ac      	b.n	80274c0 <_vfiprintf_r+0x4ec>
 8027766:	9800      	ldr	r0, [sp, #0]
 8027768:	aa0e      	add	r2, sp, #56	@ 0x38
 802776a:	4639      	mov	r1, r7
 802776c:	f7ff fc00 	bl	8026f70 <__sprint_r>
 8027770:	2800      	cmp	r0, #0
 8027772:	d158      	bne.n	8027826 <_vfiprintf_r+0x852>
 8027774:	ae11      	add	r6, sp, #68	@ 0x44
 8027776:	e6b5      	b.n	80274e4 <_vfiprintf_r+0x510>
 8027778:	9800      	ldr	r0, [sp, #0]
 802777a:	aa0e      	add	r2, sp, #56	@ 0x38
 802777c:	4639      	mov	r1, r7
 802777e:	f7ff fbf7 	bl	8026f70 <__sprint_r>
 8027782:	2800      	cmp	r0, #0
 8027784:	d14f      	bne.n	8027826 <_vfiprintf_r+0x852>
 8027786:	ae11      	add	r6, sp, #68	@ 0x44
 8027788:	e6bc      	b.n	8027504 <_vfiprintf_r+0x530>
 802778a:	2110      	movs	r1, #16
 802778c:	6071      	str	r1, [r6, #4]
 802778e:	2a07      	cmp	r2, #7
 8027790:	4461      	add	r1, ip
 8027792:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 8027796:	dd08      	ble.n	80277aa <_vfiprintf_r+0x7d6>
 8027798:	9800      	ldr	r0, [sp, #0]
 802779a:	aa0e      	add	r2, sp, #56	@ 0x38
 802779c:	4639      	mov	r1, r7
 802779e:	f7ff fbe7 	bl	8026f70 <__sprint_r>
 80277a2:	2800      	cmp	r0, #0
 80277a4:	d13f      	bne.n	8027826 <_vfiprintf_r+0x852>
 80277a6:	4b4e      	ldr	r3, [pc, #312]	@ (80278e0 <_vfiprintf_r+0x90c>)
 80277a8:	a811      	add	r0, sp, #68	@ 0x44
 80277aa:	3d10      	subs	r5, #16
 80277ac:	4606      	mov	r6, r0
 80277ae:	e6b2      	b.n	8027516 <_vfiprintf_r+0x542>
 80277b0:	4606      	mov	r6, r0
 80277b2:	e6ca      	b.n	802754a <_vfiprintf_r+0x576>
 80277b4:	2010      	movs	r0, #16
 80277b6:	4402      	add	r2, r0
 80277b8:	2b07      	cmp	r3, #7
 80277ba:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 80277be:	6070      	str	r0, [r6, #4]
 80277c0:	dd06      	ble.n	80277d0 <_vfiprintf_r+0x7fc>
 80277c2:	9800      	ldr	r0, [sp, #0]
 80277c4:	aa0e      	add	r2, sp, #56	@ 0x38
 80277c6:	4639      	mov	r1, r7
 80277c8:	f7ff fbd2 	bl	8026f70 <__sprint_r>
 80277cc:	bb58      	cbnz	r0, 8027826 <_vfiprintf_r+0x852>
 80277ce:	a911      	add	r1, sp, #68	@ 0x44
 80277d0:	3c10      	subs	r4, #16
 80277d2:	460e      	mov	r6, r1
 80277d4:	e6bd      	b.n	8027552 <_vfiprintf_r+0x57e>
 80277d6:	460e      	mov	r6, r1
 80277d8:	e6d6      	b.n	8027588 <_vfiprintf_r+0x5b4>
 80277da:	9800      	ldr	r0, [sp, #0]
 80277dc:	aa0e      	add	r2, sp, #56	@ 0x38
 80277de:	4639      	mov	r1, r7
 80277e0:	f7ff fbc6 	bl	8026f70 <__sprint_r>
 80277e4:	b9f8      	cbnz	r0, 8027826 <_vfiprintf_r+0x852>
 80277e6:	ab11      	add	r3, sp, #68	@ 0x44
 80277e8:	e6de      	b.n	80275a8 <_vfiprintf_r+0x5d4>
 80277ea:	9a02      	ldr	r2, [sp, #8]
 80277ec:	9904      	ldr	r1, [sp, #16]
 80277ee:	1a54      	subs	r4, r2, r1
 80277f0:	2c00      	cmp	r4, #0
 80277f2:	f77f aedd 	ble.w	80275b0 <_vfiprintf_r+0x5dc>
 80277f6:	4d39      	ldr	r5, [pc, #228]	@ (80278dc <_vfiprintf_r+0x908>)
 80277f8:	2610      	movs	r6, #16
 80277fa:	e9dd 210f 	ldrd	r2, r1, [sp, #60]	@ 0x3c
 80277fe:	2c10      	cmp	r4, #16
 8027800:	f102 0201 	add.w	r2, r2, #1
 8027804:	601d      	str	r5, [r3, #0]
 8027806:	dc1d      	bgt.n	8027844 <_vfiprintf_r+0x870>
 8027808:	605c      	str	r4, [r3, #4]
 802780a:	2a07      	cmp	r2, #7
 802780c:	440c      	add	r4, r1
 802780e:	e9cd 240f 	strd	r2, r4, [sp, #60]	@ 0x3c
 8027812:	f77f aecd 	ble.w	80275b0 <_vfiprintf_r+0x5dc>
 8027816:	9800      	ldr	r0, [sp, #0]
 8027818:	aa0e      	add	r2, sp, #56	@ 0x38
 802781a:	4639      	mov	r1, r7
 802781c:	f7ff fba8 	bl	8026f70 <__sprint_r>
 8027820:	2800      	cmp	r0, #0
 8027822:	f43f aec5 	beq.w	80275b0 <_vfiprintf_r+0x5dc>
 8027826:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8027828:	07d9      	lsls	r1, r3, #31
 802782a:	d405      	bmi.n	8027838 <_vfiprintf_r+0x864>
 802782c:	89bb      	ldrh	r3, [r7, #12]
 802782e:	059a      	lsls	r2, r3, #22
 8027830:	d402      	bmi.n	8027838 <_vfiprintf_r+0x864>
 8027832:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8027834:	f7fc faf1 	bl	8023e1a <__retarget_lock_release_recursive>
 8027838:	89bb      	ldrh	r3, [r7, #12]
 802783a:	065b      	lsls	r3, r3, #25
 802783c:	f57f abfb 	bpl.w	8027036 <_vfiprintf_r+0x62>
 8027840:	f7ff bbf6 	b.w	8027030 <_vfiprintf_r+0x5c>
 8027844:	3110      	adds	r1, #16
 8027846:	2a07      	cmp	r2, #7
 8027848:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 802784c:	605e      	str	r6, [r3, #4]
 802784e:	dc02      	bgt.n	8027856 <_vfiprintf_r+0x882>
 8027850:	3308      	adds	r3, #8
 8027852:	3c10      	subs	r4, #16
 8027854:	e7d1      	b.n	80277fa <_vfiprintf_r+0x826>
 8027856:	9800      	ldr	r0, [sp, #0]
 8027858:	aa0e      	add	r2, sp, #56	@ 0x38
 802785a:	4639      	mov	r1, r7
 802785c:	f7ff fb88 	bl	8026f70 <__sprint_r>
 8027860:	2800      	cmp	r0, #0
 8027862:	d1e0      	bne.n	8027826 <_vfiprintf_r+0x852>
 8027864:	ab11      	add	r3, sp, #68	@ 0x44
 8027866:	e7f4      	b.n	8027852 <_vfiprintf_r+0x87e>
 8027868:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802786a:	b913      	cbnz	r3, 8027872 <_vfiprintf_r+0x89e>
 802786c:	2300      	movs	r3, #0
 802786e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8027870:	e7d9      	b.n	8027826 <_vfiprintf_r+0x852>
 8027872:	9800      	ldr	r0, [sp, #0]
 8027874:	aa0e      	add	r2, sp, #56	@ 0x38
 8027876:	4639      	mov	r1, r7
 8027878:	f7ff fb7a 	bl	8026f70 <__sprint_r>
 802787c:	2800      	cmp	r0, #0
 802787e:	d0f5      	beq.n	802786c <_vfiprintf_r+0x898>
 8027880:	e7d1      	b.n	8027826 <_vfiprintf_r+0x852>
 8027882:	ea54 0205 	orrs.w	r2, r4, r5
 8027886:	f8cd a010 	str.w	sl, [sp, #16]
 802788a:	f43f ada6 	beq.w	80273da <_vfiprintf_r+0x406>
 802788e:	2b01      	cmp	r3, #1
 8027890:	f43f aedf 	beq.w	8027652 <_vfiprintf_r+0x67e>
 8027894:	2b02      	cmp	r3, #2
 8027896:	f10d 09e8 	add.w	r9, sp, #232	@ 0xe8
 802789a:	f43f af28 	beq.w	80276ee <_vfiprintf_r+0x71a>
 802789e:	f004 0307 	and.w	r3, r4, #7
 80278a2:	08e4      	lsrs	r4, r4, #3
 80278a4:	ea44 7445 	orr.w	r4, r4, r5, lsl #29
 80278a8:	08ed      	lsrs	r5, r5, #3
 80278aa:	3330      	adds	r3, #48	@ 0x30
 80278ac:	ea54 0105 	orrs.w	r1, r4, r5
 80278b0:	464a      	mov	r2, r9
 80278b2:	f809 3d01 	strb.w	r3, [r9, #-1]!
 80278b6:	d1f2      	bne.n	802789e <_vfiprintf_r+0x8ca>
 80278b8:	9904      	ldr	r1, [sp, #16]
 80278ba:	07c8      	lsls	r0, r1, #31
 80278bc:	d506      	bpl.n	80278cc <_vfiprintf_r+0x8f8>
 80278be:	2b30      	cmp	r3, #48	@ 0x30
 80278c0:	d004      	beq.n	80278cc <_vfiprintf_r+0x8f8>
 80278c2:	2330      	movs	r3, #48	@ 0x30
 80278c4:	f809 3c01 	strb.w	r3, [r9, #-1]
 80278c8:	f1a2 0902 	sub.w	r9, r2, #2
 80278cc:	ab3a      	add	r3, sp, #232	@ 0xe8
 80278ce:	eba3 0309 	sub.w	r3, r3, r9
 80278d2:	9c01      	ldr	r4, [sp, #4]
 80278d4:	f8dd a010 	ldr.w	sl, [sp, #16]
 80278d8:	9301      	str	r3, [sp, #4]
 80278da:	e5bb      	b.n	8027454 <_vfiprintf_r+0x480>
 80278dc:	080afd07 	.word	0x080afd07
 80278e0:	080afcf7 	.word	0x080afcf7

080278e4 <__sbprintf>:
 80278e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80278e6:	461f      	mov	r7, r3
 80278e8:	898b      	ldrh	r3, [r1, #12]
 80278ea:	f2ad 4d6c 	subw	sp, sp, #1132	@ 0x46c
 80278ee:	f023 0302 	bic.w	r3, r3, #2
 80278f2:	f8ad 300c 	strh.w	r3, [sp, #12]
 80278f6:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 80278f8:	9319      	str	r3, [sp, #100]	@ 0x64
 80278fa:	89cb      	ldrh	r3, [r1, #14]
 80278fc:	f8ad 300e 	strh.w	r3, [sp, #14]
 8027900:	69cb      	ldr	r3, [r1, #28]
 8027902:	9307      	str	r3, [sp, #28]
 8027904:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
 8027906:	9309      	str	r3, [sp, #36]	@ 0x24
 8027908:	ab1a      	add	r3, sp, #104	@ 0x68
 802790a:	9300      	str	r3, [sp, #0]
 802790c:	9304      	str	r3, [sp, #16]
 802790e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8027912:	4615      	mov	r5, r2
 8027914:	4606      	mov	r6, r0
 8027916:	9302      	str	r3, [sp, #8]
 8027918:	9305      	str	r3, [sp, #20]
 802791a:	a816      	add	r0, sp, #88	@ 0x58
 802791c:	2300      	movs	r3, #0
 802791e:	460c      	mov	r4, r1
 8027920:	9306      	str	r3, [sp, #24]
 8027922:	f7fc fa77 	bl	8023e14 <__retarget_lock_init_recursive>
 8027926:	462a      	mov	r2, r5
 8027928:	463b      	mov	r3, r7
 802792a:	4669      	mov	r1, sp
 802792c:	4630      	mov	r0, r6
 802792e:	f7ff fb51 	bl	8026fd4 <_vfiprintf_r>
 8027932:	1e05      	subs	r5, r0, #0
 8027934:	db07      	blt.n	8027946 <__sbprintf+0x62>
 8027936:	4669      	mov	r1, sp
 8027938:	4630      	mov	r0, r6
 802793a:	f7fd ff39 	bl	80257b0 <_fflush_r>
 802793e:	2800      	cmp	r0, #0
 8027940:	bf18      	it	ne
 8027942:	f04f 35ff 	movne.w	r5, #4294967295	@ 0xffffffff
 8027946:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 802794a:	9816      	ldr	r0, [sp, #88]	@ 0x58
 802794c:	065b      	lsls	r3, r3, #25
 802794e:	bf42      	ittt	mi
 8027950:	89a3      	ldrhmi	r3, [r4, #12]
 8027952:	f043 0340 	orrmi.w	r3, r3, #64	@ 0x40
 8027956:	81a3      	strhmi	r3, [r4, #12]
 8027958:	f7fc fa5d 	bl	8023e16 <__retarget_lock_close_recursive>
 802795c:	4628      	mov	r0, r5
 802795e:	f20d 4d6c 	addw	sp, sp, #1132	@ 0x46c
 8027962:	bdf0      	pop	{r4, r5, r6, r7, pc}

08027964 <__ascii_wctomb>:
 8027964:	4603      	mov	r3, r0
 8027966:	4608      	mov	r0, r1
 8027968:	b141      	cbz	r1, 802797c <__ascii_wctomb+0x18>
 802796a:	2aff      	cmp	r2, #255	@ 0xff
 802796c:	d904      	bls.n	8027978 <__ascii_wctomb+0x14>
 802796e:	228a      	movs	r2, #138	@ 0x8a
 8027970:	601a      	str	r2, [r3, #0]
 8027972:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8027976:	4770      	bx	lr
 8027978:	700a      	strb	r2, [r1, #0]
 802797a:	2001      	movs	r0, #1
 802797c:	4770      	bx	lr

0802797e <__fputwc>:
 802797e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8027982:	4680      	mov	r8, r0
 8027984:	460f      	mov	r7, r1
 8027986:	4614      	mov	r4, r2
 8027988:	f7ff fa74 	bl	8026e74 <__locale_mb_cur_max>
 802798c:	2801      	cmp	r0, #1
 802798e:	4605      	mov	r5, r0
 8027990:	d11b      	bne.n	80279ca <__fputwc+0x4c>
 8027992:	1e7b      	subs	r3, r7, #1
 8027994:	2bfe      	cmp	r3, #254	@ 0xfe
 8027996:	d818      	bhi.n	80279ca <__fputwc+0x4c>
 8027998:	f88d 7004 	strb.w	r7, [sp, #4]
 802799c:	2600      	movs	r6, #0
 802799e:	f10d 0904 	add.w	r9, sp, #4
 80279a2:	42ae      	cmp	r6, r5
 80279a4:	d021      	beq.n	80279ea <__fputwc+0x6c>
 80279a6:	68a3      	ldr	r3, [r4, #8]
 80279a8:	f816 1009 	ldrb.w	r1, [r6, r9]
 80279ac:	3b01      	subs	r3, #1
 80279ae:	2b00      	cmp	r3, #0
 80279b0:	60a3      	str	r3, [r4, #8]
 80279b2:	da04      	bge.n	80279be <__fputwc+0x40>
 80279b4:	69a2      	ldr	r2, [r4, #24]
 80279b6:	4293      	cmp	r3, r2
 80279b8:	db1b      	blt.n	80279f2 <__fputwc+0x74>
 80279ba:	290a      	cmp	r1, #10
 80279bc:	d019      	beq.n	80279f2 <__fputwc+0x74>
 80279be:	6823      	ldr	r3, [r4, #0]
 80279c0:	1c5a      	adds	r2, r3, #1
 80279c2:	6022      	str	r2, [r4, #0]
 80279c4:	7019      	strb	r1, [r3, #0]
 80279c6:	3601      	adds	r6, #1
 80279c8:	e7eb      	b.n	80279a2 <__fputwc+0x24>
 80279ca:	f104 035c 	add.w	r3, r4, #92	@ 0x5c
 80279ce:	463a      	mov	r2, r7
 80279d0:	a901      	add	r1, sp, #4
 80279d2:	4640      	mov	r0, r8
 80279d4:	f000 f83e 	bl	8027a54 <_wcrtomb_r>
 80279d8:	1c43      	adds	r3, r0, #1
 80279da:	4605      	mov	r5, r0
 80279dc:	d1de      	bne.n	802799c <__fputwc+0x1e>
 80279de:	89a3      	ldrh	r3, [r4, #12]
 80279e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80279e4:	81a3      	strh	r3, [r4, #12]
 80279e6:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80279ea:	4638      	mov	r0, r7
 80279ec:	b003      	add	sp, #12
 80279ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80279f2:	4622      	mov	r2, r4
 80279f4:	4640      	mov	r0, r8
 80279f6:	f7fd ff43 	bl	8025880 <__swbuf_r>
 80279fa:	3001      	adds	r0, #1
 80279fc:	d1e3      	bne.n	80279c6 <__fputwc+0x48>
 80279fe:	e7f2      	b.n	80279e6 <__fputwc+0x68>

08027a00 <_fputwc_r>:
 8027a00:	6e53      	ldr	r3, [r2, #100]	@ 0x64
 8027a02:	07db      	lsls	r3, r3, #31
 8027a04:	b570      	push	{r4, r5, r6, lr}
 8027a06:	4605      	mov	r5, r0
 8027a08:	460e      	mov	r6, r1
 8027a0a:	4614      	mov	r4, r2
 8027a0c:	d405      	bmi.n	8027a1a <_fputwc_r+0x1a>
 8027a0e:	8993      	ldrh	r3, [r2, #12]
 8027a10:	0598      	lsls	r0, r3, #22
 8027a12:	d402      	bmi.n	8027a1a <_fputwc_r+0x1a>
 8027a14:	6d90      	ldr	r0, [r2, #88]	@ 0x58
 8027a16:	f7fc f9ff 	bl	8023e18 <__retarget_lock_acquire_recursive>
 8027a1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8027a1e:	0499      	lsls	r1, r3, #18
 8027a20:	d406      	bmi.n	8027a30 <_fputwc_r+0x30>
 8027a22:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8027a26:	81a3      	strh	r3, [r4, #12]
 8027a28:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8027a2a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8027a2e:	6663      	str	r3, [r4, #100]	@ 0x64
 8027a30:	4622      	mov	r2, r4
 8027a32:	4628      	mov	r0, r5
 8027a34:	4631      	mov	r1, r6
 8027a36:	f7ff ffa2 	bl	802797e <__fputwc>
 8027a3a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8027a3c:	07da      	lsls	r2, r3, #31
 8027a3e:	4605      	mov	r5, r0
 8027a40:	d405      	bmi.n	8027a4e <_fputwc_r+0x4e>
 8027a42:	89a3      	ldrh	r3, [r4, #12]
 8027a44:	059b      	lsls	r3, r3, #22
 8027a46:	d402      	bmi.n	8027a4e <_fputwc_r+0x4e>
 8027a48:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8027a4a:	f7fc f9e6 	bl	8023e1a <__retarget_lock_release_recursive>
 8027a4e:	4628      	mov	r0, r5
 8027a50:	bd70      	pop	{r4, r5, r6, pc}
	...

08027a54 <_wcrtomb_r>:
 8027a54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8027a56:	4c09      	ldr	r4, [pc, #36]	@ (8027a7c <_wcrtomb_r+0x28>)
 8027a58:	b085      	sub	sp, #20
 8027a5a:	f8d4 70e0 	ldr.w	r7, [r4, #224]	@ 0xe0
 8027a5e:	4605      	mov	r5, r0
 8027a60:	461e      	mov	r6, r3
 8027a62:	b909      	cbnz	r1, 8027a68 <_wcrtomb_r+0x14>
 8027a64:	460a      	mov	r2, r1
 8027a66:	a901      	add	r1, sp, #4
 8027a68:	47b8      	blx	r7
 8027a6a:	1c43      	adds	r3, r0, #1
 8027a6c:	bf01      	itttt	eq
 8027a6e:	2300      	moveq	r3, #0
 8027a70:	6033      	streq	r3, [r6, #0]
 8027a72:	238a      	moveq	r3, #138	@ 0x8a
 8027a74:	602b      	streq	r3, [r5, #0]
 8027a76:	b005      	add	sp, #20
 8027a78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8027a7a:	bf00      	nop
 8027a7c:	20008974 	.word	0x20008974

08027a80 <_Unwind_GetDataRelBase>:
 8027a80:	b508      	push	{r3, lr}
 8027a82:	f7fb f965 	bl	8022d50 <abort>

08027a86 <_Unwind_GetTextRelBase>:
 8027a86:	b508      	push	{r3, lr}
 8027a88:	f7ff fffa 	bl	8027a80 <_Unwind_GetDataRelBase>

08027a8c <_getpid>:
 8027a8c:	4b02      	ldr	r3, [pc, #8]	@ (8027a98 <_getpid+0xc>)
 8027a8e:	2258      	movs	r2, #88	@ 0x58
 8027a90:	601a      	str	r2, [r3, #0]
 8027a92:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8027a96:	4770      	bx	lr
 8027a98:	2003cfe8 	.word	0x2003cfe8

08027a9c <_kill>:
 8027a9c:	4b02      	ldr	r3, [pc, #8]	@ (8027aa8 <_kill+0xc>)
 8027a9e:	2258      	movs	r2, #88	@ 0x58
 8027aa0:	601a      	str	r2, [r3, #0]
 8027aa2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8027aa6:	4770      	bx	lr
 8027aa8:	2003cfe8 	.word	0x2003cfe8

08027aac <_sbrk>:
 8027aac:	4a04      	ldr	r2, [pc, #16]	@ (8027ac0 <_sbrk+0x14>)
 8027aae:	6811      	ldr	r1, [r2, #0]
 8027ab0:	4603      	mov	r3, r0
 8027ab2:	b909      	cbnz	r1, 8027ab8 <_sbrk+0xc>
 8027ab4:	4903      	ldr	r1, [pc, #12]	@ (8027ac4 <_sbrk+0x18>)
 8027ab6:	6011      	str	r1, [r2, #0]
 8027ab8:	6810      	ldr	r0, [r2, #0]
 8027aba:	4403      	add	r3, r0
 8027abc:	6013      	str	r3, [r2, #0]
 8027abe:	4770      	bx	lr
 8027ac0:	2003cfec 	.word	0x2003cfec
 8027ac4:	2003cff0 	.word	0x2003cff0

08027ac8 <_init>:
 8027ac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8027aca:	bf00      	nop
 8027acc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8027ace:	bc08      	pop	{r3}
 8027ad0:	469e      	mov	lr, r3
 8027ad2:	4770      	bx	lr

08027ad4 <_fini>:
 8027ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8027ad6:	bf00      	nop
 8027ad8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8027ada:	bc08      	pop	{r3}
 8027adc:	469e      	mov	lr, r3
 8027ade:	4770      	bx	lr
